<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="namespaceEBGodunov" kind="namespace" language="C++">
    <compoundname>EBGodunov</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceEBGodunov_1a9253aa6eee4f4740b25e3a44a6bac8de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EBGodunov::ComputeAofs</definition>
        <argsstring>(amrex::MultiFab &amp;aofs, const int aofs_comp, const int ncomp, amrex::MultiFab const &amp;state, const int state_comp, AMREX_D_DECL(amrex::MultiFab const &amp;umac, amrex::MultiFab const &amp;vmac, amrex::MultiFab const &amp;wmac), AMREX_D_DECL(amrex::MultiFab &amp;xedge, amrex::MultiFab &amp;yedge, amrex::MultiFab &amp;zedge), const int edge_comp, const bool known_edgestate, AMREX_D_DECL(amrex::MultiFab &amp;xfluxes, amrex::MultiFab &amp;yfluxes, amrex::MultiFab &amp;zfluxes), int fluxes_comp, amrex::MultiFab const &amp;fq, const int fq_comp, amrex::MultiFab const &amp;divu, amrex::Vector&lt; amrex::BCRec &gt; const &amp;h_bc, amrex::BCRec const *d_bc, amrex::Geometry const &amp;geom, amrex::Gpu::DeviceVector&lt; int &gt; &amp;iconserv, const amrex::Real dt, const bool is_velocity, std::string redistribution_type)</argsstring>
        <name>ComputeAofs</name>
        <param>
          <type>amrex::MultiFab &amp;</type>
          <declname>aofs</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>aofs_comp</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>amrex::MultiFab const &amp;</type>
          <declname>state</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>state_comp</declname>
        </param>
        <param>
          <type>AMREX_D_DECL(amrex::MultiFab const &amp;umac, amrex::MultiFab const &amp;vmac, amrex::MultiFab const &amp;wmac)</type>
        </param>
        <param>
          <type>AMREX_D_DECL(amrex::MultiFab &amp;xedge, amrex::MultiFab &amp;yedge, amrex::MultiFab &amp;zedge)</type>
        </param>
        <param>
          <type>const int</type>
          <declname>edge_comp</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>known_edgestate</declname>
        </param>
        <param>
          <type>AMREX_D_DECL(amrex::MultiFab &amp;xfluxes, amrex::MultiFab &amp;yfluxes, amrex::MultiFab &amp;zfluxes)</type>
        </param>
        <param>
          <type>int</type>
          <declname>fluxes_comp</declname>
        </param>
        <param>
          <type>amrex::MultiFab const &amp;</type>
          <declname>fq</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>fq_comp</declname>
        </param>
        <param>
          <type>amrex::MultiFab const &amp;</type>
          <declname>divu</declname>
        </param>
        <param>
          <type>amrex::Vector&lt; amrex::BCRec &gt; const &amp;</type>
          <declname>h_bc</declname>
        </param>
        <param>
          <type>amrex::BCRec const *</type>
          <declname>d_bc</declname>
        </param>
        <param>
          <type>amrex::Geometry const &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>amrex::Gpu::DeviceVector&lt; int &gt; &amp;</type>
          <declname>iconserv</declname>
        </param>
        <param>
          <type>const amrex::Real</type>
          <declname>dt</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>is_velocity</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>redistribution_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="EBGodunov/hydro_ebgodunov.H" line="11" column="10" declfile="EBGodunov/hydro_ebgodunov.H" declline="11" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceEBGodunov_1a23f99047da7b06589fe28aeb2a4cc074" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EBGodunov::ComputeSyncAofs</definition>
        <argsstring>(amrex::MultiFab &amp;aofs, const int aofs_comp, const int ncomp, amrex::MultiFab const &amp;state, const int state_comp, AMREX_D_DECL(amrex::MultiFab const &amp;umac, amrex::MultiFab const &amp;vmac, amrex::MultiFab const &amp;wmac), AMREX_D_DECL(amrex::MultiFab const &amp;ucorr, amrex::MultiFab const &amp;vcorr, amrex::MultiFab const &amp;wcorr), AMREX_D_DECL(amrex::MultiFab &amp;xedge, amrex::MultiFab &amp;yedge, amrex::MultiFab &amp;zedge), const int edge_comp, const bool known_edgestate, AMREX_D_DECL(amrex::MultiFab &amp;xfluxes, amrex::MultiFab &amp;yfluxes, amrex::MultiFab &amp;zfluxes), int fluxes_comp, amrex::MultiFab const &amp;fq, const int fq_comp, amrex::MultiFab const &amp;divu, amrex::Vector&lt; amrex::BCRec &gt; const &amp;h_bc, amrex::BCRec const *d_bc, amrex::Geometry const &amp;geom, amrex::Gpu::DeviceVector&lt; int &gt; &amp;iconserv, const amrex::Real dt, const bool is_velocity, std::string redistribution_type)</argsstring>
        <name>ComputeSyncAofs</name>
        <param>
          <type>amrex::MultiFab &amp;</type>
          <declname>aofs</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>aofs_comp</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>amrex::MultiFab const &amp;</type>
          <declname>state</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>state_comp</declname>
        </param>
        <param>
          <type>AMREX_D_DECL(amrex::MultiFab const &amp;umac, amrex::MultiFab const &amp;vmac, amrex::MultiFab const &amp;wmac)</type>
        </param>
        <param>
          <type>AMREX_D_DECL(amrex::MultiFab const &amp;ucorr, amrex::MultiFab const &amp;vcorr, amrex::MultiFab const &amp;wcorr)</type>
        </param>
        <param>
          <type>AMREX_D_DECL(amrex::MultiFab &amp;xedge, amrex::MultiFab &amp;yedge, amrex::MultiFab &amp;zedge)</type>
        </param>
        <param>
          <type>const int</type>
          <declname>edge_comp</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>known_edgestate</declname>
        </param>
        <param>
          <type>AMREX_D_DECL(amrex::MultiFab &amp;xfluxes, amrex::MultiFab &amp;yfluxes, amrex::MultiFab &amp;zfluxes)</type>
        </param>
        <param>
          <type>int</type>
          <declname>fluxes_comp</declname>
        </param>
        <param>
          <type>amrex::MultiFab const &amp;</type>
          <declname>fq</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>fq_comp</declname>
        </param>
        <param>
          <type>amrex::MultiFab const &amp;</type>
          <declname>divu</declname>
        </param>
        <param>
          <type>amrex::Vector&lt; amrex::BCRec &gt; const &amp;</type>
          <declname>h_bc</declname>
        </param>
        <param>
          <type>amrex::BCRec const *</type>
          <declname>d_bc</declname>
        </param>
        <param>
          <type>amrex::Geometry const &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>amrex::Gpu::DeviceVector&lt; int &gt; &amp;</type>
          <declname>iconserv</declname>
        </param>
        <param>
          <type>const amrex::Real</type>
          <declname>dt</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>is_velocity</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>redistribution_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="EBGodunov/hydro_ebgodunov.H" line="36" column="10" declfile="EBGodunov/hydro_ebgodunov.H" declline="36" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceEBGodunov_1abea06da38cd7e2c6a6ed94d761c4e996" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EBGodunov::ExtrapVelToFaces</definition>
        <argsstring>(amrex::MultiFab const &amp;vel, amrex::MultiFab const &amp;vel_forces, AMREX_D_DECL(amrex::MultiFab &amp;u_mac, amrex::MultiFab &amp;v_mac, amrex::MultiFab &amp;w_mac), amrex::Vector&lt; amrex::BCRec &gt; const &amp;h_bcrec, amrex::BCRec const *d_bcrec, amrex::Geometry &amp;geom, amrex::Real dt)</argsstring>
        <name>ExtrapVelToFaces</name>
        <param>
          <type>amrex::MultiFab const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type>amrex::MultiFab const &amp;</type>
          <declname>vel_forces</declname>
        </param>
        <param>
          <type>AMREX_D_DECL(amrex::MultiFab &amp;u_mac, amrex::MultiFab &amp;v_mac, amrex::MultiFab &amp;w_mac)</type>
        </param>
        <param>
          <type>amrex::Vector&lt; amrex::BCRec &gt; const &amp;</type>
          <declname>h_bcrec</declname>
        </param>
        <param>
          <type>amrex::BCRec const *</type>
          <declname>d_bcrec</declname>
        </param>
        <param>
          <type>amrex::Geometry &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>amrex::Real</type>
          <declname>dt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="EBGodunov/hydro_ebgodunov.H" line="65" column="10" declfile="EBGodunov/hydro_ebgodunov.H" declline="65" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceEBGodunov_1a6e2ba5616ba9119c5bb121aab68079ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EBGodunov::ComputeAdvectiveVel</definition>
        <argsstring>(AMREX_D_DECL(amrex::Box const &amp;xbx, amrex::Box const &amp;ybx, amrex::Box const &amp;zbx), AMREX_D_DECL(amrex::Array4&lt; amrex::Real &gt; const &amp;u_ad, amrex::Array4&lt; amrex::Real &gt; const &amp;v_ad, amrex::Array4&lt; amrex::Real &gt; const &amp;w_ad), AMREX_D_DECL(amrex::Array4&lt; amrex::Real const &gt; const &amp;Imx, amrex::Array4&lt; amrex::Real const &gt; const &amp;Imy, amrex::Array4&lt; amrex::Real const &gt; const &amp;Imz), AMREX_D_DECL(amrex::Array4&lt; amrex::Real const &gt; const &amp;Ipx, amrex::Array4&lt; amrex::Real const &gt; const &amp;Ipy, amrex::Array4&lt; amrex::Real const &gt; const &amp;Ipz), amrex::Array4&lt; amrex::Real const &gt; const &amp;vel, amrex::Array4&lt; amrex::EBCellFlag const &gt; const &amp;flag, const amrex::Box &amp;domain, amrex::BCRec const *d_bcrec)</argsstring>
        <name>ComputeAdvectiveVel</name>
        <param>
          <type>AMREX_D_DECL(amrex::Box const &amp;xbx, amrex::Box const &amp;ybx, amrex::Box const &amp;zbx)</type>
        </param>
        <param>
          <type>AMREX_D_DECL(amrex::Array4&lt; amrex::Real &gt; const &amp;u_ad, amrex::Array4&lt; amrex::Real &gt; const &amp;v_ad, amrex::Array4&lt; amrex::Real &gt; const &amp;w_ad)</type>
        </param>
        <param>
          <type>AMREX_D_DECL(amrex::Array4&lt; amrex::Real const &gt; const &amp;Imx, amrex::Array4&lt; amrex::Real const &gt; const &amp;Imy, amrex::Array4&lt; amrex::Real const &gt; const &amp;Imz)</type>
        </param>
        <param>
          <type>AMREX_D_DECL(amrex::Array4&lt; amrex::Real const &gt; const &amp;Ipx, amrex::Array4&lt; amrex::Real const &gt; const &amp;Ipy, amrex::Array4&lt; amrex::Real const &gt; const &amp;Ipz)</type>
        </param>
        <param>
          <type>amrex::Array4&lt; amrex::Real const &gt; const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type>amrex::Array4&lt; amrex::EBCellFlag const &gt; const &amp;</type>
          <declname>flag</declname>
        </param>
        <param>
          <type>const amrex::Box &amp;</type>
          <declname>domain</declname>
        </param>
        <param>
          <type>amrex::BCRec const *</type>
          <declname>d_bcrec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="EBGodunov/hydro_ebgodunov.H" line="76" column="10" declfile="EBGodunov/hydro_ebgodunov.H" declline="76" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceEBGodunov_1ac184b3ba8058a5c138c754520a9d78e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EBGodunov::ExtrapVelToFacesOnBox</definition>
        <argsstring>(amrex::Box const &amp;bx, int ncomp, AMREX_D_DECL(amrex::Box const &amp;xbx, amrex::Box const &amp;ybx, amrex::Box const &amp;zbx), AMREX_D_DECL(amrex::Box const &amp;xebx, amrex::Box const &amp;yebx, amrex::Box const &amp;zebx), AMREX_D_DECL(amrex::Array4&lt; amrex::Real &gt; const &amp;qx, amrex::Array4&lt; amrex::Real &gt; const &amp;qy, amrex::Array4&lt; amrex::Real &gt; const &amp;qz), amrex::Array4&lt; amrex::Real const &gt; const &amp;q, AMREX_D_DECL(amrex::Array4&lt; amrex::Real const &gt; const &amp;u_ad, amrex::Array4&lt; amrex::Real const &gt; const &amp;v_ad, amrex::Array4&lt; amrex::Real const &gt; const &amp;w_ad), AMREX_D_DECL(amrex::Array4&lt; amrex::Real &gt; const &amp;Imx, amrex::Array4&lt; amrex::Real &gt; const &amp;Imy, amrex::Array4&lt; amrex::Real &gt; const &amp;Imz), AMREX_D_DECL(amrex::Array4&lt; amrex::Real &gt; const &amp;Ipx, amrex::Array4&lt; amrex::Real &gt; const &amp;Ipy, amrex::Array4&lt; amrex::Real &gt; const &amp;Ipz), amrex::Array4&lt; amrex::Real const &gt; const &amp;f, const amrex::Box &amp;domain, const amrex::Real *dx, amrex::Real dt, amrex::BCRec const *d_bcrec, amrex::Array4&lt; amrex::EBCellFlag const &gt; const &amp;flag, AMREX_D_DECL(amrex::Array4&lt; amrex::Real const &gt; const &amp;apx, amrex::Array4&lt; amrex::Real const &gt; const &amp;apy, amrex::Array4&lt; amrex::Real const &gt; const &amp;apz), AMREX_D_DECL(amrex::Array4&lt; amrex::Real const &gt; const &amp;fcx, amrex::Array4&lt; amrex::Real const &gt; const &amp;fcy, amrex::Array4&lt; amrex::Real const &gt; const &amp;fcz), amrex::Real *p)</argsstring>
        <name>ExtrapVelToFacesOnBox</name>
        <param>
          <type>amrex::Box const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>AMREX_D_DECL(amrex::Box const &amp;xbx, amrex::Box const &amp;ybx, amrex::Box const &amp;zbx)</type>
        </param>
        <param>
          <type>AMREX_D_DECL(amrex::Box const &amp;xebx, amrex::Box const &amp;yebx, amrex::Box const &amp;zebx)</type>
        </param>
        <param>
          <type>AMREX_D_DECL(amrex::Array4&lt; amrex::Real &gt; const &amp;qx, amrex::Array4&lt; amrex::Real &gt; const &amp;qy, amrex::Array4&lt; amrex::Real &gt; const &amp;qz)</type>
        </param>
        <param>
          <type>amrex::Array4&lt; amrex::Real const &gt; const &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>AMREX_D_DECL(amrex::Array4&lt; amrex::Real const &gt; const &amp;u_ad, amrex::Array4&lt; amrex::Real const &gt; const &amp;v_ad, amrex::Array4&lt; amrex::Real const &gt; const &amp;w_ad)</type>
        </param>
        <param>
          <type>AMREX_D_DECL(amrex::Array4&lt; amrex::Real &gt; const &amp;Imx, amrex::Array4&lt; amrex::Real &gt; const &amp;Imy, amrex::Array4&lt; amrex::Real &gt; const &amp;Imz)</type>
        </param>
        <param>
          <type>AMREX_D_DECL(amrex::Array4&lt; amrex::Real &gt; const &amp;Ipx, amrex::Array4&lt; amrex::Real &gt; const &amp;Ipy, amrex::Array4&lt; amrex::Real &gt; const &amp;Ipz)</type>
        </param>
        <param>
          <type>amrex::Array4&lt; amrex::Real const &gt; const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>const amrex::Box &amp;</type>
          <declname>domain</declname>
        </param>
        <param>
          <type>const amrex::Real *</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>amrex::Real</type>
          <declname>dt</declname>
        </param>
        <param>
          <type>amrex::BCRec const *</type>
          <declname>d_bcrec</declname>
        </param>
        <param>
          <type>amrex::Array4&lt; amrex::EBCellFlag const &gt; const &amp;</type>
          <declname>flag</declname>
        </param>
        <param>
          <type>AMREX_D_DECL(amrex::Array4&lt; amrex::Real const &gt; const &amp;apx, amrex::Array4&lt; amrex::Real const &gt; const &amp;apy, amrex::Array4&lt; amrex::Real const &gt; const &amp;apz)</type>
        </param>
        <param>
          <type>AMREX_D_DECL(amrex::Array4&lt; amrex::Real const &gt; const &amp;fcx, amrex::Array4&lt; amrex::Real const &gt; const &amp;fcy, amrex::Array4&lt; amrex::Real const &gt; const &amp;fcz)</type>
        </param>
        <param>
          <type>amrex::Real *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="EBGodunov/hydro_ebgodunov.H" line="93" column="10" declfile="EBGodunov/hydro_ebgodunov.H" declline="93" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceEBGodunov_1afb5b3b4bcea09a8aeeb568ddde3a46e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EBGodunov::ComputeEdgeState</definition>
        <argsstring>(amrex::Box const &amp;bx, int ncomp, amrex::Array4&lt; amrex::Real const &gt; const &amp;q, AMREX_D_DECL(amrex::Array4&lt; amrex::Real &gt; const &amp;xedge, amrex::Array4&lt; amrex::Real &gt; const &amp;yedge, amrex::Array4&lt; amrex::Real &gt; const &amp;zedge), AMREX_D_DECL(amrex::Array4&lt; amrex::Real const &gt; const &amp;umac, amrex::Array4&lt; amrex::Real const &gt; const &amp;vmac, amrex::Array4&lt; amrex::Real const &gt; const &amp;wmac), amrex::Array4&lt; amrex::Real const &gt; const &amp;divu, amrex::Array4&lt; amrex::Real const &gt; const &amp;fq, amrex::Geometry const &amp;geom, amrex::Real l_dt, amrex::Vector&lt; amrex::BCRec &gt; const &amp;h_bcrec, amrex::BCRec const *pbc, int const *iconserv, amrex::Real *p, amrex::Array4&lt; amrex::EBCellFlag const &gt; const &amp;flag_arr, AMREX_D_DECL(amrex::Array4&lt; amrex::Real const &gt; const &amp;apx, amrex::Array4&lt; amrex::Real const &gt; const &amp;apy, amrex::Array4&lt; amrex::Real const &gt; const &amp;apz), amrex::Array4&lt; amrex::Real const &gt; const &amp;vfrac_arr, AMREX_D_DECL(amrex::Array4&lt; amrex::Real const &gt; const &amp;fcx, amrex::Array4&lt; amrex::Real const &gt; const &amp;fcy, amrex::Array4&lt; amrex::Real const &gt; const &amp;fcz), amrex::Array4&lt; amrex::Real const &gt; const &amp;ccent_arr, bool is_velocity)</argsstring>
        <name>ComputeEdgeState</name>
        <param>
          <type>amrex::Box const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>amrex::Array4&lt; amrex::Real const &gt; const &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>AMREX_D_DECL(amrex::Array4&lt; amrex::Real &gt; const &amp;xedge, amrex::Array4&lt; amrex::Real &gt; const &amp;yedge, amrex::Array4&lt; amrex::Real &gt; const &amp;zedge)</type>
        </param>
        <param>
          <type>AMREX_D_DECL(amrex::Array4&lt; amrex::Real const &gt; const &amp;umac, amrex::Array4&lt; amrex::Real const &gt; const &amp;vmac, amrex::Array4&lt; amrex::Real const &gt; const &amp;wmac)</type>
        </param>
        <param>
          <type>amrex::Array4&lt; amrex::Real const &gt; const &amp;</type>
          <declname>divu</declname>
        </param>
        <param>
          <type>amrex::Array4&lt; amrex::Real const &gt; const &amp;</type>
          <declname>fq</declname>
        </param>
        <param>
          <type>amrex::Geometry const &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>amrex::Real</type>
          <declname>l_dt</declname>
        </param>
        <param>
          <type>amrex::Vector&lt; amrex::BCRec &gt; const &amp;</type>
          <declname>h_bcrec</declname>
        </param>
        <param>
          <type>amrex::BCRec const *</type>
          <declname>pbc</declname>
        </param>
        <param>
          <type>int const *</type>
          <declname>iconserv</declname>
        </param>
        <param>
          <type>amrex::Real *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>amrex::Array4&lt; amrex::EBCellFlag const &gt; const &amp;</type>
          <declname>flag_arr</declname>
        </param>
        <param>
          <type>AMREX_D_DECL(amrex::Array4&lt; amrex::Real const &gt; const &amp;apx, amrex::Array4&lt; amrex::Real const &gt; const &amp;apy, amrex::Array4&lt; amrex::Real const &gt; const &amp;apz)</type>
        </param>
        <param>
          <type>amrex::Array4&lt; amrex::Real const &gt; const &amp;</type>
          <declname>vfrac_arr</declname>
        </param>
        <param>
          <type>AMREX_D_DECL(amrex::Array4&lt; amrex::Real const &gt; const &amp;fcx, amrex::Array4&lt; amrex::Real const &gt; const &amp;fcy, amrex::Array4&lt; amrex::Real const &gt; const &amp;fcz)</type>
        </param>
        <param>
          <type>amrex::Array4&lt; amrex::Real const &gt; const &amp;</type>
          <declname>ccent_arr</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_velocity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="EBGodunov/hydro_ebgodunov.H" line="131" column="10" declfile="EBGodunov/hydro_ebgodunov.H" declline="131" declcolumn="10"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="EBGodunov/hydro_ebgodunov.H" line="8" column="1"/>
  </compounddef>
</doxygen>
