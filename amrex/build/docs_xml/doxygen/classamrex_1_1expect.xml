<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classamrex_1_1expect" kind="class" language="C++" prot="public">
    <compoundname>amrex::expect</compoundname>
    <includes refid="AMReX__Utility_8H" local="no">AMReX_Utility.H</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1expect_1ae7bf86f223ccd99d64b03b6d4fecfbd2" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string amrex::expect::istr</definition>
        <argsstring></argsstring>
        <name>istr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" line="195" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" bodystart="195" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classamrex_1_1expect_1adb81bd5a1d50874312ada5f322af143b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend std::istream &amp;</type>
        <definition>std::istream&amp; operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;, const expect &amp;exp)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1expect" kindref="compound">expect</ref> &amp;</type>
          <declname>exp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" line="188" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1expect_1a2136ece586212ef73074aaab29247505" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::expect::expect</definition>
        <argsstring>(const std::string &amp;str_)</argsstring>
        <name>expect</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str_</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" line="190" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.cpp" bodystart="563" bodyend="566"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1expect_1a29077faf3a3650e3eeb67285023d7e5e" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::expect::expect</definition>
        <argsstring>(const char *istr_)</argsstring>
        <name>expect</name>
        <param>
          <type>const char *</type>
          <declname>istr_</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" line="191" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.cpp" bodystart="558" bodyend="561"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1expect_1a76c80085267c42ef73ed0e63c65af898" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::expect::expect</definition>
        <argsstring>(char c)</argsstring>
        <name>expect</name>
        <param>
          <type>char</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" line="192" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.cpp" bodystart="568" bodyend="571"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1expect_1aff20426b31d6e2bcce35b9d62d5685ba" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string &amp; amrex::expect::the_string</definition>
        <argsstring>() const</argsstring>
        <name>the_string</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" line="193" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.cpp" bodystart="574" bodyend="577"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="1233">
        <label>string</label>
      </node>
      <node id="1232">
        <label>amrex::expect</label>
        <link refid="classamrex_1_1expect"/>
        <childnode refid="1233" relation="usage">
          <edgelabel>istr</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" line="187" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" bodystart="186" bodyend="196"/>
    <listofallmembers>
      <member refid="classamrex_1_1expect_1a2136ece586212ef73074aaab29247505" prot="public" virt="non-virtual"><scope>amrex::expect</scope><name>expect</name></member>
      <member refid="classamrex_1_1expect_1a29077faf3a3650e3eeb67285023d7e5e" prot="public" virt="non-virtual"><scope>amrex::expect</scope><name>expect</name></member>
      <member refid="classamrex_1_1expect_1a76c80085267c42ef73ed0e63c65af898" prot="public" virt="non-virtual"><scope>amrex::expect</scope><name>expect</name></member>
      <member refid="classamrex_1_1expect_1ae7bf86f223ccd99d64b03b6d4fecfbd2" prot="private" virt="non-virtual"><scope>amrex::expect</scope><name>istr</name></member>
      <member refid="classamrex_1_1expect_1adb81bd5a1d50874312ada5f322af143b" prot="private" virt="non-virtual"><scope>amrex::expect</scope><name>operator&gt;&gt;</name></member>
      <member refid="classamrex_1_1expect_1aff20426b31d6e2bcce35b9d62d5685ba" prot="public" virt="non-virtual"><scope>amrex::expect</scope><name>the_string</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
