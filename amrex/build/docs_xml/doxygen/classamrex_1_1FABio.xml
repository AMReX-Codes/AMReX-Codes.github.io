<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classamrex_1_1FABio" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>amrex::FABio</compoundname>
    <derivedcompoundref refid="classamrex_1_1FABio__8bit" prot="public" virt="non-virtual">amrex::FABio_8bit</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1FABio__ascii" prot="public" virt="non-virtual">amrex::FABio_ascii</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1FABio__binary" prot="public" virt="non-virtual">amrex::FABio_binary</derivedcompoundref>
    <includes refid="AMReX__FArrayBox_8H" local="no">AMReX_FArrayBox.H</includes>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classamrex_1_1FABio_1a3b1ca82feb278c4a975a46229f229660" prot="public" static="no">
        <name>Precision</name>
        <enumvalue id="classamrex_1_1FABio_1a3b1ca82feb278c4a975a46229f229660a7ff56f0b5643ef3c51e6503e30f23346" prot="public">
          <name>FAB_FLOAT</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classamrex_1_1FABio_1a3b1ca82feb278c4a975a46229f229660a6f8d36037f0ae14ae3b2ffd648cb77e7" prot="public">
          <name>FAB_DOUBLE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>An enum which controls precision of FAB output. Valid values are FAB_FLOAT and FAB_DOUBLE. This is deprecated; i.e. please don&apos;t use it except for reading old FABs as it will probably be going away in a later release. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FArrayBox.H" line="45" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FArrayBox.H" bodystart="44" bodyend="48"/>
      </memberdef>
      <memberdef kind="enum" id="classamrex_1_1FABio_1a0b27140f46fecbc14d58f1a754300e9f" prot="public" static="no">
        <name>Format</name>
        <enumvalue id="classamrex_1_1FABio_1a0b27140f46fecbc14d58f1a754300e9fa9712023aa78e143b76acec0dc9e519fb" prot="public">
          <name>FAB_ASCII</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classamrex_1_1FABio_1a0b27140f46fecbc14d58f1a754300e9fa240d58a50ffcc6d51f0b771099168d88" prot="public">
          <name>FAB_IEEE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classamrex_1_1FABio_1a0b27140f46fecbc14d58f1a754300e9fab0d0613c5d24142abfc947d29d074e0c" prot="public">
          <name>FAB_NATIVE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classamrex_1_1FABio_1a0b27140f46fecbc14d58f1a754300e9fabe3ed4b63ca8c92041feb17a512161f2" prot="public">
          <name>FAB_8BIT</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classamrex_1_1FABio_1a0b27140f46fecbc14d58f1a754300e9fabedb5f568966bfc42da59ffb65eb3b55" prot="public">
          <name>FAB_IEEE_32</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classamrex_1_1FABio_1a0b27140f46fecbc14d58f1a754300e9fa3622542334cc06301ae11275e2eaf4ee" prot="public">
          <name>FAB_NATIVE_32</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>An enum which controls format of FAB output. </para>        </briefdescription>
        <detaileddescription>
<para>FAB_ASCII: write the FAB out in ASCII format.</para><para>FAB_8BIT: write the FAB out with all floating-point values scaled to range 0 - 255.</para><para>FAB_NATIVE: write out floating-point values in the native format. This is usually the &quot;best&quot; choice of formats.</para><para>FAB_IEEE_32: write out floating-point values in IEEE 32 bit normal format. This is recommended for use when your internal computations are done in 64 bits and you want to save space when writing out the FABs.</para><para>FAB_IEEE: this is deprecated. It is identical to FAB_IEEE_32.</para><para>FAB_NATIVE_32: write out values in the native 32 bit format. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FArrayBox.H" line="72" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FArrayBox.H" bodystart="71" bodyend="83"/>
      </memberdef>
      <memberdef kind="enum" id="classamrex_1_1FABio_1adbdc54b2ed6a4fa2d0cfd19076e5cc39" prot="public" static="no">
        <name>Ordering</name>
        <enumvalue id="classamrex_1_1FABio_1adbdc54b2ed6a4fa2d0cfd19076e5cc39a8db2674dc83889b0c41bf7a2de656e0b" prot="public">
          <name>FAB_NORMAL_ORDER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classamrex_1_1FABio_1adbdc54b2ed6a4fa2d0cfd19076e5cc39a0a373e16d57bf0778632d93de56c7bb3" prot="public">
          <name>FAB_REVERSE_ORDER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classamrex_1_1FABio_1adbdc54b2ed6a4fa2d0cfd19076e5cc39aa3be82b329f78e16b9f23ba2b26116a3" prot="public">
          <name>FAB_REVERSE_ORDER_2</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>An enum which controls byte ordering of FAB output. Valid values are FAB_NORMAL_ORDER, FAB_REVERSE_ORDER, and FAB_REVERSE_ORDER_2. This is deprecated; i.e. please don&apos;t use it except for reading old FABs as it will probably be going away in a later release. These exist solely to describe the ordering of &quot;old&quot; FABs that you want to read. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FArrayBox.H" line="93" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FArrayBox.H" bodystart="92" bodyend="97"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1FABio_1a083e8bc68fa9f61b921f6aec21ea3f95" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>amrex::FABio::~FABio</definition>
        <argsstring>()</argsstring>
        <name>~FABio</name>
        <briefdescription>
<para>The virtual destructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FArrayBox.H" line="100" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FArrayBox.cpp" bodystart="102" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FABio_1a3d35f09a87700e22092fb5e943c82163" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void amrex::FABio::read</definition>
        <argsstring>(std::istream &amp;is, FArrayBox &amp;fb) const =0</argsstring>
        <name>read</name>
        <reimplementedby refid="classamrex_1_1FABio__8bit_1aa2439db7d09034abce9411d979e38762">read</reimplementedby>
        <reimplementedby refid="classamrex_1_1FABio__ascii_1a0df1bfeea23fd4f9ee35b21fc0ddb8f9">read</reimplementedby>
        <reimplementedby refid="classamrex_1_1FABio__binary_1a9d1f49ee565f0d188ed763f55f6d6ae9">read</reimplementedby>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>fb</declname>
        </param>
        <briefdescription>
<para>Pure virtual function. Derived classes MUST override this function to read an <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> from the istream, under the assumption that the header has alread been read. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FArrayBox.H" line="106" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FABio_1a9ecb5c9d864f0eb7cb8c54ba08a148c9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void amrex::FABio::write</definition>
        <argsstring>(std::ostream &amp;os, const FArrayBox &amp;fb, int comp, int num_comp) const =0</argsstring>
        <name>write</name>
        <reimplementedby refid="classamrex_1_1FABio__8bit_1a9f3613de6718fe144a97c33ad2c754bc">write</reimplementedby>
        <reimplementedby refid="classamrex_1_1FABio__ascii_1a72ee5d51bb3a9b5d75dfbea6feb4b977">write</reimplementedby>
        <reimplementedby refid="classamrex_1_1FABio__binary_1afd41640c47c96b51a2a82f9a5e357eb2">write</reimplementedby>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>fb</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <briefdescription>
<para>Pure virtual function. Derived classes MUST override this function to write the <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> to the ostream, under the assumption that the header for the FAB has already been written. Write it out as if it only had num_comp components with component comp being the first one. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FArrayBox.H" line="115" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FABio_1a3209c1c8fd600cbd8cd62912efa69d89" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void amrex::FABio::skip</definition>
        <argsstring>(std::istream &amp;is, FArrayBox &amp;f) const =0</argsstring>
        <name>skip</name>
        <reimplementedby refid="classamrex_1_1FABio__8bit_1a9aa87ef9c47577970c43ec2bff26dbd9">skip</reimplementedby>
        <reimplementedby refid="classamrex_1_1FABio__ascii_1a345ade910a7cac5997ce223212d812fd">skip</reimplementedby>
        <reimplementedby refid="classamrex_1_1FABio__binary_1ae6ab7789b241f47be47b36df4a7289ee">skip</reimplementedby>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Pure virtual function. Derived classes MUST override this function to skip over the next FAB f in the istream, under the assumption that the header for the FAB f has already been skpped over. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FArrayBox.H" line="125" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FABio_1a58b0e6f163ed56a2d5af572f78728b50" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void amrex::FABio::skip</definition>
        <argsstring>(std::istream &amp;is, FArrayBox &amp;f, int nCompToSkip) const =0</argsstring>
        <name>skip</name>
        <reimplementedby refid="classamrex_1_1FABio__8bit_1a7810f531669abb911e28867a2fba1f40">skip</reimplementedby>
        <reimplementedby refid="classamrex_1_1FABio__ascii_1a8c38610bff2b38e353308da6808d4330">skip</reimplementedby>
        <reimplementedby refid="classamrex_1_1FABio__binary_1ac15404e86dd5cc0c0f3092192cbd9567">skip</reimplementedby>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nCompToSkip</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FArrayBox.H" line="128" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FABio_1af1cf8858b1a0e49ea7f62461d42f453e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::FABio::write_header</definition>
        <argsstring>(std::ostream &amp;os, const FArrayBox &amp;f, int nvar) const</argsstring>
        <name>write_header</name>
        <reimplementedby refid="classamrex_1_1FABio__8bit_1a7eea80650ac31cd5d2264641e2fe6886">write_header</reimplementedby>
        <reimplementedby refid="classamrex_1_1FABio__ascii_1aeddba7789a111c378b6e3030a025b2da">write_header</reimplementedby>
        <reimplementedby refid="classamrex_1_1FABio__binary_1ad0a86d6929c2694a6303184dba73f2c2">write_header</reimplementedby>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nvar</declname>
        </param>
        <briefdescription>
<para>Write out a header describing <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> f that contains nvar components. It must be the case that nvar &lt;= f.nComp(). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FArrayBox.H" line="135" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FArrayBox.cpp" bodystart="105" bodyend="115"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classamrex_1_1FABio_1a5f0e9754f27698eb89c86433c6cc3fc5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1FABio" kindref="compound">FABio</ref> *</type>
        <definition>FABio * amrex::FABio::read_header</definition>
        <argsstring>(std::istream &amp;is, FArrayBox &amp;f)</argsstring>
        <name>read_header</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Read in the header from the istream. Returns a new&apos;d <ref refid="classamrex_1_1FABio" kindref="compound">FABio</ref> of the written-out type. Complements write_header. The user is responsible for delete&apos;ing the returned FABio*. The <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> f is resized to be on the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> and number of components read in from the header file. This is in preparation for next doing a read. This is split up so that we can make the read functions virtual, while having all the code for detailing the type of <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> that was written out in one place. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FArrayBox.H" line="149" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FArrayBox.cpp" bodystart="453" bodyend="524"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FABio_1afb78d32e7b4d8ef3e4e430c3c7b8598a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1FABio" kindref="compound">FABio</ref> *</type>
        <definition>FABio * amrex::FABio::read_header</definition>
        <argsstring>(std::istream &amp;is, FArrayBox &amp;f, int compIndex, int &amp;nCompAvailable)</argsstring>
        <name>read_header</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>compIndex</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &amp;</type>
          <declname>nCompAvailable</declname>
        </param>
        <briefdescription>
<para>Same as above except create a single component fab with data from the compIndex component of the istream fab. Return the number of available components in the istream fab. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FArrayBox.H" line="157" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FArrayBox.cpp" bodystart="528" bodyend="605"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A Class Facilitating I/O for Fabs. </para>    </briefdescription>
    <detaileddescription>
<para>This data-less class aids I/O for FABs and encapsulates information about the floating point format being used in output. Note that the &quot;new&quot; format for writing out FABs is self-describing; i.e. we can always read in a FAB written in the &quot;new&quot; format. For this reason, it is usually preferable to write FABs out in the native format on the machine, unless you&apos;re doing computations in 64 bit and only want to write out 32 bit FABs.</para><para>With the exception of the enumeration constants, this class is primarily for <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> implementors; i.e. user&apos;s shouldn&apos;t call any of the member functions in this class directly. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="1332">
        <label>amrex::FABio_ascii</label>
        <link refid="classamrex_1_1FABio__ascii"/>
        <childnode refid="1330" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1333">
        <label>amrex::FABio_binary</label>
        <link refid="classamrex_1_1FABio__binary"/>
        <childnode refid="1330" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1330">
        <label>amrex::FABio</label>
        <link refid="classamrex_1_1FABio"/>
      </node>
      <node id="1331">
        <label>amrex::FABio_8bit</label>
        <link refid="classamrex_1_1FABio__8bit"/>
        <childnode refid="1330" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FArrayBox.H" line="35" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FArrayBox.H" bodystart="34" bodyend="161"/>
    <listofallmembers>
      <member refid="classamrex_1_1FABio_1a0b27140f46fecbc14d58f1a754300e9fabe3ed4b63ca8c92041feb17a512161f2" prot="public" virt="non-virtual"><scope>amrex::FABio</scope><name>FAB_8BIT</name></member>
      <member refid="classamrex_1_1FABio_1a0b27140f46fecbc14d58f1a754300e9fa9712023aa78e143b76acec0dc9e519fb" prot="public" virt="non-virtual"><scope>amrex::FABio</scope><name>FAB_ASCII</name></member>
      <member refid="classamrex_1_1FABio_1a3b1ca82feb278c4a975a46229f229660a6f8d36037f0ae14ae3b2ffd648cb77e7" prot="public" virt="non-virtual"><scope>amrex::FABio</scope><name>FAB_DOUBLE</name></member>
      <member refid="classamrex_1_1FABio_1a3b1ca82feb278c4a975a46229f229660a7ff56f0b5643ef3c51e6503e30f23346" prot="public" virt="non-virtual"><scope>amrex::FABio</scope><name>FAB_FLOAT</name></member>
      <member refid="classamrex_1_1FABio_1a0b27140f46fecbc14d58f1a754300e9fa240d58a50ffcc6d51f0b771099168d88" prot="public" virt="non-virtual"><scope>amrex::FABio</scope><name>FAB_IEEE</name></member>
      <member refid="classamrex_1_1FABio_1a0b27140f46fecbc14d58f1a754300e9fabedb5f568966bfc42da59ffb65eb3b55" prot="public" virt="non-virtual"><scope>amrex::FABio</scope><name>FAB_IEEE_32</name></member>
      <member refid="classamrex_1_1FABio_1a0b27140f46fecbc14d58f1a754300e9fab0d0613c5d24142abfc947d29d074e0c" prot="public" virt="non-virtual"><scope>amrex::FABio</scope><name>FAB_NATIVE</name></member>
      <member refid="classamrex_1_1FABio_1a0b27140f46fecbc14d58f1a754300e9fa3622542334cc06301ae11275e2eaf4ee" prot="public" virt="non-virtual"><scope>amrex::FABio</scope><name>FAB_NATIVE_32</name></member>
      <member refid="classamrex_1_1FABio_1adbdc54b2ed6a4fa2d0cfd19076e5cc39a8db2674dc83889b0c41bf7a2de656e0b" prot="public" virt="non-virtual"><scope>amrex::FABio</scope><name>FAB_NORMAL_ORDER</name></member>
      <member refid="classamrex_1_1FABio_1adbdc54b2ed6a4fa2d0cfd19076e5cc39a0a373e16d57bf0778632d93de56c7bb3" prot="public" virt="non-virtual"><scope>amrex::FABio</scope><name>FAB_REVERSE_ORDER</name></member>
      <member refid="classamrex_1_1FABio_1adbdc54b2ed6a4fa2d0cfd19076e5cc39aa3be82b329f78e16b9f23ba2b26116a3" prot="public" virt="non-virtual"><scope>amrex::FABio</scope><name>FAB_REVERSE_ORDER_2</name></member>
      <member refid="classamrex_1_1FABio_1a0b27140f46fecbc14d58f1a754300e9f" prot="public" virt="non-virtual"><scope>amrex::FABio</scope><name>Format</name></member>
      <member refid="classamrex_1_1FABio_1adbdc54b2ed6a4fa2d0cfd19076e5cc39" prot="public" virt="non-virtual"><scope>amrex::FABio</scope><name>Ordering</name></member>
      <member refid="classamrex_1_1FABio_1a3b1ca82feb278c4a975a46229f229660" prot="public" virt="non-virtual"><scope>amrex::FABio</scope><name>Precision</name></member>
      <member refid="classamrex_1_1FABio_1a3d35f09a87700e22092fb5e943c82163" prot="public" virt="pure-virtual"><scope>amrex::FABio</scope><name>read</name></member>
      <member refid="classamrex_1_1FABio_1a5f0e9754f27698eb89c86433c6cc3fc5" prot="public" virt="non-virtual"><scope>amrex::FABio</scope><name>read_header</name></member>
      <member refid="classamrex_1_1FABio_1afb78d32e7b4d8ef3e4e430c3c7b8598a" prot="public" virt="non-virtual"><scope>amrex::FABio</scope><name>read_header</name></member>
      <member refid="classamrex_1_1FABio_1a3209c1c8fd600cbd8cd62912efa69d89" prot="public" virt="pure-virtual"><scope>amrex::FABio</scope><name>skip</name></member>
      <member refid="classamrex_1_1FABio_1a58b0e6f163ed56a2d5af572f78728b50" prot="public" virt="pure-virtual"><scope>amrex::FABio</scope><name>skip</name></member>
      <member refid="classamrex_1_1FABio_1a9ecb5c9d864f0eb7cb8c54ba08a148c9" prot="public" virt="pure-virtual"><scope>amrex::FABio</scope><name>write</name></member>
      <member refid="classamrex_1_1FABio_1af1cf8858b1a0e49ea7f62461d42f453e" prot="public" virt="virtual"><scope>amrex::FABio</scope><name>write_header</name></member>
      <member refid="classamrex_1_1FABio_1a083e8bc68fa9f61b921f6aec21ea3f95" prot="public" virt="virtual"><scope>amrex::FABio</scope><name>~FABio</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
