<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classamrex_1_1BoxDomain" kind="class" language="C++" prot="public">
    <compoundname>amrex::BoxDomain</compoundname>
    <basecompoundref refid="classamrex_1_1BoxList" prot="protected" virt="non-virtual">amrex::BoxList</basecompoundref>
    <includes refid="AMReX__BoxDomain_8H" local="no">AMReX_BoxDomain.H</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classamrex_1_1BoxDomain_1aca980aec4ae7ca746c6df498a0e23a95" prot="public" static="no">
        <type><ref refid="classamrex_1_1BoxList_1a9ac637c8d0a5920984658586a6b56a18" kindref="member">BoxList::const_iterator</ref></type>
        <definition>typedef BoxList::const_iterator amrex::BoxDomain::const_iterator</definition>
        <argsstring></argsstring>
        <name>const_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.H" line="71" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.H" bodystart="71" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1BoxDomain_1a47079914541e9badea37cd84a4eb8511" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::BoxDomain::BoxDomain</definition>
        <argsstring>()</argsstring>
        <name>BoxDomain</name>
        <briefdescription>
<para>Construct an empty <ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref> of <ref refid="classamrex_1_1IndexType_1a9f800856dcfdcc8175c7797403f213da" kindref="member">IndexType::TheCellType()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.H" line="73" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.cpp" bodystart="99" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxDomain_1adf430e5f38acc600c84e559bb68dc5d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::BoxDomain::BoxDomain</definition>
        <argsstring>(const Box &amp;bx)</argsstring>
        <name>BoxDomain</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <briefdescription>
<para>A <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> Domain out of single <ref refid="classamrex_1_1Box" kindref="compound">Box</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.H" line="76" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.cpp" bodystart="109" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxDomain_1a64ee738d97ad6b873205801db2689a09" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::BoxDomain::BoxDomain</definition>
        <argsstring>(IndexType itype)</argsstring>
        <name>BoxDomain</name>
        <param>
          <type><ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref></type>
          <declname>itype</declname>
        </param>
        <briefdescription>
<para>Construct an empty <ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref> of <ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref> itype. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.H" line="79" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.cpp" bodystart="104" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxDomain_1ae7e866a10cb52706285c1896ef3f5678" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::BoxDomain::BoxDomain</definition>
        <argsstring>(const BoxDomain &amp;rhs)=default</argsstring>
        <name>BoxDomain</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.H" line="81" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxDomain_1afe15b34d24e99d95b6ab964d2939599b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::BoxDomain::BoxDomain</definition>
        <argsstring>(BoxDomain &amp;&amp;rhs)=default</argsstring>
        <name>BoxDomain</name>
        <param>
          <type><ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.H" line="82" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxDomain_1a474130db2fd9883da666c0590bc720c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref> &amp;</type>
        <definition>BoxDomain&amp; amrex::BoxDomain::operator=</definition>
        <argsstring>(const BoxDomain &amp;rhs)=default</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.H" line="83" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxDomain_1adec0f538db962173888eadcaf8d85f48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref> &amp;</type>
        <definition>BoxDomain&amp; amrex::BoxDomain::operator=</definition>
        <argsstring>(BoxDomain &amp;&amp;rhs)=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.H" line="84" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxDomain_1afe56e5629c6f85bd01429ac8469eb038" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BoxDomain::add</definition>
        <argsstring>(const Box &amp;b)</argsstring>
        <name>add</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Add a <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> to the domain. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.H" line="87" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.cpp" bodystart="116" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxDomain_1af68c7f595490816f50871a46efbbeded" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BoxDomain::add</definition>
        <argsstring>(const BoxList &amp;bl)</argsstring>
        <name>add</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;</type>
          <declname>bl</declname>
        </param>
        <briefdescription>
<para>Add all Boxes in the <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> to the domain. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.H" line="90" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.cpp" bodystart="146" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxDomain_1a1d49c186eeea202115e3194e30c47a68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref> &amp;</type>
        <definition>BoxDomain &amp; amrex::BoxDomain::rmBox</definition>
        <argsstring>(const Box &amp;b)</argsstring>
        <name>rmBox</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Remove a box from the domain. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.H" line="93" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.cpp" bodystart="154" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxDomain_1afe4ab28d7d6d8b37ffb2d2940d47b1e4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::BoxDomain::ok</definition>
        <argsstring>() const</argsstring>
        <name>ok</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns True if this <ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref> is valid. Checks for disjointness. Returns true if the <ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref> is empty. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.H" line="99" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.cpp" bodystart="175" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxDomain_1adabfc3621a41317e6fc4a0c0d156aa57" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;</type>
        <definition>const BoxList &amp; amrex::BoxDomain::boxList</definition>
        <argsstring>() const</argsstring>
        <name>boxList</name>
        <briefdescription>
<para>Return a const reference to the underlying <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> of this <ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.H" line="138" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.cpp" bodystart="82" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxDomain_1a03627b9f1cb88ad3ff6066b036e3ed97" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::BoxDomain::operator==</definition>
        <argsstring>(const BoxDomain &amp;rhs) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Are the BoxDomains equal? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.H" line="141" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.cpp" bodystart="88" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxDomain_1a35966fff359c5b6498bcc2ca60c67f12" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::BoxDomain::operator!=</definition>
        <argsstring>(const BoxDomain &amp;rhs) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Are the BoxDomains not equal? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.H" line="144" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.cpp" bodystart="94" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxDomain_1a1732a2c030467bb5a6d20721d0ff99c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref> &amp;</type>
        <definition>BoxDomain &amp; amrex::BoxDomain::refine</definition>
        <argsstring>(int ratio)</argsstring>
        <name>refine</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
<para>Refine all Boxes in the domain by the refinement ratio. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.H" line="147" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.cpp" bodystart="28" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxDomain_1a12ab20cb383ad53fb9169af3f7120438" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref> &amp;</type>
        <definition>BoxDomain &amp; amrex::BoxDomain::coarsen</definition>
        <argsstring>(int ratio)</argsstring>
        <name>coarsen</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
<para>Coarsen all Boxes in the domain by the refinement ratio. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.H" line="150" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.cpp" bodystart="215" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxDomain_1a6168e6055822180730994c1ad73e068e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref> &amp;</type>
        <definition>BoxDomain &amp; amrex::BoxDomain::intersect</definition>
        <argsstring>(const Box &amp;b)</argsstring>
        <name>intersect</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Intersect this <ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref> with <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> b. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.H" line="153" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.cpp" bodystart="11" bodyend="16"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxDomain_1a20c090a963f6f3fb6db35d43bb0cce3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref> &amp;</type>
        <definition>BoxDomain &amp; amrex::BoxDomain::accrete</definition>
        <argsstring>(int sz)</argsstring>
        <name>accrete</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>sz</declname>
        </param>
        <briefdescription>
<para>Grow each <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> by size sz. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.H" line="156" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.cpp" bodystart="205" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxDomain_1a4e42de6a63d5099e53e83300e71d5f5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref> &amp;</type>
        <definition>BoxDomain &amp; amrex::BoxDomain::complementIn</definition>
        <argsstring>(const Box &amp;b, const BoxDomain &amp;bl)</argsstring>
        <name>complementIn</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref> &amp;</type>
          <declname>bl</declname>
        </param>
        <briefdescription>
<para>Creates the complement of <ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref> bl in <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> b. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.H" line="159" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.cpp" bodystart="63" bodyend="70"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A List of Disjoint Boxes. A <ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref> is a <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> with the restriction that Boxes in the list are disjoint. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="692">
        <label>amrex::BoxList</label>
        <link refid="classamrex_1_1BoxList"/>
      </node>
      <node id="691">
        <label>amrex::BoxDomain</label>
        <link refid="classamrex_1_1BoxDomain"/>
        <childnode refid="692" relation="protected-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="694">
        <label>amrex::BoxList</label>
        <link refid="classamrex_1_1BoxList"/>
        <childnode refid="695" relation="usage">
          <edgelabel>m_lbox</edgelabel>
        </childnode>
        <childnode refid="697" relation="usage">
          <edgelabel>btype</edgelabel>
        </childnode>
      </node>
      <node id="696">
        <label>std::vector&lt; amrex::Box, std::allocator&lt; amrex::Box &gt; &gt;</label>
      </node>
      <node id="693">
        <label>amrex::BoxDomain</label>
        <link refid="classamrex_1_1BoxDomain"/>
        <childnode refid="694" relation="protected-inheritance">
        </childnode>
      </node>
      <node id="697">
        <label>amrex::IndexType</label>
        <link refid="classamrex_1_1IndexType"/>
      </node>
      <node id="695">
        <label>amrex::Vector&lt; amrex::Box &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="696" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.H" line="68" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.H" bodystart="65" bodyend="161"/>
    <listofallmembers>
      <member refid="classamrex_1_1BoxDomain_1a20c090a963f6f3fb6db35d43bb0cce3f" prot="public" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>accrete</name></member>
      <member refid="classamrex_1_1BoxList_1ae852e0ee71d6645fb6cbb1765547d65a" prot="protected" virt="non-virtual" ambiguityscope="amrex::BoxList::"><scope>amrex::BoxDomain</scope><name>accrete</name></member>
      <member refid="classamrex_1_1BoxDomain_1afe56e5629c6f85bd01429ac8469eb038" prot="public" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>add</name></member>
      <member refid="classamrex_1_1BoxDomain_1af68c7f595490816f50871a46efbbeded" prot="public" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>add</name></member>
      <member refid="classamrex_1_1BoxList_1a62a9e0ec396f6f764973eb0feb6b43ff" prot="protected" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>Bcast</name></member>
      <member refid="classamrex_1_1BoxList_1abc4b6bd9e48f341f77e5b0381b5308e0" prot="protected" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>begin</name></member>
      <member refid="classamrex_1_1BoxList_1a8e3958e44ca086a0b4a511f62cddc031" prot="protected" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>begin</name></member>
      <member refid="classamrex_1_1BoxDomain_1a47079914541e9badea37cd84a4eb8511" prot="public" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>BoxDomain</name></member>
      <member refid="classamrex_1_1BoxDomain_1adf430e5f38acc600c84e559bb68dc5d2" prot="public" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>BoxDomain</name></member>
      <member refid="classamrex_1_1BoxDomain_1a64ee738d97ad6b873205801db2689a09" prot="public" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>BoxDomain</name></member>
      <member refid="classamrex_1_1BoxDomain_1ae7e866a10cb52706285c1896ef3f5678" prot="public" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>BoxDomain</name></member>
      <member refid="classamrex_1_1BoxDomain_1afe15b34d24e99d95b6ab964d2939599b" prot="public" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>BoxDomain</name></member>
      <member refid="classamrex_1_1BoxList_1a31584546393b5ff7f420e6bffd8486bd" prot="protected" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>BoxList</name></member>
      <member refid="classamrex_1_1BoxList_1a128274e71f12eceb9980758522776803" prot="protected" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>BoxList</name></member>
      <member refid="classamrex_1_1BoxList_1a1a8247d3b12b7bd82410a977d43302f0" prot="protected" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>BoxList</name></member>
      <member refid="classamrex_1_1BoxList_1aa5e1e0f1149682e0c8cd5a88451811ba" prot="protected" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>BoxList</name></member>
      <member refid="classamrex_1_1BoxList_1a3c9b3b9af19b73c1c7efafda6238dbe9" prot="protected" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>BoxList</name></member>
      <member refid="classamrex_1_1BoxList_1a30479ce1f63ba9843fe6d5253b6c3fb9" prot="protected" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>BoxList</name></member>
      <member refid="classamrex_1_1BoxList_1a54773484ed81f097deb889555b7ca24b" prot="protected" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>BoxList</name></member>
      <member refid="classamrex_1_1BoxList_1afe00f77bc420a45f32d484d982e02072" prot="protected" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>BoxList</name></member>
      <member refid="classamrex_1_1BoxList_1a57ceea7a76c84d3befd6ec06c059bbe7" prot="protected" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>BoxList</name></member>
      <member refid="classamrex_1_1BoxList_1a6603dcbdc28135b48e5bfa98b942da73" prot="protected" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>BoxList</name></member>
      <member refid="classamrex_1_1BoxDomain_1adabfc3621a41317e6fc4a0c0d156aa57" prot="public" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>boxList</name></member>
      <member refid="classamrex_1_1BoxList_1a6064b561ef6b7f4001b73a063b22bd57" prot="protected" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>capacity</name></member>
      <member refid="classamrex_1_1BoxList_1a5401acc7f967b93eb6e755966491aa58" prot="protected" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>catenate</name></member>
      <member refid="classamrex_1_1BoxList_1a1b546c6d1a623b0335f40983e1d46b8a" prot="protected" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>clear</name></member>
      <member refid="classamrex_1_1BoxDomain_1a12ab20cb383ad53fb9169af3f7120438" prot="public" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>coarsen</name></member>
      <member refid="classamrex_1_1BoxList_1aa3ac01949cda5f1c125767c7111d3aa3" prot="protected" virt="non-virtual" ambiguityscope="amrex::BoxList::"><scope>amrex::BoxDomain</scope><name>coarsen</name></member>
      <member refid="classamrex_1_1BoxDomain_1a4e42de6a63d5099e53e83300e71d5f5d" prot="public" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>complementIn</name></member>
      <member refid="classamrex_1_1BoxList_1a77c9e97948684cd611eb9591ef6d23c4" prot="protected" virt="non-virtual" ambiguityscope="amrex::BoxList::"><scope>amrex::BoxDomain</scope><name>complementIn</name></member>
      <member refid="classamrex_1_1BoxList_1a990b3fc904c7fcd51a1fd9e4420eb0dc" prot="protected" virt="non-virtual" ambiguityscope="amrex::BoxList::"><scope>amrex::BoxDomain</scope><name>complementIn</name></member>
      <member refid="classamrex_1_1BoxList_1a1da3baa5ff605620901791904d448d87" prot="protected" virt="non-virtual" ambiguityscope="amrex::BoxList::"><scope>amrex::BoxDomain</scope><name>complementIn</name></member>
      <member refid="classamrex_1_1BoxDomain_1aca980aec4ae7ca746c6df498a0e23a95" prot="public" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>const_iterator</name></member>
      <member refid="classamrex_1_1BoxList_1a128dd0ae9ea6a6c9bed4a5af6a77518f" prot="protected" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>contains</name></member>
      <member refid="classamrex_1_1BoxList_1a533a896b5397ca253658e34bdb05e538" prot="protected" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>convert</name></member>
      <member refid="classamrex_1_1BoxList_1a39ed8708f5d1a7c4aaa7a8a792dc13d8" prot="protected" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>data</name></member>
      <member refid="classamrex_1_1BoxList_1ab3f9eee26f225648bbc267b866f01fde" prot="protected" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>data</name></member>
      <member refid="classamrex_1_1BoxList_1a9ed198bd9ceb2268f1219c2e0375bdbb" prot="protected" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>enclosedCells</name></member>
      <member refid="classamrex_1_1BoxList_1a678c17d31bc353ead03cffed5c4e1574" prot="protected" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>enclosedCells</name></member>
      <member refid="classamrex_1_1BoxList_1a3f031aa03b4e913c8fa413cf76d1807d" prot="protected" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>end</name></member>
      <member refid="classamrex_1_1BoxList_1a35fb0445d4f861be4ed66bf9861e9f14" prot="protected" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>end</name></member>
      <member refid="classamrex_1_1BoxList_1ab3d2612cde7e408f02101b15dd7781f1" prot="protected" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>front</name></member>
      <member refid="classamrex_1_1BoxList_1a65eb4af53f5dc07b129bd14d11d728ba" prot="protected" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>front</name></member>
      <member refid="classamrex_1_1BoxDomain_1a6168e6055822180730994c1ad73e068e" prot="public" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>intersect</name></member>
      <member refid="classamrex_1_1BoxList_1a9f5fb740643bc7f4b10baa5487cc1760" prot="protected" virt="non-virtual" ambiguityscope="amrex::BoxList::"><scope>amrex::BoxDomain</scope><name>intersect</name></member>
      <member refid="classamrex_1_1BoxList_1a18846dc6645e047916b3833a7ec1a777" prot="protected" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>isDisjoint</name></member>
      <member refid="classamrex_1_1BoxList_1a54c5936a5ec0332d158270277e862f85" prot="protected" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>isEmpty</name></member>
      <member refid="classamrex_1_1BoxList_1a6dac99633eca2bfbb8c2f287f423f9a4" prot="protected" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>isNotEmpty</name></member>
      <member refid="classamrex_1_1BoxList_1ab64ed06fbfbfc6342465290e3d86c107" prot="protected" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>iterator</name></member>
      <member refid="classamrex_1_1BoxList_1a25986c43e3bd0e8b7043955680879e16" prot="protected" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>ixType</name></member>
      <member refid="classamrex_1_1BoxList_1af1451e74b2d7de70b58b9979e21aeb49" prot="protected" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>join</name></member>
      <member refid="classamrex_1_1BoxList_1ae86c1cb2471cb633d0abf4657d080a73" prot="protected" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>join</name></member>
      <member refid="classamrex_1_1BoxList_1a954f12195603d5493ca2251e0147c4e5" prot="protected" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>maxSize</name></member>
      <member refid="classamrex_1_1BoxList_1ac6afa90929ca95e8048721a2f2b407e7" prot="protected" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>maxSize</name></member>
      <member refid="classamrex_1_1BoxList_1acb7f8b8c07867e9a40ac51922ce07e31" prot="protected" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>minimalBox</name></member>
      <member refid="classamrex_1_1BoxDomain_1afe4ab28d7d6d8b37ffb2d2940d47b1e4" prot="public" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>ok</name></member>
      <member refid="classamrex_1_1BoxDomain_1a35966fff359c5b6498bcc2ca60c67f12" prot="public" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>operator!=</name></member>
      <member refid="classamrex_1_1BoxList_1a4610d792f42c68d9c5481dcf83d09397" prot="protected" virt="non-virtual" ambiguityscope="amrex::BoxList::"><scope>amrex::BoxDomain</scope><name>operator!=</name></member>
      <member refid="classamrex_1_1BoxDomain_1a474130db2fd9883da666c0590bc720c8" prot="public" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>operator=</name></member>
      <member refid="classamrex_1_1BoxDomain_1adec0f538db962173888eadcaf8d85f48" prot="public" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>operator=</name></member>
      <member refid="classamrex_1_1BoxList_1a6f77727eff8f7f6a9a08a21bec0bf152" prot="protected" virt="non-virtual" ambiguityscope="amrex::BoxList::"><scope>amrex::BoxDomain</scope><name>operator=</name></member>
      <member refid="classamrex_1_1BoxList_1a0747196b0023c8dc440c9325092d53fe" prot="protected" virt="non-virtual" ambiguityscope="amrex::BoxList::"><scope>amrex::BoxDomain</scope><name>operator=</name></member>
      <member refid="classamrex_1_1BoxDomain_1a03627b9f1cb88ad3ff6066b036e3ed97" prot="public" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>operator==</name></member>
      <member refid="classamrex_1_1BoxList_1a111f72bd85cc49ade7c956cdf35d330b" prot="protected" virt="non-virtual" ambiguityscope="amrex::BoxList::"><scope>amrex::BoxDomain</scope><name>operator==</name></member>
      <member refid="classamrex_1_1BoxList_1ab9071e12fb35012248c8978ed5e9b5a1" prot="protected" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>ordered_simplify</name></member>
      <member refid="classamrex_1_1BoxList_1ad6d8b6fc8801afb2539d5611efc7abb3" prot="protected" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>parallelComplementIn</name></member>
      <member refid="classamrex_1_1BoxList_1a538e2e8665da85486105a7daa26bfd0a" prot="protected" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>parallelComplementIn</name></member>
      <member refid="classamrex_1_1BoxList_1a7c626403ed2f4b4bbddaed58edda99b7" prot="protected" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>parallelComplementIn</name></member>
      <member refid="classamrex_1_1BoxList_1aaf9cf5350e31edefe87e9e8b2f2278ef" prot="protected" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>push_back</name></member>
      <member refid="classamrex_1_1BoxDomain_1a1732a2c030467bb5a6d20721d0ff99c7" prot="public" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>refine</name></member>
      <member refid="classamrex_1_1BoxList_1a551c2ca8aa05f54c73c3b57d40ca2217" prot="protected" virt="non-virtual" ambiguityscope="amrex::BoxList::"><scope>amrex::BoxDomain</scope><name>refine</name></member>
      <member refid="classamrex_1_1BoxList_1a3f0ab28b3e669f5a7828da71fdbd3645" prot="protected" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>removeEmpty</name></member>
      <member refid="classamrex_1_1BoxList_1a7b999e76e5422aa024da160623cc81f8" prot="protected" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>reserve</name></member>
      <member refid="classamrex_1_1BoxDomain_1a1d49c186eeea202115e3194e30c47a68" prot="public" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>rmBox</name></member>
      <member refid="classamrex_1_1BoxList_1a5500e705c89c6c7f8d69a15fec86ac67" prot="protected" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>set</name></member>
      <member refid="classamrex_1_1BoxList_1a724c4380dbcdc0d514cf18d029a49f92" prot="protected" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>shift</name></member>
      <member refid="classamrex_1_1BoxList_1abf9737ea9ecdf7a57adbe55f6215219f" prot="protected" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>shiftHalf</name></member>
      <member refid="classamrex_1_1BoxList_1a094d0a9c81730b5f3cade719d4b0b30d" prot="protected" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>shiftHalf</name></member>
      <member refid="classamrex_1_1BoxList_1a827d337283d6b99be9feff0887409674" prot="protected" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>simplify</name></member>
      <member refid="classamrex_1_1BoxList_1ac4030d4780cc8ca926857c82819c1c42" prot="protected" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>size</name></member>
      <member refid="classamrex_1_1BoxList_1a1407ab0108776da8d7fe9a05381f5041" prot="protected" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>surroundingNodes</name></member>
      <member refid="classamrex_1_1BoxList_1acececbf6a71ec11bf660a2843192d6ad" prot="protected" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>surroundingNodes</name></member>
      <member refid="classamrex_1_1BoxList_1a2d15815fbdd75a908fc1b5363a73b189" prot="protected" virt="non-virtual"><scope>amrex::BoxDomain</scope><name>swap</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
