<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classamrex_1_1BoxIterator" kind="class" language="C++" prot="public">
    <compoundname>amrex::BoxIterator</compoundname>
    <includes refid="AMReX__BoxIterator_8H" local="no">AMReX_BoxIterator.H</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classamrex_1_1BoxIterator_1a84175ad1f780ae9de83dc5f4c71b67e0" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>IntVect amrex::BoxIterator::m_current</definition>
        <argsstring></argsstring>
        <name>m_current</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxIterator.H" line="112" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxIterator.H" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1BoxIterator_1ac7faa53e27c1da649d1ce401be5edd8d" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>IntVect amrex::BoxIterator::m_boxLo</definition>
        <argsstring></argsstring>
        <name>m_boxLo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxIterator.H" line="113" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxIterator.H" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1BoxIterator_1a28bfb4eb34ce4273b9948f0c3e2451a4" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>IntVect amrex::BoxIterator::m_boxHi</definition>
        <argsstring></argsstring>
        <name>m_boxHi</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxIterator.H" line="114" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxIterator.H" bodystart="114" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1BoxIterator_1abc9cf7ec321343ab3062e03958d3d792" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::BoxIterator::BoxIterator</definition>
        <argsstring>() noexcept</argsstring>
        <name>BoxIterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default constructor. This constructs an invalid iterator. The user must call define before using. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxIterator.H" line="39" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxIterator.H" bodystart="118" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxIterator_1ad67f55da89142e3527f16fac6a5bcade" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::BoxIterator::BoxIterator</definition>
        <argsstring>(const Box &amp;a_bx) noexcept</argsstring>
        <name>BoxIterator</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>a_bx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructs a <ref refid="classamrex_1_1BoxIterator" kindref="compound">BoxIterator</ref> and associates it with a <ref refid="classamrex_1_1Box" kindref="compound">Box</ref>. Arguments: a_bx (not modified) the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> to iterate over. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxIterator.H" line="47" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxIterator.H" bodystart="126" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxIterator_1a1f9a7e4c07b451d03fbcc905145005b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BoxIterator::setBox</definition>
        <argsstring>(const Box &amp;a_bx) noexcept</argsstring>
        <name>setBox</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>a_bx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxIterator.H" line="49" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxIterator.cpp" bodystart="21" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxIterator_1a7a4a243bcd9c8e5066eddda908833d08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BoxIterator::define</definition>
        <argsstring>(const Box &amp;a_bx) noexcept</argsstring>
        <name>define</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>a_bx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Associates a <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> with this <ref refid="classamrex_1_1BoxIterator" kindref="compound">BoxIterator</ref>. Arguments: a_bx (not modified) the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> to iterate over. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxIterator.H" line="57" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxIterator.cpp" bodystart="5" bodyend="19"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxIterator_1a3ebc7ff9dc7c57eabe16d0a4866ce0f1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::BoxIterator::BoxIterator</definition>
        <argsstring>(const BoxIterator &amp;a_iterIn) noexcept</argsstring>
        <name>BoxIterator</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxIterator" kindref="compound">BoxIterator</ref> &amp;</type>
          <declname>a_iterIn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy constructor. Arguments: a_iterIn (not modified) the <ref refid="classamrex_1_1BoxIterator" kindref="compound">BoxIterator</ref> to copy. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxIterator.H" line="65" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxIterator.H" bodystart="132" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxIterator_1aad3066fecf437d5d90a950b9302beeba" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::BoxIterator::~BoxIterator</definition>
        <argsstring>()</argsstring>
        <name>~BoxIterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxIterator.H" line="68" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxIterator.H" bodystart="68" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxIterator_1af75e04838970facf1335f10eb67cdeb7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BoxIterator::begin</definition>
        <argsstring>() noexcept</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets this <ref refid="classamrex_1_1BoxIterator" kindref="compound">BoxIterator</ref> to the first <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> in its <ref refid="classamrex_1_1Box" kindref="compound">Box</ref>. The definition of the &quot;first&quot; <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> is implementation-dependent. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxIterator.H" line="78" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxIterator.H" bodystart="140" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxIterator_1a8034c76f7cc8e7966f170538268d0be6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BoxIterator::reset</definition>
        <argsstring>() noexcept</argsstring>
        <name>reset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets this <ref refid="classamrex_1_1BoxIterator" kindref="compound">BoxIterator</ref> to the first <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> in its <ref refid="classamrex_1_1Box" kindref="compound">Box</ref>. The definition of the &quot;first&quot; <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> is implementation-dependent. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxIterator.H" line="86" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxIterator.H" bodystart="146" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxIterator_1a1eb1f7dc12b228e2893a693691781ab4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BoxIterator::operator++</definition>
        <argsstring>() noexcept</argsstring>
        <name>operator++</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Modifies this <ref refid="classamrex_1_1BoxIterator" kindref="compound">BoxIterator</ref> to set it to the next location in its <ref refid="classamrex_1_1Box" kindref="compound">Box</ref>. The definition of the &quot;next location&quot; of a <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> is implementation-dependent. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxIterator.H" line="94" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxIterator.H" bodystart="152" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxIterator_1a7f3c17e356fa82fa08928ed417493761" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BoxIterator::next</definition>
        <argsstring>() noexcept</argsstring>
        <name>next</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxIterator.H" line="96" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxIterator.H" bodystart="158" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxIterator_1a43c937c4689f4b5388b9a0f5e77cb15b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
        <definition>const IntVect &amp; amrex::BoxIterator::operator()</definition>
        <argsstring>() const noexcept</argsstring>
        <name>operator()</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the value of the InVect for the current location of this <ref refid="classamrex_1_1BoxIterator" kindref="compound">BoxIterator</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxIterator.H" line="103" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxIterator.H" bodystart="178" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxIterator_1ab5719a740695d359628be6f552ba6a3a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::BoxIterator::ok</definition>
        <argsstring>() noexcept</argsstring>
        <name>ok</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if this <ref refid="classamrex_1_1BoxIterator" kindref="compound">BoxIterator</ref>&apos;s location is within its <ref refid="classamrex_1_1Box" kindref="compound">Box</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxIterator.H" line="109" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxIterator.H" bodystart="186" bodyend="189"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>iterates through the IntVects of a <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> </para>    </briefdescription>
    <detaileddescription>
<para><ref refid="classamrex_1_1BoxIterator" kindref="compound">BoxIterator</ref> iterates through the IntVects of a box. The actual sqeuence of IntVects is implementation-specific. Typical usage:</para><para><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> b; ... <ref refid="classamrex_1_1BoxIterator" kindref="compound">BoxIterator</ref> bit (b); for (<ref refid="namespaceamrex_1a43103621a410a27f2e8b9607f4ae6f34" kindref="member">bit.begin()</ref>; bit.ok(); ++bit) { <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> iv = bit(); (do operations involving iv) } </para>    </detaileddescription>
    <collaborationgraph>
      <node id="706">
        <label>amrex::IntVect</label>
        <link refid="classamrex_1_1IntVect"/>
        <childnode refid="706" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
      </node>
      <node id="705">
        <label>amrex::BoxIterator</label>
        <link refid="classamrex_1_1BoxIterator"/>
        <childnode refid="706" relation="usage">
          <edgelabel>m_current</edgelabel>
          <edgelabel>m_boxLo</edgelabel>
          <edgelabel>m_boxHi</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxIterator.H" line="32" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxIterator.H" bodystart="31" bodyend="115"/>
    <listofallmembers>
      <member refid="classamrex_1_1BoxIterator_1af75e04838970facf1335f10eb67cdeb7" prot="public" virt="non-virtual"><scope>amrex::BoxIterator</scope><name>begin</name></member>
      <member refid="classamrex_1_1BoxIterator_1abc9cf7ec321343ab3062e03958d3d792" prot="public" virt="non-virtual"><scope>amrex::BoxIterator</scope><name>BoxIterator</name></member>
      <member refid="classamrex_1_1BoxIterator_1ad67f55da89142e3527f16fac6a5bcade" prot="public" virt="non-virtual"><scope>amrex::BoxIterator</scope><name>BoxIterator</name></member>
      <member refid="classamrex_1_1BoxIterator_1a3ebc7ff9dc7c57eabe16d0a4866ce0f1" prot="public" virt="non-virtual"><scope>amrex::BoxIterator</scope><name>BoxIterator</name></member>
      <member refid="classamrex_1_1BoxIterator_1a7a4a243bcd9c8e5066eddda908833d08" prot="public" virt="non-virtual"><scope>amrex::BoxIterator</scope><name>define</name></member>
      <member refid="classamrex_1_1BoxIterator_1a28bfb4eb34ce4273b9948f0c3e2451a4" prot="protected" virt="non-virtual"><scope>amrex::BoxIterator</scope><name>m_boxHi</name></member>
      <member refid="classamrex_1_1BoxIterator_1ac7faa53e27c1da649d1ce401be5edd8d" prot="protected" virt="non-virtual"><scope>amrex::BoxIterator</scope><name>m_boxLo</name></member>
      <member refid="classamrex_1_1BoxIterator_1a84175ad1f780ae9de83dc5f4c71b67e0" prot="protected" virt="non-virtual"><scope>amrex::BoxIterator</scope><name>m_current</name></member>
      <member refid="classamrex_1_1BoxIterator_1a7f3c17e356fa82fa08928ed417493761" prot="public" virt="non-virtual"><scope>amrex::BoxIterator</scope><name>next</name></member>
      <member refid="classamrex_1_1BoxIterator_1ab5719a740695d359628be6f552ba6a3a" prot="public" virt="non-virtual"><scope>amrex::BoxIterator</scope><name>ok</name></member>
      <member refid="classamrex_1_1BoxIterator_1a43c937c4689f4b5388b9a0f5e77cb15b" prot="public" virt="non-virtual"><scope>amrex::BoxIterator</scope><name>operator()</name></member>
      <member refid="classamrex_1_1BoxIterator_1a1eb1f7dc12b228e2893a693691781ab4" prot="public" virt="non-virtual"><scope>amrex::BoxIterator</scope><name>operator++</name></member>
      <member refid="classamrex_1_1BoxIterator_1a8034c76f7cc8e7966f170538268d0be6" prot="public" virt="non-virtual"><scope>amrex::BoxIterator</scope><name>reset</name></member>
      <member refid="classamrex_1_1BoxIterator_1a1f9a7e4c07b451d03fbcc905145005b7" prot="public" virt="non-virtual"><scope>amrex::BoxIterator</scope><name>setBox</name></member>
      <member refid="classamrex_1_1BoxIterator_1aad3066fecf437d5d90a950b9302beeba" prot="public" virt="non-virtual"><scope>amrex::BoxIterator</scope><name>~BoxIterator</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
