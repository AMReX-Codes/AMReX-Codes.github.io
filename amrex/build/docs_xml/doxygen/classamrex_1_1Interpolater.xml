<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classamrex_1_1Interpolater" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>amrex::Interpolater</compoundname>
    <derivedcompoundref refid="classamrex_1_1CellBilinear" prot="public" virt="non-virtual">amrex::CellBilinear</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1CellConservativeLinear" prot="public" virt="non-virtual">amrex::CellConservativeLinear</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1CellConservativeProtected" prot="public" virt="non-virtual">amrex::CellConservativeProtected</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1CellConservativeQuartic" prot="public" virt="non-virtual">amrex::CellConservativeQuartic</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1CellQuadratic" prot="public" virt="non-virtual">amrex::CellQuadratic</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1FaceLinear" prot="public" virt="non-virtual">amrex::FaceLinear</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1NodeBilinear" prot="public" virt="non-virtual">amrex::NodeBilinear</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1PCInterp" prot="public" virt="non-virtual">amrex::PCInterp</derivedcompoundref>
    <includes refid="AMReX__Interpolater_8H" local="no">AMReX_Interpolater.H</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1Interpolater_1ad53e63eaa9b2b9b140c98f73969f2164" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>amrex::Interpolater::~Interpolater</definition>
        <argsstring>()</argsstring>
        <name>~Interpolater</name>
        <briefdescription>
<para>The destructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interpolater.H" line="30" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interpolater.cpp" bodystart="44" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Interpolater_1aa19cea2a6579112e6cf2fa2fb52ba6b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>virtual Box amrex::Interpolater::CoarseBox</definition>
        <argsstring>(const Box &amp;fine, int ratio)=0</argsstring>
        <name>CoarseBox</name>
        <reimplementedby refid="classamrex_1_1NodeBilinear_1a12700b2249901dc280e6ab13e7c560f2">CoarseBox</reimplementedby>
        <reimplementedby refid="classamrex_1_1CellBilinear_1a445fff6a6e918e4b4a60392ecef5844c">CoarseBox</reimplementedby>
        <reimplementedby refid="classamrex_1_1CellConservativeLinear_1aeec138a1454f98de65aa6ec019a1cdc4">CoarseBox</reimplementedby>
        <reimplementedby refid="classamrex_1_1CellConservativeProtected_1a4f7eb5ba7fb671882f36ee30f4550fc8">CoarseBox</reimplementedby>
        <reimplementedby refid="classamrex_1_1CellQuadratic_1ac42aae63c74e1e3dbacbde8f2f0d8a0a">CoarseBox</reimplementedby>
        <reimplementedby refid="classamrex_1_1PCInterp_1a4ab880728106de4887bc3f6fdedf03d8">CoarseBox</reimplementedby>
        <reimplementedby refid="classamrex_1_1CellConservativeQuartic_1a8c64516c8697291cf190a795a24b3a6e">CoarseBox</reimplementedby>
        <reimplementedby refid="classamrex_1_1FaceLinear_1ae6caa6fa65382bef97431b284967c081">CoarseBox</reimplementedby>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
<para>Returns coarsened box given fine box and refinement ratio. This is a pure virtual function and hence MUST be implemented by derived classes. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fine</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ratio</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interpolater.H" line="40" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Interpolater_1a8afbd6f779bee1ec37defb7c0f03deb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>virtual Box amrex::Interpolater::CoarseBox</definition>
        <argsstring>(const Box &amp;fine, const IntVect &amp;ratio)=0</argsstring>
        <name>CoarseBox</name>
        <reimplementedby refid="classamrex_1_1NodeBilinear_1ae2cd41e25c41c44dda1330f58f6a55e3">CoarseBox</reimplementedby>
        <reimplementedby refid="classamrex_1_1CellBilinear_1adcc32c2aaefbaa1bb23f0b87cbdd5265">CoarseBox</reimplementedby>
        <reimplementedby refid="classamrex_1_1CellConservativeLinear_1ac9afd317e78f1c6d5581c251a9afe819">CoarseBox</reimplementedby>
        <reimplementedby refid="classamrex_1_1CellConservativeProtected_1aeff3c15e21d4b54bc1e4e514178e7e3e">CoarseBox</reimplementedby>
        <reimplementedby refid="classamrex_1_1CellQuadratic_1a29356c571502616f35a19405ce0ab31d">CoarseBox</reimplementedby>
        <reimplementedby refid="classamrex_1_1PCInterp_1acd50581dbe4a2e6a14d5351e6ffac7e8">CoarseBox</reimplementedby>
        <reimplementedby refid="classamrex_1_1CellConservativeQuartic_1a2b4f260bbcc5484ce23d59bd94d2dfe8">CoarseBox</reimplementedby>
        <reimplementedby refid="classamrex_1_1FaceLinear_1af8c208982ffa7f4b377b3d652e23e5ba">CoarseBox</reimplementedby>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
<para>Returns coarsened box given fine box and refinement ratio. This is a pure virtual function and hence MUST be implemented by derived classes. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fine</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ratio</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interpolater.H" line="51" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Interpolater_1ab7e7a9cccec912ca707efd4fe1653da1" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void amrex::Interpolater::interp</definition>
        <argsstring>(const FArrayBox &amp;crse, int crse_comp, FArrayBox &amp;fine, int fine_comp, int ncomp, const Box &amp;fine_region, const IntVect &amp;ratio, const Geometry &amp;crse_geom, const Geometry &amp;fine_geom, Vector&lt; BCRec &gt; const &amp;bcr, int actual_comp, int actual_state, RunOn gpu_or_cpu)=0</argsstring>
        <name>interp</name>
        <reimplementedby refid="classamrex_1_1EBCellConservativeLinear_1ad3edaef28f532a7f1a102272a6fa4436">interp</reimplementedby>
        <reimplementedby refid="classamrex_1_1NodeBilinear_1a8c39f3181c42681018f52786727f517e">interp</reimplementedby>
        <reimplementedby refid="classamrex_1_1CellBilinear_1a5420f98e42bfbf8002f455341e69ffcc">interp</reimplementedby>
        <reimplementedby refid="classamrex_1_1CellConservativeLinear_1a13a7efe51d0c733078c1a313bcfa4efe">interp</reimplementedby>
        <reimplementedby refid="classamrex_1_1CellConservativeProtected_1a563e6340c8ed5b150a5e8be428e894c1">interp</reimplementedby>
        <reimplementedby refid="classamrex_1_1CellQuadratic_1ad51a75df078f2fec70d1a07a1023fd66">interp</reimplementedby>
        <reimplementedby refid="classamrex_1_1PCInterp_1a94693f07a604fc9f7dba82c5802db3ff">interp</reimplementedby>
        <reimplementedby refid="classamrex_1_1CellConservativeQuartic_1a9f2c17ae592688e65e3985260c417bc2">interp</reimplementedby>
        <reimplementedby refid="classamrex_1_1FaceLinear_1a1966baeb25bc4dfc32b8a829bfea2eeb">interp</reimplementedby>
        <param>
          <type>const <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>crse_comp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fine_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>fine_region</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>crse_geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>fine_geom</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> &gt; const &amp;</type>
          <declname>bcr</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>actual_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>actual_state</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
          <declname>gpu_or_cpu</declname>
        </param>
        <briefdescription>
<para>Coarse to fine interpolation in space. This is a pure virtual function and hence MUST be implemented by derived classes. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>crse</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>crse_comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fine</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fine_comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fine_region</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ratio</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>crse_geom</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fine_geom</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bcr</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>actual_comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>actual_state</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interpolater.H" line="72" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Interpolater_1aee6fb8b99ca4282e5f9e9122b9b37cf1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex::Interpolater::protect</definition>
        <argsstring>(const FArrayBox &amp;, int, FArrayBox &amp;, int, FArrayBox &amp;, int, int, const Box &amp;, const IntVect &amp;, const Geometry &amp;, const Geometry &amp;, Vector&lt; BCRec &gt; &amp;, RunOn)</argsstring>
        <name>protect</name>
        <reimplementedby refid="classamrex_1_1CellConservativeProtected_1a5e016fbb584d8be19d11e1963fe361ea">protect</reimplementedby>
        <param>
          <type>const <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> &gt; &amp;</type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
        </param>
        <briefdescription>
<para>Re-visit the interpolation to protect against under- or overshoots. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>crse</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>crse_comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fine</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fine_comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fine_state</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>state_comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fine_region</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ratio</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>crse_geom</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fine_geom</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bcr</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interpolater.H" line="102" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interpolater.H" bodystart="102" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Interpolater_1a076d83ba84b125ee187a18aa8d60ee3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classamrex_1_1InterpolaterBoxCoarsener" kindref="compound">InterpolaterBoxCoarsener</ref></type>
        <definition>InterpolaterBoxCoarsener amrex::Interpolater::BoxCoarsener</definition>
        <argsstring>(const IntVect &amp;ratio)</argsstring>
        <name>BoxCoarsener</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interpolater.H" line="116" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interpolater.cpp" bodystart="47" bodyend="50"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classamrex_1_1Interpolater_1aa2f8d685993329ef439ea2925bee9cc7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
        <definition>Vector&lt; int &gt; amrex::Interpolater::GetBCArray</definition>
        <argsstring>(const Vector&lt; BCRec &gt; &amp;bcr)</argsstring>
        <name>GetBCArray</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> &gt; &amp;</type>
          <declname>bcr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interpolater.H" line="118" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interpolater.cpp" bodystart="300" bodyend="315"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Virtual base class for interpolaters. </para>    </briefdescription>
    <detaileddescription>
<para>Specifies interpolater interface for coarse-to-fine interpolation in space. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="2260">
        <label>amrex::CellConservativeProtected</label>
        <link refid="classamrex_1_1CellConservativeProtected"/>
        <childnode refid="2256" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2262">
        <label>amrex::CellQuadratic</label>
        <link refid="classamrex_1_1CellQuadratic"/>
        <childnode refid="2256" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2263">
        <label>amrex::FaceLinear</label>
        <link refid="classamrex_1_1FaceLinear"/>
        <childnode refid="2256" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2264">
        <label>amrex::NodeBilinear</label>
        <link refid="classamrex_1_1NodeBilinear"/>
        <childnode refid="2256" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2257">
        <label>amrex::CellBilinear</label>
        <link refid="classamrex_1_1CellBilinear"/>
        <childnode refid="2256" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2256">
        <label>amrex::Interpolater</label>
        <link refid="classamrex_1_1Interpolater"/>
      </node>
      <node id="2259">
        <label>amrex::EBCellConservativeLinear</label>
        <link refid="classamrex_1_1EBCellConservativeLinear"/>
        <childnode refid="2258" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2258">
        <label>amrex::CellConservativeLinear</label>
        <link refid="classamrex_1_1CellConservativeLinear"/>
        <childnode refid="2256" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2261">
        <label>amrex::CellConservativeQuartic</label>
        <link refid="classamrex_1_1CellConservativeQuartic"/>
        <childnode refid="2256" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2265">
        <label>amrex::PCInterp</label>
        <link refid="classamrex_1_1PCInterp"/>
        <childnode refid="2256" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interpolater.H" line="24" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interpolater.H" bodystart="23" bodyend="119"/>
    <listofallmembers>
      <member refid="classamrex_1_1Interpolater_1a076d83ba84b125ee187a18aa8d60ee3e" prot="public" virt="virtual"><scope>amrex::Interpolater</scope><name>BoxCoarsener</name></member>
      <member refid="classamrex_1_1Interpolater_1aa19cea2a6579112e6cf2fa2fb52ba6b6" prot="public" virt="pure-virtual"><scope>amrex::Interpolater</scope><name>CoarseBox</name></member>
      <member refid="classamrex_1_1Interpolater_1a8afbd6f779bee1ec37defb7c0f03deb5" prot="public" virt="pure-virtual"><scope>amrex::Interpolater</scope><name>CoarseBox</name></member>
      <member refid="classamrex_1_1Interpolater_1aa2f8d685993329ef439ea2925bee9cc7" prot="public" virt="non-virtual"><scope>amrex::Interpolater</scope><name>GetBCArray</name></member>
      <member refid="classamrex_1_1Interpolater_1ab7e7a9cccec912ca707efd4fe1653da1" prot="public" virt="pure-virtual"><scope>amrex::Interpolater</scope><name>interp</name></member>
      <member refid="classamrex_1_1Interpolater_1aee6fb8b99ca4282e5f9e9122b9b37cf1" prot="public" virt="virtual"><scope>amrex::Interpolater</scope><name>protect</name></member>
      <member refid="classamrex_1_1Interpolater_1ad53e63eaa9b2b9b140c98f73969f2164" prot="public" virt="virtual"><scope>amrex::Interpolater</scope><name>~Interpolater</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
