<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classamrex_1_1GpuBndryFuncFab" kind="class" language="C++" prot="public">
    <compoundname>amrex::GpuBndryFuncFab</compoundname>
    <includes refid="AMReX__PhysBCFunct_8H" local="no">AMReX_PhysBCFunct.H</includes>
    <templateparamlist>
      <param>
        <type>class F</type>
      </param>
    </templateparamlist>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classamrex_1_1GpuBndryFuncFab_1aac214cf749cf15c34ae0cdda7b16a292" prot="protected" static="no" mutable="no">
        <type>F</type>
        <definition>F amrex::GpuBndryFuncFab&lt; F &gt;::m_user_f</definition>
        <argsstring></argsstring>
        <name>m_user_f</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PhysBCFunct.H" line="87" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PhysBCFunct.H" bodystart="87" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1GpuBndryFuncFab_1a62075f3a31adb0b72fa9c09d17ee7e5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::GpuBndryFuncFab&lt; F &gt;::GpuBndryFuncFab</definition>
        <argsstring>()=default</argsstring>
        <name>GpuBndryFuncFab</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PhysBCFunct.H" line="65" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1GpuBndryFuncFab_1a08f3457a00409172a47577db0b968d15" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::GpuBndryFuncFab&lt; F &gt;::GpuBndryFuncFab</definition>
        <argsstring>(F const &amp;a_f)</argsstring>
        <name>GpuBndryFuncFab</name>
        <param>
          <type>F const &amp;</type>
          <declname>a_f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PhysBCFunct.H" line="66" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PhysBCFunct.H" bodystart="66" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1GpuBndryFuncFab_1a498e33d9a56fd836b14c1937c671ff4a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::GpuBndryFuncFab&lt; F &gt;::GpuBndryFuncFab</definition>
        <argsstring>(F &amp;&amp;a_f)</argsstring>
        <name>GpuBndryFuncFab</name>
        <param>
          <type>F &amp;&amp;</type>
          <declname>a_f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PhysBCFunct.H" line="67" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PhysBCFunct.H" bodystart="67" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1GpuBndryFuncFab_1abe943cada3860558a330d325367e3e66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::GpuBndryFuncFab&lt; F &gt;::operator()</definition>
        <argsstring>(Box const &amp;bx, FArrayBox &amp;dest, const int dcomp, const int numcomp, Geometry const &amp;geom, const Real time, const Vector&lt; BCRec &gt; &amp;bcr, const int bcomp, const int orig_comp)</argsstring>
        <name>operator()</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> const &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>const Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> &gt; &amp;</type>
          <declname>bcr</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>bcomp</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>orig_comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PhysBCFunct.H" line="69" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PhysBCFunct.H" bodystart="196" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1GpuBndryFuncFab_1a92cc76fa2c38993338e02288a3a5dc68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::GpuBndryFuncFab&lt; F &gt;::ccdoit</definition>
        <argsstring>(Box const &amp;bx, FArrayBox &amp;dest, const int dcomp, const int numcomp, Geometry const &amp;geom, const Real time, const Vector&lt; BCRec &gt; &amp;bcr, const int bcomp, const int orig_comp)</argsstring>
        <name>ccdoit</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> const &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>const Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> &gt; &amp;</type>
          <declname>bcr</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>bcomp</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>orig_comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PhysBCFunct.H" line="75" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PhysBCFunct.H" bodystart="213" bodyend="499"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1GpuBndryFuncFab_1ac44860b0ca829e19f231cea2121d6c6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::GpuBndryFuncFab&lt; F &gt;::nddoit</definition>
        <argsstring>(Box const &amp;bx, FArrayBox &amp;dest, const int dcomp, const int numcomp, Geometry const &amp;geom, const Real time, const Vector&lt; BCRec &gt; &amp;bcr, const int bcomp, const int orig_comp)</argsstring>
        <name>nddoit</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> const &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>const Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> &gt; &amp;</type>
          <declname>bcr</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>bcomp</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>orig_comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PhysBCFunct.H" line="81" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PhysBCFunct.H" bodystart="503" bodyend="622"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>In this gpu version, F is provided by the user. It needs to have a <bold>device</bold> operator() that can work on a cell/node for boundaries not handled by <ref refid="namespaceamrex_1a30ee6a24a0b0fd18d710278879681aed" kindref="member">amrex::fab_filcc</ref>/fab_filnd. </para>    </detaileddescription>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PhysBCFunct.H" line="63" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PhysBCFunct.H" bodystart="62" bodyend="88"/>
    <listofallmembers>
      <member refid="classamrex_1_1GpuBndryFuncFab_1a92cc76fa2c38993338e02288a3a5dc68" prot="public" virt="non-virtual"><scope>amrex::GpuBndryFuncFab</scope><name>ccdoit</name></member>
      <member refid="classamrex_1_1GpuBndryFuncFab_1a62075f3a31adb0b72fa9c09d17ee7e5a" prot="public" virt="non-virtual"><scope>amrex::GpuBndryFuncFab</scope><name>GpuBndryFuncFab</name></member>
      <member refid="classamrex_1_1GpuBndryFuncFab_1a08f3457a00409172a47577db0b968d15" prot="public" virt="non-virtual"><scope>amrex::GpuBndryFuncFab</scope><name>GpuBndryFuncFab</name></member>
      <member refid="classamrex_1_1GpuBndryFuncFab_1a498e33d9a56fd836b14c1937c671ff4a" prot="public" virt="non-virtual"><scope>amrex::GpuBndryFuncFab</scope><name>GpuBndryFuncFab</name></member>
      <member refid="classamrex_1_1GpuBndryFuncFab_1aac214cf749cf15c34ae0cdda7b16a292" prot="protected" virt="non-virtual"><scope>amrex::GpuBndryFuncFab</scope><name>m_user_f</name></member>
      <member refid="classamrex_1_1GpuBndryFuncFab_1ac44860b0ca829e19f231cea2121d6c6b" prot="public" virt="non-virtual"><scope>amrex::GpuBndryFuncFab</scope><name>nddoit</name></member>
      <member refid="classamrex_1_1GpuBndryFuncFab_1abe943cada3860558a330d325367e3e66" prot="public" virt="non-virtual"><scope>amrex::GpuBndryFuncFab</scope><name>operator()</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
