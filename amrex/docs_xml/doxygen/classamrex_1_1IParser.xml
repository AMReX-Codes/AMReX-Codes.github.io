<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classamrex_1_1IParser" kind="class" language="C++" prot="public">
    <compoundname>amrex::IParser</compoundname>
    <includes refid="AMReX__IParser_8H" local="no">AMReX_IParser.H</includes>
    <innerclass refid="structamrex_1_1IParser_1_1Data" prot="private">amrex::IParser::Data</innerclass>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1IParser_1aa09937d7246ba1774e216bf9c1367332" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="structamrex_1_1IParser_1_1Data" kindref="compound">Data</ref> &gt;</type>
        <definition>std::shared_ptr&lt;Data&gt; amrex::IParser::m_data</definition>
        <argsstring></argsstring>
        <name>m_data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser.H" line="112" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser.H" bodystart="112" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1IParser_1aec5f0bb22e4084d50b12adbda2cc56ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::IParser::IParser</definition>
        <argsstring>(std::string const &amp;func_body)</argsstring>
        <name>IParser</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>func_body</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser.H" line="71" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser.cpp" bodystart="12" bodyend="15"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IParser_1ac4ce16b2a7b27e417a149740858b3482" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::IParser::IParser</definition>
        <argsstring>()=default</argsstring>
        <name>IParser</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser.H" line="72" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IParser_1a2dd658850f05ff557e46d2e40d2ca04c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::IParser::~IParser</definition>
        <argsstring>()</argsstring>
        <name>~IParser</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser.H" line="73" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser.cpp" bodystart="36" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IParser_1a9c7208c68ce87b4647f80a2354780d74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::IParser::define</definition>
        <argsstring>(std::string const &amp;func_body)</argsstring>
        <name>define</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>func_body</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser.H" line="74" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser.cpp" bodystart="18" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IParser_1a04d5a4c122c16fda4686c4be49a76da8" prot="public" static="no" const="yes" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::IParser::operator bool</definition>
        <argsstring>() const</argsstring>
        <name>operator bool</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser.H" line="76" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser.cpp" bodystart="49" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IParser_1a6d61eb854dfc00ac0c9671572873ffdc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::IParser::setConstant</definition>
        <argsstring>(std::string const &amp;name, int c)</argsstring>
        <name>setConstant</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser.H" line="78" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser.cpp" bodystart="55" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IParser_1a800553a4a96fee85528a07f4cdec4c3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::IParser::registerVariables</definition>
        <argsstring>(Vector&lt; std::string &gt; const &amp;vars)</argsstring>
        <name>registerVariables</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; const &amp;</type>
          <declname>vars</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser.H" line="80" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser.cpp" bodystart="63" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IParser_1a0e00f4a1a90b536068669ad8ed9c5b80" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::IParser::print</definition>
        <argsstring>() const</argsstring>
        <name>print</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser.H" line="82" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser.cpp" bodystart="74" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IParser_1a83c2c6f433576ffb3e36dc221fbb230d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::IParser::depth</definition>
        <argsstring>() const</argsstring>
        <name>depth</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser.H" line="84" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser.cpp" bodystart="82" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IParser_1ac7dbdbff476753fbfa9fdb49e27fb9f6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::IParser::maxStackSize</definition>
        <argsstring>() const</argsstring>
        <name>maxStackSize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser.H" line="85" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser.cpp" bodystart="92" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IParser_1a52ec8f4544dd1e6875dff68e3d35a491" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string amrex::IParser::expr</definition>
        <argsstring>() const</argsstring>
        <name>expr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser.H" line="87" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser.cpp" bodystart="102" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IParser_1a26e093287bc4437907d8762fa40bbaaa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::set&lt; std::string &gt;</type>
        <definition>std::set&lt; std::string &gt; amrex::IParser::symbols</definition>
        <argsstring>() const</argsstring>
        <name>symbols</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser.H" line="89" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser.cpp" bodystart="112" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IParser_1a79d909101604badec3afaa59b688a031" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structamrex_1_1IParserExecutor" kindref="compound">IParserExecutor</ref>&lt; N &gt;</type>
        <definition>IParserExecutor&lt; N &gt; amrex::IParser::compile</definition>
        <argsstring>() const</argsstring>
        <name>compile</name>
        <briefdescription>
<para>This compiles for both GPU and CPU. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser.H" line="92" column="33" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser.H" bodystart="154" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IParser_1a4fb11d950d0822ab0c56bcf65adff32d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structamrex_1_1IParserExecutor" kindref="compound">IParserExecutor</ref>&lt; N &gt;</type>
        <definition>IParserExecutor&lt; N &gt; amrex::IParser::compileHost</definition>
        <argsstring>() const</argsstring>
        <name>compileHost</name>
        <briefdescription>
<para>This compiles for CPU only. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser.H" line="95" column="33" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser.H" bodystart="117" bodyend="150"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser.H" line="69" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser.H" bodystart="68" bodyend="113"/>
    <listofallmembers>
      <member refid="classamrex_1_1IParser_1a79d909101604badec3afaa59b688a031" prot="public" virt="non-virtual"><scope>amrex::IParser</scope><name>compile</name></member>
      <member refid="classamrex_1_1IParser_1a4fb11d950d0822ab0c56bcf65adff32d" prot="public" virt="non-virtual"><scope>amrex::IParser</scope><name>compileHost</name></member>
      <member refid="classamrex_1_1IParser_1a9c7208c68ce87b4647f80a2354780d74" prot="public" virt="non-virtual"><scope>amrex::IParser</scope><name>define</name></member>
      <member refid="classamrex_1_1IParser_1a83c2c6f433576ffb3e36dc221fbb230d" prot="public" virt="non-virtual"><scope>amrex::IParser</scope><name>depth</name></member>
      <member refid="classamrex_1_1IParser_1a52ec8f4544dd1e6875dff68e3d35a491" prot="public" virt="non-virtual"><scope>amrex::IParser</scope><name>expr</name></member>
      <member refid="classamrex_1_1IParser_1aec5f0bb22e4084d50b12adbda2cc56ff" prot="public" virt="non-virtual"><scope>amrex::IParser</scope><name>IParser</name></member>
      <member refid="classamrex_1_1IParser_1ac4ce16b2a7b27e417a149740858b3482" prot="public" virt="non-virtual"><scope>amrex::IParser</scope><name>IParser</name></member>
      <member refid="classamrex_1_1IParser_1aa09937d7246ba1774e216bf9c1367332" prot="private" virt="non-virtual"><scope>amrex::IParser</scope><name>m_data</name></member>
      <member refid="classamrex_1_1IParser_1ac7dbdbff476753fbfa9fdb49e27fb9f6" prot="public" virt="non-virtual"><scope>amrex::IParser</scope><name>maxStackSize</name></member>
      <member refid="classamrex_1_1IParser_1a04d5a4c122c16fda4686c4be49a76da8" prot="public" virt="non-virtual"><scope>amrex::IParser</scope><name>operator bool</name></member>
      <member refid="classamrex_1_1IParser_1a0e00f4a1a90b536068669ad8ed9c5b80" prot="public" virt="non-virtual"><scope>amrex::IParser</scope><name>print</name></member>
      <member refid="classamrex_1_1IParser_1a800553a4a96fee85528a07f4cdec4c3e" prot="public" virt="non-virtual"><scope>amrex::IParser</scope><name>registerVariables</name></member>
      <member refid="classamrex_1_1IParser_1a6d61eb854dfc00ac0c9671572873ffdc" prot="public" virt="non-virtual"><scope>amrex::IParser</scope><name>setConstant</name></member>
      <member refid="classamrex_1_1IParser_1a26e093287bc4437907d8762fa40bbaaa" prot="public" virt="non-virtual"><scope>amrex::IParser</scope><name>symbols</name></member>
      <member refid="classamrex_1_1IParser_1a2dd658850f05ff557e46d2e40d2ca04c" prot="public" virt="non-virtual"><scope>amrex::IParser</scope><name>~IParser</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
