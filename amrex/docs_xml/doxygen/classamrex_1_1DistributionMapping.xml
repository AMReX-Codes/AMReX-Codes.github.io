<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classamrex_1_1DistributionMapping" kind="class" language="C++" prot="public">
    <compoundname>amrex::DistributionMapping</compoundname>
    <includes refid="AMReX__DistributionMapping_8H" local="no">AMReX_DistributionMapping.H</includes>
    <innerclass refid="structamrex_1_1DistributionMapping_1_1LIpairGT" prot="private">amrex::DistributionMapping::LIpairGT</innerclass>
    <innerclass refid="structamrex_1_1DistributionMapping_1_1LIpairLT" prot="private">amrex::DistributionMapping::LIpairLT</innerclass>
    <innerclass refid="structamrex_1_1DistributionMapping_1_1Ref" prot="private">amrex::DistributionMapping::Ref</innerclass>
    <innerclass refid="structamrex_1_1DistributionMapping_1_1RefID" prot="public">amrex::DistributionMapping::RefID</innerclass>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classamrex_1_1DistributionMapping_1ad8e078b643635f0027eb797c2d54d3b8" prot="public" static="no">
        <name>Strategy</name>
        <enumvalue id="classamrex_1_1DistributionMapping_1ad8e078b643635f0027eb797c2d54d3b8a6ad808286f21d2e4851a30703a30d063" prot="public">
          <name>UNDEFINED</name>
          <initializer>= -1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classamrex_1_1DistributionMapping_1ad8e078b643635f0027eb797c2d54d3b8a787ff5451e57a2271607a0143b75a38d" prot="public">
          <name>ROUNDROBIN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classamrex_1_1DistributionMapping_1ad8e078b643635f0027eb797c2d54d3b8a6f5ec418bb5db591c4b5780f00cce82e" prot="public">
          <name>KNAPSACK</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classamrex_1_1DistributionMapping_1ad8e078b643635f0027eb797c2d54d3b8ad783c9afd6b9c9388ebbb4498c6b39e4" prot="public">
          <name>SFC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classamrex_1_1DistributionMapping_1ad8e078b643635f0027eb797c2d54d3b8a75876358b1ba6c4d337b466fc4404217" prot="public">
          <name>RRSFC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>The distribution strategies. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.H" line="49" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.H" bodystart="49" bodyend="49"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classamrex_1_1DistributionMapping_1a8bc191492d7a25e16f586ef1e625649c" prot="private" static="no">
        <type>std::pair&lt; Long, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
        <definition>using amrex::DistributionMapping::LIpair =  std::pair&lt;Long,int&gt;</definition>
        <argsstring></argsstring>
        <name>LIpair</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.H" line="266" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.H" bodystart="266" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1DistributionMapping_1a55afc17fcc72abd4f0f9bf4bd305ce4b" prot="private" static="no">
        <type>void(DistributionMapping::*</type>
        <definition>typedef void(DistributionMapping::* amrex::DistributionMapping::PVMF) (const BoxArray &amp;, int)</definition>
        <argsstring>)(const BoxArray &amp;, int)</argsstring>
        <name>PVMF</name>
        <briefdescription>
<para>A useful typedef. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.H" line="317" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.H" bodystart="317" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classamrex_1_1DistributionMapping_1a387a5ebdcf8845ac218d335706651b06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>friend class</type>
        <definition>friend class FabArray</definition>
        <argsstring></argsstring>
        <name>FabArray</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.H" line="45" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.H" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1DistributionMapping_1a4636f955857e2be478f7e1a6a43305ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class FabArrayBase</definition>
        <argsstring></argsstring>
        <name>FabArrayBase</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.H" line="46" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.H" bodystart="46" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classamrex_1_1DistributionMapping_1a5aadb0f378774b462229052551cd2db8" prot="private" static="yes" mutable="no">
        <type><ref refid="classamrex_1_1DistributionMapping_1ad8e078b643635f0027eb797c2d54d3b8" kindref="member">Strategy</ref></type>
        <definition>DistributionMapping::Strategy amrex::DistributionMapping::m_Strategy</definition>
        <argsstring></argsstring>
        <name>m_Strategy</name>
        <initializer>= <ref refid="classamrex_1_1DistributionMapping_1ad8e078b643635f0027eb797c2d54d3b8ad783c9afd6b9c9388ebbb4498c6b39e4" kindref="member">DistributionMapping::SFC</ref></initializer>
        <briefdescription>
<para>Everyone uses the same Strategy <ndash/> defaults to SFC. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.H" line="320" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.H" bodystart="320" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1DistributionMapping_1aea78b384d1325786fc3738a66cb16a32" prot="private" static="yes" mutable="no">
        <type><ref refid="classamrex_1_1DistributionMapping_1a55afc17fcc72abd4f0f9bf4bd305ce4b" kindref="member">PVMF</ref></type>
        <definition>DistributionMapping::PVMF amrex::DistributionMapping::m_BuildMap</definition>
        <argsstring></argsstring>
        <name>m_BuildMap</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Pointer to one of the CreateProcessorMap() functions. Corresponds to the one specified by m_Strategy. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.H" line="325" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.H" bodystart="325" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1DistributionMapping_1a66d4a4d11b9ff6a159c90448e55b6885" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="structamrex_1_1DistributionMapping_1_1Ref" kindref="compound">Ref</ref> &gt;</type>
        <definition>std::shared_ptr&lt;Ref&gt; amrex::DistributionMapping::m_ref</definition>
        <argsstring></argsstring>
        <name>m_ref</name>
        <briefdescription>
<para>The data <ndash/> a reference-counted pointer to a <ref refid="structamrex_1_1DistributionMapping_1_1Ref" kindref="compound">Ref</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.H" line="350" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.H" bodystart="350" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1DistributionMapping_1a47426065fbbdddda79a4dbaff28cfb13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::DistributionMapping::DistributionMapping</definition>
        <argsstring>()</argsstring>
        <name>DistributionMapping</name>
        <briefdescription>
<para>The default constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.H" line="52" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.cpp" bodystart="301" bodyend="305"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DistributionMapping_1a46d444147384008abb31507e25a6d191" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::DistributionMapping::DistributionMapping</definition>
        <argsstring>(const DistributionMapping &amp;rhs)=default</argsstring>
        <name>DistributionMapping</name>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>The copy constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.H" line="55" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DistributionMapping_1a230a40ea82e898784259ebb040a4791a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
        <definition>DistributionMapping&amp; amrex::DistributionMapping::operator=</definition>
        <argsstring>(const DistributionMapping &amp;rhs)=default</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>The copy assignment operator. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.H" line="58" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DistributionMapping_1a640d5ea0d462f3e133fba13902dbb5fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::DistributionMapping::DistributionMapping</definition>
        <argsstring>(DistributionMapping &amp;&amp;rhs) noexcept=default</argsstring>
        <name>DistributionMapping</name>
        <param>
          <type><ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>The move constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.H" line="61" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DistributionMapping_1aefa710ade223a08a0a1ee6babd8e97c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
        <definition>DistributionMapping&amp; amrex::DistributionMapping::operator=</definition>
        <argsstring>(DistributionMapping &amp;&amp;rhs) noexcept=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>The move assignment operator. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.H" line="64" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DistributionMapping_1aa68c8981b7dcfbaddbc6d3e8f36dd9a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::DistributionMapping::~DistributionMapping</definition>
        <argsstring>() noexcept=default</argsstring>
        <name>~DistributionMapping</name>
        <briefdescription>
<para>The destructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.H" line="67" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DistributionMapping_1abde23cc33667972a2afe218c001d6f70" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::DistributionMapping::DistributionMapping</definition>
        <argsstring>(const Vector&lt; int &gt; &amp;pmap)</argsstring>
        <name>DistributionMapping</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>pmap</declname>
        </param>
        <briefdescription>
<para>Create an object with the specified mapping. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.H" line="72" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.cpp" bodystart="307" bodyend="311"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DistributionMapping_1a4dd74437850acae369e8514f7a0b02c2" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::DistributionMapping::DistributionMapping</definition>
        <argsstring>(Vector&lt; int &gt; &amp;&amp;pmap) noexcept</argsstring>
        <name>DistributionMapping</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;&amp;</type>
          <declname>pmap</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.H" line="73" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.cpp" bodystart="313" bodyend="317"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DistributionMapping_1a703f47c1a88e1f3baa4c3f157b91eaaa" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::DistributionMapping::DistributionMapping</definition>
        <argsstring>(const BoxArray &amp;boxes, int nprocs=ParallelDescriptor::NProcs())</argsstring>
        <name>DistributionMapping</name>
        <param>
          <type>const BoxArray &amp;</type>
          <declname>boxes</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nprocs</declname>
          <defval><ref refid="namespaceamrex_1_1ParallelDescriptor_1aa191723b5d24ceaf64e9d49f542cfcc2" kindref="member">ParallelDescriptor::NProcs</ref>()</defval>
        </param>
        <briefdescription>
<para>Build mapping out of BoxArray over nprocs processors. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.H" line="75" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.cpp" bodystart="319" bodyend="325"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DistributionMapping_1a940ddab8afa610cdbfddc60ce7f5d6c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::DistributionMapping::DistributionMapping</definition>
        <argsstring>(const DistributionMapping &amp;d1, const DistributionMapping &amp;d2)</argsstring>
        <name>DistributionMapping</name>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>d1</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>d2</declname>
        </param>
        <briefdescription>
<para>This is a very specialized distribution map. Do NOT use it unless you really understand what it does. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.H" line="81" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.cpp" bodystart="327" bodyend="335"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DistributionMapping_1a13b8da5248f3f1d03708e1b313345847" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::DistributionMapping::define</definition>
        <argsstring>(const BoxArray &amp;boxes, int nprocs=ParallelDescriptor::NProcs())</argsstring>
        <name>define</name>
        <param>
          <type>const BoxArray &amp;</type>
          <declname>boxes</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nprocs</declname>
          <defval><ref refid="namespaceamrex_1_1ParallelDescriptor_1aa191723b5d24ceaf64e9d49f542cfcc2" kindref="member">ParallelDescriptor::NProcs</ref>()</defval>
        </param>
        <briefdescription>
<para>Build mapping out of BoxArray over nprocs processors. You need to call this if you built your <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> with the default constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.H" line="89" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.cpp" bodystart="338" bodyend="347"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DistributionMapping_1a96e7ada9652464ab1d4b27d7af839c62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::DistributionMapping::define</definition>
        <argsstring>(const Vector&lt; int &gt; &amp;pmap)</argsstring>
        <name>define</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>pmap</declname>
        </param>
        <briefdescription>
<para>Build mapping out of an Array of ints. You need to call this if you built your <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> with the default constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.H" line="94" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.cpp" bodystart="350" bodyend="354"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DistributionMapping_1a368e1c7d60259f1f979299bf15f7c22f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::DistributionMapping::define</definition>
        <argsstring>(Vector&lt; int &gt; &amp;&amp;pmap) noexcept</argsstring>
        <name>define</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;&amp;</type>
          <declname>pmap</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.H" line="95" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.cpp" bodystart="357" bodyend="361"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DistributionMapping_1ac1cd8ab03f5ec883f167f4e1148d29ee" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
        <definition>const Vector&lt; int &gt; &amp; amrex::DistributionMapping::ProcessorMap</definition>
        <argsstring>() const noexcept</argsstring>
        <name>ProcessorMap</name>
        <briefdescription>
<para>Returns a constant reference to the mapping of boxes in the underlying BoxArray to the CPU that holds the FAB on that <ref refid="classamrex_1_1Box" kindref="compound">Box</ref>. <ref refid="classamrex_1_1DistributionMapping_1ac1cd8ab03f5ec883f167f4e1148d29ee" kindref="member">ProcessorMap()</ref>[i] is an integer in the interval [0, NCPU) where NCPU is the number of CPUs being used. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.H" line="102" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.cpp" bodystart="46" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DistributionMapping_1a0eebc2b29efd96d23accd706ab5f6930" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Long</type>
        <definition>Long amrex::DistributionMapping::size</definition>
        <argsstring>() const noexcept</argsstring>
        <name>size</name>
        <briefdescription>
<para>Length of the underlying processor map. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.H" line="105" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.H" bodystart="105" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DistributionMapping_1ae88ca91d12a18c9eae7c36348e7c99fd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Long</type>
        <definition>Long amrex::DistributionMapping::capacity</definition>
        <argsstring>() const noexcept</argsstring>
        <name>capacity</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.H" line="106" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.H" bodystart="106" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DistributionMapping_1a3e7cd82f169573dfa29f3d453a9a40b9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::DistributionMapping::empty</definition>
        <argsstring>() const noexcept</argsstring>
        <name>empty</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.H" line="107" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.H" bodystart="107" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DistributionMapping_1a0e6e72d37c4f23eecead5b448e4d94f1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Long</type>
        <definition>Long amrex::DistributionMapping::linkCount</definition>
        <argsstring>() const noexcept</argsstring>
        <name>linkCount</name>
        <briefdescription>
<para>Number of references to this <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.H" line="110" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.H" bodystart="110" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DistributionMapping_1a051c0211689621d68f3565becf7adddd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::DistributionMapping::operator[]</definition>
        <argsstring>(int index) const noexcept</argsstring>
        <name>operator[]</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Equivalent to <ref refid="classamrex_1_1DistributionMapping_1ac1cd8ab03f5ec883f167f4e1148d29ee" kindref="member">ProcessorMap()</ref>[index]. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.H" line="113" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.H" bodystart="113" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DistributionMapping_1af4cb165d9e60aff6ad22b20d44ec22dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::istream &amp;</type>
        <definition>std::istream &amp; amrex::DistributionMapping::readFrom</definition>
        <argsstring>(std::istream &amp;is)</argsstring>
        <name>readFrom</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.H" line="115" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.cpp" bodystart="1894" bodyend="1911"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DistributionMapping_1a4e2f034c17bb24bb7a98e164c213f03b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; amrex::DistributionMapping::writeOn</definition>
        <argsstring>(std::ostream &amp;os) const</argsstring>
        <name>writeOn</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.H" line="117" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.cpp" bodystart="1914" bodyend="1925"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DistributionMapping_1a924f7db8b7071a964375eeb077ed72dc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::DistributionMapping::operator==</definition>
        <argsstring>(const DistributionMapping &amp;rhs) const noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Are the distributions equal? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.H" line="130" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.cpp" bodystart="94" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DistributionMapping_1a47d8be48dc04b300c928211027aa842f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::DistributionMapping::operator!=</definition>
        <argsstring>(const DistributionMapping &amp;rhs) const noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Are the distributions different? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.H" line="133" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.cpp" bodystart="100" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DistributionMapping_1abbce89f9e0c8bfb34b02b516b75a3482" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::DistributionMapping::SFCProcessorMap</definition>
        <argsstring>(const BoxArray &amp;boxes, const std::vector&lt; Long &gt; &amp;wgts, int nprocs, bool sort=true)</argsstring>
        <name>SFCProcessorMap</name>
        <param>
          <type>const BoxArray &amp;</type>
          <declname>boxes</declname>
        </param>
        <param>
          <type>const std::vector&lt; Long &gt; &amp;</type>
          <declname>wgts</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nprocs</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>sort</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.H" line="135" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.cpp" bodystart="1349" bodyend="1368"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DistributionMapping_1a3abd803a3f6d55816621735d7a7c1ed6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::DistributionMapping::SFCProcessorMap</definition>
        <argsstring>(const BoxArray &amp;boxes, const std::vector&lt; Long &gt; &amp;wgts, int nprocs, Real &amp;efficiency, bool sort=true)</argsstring>
        <name>SFCProcessorMap</name>
        <param>
          <type>const BoxArray &amp;</type>
          <declname>boxes</declname>
        </param>
        <param>
          <type>const std::vector&lt; Long &gt; &amp;</type>
          <declname>wgts</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nprocs</declname>
        </param>
        <param>
          <type>Real &amp;</type>
          <declname>efficiency</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>sort</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.H" line="137" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.cpp" bodystart="1371" bodyend="1391"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DistributionMapping_1af41949391775da61f74853fc6a16b686" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::DistributionMapping::KnapSackProcessorMap</definition>
        <argsstring>(const std::vector&lt; Long &gt; &amp;wgts, int nprocs, Real *efficiency=0, bool do_full_knapsack=true, int nmax=std::numeric_limits&lt; int &gt;::max(), bool sort=true)</argsstring>
        <name>KnapSackProcessorMap</name>
        <param>
          <type>const std::vector&lt; Long &gt; &amp;</type>
          <declname>wgts</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nprocs</declname>
        </param>
        <param>
          <type>Real *</type>
          <declname>efficiency</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>do_full_knapsack</declname>
          <defval>true</defval>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nmax</declname>
          <defval>std::numeric_limits&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::<ref refid="namespaceamrex_1a918b31ea2f518389047986cb72a8b546" kindref="member">max</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>sort</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.H" line="139" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.cpp" bodystart="829" bodyend="853"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DistributionMapping_1a295a0155d89fc1554d547fcf8392a3f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::DistributionMapping::RoundRobinProcessorMap</definition>
        <argsstring>(int nboxes, int nprocs)</argsstring>
        <name>RoundRobinProcessorMap</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nboxes</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nprocs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.H" line="144" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.cpp" bodystart="432" bodyend="439"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DistributionMapping_1a3913b30c0ab3b8c523f36128563815f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::DistributionMapping::RoundRobinProcessorMap</definition>
        <argsstring>(const std::vector&lt; Long &gt; &amp;wgts, int nprocs)</argsstring>
        <name>RoundRobinProcessorMap</name>
        <param>
          <type>const std::vector&lt; Long &gt; &amp;</type>
          <declname>wgts</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nprocs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.H" line="145" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.cpp" bodystart="474" bodyend="506"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DistributionMapping_1ac2246f88f7497945a0441732235d77b0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structamrex_1_1DistributionMapping_1_1RefID" kindref="compound">RefID</ref></type>
        <definition>RefID amrex::DistributionMapping::getRefID</definition>
        <argsstring>() const noexcept</argsstring>
        <name>getRefID</name>
        <briefdescription>
<para>This gives a unique ID of the reference, which is different from dmID above. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.H" line="367" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.H" bodystart="367" bodyend="367"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classamrex_1_1DistributionMapping_1add9f7493d35af3e2ad724ce9e55322ba" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::DistributionMapping::strategy</definition>
        <argsstring>(Strategy how)</argsstring>
        <name>strategy</name>
        <param>
          <type><ref refid="classamrex_1_1DistributionMapping_1ad8e078b643635f0027eb797c2d54d3b8" kindref="member">Strategy</ref></type>
          <declname>how</declname>
        </param>
        <briefdescription>
<para>Set/get the distribution strategy. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.H" line="120" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.cpp" bodystart="58" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DistributionMapping_1ac41e6c0536cc22b8c0d71c0450e58df2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1DistributionMapping_1ad8e078b643635f0027eb797c2d54d3b8" kindref="member">Strategy</ref></type>
        <definition>DistributionMapping::Strategy amrex::DistributionMapping::strategy</definition>
        <argsstring>()</argsstring>
        <name>strategy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.H" line="122" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.cpp" bodystart="52" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DistributionMapping_1a63653fe42e3932487e1f5ae3665d8c2e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::DistributionMapping::SFC_Threshold</definition>
        <argsstring>(int n)</argsstring>
        <name>SFC_Threshold</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Set/get the space filling curve threshold. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.H" line="125" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.cpp" bodystart="82" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DistributionMapping_1a2da18b37a31f8c679aa06df2e0f5d697" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::DistributionMapping::SFC_Threshold</definition>
        <argsstring>()</argsstring>
        <name>SFC_Threshold</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.H" line="127" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.cpp" bodystart="88" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DistributionMapping_1a03ecb8f0d75887ecef410b64566586bc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::DistributionMapping::Initialize</definition>
        <argsstring>()</argsstring>
        <name>Initialize</name>
        <briefdescription>
<para>Initializes distribution strategy from <ref refid="classamrex_1_1ParmParse" kindref="compound">ParmParse</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="classamrex_1_1ParmParse" kindref="compound">ParmParse</ref> options are:</para><para><ref refid="classamrex_1_1DistributionMapping_1add9f7493d35af3e2ad724ce9e55322ba" kindref="member">DistributionMapping.strategy</ref> = ROUNDROBIN <ref refid="classamrex_1_1DistributionMapping_1add9f7493d35af3e2ad724ce9e55322ba" kindref="member">DistributionMapping.strategy</ref> = KNAPSACK <ref refid="classamrex_1_1DistributionMapping_1add9f7493d35af3e2ad724ce9e55322ba" kindref="member">DistributionMapping.strategy</ref> = SFC <ref refid="classamrex_1_1DistributionMapping_1add9f7493d35af3e2ad724ce9e55322ba" kindref="member">DistributionMapping.strategy</ref> = RRFC </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.H" line="157" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.cpp" bodystart="106" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DistributionMapping_1ac8ce7dd033d1e5a163617b7b06d1fab0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::DistributionMapping::Finalize</definition>
        <argsstring>()</argsstring>
        <name>Finalize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.H" line="159" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.cpp" bodystart="165" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DistributionMapping_1a1c20460d2e7b2eaec474e933113575d9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool amrex::DistributionMapping::SameRefs</definition>
        <argsstring>(const DistributionMapping &amp;lhs, const DistributionMapping &amp;rhs)</argsstring>
        <name>SameRefs</name>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.H" line="161" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.H" bodystart="161" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DistributionMapping_1a0704dfa27b86490adf8d30ddf4cd54f6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref></type>
        <definition>DistributionMapping amrex::DistributionMapping::makeKnapSack</definition>
        <argsstring>(const MultiFab &amp;weight, int nmax=std::numeric_limits&lt; int &gt;::max())</argsstring>
        <name>makeKnapSack</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>weight</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nmax</declname>
          <defval>std::numeric_limits&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::<ref refid="namespaceamrex_1a918b31ea2f518389047986cb72a8b546" kindref="member">max</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.H" line="165" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.cpp" bodystart="1628" bodyend="1637"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DistributionMapping_1a7e828702ab51bdb55b0f15b71c86b420" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref></type>
        <definition>DistributionMapping amrex::DistributionMapping::makeKnapSack</definition>
        <argsstring>(const MultiFab &amp;weight, Real &amp;eff, int nmax=std::numeric_limits&lt; int &gt;::max())</argsstring>
        <name>makeKnapSack</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>weight</declname>
        </param>
        <param>
          <type>Real &amp;</type>
          <declname>eff</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nmax</declname>
          <defval>std::numeric_limits&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::<ref refid="namespaceamrex_1a918b31ea2f518389047986cb72a8b546" kindref="member">max</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.H" line="167" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.cpp" bodystart="1640" bodyend="1648"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DistributionMapping_1ae4537c97b68ccdc4d6689c3363b2e7d9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref></type>
        <definition>DistributionMapping amrex::DistributionMapping::makeKnapSack</definition>
        <argsstring>(const Vector&lt; Real &gt; &amp;rcost, int nmax=std::numeric_limits&lt; int &gt;::max())</argsstring>
        <name>makeKnapSack</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &amp;</type>
          <declname>rcost</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nmax</declname>
          <defval>std::numeric_limits&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::<ref refid="namespaceamrex_1a918b31ea2f518389047986cb72a8b546" kindref="member">max</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.H" line="169" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.cpp" bodystart="1439" bodyend="1460"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DistributionMapping_1a2ef033cdeecaf68beca223b0eb537bb4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref></type>
        <definition>DistributionMapping amrex::DistributionMapping::makeKnapSack</definition>
        <argsstring>(const Vector&lt; Real &gt; &amp;rcost, Real &amp;eff, int nmax=std::numeric_limits&lt; int &gt;::max(), bool sort=true)</argsstring>
        <name>makeKnapSack</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &amp;</type>
          <declname>rcost</declname>
        </param>
        <param>
          <type>Real &amp;</type>
          <declname>eff</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nmax</declname>
          <defval>std::numeric_limits&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::<ref refid="namespaceamrex_1a918b31ea2f518389047986cb72a8b546" kindref="member">max</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>sort</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.H" line="171" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.cpp" bodystart="1463" bodyend="1483"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DistributionMapping_1aca77d66a4ccd0c7c23843bd09d223a26" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref></type>
        <definition>DistributionMapping amrex::DistributionMapping::makeKnapSack</definition>
        <argsstring>(const LayoutData&lt; Real &gt; &amp;rcost_local, Real &amp;currentEfficiency, Real &amp;proposedEfficiency, int nmax=std::numeric_limits&lt; int &gt;::max(), bool broadcastToAll=true, int root=ParallelDescriptor::IOProcessorNumber())</argsstring>
        <name>makeKnapSack</name>
        <param>
          <type>const <ref refid="classamrex_1_1LayoutData" kindref="compound">LayoutData</ref>&lt; Real &gt; &amp;</type>
          <declname>rcost_local</declname>
        </param>
        <param>
          <type>Real &amp;</type>
          <declname>currentEfficiency</declname>
        </param>
        <param>
          <type>Real &amp;</type>
          <declname>proposedEfficiency</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nmax</declname>
          <defval>std::numeric_limits&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::<ref refid="namespaceamrex_1a918b31ea2f518389047986cb72a8b546" kindref="member">max</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>broadcastToAll</declname>
          <defval>true</defval>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>root</declname>
          <defval><ref refid="namespaceamrex_1_1ParallelDescriptor_1ab734a5d614e753d28d03865ee6e4039a" kindref="member">ParallelDescriptor::IOProcessorNumber</ref>()</defval>
        </param>
        <briefdescription>
<para>Computes a new distribution mapping by distributing input costs according to the <computeroutput>knapsack</computeroutput> algorithm. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">rcost_local</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classamrex_1_1LayoutData" kindref="compound">LayoutData</ref> of costs; contains, e.g., costs for the local boxes in the FAB array, corresponding indices in the global indices in the FAB array, and the distribution mapping </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">currentEfficiency</parametername>
</parameternamelist>
<parameterdescription>
<para>writes the efficiency (i.e., mean cost over all MPI ranks, normalized to the max cost) given the current distribution mapping </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">proposedEfficiency</parametername>
</parameternamelist>
<parameterdescription>
<para>writes the efficiency for the proposed distribution mapping </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">nmax</parametername>
</parameternamelist>
<parameterdescription>
<para>the maximum number of boxes that can be assigned to any MPI rank by the knapsack algorithm </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">broadcastToAll</parametername>
</parameternamelist>
<parameterdescription>
<para>controls whether to transmit the proposed distribution mapping to all other processes; setting this to false allows to, e.g., test whether the proposed distribution mapping is an improvement relative to the current distribution mapping, before deciding to broadcast the proposed distribution mapping </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">root</parametername>
</parameternamelist>
<parameterdescription>
<para>which process to collect the local costs from others and compute the proposed distribution mapping </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the proposed load-balanced distribution mapping </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.H" line="197" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.cpp" bodystart="1486" bodyend="1549"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DistributionMapping_1a70511fca0600a56369ce74f28cbc9d99" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref></type>
        <definition>DistributionMapping amrex::DistributionMapping::makeRoundRobin</definition>
        <argsstring>(const MultiFab &amp;weight)</argsstring>
        <name>makeRoundRobin</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>weight</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.H" line="203" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.cpp" bodystart="1651" bodyend="1659"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DistributionMapping_1aa07e2c79e1100575a40bdb8c2b3efe03" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref></type>
        <definition>DistributionMapping amrex::DistributionMapping::makeSFC</definition>
        <argsstring>(const MultiFab &amp;weight, bool sort=true)</argsstring>
        <name>makeSFC</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>weight</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>sort</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.H" line="204" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.cpp" bodystart="1662" bodyend="1670"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DistributionMapping_1abb2f4bf15b369e16d6387333ef7a0d54" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref></type>
        <definition>DistributionMapping amrex::DistributionMapping::makeSFC</definition>
        <argsstring>(const MultiFab &amp;weight, Real &amp;eff, bool sort=true)</argsstring>
        <name>makeSFC</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>weight</declname>
        </param>
        <param>
          <type>Real &amp;</type>
          <declname>eff</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>sort</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.H" line="205" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.cpp" bodystart="1673" bodyend="1681"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DistributionMapping_1a5149c43052f843c3e37014f3a3fa2e96" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref></type>
        <definition>DistributionMapping amrex::DistributionMapping::makeSFC</definition>
        <argsstring>(const Vector&lt; Real &gt; &amp;rcost, const BoxArray &amp;ba, bool sort=true)</argsstring>
        <name>makeSFC</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &amp;</type>
          <declname>rcost</declname>
        </param>
        <param>
          <type>const BoxArray &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>sort</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.H" line="206" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.cpp" bodystart="1684" bodyend="1704"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DistributionMapping_1adeed6f16e7f9636c8733845ad5803804" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref></type>
        <definition>DistributionMapping amrex::DistributionMapping::makeSFC</definition>
        <argsstring>(const Vector&lt; Real &gt; &amp;rcost, const BoxArray &amp;ba, Real &amp;eff, bool sort=true)</argsstring>
        <name>makeSFC</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &amp;</type>
          <declname>rcost</declname>
        </param>
        <param>
          <type>const BoxArray &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>Real &amp;</type>
          <declname>eff</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>sort</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.H" line="208" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.cpp" bodystart="1707" bodyend="1727"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DistributionMapping_1a3691234f6667de564cebb4e990a4b143" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref></type>
        <definition>DistributionMapping amrex::DistributionMapping::makeSFC</definition>
        <argsstring>(const LayoutData&lt; Real &gt; &amp;rcost_local, Real &amp;currentEfficiency, Real &amp;proposedEfficiency, bool broadcastToAll=true, int root=ParallelDescriptor::IOProcessorNumber())</argsstring>
        <name>makeSFC</name>
        <param>
          <type>const <ref refid="classamrex_1_1LayoutData" kindref="compound">LayoutData</ref>&lt; Real &gt; &amp;</type>
          <declname>rcost_local</declname>
        </param>
        <param>
          <type>Real &amp;</type>
          <declname>currentEfficiency</declname>
        </param>
        <param>
          <type>Real &amp;</type>
          <declname>proposedEfficiency</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>broadcastToAll</declname>
          <defval>true</defval>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>root</declname>
          <defval><ref refid="namespaceamrex_1_1ParallelDescriptor_1ab734a5d614e753d28d03865ee6e4039a" kindref="member">ParallelDescriptor::IOProcessorNumber</ref>()</defval>
        </param>
        <briefdescription>
<para>Computes a new distribution mapping by distributing input costs according to a <computeroutput>space filling curve</computeroutput> (SFC) algorithm. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">rcost_local</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classamrex_1_1LayoutData" kindref="compound">LayoutData</ref> of costs; contains, e.g., costs for the local boxes in the FAB array, corresponding indices in the global indices in the FAB array, and the distribution mapping </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">currentEfficiency</parametername>
</parameternamelist>
<parameterdescription>
<para>writes the efficiency (i.e., mean cost over all MPI ranks, normalized to the max cost) given the current distribution mapping </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">proposedEfficiency</parametername>
</parameternamelist>
<parameterdescription>
<para>writes the efficiency for the proposed distribution mapping </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">broadcastToAll</parametername>
</parameternamelist>
<parameterdescription>
<para>controls whether to transmit the proposed distribution mapping to all other processes; setting this to false allows to, e.g., test whether the proposed distribution mapping is an improvement relative to the current distribution mapping, before deciding to broadcast the proposed distribution mapping </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">root</parametername>
</parameternamelist>
<parameterdescription>
<para>which process to collect the local costs from others and compute the proposed distribution mapping </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the proposed load-balanced distribution mapping </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.H" line="231" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.cpp" bodystart="1730" bodyend="1793"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DistributionMapping_1a519e5ab2bd07785885734c5bf5149b6c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::vector&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &gt;</type>
        <definition>std::vector&lt; std::vector&lt; int &gt; &gt; amrex::DistributionMapping::makeSFC</definition>
        <argsstring>(const BoxArray &amp;ba, bool use_box_vol=true, const int nprocs=ParallelContext::NProcsSub())</argsstring>
        <name>makeSFC</name>
        <param>
          <type>const BoxArray &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>use_box_vol</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nprocs</declname>
          <defval><ref refid="namespaceamrex_1_1ParallelContext_1aa7f481a6be5e8f2eefbe9448135a3843" kindref="member">ParallelContext::NProcsSub</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>if use_box_vol is true, weight boxes by their volume in Distribute otherwise, all boxes will be treated with equal weight </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.H" line="240" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.cpp" bodystart="1796" bodyend="1827"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DistributionMapping_1aa54a3f9e80ba4f24e8b3663f2634bf4d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::DistributionMapping::ComputeDistributionMappingEfficiency</definition>
        <argsstring>(const DistributionMapping &amp;dm, const Vector&lt; Real &gt; &amp;cost, Real *efficiency)</argsstring>
        <name>ComputeDistributionMappingEfficiency</name>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &amp;</type>
          <declname>cost</declname>
        </param>
        <param>
          <type>Real *</type>
          <declname>efficiency</declname>
        </param>
        <briefdescription>
<para>Computes the average cost per MPI rank given a distribution mapping global cost vector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dm</parametername>
</parameternamelist>
<parameterdescription>
<para>distribution mapping (mapping from FAB to MPI processes) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cost</parametername>
</parameternamelist>
<parameterdescription>
<para>vector giving mapping from FAB to the corresponding cost </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">efficiency</parametername>
</parameternamelist>
<parameterdescription>
<para>average cost per MPI process, as computed from the given distribution mapping and cost </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.H" line="251" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.cpp" bodystart="1552" bodyend="1596"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classamrex_1_1DistributionMapping_1aa680d94d22fd2dc0e9e6ab1c224113ff" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
        <definition>const Vector&lt; int &gt; &amp; amrex::DistributionMapping::getIndexArray</definition>
        <argsstring>()</argsstring>
        <name>getIndexArray</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.H" line="257" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.cpp" bodystart="1830" bodyend="1846"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DistributionMapping_1a8eb230cc640400a27702a048a611b0af" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const std::vector&lt; bool &gt; &amp;</type>
        <definition>const std::vector&lt; bool &gt; &amp; amrex::DistributionMapping::getOwnerShip</definition>
        <argsstring>()</argsstring>
        <name>getOwnerShip</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.H" line="258" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.cpp" bodystart="1849" bodyend="1865"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DistributionMapping_1a2f4b44ca0d107e8f4a140df9d04a6c14" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::DistributionMapping::RoundRobinProcessorMap</definition>
        <argsstring>(const BoxArray &amp;boxes, int nprocs)</argsstring>
        <name>RoundRobinProcessorMap</name>
        <param>
          <type>const BoxArray &amp;</type>
          <declname>boxes</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nprocs</declname>
        </param>
        <briefdescription>
<para>Ways to create the processor map. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.H" line="261" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.cpp" bodystart="442" bodyend="470"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DistributionMapping_1adee3630696a974eb1b9c22046f0dc653" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::DistributionMapping::KnapSackProcessorMap</definition>
        <argsstring>(const BoxArray &amp;boxes, int nprocs)</argsstring>
        <name>KnapSackProcessorMap</name>
        <param>
          <type>const BoxArray &amp;</type>
          <declname>boxes</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nprocs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.H" line="262" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.cpp" bodystart="856" bodyend="878"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DistributionMapping_1a1960a437a27e870cd41e9e837c196a57" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::DistributionMapping::SFCProcessorMap</definition>
        <argsstring>(const BoxArray &amp;boxes, int nprocs)</argsstring>
        <name>SFCProcessorMap</name>
        <param>
          <type>const BoxArray &amp;</type>
          <declname>boxes</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nprocs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.H" line="263" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.cpp" bodystart="1321" bodyend="1346"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DistributionMapping_1a0e9524ab8bf5f4d8165c501ecc5cc5bb" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::DistributionMapping::RRSFCProcessorMap</definition>
        <argsstring>(const BoxArray &amp;boxes, int nprocs)</argsstring>
        <name>RRSFCProcessorMap</name>
        <param>
          <type>const BoxArray &amp;</type>
          <declname>boxes</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nprocs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.H" line="264" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.cpp" bodystart="1427" bodyend="1436"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DistributionMapping_1a313e8110b092f0786f5224a927030fa5" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::DistributionMapping::RoundRobinDoIt</definition>
        <argsstring>(int nboxes, int nprocs, std::vector&lt; LIpair &gt; *LIpairV=0)</argsstring>
        <name>RoundRobinDoIt</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nboxes</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nprocs</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classamrex_1_1DistributionMapping_1a8bc191492d7a25e16f586ef1e625649c" kindref="member">LIpair</ref> &gt; *</type>
          <declname>LIpairV</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.H" line="288" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.cpp" bodystart="364" bodyend="429"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DistributionMapping_1a1f6ec86cb567ef3c761c2cf693aa870d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::DistributionMapping::KnapSackDoIt</definition>
        <argsstring>(const std::vector&lt; Long &gt; &amp;wgts, int nprocs, Real &amp;efficiency, bool do_full_knapsack, int nmax=std::numeric_limits&lt; int &gt;::max(), bool sort=true)</argsstring>
        <name>KnapSackDoIt</name>
        <param>
          <type>const std::vector&lt; Long &gt; &amp;</type>
          <declname>wgts</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nprocs</declname>
        </param>
        <param>
          <type>Real &amp;</type>
          <declname>efficiency</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_full_knapsack</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nmax</declname>
          <defval>std::numeric_limits&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::<ref refid="namespaceamrex_1a918b31ea2f518389047986cb72a8b546" kindref="member">max</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>sort</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.H" line="292" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.cpp" bodystart="701" bodyend="826"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DistributionMapping_1a13273515e111009ee6d6ade3e0581c30" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::DistributionMapping::SFCProcessorMapDoIt</definition>
        <argsstring>(const BoxArray &amp;boxes, const std::vector&lt; Long &gt; &amp;wgts, int nprocs, bool sort=true, Real *efficiency=nullptr)</argsstring>
        <name>SFCProcessorMapDoIt</name>
        <param>
          <type>const BoxArray &amp;</type>
          <declname>boxes</declname>
        </param>
        <param>
          <type>const std::vector&lt; Long &gt; &amp;</type>
          <declname>wgts</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nprocs</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>sort</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>Real *</type>
          <declname>efficiency</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.H" line="299" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.cpp" bodystart="1123" bodyend="1318"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DistributionMapping_1a2a57f52831edc3b6ebf3facf3a065933" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::DistributionMapping::RRSFCDoIt</definition>
        <argsstring>(const BoxArray &amp;boxes, int nprocs)</argsstring>
        <name>RRSFCDoIt</name>
        <param>
          <type>const BoxArray &amp;</type>
          <declname>boxes</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nprocs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.H" line="305" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.cpp" bodystart="1394" bodyend="1424"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DistributionMapping_1acbe214292ef7da8223f4318919642ace" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::DistributionMapping::LeastUsedCPUs</definition>
        <argsstring>(int nprocs, Vector&lt; int &gt; &amp;result)</argsstring>
        <name>LeastUsedCPUs</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nprocs</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Least used ordering of CPUs (by # of bytes of FAB data). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.H" line="309" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.cpp" bodystart="190" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DistributionMapping_1a55134783f651fecac1282ea2029428f3" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::DistributionMapping::LeastUsedTeams</definition>
        <argsstring>(Vector&lt; int &gt; &amp;rteam, Vector&lt; Vector&lt; int &gt; &gt; &amp;rworker, int nteams, int nworkers)</argsstring>
        <name>LeastUsedTeams</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>rteam</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &gt; &amp;</type>
          <declname>rworker</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nteams</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nworkers</declname>
        </param>
        <briefdescription>
<para>rteam: Least used ordering of Teams rworker[i]: Least used ordering of team workers for Team i </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.H" line="314" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.cpp" bodystart="237" bodyend="299"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classamrex_1_1DistributionMapping_1a65d02277c7532c3befd7d24aeda66a0d" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::DistributionMapping::Sort</definition>
        <argsstring>(std::vector&lt; LIpair &gt; &amp;vec, bool reverse)</argsstring>
        <name>Sort</name>
        <param>
          <type>std::vector&lt; <ref refid="classamrex_1_1DistributionMapping_1a8bc191492d7a25e16f586ef1e625649c" kindref="member">LIpair</ref> &gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>reverse</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.H" line="286" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.cpp" bodystart="175" bodyend="187"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Calculates the distribution of FABs to MPI processes. </para>    </briefdescription>
    <detaileddescription>
<para>This class calculates the distribution of FABs to MPI processes in a <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> in a multi-processor environment. By distribution is meant what MPI process in the multi-processor environment owns what FAB. Only the BoxArray on which the <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> is built is used in determining the distribution. The three types of distributions supported are round-robin, knapsack, and SFC. In the round-robin distribution FAB i is owned by CPU iN where N is total number of CPUs. In the knapsack distribution the FABs are partitioned across CPUs such that the total volume of the Boxes in the underlying BoxArray are as equal across CPUs as is possible. The SFC distribution is based on a space filling curve. </para>    </detaileddescription>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.H" line="42" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.H" bodystart="41" bodyend="368"/>
    <listofallmembers>
      <member refid="classamrex_1_1DistributionMapping_1ae88ca91d12a18c9eae7c36348e7c99fd" prot="public" virt="non-virtual"><scope>amrex::DistributionMapping</scope><name>capacity</name></member>
      <member refid="classamrex_1_1DistributionMapping_1aa54a3f9e80ba4f24e8b3663f2634bf4d" prot="public" virt="non-virtual"><scope>amrex::DistributionMapping</scope><name>ComputeDistributionMappingEfficiency</name></member>
      <member refid="classamrex_1_1DistributionMapping_1a13b8da5248f3f1d03708e1b313345847" prot="public" virt="non-virtual"><scope>amrex::DistributionMapping</scope><name>define</name></member>
      <member refid="classamrex_1_1DistributionMapping_1a96e7ada9652464ab1d4b27d7af839c62" prot="public" virt="non-virtual"><scope>amrex::DistributionMapping</scope><name>define</name></member>
      <member refid="classamrex_1_1DistributionMapping_1a368e1c7d60259f1f979299bf15f7c22f" prot="public" virt="non-virtual"><scope>amrex::DistributionMapping</scope><name>define</name></member>
      <member refid="classamrex_1_1DistributionMapping_1a47426065fbbdddda79a4dbaff28cfb13" prot="public" virt="non-virtual"><scope>amrex::DistributionMapping</scope><name>DistributionMapping</name></member>
      <member refid="classamrex_1_1DistributionMapping_1a46d444147384008abb31507e25a6d191" prot="public" virt="non-virtual"><scope>amrex::DistributionMapping</scope><name>DistributionMapping</name></member>
      <member refid="classamrex_1_1DistributionMapping_1a640d5ea0d462f3e133fba13902dbb5fd" prot="public" virt="non-virtual"><scope>amrex::DistributionMapping</scope><name>DistributionMapping</name></member>
      <member refid="classamrex_1_1DistributionMapping_1abde23cc33667972a2afe218c001d6f70" prot="public" virt="non-virtual"><scope>amrex::DistributionMapping</scope><name>DistributionMapping</name></member>
      <member refid="classamrex_1_1DistributionMapping_1a4dd74437850acae369e8514f7a0b02c2" prot="public" virt="non-virtual"><scope>amrex::DistributionMapping</scope><name>DistributionMapping</name></member>
      <member refid="classamrex_1_1DistributionMapping_1a703f47c1a88e1f3baa4c3f157b91eaaa" prot="public" virt="non-virtual"><scope>amrex::DistributionMapping</scope><name>DistributionMapping</name></member>
      <member refid="classamrex_1_1DistributionMapping_1a940ddab8afa610cdbfddc60ce7f5d6c2" prot="public" virt="non-virtual"><scope>amrex::DistributionMapping</scope><name>DistributionMapping</name></member>
      <member refid="classamrex_1_1DistributionMapping_1a3e7cd82f169573dfa29f3d453a9a40b9" prot="public" virt="non-virtual"><scope>amrex::DistributionMapping</scope><name>empty</name></member>
      <member refid="classamrex_1_1DistributionMapping_1a387a5ebdcf8845ac218d335706651b06" prot="public" virt="non-virtual"><scope>amrex::DistributionMapping</scope><name>FabArray</name></member>
      <member refid="classamrex_1_1DistributionMapping_1a4636f955857e2be478f7e1a6a43305ee" prot="public" virt="non-virtual"><scope>amrex::DistributionMapping</scope><name>FabArrayBase</name></member>
      <member refid="classamrex_1_1DistributionMapping_1ac8ce7dd033d1e5a163617b7b06d1fab0" prot="public" virt="non-virtual"><scope>amrex::DistributionMapping</scope><name>Finalize</name></member>
      <member refid="classamrex_1_1DistributionMapping_1aa680d94d22fd2dc0e9e6ab1c224113ff" prot="private" virt="non-virtual"><scope>amrex::DistributionMapping</scope><name>getIndexArray</name></member>
      <member refid="classamrex_1_1DistributionMapping_1a8eb230cc640400a27702a048a611b0af" prot="private" virt="non-virtual"><scope>amrex::DistributionMapping</scope><name>getOwnerShip</name></member>
      <member refid="classamrex_1_1DistributionMapping_1ac2246f88f7497945a0441732235d77b0" prot="public" virt="non-virtual"><scope>amrex::DistributionMapping</scope><name>getRefID</name></member>
      <member refid="classamrex_1_1DistributionMapping_1a03ecb8f0d75887ecef410b64566586bc" prot="public" virt="non-virtual"><scope>amrex::DistributionMapping</scope><name>Initialize</name></member>
      <member refid="classamrex_1_1DistributionMapping_1ad8e078b643635f0027eb797c2d54d3b8a6f5ec418bb5db591c4b5780f00cce82e" prot="public" virt="non-virtual"><scope>amrex::DistributionMapping</scope><name>KNAPSACK</name></member>
      <member refid="classamrex_1_1DistributionMapping_1a1f6ec86cb567ef3c761c2cf693aa870d" prot="private" virt="non-virtual"><scope>amrex::DistributionMapping</scope><name>KnapSackDoIt</name></member>
      <member refid="classamrex_1_1DistributionMapping_1af41949391775da61f74853fc6a16b686" prot="public" virt="non-virtual"><scope>amrex::DistributionMapping</scope><name>KnapSackProcessorMap</name></member>
      <member refid="classamrex_1_1DistributionMapping_1adee3630696a974eb1b9c22046f0dc653" prot="private" virt="non-virtual"><scope>amrex::DistributionMapping</scope><name>KnapSackProcessorMap</name></member>
      <member refid="classamrex_1_1DistributionMapping_1acbe214292ef7da8223f4318919642ace" prot="private" virt="non-virtual"><scope>amrex::DistributionMapping</scope><name>LeastUsedCPUs</name></member>
      <member refid="classamrex_1_1DistributionMapping_1a55134783f651fecac1282ea2029428f3" prot="private" virt="non-virtual"><scope>amrex::DistributionMapping</scope><name>LeastUsedTeams</name></member>
      <member refid="classamrex_1_1DistributionMapping_1a0e6e72d37c4f23eecead5b448e4d94f1" prot="public" virt="non-virtual"><scope>amrex::DistributionMapping</scope><name>linkCount</name></member>
      <member refid="classamrex_1_1DistributionMapping_1a8bc191492d7a25e16f586ef1e625649c" prot="private" virt="non-virtual"><scope>amrex::DistributionMapping</scope><name>LIpair</name></member>
      <member refid="classamrex_1_1DistributionMapping_1aea78b384d1325786fc3738a66cb16a32" prot="private" virt="non-virtual"><scope>amrex::DistributionMapping</scope><name>m_BuildMap</name></member>
      <member refid="classamrex_1_1DistributionMapping_1a66d4a4d11b9ff6a159c90448e55b6885" prot="private" virt="non-virtual"><scope>amrex::DistributionMapping</scope><name>m_ref</name></member>
      <member refid="classamrex_1_1DistributionMapping_1a5aadb0f378774b462229052551cd2db8" prot="private" virt="non-virtual"><scope>amrex::DistributionMapping</scope><name>m_Strategy</name></member>
      <member refid="classamrex_1_1DistributionMapping_1a0704dfa27b86490adf8d30ddf4cd54f6" prot="public" virt="non-virtual"><scope>amrex::DistributionMapping</scope><name>makeKnapSack</name></member>
      <member refid="classamrex_1_1DistributionMapping_1a7e828702ab51bdb55b0f15b71c86b420" prot="public" virt="non-virtual"><scope>amrex::DistributionMapping</scope><name>makeKnapSack</name></member>
      <member refid="classamrex_1_1DistributionMapping_1ae4537c97b68ccdc4d6689c3363b2e7d9" prot="public" virt="non-virtual"><scope>amrex::DistributionMapping</scope><name>makeKnapSack</name></member>
      <member refid="classamrex_1_1DistributionMapping_1a2ef033cdeecaf68beca223b0eb537bb4" prot="public" virt="non-virtual"><scope>amrex::DistributionMapping</scope><name>makeKnapSack</name></member>
      <member refid="classamrex_1_1DistributionMapping_1aca77d66a4ccd0c7c23843bd09d223a26" prot="public" virt="non-virtual"><scope>amrex::DistributionMapping</scope><name>makeKnapSack</name></member>
      <member refid="classamrex_1_1DistributionMapping_1a70511fca0600a56369ce74f28cbc9d99" prot="public" virt="non-virtual"><scope>amrex::DistributionMapping</scope><name>makeRoundRobin</name></member>
      <member refid="classamrex_1_1DistributionMapping_1aa07e2c79e1100575a40bdb8c2b3efe03" prot="public" virt="non-virtual"><scope>amrex::DistributionMapping</scope><name>makeSFC</name></member>
      <member refid="classamrex_1_1DistributionMapping_1abb2f4bf15b369e16d6387333ef7a0d54" prot="public" virt="non-virtual"><scope>amrex::DistributionMapping</scope><name>makeSFC</name></member>
      <member refid="classamrex_1_1DistributionMapping_1a5149c43052f843c3e37014f3a3fa2e96" prot="public" virt="non-virtual"><scope>amrex::DistributionMapping</scope><name>makeSFC</name></member>
      <member refid="classamrex_1_1DistributionMapping_1adeed6f16e7f9636c8733845ad5803804" prot="public" virt="non-virtual"><scope>amrex::DistributionMapping</scope><name>makeSFC</name></member>
      <member refid="classamrex_1_1DistributionMapping_1a3691234f6667de564cebb4e990a4b143" prot="public" virt="non-virtual"><scope>amrex::DistributionMapping</scope><name>makeSFC</name></member>
      <member refid="classamrex_1_1DistributionMapping_1a519e5ab2bd07785885734c5bf5149b6c" prot="public" virt="non-virtual"><scope>amrex::DistributionMapping</scope><name>makeSFC</name></member>
      <member refid="classamrex_1_1DistributionMapping_1a47d8be48dc04b300c928211027aa842f" prot="public" virt="non-virtual"><scope>amrex::DistributionMapping</scope><name>operator!=</name></member>
      <member refid="classamrex_1_1DistributionMapping_1a230a40ea82e898784259ebb040a4791a" prot="public" virt="non-virtual"><scope>amrex::DistributionMapping</scope><name>operator=</name></member>
      <member refid="classamrex_1_1DistributionMapping_1aefa710ade223a08a0a1ee6babd8e97c2" prot="public" virt="non-virtual"><scope>amrex::DistributionMapping</scope><name>operator=</name></member>
      <member refid="classamrex_1_1DistributionMapping_1a924f7db8b7071a964375eeb077ed72dc" prot="public" virt="non-virtual"><scope>amrex::DistributionMapping</scope><name>operator==</name></member>
      <member refid="classamrex_1_1DistributionMapping_1a051c0211689621d68f3565becf7adddd" prot="public" virt="non-virtual"><scope>amrex::DistributionMapping</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1DistributionMapping_1ac1cd8ab03f5ec883f167f4e1148d29ee" prot="public" virt="non-virtual"><scope>amrex::DistributionMapping</scope><name>ProcessorMap</name></member>
      <member refid="classamrex_1_1DistributionMapping_1a55afc17fcc72abd4f0f9bf4bd305ce4b" prot="private" virt="non-virtual"><scope>amrex::DistributionMapping</scope><name>PVMF</name></member>
      <member refid="classamrex_1_1DistributionMapping_1af4cb165d9e60aff6ad22b20d44ec22dd" prot="public" virt="non-virtual"><scope>amrex::DistributionMapping</scope><name>readFrom</name></member>
      <member refid="classamrex_1_1DistributionMapping_1ad8e078b643635f0027eb797c2d54d3b8a787ff5451e57a2271607a0143b75a38d" prot="public" virt="non-virtual"><scope>amrex::DistributionMapping</scope><name>ROUNDROBIN</name></member>
      <member refid="classamrex_1_1DistributionMapping_1a313e8110b092f0786f5224a927030fa5" prot="private" virt="non-virtual"><scope>amrex::DistributionMapping</scope><name>RoundRobinDoIt</name></member>
      <member refid="classamrex_1_1DistributionMapping_1a295a0155d89fc1554d547fcf8392a3f4" prot="public" virt="non-virtual"><scope>amrex::DistributionMapping</scope><name>RoundRobinProcessorMap</name></member>
      <member refid="classamrex_1_1DistributionMapping_1a3913b30c0ab3b8c523f36128563815f5" prot="public" virt="non-virtual"><scope>amrex::DistributionMapping</scope><name>RoundRobinProcessorMap</name></member>
      <member refid="classamrex_1_1DistributionMapping_1a2f4b44ca0d107e8f4a140df9d04a6c14" prot="private" virt="non-virtual"><scope>amrex::DistributionMapping</scope><name>RoundRobinProcessorMap</name></member>
      <member refid="classamrex_1_1DistributionMapping_1ad8e078b643635f0027eb797c2d54d3b8a75876358b1ba6c4d337b466fc4404217" prot="public" virt="non-virtual"><scope>amrex::DistributionMapping</scope><name>RRSFC</name></member>
      <member refid="classamrex_1_1DistributionMapping_1a2a57f52831edc3b6ebf3facf3a065933" prot="private" virt="non-virtual"><scope>amrex::DistributionMapping</scope><name>RRSFCDoIt</name></member>
      <member refid="classamrex_1_1DistributionMapping_1a0e9524ab8bf5f4d8165c501ecc5cc5bb" prot="private" virt="non-virtual"><scope>amrex::DistributionMapping</scope><name>RRSFCProcessorMap</name></member>
      <member refid="classamrex_1_1DistributionMapping_1a1c20460d2e7b2eaec474e933113575d9" prot="public" virt="non-virtual"><scope>amrex::DistributionMapping</scope><name>SameRefs</name></member>
      <member refid="classamrex_1_1DistributionMapping_1ad8e078b643635f0027eb797c2d54d3b8ad783c9afd6b9c9388ebbb4498c6b39e4" prot="public" virt="non-virtual"><scope>amrex::DistributionMapping</scope><name>SFC</name></member>
      <member refid="classamrex_1_1DistributionMapping_1a63653fe42e3932487e1f5ae3665d8c2e" prot="public" virt="non-virtual"><scope>amrex::DistributionMapping</scope><name>SFC_Threshold</name></member>
      <member refid="classamrex_1_1DistributionMapping_1a2da18b37a31f8c679aa06df2e0f5d697" prot="public" virt="non-virtual"><scope>amrex::DistributionMapping</scope><name>SFC_Threshold</name></member>
      <member refid="classamrex_1_1DistributionMapping_1abbce89f9e0c8bfb34b02b516b75a3482" prot="public" virt="non-virtual"><scope>amrex::DistributionMapping</scope><name>SFCProcessorMap</name></member>
      <member refid="classamrex_1_1DistributionMapping_1a3abd803a3f6d55816621735d7a7c1ed6" prot="public" virt="non-virtual"><scope>amrex::DistributionMapping</scope><name>SFCProcessorMap</name></member>
      <member refid="classamrex_1_1DistributionMapping_1a1960a437a27e870cd41e9e837c196a57" prot="private" virt="non-virtual"><scope>amrex::DistributionMapping</scope><name>SFCProcessorMap</name></member>
      <member refid="classamrex_1_1DistributionMapping_1a13273515e111009ee6d6ade3e0581c30" prot="private" virt="non-virtual"><scope>amrex::DistributionMapping</scope><name>SFCProcessorMapDoIt</name></member>
      <member refid="classamrex_1_1DistributionMapping_1a0eebc2b29efd96d23accd706ab5f6930" prot="public" virt="non-virtual"><scope>amrex::DistributionMapping</scope><name>size</name></member>
      <member refid="classamrex_1_1DistributionMapping_1a65d02277c7532c3befd7d24aeda66a0d" prot="private" virt="non-virtual"><scope>amrex::DistributionMapping</scope><name>Sort</name></member>
      <member refid="classamrex_1_1DistributionMapping_1ad8e078b643635f0027eb797c2d54d3b8" prot="public" virt="non-virtual"><scope>amrex::DistributionMapping</scope><name>Strategy</name></member>
      <member refid="classamrex_1_1DistributionMapping_1add9f7493d35af3e2ad724ce9e55322ba" prot="public" virt="non-virtual"><scope>amrex::DistributionMapping</scope><name>strategy</name></member>
      <member refid="classamrex_1_1DistributionMapping_1ac41e6c0536cc22b8c0d71c0450e58df2" prot="public" virt="non-virtual"><scope>amrex::DistributionMapping</scope><name>strategy</name></member>
      <member refid="classamrex_1_1DistributionMapping_1ad8e078b643635f0027eb797c2d54d3b8a6ad808286f21d2e4851a30703a30d063" prot="public" virt="non-virtual"><scope>amrex::DistributionMapping</scope><name>UNDEFINED</name></member>
      <member refid="classamrex_1_1DistributionMapping_1a4e2f034c17bb24bb7a98e164c213f03b" prot="public" virt="non-virtual"><scope>amrex::DistributionMapping</scope><name>writeOn</name></member>
      <member refid="classamrex_1_1DistributionMapping_1aa68c8981b7dcfbaddbc6d3e8f36dd9a5" prot="public" virt="non-virtual"><scope>amrex::DistributionMapping</scope><name>~DistributionMapping</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
