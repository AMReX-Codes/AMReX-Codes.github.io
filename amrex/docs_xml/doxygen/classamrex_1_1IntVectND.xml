<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classamrex_1_1IntVectND" kind="class" language="C++" prot="public">
    <compoundname>amrex::IntVectND</compoundname>
    <includes refid="AMReX__IntVect_8H" local="no">AMReX_IntVect.H</includes>
    <innerclass refid="structamrex_1_1IntVectND_1_1shift__hasher" prot="public">amrex::IntVectND::shift_hasher</innerclass>
    <templateparamlist>
      <param>
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <declname>dim</declname>
        <defname>dim</defname>
      </param>
    </templateparamlist>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classamrex_1_1IntVectND_1a5a9e63436988a005e0f65d25b34a417c" prot="public" static="no">
        <type><ref refid="structamrex_1_1IntVectND_1_1shift__hasher" kindref="compound">shift_hasher</ref></type>
        <definition>using amrex::IntVectND&lt; dim &gt;::hasher =  shift_hasher</definition>
        <argsstring></argsstring>
        <name>hasher</name>
        <qualifiedname>amrex::IntVectND::hasher</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="85" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1IntVectND_1a46c2c7c4a9976b355e86cfbc62f1052a" prot="public" static="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>using amrex::IntVectND&lt; dim &gt;::value_type =  int</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <qualifiedname>amrex::IntVectND::value_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="734" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="734" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classamrex_1_1IntVectND_1ac9be7906eed9686b378081b582db248e" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>const <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt;</type>
        <definition>constexpr const IntVectND&lt; dim &gt; amrex::IntVectND&lt; dim &gt;::Zero</definition>
        <argsstring></argsstring>
        <name>Zero</name>
        <qualifiedname>amrex::IntVectND::Zero</qualifiedname>
        <initializer>{0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an IntVect all of whose components are equal to zero. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="779" column="28" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="779" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1IntVectND_1a84dd86e62e013bbff67a10ffe6aab940" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>const <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt;</type>
        <definition>constexpr const IntVectND&lt; dim &gt; amrex::IntVectND&lt; dim &gt;::Unit</definition>
        <argsstring></argsstring>
        <name>Unit</name>
        <qualifiedname>amrex::IntVectND::Unit</qualifiedname>
        <initializer>{1}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an IntVect all of whose components are equal to one. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="784" column="28" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="784" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1IntVectND_1af2d620609a5de880b2cd8c8cbf63d1c3" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::IntVectND&lt; dim &gt;::vect[dim]</definition>
        <argsstring>[dim]</argsstring>
        <name>vect</name>
        <qualifiedname>amrex::IntVectND::vect</qualifiedname>
        <initializer>= {}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="788" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="788" bodyend="788"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1IntVectND_1ae84bb98ced997ee0c899aa5f6d2e1c0a" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr amrex::IntVectND&lt; dim &gt;::IntVectND</definition>
        <argsstring>() noexcept</argsstring>
        <name>IntVectND</name>
        <qualifiedname>amrex::IntVectND::IntVectND</qualifiedname>
        <briefdescription>
<para>Construct an <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref> whose components are all zero. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="91" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="91" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVectND_1abfbc87da4c2d57db5f890c0df14ef46f" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
          <param>
            <type>std::enable_if_t&lt;(sizeof...(Args)+2==dim) &amp;&amp;<ref refid="namespaceamrex_1a6c0ad9de6dc5e0ca9324f19210bd62b9" kindref="member">IsConvertible_v</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, Args... &gt;, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> constexpr</type>
        <definition>AMREX_GPU_HOST_DEVICE constexpr amrex::IntVectND&lt; dim &gt;::IntVectND</definition>
        <argsstring>(int i, int j, Args...ks) noexcept</argsstring>
        <name>IntVectND</name>
        <qualifiedname>amrex::IntVectND::IntVectND</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>ks</declname>
        </param>
        <briefdescription>
<para>Construct an <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref> given the specific values for its coordinates. The inputs for this constructor are N integers, where N is equal to the number of dimensions of the <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="104" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="104" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVectND_1af46d1c2c71e1e7cec0c8d3fed71f7f9d" prot="public" static="no" constexpr="yes" const="no" explicit="yes" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> constexpr</type>
        <definition>AMREX_GPU_HOST_DEVICE constexpr amrex::IntVectND&lt; dim &gt;::IntVectND</definition>
        <argsstring>(int s) noexcept</argsstring>
        <name>IntVectND</name>
        <qualifiedname>amrex::IntVectND::IntVectND</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Construct an <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref> whose components are all the same. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="110" column="24" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="110" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVectND_1ab38359b7b41475490ea00a42abf7a328" prot="public" static="no" const="no" explicit="yes" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE amrex::IntVectND&lt; dim &gt;::IntVectND</definition>
        <argsstring>(const int *a) noexcept</argsstring>
        <name>IntVectND</name>
        <qualifiedname>amrex::IntVectND::IntVectND</qualifiedname>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Construct an <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref> setting the coordinates to the corresponding values in the integer array a. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="121" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="121" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVectND_1a6df1f87665d31582239d3ebb5bdac49c" prot="public" static="no" const="no" explicit="yes" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::IntVectND&lt; dim &gt;::IntVectND</definition>
        <argsstring>(const Vector&lt; int &gt; &amp;a) noexcept</argsstring>
        <name>IntVectND</name>
        <qualifiedname>amrex::IntVectND::IntVectND</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Construct an <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref> from an <ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;int&gt;</ref>. It is an error if the <ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;int&gt;</ref> doesn&apos;t have the same dimension as this <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="132" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="132" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVectND_1a060f8d922180985b6ad5aecc5da32b97" prot="public" static="no" const="no" explicit="yes" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::IntVectND&lt; dim &gt;::IntVectND</definition>
        <argsstring>(const Array&lt; int, dim &gt; &amp;a) noexcept</argsstring>
        <name>IntVectND</name>
        <qualifiedname>amrex::IntVectND::IntVectND</qualifiedname>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, dim &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Construct an <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref> from an Array&lt;int,dim&gt;. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="142" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="142" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVectND_1a066e5a5a819cd743766a0458d9b68fef" prot="public" static="no" constexpr="yes" const="no" explicit="yes" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
            <declname>N</declname>
            <defname>N</defname>
            <defval>dim</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt;(1&lt;=N &amp;&amp;N&lt;=3), <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>constexpr</type>
        <definition>constexpr amrex::IntVectND&lt; dim &gt;::IntVectND</definition>
        <argsstring>(Dim3 const &amp;a) noexcept</argsstring>
        <name>IntVectND</name>
        <qualifiedname>amrex::IntVectND::IntVectND</qualifiedname>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="149" column="24" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="149" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVectND_1a3fe31f318679574937ea583ed603f856" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
            <declname>N</declname>
            <defname>N</defname>
            <defval>dim</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt;(1&lt;=N &amp;&amp;N&lt;=3), <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Dim3 amrex::IntVectND&lt; dim &gt;::dim3</definition>
        <argsstring>() const noexcept</argsstring>
        <name>dim3</name>
        <qualifiedname>amrex::IntVectND::dim3</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="163" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="163" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVectND_1a3527eaafcd7aa8e98fe9eef319cae0d6" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
            <declname>N</declname>
            <defname>N</defname>
            <defval>dim</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt;(1&lt;=N &amp;&amp;N&lt;=3), <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Dim3 amrex::IntVectND&lt; dim &gt;::dim3</definition>
        <argsstring>(int fill_extra) const noexcept</argsstring>
        <name>dim3</name>
        <qualifiedname>amrex::IntVectND::dim3</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fill_extra</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="175" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="175" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVectND_1a326d36cbfecf057b06206d45ce77fb88" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE int amrex::IntVectND&lt; dim &gt;::sum</definition>
        <argsstring>() const noexcept</argsstring>
        <name>sum</name>
        <qualifiedname>amrex::IntVectND::sum</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sum of all components of this <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="203" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="203" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVectND_1aabff7f4c45c6a08bd346e4084eb31404" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE int amrex::IntVectND&lt; dim &gt;::max</definition>
        <argsstring>() const noexcept</argsstring>
        <name>max</name>
        <qualifiedname>amrex::IntVectND::max</qualifiedname>
        <briefdescription>
<para>maximum (no absolute values) value </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="214" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="214" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVectND_1a9de3e8806c278c09511f40baaefa0d1e" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE int amrex::IntVectND&lt; dim &gt;::min</definition>
        <argsstring>() const noexcept</argsstring>
        <name>min</name>
        <qualifiedname>amrex::IntVectND::min</qualifiedname>
        <briefdescription>
<para>minimum (no absolute values) value </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="225" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="225" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVectND_1a4c68f6530600d0f28d501a8f3a289668" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE int amrex::IntVectND&lt; dim &gt;::maxDir</definition>
        <argsstring>(bool a_doAbsValue) const noexcept</argsstring>
        <name>maxDir</name>
        <qualifiedname>amrex::IntVectND::maxDir</qualifiedname>
        <param>
          <type>bool</type>
          <declname>a_doAbsValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="236" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="857" bodyend="887"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVectND_1a7d8a75c61160249341d3a84d8c32d3ca" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> constexpr <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE constexpr int &amp; amrex::IntVectND&lt; dim &gt;::operator[]</definition>
        <argsstring>(int i) noexcept</argsstring>
        <name>operator[]</name>
        <qualifiedname>amrex::IntVectND::operator[]</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Returns a reference to the i&apos;th coordinate of the <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="240" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="240" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVectND_1ad21b475ab33ebe8ed52d482fe86aa0eb" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> constexpr const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE constexpr const int &amp; amrex::IntVectND&lt; dim &gt;::operator[]</definition>
        <argsstring>(int i) const noexcept</argsstring>
        <name>operator[]</name>
        <qualifiedname>amrex::IntVectND::operator[]</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Returns the i&apos;th coordinate of the <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="244" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="244" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVectND_1a3471ed3e8ee8d62de3c404d4b9ac3ded" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>i</declname>
            <defname>i</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> constexpr <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE constexpr int &amp; amrex::IntVectND&lt; dim &gt;::get</definition>
        <argsstring>() noexcept</argsstring>
        <name>get</name>
        <qualifiedname>amrex::IntVectND::get</qualifiedname>
        <briefdescription>
<para>Returns a reference to the i&apos;th coordinate of the <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>. Used by structured bindings. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="249" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="249" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVectND_1a0751625354231a6d990f5e2fd5fc8673" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>i</declname>
            <defname>i</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> constexpr const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE constexpr const int &amp; amrex::IntVectND&lt; dim &gt;::get</definition>
        <argsstring>() const noexcept</argsstring>
        <name>get</name>
        <qualifiedname>amrex::IntVectND::get</qualifiedname>
        <briefdescription>
<para>Returns a reference to the i&apos;th coordinate of the <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>. Used by structured bindings. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="254" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="254" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVectND_1a30547a188fa96d990338a5272f89c8f7" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> constexpr <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE constexpr int * amrex::IntVectND&lt; dim &gt;::begin</definition>
        <argsstring>() noexcept</argsstring>
        <name>begin</name>
        <qualifiedname>amrex::IntVectND::begin</qualifiedname>
        <briefdescription>
<para>Returns a pointer to the first element of the <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="258" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="258" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVectND_1a0a148616e9bc7916b4bbdd448331f46b" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> constexpr const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE constexpr const int * amrex::IntVectND&lt; dim &gt;::begin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>begin</name>
        <qualifiedname>amrex::IntVectND::begin</qualifiedname>
        <briefdescription>
<para>Returns a pointer to the first element of the <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="262" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="262" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVectND_1ae3dd5d1312d15c6f3fa729305e4fe2b9" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> constexpr <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE constexpr int * amrex::IntVectND&lt; dim &gt;::end</definition>
        <argsstring>() noexcept</argsstring>
        <name>end</name>
        <qualifiedname>amrex::IntVectND::end</qualifiedname>
        <briefdescription>
<para>Returns a pointer to the (last+1) element of the <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="266" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="266" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVectND_1aac01d2c38294058432012bd832f6e43f" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> constexpr const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE constexpr const int * amrex::IntVectND&lt; dim &gt;::end</definition>
        <argsstring>() const noexcept</argsstring>
        <name>end</name>
        <qualifiedname>amrex::IntVectND::end</qualifiedname>
        <briefdescription>
<para>Returns a pointer to the (last+1) element of the <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="270" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="270" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVectND_1ab429ed6919ef0d76968fa57fe14e8e4d" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVectND &amp; amrex::IntVectND&lt; dim &gt;::setVal</definition>
        <argsstring>(int i, int val) noexcept</argsstring>
        <name>setVal</name>
        <qualifiedname>amrex::IntVectND::setVal</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set i&apos;th coordinate of <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref> to val. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="274" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="274" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVectND_1a937fdff5f6cc324ab0520a0eab9b9a8e" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE const int * amrex::IntVectND&lt; dim &gt;::getVect</definition>
        <argsstring>() const &amp;noexcept</argsstring>
        <name>getVect</name>
        <qualifiedname>amrex::IntVectND::getVect</qualifiedname>
        <briefdescription>
<para>Returns a const pointer to an array of coordinates of the <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>. Useful for arguments to FORTRAN calls. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="284" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="284" bodyend="284"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVectND_1a5d0d4f5fc7898a681ab3e32e36b59241" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="lvalue" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE int * amrex::IntVectND&lt; dim &gt;::getVect</definition>
        <argsstring>() &amp;noexcept</argsstring>
        <name>getVect</name>
        <qualifiedname>amrex::IntVectND::getVect</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="286" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="286" bodyend="286"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVectND_1af72b5a727efcdb1b268e36669a2b1f3d" prot="public" static="no" const="no" explicit="no" inline="no" refqual="rvalue" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
        <definition>AMREX_GPU_HOST_DEVICE int * amrex::IntVectND&lt; dim &gt;::getVect</definition>
        <argsstring>() &amp;&amp;=delete</argsstring>
        <name>getVect</name>
        <qualifiedname>amrex::IntVectND::getVect</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="288" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVectND_1a6ddff3a577201c696129211d63e2bf9d" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE bool amrex::IntVectND&lt; dim &gt;::operator==</definition>
        <argsstring>(int val) const noexcept</argsstring>
        <name>operator==</name>
        <qualifiedname>amrex::IntVectND::operator==</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Returns true if all components are equal to the argument val. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="292" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="292" bodyend="299"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVectND_1a5c6fb534aaf88efee9ed21a53911a60c" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE bool amrex::IntVectND&lt; dim &gt;::operator!=</definition>
        <argsstring>(int val) const noexcept</argsstring>
        <name>operator!=</name>
        <qualifiedname>amrex::IntVectND::operator!=</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Returns true if any component is not equal to the argument val. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="303" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="303" bodyend="310"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVectND_1aca5f7df9cd9ecc76b0ec1dea5d218d7b" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE bool amrex::IntVectND&lt; dim &gt;::operator==</definition>
        <argsstring>(const IntVectND&lt; dim &gt; &amp;rhs) const noexcept</argsstring>
        <name>operator==</name>
        <qualifiedname>amrex::IntVectND::operator==</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Returns true if this is equivalent to rhs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="314" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="314" bodyend="321"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVectND_1a8b0e28ff632462b58ea2f1f8afe52351" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE bool amrex::IntVectND&lt; dim &gt;::operator!=</definition>
        <argsstring>(const IntVectND&lt; dim &gt; &amp;rhs) const noexcept</argsstring>
        <name>operator!=</name>
        <qualifiedname>amrex::IntVectND::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Returns true if this is different from rhs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="324" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="324" bodyend="331"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVectND_1a1c8a55bb282ab92b23af0e12ec31d6dd" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE bool amrex::IntVectND&lt; dim &gt;::operator&lt;</definition>
        <argsstring>(const IntVectND&lt; dim &gt; &amp;rhs) const noexcept</argsstring>
        <name>operator&lt;</name>
        <qualifiedname>amrex::IntVectND::operator&lt;</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Return true if this is lexicographically less than rhs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="334" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="334" bodyend="344"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVectND_1a920690f7fde147826366d8ba7359d74f" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE bool amrex::IntVectND&lt; dim &gt;::operator&lt;=</definition>
        <argsstring>(const IntVectND&lt; dim &gt; &amp;rhs) const noexcept</argsstring>
        <name>operator&lt;=</name>
        <qualifiedname>amrex::IntVectND::operator&lt;=</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Return true if this is lexicographically less than or equal to rhs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="347" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="347" bodyend="350"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVectND_1aa6d9b9823fb7af1a0a12a8c028e7e99f" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE bool amrex::IntVectND&lt; dim &gt;::operator&gt;</definition>
        <argsstring>(const IntVectND&lt; dim &gt; &amp;rhs) const noexcept</argsstring>
        <name>operator&gt;</name>
        <qualifiedname>amrex::IntVectND::operator&gt;</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Return true if this is lexicographically greater than rhs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="353" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="353" bodyend="356"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVectND_1aec2bae4f69b7a141a429ee6d7fc045f9" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE bool amrex::IntVectND&lt; dim &gt;::operator&gt;=</definition>
        <argsstring>(const IntVectND&lt; dim &gt; &amp;rhs) const noexcept</argsstring>
        <name>operator&gt;=</name>
        <qualifiedname>amrex::IntVectND::operator&gt;=</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Return true if this is lexicographically greater than or equal to rhs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="359" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="359" bodyend="362"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVectND_1af4fc1037aab299e0179eff28f9a92c8e" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE bool amrex::IntVectND&lt; dim &gt;::allLT</definition>
        <argsstring>(const IntVectND&lt; dim &gt; &amp;rhs) const noexcept</argsstring>
        <name>allLT</name>
        <qualifiedname>amrex::IntVectND::allLT</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Returns true if this is less than argument for all components. NOTE: This is NOT a strict weak ordering usable by STL sorting algorithms. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="368" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="368" bodyend="375"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVectND_1a21200f8efd89caad8d5f3337c2ee72dc" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE bool amrex::IntVectND&lt; dim &gt;::allLT</definition>
        <argsstring>(int rhs) const noexcept</argsstring>
        <name>allLT</name>
        <qualifiedname>amrex::IntVectND::allLT</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Returns true if this is less than argument for all components. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="380" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="380" bodyend="387"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVectND_1a1cbea04628387dd1af7f63a72a3b8331" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE bool amrex::IntVectND&lt; dim &gt;::allLE</definition>
        <argsstring>(const IntVectND&lt; dim &gt; &amp;rhs) const noexcept</argsstring>
        <name>allLE</name>
        <qualifiedname>amrex::IntVectND::allLE</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Returns true if this is less than or equal to argument for all components. NOTE: This is NOT a strict weak ordering usable by STL sorting algorithms. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="393" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="393" bodyend="400"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVectND_1a1f84b68c2075eba82e8346adbd19ae9b" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE bool amrex::IntVectND&lt; dim &gt;::allLE</definition>
        <argsstring>(int rhs) const noexcept</argsstring>
        <name>allLE</name>
        <qualifiedname>amrex::IntVectND::allLE</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Returns true if this is less than or equal to argument for all components. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="405" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="405" bodyend="412"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVectND_1a56205fba9553a4019081e7dfda8e23c8" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE bool amrex::IntVectND&lt; dim &gt;::allGT</definition>
        <argsstring>(const IntVectND&lt; dim &gt; &amp;rhs) const noexcept</argsstring>
        <name>allGT</name>
        <qualifiedname>amrex::IntVectND::allGT</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Returns true if this is greater than argument for all components. NOTE: This is NOT a strict weak ordering usable by STL sorting algorithms. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="418" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="418" bodyend="425"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVectND_1a87a82aba45def5ca8c28fdbbe557c6c6" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE bool amrex::IntVectND&lt; dim &gt;::allGT</definition>
        <argsstring>(int rhs) const noexcept</argsstring>
        <name>allGT</name>
        <qualifiedname>amrex::IntVectND::allGT</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Returns true if this is greater than argument for all components. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="430" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="430" bodyend="437"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVectND_1a1c375865ce63cfb75c7d8af585d13d59" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE bool amrex::IntVectND&lt; dim &gt;::allGE</definition>
        <argsstring>(const IntVectND&lt; dim &gt; &amp;rhs) const noexcept</argsstring>
        <name>allGE</name>
        <qualifiedname>amrex::IntVectND::allGE</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Returns true if this is greater than or equal to argument for all components. NOTE: This is NOT a strict weak ordering usable by STL sorting algorithms. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="443" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="443" bodyend="450"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVectND_1a5e89cdfee2c384d068beed167ee040a7" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE bool amrex::IntVectND&lt; dim &gt;::allGE</definition>
        <argsstring>(int rhs) const noexcept</argsstring>
        <name>allGE</name>
        <qualifiedname>amrex::IntVectND::allGE</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Returns true if this is greater than or equal to argument for all components. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="455" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="455" bodyend="462"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVectND_1ab419b0eed96918fdb05b8513c399b7c7" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVectND&lt; dim &gt; amrex::IntVectND&lt; dim &gt;::operator+</definition>
        <argsstring>() const noexcept</argsstring>
        <name>operator+</name>
        <qualifiedname>amrex::IntVectND::operator+</qualifiedname>
        <briefdescription>
<para>Unary plus <ndash/> for completeness. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="465" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="465" bodyend="465"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVectND_1a3f7ae1cd235ec86690640678cd927fb2" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVectND&lt; dim &gt; amrex::IntVectND&lt; dim &gt;::operator-</definition>
        <argsstring>() const noexcept</argsstring>
        <name>operator-</name>
        <qualifiedname>amrex::IntVectND::operator-</qualifiedname>
        <briefdescription>
<para>Unary <ref refid="structamrex_1_1Minus" kindref="compound">Minus</ref> <ndash/> negates all components. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="468" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="468" bodyend="474"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVectND_1a56b86274b34cb88e4670f903b40498a0" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVectND&lt; dim &gt; &amp; amrex::IntVectND&lt; dim &gt;::operator+=</definition>
        <argsstring>(int s) noexcept</argsstring>
        <name>operator+=</name>
        <qualifiedname>amrex::IntVectND::operator+=</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Modifies <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref> by addition of a scalar to each component. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="477" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="477" bodyend="483"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVectND_1a3273c84384f2f0a176f74de378f132cd" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVectND&lt; dim &gt; &amp; amrex::IntVectND&lt; dim &gt;::operator+=</definition>
        <argsstring>(const IntVectND&lt; dim &gt; &amp;p) noexcept</argsstring>
        <name>operator+=</name>
        <qualifiedname>amrex::IntVectND::operator+=</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Modifies <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref> by component-wise addition with argument. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="486" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="486" bodyend="492"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVectND_1adc0457205c3e31dc07acbbe5522497e5" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVectND&lt; dim &gt; &amp; amrex::IntVectND&lt; dim &gt;::operator*=</definition>
        <argsstring>(int s) noexcept</argsstring>
        <name>operator*=</name>
        <qualifiedname>amrex::IntVectND::operator*=</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Modifies <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref> by multiplication of a scalar to each component. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="495" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="495" bodyend="501"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVectND_1ad609e9b39f706765173b5af322fe8856" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVectND&lt; dim &gt; &amp; amrex::IntVectND&lt; dim &gt;::operator*=</definition>
        <argsstring>(const IntVectND&lt; dim &gt; &amp;p) noexcept</argsstring>
        <name>operator*=</name>
        <qualifiedname>amrex::IntVectND::operator*=</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Modifies <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref> by component-wise multiplication with argument. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="504" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="504" bodyend="510"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVectND_1a1c001e61705656989687cb5d6db27481" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVectND&lt; dim &gt; &amp; amrex::IntVectND&lt; dim &gt;::operator/=</definition>
        <argsstring>(int s) noexcept</argsstring>
        <name>operator/=</name>
        <qualifiedname>amrex::IntVectND::operator/=</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Modifies <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref> by division by a scalar to each component. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="513" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="513" bodyend="519"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVectND_1a0dc1d5069a3769994dcd3e5c2922716a" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVectND&lt; dim &gt; &amp; amrex::IntVectND&lt; dim &gt;::operator/=</definition>
        <argsstring>(const IntVectND&lt; dim &gt; &amp;p) noexcept</argsstring>
        <name>operator/=</name>
        <qualifiedname>amrex::IntVectND::operator/=</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Modifies <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref> by component-wise division with argument. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="522" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="522" bodyend="528"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVectND_1adc694f48704bb09b19d38aa7bd231daf" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVectND&lt; dim &gt; &amp; amrex::IntVectND&lt; dim &gt;::operator-=</definition>
        <argsstring>(int s) noexcept</argsstring>
        <name>operator-=</name>
        <qualifiedname>amrex::IntVectND::operator-=</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Modifies <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref> by subtraction of a scalar to each component. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="531" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="531" bodyend="537"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVectND_1a765ffdf90349bde8fcf076081ed884da" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVectND&lt; dim &gt; &amp; amrex::IntVectND&lt; dim &gt;::operator-=</definition>
        <argsstring>(const IntVectND&lt; dim &gt; &amp;p) noexcept</argsstring>
        <name>operator-=</name>
        <qualifiedname>amrex::IntVectND::operator-=</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Modifies <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref> by component-wise subtraction with argument. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="540" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="540" bodyend="546"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVectND_1a7551cec17ec8630b88276ad31a7f9961" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVectND&lt; dim &gt; amrex::IntVectND&lt; dim &gt;::operator+</definition>
        <argsstring>(const IntVectND&lt; dim &gt; &amp;p) const noexcept</argsstring>
        <name>operator+</name>
        <qualifiedname>amrex::IntVectND::operator+</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Returns component-wise sum of <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="549" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="549" bodyend="553"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVectND_1af4441e766825fdb8045963651897ca43" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVectND&lt; dim &gt; amrex::IntVectND&lt; dim &gt;::operator+</definition>
        <argsstring>(int s) const noexcept</argsstring>
        <name>operator+</name>
        <qualifiedname>amrex::IntVectND::operator+</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Return an <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref> that is this <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref> + s. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="556" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="556" bodyend="560"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVectND_1aee007573cd88179911b58aae4e131a19" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVectND&lt; dim &gt; amrex::IntVectND&lt; dim &gt;::operator-</definition>
        <argsstring>(const IntVectND&lt; dim &gt; &amp;p) const noexcept</argsstring>
        <name>operator-</name>
        <qualifiedname>amrex::IntVectND::operator-</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Returns component-wise difference of <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref> and argument. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="563" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="563" bodyend="567"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVectND_1ad4f8ff16527dfa9a3e07c4a956a21969" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVectND&lt; dim &gt; amrex::IntVectND&lt; dim &gt;::operator-</definition>
        <argsstring>(int s) const noexcept</argsstring>
        <name>operator-</name>
        <qualifiedname>amrex::IntVectND::operator-</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Return an <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref> that is this <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref> - s. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="570" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="570" bodyend="574"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVectND_1a6e21ef2e0b17b30e54c443e2f8c8b52e" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVectND&lt; dim &gt; amrex::IntVectND&lt; dim &gt;::operator*</definition>
        <argsstring>(const IntVectND&lt; dim &gt; &amp;p) const noexcept</argsstring>
        <name>operator*</name>
        <qualifiedname>amrex::IntVectND::operator*</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Returns component-wise product of <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref> and argument. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="577" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="577" bodyend="581"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVectND_1ab22cd75b5c9478652f22086cd31d1249" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVectND&lt; dim &gt; amrex::IntVectND&lt; dim &gt;::operator*</definition>
        <argsstring>(int s) const noexcept</argsstring>
        <name>operator*</name>
        <qualifiedname>amrex::IntVectND::operator*</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Returns component-wise product of <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref> and s. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="584" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="584" bodyend="588"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVectND_1a2345eefbb4e772b3ae135414fd7048b9" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVectND&lt; dim &gt; amrex::IntVectND&lt; dim &gt;::operator/</definition>
        <argsstring>(const IntVectND&lt; dim &gt; &amp;p) const noexcept</argsstring>
        <name>operator/</name>
        <qualifiedname>amrex::IntVectND::operator/</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Returns component-wise division of <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref> by argument. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="591" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="591" bodyend="595"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVectND_1a12ce6bdf227deb1d501eec068a084127" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVectND&lt; dim &gt; amrex::IntVectND&lt; dim &gt;::operator/</definition>
        <argsstring>(int s) const noexcept</argsstring>
        <name>operator/</name>
        <qualifiedname>amrex::IntVectND::operator/</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Returns component-wise division of <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref> by s. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="598" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="598" bodyend="602"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVectND_1a6303ae5bdc7c0e7a5da3007841be415d" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVectND&lt; dim &gt; &amp; amrex::IntVectND&lt; dim &gt;::min</definition>
        <argsstring>(const IntVectND&lt; dim &gt; &amp;p) noexcept</argsstring>
        <name>min</name>
        <qualifiedname>amrex::IntVectND::min</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Modifies <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref> by taking component-wise min with argument. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="605" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="605" bodyend="611"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVectND_1a28d1943b2027eaaf4af6dd0250fbf05a" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVectND&lt; dim &gt; &amp; amrex::IntVectND&lt; dim &gt;::max</definition>
        <argsstring>(const IntVectND&lt; dim &gt; &amp;p) noexcept</argsstring>
        <name>max</name>
        <qualifiedname>amrex::IntVectND::max</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Modifies <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref> by taking component-wise max with argument. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="614" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="614" bodyend="620"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVectND_1aa1b001373d7fdeae54fbe254e2698968" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVectND&lt; dim &gt; &amp; amrex::IntVectND&lt; dim &gt;::scale</definition>
        <argsstring>(int s) noexcept</argsstring>
        <name>scale</name>
        <qualifiedname>amrex::IntVectND::scale</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Modify <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref> by multiplying each coordinate by s. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="623" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="623" bodyend="628"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVectND_1ac80ca6c05779974552d4ebe3dc04b4a3" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVectND&lt; dim &gt; &amp; amrex::IntVectND&lt; dim &gt;::reflect</definition>
        <argsstring>(int ref_ix, int idir) noexcept</argsstring>
        <name>reflect</name>
        <qualifiedname>amrex::IntVectND::reflect</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ref_ix</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>idir</declname>
        </param>
        <briefdescription>
<para>Modify <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref> by reflecting it in the plane defined by the index ref_ix and with normal in the direction of idir. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="634" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="634" bodyend="639"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVectND_1a83a116c2c5fca10577533020eb58bbd2" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVectND&lt; dim &gt; &amp; amrex::IntVectND&lt; dim &gt;::shift</definition>
        <argsstring>(int coord, int s) noexcept</argsstring>
        <name>shift</name>
        <qualifiedname>amrex::IntVectND::shift</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>coord</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Modify <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref> by adding s to given coordinate. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="642" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="642" bodyend="645"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVectND_1a509c1184601ad44e1cb59bc40eff4b03" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVectND&lt; dim &gt; &amp; amrex::IntVectND&lt; dim &gt;::shift</definition>
        <argsstring>(const IntVectND&lt; dim &gt; &amp;iv) noexcept</argsstring>
        <name>shift</name>
        <qualifiedname>amrex::IntVectND::shift</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; &amp;</type>
          <declname>iv</declname>
        </param>
        <briefdescription>
<para>Equivalent to shift(0,iv[0]).shift(1,iv[1]) ... </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="648" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="648" bodyend="648"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVectND_1a857e170871a2abfacf87534238bb0ce8" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVectND&lt; dim &gt; &amp; amrex::IntVectND&lt; dim &gt;::diagShift</definition>
        <argsstring>(int s) noexcept</argsstring>
        <name>diagShift</name>
        <qualifiedname>amrex::IntVectND::diagShift</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Modify <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref> by adding s to each coordinate. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="651" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="651" bodyend="657"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVectND_1a3e52e7c2152a5e6eef278bd65963e1e3" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVectND&lt; dim &gt; &amp; amrex::IntVectND&lt; dim &gt;::coarsen</definition>
        <argsstring>(const IntVectND&lt; dim &gt; &amp;p) noexcept</argsstring>
        <name>coarsen</name>
        <qualifiedname>amrex::IntVectND::coarsen</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Modify IntVectND&lt;dim&gt; by component-wise integer projection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="660" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="844" bodyend="851"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVectND_1a36a4aa5954d396d6ce76dd3464afcd73" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVectND&lt; dim &gt; &amp; amrex::IntVectND&lt; dim &gt;::coarsen</definition>
        <argsstring>(int p) noexcept</argsstring>
        <name>coarsen</name>
        <qualifiedname>amrex::IntVectND::coarsen</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Modify IntVectND&lt;dim&gt; by component-wise integer projection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="663" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="816" bodyend="838"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVectND_1ab61418a11282d6f45726894b279e8382" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
            <declname>new_dim</declname>
            <defname>new_dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; new_dim &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVectND&lt; new_dim &gt; amrex::IntVectND&lt; dim &gt;::shrink</definition>
        <argsstring>() const noexcept</argsstring>
        <name>shrink</name>
        <qualifiedname>amrex::IntVectND::shrink</qualifiedname>
        <briefdescription>
<para>Returns a new <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref> of size new_dim and assigns the first new_dim values of this <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref> to it. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="742" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="742" bodyend="745"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVectND_1a9ec27c9067988a31ab5e96fa89847859" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
            <declname>new_dim</declname>
            <defname>new_dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; new_dim &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVectND&lt; new_dim &gt; amrex::IntVectND&lt; dim &gt;::expand</definition>
        <argsstring>(int fill_extra=0) const noexcept</argsstring>
        <name>expand</name>
        <qualifiedname>amrex::IntVectND::expand</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fill_extra</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Returns a new <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref> of size new_dim and assigns all values of this <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref> to it and fill_extra to the remaining elements. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="753" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="753" bodyend="760"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVectND_1a98a519b47c5f4cb1c9d843f92ed19087" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
            <declname>new_dim</declname>
            <defname>new_dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; new_dim &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVectND&lt; new_dim &gt; amrex::IntVectND&lt; dim &gt;::resize</definition>
        <argsstring>(int fill_extra=0) const noexcept</argsstring>
        <name>resize</name>
        <qualifiedname>amrex::IntVectND::resize</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fill_extra</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Returns a new <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref> of size new_dim by either shrinking or expanding this <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="768" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="768" bodyend="774"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classamrex_1_1IntVectND_1aa060b6d059c0d7bccaf5a0b5e743bfe4" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> static <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> constexpr <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE static AMREX_FORCE_INLINE constexpr IntVectND&lt; dim &gt; amrex::IntVectND&lt; dim &gt;::TheZeroVector</definition>
        <argsstring>() noexcept</argsstring>
        <name>TheZeroVector</name>
        <qualifiedname>amrex::IntVectND::TheZeroVector</qualifiedname>
        <briefdescription>
<para>This static member function returns a reference to a constant <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref> object, all of whose dim arguments are set to zero (0). Figuratively, it is the zero vector in dim-dimensional space. It is provided as a convenient way to specify the zero vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="672" column="32" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="672" bodyend="674"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVectND_1a6e681cd76abecdaac22a90fec57f040e" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> static <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> constexpr <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE static AMREX_FORCE_INLINE constexpr IntVectND&lt; dim &gt; amrex::IntVectND&lt; dim &gt;::TheUnitVector</definition>
        <argsstring>() noexcept</argsstring>
        <name>TheUnitVector</name>
        <qualifiedname>amrex::IntVectND::TheUnitVector</qualifiedname>
        <briefdescription>
<para>This static member function returns a reference to a constant <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref> object, all of whose dim arguments are set to one (1). Figuratively, it is the unit vector in dim-dimensional space. It is provided as a convenient way to specify the unit vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="682" column="32" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="682" bodyend="684"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVectND_1a8b26993b818cbccb90530952b121ae94" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> static <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> constexpr <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE static AMREX_FORCE_INLINE constexpr IntVectND&lt; dim &gt; amrex::IntVectND&lt; dim &gt;::TheDimensionVector</definition>
        <argsstring>(int d) noexcept</argsstring>
        <name>TheDimensionVector</name>
        <qualifiedname>amrex::IntVectND::TheDimensionVector</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>This static member function returns a reference to a constant <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref> object, all of whose dim arguments are set to zero except that the d-direction is set to one. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="691" column="32" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="691" bodyend="695"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVectND_1a2a1ca73a95d528b14795dd88ab67559a" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> static <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> constexpr <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE static AMREX_FORCE_INLINE constexpr IntVectND&lt; dim &gt; amrex::IntVectND&lt; dim &gt;::TheNodeVector</definition>
        <argsstring>() noexcept</argsstring>
        <name>TheNodeVector</name>
        <qualifiedname>amrex::IntVectND::TheNodeVector</qualifiedname>
        <briefdescription>
<para>This static member function returns a reference to a constant <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref> object, all of whose dim arguments are set to <ref refid="structamrex_1_1CellIndexEnum_1aceb83f25ce499aa265f5326d75e1a0a3ad501679fc1b23174fe28a86d24d2e1e2" kindref="member">IndexType::NODE</ref>. It is provided as a convenience to our users when defining Boxes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="702" column="32" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="702" bodyend="704"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVectND_1afbf4734bfb99dd3e9fcda5d07e930242" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> static <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> constexpr <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE static AMREX_FORCE_INLINE constexpr IntVectND&lt; dim &gt; amrex::IntVectND&lt; dim &gt;::TheCellVector</definition>
        <argsstring>() noexcept</argsstring>
        <name>TheCellVector</name>
        <qualifiedname>amrex::IntVectND::TheCellVector</qualifiedname>
        <briefdescription>
<para>This static member function returns a reference to a constant <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref> object, all of whose dim arguments are set to <ref refid="structamrex_1_1CellIndexEnum_1aceb83f25ce499aa265f5326d75e1a0a3a1f9d32418f4279a931e3f65f092f9439" kindref="member">IndexType::CELL</ref>. It is provided as a convenience to our users when defining Boxes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="711" column="32" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="711" bodyend="713"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVectND_1adf7485a5d992edf894cc9e3321406d6c" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> static <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> constexpr <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE static AMREX_FORCE_INLINE constexpr IntVectND&lt; dim &gt; amrex::IntVectND&lt; dim &gt;::TheMaxVector</definition>
        <argsstring>() noexcept</argsstring>
        <name>TheMaxVector</name>
        <qualifiedname>amrex::IntVectND::TheMaxVector</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="716" column="32" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="716" bodyend="718"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVectND_1a0d9f3413fc4064fd4264fa1c8e1cfc56" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> static <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> constexpr <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE static AMREX_FORCE_INLINE constexpr IntVectND&lt; dim &gt; amrex::IntVectND&lt; dim &gt;::TheMinVector</definition>
        <argsstring>() noexcept</argsstring>
        <name>TheMinVector</name>
        <qualifiedname>amrex::IntVectND::TheMinVector</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="720" column="32" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="720" bodyend="722"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVectND_1a8898dafedce045a8129afc75220c5b77" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> static <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> constexpr std::size_t</type>
        <definition>AMREX_GPU_HOST_DEVICE static AMREX_FORCE_INLINE constexpr std::size_t amrex::IntVectND&lt; dim &gt;::size</definition>
        <argsstring>() noexcept</argsstring>
        <name>size</name>
        <qualifiedname>amrex::IntVectND::size</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="725" column="34" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="725" bodyend="727"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVectND_1a3008b0b72da3271624f9cb60848e553e" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> static <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> constexpr <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE static AMREX_FORCE_INLINE constexpr int amrex::IntVectND&lt; dim &gt;::isize</definition>
        <argsstring>() noexcept</argsstring>
        <name>isize</name>
        <qualifiedname>amrex::IntVectND::isize</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="730" column="26" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="730" bodyend="732"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>An Integer <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref> in dim-Dimensional Space</para>
<para>The class <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref> is an implementation of an integer vector in a dim-dimensional space. It represents a point in a discrete space. <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref> values are accessed using the operator[] function, as for a normal C++ array. In addition, the basic arithmetic operators have been overloaded to implement scaling and translation operations. </para>
    </detaileddescription>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="47" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="48" bodyend="789"/>
    <listofallmembers>
      <member refid="classamrex_1_1IntVectND_1a1c375865ce63cfb75c7d8af585d13d59" prot="public" virt="non-virtual"><scope>amrex::IntVectND</scope><name>allGE</name></member>
      <member refid="classamrex_1_1IntVectND_1a5e89cdfee2c384d068beed167ee040a7" prot="public" virt="non-virtual"><scope>amrex::IntVectND</scope><name>allGE</name></member>
      <member refid="classamrex_1_1IntVectND_1a56205fba9553a4019081e7dfda8e23c8" prot="public" virt="non-virtual"><scope>amrex::IntVectND</scope><name>allGT</name></member>
      <member refid="classamrex_1_1IntVectND_1a87a82aba45def5ca8c28fdbbe557c6c6" prot="public" virt="non-virtual"><scope>amrex::IntVectND</scope><name>allGT</name></member>
      <member refid="classamrex_1_1IntVectND_1a1cbea04628387dd1af7f63a72a3b8331" prot="public" virt="non-virtual"><scope>amrex::IntVectND</scope><name>allLE</name></member>
      <member refid="classamrex_1_1IntVectND_1a1f84b68c2075eba82e8346adbd19ae9b" prot="public" virt="non-virtual"><scope>amrex::IntVectND</scope><name>allLE</name></member>
      <member refid="classamrex_1_1IntVectND_1af4fc1037aab299e0179eff28f9a92c8e" prot="public" virt="non-virtual"><scope>amrex::IntVectND</scope><name>allLT</name></member>
      <member refid="classamrex_1_1IntVectND_1a21200f8efd89caad8d5f3337c2ee72dc" prot="public" virt="non-virtual"><scope>amrex::IntVectND</scope><name>allLT</name></member>
      <member refid="classamrex_1_1IntVectND_1a30547a188fa96d990338a5272f89c8f7" prot="public" virt="non-virtual"><scope>amrex::IntVectND</scope><name>begin</name></member>
      <member refid="classamrex_1_1IntVectND_1a0a148616e9bc7916b4bbdd448331f46b" prot="public" virt="non-virtual"><scope>amrex::IntVectND</scope><name>begin</name></member>
      <member refid="classamrex_1_1IntVectND_1a3e52e7c2152a5e6eef278bd65963e1e3" prot="public" virt="non-virtual"><scope>amrex::IntVectND</scope><name>coarsen</name></member>
      <member refid="classamrex_1_1IntVectND_1a36a4aa5954d396d6ce76dd3464afcd73" prot="public" virt="non-virtual"><scope>amrex::IntVectND</scope><name>coarsen</name></member>
      <member refid="classamrex_1_1IntVectND_1a857e170871a2abfacf87534238bb0ce8" prot="public" virt="non-virtual"><scope>amrex::IntVectND</scope><name>diagShift</name></member>
      <member refid="classamrex_1_1IntVectND_1a3fe31f318679574937ea583ed603f856" prot="public" virt="non-virtual"><scope>amrex::IntVectND</scope><name>dim3</name></member>
      <member refid="classamrex_1_1IntVectND_1a3527eaafcd7aa8e98fe9eef319cae0d6" prot="public" virt="non-virtual"><scope>amrex::IntVectND</scope><name>dim3</name></member>
      <member refid="classamrex_1_1IntVectND_1ae3dd5d1312d15c6f3fa729305e4fe2b9" prot="public" virt="non-virtual"><scope>amrex::IntVectND</scope><name>end</name></member>
      <member refid="classamrex_1_1IntVectND_1aac01d2c38294058432012bd832f6e43f" prot="public" virt="non-virtual"><scope>amrex::IntVectND</scope><name>end</name></member>
      <member refid="classamrex_1_1IntVectND_1a9ec27c9067988a31ab5e96fa89847859" prot="public" virt="non-virtual"><scope>amrex::IntVectND</scope><name>expand</name></member>
      <member refid="classamrex_1_1IntVectND_1a3471ed3e8ee8d62de3c404d4b9ac3ded" prot="public" virt="non-virtual"><scope>amrex::IntVectND</scope><name>get</name></member>
      <member refid="classamrex_1_1IntVectND_1a0751625354231a6d990f5e2fd5fc8673" prot="public" virt="non-virtual"><scope>amrex::IntVectND</scope><name>get</name></member>
      <member refid="classamrex_1_1IntVectND_1a937fdff5f6cc324ab0520a0eab9b9a8e" prot="public" virt="non-virtual"><scope>amrex::IntVectND</scope><name>getVect</name></member>
      <member refid="classamrex_1_1IntVectND_1a5d0d4f5fc7898a681ab3e32e36b59241" prot="public" virt="non-virtual"><scope>amrex::IntVectND</scope><name>getVect</name></member>
      <member refid="classamrex_1_1IntVectND_1af72b5a727efcdb1b268e36669a2b1f3d" prot="public" virt="non-virtual"><scope>amrex::IntVectND</scope><name>getVect</name></member>
      <member refid="classamrex_1_1IntVectND_1a5a9e63436988a005e0f65d25b34a417c" prot="public" virt="non-virtual"><scope>amrex::IntVectND</scope><name>hasher</name></member>
      <member refid="classamrex_1_1IntVectND_1ae84bb98ced997ee0c899aa5f6d2e1c0a" prot="public" virt="non-virtual"><scope>amrex::IntVectND</scope><name>IntVectND</name></member>
      <member refid="classamrex_1_1IntVectND_1abfbc87da4c2d57db5f890c0df14ef46f" prot="public" virt="non-virtual"><scope>amrex::IntVectND</scope><name>IntVectND</name></member>
      <member refid="classamrex_1_1IntVectND_1af46d1c2c71e1e7cec0c8d3fed71f7f9d" prot="public" virt="non-virtual"><scope>amrex::IntVectND</scope><name>IntVectND</name></member>
      <member refid="classamrex_1_1IntVectND_1ab38359b7b41475490ea00a42abf7a328" prot="public" virt="non-virtual"><scope>amrex::IntVectND</scope><name>IntVectND</name></member>
      <member refid="classamrex_1_1IntVectND_1a6df1f87665d31582239d3ebb5bdac49c" prot="public" virt="non-virtual"><scope>amrex::IntVectND</scope><name>IntVectND</name></member>
      <member refid="classamrex_1_1IntVectND_1a060f8d922180985b6ad5aecc5da32b97" prot="public" virt="non-virtual"><scope>amrex::IntVectND</scope><name>IntVectND</name></member>
      <member refid="classamrex_1_1IntVectND_1a066e5a5a819cd743766a0458d9b68fef" prot="public" virt="non-virtual"><scope>amrex::IntVectND</scope><name>IntVectND</name></member>
      <member refid="classamrex_1_1IntVectND_1a3008b0b72da3271624f9cb60848e553e" prot="public" virt="non-virtual"><scope>amrex::IntVectND</scope><name>isize</name></member>
      <member refid="classamrex_1_1IntVectND_1aabff7f4c45c6a08bd346e4084eb31404" prot="public" virt="non-virtual"><scope>amrex::IntVectND</scope><name>max</name></member>
      <member refid="classamrex_1_1IntVectND_1a28d1943b2027eaaf4af6dd0250fbf05a" prot="public" virt="non-virtual"><scope>amrex::IntVectND</scope><name>max</name></member>
      <member refid="classamrex_1_1IntVectND_1a4c68f6530600d0f28d501a8f3a289668" prot="public" virt="non-virtual"><scope>amrex::IntVectND</scope><name>maxDir</name></member>
      <member refid="classamrex_1_1IntVectND_1a9de3e8806c278c09511f40baaefa0d1e" prot="public" virt="non-virtual"><scope>amrex::IntVectND</scope><name>min</name></member>
      <member refid="classamrex_1_1IntVectND_1a6303ae5bdc7c0e7a5da3007841be415d" prot="public" virt="non-virtual"><scope>amrex::IntVectND</scope><name>min</name></member>
      <member refid="classamrex_1_1IntVectND_1a5c6fb534aaf88efee9ed21a53911a60c" prot="public" virt="non-virtual"><scope>amrex::IntVectND</scope><name>operator!=</name></member>
      <member refid="classamrex_1_1IntVectND_1a8b0e28ff632462b58ea2f1f8afe52351" prot="public" virt="non-virtual"><scope>amrex::IntVectND</scope><name>operator!=</name></member>
      <member refid="classamrex_1_1IntVectND_1a6e21ef2e0b17b30e54c443e2f8c8b52e" prot="public" virt="non-virtual"><scope>amrex::IntVectND</scope><name>operator*</name></member>
      <member refid="classamrex_1_1IntVectND_1ab22cd75b5c9478652f22086cd31d1249" prot="public" virt="non-virtual"><scope>amrex::IntVectND</scope><name>operator*</name></member>
      <member refid="classamrex_1_1IntVectND_1adc0457205c3e31dc07acbbe5522497e5" prot="public" virt="non-virtual"><scope>amrex::IntVectND</scope><name>operator*=</name></member>
      <member refid="classamrex_1_1IntVectND_1ad609e9b39f706765173b5af322fe8856" prot="public" virt="non-virtual"><scope>amrex::IntVectND</scope><name>operator*=</name></member>
      <member refid="classamrex_1_1IntVectND_1ab419b0eed96918fdb05b8513c399b7c7" prot="public" virt="non-virtual"><scope>amrex::IntVectND</scope><name>operator+</name></member>
      <member refid="classamrex_1_1IntVectND_1a7551cec17ec8630b88276ad31a7f9961" prot="public" virt="non-virtual"><scope>amrex::IntVectND</scope><name>operator+</name></member>
      <member refid="classamrex_1_1IntVectND_1af4441e766825fdb8045963651897ca43" prot="public" virt="non-virtual"><scope>amrex::IntVectND</scope><name>operator+</name></member>
      <member refid="classamrex_1_1IntVectND_1a56b86274b34cb88e4670f903b40498a0" prot="public" virt="non-virtual"><scope>amrex::IntVectND</scope><name>operator+=</name></member>
      <member refid="classamrex_1_1IntVectND_1a3273c84384f2f0a176f74de378f132cd" prot="public" virt="non-virtual"><scope>amrex::IntVectND</scope><name>operator+=</name></member>
      <member refid="classamrex_1_1IntVectND_1a3f7ae1cd235ec86690640678cd927fb2" prot="public" virt="non-virtual"><scope>amrex::IntVectND</scope><name>operator-</name></member>
      <member refid="classamrex_1_1IntVectND_1aee007573cd88179911b58aae4e131a19" prot="public" virt="non-virtual"><scope>amrex::IntVectND</scope><name>operator-</name></member>
      <member refid="classamrex_1_1IntVectND_1ad4f8ff16527dfa9a3e07c4a956a21969" prot="public" virt="non-virtual"><scope>amrex::IntVectND</scope><name>operator-</name></member>
      <member refid="classamrex_1_1IntVectND_1adc694f48704bb09b19d38aa7bd231daf" prot="public" virt="non-virtual"><scope>amrex::IntVectND</scope><name>operator-=</name></member>
      <member refid="classamrex_1_1IntVectND_1a765ffdf90349bde8fcf076081ed884da" prot="public" virt="non-virtual"><scope>amrex::IntVectND</scope><name>operator-=</name></member>
      <member refid="classamrex_1_1IntVectND_1a2345eefbb4e772b3ae135414fd7048b9" prot="public" virt="non-virtual"><scope>amrex::IntVectND</scope><name>operator/</name></member>
      <member refid="classamrex_1_1IntVectND_1a12ce6bdf227deb1d501eec068a084127" prot="public" virt="non-virtual"><scope>amrex::IntVectND</scope><name>operator/</name></member>
      <member refid="classamrex_1_1IntVectND_1a1c001e61705656989687cb5d6db27481" prot="public" virt="non-virtual"><scope>amrex::IntVectND</scope><name>operator/=</name></member>
      <member refid="classamrex_1_1IntVectND_1a0dc1d5069a3769994dcd3e5c2922716a" prot="public" virt="non-virtual"><scope>amrex::IntVectND</scope><name>operator/=</name></member>
      <member refid="classamrex_1_1IntVectND_1a1c8a55bb282ab92b23af0e12ec31d6dd" prot="public" virt="non-virtual"><scope>amrex::IntVectND</scope><name>operator&lt;</name></member>
      <member refid="classamrex_1_1IntVectND_1a920690f7fde147826366d8ba7359d74f" prot="public" virt="non-virtual"><scope>amrex::IntVectND</scope><name>operator&lt;=</name></member>
      <member refid="classamrex_1_1IntVectND_1a6ddff3a577201c696129211d63e2bf9d" prot="public" virt="non-virtual"><scope>amrex::IntVectND</scope><name>operator==</name></member>
      <member refid="classamrex_1_1IntVectND_1aca5f7df9cd9ecc76b0ec1dea5d218d7b" prot="public" virt="non-virtual"><scope>amrex::IntVectND</scope><name>operator==</name></member>
      <member refid="classamrex_1_1IntVectND_1aa6d9b9823fb7af1a0a12a8c028e7e99f" prot="public" virt="non-virtual"><scope>amrex::IntVectND</scope><name>operator&gt;</name></member>
      <member refid="classamrex_1_1IntVectND_1aec2bae4f69b7a141a429ee6d7fc045f9" prot="public" virt="non-virtual"><scope>amrex::IntVectND</scope><name>operator&gt;=</name></member>
      <member refid="classamrex_1_1IntVectND_1a7d8a75c61160249341d3a84d8c32d3ca" prot="public" virt="non-virtual"><scope>amrex::IntVectND</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1IntVectND_1ad21b475ab33ebe8ed52d482fe86aa0eb" prot="public" virt="non-virtual"><scope>amrex::IntVectND</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1IntVectND_1ac80ca6c05779974552d4ebe3dc04b4a3" prot="public" virt="non-virtual"><scope>amrex::IntVectND</scope><name>reflect</name></member>
      <member refid="classamrex_1_1IntVectND_1a98a519b47c5f4cb1c9d843f92ed19087" prot="public" virt="non-virtual"><scope>amrex::IntVectND</scope><name>resize</name></member>
      <member refid="classamrex_1_1IntVectND_1aa1b001373d7fdeae54fbe254e2698968" prot="public" virt="non-virtual"><scope>amrex::IntVectND</scope><name>scale</name></member>
      <member refid="classamrex_1_1IntVectND_1ab429ed6919ef0d76968fa57fe14e8e4d" prot="public" virt="non-virtual"><scope>amrex::IntVectND</scope><name>setVal</name></member>
      <member refid="classamrex_1_1IntVectND_1a83a116c2c5fca10577533020eb58bbd2" prot="public" virt="non-virtual"><scope>amrex::IntVectND</scope><name>shift</name></member>
      <member refid="classamrex_1_1IntVectND_1a509c1184601ad44e1cb59bc40eff4b03" prot="public" virt="non-virtual"><scope>amrex::IntVectND</scope><name>shift</name></member>
      <member refid="classamrex_1_1IntVectND_1ab61418a11282d6f45726894b279e8382" prot="public" virt="non-virtual"><scope>amrex::IntVectND</scope><name>shrink</name></member>
      <member refid="classamrex_1_1IntVectND_1a8898dafedce045a8129afc75220c5b77" prot="public" virt="non-virtual"><scope>amrex::IntVectND</scope><name>size</name></member>
      <member refid="classamrex_1_1IntVectND_1a326d36cbfecf057b06206d45ce77fb88" prot="public" virt="non-virtual"><scope>amrex::IntVectND</scope><name>sum</name></member>
      <member refid="classamrex_1_1IntVectND_1afbf4734bfb99dd3e9fcda5d07e930242" prot="public" virt="non-virtual"><scope>amrex::IntVectND</scope><name>TheCellVector</name></member>
      <member refid="classamrex_1_1IntVectND_1a8b26993b818cbccb90530952b121ae94" prot="public" virt="non-virtual"><scope>amrex::IntVectND</scope><name>TheDimensionVector</name></member>
      <member refid="classamrex_1_1IntVectND_1adf7485a5d992edf894cc9e3321406d6c" prot="public" virt="non-virtual"><scope>amrex::IntVectND</scope><name>TheMaxVector</name></member>
      <member refid="classamrex_1_1IntVectND_1a0d9f3413fc4064fd4264fa1c8e1cfc56" prot="public" virt="non-virtual"><scope>amrex::IntVectND</scope><name>TheMinVector</name></member>
      <member refid="classamrex_1_1IntVectND_1a2a1ca73a95d528b14795dd88ab67559a" prot="public" virt="non-virtual"><scope>amrex::IntVectND</scope><name>TheNodeVector</name></member>
      <member refid="classamrex_1_1IntVectND_1a6e681cd76abecdaac22a90fec57f040e" prot="public" virt="non-virtual"><scope>amrex::IntVectND</scope><name>TheUnitVector</name></member>
      <member refid="classamrex_1_1IntVectND_1aa060b6d059c0d7bccaf5a0b5e743bfe4" prot="public" virt="non-virtual"><scope>amrex::IntVectND</scope><name>TheZeroVector</name></member>
      <member refid="classamrex_1_1IntVectND_1a84dd86e62e013bbff67a10ffe6aab940" prot="public" virt="non-virtual"><scope>amrex::IntVectND</scope><name>Unit</name></member>
      <member refid="classamrex_1_1IntVectND_1a46c2c7c4a9976b355e86cfbc62f1052a" prot="public" virt="non-virtual"><scope>amrex::IntVectND</scope><name>value_type</name></member>
      <member refid="classamrex_1_1IntVectND_1af2d620609a5de880b2cd8c8cbf63d1c3" prot="private" virt="non-virtual"><scope>amrex::IntVectND</scope><name>vect</name></member>
      <member refid="classamrex_1_1IntVectND_1ac9be7906eed9686b378081b582db248e" prot="public" virt="non-virtual"><scope>amrex::IntVectND</scope><name>Zero</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
