<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classamrex_1_1MFIter" kind="class" language="C++" prot="public">
    <compoundname>amrex::MFIter</compoundname>
    <derivedcompoundref refid="classamrex_1_1ParIterBase__impl" prot="public" virt="non-virtual">amrex::ParIterBase_impl&lt; false, T_ParticleType, 0, 0, DefaultAllocator &gt;</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1ParIterBase__impl" prot="public" virt="non-virtual">amrex::ParIterBase_impl&lt; true, T_ParticleType, 0, 0, DefaultAllocator &gt;</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1FabSetIter" prot="public" virt="non-virtual">amrex::FabSetIter</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1FillPatchIterator" prot="public" virt="non-virtual">amrex::FillPatchIterator</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1MultiMaskIter" prot="public" virt="non-virtual">amrex::MultiMaskIter</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1ParIterBase__impl" prot="public" virt="non-virtual">amrex::ParIterBase_impl&lt; is_const, T_ParticleType, NArrayReal, NArrayInt, Allocator &gt;</derivedcompoundref>
    <includes refid="AMReX__MFIter_8H" local="no">AMReX_MFIter.H</includes>
    <innerclass refid="structamrex_1_1MFIter_1_1DeviceSync" prot="protected">amrex::MFIter::DeviceSync</innerclass>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classamrex_1_1MFIter_1af5cf94bce73f6da744dd94acc46cdf38" prot="public" static="no" strong="no">
        <type></type>
        <name>Flags</name>
        <enumvalue id="classamrex_1_1MFIter_1af5cf94bce73f6da744dd94acc46cdf38a1db74b1bbdeb756077e4bc33e25a2740" prot="public">
          <name>Tiling</name>
          <initializer>= 0x01</initializer>
          <briefdescription>
<para>Tiling: Enabling the tiling mode. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classamrex_1_1MFIter_1af5cf94bce73f6da744dd94acc46cdf38a96650cf6d7f0f21d0f4b118ae897d008" prot="public">
          <name>AllBoxes</name>
          <initializer>= 0x02</initializer>
          <briefdescription>
<para>AllBoxes: If on, all threads/workers loop over all boxes without tiling. This essentially loops over indexMap. Note that many functions won&apos;t work with this. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classamrex_1_1MFIter_1af5cf94bce73f6da744dd94acc46cdf38af1e51da50b24860035a3665786fe9d14" prot="public">
          <name>NoTeamBarrier</name>
          <initializer>= 0x04</initializer>
          <briefdescription>
<para>NoTeamBarrier: This option is for Team only. If on, there is no barrier in <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> dtor. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Flags that specify tiling modes. All these flags are off by default. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" line="60" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" bodystart="60" bodyend="71"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classamrex_1_1MFIter_1ae0aa4364654842ee9aaba3d573fb6b01" prot="protected" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1FabArrayBase" kindref="compound">FabArrayBase</ref> &gt;</type>
        <definition>std::unique_ptr&lt;FabArrayBase&gt; amrex::MFIter::m_fa</definition>
        <argsstring></argsstring>
        <name>m_fa</name>
        <briefdescription>
<para>This must be the first member! </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" line="174" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" bodystart="174" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MFIter_1a198baf9d7f4a208f217569a0c6f02183" prot="protected" static="no" mutable="no">
        <type>const <ref refid="classamrex_1_1FabArrayBase" kindref="compound">FabArrayBase</ref> &amp;</type>
        <definition>const FabArrayBase&amp; amrex::MFIter::fabArray</definition>
        <argsstring></argsstring>
        <name>fabArray</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" line="176" column="24" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" bodystart="176" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MFIter_1ae64d80e0b2d14e9209c426a0654e8a1f" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>IntVect amrex::MFIter::tile_size</definition>
        <argsstring></argsstring>
        <name>tile_size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" line="178" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" bodystart="178" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MFIter_1a1184620f493f560be355cf02e5a0e619" prot="protected" static="no" mutable="no">
        <type>unsigned char</type>
        <definition>unsigned char amrex::MFIter::flags</definition>
        <argsstring></argsstring>
        <name>flags</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" line="180" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" bodystart="180" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MFIter_1abfba09b9f27138141e9758d1a8ea2e4b" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::MFIter::currentIndex</definition>
        <argsstring></argsstring>
        <name>currentIndex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" line="181" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" bodystart="181" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MFIter_1a65b335b52bc54d9eaf7030a4fce20cf8" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::MFIter::beginIndex</definition>
        <argsstring></argsstring>
        <name>beginIndex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" line="182" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" bodystart="182" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MFIter_1a427faab13c7d1f9d72b476452df519e1" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::MFIter::endIndex</definition>
        <argsstring></argsstring>
        <name>endIndex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" line="183" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" bodystart="183" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MFIter_1a6387ff79e8fcfbfdcfbc7dd8d8e78621" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::MFIter::streams</definition>
        <argsstring></argsstring>
        <name>streams</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" line="184" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" bodystart="184" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MFIter_1a1406cbb9152b357a39e877b78eb8ff0d" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref></type>
        <definition>IndexType amrex::MFIter::typ</definition>
        <argsstring></argsstring>
        <name>typ</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" line="185" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" bodystart="185" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MFIter_1a16fa2d144bcc71d665056de5938c4b32" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::MFIter::dynamic</definition>
        <argsstring></argsstring>
        <name>dynamic</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" line="187" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" bodystart="187" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MFIter_1a371e17b5bdd1d743dd9ac0a8bb1bced9" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::MFIter::finalized</definition>
        <argsstring></argsstring>
        <name>finalized</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" line="188" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" bodystart="188" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MFIter_1a55734d57f0abbb384833f35c1a5422ef" prot="protected" static="no" mutable="no">
        <type><ref refid="structamrex_1_1MFIter_1_1DeviceSync" kindref="compound">DeviceSync</ref></type>
        <definition>DeviceSync amrex::MFIter::device_sync</definition>
        <argsstring></argsstring>
        <name>device_sync</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" line="200" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" bodystart="200" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MFIter_1ac482cbbf5ecee6f2593a3e4437623082" prot="protected" static="no" mutable="no">
        <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; *</type>
        <definition>const Vector&lt;int&gt;* amrex::MFIter::index_map</definition>
        <argsstring></argsstring>
        <name>index_map</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" line="202" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" bodystart="202" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MFIter_1a8a8cdb1fbae0dace9fcc0dc622c3409d" prot="protected" static="no" mutable="no">
        <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; *</type>
        <definition>const Vector&lt;int&gt;* amrex::MFIter::local_index_map</definition>
        <argsstring></argsstring>
        <name>local_index_map</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" line="203" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" bodystart="203" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MFIter_1a10b2f0f6900d23295fe25fd526153f43" prot="protected" static="no" mutable="no">
        <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &gt; *</type>
        <definition>const Vector&lt;Box&gt;* amrex::MFIter::tile_array</definition>
        <argsstring></argsstring>
        <name>tile_array</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" line="204" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" bodystart="204" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MFIter_1a72828c9a333be0dfff3e89e350fd0e11" prot="protected" static="no" mutable="no">
        <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; *</type>
        <definition>const Vector&lt;int&gt;* amrex::MFIter::local_tile_index_map</definition>
        <argsstring></argsstring>
        <name>local_tile_index_map</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" line="205" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" bodystart="205" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MFIter_1a967c3c48ccb4f316911d06fcaccb29fa" prot="protected" static="no" mutable="no">
        <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; *</type>
        <definition>const Vector&lt;int&gt;* amrex::MFIter::num_local_tiles</definition>
        <argsstring></argsstring>
        <name>num_local_tiles</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" line="206" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" bodystart="206" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-static-attrib">
      <memberdef kind="variable" id="classamrex_1_1MFIter_1a07296b12634219c4a15337435852a67b" prot="protected" static="yes" mutable="no">
        <type><ref refid="AMReX__Extension_8H_1ac05fa35b3db13c4599d7ad5fc51bef47" kindref="member">AMREX_EXPORT</ref> <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::MFIter::nextDynamicIndex</definition>
        <argsstring></argsstring>
        <name>nextDynamicIndex</name>
        <initializer>= std::numeric_limits&lt;<ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>&gt;::<ref refid="namespaceamrex_1a475e2bc71e3ca92b6b016fcb70af95bd" kindref="member">min</ref>()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" line="208" column="29" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" bodystart="208" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MFIter_1a46b0a938c3d5f41c379d0adc7bf19c0d" prot="protected" static="yes" mutable="no">
        <type><ref refid="AMReX__Extension_8H_1ac05fa35b3db13c4599d7ad5fc51bef47" kindref="member">AMREX_EXPORT</ref> <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::MFIter::depth</definition>
        <argsstring></argsstring>
        <name>depth</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" line="209" column="29" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" bodystart="209" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MFIter_1ab2fc387b6146040c8efcef278b258f78" prot="protected" static="yes" mutable="no">
        <type><ref refid="AMReX__Extension_8H_1ac05fa35b3db13c4599d7ad5fc51bef47" kindref="member">AMREX_EXPORT</ref> <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::MFIter::allow_multiple_mfiters</definition>
        <argsstring></argsstring>
        <name>allow_multiple_mfiters</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" line="210" column="29" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" bodystart="210" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1MFIter_1aac055187a5b4d7200fc77827dc28a76c" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MFIter::MFIter</definition>
        <argsstring>(const FabArrayBase &amp;fabarray, unsigned char flags_=0)</argsstring>
        <name>MFIter</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArrayBase" kindref="compound">FabArrayBase</ref> &amp;</type>
          <declname>fabarray</declname>
        </param>
        <param>
          <type>unsigned char</type>
          <declname>flags_</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>The default constructor does not enable tiling (flags_ is set to 0 by default). However, the tiling mode can be enabled by explicitly turning the tiling flag on (i.e. flags_ = Tiling). The tile size in this case is defined by <ref refid="classamrex_1_1FabArrayBase_1a0b167b63030177e95b45822b38732fec" kindref="member">FabArrayBase::mfiter_tile_size</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" line="78" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.cpp" bodystart="20" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MFIter_1ae7623281ac9e772db1fc5085a64aeeca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MFIter::MFIter</definition>
        <argsstring>(const FabArrayBase &amp;fabarray, bool do_tiling)</argsstring>
        <name>MFIter</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArrayBase" kindref="compound">FabArrayBase</ref> &amp;</type>
          <declname>fabarray</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_tiling</declname>
        </param>
        <briefdescription>
<para>Enable tiling with the default tile size, which is defined by <ref refid="classamrex_1_1FabArrayBase_1a0b167b63030177e95b45822b38732fec" kindref="member">FabArrayBase::mfiter_tile_size</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" line="82" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.cpp" bodystart="38" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MFIter_1a1d9668de99635aa50096d0f091d8b9b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MFIter::MFIter</definition>
        <argsstring>(const FabArrayBase &amp;fabarray, const IntVect &amp;tilesize, unsigned char flags_=0)</argsstring>
        <name>MFIter</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArrayBase" kindref="compound">FabArrayBase</ref> &amp;</type>
          <declname>fabarray</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>tilesize</declname>
        </param>
        <param>
          <type>unsigned char</type>
          <declname>flags_</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Enable tiling with explicit tile size and flags (See type Flags for more information) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" line="86" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.cpp" bodystart="56" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MFIter_1a830e42aee76ec9fe8dae8bdd262e0b2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MFIter::MFIter</definition>
        <argsstring>(const BoxArray &amp;ba, const DistributionMapping &amp;dm, unsigned char flags_=0)</argsstring>
        <name>MFIter</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <param>
          <type>unsigned char</type>
          <declname>flags_</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" line="90" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.cpp" bodystart="75" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MFIter_1ad7a19e95ba128febb94b27d2a9d97ef1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MFIter::MFIter</definition>
        <argsstring>(const BoxArray &amp;ba, const DistributionMapping &amp;dm, bool do_tiling)</argsstring>
        <name>MFIter</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_tiling</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" line="92" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.cpp" bodystart="99" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MFIter_1a970e636bf6a2d744068483806ddb7944" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MFIter::MFIter</definition>
        <argsstring>(const BoxArray &amp;ba, const DistributionMapping &amp;dm, const IntVect &amp;tilesize, unsigned char flags_=0)</argsstring>
        <name>MFIter</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>tilesize</declname>
        </param>
        <param>
          <type>unsigned char</type>
          <declname>flags_</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" line="94" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.cpp" bodystart="124" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MFIter_1a2c0a016e1d5d69073f2cab81e7c6a095" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MFIter::MFIter</definition>
        <argsstring>(const FabArrayBase &amp;fabarray, const MFItInfo &amp;info)</argsstring>
        <name>MFIter</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArrayBase" kindref="compound">FabArrayBase</ref> &amp;</type>
          <declname>fabarray</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1MFItInfo" kindref="compound">MFItInfo</ref> &amp;</type>
          <declname>info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" line="97" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.cpp" bodystart="183" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MFIter_1aecfd3f3ef12e8703caad5794968ff06a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MFIter::MFIter</definition>
        <argsstring>(const BoxArray &amp;ba, const DistributionMapping &amp;dm, const MFItInfo &amp;info)</argsstring>
        <name>MFIter</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1MFItInfo" kindref="compound">MFItInfo</ref> &amp;</type>
          <declname>info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" line="99" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.cpp" bodystart="150" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MFIter_1a66b92b6dbfbe1a498ba614df28817709" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MFIter::MFIter</definition>
        <argsstring>(MFIter &amp;&amp;rhs)=default</argsstring>
        <name>MFIter</name>
        <param>
          <type><ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" line="101" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MFIter_1a4c3f600ec834db18aba9266638ac436e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MFIter::MFIter</definition>
        <argsstring>(MFIter const &amp;)=delete</argsstring>
        <name>MFIter</name>
        <param>
          <type><ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" line="102" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MFIter_1ab35d3c7298d61ba3c7d2844c402dd6fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
        <definition>MFIter&amp; amrex::MFIter::operator=</definition>
        <argsstring>(MFIter const &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" line="103" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MFIter_1a61f66e0c8dd6b23c672213d1393f59da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
        <definition>MFIter&amp; amrex::MFIter::operator=</definition>
        <argsstring>(MFIter &amp;&amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" line="104" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MFIter_1aac3223d243bff8f86cbd227b8f1af866" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MFIter::~MFIter</definition>
        <argsstring>()</argsstring>
        <name>~MFIter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" line="107" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.cpp" bodystart="210" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MFIter_1a4633394eac1ff3355fe082b815ed7413" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>Box amrex::MFIter::tilebox</definition>
        <argsstring>() const noexcept</argsstring>
        <name>tilebox</name>
        <briefdescription>
<para>Return the tile <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> at the current index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" line="110" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.cpp" bodystart="374" bodyend="392"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MFIter_1aade25ad6c9b6b92a5dbe2e022fc77912" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>Box amrex::MFIter::tilebox</definition>
        <argsstring>(const IntVect &amp;nodal) const noexcept</argsstring>
        <name>tilebox</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>nodal</declname>
        </param>
        <briefdescription>
<para>Return the tilebox with provided nodal flag. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" line="113" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.cpp" bodystart="395" bodyend="414"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MFIter_1a3563f863ba15b874a9abd0dc338c0c72" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>Box amrex::MFIter::tilebox</definition>
        <argsstring>(const IntVect &amp;nodal, const IntVect &amp;ngrow) const noexcept</argsstring>
        <name>tilebox</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>nodal</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ngrow</declname>
        </param>
        <briefdescription>
<para>Return the tilebox with provided nodal flag and grown cells. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" line="116" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.cpp" bodystart="417" bodyend="430"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MFIter_1a7a17b4a775ec84d2987cb480c38ed271" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>Box amrex::MFIter::nodaltilebox</definition>
        <argsstring>(int dir=-1) const noexcept</argsstring>
        <name>nodaltilebox</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
<para>Return the dir-nodal (or all nodal if dir&lt;0) <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> at the current index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" line="119" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.cpp" bodystart="433" bodyend="457"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MFIter_1a1e344ffd39d3dba95d582a7d93c1ad97" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>Box amrex::MFIter::growntilebox</definition>
        <argsstring>(int ng=-1000000) const noexcept</argsstring>
        <name>growntilebox</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ng</declname>
          <defval>-1000000</defval>
        </param>
        <briefdescription>
<para>Return the tile box at the current index grown to include ghost cells. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" line="122" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.cpp" bodystart="461" bodyend="476"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MFIter_1ac9653cce066f73c95c3ec89f46f38ba1" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>Box amrex::MFIter::growntilebox</definition>
        <argsstring>(const IntVect &amp;ng) const noexcept</argsstring>
        <name>growntilebox</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ng</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" line="124" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.cpp" bodystart="479" bodyend="492"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MFIter_1ae59e3e67c7b94d6b15158d177dd8cdc8" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>Box amrex::MFIter::grownnodaltilebox</definition>
        <argsstring>(int dir=-1, int ng=-1000000) const noexcept</argsstring>
        <name>grownnodaltilebox</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ng</declname>
          <defval>-1000000</defval>
        </param>
        <briefdescription>
<para>Return the dir-nodal (or all nodal if dir&lt;0) box grown to include ghost cells. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" line="127" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.cpp" bodystart="495" bodyend="500"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MFIter_1a972ba6223b0f4ccca81791b9510b3002" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>Box amrex::MFIter::grownnodaltilebox</definition>
        <argsstring>(int dir, const IntVect &amp;ng) const noexcept</argsstring>
        <name>grownnodaltilebox</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ng</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" line="129" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.cpp" bodystart="503" bodyend="508"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MFIter_1a77ae102619461dabde09c7801390b841" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>Box amrex::MFIter::validbox</definition>
        <argsstring>() const noexcept</argsstring>
        <name>validbox</name>
        <briefdescription>
<para>Return the valid <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> in which the current tile resides. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" line="132" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" bodystart="132" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MFIter_1a3290eb14472377e0118842344967a44c" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>Box amrex::MFIter::fabbox</definition>
        <argsstring>() const noexcept</argsstring>
        <name>fabbox</name>
        <briefdescription>
<para>Return the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> of the FAB at which we currently point. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" line="135" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" bodystart="135" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MFIter_1aec727f262b8f91587f66613da26fcbbb" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MFIter::operator++</definition>
        <argsstring>() noexcept</argsstring>
        <name>operator++</name>
        <briefdescription>
<para>Increment iterator to the next tile we own. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" line="138" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.cpp" bodystart="511" bodyend="534"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MFIter_1a61b9a1d5eda39765d1db9b9b936558c7" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::MFIter::isValid</definition>
        <argsstring>() const noexcept</argsstring>
        <name>isValid</name>
        <briefdescription>
<para>Is the iterator valid i.e. is it associated with a FAB? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" line="141" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" bodystart="141" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MFIter_1aa69f73dbf7931e2d0a3889de2db4a42b" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::MFIter::index</definition>
        <argsstring>() const noexcept</argsstring>
        <name>index</name>
        <briefdescription>
<para>The index into the underlying <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> of the current FAB. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" line="144" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" bodystart="144" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MFIter_1a3658deeec368fbc6be8f9555ac37bab5" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::MFIter::length</definition>
        <argsstring>() const noexcept</argsstring>
        <name>length</name>
        <briefdescription>
<para>The number of indices. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" line="147" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" bodystart="147" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MFIter_1a02c0b04b49bf0116bc21ee53e3593225" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::MFIter::LocalTileIndex</definition>
        <argsstring>() const noexcept</argsstring>
        <name>LocalTileIndex</name>
        <briefdescription>
<para>The current local tile index in the current grid;. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" line="150" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" bodystart="150" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MFIter_1afbbd9093cd125af3cebbc8f8231bb142" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::MFIter::numLocalTiles</definition>
        <argsstring>() const noexcept</argsstring>
        <name>numLocalTiles</name>
        <briefdescription>
<para>The the number of tiles in the current grid;. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" line="153" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" bodystart="153" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MFIter_1ab9afc4ebb6b729bcecdba6b22a317e88" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::MFIter::LocalIndex</definition>
        <argsstring>() const noexcept</argsstring>
        <name>LocalIndex</name>
        <briefdescription>
<para>Return local index into the vector of fab pointers, m_fabs_v When AllBoxes is on, local_index_map is a nullptr and local index is current index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" line="159" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" bodystart="159" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MFIter_1a8a7f84508a19797af16e5f3f6b13523c" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1FabArrayBase" kindref="compound">FabArrayBase</ref> &amp;</type>
        <definition>const FabArrayBase&amp; amrex::MFIter::theFabArrayBase</definition>
        <argsstring>() const noexcept</argsstring>
        <name>theFabArrayBase</name>
        <briefdescription>
<para>Constant reference to <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> over which we&apos;re iterating. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" line="162" column="25" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" bodystart="162" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MFIter_1a3d73098e8ef5205fc2bce58d5ed0f21b" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::MFIter::tileIndex</definition>
        <argsstring>() const noexcept</argsstring>
        <name>tileIndex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" line="164" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" bodystart="164" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MFIter_1a47d2e159ed2d66cd78498ea5bea35a17" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
        <definition>const DistributionMapping&amp; amrex::MFIter::DistributionMap</definition>
        <argsstring>() const noexcept</argsstring>
        <name>DistributionMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" line="166" column="32" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" bodystart="166" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MFIter_1a7f8343c78da4a5d341aae1e5aea752aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MFIter::Finalize</definition>
        <argsstring>()</argsstring>
        <name>Finalize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" line="170" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.cpp" bodystart="216" bodyend="260"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classamrex_1_1MFIter_1a3a8a7a77b913c5ddc8b352f2610e9cd1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::MFIter::allowMultipleMFIters</definition>
        <argsstring>(int allow)</argsstring>
        <name>allowMultipleMFIters</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>allow</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" line="168" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.cpp" bodystart="14" bodyend="18"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classamrex_1_1MFIter_1addaa9305a4ee5dda972e835164b70e29" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MFIter::Initialize</definition>
        <argsstring>()</argsstring>
        <name>Initialize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" line="212" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.cpp" bodystart="263" bodyend="371"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>amrex::MFIter</label>
        <link refid="classamrex_1_1MFIter"/>
      </node>
      <node id="4">
        <label>amrex::ParIterBase_impl&lt; true, T_ParticleType, 0, 0, DefaultAllocator &gt;</label>
        <link refid="classamrex_1_1ParIterBase__impl"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>amrex::ParConstIter_impl&lt; T_ParticleType, NArrayReal, NArrayInt, Allocator &gt;</label>
        <link refid="classamrex_1_1ParConstIter__impl"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>amrex::FillPatchIterator</label>
        <link refid="classamrex_1_1FillPatchIterator"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>amrex::ParIterBase_impl&lt; is_const, T_ParticleType, NArrayReal, NArrayInt, Allocator &gt;</label>
        <link refid="classamrex_1_1ParIterBase__impl"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>amrex::ParIter_impl&lt; T_ParticleType, NArrayReal, NArrayInt, Allocator &gt;</label>
        <link refid="classamrex_1_1ParIter__impl"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>amrex::ParIterBase_impl&lt; false, T_ParticleType, 0, 0, DefaultAllocator &gt;</label>
        <link refid="classamrex_1_1ParIterBase__impl"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>amrex::FabSetIter</label>
        <link refid="classamrex_1_1FabSetIter"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>amrex::MultiMaskIter</label>
        <link refid="classamrex_1_1MultiMaskIter"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>amrex::MFIter</label>
        <link refid="classamrex_1_1MFIter"/>
        <childnode refid="2" relation="usage">
          <edgelabel>fabArray</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>tile_size</edgelabel>
        </childnode>
        <childnode refid="28" relation="usage">
          <edgelabel>index_map</edgelabel>
          <edgelabel>local_index_map</edgelabel>
          <edgelabel>local_tile_index_map</edgelabel>
          <edgelabel>num_local_tiles</edgelabel>
        </childnode>
        <childnode refid="24" relation="usage">
          <edgelabel>tile_array</edgelabel>
        </childnode>
        <childnode refid="44" relation="usage">
          <edgelabel>m_fa</edgelabel>
        </childnode>
        <childnode refid="45" relation="usage">
          <edgelabel>device_sync</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>typ</edgelabel>
        </childnode>
      </node>
      <node id="30">
        <label>amrex::FabArrayBase::CacheStats</label>
        <link refid="structamrex_1_1FabArrayBase_1_1CacheStats"/>
        <childnode refid="31" relation="usage">
          <edgelabel>name</edgelabel>
        </childnode>
      </node>
      <node id="37">
        <label>amrex::FabArrayBase::FabArrayStats</label>
        <link refid="structamrex_1_1FabArrayBase_1_1FabArrayStats"/>
      </node>
      <node id="16">
        <label>amrex::BATindexType</label>
        <link refid="structamrex_1_1BATindexType"/>
        <childnode refid="10" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
      </node>
      <node id="38">
        <label>std::map&lt; amrex::FabArrayBase::BDKey, int &gt;</label>
        <childnode refid="19" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
      </node>
      <node id="18">
        <label>amrex::BATindexType_coarsenRatio</label>
        <link refid="structamrex_1_1BATindexType__coarsenRatio"/>
        <childnode refid="8" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>K</label>
      </node>
      <node id="17">
        <label>amrex::BATnull</label>
        <link refid="structamrex_1_1BATnull"/>
      </node>
      <node id="8">
        <label>amrex::IntVect</label>
        <link refid="classamrex_1_1IntVect"/>
        <childnode refid="8" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>T</label>
      </node>
      <node id="44">
        <label>std::unique_ptr&lt; amrex::FabArrayBase &gt;</label>
      </node>
      <node id="25">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="22">
        <label>std::unordered_map&lt; IntVect, std::vector&lt; int &gt;, IntVect::shift_hasher &gt;</label>
        <childnode refid="8" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="23" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>std::map&lt; K, T &gt;</label>
        <childnode refid="4" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="28">
        <label>amrex::Vector&lt; int &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="25" relation="public-inheritance">
        </childnode>
      </node>
      <node id="35">
        <label>std::map&lt; std::string, amrex::FabArrayBase::meminfo &gt;</label>
        <childnode refid="36" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
        <childnode refid="31" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
      </node>
      <node id="14">
        <label>amrex::Orientation</label>
        <link refid="classamrex_1_1Orientation"/>
      </node>
      <node id="21">
        <label>amrex::BARef</label>
        <link refid="structamrex_1_1BARef"/>
        <childnode refid="8" relation="usage">
          <edgelabel>crsn</edgelabel>
        </childnode>
        <childnode refid="22" relation="usage">
          <edgelabel>hash</edgelabel>
        </childnode>
        <childnode refid="24" relation="usage">
          <edgelabel>m_abox</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>bbox</edgelabel>
        </childnode>
      </node>
      <node id="32">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="11">
        <label>amrex::BATransformer</label>
        <link refid="structamrex_1_1BATransformer"/>
        <childnode refid="12" relation="usage">
          <edgelabel>m_op</edgelabel>
        </childnode>
      </node>
      <node id="15">
        <label>amrex::BATcoarsenRatio</label>
        <link refid="structamrex_1_1BATcoarsenRatio"/>
        <childnode refid="8" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
        </childnode>
      </node>
      <node id="12">
        <label>amrex::BATransformer::BATOp</label>
        <link refid="unionamrex_1_1BATransformer_1_1BATOp"/>
        <childnode refid="13" relation="usage">
          <edgelabel>m_bndryReg</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>m_coarsenRatio</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>m_indexType</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>m_null</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>m_indexType_coarsenRatio</edgelabel>
        </childnode>
      </node>
      <node id="39">
        <label>std::multimap&lt; K, T &gt;</label>
        <childnode refid="4" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="41">
        <label>amrex::BoxArray</label>
        <link refid="classamrex_1_1BoxArray"/>
        <childnode refid="42" relation="usage">
          <edgelabel>m_ref</edgelabel>
        </childnode>
        <childnode refid="43" relation="usage">
          <edgelabel>m_simplified_list</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>m_bat</edgelabel>
        </childnode>
      </node>
      <node id="40">
        <label>std::vector&lt; std::string &gt;</label>
        <childnode refid="31" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="9">
        <label>amrex::Box</label>
        <link refid="classamrex_1_1Box"/>
        <childnode refid="8" relation="usage">
          <edgelabel>bigend</edgelabel>
          <edgelabel>smallend</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>btype</edgelabel>
        </childnode>
      </node>
      <node id="42">
        <label>std::shared_ptr&lt; amrex::BARef &gt;</label>
      </node>
      <node id="26">
        <label>amrex::DistributionMapping::RefID</label>
        <link refid="structamrex_1_1DistributionMapping_1_1RefID"/>
        <childnode refid="27" relation="usage">
          <edgelabel>data</edgelabel>
        </childnode>
      </node>
      <node id="34">
        <label>std::shared_ptr&lt; amrex::DistributionMapping::Ref &gt;</label>
      </node>
      <node id="13">
        <label>amrex::BATbndryReg</label>
        <link refid="structamrex_1_1BATbndryReg"/>
        <childnode refid="8" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
          <edgelabel>m_doihi</edgelabel>
          <edgelabel>m_doilo</edgelabel>
          <edgelabel>m_hishft</edgelabel>
          <edgelabel>m_loshft</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>m_face</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>amrex::FabArrayBase::ParForInfo</label>
        <link refid="structamrex_1_1FabArrayBase_1_1ParForInfo"/>
        <childnode refid="8" relation="usage">
          <edgelabel>m_ng</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>m_boxes</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>m_bat</edgelabel>
        </childnode>
      </node>
      <node id="10">
        <label>amrex::IndexType</label>
        <link refid="classamrex_1_1IndexType"/>
      </node>
      <node id="27">
        <label>amrex::DistributionMapping::Ref</label>
        <link refid="structamrex_1_1DistributionMapping_1_1Ref"/>
        <childnode refid="28" relation="usage">
          <edgelabel>m_index_array</edgelabel>
          <edgelabel>m_pmap</edgelabel>
        </childnode>
        <childnode refid="29" relation="usage">
          <edgelabel>m_ownership</edgelabel>
        </childnode>
      </node>
      <node id="36">
        <label>amrex::FabArrayBase::meminfo</label>
        <link refid="structamrex_1_1FabArrayBase_1_1meminfo"/>
      </node>
      <node id="33">
        <label>amrex::DistributionMapping</label>
        <link refid="classamrex_1_1DistributionMapping"/>
        <childnode refid="34" relation="usage">
          <edgelabel>m_ref</edgelabel>
        </childnode>
      </node>
      <node id="19">
        <label>amrex::FabArrayBase::BDKey</label>
        <link refid="structamrex_1_1FabArrayBase_1_1BDKey"/>
        <childnode refid="20" relation="usage">
          <edgelabel>m_ba_id</edgelabel>
        </childnode>
        <childnode refid="26" relation="usage">
          <edgelabel>m_dm_id</edgelabel>
        </childnode>
      </node>
      <node id="29">
        <label>std::vector&lt; bool &gt;</label>
      </node>
      <node id="43">
        <label>std::shared_ptr&lt; amrex::BoxList &gt;</label>
      </node>
      <node id="20">
        <label>amrex::BoxArray::RefID</label>
        <link refid="structamrex_1_1BoxArray_1_1RefID"/>
        <childnode refid="21" relation="usage">
          <edgelabel>data</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>std::multimap&lt; amrex::FabArrayBase::BDKey, amrex::FabArrayBase::ParForInfo * &gt;</label>
        <childnode refid="7" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
        <childnode refid="19" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
      </node>
      <node id="24">
        <label>amrex::Vector&lt; amrex::Box &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="25" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>amrex::FabArrayBase</label>
        <link refid="classamrex_1_1FabArrayBase"/>
        <childnode refid="3" relation="usage">
          <edgelabel>m_TheTileArrayCache</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>m_TheParForCache</edgelabel>
        </childnode>
        <childnode refid="30" relation="usage">
          <edgelabel>m_CFinfo_stats</edgelabel>
          <edgelabel>m_CPC_stats</edgelabel>
          <edgelabel>m_FBC_stats</edgelabel>
          <edgelabel>m_FPinfo_stats</edgelabel>
          <edgelabel>m_TAC_stats</edgelabel>
        </childnode>
        <childnode refid="33" relation="usage">
          <edgelabel>distributionMap</edgelabel>
        </childnode>
        <childnode refid="35" relation="usage">
          <edgelabel>m_mem_usage</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>comm_tile_size</edgelabel>
          <edgelabel>mfiter_tile_size</edgelabel>
          <edgelabel>n_filled</edgelabel>
          <edgelabel>n_grow</edgelabel>
        </childnode>
        <childnode refid="37" relation="usage">
          <edgelabel>m_FA_stats</edgelabel>
        </childnode>
        <childnode refid="38" relation="usage">
          <edgelabel>m_BD_count</edgelabel>
        </childnode>
        <childnode refid="28" relation="usage">
          <edgelabel>indexArray</edgelabel>
        </childnode>
        <childnode refid="19" relation="usage">
          <edgelabel>m_bdkey</edgelabel>
        </childnode>
        <childnode refid="39" relation="usage">
          <edgelabel>m_TheCPCache</edgelabel>
          <edgelabel>m_TheCrseFineCache</edgelabel>
          <edgelabel>m_TheFBCache</edgelabel>
          <edgelabel>m_TheFillPatchCache</edgelabel>
          <edgelabel>m_ThePolarBCache</edgelabel>
          <edgelabel>m_TheRB180Cache</edgelabel>
          <edgelabel>m_TheRB90Cache</edgelabel>
        </childnode>
        <childnode refid="29" relation="usage">
          <edgelabel>ownership</edgelabel>
        </childnode>
        <childnode refid="40" relation="usage">
          <edgelabel>m_region_tag</edgelabel>
        </childnode>
        <childnode refid="41" relation="usage">
          <edgelabel>boxarray</edgelabel>
        </childnode>
      </node>
      <node id="23">
        <label>std::vector&lt; int &gt;</label>
      </node>
      <node id="45">
        <label>amrex::MFIter::DeviceSync</label>
        <link refid="structamrex_1_1MFIter_1_1DeviceSync"/>
      </node>
      <node id="31">
        <label>std::string</label>
        <childnode refid="32" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" line="56" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" bodystart="57" bodyend="213"/>
    <listofallmembers>
      <member refid="classamrex_1_1MFIter_1af5cf94bce73f6da744dd94acc46cdf38a96650cf6d7f0f21d0f4b118ae897d008" prot="public" virt="non-virtual"><scope>amrex::MFIter</scope><name>AllBoxes</name></member>
      <member refid="classamrex_1_1MFIter_1ab2fc387b6146040c8efcef278b258f78" prot="protected" virt="non-virtual"><scope>amrex::MFIter</scope><name>allow_multiple_mfiters</name></member>
      <member refid="classamrex_1_1MFIter_1a3a8a7a77b913c5ddc8b352f2610e9cd1" prot="public" virt="non-virtual"><scope>amrex::MFIter</scope><name>allowMultipleMFIters</name></member>
      <member refid="classamrex_1_1MFIter_1a65b335b52bc54d9eaf7030a4fce20cf8" prot="protected" virt="non-virtual"><scope>amrex::MFIter</scope><name>beginIndex</name></member>
      <member refid="classamrex_1_1MFIter_1abfba09b9f27138141e9758d1a8ea2e4b" prot="protected" virt="non-virtual"><scope>amrex::MFIter</scope><name>currentIndex</name></member>
      <member refid="classamrex_1_1MFIter_1a46b0a938c3d5f41c379d0adc7bf19c0d" prot="protected" virt="non-virtual"><scope>amrex::MFIter</scope><name>depth</name></member>
      <member refid="classamrex_1_1MFIter_1a55734d57f0abbb384833f35c1a5422ef" prot="protected" virt="non-virtual"><scope>amrex::MFIter</scope><name>device_sync</name></member>
      <member refid="classamrex_1_1MFIter_1a47d2e159ed2d66cd78498ea5bea35a17" prot="public" virt="non-virtual"><scope>amrex::MFIter</scope><name>DistributionMap</name></member>
      <member refid="classamrex_1_1MFIter_1a16fa2d144bcc71d665056de5938c4b32" prot="protected" virt="non-virtual"><scope>amrex::MFIter</scope><name>dynamic</name></member>
      <member refid="classamrex_1_1MFIter_1a427faab13c7d1f9d72b476452df519e1" prot="protected" virt="non-virtual"><scope>amrex::MFIter</scope><name>endIndex</name></member>
      <member refid="classamrex_1_1MFIter_1a198baf9d7f4a208f217569a0c6f02183" prot="protected" virt="non-virtual"><scope>amrex::MFIter</scope><name>fabArray</name></member>
      <member refid="classamrex_1_1MFIter_1a3290eb14472377e0118842344967a44c" prot="public" virt="non-virtual"><scope>amrex::MFIter</scope><name>fabbox</name></member>
      <member refid="classamrex_1_1MFIter_1a7f8343c78da4a5d341aae1e5aea752aa" prot="public" virt="non-virtual"><scope>amrex::MFIter</scope><name>Finalize</name></member>
      <member refid="classamrex_1_1MFIter_1a371e17b5bdd1d743dd9ac0a8bb1bced9" prot="protected" virt="non-virtual"><scope>amrex::MFIter</scope><name>finalized</name></member>
      <member refid="classamrex_1_1MFIter_1a1184620f493f560be355cf02e5a0e619" prot="protected" virt="non-virtual"><scope>amrex::MFIter</scope><name>flags</name></member>
      <member refid="classamrex_1_1MFIter_1af5cf94bce73f6da744dd94acc46cdf38" prot="public" virt="non-virtual"><scope>amrex::MFIter</scope><name>Flags</name></member>
      <member refid="classamrex_1_1MFIter_1ae59e3e67c7b94d6b15158d177dd8cdc8" prot="public" virt="non-virtual"><scope>amrex::MFIter</scope><name>grownnodaltilebox</name></member>
      <member refid="classamrex_1_1MFIter_1a972ba6223b0f4ccca81791b9510b3002" prot="public" virt="non-virtual"><scope>amrex::MFIter</scope><name>grownnodaltilebox</name></member>
      <member refid="classamrex_1_1MFIter_1a1e344ffd39d3dba95d582a7d93c1ad97" prot="public" virt="non-virtual"><scope>amrex::MFIter</scope><name>growntilebox</name></member>
      <member refid="classamrex_1_1MFIter_1ac9653cce066f73c95c3ec89f46f38ba1" prot="public" virt="non-virtual"><scope>amrex::MFIter</scope><name>growntilebox</name></member>
      <member refid="classamrex_1_1MFIter_1aa69f73dbf7931e2d0a3889de2db4a42b" prot="public" virt="non-virtual"><scope>amrex::MFIter</scope><name>index</name></member>
      <member refid="classamrex_1_1MFIter_1ac482cbbf5ecee6f2593a3e4437623082" prot="protected" virt="non-virtual"><scope>amrex::MFIter</scope><name>index_map</name></member>
      <member refid="classamrex_1_1MFIter_1addaa9305a4ee5dda972e835164b70e29" prot="protected" virt="non-virtual"><scope>amrex::MFIter</scope><name>Initialize</name></member>
      <member refid="classamrex_1_1MFIter_1a61b9a1d5eda39765d1db9b9b936558c7" prot="public" virt="non-virtual"><scope>amrex::MFIter</scope><name>isValid</name></member>
      <member refid="classamrex_1_1MFIter_1a3658deeec368fbc6be8f9555ac37bab5" prot="public" virt="non-virtual"><scope>amrex::MFIter</scope><name>length</name></member>
      <member refid="classamrex_1_1MFIter_1a8a8cdb1fbae0dace9fcc0dc622c3409d" prot="protected" virt="non-virtual"><scope>amrex::MFIter</scope><name>local_index_map</name></member>
      <member refid="classamrex_1_1MFIter_1a72828c9a333be0dfff3e89e350fd0e11" prot="protected" virt="non-virtual"><scope>amrex::MFIter</scope><name>local_tile_index_map</name></member>
      <member refid="classamrex_1_1MFIter_1ab9afc4ebb6b729bcecdba6b22a317e88" prot="public" virt="non-virtual"><scope>amrex::MFIter</scope><name>LocalIndex</name></member>
      <member refid="classamrex_1_1MFIter_1a02c0b04b49bf0116bc21ee53e3593225" prot="public" virt="non-virtual"><scope>amrex::MFIter</scope><name>LocalTileIndex</name></member>
      <member refid="classamrex_1_1MFIter_1ae0aa4364654842ee9aaba3d573fb6b01" prot="protected" virt="non-virtual"><scope>amrex::MFIter</scope><name>m_fa</name></member>
      <member refid="classamrex_1_1MFIter_1aac055187a5b4d7200fc77827dc28a76c" prot="public" virt="non-virtual"><scope>amrex::MFIter</scope><name>MFIter</name></member>
      <member refid="classamrex_1_1MFIter_1ae7623281ac9e772db1fc5085a64aeeca" prot="public" virt="non-virtual"><scope>amrex::MFIter</scope><name>MFIter</name></member>
      <member refid="classamrex_1_1MFIter_1a1d9668de99635aa50096d0f091d8b9b0" prot="public" virt="non-virtual"><scope>amrex::MFIter</scope><name>MFIter</name></member>
      <member refid="classamrex_1_1MFIter_1a830e42aee76ec9fe8dae8bdd262e0b2d" prot="public" virt="non-virtual"><scope>amrex::MFIter</scope><name>MFIter</name></member>
      <member refid="classamrex_1_1MFIter_1ad7a19e95ba128febb94b27d2a9d97ef1" prot="public" virt="non-virtual"><scope>amrex::MFIter</scope><name>MFIter</name></member>
      <member refid="classamrex_1_1MFIter_1a970e636bf6a2d744068483806ddb7944" prot="public" virt="non-virtual"><scope>amrex::MFIter</scope><name>MFIter</name></member>
      <member refid="classamrex_1_1MFIter_1a2c0a016e1d5d69073f2cab81e7c6a095" prot="public" virt="non-virtual"><scope>amrex::MFIter</scope><name>MFIter</name></member>
      <member refid="classamrex_1_1MFIter_1aecfd3f3ef12e8703caad5794968ff06a" prot="public" virt="non-virtual"><scope>amrex::MFIter</scope><name>MFIter</name></member>
      <member refid="classamrex_1_1MFIter_1a66b92b6dbfbe1a498ba614df28817709" prot="public" virt="non-virtual"><scope>amrex::MFIter</scope><name>MFIter</name></member>
      <member refid="classamrex_1_1MFIter_1a4c3f600ec834db18aba9266638ac436e" prot="public" virt="non-virtual"><scope>amrex::MFIter</scope><name>MFIter</name></member>
      <member refid="classamrex_1_1MFIter_1a07296b12634219c4a15337435852a67b" prot="protected" virt="non-virtual"><scope>amrex::MFIter</scope><name>nextDynamicIndex</name></member>
      <member refid="classamrex_1_1MFIter_1a7a17b4a775ec84d2987cb480c38ed271" prot="public" virt="non-virtual"><scope>amrex::MFIter</scope><name>nodaltilebox</name></member>
      <member refid="classamrex_1_1MFIter_1af5cf94bce73f6da744dd94acc46cdf38af1e51da50b24860035a3665786fe9d14" prot="public" virt="non-virtual"><scope>amrex::MFIter</scope><name>NoTeamBarrier</name></member>
      <member refid="classamrex_1_1MFIter_1a967c3c48ccb4f316911d06fcaccb29fa" prot="protected" virt="non-virtual"><scope>amrex::MFIter</scope><name>num_local_tiles</name></member>
      <member refid="classamrex_1_1MFIter_1afbbd9093cd125af3cebbc8f8231bb142" prot="public" virt="non-virtual"><scope>amrex::MFIter</scope><name>numLocalTiles</name></member>
      <member refid="classamrex_1_1MFIter_1aec727f262b8f91587f66613da26fcbbb" prot="public" virt="non-virtual"><scope>amrex::MFIter</scope><name>operator++</name></member>
      <member refid="classamrex_1_1MFIter_1ab35d3c7298d61ba3c7d2844c402dd6fc" prot="public" virt="non-virtual"><scope>amrex::MFIter</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MFIter_1a61f66e0c8dd6b23c672213d1393f59da" prot="public" virt="non-virtual"><scope>amrex::MFIter</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MFIter_1a6387ff79e8fcfbfdcfbc7dd8d8e78621" prot="protected" virt="non-virtual"><scope>amrex::MFIter</scope><name>streams</name></member>
      <member refid="classamrex_1_1MFIter_1a8a7f84508a19797af16e5f3f6b13523c" prot="public" virt="non-virtual"><scope>amrex::MFIter</scope><name>theFabArrayBase</name></member>
      <member refid="classamrex_1_1MFIter_1a10b2f0f6900d23295fe25fd526153f43" prot="protected" virt="non-virtual"><scope>amrex::MFIter</scope><name>tile_array</name></member>
      <member refid="classamrex_1_1MFIter_1ae64d80e0b2d14e9209c426a0654e8a1f" prot="protected" virt="non-virtual"><scope>amrex::MFIter</scope><name>tile_size</name></member>
      <member refid="classamrex_1_1MFIter_1a4633394eac1ff3355fe082b815ed7413" prot="public" virt="non-virtual"><scope>amrex::MFIter</scope><name>tilebox</name></member>
      <member refid="classamrex_1_1MFIter_1aade25ad6c9b6b92a5dbe2e022fc77912" prot="public" virt="non-virtual"><scope>amrex::MFIter</scope><name>tilebox</name></member>
      <member refid="classamrex_1_1MFIter_1a3563f863ba15b874a9abd0dc338c0c72" prot="public" virt="non-virtual"><scope>amrex::MFIter</scope><name>tilebox</name></member>
      <member refid="classamrex_1_1MFIter_1a3d73098e8ef5205fc2bce58d5ed0f21b" prot="public" virt="non-virtual"><scope>amrex::MFIter</scope><name>tileIndex</name></member>
      <member refid="classamrex_1_1MFIter_1af5cf94bce73f6da744dd94acc46cdf38a1db74b1bbdeb756077e4bc33e25a2740" prot="public" virt="non-virtual"><scope>amrex::MFIter</scope><name>Tiling</name></member>
      <member refid="classamrex_1_1MFIter_1a1406cbb9152b357a39e877b78eb8ff0d" prot="protected" virt="non-virtual"><scope>amrex::MFIter</scope><name>typ</name></member>
      <member refid="classamrex_1_1MFIter_1a77ae102619461dabde09c7801390b841" prot="public" virt="non-virtual"><scope>amrex::MFIter</scope><name>validbox</name></member>
      <member refid="classamrex_1_1MFIter_1aac3223d243bff8f86cbd227b8f1af866" prot="public" virt="non-virtual"><scope>amrex::MFIter</scope><name>~MFIter</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
