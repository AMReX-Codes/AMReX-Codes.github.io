<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classamrex_1_1BaseFab" kind="class" language="C++" prot="public">
    <compoundname>amrex::BaseFab</compoundname>
    <basecompoundref refid="structamrex_1_1DataAllocator" prot="public" virt="non-virtual">amrex::DataAllocator</basecompoundref>
    <includes refid="AMReX__BaseFab_8H" local="no">AMReX_BaseFab.H</includes>
    <templateparamlist>
      <param>
        <type>class</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classamrex_1_1BaseFab_1aac8f37b7bba5334a86bf90b58fb062d8" prot="public" static="no">
        <type>T</type>
        <definition>typedef T amrex::BaseFab&lt; T &gt;::value_type</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="214" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="214" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classamrex_1_1BaseFab_1ad961346567674565f67ad873d4461f42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>friend class</type>
        <definition>friend class BaseFab</definition>
        <argsstring></argsstring>
        <name>BaseFab</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="212" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="212" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classamrex_1_1BaseFab_1a9236f2f88feff79c1d50b9b830750f91" prot="protected" static="no" mutable="no">
        <type>T *</type>
        <definition>T* amrex::BaseFab&lt; T &gt;::dptr</definition>
        <argsstring></argsstring>
        <name>dptr</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
<para>The data pointer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="1430" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="1430" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1BaseFab_1a8e95d8cfaadfe53080ae0092b53202fb" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>Box amrex::BaseFab&lt; T &gt;::domain</definition>
        <argsstring></argsstring>
        <name>domain</name>
        <briefdescription>
<para>My index space. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="1431" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="1431" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1BaseFab_1a99b1638f6702821a6b6e63cb860d938f" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int amrex::BaseFab&lt; T &gt;::nvar</definition>
        <argsstring></argsstring>
        <name>nvar</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Number components. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="1432" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="1432" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1BaseFab_1aa86e53b5d3afdae2606ab0be640bb022" prot="protected" static="no" mutable="no">
        <type>long</type>
        <definition>long amrex::BaseFab&lt; T &gt;::truesize</definition>
        <argsstring></argsstring>
        <name>truesize</name>
        <initializer>= 0L</initializer>
        <briefdescription>
<para>nvar*numpts that was allocated on heap. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="1433" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="1433" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1BaseFab_1acf3b50d012730dd3521fb2be517573b9" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::BaseFab&lt; T &gt;::ptr_owner</definition>
        <argsstring></argsstring>
        <name>ptr_owner</name>
        <initializer>= false</initializer>
        <briefdescription>
<para>Owner of T*? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="1434" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="1434" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1BaseFab_1a4e65169d29942cf3adde870d63a91834" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::BaseFab&lt; T &gt;::shared_memory</definition>
        <argsstring></argsstring>
        <name>shared_memory</name>
        <initializer>= false</initializer>
        <briefdescription>
<para>Is the memory allocated in shared memory? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="1435" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="1435" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a7e470d7e72db0c3169e83e34ce4f657b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::BaseFab&lt; T &gt;::BaseFab</definition>
        <argsstring>() noexcept</argsstring>
        <name>BaseFab</name>
        <briefdescription>
<para>Construct an empty <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>, which must be resized (see <ref refid="classamrex_1_1BaseFab_1a48099208f15f741c739316388f61737a" kindref="member">BaseFab::resize</ref>) before use. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="217" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="1895" bodyend="1896"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1ae5d9786facded55bfce06cc443594cab" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::BaseFab&lt; T &gt;::BaseFab</definition>
        <argsstring>(Arena *ar) noexcept</argsstring>
        <name>BaseFab</name>
        <param>
          <type><ref refid="classamrex_1_1Arena" kindref="compound">Arena</ref> *</type>
          <declname>ar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="219" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="1899" bodyend="1901"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a83d88e02757dac7e30b2ac7a13020b22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::BaseFab&lt; T &gt;::BaseFab</definition>
        <argsstring>(const Box &amp;bx, int n, Arena *ar)</argsstring>
        <name>BaseFab</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Arena" kindref="compound">Arena</ref> *</type>
          <declname>ar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="221" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="1904" bodyend="1908"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1aa42c6cb505873cad1b9c9de64a20c407" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::BaseFab&lt; T &gt;::BaseFab</definition>
        <argsstring>(const Box &amp;bx, int n=1, bool alloc=true, bool shared=false, Arena *ar=nullptr)</argsstring>
        <name>BaseFab</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>alloc</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>shared</declname>
          <defval>false</defval>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Arena" kindref="compound">Arena</ref> *</type>
          <declname>ar</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Make <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref> with desired domain (box) and number of components. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="224" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="1911" bodyend="1915"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a4b890373aa053ba5cd3aae0bf5483c1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::BaseFab&lt; T &gt;::BaseFab</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;rhs, MakeType make_type, int scomp, int ncomp)</argsstring>
        <name>BaseFab</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a0a36c65d0681a832330b2812f16786a6" kindref="member">MakeType</ref></type>
          <declname>make_type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>scomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="227" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="1918" bodyend="1935"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a8553c8f3915ded4cacfba0c490b98bc5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::BaseFab&lt; T &gt;::BaseFab</definition>
        <argsstring>(const Box &amp;bx, int ncomp, T *p)</argsstring>
        <name>BaseFab</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Create an NON-OWNING <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>. Thus <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref> is not responsible for memory management. And it&apos;s caller&apos;s responsibility that p points to a chunk of memory large enough. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="234" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="1938" bodyend="1941"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a53ab00ff398b5beb473bf85810189532" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::BaseFab&lt; T &gt;::BaseFab</definition>
        <argsstring>(const Box &amp;bx, int ncomp, T const *p)</argsstring>
        <name>BaseFab</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>T const *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="235" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="1944" bodyend="1947"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a2fe573448f0463cc140a1452a9510eb0" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref></type>
        <definition>amrex::BaseFab&lt; T &gt;::BaseFab</definition>
        <argsstring>(Array4&lt; T &gt; const &amp;a) noexcept</argsstring>
        <name>BaseFab</name>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="238" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="1950" bodyend="1955"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a27f1fbad6aff0f97e0291664ab11a4e4" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref></type>
        <definition>amrex::BaseFab&lt; T &gt;::BaseFab</definition>
        <argsstring>(Array4&lt; T &gt; const &amp;a, IndexType t) noexcept</argsstring>
        <name>BaseFab</name>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="241" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="1958" bodyend="1963"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a54d1d483f6f2d5e455eb9d8bb290d325" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref></type>
        <definition>amrex::BaseFab&lt; T &gt;::BaseFab</definition>
        <argsstring>(Array4&lt; T const  &gt; const &amp;a) noexcept</argsstring>
        <name>BaseFab</name>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const  &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="244" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="1966" bodyend="1971"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a17a67eac45989c89c30b7daa039a39b6" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref></type>
        <definition>amrex::BaseFab&lt; T &gt;::BaseFab</definition>
        <argsstring>(Array4&lt; T const  &gt; const &amp;a, IndexType t) noexcept</argsstring>
        <name>BaseFab</name>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const  &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="247" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="1974" bodyend="1979"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1acf7c1ac49465810a70b9ae1757263f30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref></type>
        <definition>amrex::BaseFab&lt; T &gt;::~BaseFab</definition>
        <argsstring>() noexcept</argsstring>
        <name>~BaseFab</name>
        <briefdescription>
<para>The destructor deletes the array memory. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="251" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="1982" bodyend="1987"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a6b0fa577ec8190137939f503041e7bf7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::BaseFab&lt; T &gt;::BaseFab</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;rhs)=delete</argsstring>
        <name>BaseFab</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="253" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a9a52c7475015824cfb60e6c67ecad522" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::operator=</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;rhs)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="254" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1ae3101a71fce4d1d50de1fca73ff4b0f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::operator=</definition>
        <argsstring>(BaseFab&lt; T &gt; &amp;&amp;rhs)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="255" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1aa2ce65c438db70645899b1d0c09f2455" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::BaseFab&lt; T &gt;::BaseFab</definition>
        <argsstring>(BaseFab&lt; T &gt; &amp;&amp;rhs) noexcept</argsstring>
        <name>BaseFab</name>
        <param>
          <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="257" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="1990" bodyend="1998"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a0204884d2ac46b2358771eed0f327a91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2a54c82ef76ecbbd4c2293e09bae01b54e" kindref="member">RunOn::Cpu</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE BaseFab&amp; amrex::BaseFab&lt; T &gt;::operator=</definition>
        <argsstring>(T) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type>T</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="261" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a48099208f15f741c739316388f61737a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BaseFab&lt; T &gt;::resize</definition>
        <argsstring>(const Box &amp;b, int N=1)</argsstring>
        <name>resize</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int</type>
          <declname>N</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>This function resizes a <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref> so it covers the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> b with N components. </para>        </briefdescription>
        <detaileddescription>
<para>The default action is that under resizing, the memory allocated for the <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref> only grows and never shrinks. This function is particularly useful when a <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref> is used as a temporary space which must be a different size whenever it is used. Resizing is typically faster than re-allocating a <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref> because memory allocation can often be avoided. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="277" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2011" bodyend="2033"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1ac5a36d719054f74a00bfc52e10ec9918" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
            <defval>T</defval>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;std::is_trivially_destructible&lt;U&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>Elixir</type>
        <definition>Elixir amrex::BaseFab&lt; T &gt;::elixir</definition>
        <argsstring>() noexcept</argsstring>
        <name>elixir</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="280" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2038" bodyend="2055"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1ae428e6a2645141dd817c288331575f26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BaseFab&lt; T &gt;::clear</definition>
        <argsstring>() noexcept</argsstring>
        <name>clear</name>
        <briefdescription>
<para>The function returns the <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref> to the invalid state. The memory is freed. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="286" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2059" bodyend="2096"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a4390286fe2327bd5f0561a75ee14499b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; T, <ref refid="structamrex_1_1DataDeleter" kindref="compound">DataDeleter</ref> &gt;</type>
        <definition>std::unique_ptr&lt; T, DataDeleter &gt; amrex::BaseFab&lt; T &gt;::release</definition>
        <argsstring>() noexcept</argsstring>
        <name>release</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="289" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2100" bodyend="2113"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a43f0ed693f7f5436621aaf9b27620c56" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> std::size_t</type>
        <definition>AMREX_GPU_HOST_DEVICE std::size_t amrex::BaseFab&lt; T &gt;::nBytes</definition>
        <argsstring>() const noexcept</argsstring>
        <name>nBytes</name>
        <briefdescription>
<para>Returns how many bytes used. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="293" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="293" bodyend="293"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a267006cc0717e9dfbcbd22afc1c89d8c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t amrex::BaseFab&lt; T &gt;::nBytesOwned</definition>
        <argsstring>() const noexcept</argsstring>
        <name>nBytesOwned</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="295" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="295" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1ac03d6fdd6bd658196becfefc5b3b93a8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> std::size_t</type>
        <definition>AMREX_GPU_HOST_DEVICE std::size_t amrex::BaseFab&lt; T &gt;::nBytes</definition>
        <argsstring>(const Box &amp;bx, int start_comp, int ncomps) const noexcept</argsstring>
        <name>nBytes</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>start_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomps</declname>
        </param>
        <briefdescription>
<para>Returns bytes used in the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> for those components. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="301" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="301" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a7406ec91dc010602121f1492f2d3a748" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> int</type>
        <definition>AMREX_GPU_HOST_DEVICE int amrex::BaseFab&lt; T &gt;::nComp</definition>
        <argsstring>() const noexcept</argsstring>
        <name>nComp</name>
        <briefdescription>
<para>Returns the number of components. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="306" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="306" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1af3ab7e9a7cb47a3eb41ba6a97ab2e798" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> const int *</type>
        <definition>AMREX_GPU_HOST_DEVICE const int* amrex::BaseFab&lt; T &gt;::nCompPtr</definition>
        <argsstring>() const noexcept</argsstring>
        <name>nCompPtr</name>
        <briefdescription>
<para>for calls to fortran. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="310" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="310" bodyend="312"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1aaf26c270066d314a52ccdbc5f61ea302" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> long</type>
        <definition>AMREX_GPU_HOST_DEVICE long amrex::BaseFab&lt; T &gt;::numPts</definition>
        <argsstring>() const noexcept</argsstring>
        <name>numPts</name>
        <briefdescription>
<para>Returns the number of points. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="316" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="316" bodyend="316"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a2433222c078c64fcb8c01cab64c20566" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> long</type>
        <definition>AMREX_GPU_HOST_DEVICE long amrex::BaseFab&lt; T &gt;::size</definition>
        <argsstring>() const noexcept</argsstring>
        <name>size</name>
        <briefdescription>
<para>Returns the total number of points of all components. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="320" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="320" bodyend="320"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a9359cb75c273aa3ab475d21ddc64f8f3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE const Box&amp; amrex::BaseFab&lt; T &gt;::box</definition>
        <argsstring>() const noexcept</argsstring>
        <name>box</name>
        <briefdescription>
<para>Returns the domain (box) where the array is defined. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="324" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="324" bodyend="324"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a56b3de1c8cf4f5747c1219f411783d99" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE IntVect amrex::BaseFab&lt; T &gt;::length</definition>
        <argsstring>() const noexcept</argsstring>
        <name>length</name>
        <briefdescription>
<para>Returns a pointer to an array of SPACEDIM integers giving the length of the domain in each direction. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="331" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="331" bodyend="331"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a787a8e1e40a6a13728e44ccbf5a5ec5a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE const IntVect&amp; amrex::BaseFab&lt; T &gt;::smallEnd</definition>
        <argsstring>() const noexcept</argsstring>
        <name>smallEnd</name>
        <briefdescription>
<para>Returns the lower corner of the domain See class <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> for analogue. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="338" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="338" bodyend="338"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a0d29e1227b0a3d2381b35cce869f9e5f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE const IntVect&amp; amrex::BaseFab&lt; T &gt;::bigEnd</definition>
        <argsstring>() const noexcept</argsstring>
        <name>bigEnd</name>
        <briefdescription>
<para>Returns the upper corner of the domain. See class <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> for analogue. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="342" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="342" bodyend="342"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1ad138d01fb5a57ad77306a3adbf8026cb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> const int *</type>
        <definition>AMREX_GPU_HOST_DEVICE const int* amrex::BaseFab&lt; T &gt;::loVect</definition>
        <argsstring>() const noexcept</argsstring>
        <name>loVect</name>
        <briefdescription>
<para>Returns the lower corner of the domain. </para>        </briefdescription>
        <detaileddescription>
<para>Instead of returning them in the form of INTVECTs, as in smallEnd and bigEnd, it returns the values as a pointer to an array of constant integers. This is useful when interfacing to Fortran subroutines. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="353" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="353" bodyend="353"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1ae6cabd78f18cfc8f0d9544ef683cd640" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> const int *</type>
        <definition>AMREX_GPU_HOST_DEVICE const int* amrex::BaseFab&lt; T &gt;::hiVect</definition>
        <argsstring>() const noexcept</argsstring>
        <name>hiVect</name>
        <briefdescription>
<para>Returns the upper corner of the domain. </para>        </briefdescription>
        <detaileddescription>
<para>Instead of returning them in the form of INTVECTs, as in smallEnd and bigEnd, it returns the values as a pointer to an array of constant integers. This is useful when interfacing to Fortran subroutines. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="364" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="364" bodyend="364"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a90d94d23b4c7ff81a86093956d38b332" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE bool amrex::BaseFab&lt; T &gt;::contains</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;fab) const noexcept</argsstring>
        <name>contains</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>fab</declname>
        </param>
        <briefdescription>
<para>Returns true if the domain of fab is totally contained within the domain of this <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="371" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="371" bodyend="374"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a21a8ed23adcc906fd3a3814f3e851f3c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE bool amrex::BaseFab&lt; T &gt;::contains</definition>
        <argsstring>(const Box &amp;bx) const noexcept</argsstring>
        <name>contains</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <briefdescription>
<para>Returns true if bx is totally contained within the domain of this <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="381" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="381" bodyend="381"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1ac1817d437a6ca523298e25202dd51705" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> T *</type>
        <definition>AMREX_GPU_HOST_DEVICE T* amrex::BaseFab&lt; T &gt;::dataPtr</definition>
        <argsstring>(int n=0) noexcept</argsstring>
        <name>dataPtr</name>
        <param>
          <type>int</type>
          <declname>n</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Returns a pointer to an object of type T that is the value of the Nth component associated with the cell at the low end of the domain. This is commonly used to get a pointer to data in the array which is then handed off to a Fortran subroutine. Remember that data is stored in Fortran array order, with the component index coming last. In other words, dataPtr returns a pointer to all the Nth components. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="393" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="393" bodyend="393"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a8b5f6bd26ae63d34e365dddfe1fa0991" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> const T *</type>
        <definition>AMREX_GPU_HOST_DEVICE const T* amrex::BaseFab&lt; T &gt;::dataPtr</definition>
        <argsstring>(int n=0) const noexcept</argsstring>
        <name>dataPtr</name>
        <param>
          <type>int</type>
          <declname>n</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Same as above except works on const FABs. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="397" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="397" bodyend="397"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a06a400fb85117c65737b171b07e478aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> T *</type>
        <definition>AMREX_FORCE_INLINE T * amrex::BaseFab&lt; T &gt;::dataPtr</definition>
        <argsstring>(const IntVect &amp;iv, int n=0) noexcept</argsstring>
        <name>dataPtr</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>iv</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="400" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="1641" bodyend="1649"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a156632a48b54792083eb05adec16155d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> const T *</type>
        <definition>AMREX_FORCE_INLINE const T * amrex::BaseFab&lt; T &gt;::dataPtr</definition>
        <argsstring>(const IntVect &amp;iv, int n=0) const noexcept</argsstring>
        <name>dataPtr</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>iv</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="403" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="1654" bodyend="1662"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1ab55c5cdbff39b6eb2074b4846c9efb2e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BaseFab&lt; T &gt;::setPtr</definition>
        <argsstring>(T *p, long sz) noexcept</argsstring>
        <name>setPtr</name>
        <param>
          <type>T *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>long</type>
          <declname>sz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="405" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="405" bodyend="405"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1aea7b9b15c8959be232fa8d0b14b2b507" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BaseFab&lt; T &gt;::prefetchToHost</definition>
        <argsstring>() const noexcept</argsstring>
        <name>prefetchToHost</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="407" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="1666" bodyend="1674"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1acc3fa2566c4bf2de3e6f0773e3b0601b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BaseFab&lt; T &gt;::prefetchToDevice</definition>
        <argsstring>() const noexcept</argsstring>
        <name>prefetchToDevice</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="408" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="1678" bodyend="1686"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1aa456605f5709d47be9474befe9d9e128" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const  &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Array4&lt;T const&gt; amrex::BaseFab&lt; T &gt;::array</definition>
        <argsstring>() const noexcept</argsstring>
        <name>array</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="412" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="412" bodyend="415"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a039630ee4496b6d7fd17020a78f4f899" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Array4&lt;T&gt; amrex::BaseFab&lt; T &gt;::array</definition>
        <argsstring>() noexcept</argsstring>
        <name>array</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="419" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="419" bodyend="422"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1aeba81b8b4aa7054af02788dc42c797c3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const  &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Array4&lt;T const&gt; amrex::BaseFab&lt; T &gt;::const_array</definition>
        <argsstring>() const noexcept</argsstring>
        <name>const_array</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="426" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="426" bodyend="429"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a0ad9ef3212349a9c484eebaddf3ef039" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1FabView" kindref="compound">FabView</ref>&lt; T const  &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE FabView&lt;T const&gt; amrex::BaseFab&lt; T &gt;::view</definition>
        <argsstring>(int n=0) const noexcept</argsstring>
        <name>view</name>
        <param>
          <type>int</type>
          <declname>n</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="433" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="433" bodyend="436"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a76735e86616929030b8383a78bddaaa4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1FabView" kindref="compound">FabView</ref>&lt; T &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE FabView&lt;T&gt; amrex::BaseFab&lt; T &gt;::view</definition>
        <argsstring>(int n=0) noexcept</argsstring>
        <name>view</name>
        <param>
          <type>int</type>
          <declname>n</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="440" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="440" bodyend="443"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a238a6ce02380dda577a844bd9250d109" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1FabView" kindref="compound">FabView</ref>&lt; T const  &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE FabView&lt;T const&gt; amrex::BaseFab&lt; T &gt;::view</definition>
        <argsstring>(const IntVect &amp;iv, int n=0) const noexcept</argsstring>
        <name>view</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>iv</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="447" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="447" bodyend="456"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a5dac991f61637eb0b5ad077ea132e84f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1FabView" kindref="compound">FabView</ref>&lt; T &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE FabView&lt;T&gt; amrex::BaseFab&lt; T &gt;::view</definition>
        <argsstring>(const IntVect &amp;iv, int n=0) noexcept</argsstring>
        <name>view</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>iv</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="460" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="460" bodyend="469"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1acfe35cfcc6bbf643ad67ce6cc092b40b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1FabView" kindref="compound">FabView</ref>&lt; T const  &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE FabView&lt;T const&gt; amrex::BaseFab&lt; T &gt;::view</definition>
        <argsstring>(const Box &amp;subbox, int n=0) const noexcept</argsstring>
        <name>view</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>subbox</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="473" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="473" bodyend="476"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a3483f3893ec878a491276fae68f5062e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1FabView" kindref="compound">FabView</ref>&lt; T &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE FabView&lt;T&gt; amrex::BaseFab&lt; T &gt;::view</definition>
        <argsstring>(const Box &amp;subbox, int n=0) noexcept</argsstring>
        <name>view</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>subbox</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="480" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="480" bodyend="483"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a639592b0b04292117d406f9dc764cf1d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1FabView" kindref="compound">FabView</ref>&lt; T const  &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE FabView&lt;T const&gt; amrex::BaseFab&lt; T &gt;::view</definition>
        <argsstring>(const GpuArray&lt; int, 3 &gt; &amp;slo, int n=0) const noexcept</argsstring>
        <name>view</name>
        <param>
          <type>const <ref refid="namespaceamrex_1a317082290117984ef29e149750e2c7a8" kindref="member">GpuArray</ref>&lt; int, 3 &gt; &amp;</type>
          <declname>slo</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="487" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="487" bodyend="512"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1ac307f7499cb98666f3e625dc6165d380" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1FabView" kindref="compound">FabView</ref>&lt; T &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE FabView&lt;T&gt; amrex::BaseFab&lt; T &gt;::view</definition>
        <argsstring>(const GpuArray&lt; int, 3 &gt; &amp;slo, int n=0) noexcept</argsstring>
        <name>view</name>
        <param>
          <type>const <ref refid="namespaceamrex_1a317082290117984ef29e149750e2c7a8" kindref="member">GpuArray</ref>&lt; int, 3 &gt; &amp;</type>
          <declname>slo</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="516" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="516" bodyend="541"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a4c6ac97444b2e697b2389738e9e64052" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1FabView" kindref="compound">FabView</ref>&lt; T const  &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE FabView&lt;T const&gt; amrex::BaseFab&lt; T &gt;::view</definition>
        <argsstring>(const Dim3 &amp;slo, int n=0) const noexcept</argsstring>
        <name>view</name>
        <param>
          <type>const <ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> &amp;</type>
          <declname>slo</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="545" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="545" bodyend="570"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a98f6f0536d0fafa36d94868dcfd83a37" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1FabView" kindref="compound">FabView</ref>&lt; T &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE FabView&lt;T&gt; amrex::BaseFab&lt; T &gt;::view</definition>
        <argsstring>(const Dim3 &amp;slo, int n=0) noexcept</argsstring>
        <name>view</name>
        <param>
          <type>const <ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> &amp;</type>
          <declname>slo</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="574" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="574" bodyend="599"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a8d6db68c9ef28ef91234e66512faceb8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE bool amrex::BaseFab&lt; T &gt;::isAllocated</definition>
        <argsstring>() const noexcept</argsstring>
        <name>isAllocated</name>
        <briefdescription>
<para>Returns true if the data for the FAB has been allocated. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="603" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="603" bodyend="603"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1ad76ae6115f341053b2eb94affc5e3eee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> T &amp;</type>
        <definition>AMREX_FORCE_INLINE T &amp; amrex::BaseFab&lt; T &gt;::operator()</definition>
        <argsstring>(const IntVect &amp;p, int N) noexcept</argsstring>
        <name>operator()</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>int</type>
          <declname>N</declname>
        </param>
        <briefdescription>
<para>Returns a reference to the Nth component value defined at position p in the domain. This operator may be inefficient if the C++ compiler is unable to optimize the C++ code. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="612" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="1691" bodyend="1699"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1ac1a408be29fc4bfc85971ac414c165ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> T &amp;</type>
        <definition>AMREX_FORCE_INLINE T &amp; amrex::BaseFab&lt; T &gt;::operator()</definition>
        <argsstring>(const IntVect &amp;p) noexcept</argsstring>
        <name>operator()</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Same as above, except returns component 0. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="616" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="1704" bodyend="1710"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a10931b31715309bfb452dc2c7fa662df" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> const T &amp;</type>
        <definition>AMREX_FORCE_INLINE const T &amp; amrex::BaseFab&lt; T &gt;::operator()</definition>
        <argsstring>(const IntVect &amp;p, int N) const noexcept</argsstring>
        <name>operator()</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>int</type>
          <declname>N</declname>
        </param>
        <briefdescription>
<para>Same as above except works on const FABs. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="620" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="1715" bodyend="1723"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a3427e5ed98498ff54da5f75d22923f5f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> const T &amp;</type>
        <definition>AMREX_FORCE_INLINE const T &amp; amrex::BaseFab&lt; T &gt;::operator()</definition>
        <argsstring>(const IntVect &amp;p) const noexcept</argsstring>
        <name>operator()</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Same as above, except returns component 0. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="624" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="1728" bodyend="1734"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1ac195a2bbff03a7f02e30788342473d18" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>void amrex::BaseFab&lt; T &gt;::getVal</definition>
        <argsstring>(T *data, const IntVect &amp;pos, int N, int numcomp) const noexcept</argsstring>
        <name>getVal</name>
        <param>
          <type>T *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>int</type>
          <declname>N</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
        </param>
        <briefdescription>
<para>This function puts numcomp component values, starting at component N, from position pos in the domain into array data, that must be allocated by the user. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="632" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="1738" bodyend="1751"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1af8f8e7b8b678678f74f235b0ebdeed9f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>void amrex::BaseFab&lt; T &gt;::getVal</definition>
        <argsstring>(T *data, const IntVect &amp;pos) const noexcept</argsstring>
        <name>getVal</name>
        <param>
          <type>T *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
<para>Same as above, except that starts at component 0 and copies all comps. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="635" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="1755" bodyend="1759"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1afd2b7401360a9fd6388965ac2e737297" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2a54c82ef76ecbbd4c2293e09bae01b54e" kindref="member">RunOn::Cpu</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::BaseFab&lt; T &gt;::setVal</definition>
        <argsstring>(T x, const Box &amp;bx, int nstart, int ncomp) noexcept</argsstring>
        <name>setVal</name>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nstart</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
<para>The setVal functions set sub-regions in the <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref> to a constant value. This most general form specifies the sub-box, the starting component number, and the number of components to be set. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="644" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a2b28ac36c5be730a481212babf906ec6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2a54c82ef76ecbbd4c2293e09bae01b54e" kindref="member">RunOn::Cpu</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::BaseFab&lt; T &gt;::setVal</definition>
        <argsstring>(T x, const Box &amp;bx, int N=0) noexcept</argsstring>
        <name>setVal</name>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>N</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Same as above, except the number of modified components is one. N is the component to be modified. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="648" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a7f7e196d1ae5afc917ccce8e77de0a3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2a54c82ef76ecbbd4c2293e09bae01b54e" kindref="member">RunOn::Cpu</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::BaseFab&lt; T &gt;::setVal</definition>
        <argsstring>(T x, int N) noexcept</argsstring>
        <name>setVal</name>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>N</declname>
        </param>
        <briefdescription>
<para>Same as above, except the sub-box defaults to the entire domain. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="652" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a8233f33a8898262b7ddb7f978925092c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2a54c82ef76ecbbd4c2293e09bae01b54e" kindref="member">RunOn::Cpu</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::BaseFab&lt; T &gt;::setValIfNot</definition>
        <argsstring>(T x, const Box &amp;bx, const BaseFab&lt; int &gt; &amp;mask, int nstart, int ncomp) noexcept</argsstring>
        <name>setValIfNot</name>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; int &gt; &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nstart</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="656" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1aede6afede165d8f14c5bedb035654c4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BaseFab&lt; T &gt;::setComplement</definition>
        <argsstring>(T x, const Box &amp;b, int ns, int num) noexcept</argsstring>
        <name>setComplement</name>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ns</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num</declname>
        </param>
        <briefdescription>
<para>This function is analogous to the fourth form of setVal above, except that instead of setting values on the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> b, values are set on the complement of b in the domain. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="663" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2215" bodyend="2218"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a70271c2e1b77e0ea5f158eea45761fc8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2a54c82ef76ecbbd4c2293e09bae01b54e" kindref="member">RunOn::Cpu</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::copy</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src, const Box &amp;srcbox, int srccomp, const Box &amp;destbox, int destcomp, int numcomp) noexcept</argsstring>
        <name>copy</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>srcbox</declname>
        </param>
        <param>
          <type>int</type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>destbox</declname>
        </param>
        <param>
          <type>int</type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
        </param>
        <briefdescription>
<para>The copy functions copy the contents of one <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref> into another. The destination <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref> is always the object which invokes the function. This, the most general form of copy, specifies the contents of any sub-box srcbox in <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref> src may be copied into a (possibly different) destbox in the destination <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>. Note that although the srcbox and the destbox may be disjoint, they must be the same size and shape. If the sizes differ, the copy is undefined and a runtime error results. This copy function is the only one of the copy functions to allow a copy between differing boxes. The user also specifies how many components are copied, starting at component srccomp in src and stored starting at component destcomp. The results are UNDEFINED if the src and dest are the same and the srcbox and destbox overlap. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="683" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1aaa7d3fd422bc8847909369663e621487" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2a54c82ef76ecbbd4c2293e09bae01b54e" kindref="member">RunOn::Cpu</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::copy</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src, int srccomp, int destcomp, int numcomp=1) noexcept</argsstring>
        <name>copy</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int</type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>As above, except the destination <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> and the source <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> are taken to be the entire domain of the destination. A copy of the intersecting region is performed. class. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="694" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a0f146a347e5fb740e14ea2661465af00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2a54c82ef76ecbbd4c2293e09bae01b54e" kindref="member">RunOn::Cpu</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::copy</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src, const Box &amp;destbox) noexcept</argsstring>
        <name>copy</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>destbox</declname>
        </param>
        <briefdescription>
<para>As above, except that the destination <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> is specified, but the source <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> is taken to the equal to the source <ref refid="classamrex_1_1Box" kindref="compound">Box</ref>, and all components of the destination <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref> are copied. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="704" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a024ca63e1873c1914781adc6b80ce7c6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2a54c82ef76ecbbd4c2293e09bae01b54e" kindref="member">RunOn::Cpu</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> std::size_t</type>
        <definition>AMREX_GPU_HOST_DEVICE std::size_t amrex::BaseFab&lt; T &gt;::copyToMem</definition>
        <argsstring>(const Box &amp;srcbox, int srccomp, int numcomp, void *dst) const noexcept</argsstring>
        <name>copyToMem</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>srcbox</declname>
        </param>
        <param>
          <type>int</type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>dst</declname>
        </param>
        <briefdescription>
<para>Copy from the srcbox of this Fab to raw memory and return the number of bytes copied. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="709" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a204d8f987b091f6c9c7b0f9df8516e26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2a54c82ef76ecbbd4c2293e09bae01b54e" kindref="member">RunOn::Cpu</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> std::size_t</type>
        <definition>AMREX_GPU_HOST_DEVICE std::size_t amrex::BaseFab&lt; T &gt;::copyFromMem</definition>
        <argsstring>(const Box &amp;dstbox, int dstcomp, int numcomp, const void *src) noexcept</argsstring>
        <name>copyFromMem</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>dstbox</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dstcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>Copy from raw memory to the dstbox of this Fab and return the number of bytes copied. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="715" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1afe02f231fb3dd4fc4c9e1c7e4e2964d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2a54c82ef76ecbbd4c2293e09bae01b54e" kindref="member">RunOn::Cpu</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> std::size_t</type>
        <definition>AMREX_GPU_HOST_DEVICE std::size_t amrex::BaseFab&lt; T &gt;::addFromMem</definition>
        <argsstring>(const Box &amp;dstbox, int dstcomp, int numcomp, const void *src) noexcept</argsstring>
        <name>addFromMem</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>dstbox</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dstcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>Add from raw memory to the dstbox of this Fab and return the number of bytes copied. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="721" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a92cb12158a09c20c51ef9347c11d31e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt; T &gt; &amp; amrex::BaseFab&lt; T &gt;::shift</definition>
        <argsstring>(const IntVect &amp;v) noexcept</argsstring>
        <name>shift</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Perform shifts upon the domain of the <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>. They are completely analogous to the corresponding <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> functions. There is no effect upon the array memory. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="730" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="1763" bodyend="1767"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1ad511764daeaedb9d3de8afc17ca7140c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt; T &gt; &amp; amrex::BaseFab&lt; T &gt;::shift</definition>
        <argsstring>(int idir, int n_cell) noexcept</argsstring>
        <name>shift</name>
        <param>
          <type>int</type>
          <declname>idir</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n_cell</declname>
        </param>
        <briefdescription>
<para>Perform shifts upon the domain of the <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>. They are completely analogous to the corresponding <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> functions. There is no effect upon the array memory. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="737" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="1771" bodyend="1775"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1af9080211623ae547d4a77076be42eeba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt; T &gt; &amp; amrex::BaseFab&lt; T &gt;::shiftHalf</definition>
        <argsstring>(int dir, int num_halfs) noexcept</argsstring>
        <name>shiftHalf</name>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_halfs</declname>
        </param>
        <briefdescription>
<para>Perform shifts upon the domain of the <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>. They are completely analogous to the corresponding <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> functions. There is no effect upon the array memory. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="744" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="1787" bodyend="1791"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a55589bcc8819d6c8a9291e79a05fbb81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt; T &gt; &amp; amrex::BaseFab&lt; T &gt;::shiftHalf</definition>
        <argsstring>(const IntVect &amp;num_halfs) noexcept</argsstring>
        <name>shiftHalf</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>num_halfs</declname>
        </param>
        <briefdescription>
<para>Perform shifts upon the domain of the <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>. They are completely analogous to the corresponding <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> functions. There is no effect upon the array memory. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="751" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="1779" bodyend="1783"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a691a8ebd9d366bf9649472d721ff0f7b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> Real</type>
        <definition>Real amrex::BaseFab&lt; T &gt;::norminfmask</definition>
        <argsstring>(const Box &amp;subbox, const BaseFab&lt; int &gt; &amp;mask, int scomp=0, int ncomp=1) const noexcept</argsstring>
        <name>norminfmask</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>subbox</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; int &gt; &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type>int</type>
          <declname>scomp</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="754" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2255" bodyend="2272"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1af72c4b534beb0143a7b0fdc7114b1a78" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> Real</type>
        <definition>Real amrex::BaseFab&lt; T &gt;::norm</definition>
        <argsstring>(int p, int scomp=0, int ncomp=1) const noexcept</argsstring>
        <name>norm</name>
        <param>
          <type>int</type>
          <declname>p</declname>
        </param>
        <param>
          <type>int</type>
          <declname>scomp</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Compute the Lp-norm of this FAB using components (scomp : scomp+ncomp-1). p &lt; 0 -&gt; ERROR p = 0 -&gt; infinity norm (max norm) p = 1 -&gt; sum of ABS(FAB) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="763" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2276" bodyend="2279"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1af13ffa626053c497af1a0ba1dd9fc7ff" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> Real</type>
        <definition>Real amrex::BaseFab&lt; T &gt;::norm</definition>
        <argsstring>(const Box &amp;subbox, int p, int scomp=0, int ncomp=1) const noexcept</argsstring>
        <name>norm</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>subbox</declname>
        </param>
        <param>
          <type>int</type>
          <declname>p</declname>
        </param>
        <param>
          <type>int</type>
          <declname>scomp</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Same as above except only on given subbox. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="767" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2283" bodyend="2311"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a60b67b06c0aa9e37d96d76cf759e759e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2a54c82ef76ecbbd4c2293e09bae01b54e" kindref="member">RunOn::Cpu</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::BaseFab&lt; T &gt;::abs</definition>
        <argsstring>() noexcept</argsstring>
        <name>abs</name>
        <briefdescription>
<para>Compute absolute value for all components of this FAB. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="771" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a1b090c18d7aaabf3faa50488b974b225" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2a54c82ef76ecbbd4c2293e09bae01b54e" kindref="member">RunOn::Cpu</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::BaseFab&lt; T &gt;::abs</definition>
        <argsstring>(int comp, int numcomp=1) noexcept</argsstring>
        <name>abs</name>
        <param>
          <type>int</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Same as above except only for components (comp: comp+numcomp-1) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="775" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1aa4a8fd8dfc84b70c08f5353efb9172b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2a54c82ef76ecbbd4c2293e09bae01b54e" kindref="member">RunOn::Cpu</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::BaseFab&lt; T &gt;::abs</definition>
        <argsstring>(const Box &amp;subbox, int comp=0, int numcomp=1) noexcept</argsstring>
        <name>abs</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>subbox</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Calculate <ref refid="classamrex_1_1BaseFab_1a60b67b06c0aa9e37d96d76cf759e759e" kindref="member">abs()</ref> on subbox for given component range. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="781" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1ad6a70c7c49967817b489033b4d7da696" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> T</type>
        <definition>T amrex::BaseFab&lt; T &gt;::min</definition>
        <argsstring>(int comp=0) const noexcept</argsstring>
        <name>min</name>
        <param>
          <type>int</type>
          <declname>comp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Minimum value of given component. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="786" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2315" bodyend="2318"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1adb99491368f94a317ec81970c9ad2eee" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> T</type>
        <definition>T amrex::BaseFab&lt; T &gt;::min</definition>
        <argsstring>(const Box &amp;subbox, int comp=0) const noexcept</argsstring>
        <name>min</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>subbox</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Minimum value of given component in given subbox. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="791" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2322" bodyend="2337"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a6efb5346cc42795e6cd01323117f3ac3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> T</type>
        <definition>T amrex::BaseFab&lt; T &gt;::max</definition>
        <argsstring>(int comp=0) const noexcept</argsstring>
        <name>max</name>
        <param>
          <type>int</type>
          <declname>comp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Maximum value of given component. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="796" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2341" bodyend="2344"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1ab361c41e09518099b2a6c9f9db1f82d1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> T</type>
        <definition>T amrex::BaseFab&lt; T &gt;::max</definition>
        <argsstring>(const Box &amp;subbox, int comp=0) const noexcept</argsstring>
        <name>max</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>subbox</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Maximum value of given component in given subbox. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="801" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2348" bodyend="2363"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a3cdfbec8bb23d2a40379cd4819adf713" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> T</type>
        <definition>T amrex::BaseFab&lt; T &gt;::maxabs</definition>
        <argsstring>(int comp=0) const noexcept</argsstring>
        <name>maxabs</name>
        <param>
          <type>int</type>
          <declname>comp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Maximum of the absolute value of given component. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="806" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2367" bodyend="2370"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1aec266e1d4d3acc521279fe612f9d5f3b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> T</type>
        <definition>T amrex::BaseFab&lt; T &gt;::maxabs</definition>
        <argsstring>(const Box &amp;subbox, int comp=0) const noexcept</argsstring>
        <name>maxabs</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>subbox</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Maximum of the absolute value of given component in given subbox. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="811" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2374" bodyend="2384"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1ac1f1baf311e46d9e868d76bf659dd492" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>IntVect amrex::BaseFab&lt; T &gt;::indexFromValue</definition>
        <argsstring>(Real value, const Box &amp;subbox, int comp=0) const noexcept</argsstring>
        <name>indexFromValue</name>
        <param>
          <type>Real</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>subbox</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>location of a cell containing the specified value given subbox. Returns <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> outside box if value not present. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="818" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2421" bodyend="2440"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1aa0d631fbfd6b81796222a5ab5fea24d3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>IntVect amrex::BaseFab&lt; T &gt;::minIndex</definition>
        <argsstring>(int comp=0) const noexcept</argsstring>
        <name>minIndex</name>
        <param>
          <type>int</type>
          <declname>comp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>location of minimum value in given component. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="824" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2389" bodyend="2392"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a890f10daf1e245f620d079b2cbfa9a31" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>IntVect amrex::BaseFab&lt; T &gt;::minIndex</definition>
        <argsstring>(const Box &amp;subbox, int comp=0) const noexcept</argsstring>
        <name>minIndex</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>subbox</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>location of minimum value in given component in given subbox. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="830" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2396" bodyend="2417"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a3e4a6b4a42c7a55598df8a7e2b13a567" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>void amrex::BaseFab&lt; T &gt;::minIndex</definition>
        <argsstring>(const Box &amp;subbox, Real &amp;min_val, IntVect &amp;min_idx, int comp=0) const noexcept</argsstring>
        <name>minIndex</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>subbox</declname>
        </param>
        <param>
          <type>Real &amp;</type>
          <declname>min_val</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>min_idx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>return mininum value and location to allow efficient looping over multiple boxes. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="836" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2444" bodyend="2454"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a8284115ab508ec6b6dc1a7bd023e3b89" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>IntVect amrex::BaseFab&lt; T &gt;::maxIndex</definition>
        <argsstring>(int comp=0) const noexcept</argsstring>
        <name>maxIndex</name>
        <param>
          <type>int</type>
          <declname>comp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>location of maximum value in given component. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="842" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2458" bodyend="2461"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1aae5d45037d346a7a7f51611396199e8e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>IntVect amrex::BaseFab&lt; T &gt;::maxIndex</definition>
        <argsstring>(const Box &amp;subbox, int comp=0) const noexcept</argsstring>
        <name>maxIndex</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>subbox</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>location of maximum value in given component in given subbox. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="848" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2465" bodyend="2485"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a2113a9b7b7bb69febe5899ccee7f37f2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>void amrex::BaseFab&lt; T &gt;::maxIndex</definition>
        <argsstring>(const Box &amp;subbox, Real &amp;max_value, IntVect &amp;max_index, int comp=0) const noexcept</argsstring>
        <name>maxIndex</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>subbox</declname>
        </param>
        <param>
          <type>Real &amp;</type>
          <declname>max_value</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>max_index</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>return maximum value and location to allow efficient looping over multiple boxes. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="854" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2489" bodyend="2499"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a554f518d10db9e4f7ba253396479b862" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::BaseFab&lt; T &gt;::maskLT</definition>
        <argsstring>(BaseFab&lt; int &gt; &amp;mask, T val, int comp=0) const noexcept</argsstring>
        <name>maskLT</name>
        <param>
          <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; int &gt; &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type>T</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Compute mask array with value of 1 in cells where <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref> has value less than val, 0 otherwise. mask is resized by this function. The number of cells marked with 1 returned. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="863" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2503" bodyend="2518"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1aee32dcf282a28ad947aa119859ec6d9e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::BaseFab&lt; T &gt;::maskLE</definition>
        <argsstring>(BaseFab&lt; int &gt; &amp;mask, T val, int comp=0) const noexcept</argsstring>
        <name>maskLE</name>
        <param>
          <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; int &gt; &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type>T</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Same as above except mark cells with value less than or equal to val. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="865" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2522" bodyend="2536"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a66695e0608fe850a6c9d44b0e022b6ba" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::BaseFab&lt; T &gt;::maskEQ</definition>
        <argsstring>(BaseFab&lt; int &gt; &amp;mask, T val, int comp=0) const noexcept</argsstring>
        <name>maskEQ</name>
        <param>
          <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; int &gt; &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type>T</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Same as above except mark cells with value equal to val. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="868" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2540" bodyend="2554"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a1993ea667fc5b620195bb42fe003cc1a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::BaseFab&lt; T &gt;::maskGT</definition>
        <argsstring>(BaseFab&lt; int &gt; &amp;mask, T val, int comp=0) const noexcept</argsstring>
        <name>maskGT</name>
        <param>
          <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; int &gt; &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type>T</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Same as above except mark cells with value greater than val. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="870" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2558" bodyend="2572"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1af4a8317171c537136ef82e4502e0d7d4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::BaseFab&lt; T &gt;::maskGE</definition>
        <argsstring>(BaseFab&lt; int &gt; &amp;mask, T val, int comp=0) const noexcept</argsstring>
        <name>maskGE</name>
        <param>
          <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; int &gt; &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type>T</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Same as above except mark cells with value greater than or equal to val. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="872" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2576" bodyend="2590"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1add7f10ec971a7d474f44c0d22fb4c750" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> T</type>
        <definition>T amrex::BaseFab&lt; T &gt;::sum</definition>
        <argsstring>(int comp, int numcomp=1) const noexcept</argsstring>
        <name>sum</name>
        <param>
          <type>int</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Returns sum of given component of FAB state vector. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="875" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2811" bodyend="2814"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1ae46a718f3837f9b75a52220b0e47cee1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> T</type>
        <definition>T amrex::BaseFab&lt; T &gt;::sum</definition>
        <argsstring>(const Box &amp;subbox, int comp, int numcomp=1) const noexcept</argsstring>
        <name>sum</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>subbox</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Compute sum of given component of FAB state vector in given subbox. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="878" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2818" bodyend="2821"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a4f33242576d8af9719d891d10e8db54d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2a54c82ef76ecbbd4c2293e09bae01b54e" kindref="member">RunOn::Cpu</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::invert</definition>
        <argsstring>(T v, const Box &amp;subbox, int comp=0, int numcomp=1) noexcept</argsstring>
        <name>invert</name>
        <param>
          <type>T</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>subbox</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Most general version, specify subbox and which components. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="882" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1ab2625d5ab7b2b5a382d879a5d2dd43db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2a54c82ef76ecbbd4c2293e09bae01b54e" kindref="member">RunOn::Cpu</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::invert</definition>
        <argsstring>(T v, int comp, int numcomp=1) noexcept</argsstring>
        <name>invert</name>
        <param>
          <type>T</type>
          <declname>v</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>As above except on entire domain. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="886" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1adbd6149086de9c72f89c0ccd59d9490e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2a54c82ef76ecbbd4c2293e09bae01b54e" kindref="member">RunOn::Cpu</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::negate</definition>
        <argsstring>(const Box &amp;subbox, int comp=0, int numcomp=1) noexcept</argsstring>
        <name>negate</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>subbox</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Negate <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>, most general. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="891" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a79cdb1bd32f6065f6743104596e634da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2a54c82ef76ecbbd4c2293e09bae01b54e" kindref="member">RunOn::Cpu</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::negate</definition>
        <argsstring>(int comp, int numcomp=1) noexcept</argsstring>
        <name>negate</name>
        <param>
          <type>int</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>As above, except on entire domain. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="895" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a0fd920c6e2e2b459957c626b4b2aa5de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2a54c82ef76ecbbd4c2293e09bae01b54e" kindref="member">RunOn::Cpu</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::plus</definition>
        <argsstring>(T r, const Box &amp;b, int comp=0, int numcomp=1) noexcept</argsstring>
        <name>plus</name>
        <param>
          <type>T</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Scalar addition (a[i] &lt;- a[i] + r), most general. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="900" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a54365197ac99b879d76240ed7add9bd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2a54c82ef76ecbbd4c2293e09bae01b54e" kindref="member">RunOn::Cpu</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::plus</definition>
        <argsstring>(T r, int comp, int numcomp=1) noexcept</argsstring>
        <name>plus</name>
        <param>
          <type>T</type>
          <declname>r</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>As above, except on entire domain. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="905" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1ad198f285be177537c12cd44363df7020" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2a54c82ef76ecbbd4c2293e09bae01b54e" kindref="member">RunOn::Cpu</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::plus</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src, int srccomp, int destcomp, int numcomp=1) noexcept</argsstring>
        <name>plus</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int</type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Add src components (srccomp:srccomp+numcomp-1) to this FABs components (destcomp:destcomp+numcomp-1) where the two FABs intersect. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="914" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1ac16db77aeb5ceacdfb630e2b82bb3c75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2a54c82ef76ecbbd4c2293e09bae01b54e" kindref="member">RunOn::Cpu</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::plus</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src, const Box &amp;subbox, int srccomp, int destcomp, int numcomp=1) noexcept</argsstring>
        <name>plus</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>subbox</declname>
        </param>
        <param>
          <type>int</type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Same as above except addition is restricted to intersection of subbox and src FAB. NOTE: subbox must be contained in this FAB. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="922" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a69fb8d483c7222233a809a3e2e22e7a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2a54c82ef76ecbbd4c2293e09bae01b54e" kindref="member">RunOn::Cpu</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::plus</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src, const Box &amp;srcbox, const Box &amp;destbox, int srccomp, int destcomp, int numcomp=1) noexcept</argsstring>
        <name>plus</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>srcbox</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>destbox</declname>
        </param>
        <param>
          <type>int</type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Add srcbox region of src FAB to destbox region of this FAB. The srcbox and destbox must be same size. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="929" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1ad0f8441171dac51883fd6137efc91e6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2a54c82ef76ecbbd4c2293e09bae01b54e" kindref="member">RunOn::Cpu</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::atomicAdd</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src) noexcept</argsstring>
        <name>atomicAdd</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>Atomic FAB addition (a[i] &lt;- a[i] + b[i]). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="935" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a8f354041007b5c0c411d2cf70f518ef8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2a54c82ef76ecbbd4c2293e09bae01b54e" kindref="member">RunOn::Cpu</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::atomicAdd</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src, int srccomp, int destcomp, int numcomp=1) noexcept</argsstring>
        <name>atomicAdd</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int</type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Atomically add src components (srccomp:srccomp+numcomp-1) to this FABs components (destcomp:destcomp+numcomp-1) where the two FABs intersect. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="944" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1aea181b42d90299926a976a41954841fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2a54c82ef76ecbbd4c2293e09bae01b54e" kindref="member">RunOn::Cpu</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::atomicAdd</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src, const Box &amp;subbox, int srccomp, int destcomp, int numcomp=1) noexcept</argsstring>
        <name>atomicAdd</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>subbox</declname>
        </param>
        <param>
          <type>int</type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Same as above except addition is restricted to intersection of subbox and src FAB. NOTE: subbox must be contained in this FAB. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="952" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a7574b5d3fb35e12d76033f79517c76c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2a54c82ef76ecbbd4c2293e09bae01b54e" kindref="member">RunOn::Cpu</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::atomicAdd</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src, const Box &amp;srcbox, const Box &amp;destbox, int srccomp, int destcomp, int numcomp=1) noexcept</argsstring>
        <name>atomicAdd</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>srcbox</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>destbox</declname>
        </param>
        <param>
          <type>int</type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Atomically add srcbox region of src FAB to destbox region of this FAB. The srcbox and destbox must be same size. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="960" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1aff460f2e28a2f6a1db9dd8035a13869c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2a54c82ef76ecbbd4c2293e09bae01b54e" kindref="member">RunOn::Cpu</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::saxpy</definition>
        <argsstring>(T a, const BaseFab&lt; T &gt; &amp;x, const Box &amp;srcbox, const Box &amp;destbox, int srccomp, int destcomp, int numcomp=1) noexcept</argsstring>
        <name>saxpy</name>
        <param>
          <type>T</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>srcbox</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>destbox</declname>
        </param>
        <param>
          <type>int</type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>FAB SAXPY (y[i] &lt;- y[i] + a * x[i]), in place. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="966" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a8097fc848af279eb5460a22a4c52c690" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2a54c82ef76ecbbd4c2293e09bae01b54e" kindref="member">RunOn::Cpu</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::saxpy</definition>
        <argsstring>(T a, const BaseFab&lt; T &gt; &amp;x) noexcept</argsstring>
        <name>saxpy</name>
        <param>
          <type>T</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>FAB SAXPY (y[i] &lt;- y[i] + a * x[i]), in place. All components. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="971" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a23defcb11ee91b350b1edf9850aba0ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2a54c82ef76ecbbd4c2293e09bae01b54e" kindref="member">RunOn::Cpu</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::xpay</definition>
        <argsstring>(T a, const BaseFab&lt; T &gt; &amp;x, const Box &amp;srcbox, const Box &amp;destbox, int srccomp, int destcomp, int numcomp=1) noexcept</argsstring>
        <name>xpay</name>
        <param>
          <type>T</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>srcbox</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>destbox</declname>
        </param>
        <param>
          <type>int</type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>FAB XPAY (y[i] &lt;- x[i] + a * y[i]) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="976" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a12a46f061e932da4f9a7be453064eec5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2a54c82ef76ecbbd4c2293e09bae01b54e" kindref="member">RunOn::Cpu</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::addproduct</definition>
        <argsstring>(const Box &amp;destbox, int destcomp, int numcomp, const BaseFab&lt; T &gt; &amp;src1, int comp1, const BaseFab&lt; T &gt; &amp;src2, int comp2) noexcept</argsstring>
        <name>addproduct</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>destbox</declname>
        </param>
        <param>
          <type>int</type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp1</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src2</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp2</declname>
        </param>
        <briefdescription>
<para>y[i] &lt;- y[i] + x1[i] * x2[i]) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="982" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a7d42264ffc7e207793eb71b1c5ee9eca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2a54c82ef76ecbbd4c2293e09bae01b54e" kindref="member">RunOn::Cpu</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::minus</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src, int srccomp, int destcomp, int numcomp=1) noexcept</argsstring>
        <name>minus</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int</type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Subtract src components (srccomp:srccomp+numcomp-1) to this FABs components (destcomp:destcomp+numcomp-1) where the two FABs intersect. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="993" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a60bbbe646ad33d21dc95bfb22f74103c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2a54c82ef76ecbbd4c2293e09bae01b54e" kindref="member">RunOn::Cpu</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::minus</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src, const Box &amp;subbox, int srccomp, int destcomp, int numcomp=1) noexcept</argsstring>
        <name>minus</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>subbox</declname>
        </param>
        <param>
          <type>int</type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Same as above except subtraction is restricted to intersection of subbox and src FAB. NOTE: subbox must be contained in this FAB. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="1001" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1aa62489aa7754be3b090066f46bdaed5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2a54c82ef76ecbbd4c2293e09bae01b54e" kindref="member">RunOn::Cpu</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::minus</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src, const Box &amp;srcbox, const Box &amp;destbox, int srccomp, int destcomp, int numcomp=1) noexcept</argsstring>
        <name>minus</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>srcbox</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>destbox</declname>
        </param>
        <param>
          <type>int</type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Subtract srcbox region of src FAB from destbox region of this FAB. srcbox and destbox must be same size. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="1009" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1af23b9f25700280d14eff911416af3848" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2a54c82ef76ecbbd4c2293e09bae01b54e" kindref="member">RunOn::Cpu</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::mult</definition>
        <argsstring>(T r, int comp, int numcomp=1) noexcept</argsstring>
        <name>mult</name>
        <param>
          <type>T</type>
          <declname>r</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Scalar multiplication, except control which components are multiplied. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="1015" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a6eca2549459c33fb59e0ab5c4a642a2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2a54c82ef76ecbbd4c2293e09bae01b54e" kindref="member">RunOn::Cpu</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::mult</definition>
        <argsstring>(T r, const Box &amp;b, int comp=0, int numcomp=1) noexcept</argsstring>
        <name>mult</name>
        <param>
          <type>T</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>As above, except specify sub-box. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="1021" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a92538d5f5d8c08971e67dbbcabe28260" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2a54c82ef76ecbbd4c2293e09bae01b54e" kindref="member">RunOn::Cpu</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::mult</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src, int srccomp, int destcomp, int numcomp=1) noexcept</argsstring>
        <name>mult</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int</type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Multiply src components (srccomp:srccomp+numcomp-1) with this FABs components (destcomp:destcomp+numcomp-1) where the two FABs intersect. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="1030" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a8047a78e7b6408ba29d8f7f06ff1a3d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2a54c82ef76ecbbd4c2293e09bae01b54e" kindref="member">RunOn::Cpu</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::mult</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src, const Box &amp;subbox, int srccomp, int destcomp, int numcomp=1) noexcept</argsstring>
        <name>mult</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>subbox</declname>
        </param>
        <param>
          <type>int</type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Same as above except multiplication is restricted to intersection of subbox and src FAB. NOTE: subbox must be contained in this FAB. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="1039" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1ab7870ca660aae727b83bf1e945e1bb43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2a54c82ef76ecbbd4c2293e09bae01b54e" kindref="member">RunOn::Cpu</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::mult</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src, const Box &amp;srcbox, const Box &amp;destbox, int srccomp, int destcomp, int numcomp=1) noexcept</argsstring>
        <name>mult</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>srcbox</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>destbox</declname>
        </param>
        <param>
          <type>int</type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Multiply srcbox region of src FAB with destbox region of this FAB. The srcbox and destbox must be same size. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="1048" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a1799d563bf1422378100e5e524597d46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2a54c82ef76ecbbd4c2293e09bae01b54e" kindref="member">RunOn::Cpu</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::divide</definition>
        <argsstring>(T r, int comp, int numcomp=1) noexcept</argsstring>
        <name>divide</name>
        <param>
          <type>T</type>
          <declname>r</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>As above except specify which components. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="1054" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1aabc4a1d1ffe7989959aa7e7f866db598" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2a54c82ef76ecbbd4c2293e09bae01b54e" kindref="member">RunOn::Cpu</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::divide</definition>
        <argsstring>(T r, const Box &amp;b, int comp=0, int numcomp=1) noexcept</argsstring>
        <name>divide</name>
        <param>
          <type>T</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>As above except specify sub-box. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="1059" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1aa845104c0166893afa4ddd5fc24f7613" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2a54c82ef76ecbbd4c2293e09bae01b54e" kindref="member">RunOn::Cpu</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::divide</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src, int srccomp, int destcomp, int numcomp=1) noexcept</argsstring>
        <name>divide</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int</type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>This FAB is numerator, src FAB is denominator divide src components (srccomp:srccomp+numcomp-1) into this FABs components (destcomp:destcomp+numcomp-1) where the two FABs intersect. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="1069" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a42098e3720513206e40cb04a7c78ba10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2a54c82ef76ecbbd4c2293e09bae01b54e" kindref="member">RunOn::Cpu</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::divide</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src, const Box &amp;subbox, int srccomp, int destcomp, int numcomp=1) noexcept</argsstring>
        <name>divide</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>subbox</declname>
        </param>
        <param>
          <type>int</type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Same as above except division is restricted to intersection of subbox and src FAB. NOTE: subbox must be contained in this FAB. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="1077" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1ab5ca6ad817518e495e582a769f9c2fd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2a54c82ef76ecbbd4c2293e09bae01b54e" kindref="member">RunOn::Cpu</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::divide</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src, const Box &amp;srcbox, const Box &amp;destbox, int srccomp, int destcomp, int numcomp=1) noexcept</argsstring>
        <name>divide</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>srcbox</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>destbox</declname>
        </param>
        <param>
          <type>int</type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>destbox region of this FAB is numerator. srcbox regions of src FAB is denominator. srcbox and destbox must be same size. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="1085" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a533615c28e9b0903a72dde72299db946" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2a54c82ef76ecbbd4c2293e09bae01b54e" kindref="member">RunOn::Cpu</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::protected_divide</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src) noexcept</argsstring>
        <name>protected_divide</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>Divide wherever &quot;src&quot; is &quot;true&quot; or &quot;non-zero&quot;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="1092" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1ad7614319bdf4f11eb72fb625bf7bd22a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2a54c82ef76ecbbd4c2293e09bae01b54e" kindref="member">RunOn::Cpu</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::protected_divide</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src, int srccomp, int destcomp, int numcomp=1) noexcept</argsstring>
        <name>protected_divide</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int</type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Divide wherever &quot;src&quot; is &quot;true&quot; or &quot;non-zero&quot;. This FAB is numerator, src FAB is denominator divide src components (srccomp:srccomp+numcomp-1) into this FABs components (destcomp:destcomp+numcomp-1) where the two FABs intersect. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="1103" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a92093fa670aa87dca0013da6faab7ce9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2a54c82ef76ecbbd4c2293e09bae01b54e" kindref="member">RunOn::Cpu</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::protected_divide</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src, const Box &amp;subbox, int srccomp, int destcomp, int numcomp=1) noexcept</argsstring>
        <name>protected_divide</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>subbox</declname>
        </param>
        <param>
          <type>int</type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Divide wherever &quot;src&quot; is &quot;true&quot; or &quot;non-zero&quot;. Same as above except division is restricted to intersection of subbox and src FAB. NOTE: subbox must be contained in this FAB. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="1113" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a2c53a69db15c61fba03210237b48cd42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2a54c82ef76ecbbd4c2293e09bae01b54e" kindref="member">RunOn::Cpu</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::protected_divide</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src, const Box &amp;srcbox, const Box &amp;destbox, int srccomp, int destcomp, int numcomp=1) noexcept</argsstring>
        <name>protected_divide</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>srcbox</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>destbox</declname>
        </param>
        <param>
          <type>int</type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Divide wherever &quot;src&quot; is &quot;true&quot; or &quot;non-zero&quot;. destbox region of this FAB is numerator. srcbox regions of src FAB is denominator. srcbox and destbox must be same size. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="1123" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a03077e916e82559193f9913bbd6ec52c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2a54c82ef76ecbbd4c2293e09bae01b54e" kindref="member">RunOn::Cpu</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::linInterp</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;f1, const Box &amp;b1, int comp1, const BaseFab&lt; T &gt; &amp;f2, const Box &amp;b2, int comp2, Real t1, Real t2, Real t, const Box &amp;b, int comp, int numcomp=1) noexcept</argsstring>
        <name>linInterp</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp1</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b2</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp2</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>t1</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>t2</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>t</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Linear interpolation / extrapolation. Result is (t2-t)/(t2-t1)*f1 + (t-t1)/(t2-t1)*f2 Data is taken from b1 region of f1, b2 region of f2 and stored in b region of this FAB. Boxes b, b1 and b2 must be the same size. Data is taken from component comp1 of f1, comp2 of f2, and stored in component comp of this FAB. This FAB is returned as a reference for chaining. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="1138" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1aa81753624ac94b117b4c35466c76c1d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2a54c82ef76ecbbd4c2293e09bae01b54e" kindref="member">RunOn::Cpu</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::linInterp</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;f1, int comp1, const BaseFab&lt; T &gt; &amp;f2, int comp2, Real t1, Real t2, Real t, const Box &amp;b, int comp, int numcomp=1) noexcept</argsstring>
        <name>linInterp</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp1</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp2</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>t1</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>t2</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>t</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Version of <ref refid="classamrex_1_1BaseFab_1a03077e916e82559193f9913bbd6ec52c" kindref="member">linInterp()</ref> in which b, b1, &amp; b2 are the same. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="1146" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a4d474bdc21db63d848b989cfdd3d1d22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::linComb</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;f1, const Box &amp;b1, int comp1, const BaseFab&lt; T &gt; &amp;f2, const Box &amp;b2, int comp2, Real alpha, Real beta, const Box &amp;b, int comp, int numcomp=1) noexcept</argsstring>
        <name>linComb</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp1</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b2</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp2</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Linear combination. Result is alpha*f1 + beta*f2. Data is taken from b1 region of f1, b2 region of f2 and stored in b region of this FAB. Boxes b, b1 and b2 must be the same size. Data is taken from component comp1 of f1, comp2 of f2, and stored in component comp of this FAB. This FAB is returned as a reference for chaining. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="1162" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1adb03ed2032296735e2b188be56558fbf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> T</type>
        <definition>T amrex::BaseFab&lt; T &gt;::dot</definition>
        <argsstring>(const Box &amp;xbx, int xcomp, const BaseFab&lt; T &gt; &amp;y, const Box &amp;ybx, int ycomp, int numcomp=1) const noexcept</argsstring>
        <name>dot</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>xbx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>xcomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>ybx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ycomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Dot product of x (i.e.,this) and y. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="1169" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2749" bodyend="2775"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a6b8d97aba07d9806cf1e711ca44f283a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> T</type>
        <definition>T amrex::BaseFab&lt; T &gt;::dotmask</definition>
        <argsstring>(const BaseFab&lt; int &gt; &amp;mask, const Box &amp;xbx, int xcomp, const BaseFab&lt; T &gt; &amp;y, const Box &amp;ybx, int ycomp, int numcomp) const noexcept</argsstring>
        <name>dotmask</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; int &gt; &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>xbx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>xcomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>ybx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ycomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="1173" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2779" bodyend="2807"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a03513ca096ccb98cbfc04eed4ea4bf1f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::BaseFab&lt; T &gt;::SetBoxType</definition>
        <argsstring>(const IndexType &amp;typ) noexcept</argsstring>
        <name>SetBoxType</name>
        <param>
          <type>const <ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref> &amp;</type>
          <declname>typ</declname>
        </param>
        <briefdescription>
<para>Change the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> type without change the length. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="1179" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="1179" bodyend="1179"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1aa7ffb7d3ed11be2617488acee59d5d8b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::BaseFab&lt; T &gt;::ForEach</definition>
        <argsstring>(const Box &amp;b, int c, int nc, F f) noexcept</argsstring>
        <name>ForEach</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int</type>
          <declname>c</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nc</declname>
        </param>
        <param>
          <type>F</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>&lt; AMREX_GPU_HOST_DEVICE </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="1182" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="1182" bodyend="1184"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1af056c3d5b73627c4ea8e0e30244aedce" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::BaseFab&lt; T &gt;::ForEach</definition>
        <argsstring>(const Box &amp;b, int c, int nc, F f) const noexcept</argsstring>
        <name>ForEach</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int</type>
          <declname>c</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nc</declname>
        </param>
        <param>
          <type>F</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>&lt; AMREX_GPU_HOST_DEVICE </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="1186" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="1186" bodyend="1188"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a01e76f051c01f45b50e48ef80d39d907" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::BaseFab&lt; T &gt;::ForEachIV</definition>
        <argsstring>(const Box &amp;b, int c, int nc, F f) noexcept</argsstring>
        <name>ForEachIV</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int</type>
          <declname>c</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nc</declname>
        </param>
        <param>
          <type>F</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>&lt; AMREX_GPU_HOST_DEVICE </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="1190" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="1190" bodyend="1192"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a3cb3ce0e34a9e6d0e6826f863f5c55da" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::BaseFab&lt; T &gt;::ForEachIV</definition>
        <argsstring>(const Box &amp;b, int c, int nc, F f) const noexcept</argsstring>
        <name>ForEachIV</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int</type>
          <declname>c</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nc</declname>
        </param>
        <param>
          <type>F</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>&lt; AMREX_GPU_HOST_DEVICE </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="1194" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="1194" bodyend="1196"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a2b537482c611229a7e2b62f1bbf1d4c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::BaseFab&lt; T &gt;::ForEach</definition>
        <argsstring>(const Box &amp;dstbox, int dstcomp, int numcomp, const BaseFab&lt; T &gt; &amp;src, int srccomp, F f) noexcept</argsstring>
        <name>ForEach</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>dstbox</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dstcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int</type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type>F</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>&lt; AMREX_GPU_HOST_DEVICE </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="1198" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="1539" bodyend="1563"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a11ed06775cfb2c8108b56d2158dc796b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::BaseFab&lt; T &gt;::ForEach</definition>
        <argsstring>(const Box &amp;dstbox, int dstcomp, int numcomp, const BaseFab&lt; T &gt; &amp;src, const Box &amp;srcbox, int srccomp, F f) noexcept</argsstring>
        <name>ForEach</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>dstbox</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dstcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>srcbox</declname>
        </param>
        <param>
          <type>int</type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type>F</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>&lt; AMREX_GPU_HOST_DEVICE </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="1202" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="1505" bodyend="1534"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a91513822e781492a9800ae2064f4c6ee" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename P</type>
          </param>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>P</type>
        <definition>P amrex::BaseFab&lt; T &gt;::Accumulate</definition>
        <argsstring>(const Box &amp;b, int c, int nc, P init, F f) const noexcept</argsstring>
        <name>Accumulate</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int</type>
          <declname>c</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nc</declname>
        </param>
        <param>
          <type>P</type>
          <declname>init</declname>
        </param>
        <param>
          <type>F</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>&lt; AMREX_GPU_HOST_DEVICE </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="1206" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="1568" bodyend="1586"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1aca58ac4ae57851e2883c84963ee6c331" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::BaseFab&lt; T &gt;::Transform</definition>
        <argsstring>(T *dst, const Box &amp;b, int c, int nc, F f) const noexcept</argsstring>
        <name>Transform</name>
        <param>
          <type>T *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int</type>
          <declname>c</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nc</declname>
        </param>
        <param>
          <type>F</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>&lt; AMREX_GPU_HOST_DEVICE </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="1209" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="1591" bodyend="1611"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a105ef076b58438b9238767a574847646" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::BaseFab&lt; T &gt;::Transform</definition>
        <argsstring>(const Box &amp;b, int c, int nc, T const *src, F f) noexcept</argsstring>
        <name>Transform</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int</type>
          <declname>c</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nc</declname>
        </param>
        <param>
          <type>T const *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>F</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>&lt; AMREX_GPU_HOST_DEVICE </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="1212" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="1616" bodyend="1636"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a2f724e6d261f856a5d6b352032519467" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2a54c82ef76ecbbd4c2293e09bae01b54e" kindref="member">RunOn::Cpu</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::BaseFab&lt; T &gt;::setVal</definition>
        <argsstring>(T val) noexcept</argsstring>
        <name>setVal</name>
        <param>
          <type>T</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set value on the whole domain and all components. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="1221" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a474319b91fb346c9e930d69a8d4703f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2a54c82ef76ecbbd4c2293e09bae01b54e" kindref="member">RunOn::Cpu</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::BaseFab&lt; T &gt;::setVal</definition>
        <argsstring>(T val, Box const &amp;bx, DestComp dcomp, NumComps ncomp) noexcept</argsstring>
        <name>setVal</name>
        <param>
          <type>T</type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1DestComp" kindref="compound">DestComp</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1NumComps" kindref="compound">NumComps</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
<para>Do nothing if bx is empty. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="1226" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a0867fcf62ebed52d585448bdb99b6468" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2a54c82ef76ecbbd4c2293e09bae01b54e" kindref="member">RunOn::Cpu</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::BaseFab&lt; T &gt;::setValIf</definition>
        <argsstring>(T val, const BaseFab&lt; int &gt; &amp;mask) noexcept</argsstring>
        <name>setValIf</name>
        <param>
          <type>T</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; int &gt; &amp;</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="1230" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a060b0e3485b33a49ce5325195a21e8b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2a54c82ef76ecbbd4c2293e09bae01b54e" kindref="member">RunOn::Cpu</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::BaseFab&lt; T &gt;::setValIf</definition>
        <argsstring>(T val, Box const &amp;bx, const BaseFab&lt; int &gt; &amp;mask, DestComp dcomp, NumComps ncomp) noexcept</argsstring>
        <name>setValIf</name>
        <param>
          <type>T</type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; int &gt; &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1DestComp" kindref="compound">DestComp</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1NumComps" kindref="compound">NumComps</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
<para>Do nothing if bx is empty. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="1235" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1afb8a2c9a5f4281488bb4dd47abf64d46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2a54c82ef76ecbbd4c2293e09bae01b54e" kindref="member">RunOn::Cpu</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::BaseFab&lt; T &gt;::setValIfNot</definition>
        <argsstring>(T val, const BaseFab&lt; int &gt; &amp;mask) noexcept</argsstring>
        <name>setValIfNot</name>
        <param>
          <type>T</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; int &gt; &amp;</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="1239" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1ac1b454d3dc799dbf8aacb3c48ed0de15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2a54c82ef76ecbbd4c2293e09bae01b54e" kindref="member">RunOn::Cpu</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::BaseFab&lt; T &gt;::setValIfNot</definition>
        <argsstring>(T val, Box const &amp;bx, const BaseFab&lt; int &gt; &amp;mask, DestComp dcomp, NumComps ncomp) noexcept</argsstring>
        <name>setValIfNot</name>
        <param>
          <type>T</type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; int &gt; &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1DestComp" kindref="compound">DestComp</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1NumComps" kindref="compound">NumComps</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
<para>Do nothing if bx is empty. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="1244" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a141ba4c0b87cbaf780261ba65ac4970a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BaseFab&lt; T &gt;::setComplement</definition>
        <argsstring>(T val, Box const &amp;bx, DestComp dcomp, NumComps ncomp) noexcept</argsstring>
        <name>setComplement</name>
        <param>
          <type>T</type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1DestComp" kindref="compound">DestComp</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1NumComps" kindref="compound">NumComps</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
<para>setVal on the complement of bx in the fab&apos;s domain </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="1247" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3354" bodyend="3360"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a589e71fc8086f2f02e1455d751b3ef0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2a54c82ef76ecbbd4c2293e09bae01b54e" kindref="member">RunOn::Cpu</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::copy</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src) noexcept</argsstring>
        <name>copy</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>copy is performed on the intersection of dest and src fabs. All components of dest fab are copied. src fab must have enough components (more is OK). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="1256" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1adffc3f632ba1775e84841a65a47305c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2a54c82ef76ecbbd4c2293e09bae01b54e" kindref="member">RunOn::Cpu</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::copy</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src, Box bx, SrcComp scomp, DestComp dcomp, NumComps ncomp) noexcept</argsstring>
        <name>copy</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1SrcComp" kindref="compound">SrcComp</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1DestComp" kindref="compound">DestComp</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1NumComps" kindref="compound">NumComps</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
<para>Do nothing if bx does not intersect with src fab. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="1261" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a09491463850121df06ad37523bb5e571" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2a54c82ef76ecbbd4c2293e09bae01b54e" kindref="member">RunOn::Cpu</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::plus</definition>
        <argsstring>(T val) noexcept</argsstring>
        <name>plus</name>
        <param>
          <type>T</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Scalar addition on the whole domain and all components. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="1266" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a563dd4bcb0336fba813ec2faa6540938" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2a54c82ef76ecbbd4c2293e09bae01b54e" kindref="member">RunOn::Cpu</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::operator+=</definition>
        <argsstring>(T val) noexcept</argsstring>
        <name>operator+=</name>
        <param>
          <type>T</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="1270" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a1de73d120087c4b83136568b7470b13d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2a54c82ef76ecbbd4c2293e09bae01b54e" kindref="member">RunOn::Cpu</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::plus</definition>
        <argsstring>(T val, Box const &amp;bx, DestComp dcomp, NumComps ncomp) noexcept</argsstring>
        <name>plus</name>
        <param>
          <type>T</type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1DestComp" kindref="compound">DestComp</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1NumComps" kindref="compound">NumComps</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
<para>Do nothing if bx is empty. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="1275" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1ab595dd5c5937a2cf26edb270088a5112" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2a54c82ef76ecbbd4c2293e09bae01b54e" kindref="member">RunOn::Cpu</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::plus</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src) noexcept</argsstring>
        <name>plus</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fab addition is performed on the intersection of dest and src fabs. All components of dest fab are copied. src fab must have enough components (more is OK). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="1283" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a60b224a5f8dc275281b1381bcdc5e002" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2a54c82ef76ecbbd4c2293e09bae01b54e" kindref="member">RunOn::Cpu</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::operator+=</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src) noexcept</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="1287" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1ae74ae4f14408a1811f80dd7f363f6564" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2a54c82ef76ecbbd4c2293e09bae01b54e" kindref="member">RunOn::Cpu</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::plus</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src, Box bx, SrcComp scomp, DestComp dcomp, NumComps ncomp) noexcept</argsstring>
        <name>plus</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1SrcComp" kindref="compound">SrcComp</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1DestComp" kindref="compound">DestComp</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1NumComps" kindref="compound">NumComps</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
<para>Do nothing if bx does not intersect with src fab. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="1292" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a3dcaadf2c6b30739f68c1a68b0fc83fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2a54c82ef76ecbbd4c2293e09bae01b54e" kindref="member">RunOn::Cpu</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::minus</definition>
        <argsstring>(T val) noexcept</argsstring>
        <name>minus</name>
        <param>
          <type>T</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Scalar subtraction on the whole domain and all components. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="1297" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1acce1e32ad1db6487a96f5aa264a925b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2a54c82ef76ecbbd4c2293e09bae01b54e" kindref="member">RunOn::Cpu</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::operator-=</definition>
        <argsstring>(T val) noexcept</argsstring>
        <name>operator-=</name>
        <param>
          <type>T</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="1301" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a8d411690c6aed0087c346803c6098ee1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2a54c82ef76ecbbd4c2293e09bae01b54e" kindref="member">RunOn::Cpu</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::minus</definition>
        <argsstring>(T val, Box const &amp;bx, DestComp dcomp, NumComps ncomp) noexcept</argsstring>
        <name>minus</name>
        <param>
          <type>T</type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1DestComp" kindref="compound">DestComp</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1NumComps" kindref="compound">NumComps</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
<para>Do nothing if bx is empty. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="1306" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a83df2f84e02851cc11fa77a7aba36084" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2a54c82ef76ecbbd4c2293e09bae01b54e" kindref="member">RunOn::Cpu</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::minus</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src) noexcept</argsstring>
        <name>minus</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fab subtraction is performed on the intersection of dest and src fabs. All components of dest fab are copied. src fab must have enough components (more is OK). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="1314" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1ab14c50b661f4ed91f4e6ae97ac57c113" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2a54c82ef76ecbbd4c2293e09bae01b54e" kindref="member">RunOn::Cpu</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::operator-=</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src) noexcept</argsstring>
        <name>operator-=</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="1318" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a170825e946c8aea9a3ed4fab9e940c07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2a54c82ef76ecbbd4c2293e09bae01b54e" kindref="member">RunOn::Cpu</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::minus</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src, Box bx, SrcComp scomp, DestComp dcomp, NumComps ncomp) noexcept</argsstring>
        <name>minus</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1SrcComp" kindref="compound">SrcComp</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1DestComp" kindref="compound">DestComp</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1NumComps" kindref="compound">NumComps</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
<para>Do nothing if bx does not intersect with src fab. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="1323" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a3a50b78d1cacf19ddf926f43f87fa3ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2a54c82ef76ecbbd4c2293e09bae01b54e" kindref="member">RunOn::Cpu</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::mult</definition>
        <argsstring>(T val) noexcept</argsstring>
        <name>mult</name>
        <param>
          <type>T</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Scalar multiplication on the whole domain and all components. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="1328" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1aebba1e20a67020bc355d1c14499eb81c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2a54c82ef76ecbbd4c2293e09bae01b54e" kindref="member">RunOn::Cpu</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::operator*=</definition>
        <argsstring>(T val) noexcept</argsstring>
        <name>operator*=</name>
        <param>
          <type>T</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="1332" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a96be81290af56a2de288cb67d55828e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2a54c82ef76ecbbd4c2293e09bae01b54e" kindref="member">RunOn::Cpu</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::mult</definition>
        <argsstring>(T val, Box const &amp;bx, DestComp dcomp, NumComps ncomp) noexcept</argsstring>
        <name>mult</name>
        <param>
          <type>T</type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1DestComp" kindref="compound">DestComp</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1NumComps" kindref="compound">NumComps</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
<para>Do nothing if bx is empty. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="1337" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1abeb5c2dca3dff6ac76fe9b15bc9f46cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2a54c82ef76ecbbd4c2293e09bae01b54e" kindref="member">RunOn::Cpu</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::mult</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src) noexcept</argsstring>
        <name>mult</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fab multiplication is performed on the intersection of dest and src fabs. All components of dest fab are copied. src fab must have enough components (more is OK). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="1345" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a4e23eb86df7e74c45ee95016fd6d8924" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2a54c82ef76ecbbd4c2293e09bae01b54e" kindref="member">RunOn::Cpu</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::operator*=</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src) noexcept</argsstring>
        <name>operator*=</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="1349" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a0390e464a60b715fb1f05256cfc4aed7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2a54c82ef76ecbbd4c2293e09bae01b54e" kindref="member">RunOn::Cpu</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::mult</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src, Box bx, SrcComp scomp, DestComp dcomp, NumComps ncomp) noexcept</argsstring>
        <name>mult</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1SrcComp" kindref="compound">SrcComp</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1DestComp" kindref="compound">DestComp</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1NumComps" kindref="compound">NumComps</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
<para>Do nothing if bx does not intersect with src fab. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="1354" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1afad2abafb0db401dcad7f5ae351352e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2a54c82ef76ecbbd4c2293e09bae01b54e" kindref="member">RunOn::Cpu</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::divide</definition>
        <argsstring>(T val) noexcept</argsstring>
        <name>divide</name>
        <param>
          <type>T</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Scalar division on the whole domain and all components. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="1359" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1accb78bf00c977d2117f14477c3f54944" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2a54c82ef76ecbbd4c2293e09bae01b54e" kindref="member">RunOn::Cpu</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::operator/=</definition>
        <argsstring>(T val) noexcept</argsstring>
        <name>operator/=</name>
        <param>
          <type>T</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="1363" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a111538e85f7c8b365f1b88149cfcdcf9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2a54c82ef76ecbbd4c2293e09bae01b54e" kindref="member">RunOn::Cpu</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::divide</definition>
        <argsstring>(T val, Box const &amp;bx, DestComp dcomp, NumComps ncomp) noexcept</argsstring>
        <name>divide</name>
        <param>
          <type>T</type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1DestComp" kindref="compound">DestComp</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1NumComps" kindref="compound">NumComps</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
<para>Do nothing if bx is empty. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="1368" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a13ebc4d7ae9f4b0a40182483cedfb3be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2a54c82ef76ecbbd4c2293e09bae01b54e" kindref="member">RunOn::Cpu</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::divide</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src) noexcept</argsstring>
        <name>divide</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fab division is performed on the intersection of dest and src fabs. All components of dest fab are copied. src fab must have enough components (more is OK). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="1376" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a2cfbaa1b565d7d845c8b02f76fad60ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2a54c82ef76ecbbd4c2293e09bae01b54e" kindref="member">RunOn::Cpu</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::operator/=</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src) noexcept</argsstring>
        <name>operator/=</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="1380" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a7e227c4397d3c7c12c77120d895561d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2a54c82ef76ecbbd4c2293e09bae01b54e" kindref="member">RunOn::Cpu</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::divide</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src, Box bx, SrcComp scomp, DestComp dcomp, NumComps ncomp) noexcept</argsstring>
        <name>divide</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1SrcComp" kindref="compound">SrcComp</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1DestComp" kindref="compound">DestComp</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1NumComps" kindref="compound">NumComps</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
<para>Do nothing if bx does not intersect with src fab. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="1385" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a2b8eb006efd84556e4d5dbda0aa5b233" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2a54c82ef76ecbbd4c2293e09bae01b54e" kindref="member">RunOn::Cpu</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::negate</definition>
        <argsstring>() noexcept</argsstring>
        <name>negate</name>
        <briefdescription>
<para>on the whole domain and all components </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="1390" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a7142a980cf28836cca63d9c7a6bdc597" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2a54c82ef76ecbbd4c2293e09bae01b54e" kindref="member">RunOn::Cpu</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::negate</definition>
        <argsstring>(const Box &amp;bx, DestComp dcomp, NumComps ncomp) noexcept</argsstring>
        <name>negate</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1DestComp" kindref="compound">DestComp</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1NumComps" kindref="compound">NumComps</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="1394" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a2cca18ffdc54a94f0a0dedcbb7122ca8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2a54c82ef76ecbbd4c2293e09bae01b54e" kindref="member">RunOn::Cpu</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::invert</definition>
        <argsstring>(T r) noexcept</argsstring>
        <name>invert</name>
        <param>
          <type>T</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Fab &lt;- Fab/r on the whole domain and all components. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="1399" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1aabdf5f7feaca99394d4593465e64e586" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
            <defval><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2a54c82ef76ecbbd4c2293e09bae01b54e" kindref="member">RunOn::Cpu</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::invert</definition>
        <argsstring>(T r, const Box &amp;bx, DestComp dcomp, NumComps ncomp) noexcept</argsstring>
        <name>invert</name>
        <param>
          <type>T</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1DestComp" kindref="compound">DestComp</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1NumComps" kindref="compound">NumComps</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="1403" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1ac5203569fe07a6ea8da8ece607fec738" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> T</type>
        <definition>T amrex::BaseFab&lt; T &gt;::sum</definition>
        <argsstring>(const Box &amp;bx, DestComp dcomp, NumComps ncomp) const noexcept</argsstring>
        <name>sum</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1DestComp" kindref="compound">DestComp</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1NumComps" kindref="compound">NumComps</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
<para>Sum. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="1407" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3778" bodyend="3790"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a809f337b1ac6e5da6557f630149a3eca" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> T</type>
        <definition>T amrex::BaseFab&lt; T &gt;::dot</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src, const Box &amp;bx, SrcComp scomp, DestComp dcomp, NumComps ncomp) const noexcept</argsstring>
        <name>dot</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1SrcComp" kindref="compound">SrcComp</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1DestComp" kindref="compound">DestComp</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1NumComps" kindref="compound">NumComps</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
<para>Dot product of two Fabs. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="1411" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3794" bodyend="3809"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a321130e1af874c362b23bcd4ba7e3f2e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> T</type>
        <definition>T amrex::BaseFab&lt; T &gt;::dot</definition>
        <argsstring>(const Box &amp;bx, int destcomp, int numcomp) const noexcept</argsstring>
        <name>dot</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
        </param>
        <briefdescription>
<para>Int wrapper for dot. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="1415" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3813" bodyend="3816"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a0db120f3f074edbdde7a22efc8de37fc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> T</type>
        <definition>T amrex::BaseFab&lt; T &gt;::dot</definition>
        <argsstring>(const Box &amp;bx, DestComp dcomp, NumComps ncomp) const noexcept</argsstring>
        <name>dot</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1DestComp" kindref="compound">DestComp</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1NumComps" kindref="compound">NumComps</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
<para>Dot product. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="1419" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3821" bodyend="3833"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1adb777343cc7e97c16caff0ff8d83b5c9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> T</type>
        <definition>T amrex::BaseFab&lt; T &gt;::dotmask</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src, const Box &amp;bx, const BaseFab&lt; int &gt; &amp;mask, SrcComp scomp, DestComp dcomp, NumComps ncomp) const noexcept</argsstring>
        <name>dotmask</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; int &gt; &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1SrcComp" kindref="compound">SrcComp</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1DestComp" kindref="compound">DestComp</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1NumComps" kindref="compound">NumComps</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
<para>Dot product of two Fabs with mask. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="1423" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3837" bodyend="3856"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a270e33026636fd546ab31ccd04bb4f21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::BaseFab&lt; T &gt;::setVal</definition>
        <argsstring>(T x, const Box &amp;bx, int n) noexcept</argsstring>
        <name>setVal</name>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="1796" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="1796" bodyend="1799"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a238ebf67cd0e758f09d1666bf1d9b1d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::BaseFab&lt; T &gt;::setVal</definition>
        <argsstring>(T x, int n) noexcept</argsstring>
        <name>setVal</name>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="1804" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="1804" bodyend="1807"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1ab81ce9108d3f2df61ba025920073cf8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::BaseFab&lt; T &gt;::setVal</definition>
        <argsstring>(T x, const Box &amp;bx, int dcomp, int ncomp) noexcept</argsstring>
        <name>setVal</name>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="1812" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="1812" bodyend="1815"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a44bd52db6a2b4c183b2b4f77a2c0ac06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::BaseFab&lt; T &gt;::setValIfNot</definition>
        <argsstring>(T val, const Box &amp;bx, const BaseFab&lt; int &gt; &amp;mask, int ns, int num) noexcept</argsstring>
        <name>setValIfNot</name>
        <param>
          <type>T</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; int &gt; &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ns</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="1820" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="1820" bodyend="1823"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a1a6e54b5a637c146916d91e13fcb4e9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::copy</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src, const Box &amp;srcbox, int srccomp, const Box &amp;destbox, int destcomp, int numcomp) noexcept</argsstring>
        <name>copy</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>srcbox</declname>
        </param>
        <param>
          <type>int</type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>destbox</declname>
        </param>
        <param>
          <type>int</type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="1828" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="1828" bodyend="1854"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a75e5dbbddc811d7fd7bd745189174317" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::copy</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src, const Box &amp;destbox) noexcept</argsstring>
        <name>copy</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>destbox</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="1859" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="1859" bodyend="1862"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a5ef71a27f0572cb1cf799fc065fa4633" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::copy</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src, int srccomp, int destcomp, int numcomp) noexcept</argsstring>
        <name>copy</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int</type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="1867" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="1867" bodyend="1870"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a29e37b708f69207394fac7878df2dd87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::operator=</definition>
        <argsstring>(T t) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type>T</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="2003" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2003" bodyend="2007"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a1e8c677d4f03b86f4a6e1d1caac46b02" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>std::size_t amrex::BaseFab&lt; T &gt;::copyToMem</definition>
        <argsstring>(const Box &amp;srcbox, int srccomp, int numcomp, void *dst) const noexcept</argsstring>
        <name>copyToMem</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>srcbox</declname>
        </param>
        <param>
          <type>int</type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>dst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="2118" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2118" bodyend="2145"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a882788c51b335c17a01231f1a1fe5da2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>std::size_t amrex::BaseFab&lt; T &gt;::copyFromMem</definition>
        <argsstring>(const Box &amp;dstbox, int dstcomp, int numcomp, const void *src) noexcept</argsstring>
        <name>copyFromMem</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>dstbox</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dstcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="2150" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2150" bodyend="2178"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a24d42c66b16642a5aee1a390b1b0c39a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>std::size_t amrex::BaseFab&lt; T &gt;::addFromMem</definition>
        <argsstring>(const Box &amp;dstbox, int dstcomp, int numcomp, const void *src) noexcept</argsstring>
        <name>addFromMem</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>dstbox</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dstcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="2183" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2183" bodyend="2211"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1af827e9a5df2baf21d45239e49567f4c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::BaseFab&lt; T &gt;::abs</definition>
        <argsstring>() noexcept</argsstring>
        <name>abs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="2223" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2223" bodyend="2226"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1af5623bc9bf884d91d6ed90231c7a9419" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::BaseFab&lt; T &gt;::abs</definition>
        <argsstring>(int comp, int numcomp) noexcept</argsstring>
        <name>abs</name>
        <param>
          <type>int</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="2231" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2231" bodyend="2234"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a23d698caeaa56f85551113b5b01f5c1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::BaseFab&lt; T &gt;::abs</definition>
        <argsstring>(const Box &amp;subbox, int comp, int numcomp) noexcept</argsstring>
        <name>abs</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>subbox</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="2239" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2239" bodyend="2251"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a8505d734cc5368b13b834496d09ae949" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::atomicAdd</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;x) noexcept</argsstring>
        <name>atomicAdd</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="2595" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2595" bodyend="2600"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a2bfbe2648c706f9a1d7085f12e16d678" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::saxpy</definition>
        <argsstring>(T a, const BaseFab&lt; T &gt; &amp;x, const Box &amp;srcbox, const Box &amp;destbox, int srccomp, int destcomp, int numcomp) noexcept</argsstring>
        <name>saxpy</name>
        <param>
          <type>T</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>srcbox</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>destbox</declname>
        </param>
        <param>
          <type>int</type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="2605" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2605" bodyend="2632"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a5c72ce8e986e6c246a3014b16623841e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::saxpy</definition>
        <argsstring>(T a, const BaseFab&lt; T &gt; &amp;x) noexcept</argsstring>
        <name>saxpy</name>
        <param>
          <type>T</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="2637" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2637" bodyend="2642"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a52f9c2770774c98f9167f91c1c53bfbc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::xpay</definition>
        <argsstring>(T a, const BaseFab&lt; T &gt; &amp;x, const Box &amp;srcbox, const Box &amp;destbox, int srccomp, int destcomp, int numcomp) noexcept</argsstring>
        <name>xpay</name>
        <param>
          <type>T</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>srcbox</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>destbox</declname>
        </param>
        <param>
          <type>int</type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="2647" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2647" bodyend="2675"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a92482894216a0a89ca51f344fb4aed3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::addproduct</definition>
        <argsstring>(const Box &amp;destbox, int destcomp, int numcomp, const BaseFab&lt; T &gt; &amp;src1, int comp1, const BaseFab&lt; T &gt; &amp;src2, int comp2) noexcept</argsstring>
        <name>addproduct</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>destbox</declname>
        </param>
        <param>
          <type>int</type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp1</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src2</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="2680" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2680" bodyend="2704"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a402206b6a1ac77df6f5d95be6ab9f6bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::linComb</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;f1, const Box &amp;b1, int comp1, const BaseFab&lt; T &gt; &amp;f2, const Box &amp;b2, int comp2, Real alpha, Real beta, const Box &amp;b, int comp, int numcomp) noexcept</argsstring>
        <name>linComb</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp1</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b2</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp2</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="2709" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2709" bodyend="2745"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a58dd7a35c5434dd5db8c1b8c3f2605ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::negate</definition>
        <argsstring>(int comp, int numcomp) noexcept</argsstring>
        <name>negate</name>
        <param>
          <type>int</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="2826" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2826" bodyend="2829"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1ad203420c69db0f421310cd5a97d54593" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::negate</definition>
        <argsstring>(const Box &amp;b, int comp, int numcomp) noexcept</argsstring>
        <name>negate</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="2834" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2834" bodyend="2837"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1aceac6b4a9ea3c9e8aacdac223df0b6be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::invert</definition>
        <argsstring>(T r, int comp, int numcomp) noexcept</argsstring>
        <name>invert</name>
        <param>
          <type>T</type>
          <declname>r</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="2842" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2842" bodyend="2845"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1af7ab34e2ad3216937471e88b5d789050" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::invert</definition>
        <argsstring>(T r, const Box &amp;b, int comp, int numcomp) noexcept</argsstring>
        <name>invert</name>
        <param>
          <type>T</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="2850" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2850" bodyend="2853"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a54c254d23dd1c22aedd99c3b69b4b9c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::plus</definition>
        <argsstring>(T r, int comp, int numcomp) noexcept</argsstring>
        <name>plus</name>
        <param>
          <type>T</type>
          <declname>r</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="2858" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2858" bodyend="2861"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1af1cf37e26532a8f4c25048083146a2fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::plus</definition>
        <argsstring>(T r, const Box &amp;b, int comp, int numcomp) noexcept</argsstring>
        <name>plus</name>
        <param>
          <type>T</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="2866" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2866" bodyend="2869"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1ab199a9a99810de3fb4843cc21bfa7a25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::plus</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src, int srccomp, int destcomp, int numcomp) noexcept</argsstring>
        <name>plus</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int</type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="2874" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2874" bodyend="2877"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1ad4a663bc25fbf4b751e972dadbf62341" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::atomicAdd</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src, int srccomp, int destcomp, int numcomp) noexcept</argsstring>
        <name>atomicAdd</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int</type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="2882" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2882" bodyend="2887"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a5e93c4cebc6eef27bfd7c54dd59b5fab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::plus</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src, const Box &amp;subbox, int srccomp, int destcomp, int numcomp) noexcept</argsstring>
        <name>plus</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>subbox</declname>
        </param>
        <param>
          <type>int</type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="2892" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2892" bodyend="2896"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1af26f59b93e158d33b451e2b1a4bfa7d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::atomicAdd</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src, const Box &amp;subbox, int srccomp, int destcomp, int numcomp) noexcept</argsstring>
        <name>atomicAdd</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>subbox</declname>
        </param>
        <param>
          <type>int</type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="2901" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2901" bodyend="2908"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1ace17b3757ac24dd5c6791d330dd0b816" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::plus</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src, const Box &amp;srcbox, const Box &amp;destbox, int srccomp, int destcomp, int numcomp) noexcept</argsstring>
        <name>plus</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>srcbox</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>destbox</declname>
        </param>
        <param>
          <type>int</type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="2913" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2913" bodyend="2939"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a764158b2757597c048426d462b5db0f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::atomicAdd</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src, const Box &amp;srcbox, const Box &amp;destbox, int srccomp, int destcomp, int numcomp) noexcept</argsstring>
        <name>atomicAdd</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>srcbox</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>destbox</declname>
        </param>
        <param>
          <type>int</type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="2944" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2944" bodyend="2978"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a95ccd8d717c0729d29dae96cbcc53976" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::minus</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src, int srccomp, int destcomp, int numcomp) noexcept</argsstring>
        <name>minus</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int</type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="2983" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2983" bodyend="2986"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a7fdd81b18d33e94a010ceb39f58176ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::minus</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src, const Box &amp;subbox, int srccomp, int destcomp, int numcomp) noexcept</argsstring>
        <name>minus</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>subbox</declname>
        </param>
        <param>
          <type>int</type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="2991" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2991" bodyend="2994"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a7471b3e676b8da7925d2d1d7dc6bfb71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::minus</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src, const Box &amp;srcbox, const Box &amp;destbox, int srccomp, int destcomp, int numcomp) noexcept</argsstring>
        <name>minus</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>srcbox</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>destbox</declname>
        </param>
        <param>
          <type>int</type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="2999" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2999" bodyend="3025"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1aa5806b3f05e4a756af55abb51f621674" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::mult</definition>
        <argsstring>(T r, int comp, int numcomp) noexcept</argsstring>
        <name>mult</name>
        <param>
          <type>T</type>
          <declname>r</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="3030" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3030" bodyend="3033"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1acd83dc778c2884a19cd7bf0f20dd9451" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::mult</definition>
        <argsstring>(T r, const Box &amp;b, int comp, int numcomp) noexcept</argsstring>
        <name>mult</name>
        <param>
          <type>T</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="3038" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3038" bodyend="3041"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1ae297f64be6e4a1fada419ae54248e766" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::mult</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src, int srccomp, int destcomp, int numcomp) noexcept</argsstring>
        <name>mult</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int</type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="3046" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3046" bodyend="3049"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a05b2ddcd7b6bf4e4d95e97423d903629" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::mult</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src, const Box &amp;subbox, int srccomp, int destcomp, int numcomp) noexcept</argsstring>
        <name>mult</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>subbox</declname>
        </param>
        <param>
          <type>int</type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="3054" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3054" bodyend="3057"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1ae7b10d0cc8f9169c3c71fcef9ed9c64b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::mult</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src, const Box &amp;srcbox, const Box &amp;destbox, int srccomp, int destcomp, int numcomp) noexcept</argsstring>
        <name>mult</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>srcbox</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>destbox</declname>
        </param>
        <param>
          <type>int</type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="3062" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3062" bodyend="3088"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a9d20c12b8a97c34a87acb7d221aef2c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::divide</definition>
        <argsstring>(T r, int comp, int numcomp) noexcept</argsstring>
        <name>divide</name>
        <param>
          <type>T</type>
          <declname>r</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="3093" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3093" bodyend="3096"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1af21a2d538ac47f45712093194c1fa376" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::divide</definition>
        <argsstring>(T r, const Box &amp;b, int comp, int numcomp) noexcept</argsstring>
        <name>divide</name>
        <param>
          <type>T</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="3101" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3101" bodyend="3104"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1acd1bfeebc9f161eb0b544b00c047d130" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::divide</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src, int srccomp, int destcomp, int numcomp) noexcept</argsstring>
        <name>divide</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int</type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="3109" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3109" bodyend="3112"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a3a3835439d4b608d589023303183c9ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::divide</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src, const Box &amp;subbox, int srccomp, int destcomp, int numcomp) noexcept</argsstring>
        <name>divide</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>subbox</declname>
        </param>
        <param>
          <type>int</type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="3117" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3117" bodyend="3120"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a4c0174e592c901fe942a2f9e522abc30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::divide</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src, const Box &amp;srcbox, const Box &amp;destbox, int srccomp, int destcomp, int numcomp) noexcept</argsstring>
        <name>divide</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>srcbox</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>destbox</declname>
        </param>
        <param>
          <type>int</type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="3125" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3125" bodyend="3151"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1aa2670b1f50b987d33b52c5daf8bde39a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::protected_divide</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src) noexcept</argsstring>
        <name>protected_divide</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="3156" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3156" bodyend="3161"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a1ad55c5b37ed79210fb1f91681731a68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::protected_divide</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src, int srccomp, int destcomp, int numcomp) noexcept</argsstring>
        <name>protected_divide</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int</type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="3166" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3166" bodyend="3171"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1ac0fbe26273adca9320f52ac2aaed7611" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::protected_divide</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src, const Box &amp;subbox, int srccomp, int destcomp, int numcomp) noexcept</argsstring>
        <name>protected_divide</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>subbox</declname>
        </param>
        <param>
          <type>int</type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="3176" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3176" bodyend="3183"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a088570834012e0e8fff1fc31a45899e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::protected_divide</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src, const Box &amp;srcbox, const Box &amp;destbox, int srccomp, int destcomp, int numcomp) noexcept</argsstring>
        <name>protected_divide</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>srcbox</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>destbox</declname>
        </param>
        <param>
          <type>int</type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="3188" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3188" bodyend="3216"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1ad05dfed40f0777bd53018af0974bcd8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::linInterp</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;f1, const Box &amp;b1, int comp1, const BaseFab&lt; T &gt; &amp;f2, const Box &amp;b2, int comp2, Real t1, Real t2, Real t, const Box &amp;b, int comp, int numcomp) noexcept</argsstring>
        <name>linInterp</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp1</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b2</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp2</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>t1</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>t2</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>t</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Linear Interpolation / Extrapolation Result is (t2-t)/(t2-t1)*f1 + (t-t1)/(t2-t1)*f2 Data is taken from b1 region of f1, b2 region of f2 and stored in b region of this FAB. Boxes b, b1 and b2 must be the same size. Data is taken from component comp1 of f1, comp2 of f2, and stored in component comp of this FAB. This fab is returned as a reference for chaining. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="3232" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3232" bodyend="3240"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a003e04b9252c1632186f6cd87bd13d7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::linInterp</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;f1, int comp1, const BaseFab&lt; T &gt; &amp;f2, int comp2, Real t1, Real t2, Real t, const Box &amp;b, int comp, int numcomp) noexcept</argsstring>
        <name>linInterp</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp1</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp2</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>t1</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>t2</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>t</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="3245" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3245" bodyend="3263"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a72e88e2f318157ffa51024baf7096b2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::BaseFab&lt; T &gt;::setVal</definition>
        <argsstring>(T val) noexcept</argsstring>
        <name>setVal</name>
        <param>
          <type>T</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="3272" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3272" bodyend="3275"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a1403661ed89da5b85caed5d1e5d7a024" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::BaseFab&lt; T &gt;::setVal</definition>
        <argsstring>(T x, Box const &amp;bx, DestComp dcomp, NumComps ncomp) noexcept</argsstring>
        <name>setVal</name>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1DestComp" kindref="compound">DestComp</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1NumComps" kindref="compound">NumComps</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="3280" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3280" bodyend="3294"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a78bc641fa0c9f7719acb8fcbf8dfaa8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::BaseFab&lt; T &gt;::setValIf</definition>
        <argsstring>(T val, const BaseFab&lt; int &gt; &amp;mask) noexcept</argsstring>
        <name>setValIf</name>
        <param>
          <type>T</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; int &gt; &amp;</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="3299" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3299" bodyend="3302"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a0fc4c187fbbc9394751f5f052c75e17f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::BaseFab&lt; T &gt;::setValIf</definition>
        <argsstring>(T val, Box const &amp;bx, const BaseFab&lt; int &gt; &amp;mask, DestComp dcomp, NumComps ncomp) noexcept</argsstring>
        <name>setValIf</name>
        <param>
          <type>T</type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; int &gt; &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1DestComp" kindref="compound">DestComp</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1NumComps" kindref="compound">NumComps</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="3307" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3307" bodyend="3322"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a6b5a2e9b60a6958a91d4d751f171dcf0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::BaseFab&lt; T &gt;::setValIfNot</definition>
        <argsstring>(T val, const BaseFab&lt; int &gt; &amp;mask) noexcept</argsstring>
        <name>setValIfNot</name>
        <param>
          <type>T</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; int &gt; &amp;</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="3327" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3327" bodyend="3330"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1ac744edbffbbfdc0317a664ecb9ee9a75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::BaseFab&lt; T &gt;::setValIfNot</definition>
        <argsstring>(T val, Box const &amp;bx, const BaseFab&lt; int &gt; &amp;mask, DestComp dcomp, NumComps ncomp) noexcept</argsstring>
        <name>setValIfNot</name>
        <param>
          <type>T</type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; int &gt; &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1DestComp" kindref="compound">DestComp</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1NumComps" kindref="compound">NumComps</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="3335" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3335" bodyend="3350"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a6b29cc7f398fc29449f649f5ffce90a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::copy</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src) noexcept</argsstring>
        <name>copy</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="3365" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3365" bodyend="3369"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1ab68ce155d24d58de03e55ccbba8464ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::copy</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src, Box bx, SrcComp scomp, DestComp dcomp, NumComps ncomp) noexcept</argsstring>
        <name>copy</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1SrcComp" kindref="compound">SrcComp</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1DestComp" kindref="compound">DestComp</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1NumComps" kindref="compound">NumComps</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="3374" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3374" bodyend="3396"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1af612ef6289698e9a5e87077b8d733642" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::plus</definition>
        <argsstring>(T val) noexcept</argsstring>
        <name>plus</name>
        <param>
          <type>T</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="3401" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3401" bodyend="3404"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1afdd935e124fc8fe63ac83b1ff841b2ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::operator+=</definition>
        <argsstring>(T val) noexcept</argsstring>
        <name>operator+=</name>
        <param>
          <type>T</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="3409" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3409" bodyend="3412"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a829262f0a6a7ddfdc7bbcd0eef9b0aaa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::plus</definition>
        <argsstring>(T val, Box const &amp;bx, DestComp dcomp, NumComps ncomp) noexcept</argsstring>
        <name>plus</name>
        <param>
          <type>T</type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1DestComp" kindref="compound">DestComp</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1NumComps" kindref="compound">NumComps</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="3417" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3417" bodyend="3433"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a4a7c1daa718134c27c493177a462594c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::plus</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src) noexcept</argsstring>
        <name>plus</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="3438" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3438" bodyend="3441"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a8db8b09de45615b9cefce3e4567b96fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::operator+=</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src) noexcept</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="3446" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3446" bodyend="3449"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a724e428511c0c739b831d746e464912d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::plus</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src, Box bx, SrcComp scomp, DestComp dcomp, NumComps ncomp) noexcept</argsstring>
        <name>plus</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1SrcComp" kindref="compound">SrcComp</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1DestComp" kindref="compound">DestComp</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1NumComps" kindref="compound">NumComps</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="3454" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3454" bodyend="3476"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1acca3730125efd640d2ec0f5068019daf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::minus</definition>
        <argsstring>(T val) noexcept</argsstring>
        <name>minus</name>
        <param>
          <type>T</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="3481" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3481" bodyend="3484"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a32da5013a14e9044b1eb4a5835873b19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::operator-=</definition>
        <argsstring>(T val) noexcept</argsstring>
        <name>operator-=</name>
        <param>
          <type>T</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="3489" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3489" bodyend="3492"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a37eac589c8574e571d1df228c50ebe6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::minus</definition>
        <argsstring>(T val, Box const &amp;bx, DestComp dcomp, NumComps ncomp) noexcept</argsstring>
        <name>minus</name>
        <param>
          <type>T</type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1DestComp" kindref="compound">DestComp</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1NumComps" kindref="compound">NumComps</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="3497" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3497" bodyend="3513"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1aad29f1f5c27e36d1dc782defbcb9b0c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::minus</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src) noexcept</argsstring>
        <name>minus</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="3518" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3518" bodyend="3521"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a61953b9a47ace9ba6ee197f128353bc7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::operator-=</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src) noexcept</argsstring>
        <name>operator-=</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="3526" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3526" bodyend="3529"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a905a553770a1f9467dc4518dd80c095e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::minus</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src, Box bx, SrcComp scomp, DestComp dcomp, NumComps ncomp) noexcept</argsstring>
        <name>minus</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1SrcComp" kindref="compound">SrcComp</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1DestComp" kindref="compound">DestComp</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1NumComps" kindref="compound">NumComps</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="3534" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3534" bodyend="3556"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a1e04630fcc0b183f5405081455743ba4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::mult</definition>
        <argsstring>(T val) noexcept</argsstring>
        <name>mult</name>
        <param>
          <type>T</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="3561" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3561" bodyend="3564"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a5e7c5fbb052ce7e92449dffa239e9797" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::operator*=</definition>
        <argsstring>(T val) noexcept</argsstring>
        <name>operator*=</name>
        <param>
          <type>T</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="3569" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3569" bodyend="3572"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a9ee9a84419cb6eb8497ddf12b5d7e49a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::mult</definition>
        <argsstring>(T val, Box const &amp;bx, DestComp dcomp, NumComps ncomp) noexcept</argsstring>
        <name>mult</name>
        <param>
          <type>T</type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1DestComp" kindref="compound">DestComp</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1NumComps" kindref="compound">NumComps</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="3577" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3577" bodyend="3593"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a5c4bb7a5336eb18c2b773cbae2ff316e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::mult</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src) noexcept</argsstring>
        <name>mult</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="3598" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3598" bodyend="3601"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a81e2881a19b80e6c89ddb701a8598adf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::operator*=</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src) noexcept</argsstring>
        <name>operator*=</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="3606" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3606" bodyend="3609"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a7269324b22121948c839798e5b156f41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::mult</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src, Box bx, SrcComp scomp, DestComp dcomp, NumComps ncomp) noexcept</argsstring>
        <name>mult</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1SrcComp" kindref="compound">SrcComp</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1DestComp" kindref="compound">DestComp</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1NumComps" kindref="compound">NumComps</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="3614" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3614" bodyend="3636"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a06b5c53434d9583590565105ebd508ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::divide</definition>
        <argsstring>(T val) noexcept</argsstring>
        <name>divide</name>
        <param>
          <type>T</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="3641" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3641" bodyend="3644"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a41d2ec0d92f183aa35de7ebe33ef9a41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::operator/=</definition>
        <argsstring>(T val) noexcept</argsstring>
        <name>operator/=</name>
        <param>
          <type>T</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="3649" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3649" bodyend="3652"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1abf1089c32fcc53e21a456ccd3384b112" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::divide</definition>
        <argsstring>(T val, Box const &amp;bx, DestComp dcomp, NumComps ncomp) noexcept</argsstring>
        <name>divide</name>
        <param>
          <type>T</type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1DestComp" kindref="compound">DestComp</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1NumComps" kindref="compound">NumComps</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="3657" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3657" bodyend="3673"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a50dab81eac851f28d4f621c2ddcc12a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::divide</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src) noexcept</argsstring>
        <name>divide</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="3678" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3678" bodyend="3681"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a5e2a4f56959a68e114d65dbe05764ee6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::operator/=</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src) noexcept</argsstring>
        <name>operator/=</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="3686" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3686" bodyend="3689"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1ac3e0cef0c66da350019643004f929b0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::divide</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src, Box bx, SrcComp scomp, DestComp dcomp, NumComps ncomp) noexcept</argsstring>
        <name>divide</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1SrcComp" kindref="compound">SrcComp</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1DestComp" kindref="compound">DestComp</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1NumComps" kindref="compound">NumComps</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="3694" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3694" bodyend="3716"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a1784c8d9ef02b59a689014283b49e93b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::negate</definition>
        <argsstring>() noexcept</argsstring>
        <name>negate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="3721" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3721" bodyend="3724"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1ab832c869862010010f3ad49ab8b2046e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::negate</definition>
        <argsstring>(const Box &amp;bx, DestComp dcomp, NumComps ncomp) noexcept</argsstring>
        <name>negate</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1DestComp" kindref="compound">DestComp</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1NumComps" kindref="compound">NumComps</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="3729" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3729" bodyend="3745"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a5f5cec2e328deadd091bd6405a57054b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::invert</definition>
        <argsstring>(T r) noexcept</argsstring>
        <name>invert</name>
        <param>
          <type>T</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="3750" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3750" bodyend="3753"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a4fa36525f8ea3ccc924391e3eb5da46b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::invert</definition>
        <argsstring>(T r, const Box &amp;bx, DestComp dcomp, NumComps ncomp) noexcept</argsstring>
        <name>invert</name>
        <param>
          <type>T</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1DestComp" kindref="compound">DestComp</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1NumComps" kindref="compound">NumComps</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="3758" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3758" bodyend="3774"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a1d6dfeb0de1a785895b2a26e05c8ce4a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::BaseFab&lt; T &gt;::Initialize</definition>
        <argsstring>()</argsstring>
        <name>Initialize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="263" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a4b42e2b61ac6d8050def0a5e9bde849f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::BaseFab&lt; T &gt;::Finalize</definition>
        <argsstring>()</argsstring>
        <name>Finalize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="264" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a35dc22f1d61f4fb05ab75ae93f683d14" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BaseFab&lt; T &gt;::define</definition>
        <argsstring>()</argsstring>
        <name>define</name>
        <briefdescription>
<para>Allocates memory for the BaseFab&lt;T&gt;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="1428" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="1874" bodyend="1892"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="638">
        <label>amrex::DataAllocator</label>
        <link refid="structamrex_1_1DataAllocator"/>
      </node>
      <node id="637">
        <label>amrex::BaseFab&lt; T &gt;</label>
        <link refid="classamrex_1_1BaseFab"/>
        <childnode refid="638" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="642">
        <label>amrex::ArenaInfo</label>
        <link refid="structamrex_1_1ArenaInfo"/>
      </node>
      <node id="644">
        <label>amrex::IntVect</label>
        <link refid="classamrex_1_1IntVect"/>
        <childnode refid="644" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
      </node>
      <node id="646">
        <label>T</label>
      </node>
      <node id="640">
        <label>amrex::DataAllocator</label>
        <link refid="structamrex_1_1DataAllocator"/>
        <childnode refid="641" relation="usage">
          <edgelabel>m_arena</edgelabel>
        </childnode>
      </node>
      <node id="641">
        <label>amrex::Arena</label>
        <link refid="classamrex_1_1Arena"/>
        <childnode refid="642" relation="usage">
          <edgelabel>arena_info</edgelabel>
        </childnode>
      </node>
      <node id="643">
        <label>amrex::Box</label>
        <link refid="classamrex_1_1Box"/>
        <childnode refid="644" relation="usage">
          <edgelabel>bigend</edgelabel>
          <edgelabel>smallend</edgelabel>
        </childnode>
        <childnode refid="645" relation="usage">
          <edgelabel>btype</edgelabel>
        </childnode>
      </node>
      <node id="645">
        <label>amrex::IndexType</label>
        <link refid="classamrex_1_1IndexType"/>
      </node>
      <node id="639">
        <label>amrex::BaseFab&lt; T &gt;</label>
        <link refid="classamrex_1_1BaseFab"/>
        <childnode refid="640" relation="public-inheritance">
        </childnode>
        <childnode refid="643" relation="usage">
          <edgelabel>domain</edgelabel>
        </childnode>
        <childnode refid="646" relation="usage">
          <edgelabel>dptr</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="209" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="207" bodyend="1445"/>
    <listofallmembers>
      <member refid="classamrex_1_1BaseFab_1a60b67b06c0aa9e37d96d76cf759e759e" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>abs</name></member>
      <member refid="classamrex_1_1BaseFab_1a1b090c18d7aaabf3faa50488b974b225" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>abs</name></member>
      <member refid="classamrex_1_1BaseFab_1aa4a8fd8dfc84b70c08f5353efb9172b6" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>abs</name></member>
      <member refid="classamrex_1_1BaseFab_1af827e9a5df2baf21d45239e49567f4c6" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>abs</name></member>
      <member refid="classamrex_1_1BaseFab_1af5623bc9bf884d91d6ed90231c7a9419" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>abs</name></member>
      <member refid="classamrex_1_1BaseFab_1a23d698caeaa56f85551113b5b01f5c1f" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>abs</name></member>
      <member refid="classamrex_1_1BaseFab_1a91513822e781492a9800ae2064f4c6ee" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>Accumulate</name></member>
      <member refid="classamrex_1_1BaseFab_1afe02f231fb3dd4fc4c9e1c7e4e2964d6" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>addFromMem</name></member>
      <member refid="classamrex_1_1BaseFab_1a24d42c66b16642a5aee1a390b1b0c39a" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>addFromMem</name></member>
      <member refid="classamrex_1_1BaseFab_1a12a46f061e932da4f9a7be453064eec5" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>addproduct</name></member>
      <member refid="classamrex_1_1BaseFab_1a92482894216a0a89ca51f344fb4aed3a" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>addproduct</name></member>
      <member refid="structamrex_1_1DataAllocator_1adcabda73bbd0120b08dbb2cda22a6427" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>alloc</name></member>
      <member refid="structamrex_1_1DataAllocator_1a477a75a5d73137b29f1a6ddf31af40f7" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>arena</name></member>
      <member refid="classamrex_1_1BaseFab_1aa456605f5709d47be9474befe9d9e128" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>array</name></member>
      <member refid="classamrex_1_1BaseFab_1a039630ee4496b6d7fd17020a78f4f899" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>array</name></member>
      <member refid="classamrex_1_1BaseFab_1ad0f8441171dac51883fd6137efc91e6a" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>atomicAdd</name></member>
      <member refid="classamrex_1_1BaseFab_1a8f354041007b5c0c411d2cf70f518ef8" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>atomicAdd</name></member>
      <member refid="classamrex_1_1BaseFab_1aea181b42d90299926a976a41954841fc" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>atomicAdd</name></member>
      <member refid="classamrex_1_1BaseFab_1a7574b5d3fb35e12d76033f79517c76c7" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>atomicAdd</name></member>
      <member refid="classamrex_1_1BaseFab_1a8505d734cc5368b13b834496d09ae949" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>atomicAdd</name></member>
      <member refid="classamrex_1_1BaseFab_1ad4a663bc25fbf4b751e972dadbf62341" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>atomicAdd</name></member>
      <member refid="classamrex_1_1BaseFab_1af26f59b93e158d33b451e2b1a4bfa7d8" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>atomicAdd</name></member>
      <member refid="classamrex_1_1BaseFab_1a764158b2757597c048426d462b5db0f3" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>atomicAdd</name></member>
      <member refid="classamrex_1_1BaseFab_1ad961346567674565f67ad873d4461f42" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1a7e470d7e72db0c3169e83e34ce4f657b" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1ae5d9786facded55bfce06cc443594cab" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1a83d88e02757dac7e30b2ac7a13020b22" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1aa42c6cb505873cad1b9c9de64a20c407" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1a4b890373aa053ba5cd3aae0bf5483c1c" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1a8553c8f3915ded4cacfba0c490b98bc5" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1a53ab00ff398b5beb473bf85810189532" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1a2fe573448f0463cc140a1452a9510eb0" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1a27f1fbad6aff0f97e0291664ab11a4e4" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1a54d1d483f6f2d5e455eb9d8bb290d325" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1a17a67eac45989c89c30b7daa039a39b6" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1a6b0fa577ec8190137939f503041e7bf7" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1aa2ce65c438db70645899b1d0c09f2455" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1a0d29e1227b0a3d2381b35cce869f9e5f" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>bigEnd</name></member>
      <member refid="classamrex_1_1BaseFab_1a9359cb75c273aa3ab475d21ddc64f8f3" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>box</name></member>
      <member refid="classamrex_1_1BaseFab_1ae428e6a2645141dd817c288331575f26" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>clear</name></member>
      <member refid="classamrex_1_1BaseFab_1aeba81b8b4aa7054af02788dc42c797c3" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>const_array</name></member>
      <member refid="classamrex_1_1BaseFab_1a90d94d23b4c7ff81a86093956d38b332" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>contains</name></member>
      <member refid="classamrex_1_1BaseFab_1a21a8ed23adcc906fd3a3814f3e851f3c" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>contains</name></member>
      <member refid="classamrex_1_1BaseFab_1a70271c2e1b77e0ea5f158eea45761fc8" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>copy</name></member>
      <member refid="classamrex_1_1BaseFab_1aaa7d3fd422bc8847909369663e621487" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>copy</name></member>
      <member refid="classamrex_1_1BaseFab_1a0f146a347e5fb740e14ea2661465af00" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>copy</name></member>
      <member refid="classamrex_1_1BaseFab_1a589e71fc8086f2f02e1455d751b3ef0f" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>copy</name></member>
      <member refid="classamrex_1_1BaseFab_1adffc3f632ba1775e84841a65a47305c5" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>copy</name></member>
      <member refid="classamrex_1_1BaseFab_1a1a6e54b5a637c146916d91e13fcb4e9d" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>copy</name></member>
      <member refid="classamrex_1_1BaseFab_1a75e5dbbddc811d7fd7bd745189174317" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>copy</name></member>
      <member refid="classamrex_1_1BaseFab_1a5ef71a27f0572cb1cf799fc065fa4633" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>copy</name></member>
      <member refid="classamrex_1_1BaseFab_1a6b29cc7f398fc29449f649f5ffce90a4" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>copy</name></member>
      <member refid="classamrex_1_1BaseFab_1ab68ce155d24d58de03e55ccbba8464ff" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>copy</name></member>
      <member refid="classamrex_1_1BaseFab_1a204d8f987b091f6c9c7b0f9df8516e26" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>copyFromMem</name></member>
      <member refid="classamrex_1_1BaseFab_1a882788c51b335c17a01231f1a1fe5da2" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>copyFromMem</name></member>
      <member refid="classamrex_1_1BaseFab_1a024ca63e1873c1914781adc6b80ce7c6" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>copyToMem</name></member>
      <member refid="classamrex_1_1BaseFab_1a1e8c677d4f03b86f4a6e1d1caac46b02" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>copyToMem</name></member>
      <member refid="structamrex_1_1DataAllocator_1a7efc193b557d263444d91cc90c7c7073" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>DataAllocator</name></member>
      <member refid="structamrex_1_1DataAllocator_1a1cbea797e47f9d7448b1f574beb24d8b" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>DataAllocator</name></member>
      <member refid="classamrex_1_1BaseFab_1ac1817d437a6ca523298e25202dd51705" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>dataPtr</name></member>
      <member refid="classamrex_1_1BaseFab_1a8b5f6bd26ae63d34e365dddfe1fa0991" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>dataPtr</name></member>
      <member refid="classamrex_1_1BaseFab_1a06a400fb85117c65737b171b07e478aa" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>dataPtr</name></member>
      <member refid="classamrex_1_1BaseFab_1a156632a48b54792083eb05adec16155d" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>dataPtr</name></member>
      <member refid="classamrex_1_1BaseFab_1a35dc22f1d61f4fb05ab75ae93f683d14" prot="protected" virt="non-virtual"><scope>amrex::BaseFab</scope><name>define</name></member>
      <member refid="classamrex_1_1BaseFab_1a1799d563bf1422378100e5e524597d46" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>divide</name></member>
      <member refid="classamrex_1_1BaseFab_1aabc4a1d1ffe7989959aa7e7f866db598" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>divide</name></member>
      <member refid="classamrex_1_1BaseFab_1aa845104c0166893afa4ddd5fc24f7613" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>divide</name></member>
      <member refid="classamrex_1_1BaseFab_1a42098e3720513206e40cb04a7c78ba10" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>divide</name></member>
      <member refid="classamrex_1_1BaseFab_1ab5ca6ad817518e495e582a769f9c2fd4" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>divide</name></member>
      <member refid="classamrex_1_1BaseFab_1afad2abafb0db401dcad7f5ae351352e1" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>divide</name></member>
      <member refid="classamrex_1_1BaseFab_1a111538e85f7c8b365f1b88149cfcdcf9" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>divide</name></member>
      <member refid="classamrex_1_1BaseFab_1a13ebc4d7ae9f4b0a40182483cedfb3be" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>divide</name></member>
      <member refid="classamrex_1_1BaseFab_1a7e227c4397d3c7c12c77120d895561d6" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>divide</name></member>
      <member refid="classamrex_1_1BaseFab_1a9d20c12b8a97c34a87acb7d221aef2c6" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>divide</name></member>
      <member refid="classamrex_1_1BaseFab_1af21a2d538ac47f45712093194c1fa376" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>divide</name></member>
      <member refid="classamrex_1_1BaseFab_1acd1bfeebc9f161eb0b544b00c047d130" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>divide</name></member>
      <member refid="classamrex_1_1BaseFab_1a3a3835439d4b608d589023303183c9ff" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>divide</name></member>
      <member refid="classamrex_1_1BaseFab_1a4c0174e592c901fe942a2f9e522abc30" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>divide</name></member>
      <member refid="classamrex_1_1BaseFab_1a06b5c53434d9583590565105ebd508ee" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>divide</name></member>
      <member refid="classamrex_1_1BaseFab_1abf1089c32fcc53e21a456ccd3384b112" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>divide</name></member>
      <member refid="classamrex_1_1BaseFab_1a50dab81eac851f28d4f621c2ddcc12a8" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>divide</name></member>
      <member refid="classamrex_1_1BaseFab_1ac3e0cef0c66da350019643004f929b0c" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>divide</name></member>
      <member refid="classamrex_1_1BaseFab_1a8e95d8cfaadfe53080ae0092b53202fb" prot="protected" virt="non-virtual"><scope>amrex::BaseFab</scope><name>domain</name></member>
      <member refid="classamrex_1_1BaseFab_1adb03ed2032296735e2b188be56558fbf" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>dot</name></member>
      <member refid="classamrex_1_1BaseFab_1a809f337b1ac6e5da6557f630149a3eca" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>dot</name></member>
      <member refid="classamrex_1_1BaseFab_1a321130e1af874c362b23bcd4ba7e3f2e" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>dot</name></member>
      <member refid="classamrex_1_1BaseFab_1a0db120f3f074edbdde7a22efc8de37fc" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>dot</name></member>
      <member refid="classamrex_1_1BaseFab_1a6b8d97aba07d9806cf1e711ca44f283a" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>dotmask</name></member>
      <member refid="classamrex_1_1BaseFab_1adb777343cc7e97c16caff0ff8d83b5c9" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>dotmask</name></member>
      <member refid="classamrex_1_1BaseFab_1a9236f2f88feff79c1d50b9b830750f91" prot="protected" virt="non-virtual"><scope>amrex::BaseFab</scope><name>dptr</name></member>
      <member refid="classamrex_1_1BaseFab_1ac5a36d719054f74a00bfc52e10ec9918" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>elixir</name></member>
      <member refid="classamrex_1_1BaseFab_1a4b42e2b61ac6d8050def0a5e9bde849f" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>Finalize</name></member>
      <member refid="classamrex_1_1BaseFab_1aa7ffb7d3ed11be2617488acee59d5d8b" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>ForEach</name></member>
      <member refid="classamrex_1_1BaseFab_1af056c3d5b73627c4ea8e0e30244aedce" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>ForEach</name></member>
      <member refid="classamrex_1_1BaseFab_1a2b537482c611229a7e2b62f1bbf1d4c6" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>ForEach</name></member>
      <member refid="classamrex_1_1BaseFab_1a11ed06775cfb2c8108b56d2158dc796b" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>ForEach</name></member>
      <member refid="classamrex_1_1BaseFab_1a01e76f051c01f45b50e48ef80d39d907" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>ForEachIV</name></member>
      <member refid="classamrex_1_1BaseFab_1a3cb3ce0e34a9e6d0e6826f863f5c55da" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>ForEachIV</name></member>
      <member refid="structamrex_1_1DataAllocator_1a5fa328945c30133a9b9c7f93ccf6e78f" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>free</name></member>
      <member refid="classamrex_1_1BaseFab_1ac195a2bbff03a7f02e30788342473d18" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>getVal</name></member>
      <member refid="classamrex_1_1BaseFab_1af8f8e7b8b678678f74f235b0ebdeed9f" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>getVal</name></member>
      <member refid="classamrex_1_1BaseFab_1ae6cabd78f18cfc8f0d9544ef683cd640" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>hiVect</name></member>
      <member refid="classamrex_1_1BaseFab_1ac1f1baf311e46d9e868d76bf659dd492" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>indexFromValue</name></member>
      <member refid="classamrex_1_1BaseFab_1a1d6dfeb0de1a785895b2a26e05c8ce4a" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>Initialize</name></member>
      <member refid="classamrex_1_1BaseFab_1a4f33242576d8af9719d891d10e8db54d" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>invert</name></member>
      <member refid="classamrex_1_1BaseFab_1ab2625d5ab7b2b5a382d879a5d2dd43db" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>invert</name></member>
      <member refid="classamrex_1_1BaseFab_1a2cca18ffdc54a94f0a0dedcbb7122ca8" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>invert</name></member>
      <member refid="classamrex_1_1BaseFab_1aabdf5f7feaca99394d4593465e64e586" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>invert</name></member>
      <member refid="classamrex_1_1BaseFab_1aceac6b4a9ea3c9e8aacdac223df0b6be" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>invert</name></member>
      <member refid="classamrex_1_1BaseFab_1af7ab34e2ad3216937471e88b5d789050" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>invert</name></member>
      <member refid="classamrex_1_1BaseFab_1a5f5cec2e328deadd091bd6405a57054b" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>invert</name></member>
      <member refid="classamrex_1_1BaseFab_1a4fa36525f8ea3ccc924391e3eb5da46b" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>invert</name></member>
      <member refid="classamrex_1_1BaseFab_1a8d6db68c9ef28ef91234e66512faceb8" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>isAllocated</name></member>
      <member refid="classamrex_1_1BaseFab_1a56b3de1c8cf4f5747c1219f411783d99" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>length</name></member>
      <member refid="classamrex_1_1BaseFab_1a4d474bdc21db63d848b989cfdd3d1d22" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>linComb</name></member>
      <member refid="classamrex_1_1BaseFab_1a402206b6a1ac77df6f5d95be6ab9f6bd" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>linComb</name></member>
      <member refid="classamrex_1_1BaseFab_1a03077e916e82559193f9913bbd6ec52c" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>linInterp</name></member>
      <member refid="classamrex_1_1BaseFab_1aa81753624ac94b117b4c35466c76c1d7" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>linInterp</name></member>
      <member refid="classamrex_1_1BaseFab_1ad05dfed40f0777bd53018af0974bcd8f" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>linInterp</name></member>
      <member refid="classamrex_1_1BaseFab_1a003e04b9252c1632186f6cd87bd13d7a" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>linInterp</name></member>
      <member refid="classamrex_1_1BaseFab_1ad138d01fb5a57ad77306a3adbf8026cb" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>loVect</name></member>
      <member refid="structamrex_1_1DataAllocator_1a901b7f1e68950afc823ebc10c093cb94" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>m_arena</name></member>
      <member refid="classamrex_1_1BaseFab_1a66695e0608fe850a6c9d44b0e022b6ba" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>maskEQ</name></member>
      <member refid="classamrex_1_1BaseFab_1af4a8317171c537136ef82e4502e0d7d4" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>maskGE</name></member>
      <member refid="classamrex_1_1BaseFab_1a1993ea667fc5b620195bb42fe003cc1a" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>maskGT</name></member>
      <member refid="classamrex_1_1BaseFab_1aee32dcf282a28ad947aa119859ec6d9e" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>maskLE</name></member>
      <member refid="classamrex_1_1BaseFab_1a554f518d10db9e4f7ba253396479b862" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>maskLT</name></member>
      <member refid="classamrex_1_1BaseFab_1a6efb5346cc42795e6cd01323117f3ac3" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>max</name></member>
      <member refid="classamrex_1_1BaseFab_1ab361c41e09518099b2a6c9f9db1f82d1" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>max</name></member>
      <member refid="classamrex_1_1BaseFab_1a3cdfbec8bb23d2a40379cd4819adf713" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>maxabs</name></member>
      <member refid="classamrex_1_1BaseFab_1aec266e1d4d3acc521279fe612f9d5f3b" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>maxabs</name></member>
      <member refid="classamrex_1_1BaseFab_1a8284115ab508ec6b6dc1a7bd023e3b89" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>maxIndex</name></member>
      <member refid="classamrex_1_1BaseFab_1aae5d45037d346a7a7f51611396199e8e" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>maxIndex</name></member>
      <member refid="classamrex_1_1BaseFab_1a2113a9b7b7bb69febe5899ccee7f37f2" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>maxIndex</name></member>
      <member refid="classamrex_1_1BaseFab_1ad6a70c7c49967817b489033b4d7da696" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>min</name></member>
      <member refid="classamrex_1_1BaseFab_1adb99491368f94a317ec81970c9ad2eee" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>min</name></member>
      <member refid="classamrex_1_1BaseFab_1aa0d631fbfd6b81796222a5ab5fea24d3" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>minIndex</name></member>
      <member refid="classamrex_1_1BaseFab_1a890f10daf1e245f620d079b2cbfa9a31" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>minIndex</name></member>
      <member refid="classamrex_1_1BaseFab_1a3e4a6b4a42c7a55598df8a7e2b13a567" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>minIndex</name></member>
      <member refid="classamrex_1_1BaseFab_1a7d42264ffc7e207793eb71b1c5ee9eca" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>minus</name></member>
      <member refid="classamrex_1_1BaseFab_1a60bbbe646ad33d21dc95bfb22f74103c" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>minus</name></member>
      <member refid="classamrex_1_1BaseFab_1aa62489aa7754be3b090066f46bdaed5f" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>minus</name></member>
      <member refid="classamrex_1_1BaseFab_1a3dcaadf2c6b30739f68c1a68b0fc83fc" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>minus</name></member>
      <member refid="classamrex_1_1BaseFab_1a8d411690c6aed0087c346803c6098ee1" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>minus</name></member>
      <member refid="classamrex_1_1BaseFab_1a83df2f84e02851cc11fa77a7aba36084" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>minus</name></member>
      <member refid="classamrex_1_1BaseFab_1a170825e946c8aea9a3ed4fab9e940c07" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>minus</name></member>
      <member refid="classamrex_1_1BaseFab_1a95ccd8d717c0729d29dae96cbcc53976" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>minus</name></member>
      <member refid="classamrex_1_1BaseFab_1a7fdd81b18d33e94a010ceb39f58176ac" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>minus</name></member>
      <member refid="classamrex_1_1BaseFab_1a7471b3e676b8da7925d2d1d7dc6bfb71" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>minus</name></member>
      <member refid="classamrex_1_1BaseFab_1acca3730125efd640d2ec0f5068019daf" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>minus</name></member>
      <member refid="classamrex_1_1BaseFab_1a37eac589c8574e571d1df228c50ebe6b" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>minus</name></member>
      <member refid="classamrex_1_1BaseFab_1aad29f1f5c27e36d1dc782defbcb9b0c6" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>minus</name></member>
      <member refid="classamrex_1_1BaseFab_1a905a553770a1f9467dc4518dd80c095e" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>minus</name></member>
      <member refid="classamrex_1_1BaseFab_1af23b9f25700280d14eff911416af3848" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>mult</name></member>
      <member refid="classamrex_1_1BaseFab_1a6eca2549459c33fb59e0ab5c4a642a2d" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>mult</name></member>
      <member refid="classamrex_1_1BaseFab_1a92538d5f5d8c08971e67dbbcabe28260" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>mult</name></member>
      <member refid="classamrex_1_1BaseFab_1a8047a78e7b6408ba29d8f7f06ff1a3d9" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>mult</name></member>
      <member refid="classamrex_1_1BaseFab_1ab7870ca660aae727b83bf1e945e1bb43" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>mult</name></member>
      <member refid="classamrex_1_1BaseFab_1a3a50b78d1cacf19ddf926f43f87fa3ef" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>mult</name></member>
      <member refid="classamrex_1_1BaseFab_1a96be81290af56a2de288cb67d55828e7" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>mult</name></member>
      <member refid="classamrex_1_1BaseFab_1abeb5c2dca3dff6ac76fe9b15bc9f46cd" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>mult</name></member>
      <member refid="classamrex_1_1BaseFab_1a0390e464a60b715fb1f05256cfc4aed7" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>mult</name></member>
      <member refid="classamrex_1_1BaseFab_1aa5806b3f05e4a756af55abb51f621674" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>mult</name></member>
      <member refid="classamrex_1_1BaseFab_1acd83dc778c2884a19cd7bf0f20dd9451" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>mult</name></member>
      <member refid="classamrex_1_1BaseFab_1ae297f64be6e4a1fada419ae54248e766" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>mult</name></member>
      <member refid="classamrex_1_1BaseFab_1a05b2ddcd7b6bf4e4d95e97423d903629" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>mult</name></member>
      <member refid="classamrex_1_1BaseFab_1ae7b10d0cc8f9169c3c71fcef9ed9c64b" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>mult</name></member>
      <member refid="classamrex_1_1BaseFab_1a1e04630fcc0b183f5405081455743ba4" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>mult</name></member>
      <member refid="classamrex_1_1BaseFab_1a9ee9a84419cb6eb8497ddf12b5d7e49a" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>mult</name></member>
      <member refid="classamrex_1_1BaseFab_1a5c4bb7a5336eb18c2b773cbae2ff316e" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>mult</name></member>
      <member refid="classamrex_1_1BaseFab_1a7269324b22121948c839798e5b156f41" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>mult</name></member>
      <member refid="classamrex_1_1BaseFab_1a43f0ed693f7f5436621aaf9b27620c56" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>nBytes</name></member>
      <member refid="classamrex_1_1BaseFab_1ac03d6fdd6bd658196becfefc5b3b93a8" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>nBytes</name></member>
      <member refid="classamrex_1_1BaseFab_1a267006cc0717e9dfbcbd22afc1c89d8c" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>nBytesOwned</name></member>
      <member refid="classamrex_1_1BaseFab_1a7406ec91dc010602121f1492f2d3a748" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>nComp</name></member>
      <member refid="classamrex_1_1BaseFab_1af3ab7e9a7cb47a3eb41ba6a97ab2e798" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>nCompPtr</name></member>
      <member refid="classamrex_1_1BaseFab_1adbd6149086de9c72f89c0ccd59d9490e" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>negate</name></member>
      <member refid="classamrex_1_1BaseFab_1a79cdb1bd32f6065f6743104596e634da" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>negate</name></member>
      <member refid="classamrex_1_1BaseFab_1a2b8eb006efd84556e4d5dbda0aa5b233" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>negate</name></member>
      <member refid="classamrex_1_1BaseFab_1a7142a980cf28836cca63d9c7a6bdc597" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>negate</name></member>
      <member refid="classamrex_1_1BaseFab_1a58dd7a35c5434dd5db8c1b8c3f2605ef" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>negate</name></member>
      <member refid="classamrex_1_1BaseFab_1ad203420c69db0f421310cd5a97d54593" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>negate</name></member>
      <member refid="classamrex_1_1BaseFab_1a1784c8d9ef02b59a689014283b49e93b" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>negate</name></member>
      <member refid="classamrex_1_1BaseFab_1ab832c869862010010f3ad49ab8b2046e" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>negate</name></member>
      <member refid="classamrex_1_1BaseFab_1af72c4b534beb0143a7b0fdc7114b1a78" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>norm</name></member>
      <member refid="classamrex_1_1BaseFab_1af13ffa626053c497af1a0ba1dd9fc7ff" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>norm</name></member>
      <member refid="classamrex_1_1BaseFab_1a691a8ebd9d366bf9649472d721ff0f7b" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>norminfmask</name></member>
      <member refid="classamrex_1_1BaseFab_1aaf26c270066d314a52ccdbc5f61ea302" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>numPts</name></member>
      <member refid="classamrex_1_1BaseFab_1a99b1638f6702821a6b6e63cb860d938f" prot="protected" virt="non-virtual"><scope>amrex::BaseFab</scope><name>nvar</name></member>
      <member refid="classamrex_1_1BaseFab_1ad76ae6115f341053b2eb94affc5e3eee" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>operator()</name></member>
      <member refid="classamrex_1_1BaseFab_1ac1a408be29fc4bfc85971ac414c165ee" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>operator()</name></member>
      <member refid="classamrex_1_1BaseFab_1a10931b31715309bfb452dc2c7fa662df" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>operator()</name></member>
      <member refid="classamrex_1_1BaseFab_1a3427e5ed98498ff54da5f75d22923f5f" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>operator()</name></member>
      <member refid="classamrex_1_1BaseFab_1aebba1e20a67020bc355d1c14499eb81c" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>operator*=</name></member>
      <member refid="classamrex_1_1BaseFab_1a4e23eb86df7e74c45ee95016fd6d8924" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>operator*=</name></member>
      <member refid="classamrex_1_1BaseFab_1a5e7c5fbb052ce7e92449dffa239e9797" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>operator*=</name></member>
      <member refid="classamrex_1_1BaseFab_1a81e2881a19b80e6c89ddb701a8598adf" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>operator*=</name></member>
      <member refid="classamrex_1_1BaseFab_1a563dd4bcb0336fba813ec2faa6540938" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>operator+=</name></member>
      <member refid="classamrex_1_1BaseFab_1a60b224a5f8dc275281b1381bcdc5e002" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>operator+=</name></member>
      <member refid="classamrex_1_1BaseFab_1afdd935e124fc8fe63ac83b1ff841b2ad" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>operator+=</name></member>
      <member refid="classamrex_1_1BaseFab_1a8db8b09de45615b9cefce3e4567b96fc" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>operator+=</name></member>
      <member refid="classamrex_1_1BaseFab_1acce1e32ad1db6487a96f5aa264a925b4" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>operator-=</name></member>
      <member refid="classamrex_1_1BaseFab_1ab14c50b661f4ed91f4e6ae97ac57c113" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>operator-=</name></member>
      <member refid="classamrex_1_1BaseFab_1a32da5013a14e9044b1eb4a5835873b19" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>operator-=</name></member>
      <member refid="classamrex_1_1BaseFab_1a61953b9a47ace9ba6ee197f128353bc7" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>operator-=</name></member>
      <member refid="classamrex_1_1BaseFab_1accb78bf00c977d2117f14477c3f54944" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>operator/=</name></member>
      <member refid="classamrex_1_1BaseFab_1a2cfbaa1b565d7d845c8b02f76fad60ce" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>operator/=</name></member>
      <member refid="classamrex_1_1BaseFab_1a41d2ec0d92f183aa35de7ebe33ef9a41" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>operator/=</name></member>
      <member refid="classamrex_1_1BaseFab_1a5e2a4f56959a68e114d65dbe05764ee6" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>operator/=</name></member>
      <member refid="classamrex_1_1BaseFab_1a9a52c7475015824cfb60e6c67ecad522" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>operator=</name></member>
      <member refid="classamrex_1_1BaseFab_1ae3101a71fce4d1d50de1fca73ff4b0f4" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>operator=</name></member>
      <member refid="classamrex_1_1BaseFab_1a0204884d2ac46b2358771eed0f327a91" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>operator=</name></member>
      <member refid="classamrex_1_1BaseFab_1a29e37b708f69207394fac7878df2dd87" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>operator=</name></member>
      <member refid="classamrex_1_1BaseFab_1a0fd920c6e2e2b459957c626b4b2aa5de" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>plus</name></member>
      <member refid="classamrex_1_1BaseFab_1a54365197ac99b879d76240ed7add9bd4" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>plus</name></member>
      <member refid="classamrex_1_1BaseFab_1ad198f285be177537c12cd44363df7020" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>plus</name></member>
      <member refid="classamrex_1_1BaseFab_1ac16db77aeb5ceacdfb630e2b82bb3c75" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>plus</name></member>
      <member refid="classamrex_1_1BaseFab_1a69fb8d483c7222233a809a3e2e22e7a9" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>plus</name></member>
      <member refid="classamrex_1_1BaseFab_1a09491463850121df06ad37523bb5e571" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>plus</name></member>
      <member refid="classamrex_1_1BaseFab_1a1de73d120087c4b83136568b7470b13d" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>plus</name></member>
      <member refid="classamrex_1_1BaseFab_1ab595dd5c5937a2cf26edb270088a5112" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>plus</name></member>
      <member refid="classamrex_1_1BaseFab_1ae74ae4f14408a1811f80dd7f363f6564" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>plus</name></member>
      <member refid="classamrex_1_1BaseFab_1a54c254d23dd1c22aedd99c3b69b4b9c9" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>plus</name></member>
      <member refid="classamrex_1_1BaseFab_1af1cf37e26532a8f4c25048083146a2fc" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>plus</name></member>
      <member refid="classamrex_1_1BaseFab_1ab199a9a99810de3fb4843cc21bfa7a25" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>plus</name></member>
      <member refid="classamrex_1_1BaseFab_1a5e93c4cebc6eef27bfd7c54dd59b5fab" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>plus</name></member>
      <member refid="classamrex_1_1BaseFab_1ace17b3757ac24dd5c6791d330dd0b816" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>plus</name></member>
      <member refid="classamrex_1_1BaseFab_1af612ef6289698e9a5e87077b8d733642" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>plus</name></member>
      <member refid="classamrex_1_1BaseFab_1a829262f0a6a7ddfdc7bbcd0eef9b0aaa" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>plus</name></member>
      <member refid="classamrex_1_1BaseFab_1a4a7c1daa718134c27c493177a462594c" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>plus</name></member>
      <member refid="classamrex_1_1BaseFab_1a724e428511c0c739b831d746e464912d" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>plus</name></member>
      <member refid="classamrex_1_1BaseFab_1acc3fa2566c4bf2de3e6f0773e3b0601b" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>prefetchToDevice</name></member>
      <member refid="classamrex_1_1BaseFab_1aea7b9b15c8959be232fa8d0b14b2b507" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>prefetchToHost</name></member>
      <member refid="classamrex_1_1BaseFab_1a533615c28e9b0903a72dde72299db946" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>protected_divide</name></member>
      <member refid="classamrex_1_1BaseFab_1ad7614319bdf4f11eb72fb625bf7bd22a" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>protected_divide</name></member>
      <member refid="classamrex_1_1BaseFab_1a92093fa670aa87dca0013da6faab7ce9" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>protected_divide</name></member>
      <member refid="classamrex_1_1BaseFab_1a2c53a69db15c61fba03210237b48cd42" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>protected_divide</name></member>
      <member refid="classamrex_1_1BaseFab_1aa2670b1f50b987d33b52c5daf8bde39a" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>protected_divide</name></member>
      <member refid="classamrex_1_1BaseFab_1a1ad55c5b37ed79210fb1f91681731a68" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>protected_divide</name></member>
      <member refid="classamrex_1_1BaseFab_1ac0fbe26273adca9320f52ac2aaed7611" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>protected_divide</name></member>
      <member refid="classamrex_1_1BaseFab_1a088570834012e0e8fff1fc31a45899e3" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>protected_divide</name></member>
      <member refid="classamrex_1_1BaseFab_1acf3b50d012730dd3521fb2be517573b9" prot="protected" virt="non-virtual"><scope>amrex::BaseFab</scope><name>ptr_owner</name></member>
      <member refid="classamrex_1_1BaseFab_1a4390286fe2327bd5f0561a75ee14499b" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>release</name></member>
      <member refid="classamrex_1_1BaseFab_1a48099208f15f741c739316388f61737a" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>resize</name></member>
      <member refid="classamrex_1_1BaseFab_1aff460f2e28a2f6a1db9dd8035a13869c" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>saxpy</name></member>
      <member refid="classamrex_1_1BaseFab_1a8097fc848af279eb5460a22a4c52c690" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>saxpy</name></member>
      <member refid="classamrex_1_1BaseFab_1a2bfbe2648c706f9a1d7085f12e16d678" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>saxpy</name></member>
      <member refid="classamrex_1_1BaseFab_1a5c72ce8e986e6c246a3014b16623841e" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>saxpy</name></member>
      <member refid="classamrex_1_1BaseFab_1a03513ca096ccb98cbfc04eed4ea4bf1f" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>SetBoxType</name></member>
      <member refid="classamrex_1_1BaseFab_1aede6afede165d8f14c5bedb035654c4a" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>setComplement</name></member>
      <member refid="classamrex_1_1BaseFab_1a141ba4c0b87cbaf780261ba65ac4970a" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>setComplement</name></member>
      <member refid="classamrex_1_1BaseFab_1ab55c5cdbff39b6eb2074b4846c9efb2e" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>setPtr</name></member>
      <member refid="classamrex_1_1BaseFab_1afd2b7401360a9fd6388965ac2e737297" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>setVal</name></member>
      <member refid="classamrex_1_1BaseFab_1a2b28ac36c5be730a481212babf906ec6" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>setVal</name></member>
      <member refid="classamrex_1_1BaseFab_1a7f7e196d1ae5afc917ccce8e77de0a3c" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>setVal</name></member>
      <member refid="classamrex_1_1BaseFab_1a2f724e6d261f856a5d6b352032519467" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>setVal</name></member>
      <member refid="classamrex_1_1BaseFab_1a474319b91fb346c9e930d69a8d4703f7" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>setVal</name></member>
      <member refid="classamrex_1_1BaseFab_1a270e33026636fd546ab31ccd04bb4f21" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>setVal</name></member>
      <member refid="classamrex_1_1BaseFab_1a238ebf67cd0e758f09d1666bf1d9b1d9" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>setVal</name></member>
      <member refid="classamrex_1_1BaseFab_1ab81ce9108d3f2df61ba025920073cf8a" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>setVal</name></member>
      <member refid="classamrex_1_1BaseFab_1a72e88e2f318157ffa51024baf7096b2c" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>setVal</name></member>
      <member refid="classamrex_1_1BaseFab_1a1403661ed89da5b85caed5d1e5d7a024" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>setVal</name></member>
      <member refid="classamrex_1_1BaseFab_1a0867fcf62ebed52d585448bdb99b6468" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>setValIf</name></member>
      <member refid="classamrex_1_1BaseFab_1a060b0e3485b33a49ce5325195a21e8b2" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>setValIf</name></member>
      <member refid="classamrex_1_1BaseFab_1a78bc641fa0c9f7719acb8fcbf8dfaa8a" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>setValIf</name></member>
      <member refid="classamrex_1_1BaseFab_1a0fc4c187fbbc9394751f5f052c75e17f" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>setValIf</name></member>
      <member refid="classamrex_1_1BaseFab_1a8233f33a8898262b7ddb7f978925092c" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>setValIfNot</name></member>
      <member refid="classamrex_1_1BaseFab_1afb8a2c9a5f4281488bb4dd47abf64d46" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>setValIfNot</name></member>
      <member refid="classamrex_1_1BaseFab_1ac1b454d3dc799dbf8aacb3c48ed0de15" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>setValIfNot</name></member>
      <member refid="classamrex_1_1BaseFab_1a44bd52db6a2b4c183b2b4f77a2c0ac06" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>setValIfNot</name></member>
      <member refid="classamrex_1_1BaseFab_1a6b5a2e9b60a6958a91d4d751f171dcf0" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>setValIfNot</name></member>
      <member refid="classamrex_1_1BaseFab_1ac744edbffbbfdc0317a664ecb9ee9a75" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>setValIfNot</name></member>
      <member refid="classamrex_1_1BaseFab_1a4e65169d29942cf3adde870d63a91834" prot="protected" virt="non-virtual"><scope>amrex::BaseFab</scope><name>shared_memory</name></member>
      <member refid="classamrex_1_1BaseFab_1a92cb12158a09c20c51ef9347c11d31e4" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>shift</name></member>
      <member refid="classamrex_1_1BaseFab_1ad511764daeaedb9d3de8afc17ca7140c" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>shift</name></member>
      <member refid="classamrex_1_1BaseFab_1af9080211623ae547d4a77076be42eeba" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>shiftHalf</name></member>
      <member refid="classamrex_1_1BaseFab_1a55589bcc8819d6c8a9291e79a05fbb81" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>shiftHalf</name></member>
      <member refid="classamrex_1_1BaseFab_1a2433222c078c64fcb8c01cab64c20566" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>size</name></member>
      <member refid="classamrex_1_1BaseFab_1a787a8e1e40a6a13728e44ccbf5a5ec5a" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>smallEnd</name></member>
      <member refid="classamrex_1_1BaseFab_1add7f10ec971a7d474f44c0d22fb4c750" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>sum</name></member>
      <member refid="classamrex_1_1BaseFab_1ae46a718f3837f9b75a52220b0e47cee1" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>sum</name></member>
      <member refid="classamrex_1_1BaseFab_1ac5203569fe07a6ea8da8ece607fec738" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>sum</name></member>
      <member refid="classamrex_1_1BaseFab_1aca58ac4ae57851e2883c84963ee6c331" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>Transform</name></member>
      <member refid="classamrex_1_1BaseFab_1a105ef076b58438b9238767a574847646" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>Transform</name></member>
      <member refid="classamrex_1_1BaseFab_1aa86e53b5d3afdae2606ab0be640bb022" prot="protected" virt="non-virtual"><scope>amrex::BaseFab</scope><name>truesize</name></member>
      <member refid="classamrex_1_1BaseFab_1aac8f37b7bba5334a86bf90b58fb062d8" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>value_type</name></member>
      <member refid="classamrex_1_1BaseFab_1a0ad9ef3212349a9c484eebaddf3ef039" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>view</name></member>
      <member refid="classamrex_1_1BaseFab_1a76735e86616929030b8383a78bddaaa4" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>view</name></member>
      <member refid="classamrex_1_1BaseFab_1a238a6ce02380dda577a844bd9250d109" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>view</name></member>
      <member refid="classamrex_1_1BaseFab_1a5dac991f61637eb0b5ad077ea132e84f" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>view</name></member>
      <member refid="classamrex_1_1BaseFab_1acfe35cfcc6bbf643ad67ce6cc092b40b" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>view</name></member>
      <member refid="classamrex_1_1BaseFab_1a3483f3893ec878a491276fae68f5062e" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>view</name></member>
      <member refid="classamrex_1_1BaseFab_1a639592b0b04292117d406f9dc764cf1d" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>view</name></member>
      <member refid="classamrex_1_1BaseFab_1ac307f7499cb98666f3e625dc6165d380" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>view</name></member>
      <member refid="classamrex_1_1BaseFab_1a4c6ac97444b2e697b2389738e9e64052" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>view</name></member>
      <member refid="classamrex_1_1BaseFab_1a98f6f0536d0fafa36d94868dcfd83a37" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>view</name></member>
      <member refid="classamrex_1_1BaseFab_1a23defcb11ee91b350b1edf9850aba0ec" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>xpay</name></member>
      <member refid="classamrex_1_1BaseFab_1a52f9c2770774c98f9167f91c1c53bfbc" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>xpay</name></member>
      <member refid="classamrex_1_1BaseFab_1acf7c1ac49465810a70b9ae1757263f30" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>~BaseFab</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
