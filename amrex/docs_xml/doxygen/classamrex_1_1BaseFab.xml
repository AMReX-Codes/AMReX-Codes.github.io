<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classamrex_1_1BaseFab" kind="class" language="C++" prot="public">
    <compoundname>amrex::BaseFab</compoundname>
    <basecompoundref refid="structamrex_1_1DataAllocator" prot="public" virt="non-virtual">amrex::DataAllocator</basecompoundref>
    <includes refid="AMReX__BaseFab_8H" local="no">AMReX_BaseFab.H</includes>
    <templateparamlist>
      <param>
        <type>class T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classamrex_1_1BaseFab_1a6ffc31b194f5484eef777a47862ddfac" prot="public" static="no">
        <type>T</type>
        <definition>using amrex::BaseFab&lt; T &gt;::value_type =  T</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="188" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="188" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classamrex_1_1BaseFab_1ad961346567674565f67ad873d4461f42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>class</type>
        <definition>friend class BaseFab</definition>
        <argsstring></argsstring>
        <name>BaseFab</name>
        <param>
          <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="186" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="186" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classamrex_1_1BaseFab_1a9236f2f88feff79c1d50b9b830750f91" prot="protected" static="no" mutable="no">
        <type>T *</type>
        <definition>T* amrex::BaseFab&lt; T &gt;::dptr</definition>
        <argsstring></argsstring>
        <name>dptr</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
<para>The data pointer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="1649" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="1649" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1BaseFab_1a8e95d8cfaadfe53080ae0092b53202fb" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref></type>
        <definition>Box amrex::BaseFab&lt; T &gt;::domain</definition>
        <argsstring></argsstring>
        <name>domain</name>
        <briefdescription>
<para>My index space. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="1650" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="1650" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1BaseFab_1a99b1638f6702821a6b6e63cb860d938f" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::BaseFab&lt; T &gt;::nvar</definition>
        <argsstring></argsstring>
        <name>nvar</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Number components. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="1651" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="1651" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1BaseFab_1a86d1b4b6478205b0fcec165260df5772" prot="protected" static="no" mutable="no">
        <type>Long</type>
        <definition>Long amrex::BaseFab&lt; T &gt;::truesize</definition>
        <argsstring></argsstring>
        <name>truesize</name>
        <initializer>= 0L</initializer>
        <briefdescription>
<para>nvar*numpts that was allocated on heap. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="1652" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="1652" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1BaseFab_1acf3b50d012730dd3521fb2be517573b9" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::BaseFab&lt; T &gt;::ptr_owner</definition>
        <argsstring></argsstring>
        <name>ptr_owner</name>
        <initializer>= false</initializer>
        <briefdescription>
<para>Owner of T*? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="1653" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="1653" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1BaseFab_1a4e65169d29942cf3adde870d63a91834" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::BaseFab&lt; T &gt;::shared_memory</definition>
        <argsstring></argsstring>
        <name>shared_memory</name>
        <initializer>= false</initializer>
        <briefdescription>
<para>Is the memory allocated in shared memory? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="1654" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="1654" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1BaseFab_1a0b228a35989fd32f481b43adfa43a2ec" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1a3e08759747455ff96c8f68e8673c2b19" kindref="member">gpuStream_t</ref></type>
        <definition>gpuStream_t amrex::BaseFab&lt; T &gt;::alloc_stream</definition>
        <argsstring></argsstring>
        <name>alloc_stream</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="1656" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="1656" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1BaseFab_1ae732fa5c1fb9495b98ecce97ccd1be95" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::BaseFab&lt; T &gt;::BaseFab</definition>
        <argsstring>() noexcept=default</argsstring>
        <name>BaseFab</name>
        <briefdescription>
<para>Construct an empty <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>, which must be resized (see <ref refid="classamrex_1_1BaseFab_1a39e58886603710880541bc7030d1d9c6" kindref="member">BaseFab::resize</ref>) before use. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="191" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1ae5d9786facded55bfce06cc443594cab" prot="public" static="no" const="no" explicit="yes" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::BaseFab&lt; T &gt;::BaseFab</definition>
        <argsstring>(Arena *ar) noexcept</argsstring>
        <name>BaseFab</name>
        <param>
          <type><ref refid="classamrex_1_1Arena" kindref="compound">Arena</ref> *</type>
          <declname>ar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="193" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="1962" bodyend="1964"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a83d88e02757dac7e30b2ac7a13020b22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::BaseFab&lt; T &gt;::BaseFab</definition>
        <argsstring>(const Box &amp;bx, int n, Arena *ar)</argsstring>
        <name>BaseFab</name>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Arena" kindref="compound">Arena</ref> *</type>
          <declname>ar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="195" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="1967" bodyend="1971"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1aa42c6cb505873cad1b9c9de64a20c407" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::BaseFab&lt; T &gt;::BaseFab</definition>
        <argsstring>(const Box &amp;bx, int n=1, bool alloc=true, bool shared=false, Arena *ar=nullptr)</argsstring>
        <name>BaseFab</name>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>alloc</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>shared</declname>
          <defval>false</defval>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Arena" kindref="compound">Arena</ref> *</type>
          <declname>ar</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Make <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref> with desired domain (box) and number of components. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="198" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="1974" bodyend="1978"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a4b890373aa053ba5cd3aae0bf5483c1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::BaseFab&lt; T &gt;::BaseFab</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;rhs, MakeType make_type, int scomp, int ncomp)</argsstring>
        <name>BaseFab</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a0a36c65d0681a832330b2812f16786a6" kindref="member">MakeType</ref></type>
          <declname>make_type</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="201" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="1981" bodyend="1998"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a8553c8f3915ded4cacfba0c490b98bc5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::BaseFab&lt; T &gt;::BaseFab</definition>
        <argsstring>(const Box &amp;bx, int ncomp, T *p)</argsstring>
        <name>BaseFab</name>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Create an NON-OWNING <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>. Thus <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref> is not responsible for memory management. And it&apos;s caller&apos;s responsibility that p points to a chunk of memory large enough. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="208" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2001" bodyend="2004"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a53ab00ff398b5beb473bf85810189532" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::BaseFab&lt; T &gt;::BaseFab</definition>
        <argsstring>(const Box &amp;bx, int ncomp, T const *p)</argsstring>
        <name>BaseFab</name>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>T const *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="209" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2007" bodyend="2010"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a2fe573448f0463cc140a1452a9510eb0" prot="public" static="no" const="no" explicit="yes" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::BaseFab&lt; T &gt;::BaseFab</definition>
        <argsstring>(Array4&lt; T &gt; const &amp;a) noexcept</argsstring>
        <name>BaseFab</name>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="211" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2013" bodyend="2018"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a27f1fbad6aff0f97e0291664ab11a4e4" prot="public" static="no" const="no" explicit="yes" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::BaseFab&lt; T &gt;::BaseFab</definition>
        <argsstring>(Array4&lt; T &gt; const &amp;a, IndexType t) noexcept</argsstring>
        <name>BaseFab</name>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad35342b486ef07ba6108169268169296" kindref="member">IndexType</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="213" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2021" bodyend="2026"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a8adcfedaa62f241b766513fd9dd3f830" prot="public" static="no" const="no" explicit="yes" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::BaseFab&lt; T &gt;::BaseFab</definition>
        <argsstring>(Array4&lt; T const &gt; const &amp;a) noexcept</argsstring>
        <name>BaseFab</name>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="215" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2029" bodyend="2034"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a2689fd4a972a4121943d51dc61eee166" prot="public" static="no" const="no" explicit="yes" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::BaseFab&lt; T &gt;::BaseFab</definition>
        <argsstring>(Array4&lt; T const &gt; const &amp;a, IndexType t) noexcept</argsstring>
        <name>BaseFab</name>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad35342b486ef07ba6108169268169296" kindref="member">IndexType</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="217" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2037" bodyend="2042"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1acf7c1ac49465810a70b9ae1757263f30" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type></type>
        <definition>amrex::BaseFab&lt; T &gt;::~BaseFab</definition>
        <argsstring>() noexcept</argsstring>
        <name>~BaseFab</name>
        <briefdescription>
<para>The destructor deletes the array memory. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="220" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2045" bodyend="2048"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a6b0fa577ec8190137939f503041e7bf7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::BaseFab&lt; T &gt;::BaseFab</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;rhs)=delete</argsstring>
        <name>BaseFab</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="222" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a9a52c7475015824cfb60e6c67ecad522" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::operator=</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;rhs)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="223" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1aa2ce65c438db70645899b1d0c09f2455" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::BaseFab&lt; T &gt;::BaseFab</definition>
        <argsstring>(BaseFab&lt; T &gt; &amp;&amp;rhs) noexcept</argsstring>
        <name>BaseFab</name>
        <param>
          <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="225" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2051" bodyend="2062"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a730800b56af324f6616cdb9ef570cdcc" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt; T &gt; &amp; amrex::BaseFab&lt; T &gt;::operator=</definition>
        <argsstring>(BaseFab&lt; T &gt; &amp;&amp;rhs) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="226" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2066" bodyend="2085"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a4b81fe99b0146870a40f702e63dd1415" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref> &amp;</type>
        <definition>BaseFab&amp; amrex::BaseFab&lt; T &gt;::operator=</definition>
        <argsstring>(T const &amp;) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type>T const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="233" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a39e58886603710880541bc7030d1d9c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BaseFab&lt; T &gt;::resize</definition>
        <argsstring>(const Box &amp;b, int N=1, Arena *ar=nullptr)</argsstring>
        <name>resize</name>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>N</declname>
          <defval>1</defval>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Arena" kindref="compound">Arena</ref> *</type>
          <declname>ar</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>This function resizes a <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref> so it covers the Box b with N components. </para>
        </briefdescription>
        <detaileddescription>
<para>The default action is that under resizing, the memory allocated for the <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref> only grows and never shrinks. This function is particularly useful when a <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref> is used as a temporary space which must be a different size whenever it is used. Resizing is typically faster than re-allocating a <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref> because memory allocation can often be avoided. If a nullptr is provided as Arena*, the <ref refid="classamrex_1_1Arena" kindref="compound">Arena</ref> already in <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref> will be used. Otherwise, the <ref refid="classamrex_1_1Arena" kindref="compound">Arena</ref> argument will be used. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="251" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2098" bodyend="2135"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1ac5a36d719054f74a00bfc52e10ec9918" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
            <defval>T</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; std::is_trivially_destructible_v&lt; U &gt;, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1Gpu_1_1Elixir" kindref="compound">Elixir</ref></type>
        <definition>Elixir amrex::BaseFab&lt; T &gt;::elixir</definition>
        <argsstring>() noexcept</argsstring>
        <name>elixir</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="254" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2140" bodyend="2157"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1ae428e6a2645141dd817c288331575f26" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BaseFab&lt; T &gt;::clear</definition>
        <argsstring>() noexcept</argsstring>
        <name>clear</name>
        <briefdescription>
<para>The function returns the <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref> to the invalid state. The memory is freed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="260" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2161" bodyend="2196"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a4390286fe2327bd5f0561a75ee14499b" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>std::unique_ptr&lt; T, <ref refid="structamrex_1_1DataDeleter" kindref="compound">DataDeleter</ref> &gt;</type>
        <definition>std::unique_ptr&lt; T, DataDeleter &gt; amrex::BaseFab&lt; T &gt;::release</definition>
        <argsstring>() noexcept</argsstring>
        <name>release</name>
        <briefdescription>
<para>Release ownership of memory. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="263" column="22" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2200" bodyend="2213"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a5be7479b2a46eaefb945b066cb21de8a" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t amrex::BaseFab&lt; T &gt;::nBytes</definition>
        <argsstring>() const noexcept</argsstring>
        <name>nBytes</name>
        <briefdescription>
<para>Returns how many bytes used. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="266" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="266" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a267006cc0717e9dfbcbd22afc1c89d8c" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t amrex::BaseFab&lt; T &gt;::nBytesOwned</definition>
        <argsstring>() const noexcept</argsstring>
        <name>nBytesOwned</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="268" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="268" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a32e96a4bbc00ecec58d2763ca697bea6" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t amrex::BaseFab&lt; T &gt;::nBytes</definition>
        <argsstring>(const Box &amp;bx, int ncomps) const noexcept</argsstring>
        <name>nBytes</name>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomps</declname>
        </param>
        <briefdescription>
<para>Returns bytes used in the Box for those components. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="273" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="273" bodyend="274"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1ae16c6f70417dc8f84e2196afe27b2b15" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::BaseFab&lt; T &gt;::nComp</definition>
        <argsstring>() const noexcept</argsstring>
        <name>nComp</name>
        <briefdescription>
<para>Returns the number of components. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="277" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="277" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1aa5764439bdbcc0d060f92f5a6ca41fab" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
        <definition>const int* amrex::BaseFab&lt; T &gt;::nCompPtr</definition>
        <argsstring>() const noexcept</argsstring>
        <name>nCompPtr</name>
        <briefdescription>
<para>for calls to fortran. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="280" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="280" bodyend="282"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1ac6480baad7fdde57bec1e2ad32387300" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>Long</type>
        <definition>Long amrex::BaseFab&lt; T &gt;::numPts</definition>
        <argsstring>() const noexcept</argsstring>
        <name>numPts</name>
        <briefdescription>
<para>Returns the number of points. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="285" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="285" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1aba615c949d4831e48be7fbb76605df0a" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>Long</type>
        <definition>Long amrex::BaseFab&lt; T &gt;::size</definition>
        <argsstring>() const noexcept</argsstring>
        <name>size</name>
        <briefdescription>
<para>Returns the total number of points of all components. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="288" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="288" bodyend="288"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1aa288a917ca5613e3e984c58a7975a89d" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
        <definition>const Box&amp; amrex::BaseFab&lt; T &gt;::box</definition>
        <argsstring>() const noexcept</argsstring>
        <name>box</name>
        <briefdescription>
<para>Returns the domain (box) where the array is defined. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="291" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="291" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1ad69dbb55d91cc9784e3f9ee622c53d91" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref></type>
        <definition>IntVect amrex::BaseFab&lt; T &gt;::length</definition>
        <argsstring>() const noexcept</argsstring>
        <name>length</name>
        <briefdescription>
<para>Returns a pointer to an array of SPACEDIM integers giving the length of the domain in each direction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="297" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="297" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1ab265b95d14a167ea57faaf998d39f113" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &amp;</type>
        <definition>const IntVect&amp; amrex::BaseFab&lt; T &gt;::smallEnd</definition>
        <argsstring>() const noexcept</argsstring>
        <name>smallEnd</name>
        <briefdescription>
<para>Returns the lower corner of the domain See class Box for analogue. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="303" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="303" bodyend="303"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1acdde994980673c595f2348d982aeb70e" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &amp;</type>
        <definition>const IntVect&amp; amrex::BaseFab&lt; T &gt;::bigEnd</definition>
        <argsstring>() const noexcept</argsstring>
        <name>bigEnd</name>
        <briefdescription>
<para>Returns the upper corner of the domain. See class Box for analogue. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="306" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="306" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a5598302356ad5c6af7482fc392c8bb8b" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
        <definition>const int* amrex::BaseFab&lt; T &gt;::loVect</definition>
        <argsstring>() const noexcept</argsstring>
        <name>loVect</name>
        <briefdescription>
<para>Returns the lower corner of the domain. </para>
        </briefdescription>
        <detaileddescription>
<para>Instead of returning them in the form of INTVECTs, as in smallEnd and bigEnd, it returns the values as a pointer to an array of constant integers. This is useful when interfacing to Fortran subroutines. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="316" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="316" bodyend="316"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1ac527239df242562c1cd6d05106299041" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
        <definition>const int* amrex::BaseFab&lt; T &gt;::hiVect</definition>
        <argsstring>() const noexcept</argsstring>
        <name>hiVect</name>
        <briefdescription>
<para>Returns the upper corner of the domain. </para>
        </briefdescription>
        <detaileddescription>
<para>Instead of returning them in the form of INTVECTs, as in smallEnd and bigEnd, it returns the values as a pointer to an array of constant integers. This is useful when interfacing to Fortran subroutines. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="326" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="326" bodyend="326"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a40dca3a0efea6d6ac5e3103e34b1f3e3" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::BaseFab&lt; T &gt;::contains</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;fab) const noexcept</argsstring>
        <name>contains</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>fab</declname>
        </param>
        <briefdescription>
<para>Returns true if the domain of fab is totally contained within the domain of this <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="332" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="332" bodyend="335"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a9121f1816f016bc765e3acea392169b8" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::BaseFab&lt; T &gt;::contains</definition>
        <argsstring>(const Box &amp;bx) const noexcept</argsstring>
        <name>contains</name>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <briefdescription>
<para>Returns true if bx is totally contained within the domain of this <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="341" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="341" bodyend="341"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a5c99c1592a80ba46ab6faf9929773f8d" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>T *</type>
        <definition>T* amrex::BaseFab&lt; T &gt;::dataPtr</definition>
        <argsstring>(int n=0) noexcept</argsstring>
        <name>dataPtr</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Returns a pointer to an object of type T that is the value of the Nth component associated with the cell at the low end of the domain. This is commonly used to get a pointer to data in the array which is then handed off to a Fortran subroutine. Remember that data is stored in Fortran array order, with the component index coming last. In other words, dataPtr returns a pointer to all the Nth components. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="352" column="8" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="352" bodyend="358"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a94be04911ba375a16941883fe1c1d247" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const T *</type>
        <definition>const T* amrex::BaseFab&lt; T &gt;::dataPtr</definition>
        <argsstring>(int n=0) const noexcept</argsstring>
        <name>dataPtr</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para><ref refid="structamrex_1_1Same" kindref="compound">Same</ref> as above except works on const FABs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="361" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="361" bodyend="367"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1af77c50de9cd0e8ec9dbdce27abfa1da4" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>T *</type>
        <definition>AMREX_FORCE_INLINE T * amrex::BaseFab&lt; T &gt;::dataPtr</definition>
        <argsstring>(const IntVect &amp;p, int n=0) noexcept</argsstring>
        <name>dataPtr</name>
        <param>
          <type>const <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="369" column="8" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="1663" bodyend="1671"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a118fb28186b8af61473a0013e2499484" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>const T *</type>
        <definition>AMREX_FORCE_INLINE const T * amrex::BaseFab&lt; T &gt;::dataPtr</definition>
        <argsstring>(const IntVect &amp;p, int n=0) const noexcept</argsstring>
        <name>dataPtr</name>
        <param>
          <type>const <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="371" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="1676" bodyend="1684"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a347010e29c31f4b83480011d98908389" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BaseFab&lt; T &gt;::setPtr</definition>
        <argsstring>(T *p, Long sz) noexcept</argsstring>
        <name>setPtr</name>
        <param>
          <type>T *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>Long</type>
          <declname>sz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="373" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="373" bodyend="373"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1aea7b9b15c8959be232fa8d0b14b2b507" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BaseFab&lt; T &gt;::prefetchToHost</definition>
        <argsstring>() const noexcept</argsstring>
        <name>prefetchToHost</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="375" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="1688" bodyend="1709"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1acc3fa2566c4bf2de3e6f0773e3b0601b" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BaseFab&lt; T &gt;::prefetchToDevice</definition>
        <argsstring>() const noexcept</argsstring>
        <name>prefetchToDevice</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="376" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="1713" bodyend="1733"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a757e00b16f837e3d092aeb625a9dfa6a" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const  &gt;</type>
        <definition>AMREX_FORCE_INLINE Array4&lt;T const&gt; amrex::BaseFab&lt; T &gt;::array</definition>
        <argsstring>() const noexcept</argsstring>
        <name>array</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="379" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="379" bodyend="382"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a5d54525d2d54f617a0072900458729e1" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const  &gt;</type>
        <definition>AMREX_FORCE_INLINE Array4&lt;T const&gt; amrex::BaseFab&lt; T &gt;::array</definition>
        <argsstring>(int start_comp) const noexcept</argsstring>
        <name>array</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>start_comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="385" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="385" bodyend="388"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a56490d543f03319544cb296ea429c414" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const  &gt;</type>
        <definition>AMREX_FORCE_INLINE Array4&lt;T const&gt; amrex::BaseFab&lt; T &gt;::array</definition>
        <argsstring>(int start_comp, int num_comps) const noexcept</argsstring>
        <name>array</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>start_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comps</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="391" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="391" bodyend="394"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a587f263a697ccd87db4db2b7d6f42c87" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt;</type>
        <definition>AMREX_FORCE_INLINE Array4&lt;T&gt; amrex::BaseFab&lt; T &gt;::array</definition>
        <argsstring>() noexcept</argsstring>
        <name>array</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="397" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="397" bodyend="400"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a972c0b6366edff5f72a8b6777ac8ac45" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt;</type>
        <definition>AMREX_FORCE_INLINE Array4&lt;T&gt; amrex::BaseFab&lt; T &gt;::array</definition>
        <argsstring>(int start_comp) noexcept</argsstring>
        <name>array</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>start_comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="403" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="403" bodyend="406"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1ad4a674eebc8c2d3913f2febac4d37f84" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt;</type>
        <definition>AMREX_FORCE_INLINE Array4&lt;T&gt; amrex::BaseFab&lt; T &gt;::array</definition>
        <argsstring>(int start_comp, int num_comps) noexcept</argsstring>
        <name>array</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>start_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comps</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="409" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="409" bodyend="412"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a25ed9ead805e064c8f9dbe34ebbf3a95" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const  &gt;</type>
        <definition>AMREX_FORCE_INLINE Array4&lt;T const&gt; amrex::BaseFab&lt; T &gt;::const_array</definition>
        <argsstring>() const noexcept</argsstring>
        <name>const_array</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="415" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="415" bodyend="418"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1ae5723c1af2b115b682869e760b1033a0" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const  &gt;</type>
        <definition>AMREX_FORCE_INLINE Array4&lt;T const&gt; amrex::BaseFab&lt; T &gt;::const_array</definition>
        <argsstring>(int start_comp) const noexcept</argsstring>
        <name>const_array</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>start_comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="421" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="421" bodyend="424"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1aa3049c7941d487849f2945f2c3447a1e" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const  &gt;</type>
        <definition>AMREX_FORCE_INLINE Array4&lt;T const&gt; amrex::BaseFab&lt; T &gt;::const_array</definition>
        <argsstring>(int start_comp, int num_comps) const noexcept</argsstring>
        <name>const_array</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>start_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comps</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="427" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="427" bodyend="430"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a4342e997e189d6fe00b281776f9400e6" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::BaseFab&lt; T &gt;::isAllocated</definition>
        <argsstring>() const noexcept</argsstring>
        <name>isAllocated</name>
        <briefdescription>
<para>Returns true if the data for the FAB has been allocated. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="433" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="433" bodyend="433"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1ad76ae6115f341053b2eb94affc5e3eee" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>T &amp;</type>
        <definition>AMREX_FORCE_INLINE T &amp; amrex::BaseFab&lt; T &gt;::operator()</definition>
        <argsstring>(const IntVect &amp;p, int N) noexcept</argsstring>
        <name>operator()</name>
        <param>
          <type>const <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>N</declname>
        </param>
        <briefdescription>
<para>Returns a reference to the Nth component value defined at position p in the domain. This operator may be inefficient if the C++ compiler is unable to optimize the C++ code. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="441" column="8" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="1738" bodyend="1746"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1ac1a408be29fc4bfc85971ac414c165ee" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>T &amp;</type>
        <definition>AMREX_FORCE_INLINE T &amp; amrex::BaseFab&lt; T &gt;::operator()</definition>
        <argsstring>(const IntVect &amp;p) noexcept</argsstring>
        <name>operator()</name>
        <param>
          <type>const <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para><ref refid="structamrex_1_1Same" kindref="compound">Same</ref> as above, except returns component 0. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="444" column="8" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="1751" bodyend="1757"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a10931b31715309bfb452dc2c7fa662df" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>AMREX_FORCE_INLINE const T &amp; amrex::BaseFab&lt; T &gt;::operator()</definition>
        <argsstring>(const IntVect &amp;p, int N) const noexcept</argsstring>
        <name>operator()</name>
        <param>
          <type>const <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>N</declname>
        </param>
        <briefdescription>
<para><ref refid="structamrex_1_1Same" kindref="compound">Same</ref> as above except works on const FABs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="447" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="1762" bodyend="1770"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a3427e5ed98498ff54da5f75d22923f5f" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>AMREX_FORCE_INLINE const T &amp; amrex::BaseFab&lt; T &gt;::operator()</definition>
        <argsstring>(const IntVect &amp;p) const noexcept</argsstring>
        <name>operator()</name>
        <param>
          <type>const <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para><ref refid="structamrex_1_1Same" kindref="compound">Same</ref> as above, except returns component 0. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="450" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="1775" bodyend="1781"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1ac195a2bbff03a7f02e30788342473d18" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BaseFab&lt; T &gt;::getVal</definition>
        <argsstring>(T *data, const IntVect &amp;pos, int N, int numcomp) const noexcept</argsstring>
        <name>getVal</name>
        <param>
          <type>T *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>N</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <briefdescription>
<para>This function puts numcomp component values, starting at component N, from position pos in the domain into array data, that must be allocated by the user. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="457" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="1785" bodyend="1799"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1af8f8e7b8b678678f74f235b0ebdeed9f" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BaseFab&lt; T &gt;::getVal</definition>
        <argsstring>(T *data, const IntVect &amp;pos) const noexcept</argsstring>
        <name>getVal</name>
        <param>
          <type>T *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &amp;</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
<para><ref refid="structamrex_1_1Same" kindref="compound">Same</ref> as above, except that starts at component 0 and copies all comps. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="459" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="1803" bodyend="1807"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1ab063c08278822a569d923d57d1e39dee" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
          <param>
            <type>class U</type>
            <defval>T</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; std::is_same_v&lt; U, float &gt;||std::is_same_v&lt; U, double &gt;, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <declname>FOO</declname>
            <defname>FOO</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::BaseFab&lt; T &gt;::fill_snan</definition>
        <argsstring>() noexcept</argsstring>
        <name>fill_snan</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="467" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="1845" bodyend="1848"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1ab24f1f5f55a90b31121560df9c333fa7" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::BaseFab&lt; T &gt;::setVal</definition>
        <argsstring>(T const &amp;x, const Box &amp;bx, int dcomp, int ncomp) noexcept</argsstring>
        <name>setVal</name>
        <param>
          <type>T const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
<para>The setVal functions set sub-regions in the <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref> to a constant value. This most general form specifies the sub-box, the starting component number, and the number of components to be set. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="480" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="1869" bodyend="1872"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1acbfe1bff2de3daad93c1234eae1f0cf3" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::BaseFab&lt; T &gt;::setVal</definition>
        <argsstring>(T const &amp;x, const Box &amp;bx, int N=0) noexcept</argsstring>
        <name>setVal</name>
        <param>
          <type>T const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>N</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para><ref refid="structamrex_1_1Same" kindref="compound">Same</ref> as above, except the number of modified components is one. N is the component to be modified. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="487" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="1853" bodyend="1856"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1ad2b35980de651c0823ee08f5f20f642c" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::BaseFab&lt; T &gt;::setVal</definition>
        <argsstring>(T const &amp;x, int N) noexcept</argsstring>
        <name>setVal</name>
        <param>
          <type>T const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>N</declname>
        </param>
        <briefdescription>
<para><ref refid="structamrex_1_1Same" kindref="compound">Same</ref> as above, except the sub-box defaults to the entire domain. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="494" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="1861" bodyend="1864"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1acb2352671b0792ecd140ea158f3d5ad9" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::BaseFab&lt; T &gt;::setValIfNot</definition>
        <argsstring>(T const &amp;val, const Box &amp;bx, const BaseFab&lt; int &gt; &amp;mask, int nstart, int num) noexcept</argsstring>
        <name>setValIfNot</name>
        <param>
          <type>T const &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nstart</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="501" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="1877" bodyend="1880"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1af1143312b97b8dabe016e041fa440e85" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::BaseFab&lt; T &gt;::setComplement</definition>
        <argsstring>(T const &amp;x, const Box &amp;b, int ns, int num) noexcept</argsstring>
        <name>setComplement</name>
        <param>
          <type>T const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ns</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num</declname>
        </param>
        <briefdescription>
<para>This function is analogous to the fourth form of setVal above, except that instead of setting values on the Box b, values are set on the complement of b in the domain. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="513" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2301" bodyend="2304"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a977d18ce746c0f9cdaa0c30d24dafc38" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt; T &gt; &amp; amrex::BaseFab&lt; T &gt;::copy</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src, const Box &amp;srcbox, int srccomp, const Box &amp;destbox, int destcomp, int numcomp) noexcept</argsstring>
        <name>copy</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>srcbox</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>destbox</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <briefdescription>
<para>The copy functions copy the contents of one <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref> into another. The destination <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref> is always the object which invokes the function. This, the most general form of copy, specifies the contents of any sub-box srcbox in <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref> src may be copied into a (possibly different) destbox in the destination <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>. Note that although the srcbox and the destbox may be disjoint, they must be the same size and shape. If the sizes differ, the copy is undefined and a runtime error results. This copy function is the only one of the copy functions to allow a copy between differing boxes. The user also specifies how many components are copied, starting at component srccomp in src and stored starting at component destcomp. The results are UNDEFINED if the src and dest are the same and the srcbox and destbox overlap. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="536" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="1885" bodyend="1907"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a2d461c954f07f4f27315007cd6142897" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt; T &gt; &amp; amrex::BaseFab&lt; T &gt;::copy</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src, int srccomp, int destcomp, int numcomp=1) noexcept</argsstring>
        <name>copy</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>As above, except the destination Box and the source Box are taken to be the entire domain of the destination. A copy of the intersecting region is performed. class. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="550" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="1920" bodyend="1923"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a6713c5a40c37784163c28eed7db1d3ae" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt; T &gt; &amp; amrex::BaseFab&lt; T &gt;::copy</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src, const Box &amp;destbox) noexcept</argsstring>
        <name>copy</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>destbox</declname>
        </param>
        <briefdescription>
<para>As above, except that the destination Box is specified, but the source Box is taken to the equal to the destination Box, and all components of the destination <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref> are copied. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="563" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="1912" bodyend="1915"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a1e8c677d4f03b86f4a6e1d1caac46b02" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>std::size_t amrex::BaseFab&lt; T &gt;::copyToMem</definition>
        <argsstring>(const Box &amp;srcbox, int srccomp, int numcomp, void *dst) const noexcept</argsstring>
        <name>copyToMem</name>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>srcbox</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>dst</declname>
        </param>
        <briefdescription>
<para>Copy from the srcbox of this Fab to raw memory and return the number of bytes copied. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="571" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2218" bodyend="2240"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a5e3dbb577a99bb74375d2e5cde801529" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
          <param>
            <type>typename BUF</type>
            <defval>T</defval>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>std::size_t amrex::BaseFab&lt; T &gt;::copyFromMem</definition>
        <argsstring>(const Box &amp;dstbox, int dstcomp, int numcomp, const void *src) noexcept</argsstring>
        <name>copyFromMem</name>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>dstbox</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dstcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>Copy from raw memory to the dstbox of this Fab and return the number of bytes copied. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="580" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2245" bodyend="2268"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a220803f71ba80b6deab7975fc4da9d03" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
          <param>
            <type>typename BUF</type>
            <defval>T</defval>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>std::size_t amrex::BaseFab&lt; T &gt;::addFromMem</definition>
        <argsstring>(const Box &amp;dstbox, int dstcomp, int numcomp, const void *src) noexcept</argsstring>
        <name>addFromMem</name>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>dstbox</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dstcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>Add from raw memory to the dstbox of this Fab and return the number of bytes copied. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="589" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2273" bodyend="2296"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a92cb12158a09c20c51ef9347c11d31e4" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt; T &gt; &amp; amrex::BaseFab&lt; T &gt;::shift</definition>
        <argsstring>(const IntVect &amp;v) noexcept</argsstring>
        <name>shift</name>
        <param>
          <type>const <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Perform shifts upon the domain of the <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>. They are completely analogous to the corresponding Box functions. There is no effect upon the array memory. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="597" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="1811" bodyend="1815"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1ad511764daeaedb9d3de8afc17ca7140c" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt; T &gt; &amp; amrex::BaseFab&lt; T &gt;::shift</definition>
        <argsstring>(int idir, int n_cell) noexcept</argsstring>
        <name>shift</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>idir</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n_cell</declname>
        </param>
        <briefdescription>
<para>Perform shifts upon the domain of the <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>. They are completely analogous to the corresponding Box functions. There is no effect upon the array memory. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="603" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="1819" bodyend="1823"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1acbd52c543782ab54cde88fa60852f563" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt; T &gt; &amp; amrex::BaseFab&lt; T &gt;::shiftHalf</definition>
        <argsstring>(int dir, int n_cell) noexcept</argsstring>
        <name>shiftHalf</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n_cell</declname>
        </param>
        <briefdescription>
<para>Perform shifts upon the domain of the <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>. They are completely analogous to the corresponding Box functions. There is no effect upon the array memory. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="609" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="1835" bodyend="1839"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a9ceff0f63f7f998ae97b1b6f8a7e3646" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt; T &gt; &amp; amrex::BaseFab&lt; T &gt;::shiftHalf</definition>
        <argsstring>(const IntVect &amp;v) noexcept</argsstring>
        <name>shiftHalf</name>
        <param>
          <type>const <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Perform shifts upon the domain of the <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>. They are completely analogous to the corresponding Box functions. There is no effect upon the array memory. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="615" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="1827" bodyend="1831"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a0cfed6fcd597be27e9d069f9e7a3d18b" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type>Real</type>
        <definition>Real amrex::BaseFab&lt; T &gt;::norminfmask</definition>
        <argsstring>(const Box &amp;subbox, const BaseFab&lt; int &gt; &amp;mask, int scomp=0, int ncomp=1) const noexcept</argsstring>
        <name>norminfmask</name>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>subbox</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="622" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2337" bodyend="2376"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1aa1282391dd2449fab71d2524cf0f74a7" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type>Real</type>
        <definition>Real amrex::BaseFab&lt; T &gt;::norm</definition>
        <argsstring>(int p, int scomp=0, int numcomp=1) const noexcept</argsstring>
        <name>norm</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Compute the Lp-norm of this FAB using components (scomp : scomp+ncomp-1). p &lt; 0 -&gt; ERROR p = 0 -&gt; infinity norm (max norm) p = 1 -&gt; sum of ABS(FAB) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="635" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2381" bodyend="2384"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a53bfa690678b7a44a6f1b8b736db232b" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type>Real</type>
        <definition>Real amrex::BaseFab&lt; T &gt;::norm</definition>
        <argsstring>(const Box &amp;subbox, int p, int scomp=0, int numcomp=1) const noexcept</argsstring>
        <name>norm</name>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>subbox</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para><ref refid="structamrex_1_1Same" kindref="compound">Same</ref> as above except only on given subbox. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="643" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2389" bodyend="2471"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1af827e9a5df2baf21d45239e49567f4c6" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::BaseFab&lt; T &gt;::abs</definition>
        <argsstring>() noexcept</argsstring>
        <name>abs</name>
        <briefdescription>
<para>Compute absolute value for all components of this FAB. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="650" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2309" bodyend="2312"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1ae730734f6c370cc53bdfb51efe618033" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::BaseFab&lt; T &gt;::abs</definition>
        <argsstring>(int comp, int numcomp=1) noexcept</argsstring>
        <name>abs</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para><ref refid="structamrex_1_1Same" kindref="compound">Same</ref> as above except only for components (comp: comp+numcomp-1) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="657" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2317" bodyend="2320"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a4f6421e1246d3830573c1865f1138f60" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::BaseFab&lt; T &gt;::abs</definition>
        <argsstring>(const Box &amp;subbox, int comp=0, int numcomp=1) noexcept</argsstring>
        <name>abs</name>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>subbox</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Calculate <ref refid="classamrex_1_1BaseFab_1af827e9a5df2baf21d45239e49567f4c6" kindref="member">abs()</ref> on subbox for given component range. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="666" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2325" bodyend="2332"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1aeb7994e6d44cea18d2b9a0b92f641b64" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T amrex::BaseFab&lt; T &gt;::min</definition>
        <argsstring>(int comp=0) const noexcept</argsstring>
        <name>min</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="structamrex_1_1Minimum" kindref="compound">Minimum</ref> value of given component. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="675" column="8" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2476" bodyend="2479"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a6a67cc88f93b200472fba8ee3ba8263c" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T amrex::BaseFab&lt; T &gt;::min</definition>
        <argsstring>(const Box &amp;subbox, int comp=0) const noexcept</argsstring>
        <name>min</name>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>subbox</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="structamrex_1_1Minimum" kindref="compound">Minimum</ref> value of given component in given subbox. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="684" column="8" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2484" bodyend="2509"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a976274fa8a099dc6ccd77fb63a3a0650" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T amrex::BaseFab&lt; T &gt;::max</definition>
        <argsstring>(int comp=0) const noexcept</argsstring>
        <name>max</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="structamrex_1_1Maximum" kindref="compound">Maximum</ref> value of given component. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="693" column="8" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2514" bodyend="2517"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a939ad0219e8ede03540eadef78ba7cbb" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T amrex::BaseFab&lt; T &gt;::max</definition>
        <argsstring>(const Box &amp;subbox, int comp=0) const noexcept</argsstring>
        <name>max</name>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>subbox</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="structamrex_1_1Maximum" kindref="compound">Maximum</ref> value of given component in given subbox. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="702" column="8" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2522" bodyend="2547"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1aabf9a731c176ed69472b109aa42e967b" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type>std::pair&lt; T, T &gt;</type>
        <definition>std::pair&lt; T, T &gt; amrex::BaseFab&lt; T &gt;::minmax</definition>
        <argsstring>(int comp=0) const noexcept</argsstring>
        <name>minmax</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="structamrex_1_1Minimum" kindref="compound">Minimum</ref> and <ref refid="structamrex_1_1Maximum" kindref="compound">Maximum</ref> of given component </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="711" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2552" bodyend="2555"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a1348ff398baf6713f6bbe44bcc1115a1" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type>std::pair&lt; T, T &gt;</type>
        <definition>std::pair&lt; T, T &gt; amrex::BaseFab&lt; T &gt;::minmax</definition>
        <argsstring>(const Box &amp;subbox, int comp=0) const noexcept</argsstring>
        <name>minmax</name>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>subbox</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="structamrex_1_1Minimum" kindref="compound">Minimum</ref> and <ref refid="structamrex_1_1Maximum" kindref="compound">Maximum</ref> of given component in given subbox. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="720" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2560" bodyend="2589"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a776fd1a3ef930d751d3399d380850f1c" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T amrex::BaseFab&lt; T &gt;::maxabs</definition>
        <argsstring>(int comp=0) const noexcept</argsstring>
        <name>maxabs</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="structamrex_1_1Maximum" kindref="compound">Maximum</ref> of the absolute value of given component. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="729" column="8" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2594" bodyend="2597"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a67147a4e532939aaab59f3d83ae93361" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T amrex::BaseFab&lt; T &gt;::maxabs</definition>
        <argsstring>(const Box &amp;subbox, int comp=0) const noexcept</argsstring>
        <name>maxabs</name>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>subbox</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="structamrex_1_1Maximum" kindref="compound">Maximum</ref> of the absolute value of given component in given subbox. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="738" column="8" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2602" bodyend="2627"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a4d9eb1a365feee57e8b622f92f42a676" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref></type>
        <definition>IntVect amrex::BaseFab&lt; T &gt;::indexFromValue</definition>
        <argsstring>(const Box &amp;subbox, int comp, T const &amp;value) const noexcept</argsstring>
        <name>indexFromValue</name>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>subbox</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="748" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2633" bodyend="2667"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1af53146ccb7317b937c89ebd12e19efd5" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref></type>
        <definition>IntVect amrex::BaseFab&lt; T &gt;::minIndex</definition>
        <argsstring>(int comp=0) const noexcept</argsstring>
        <name>minIndex</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>location of minimum value in given component. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="758" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2672" bodyend="2675"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a8d45160a5d6cf9f1329ca8b38b1aa6c7" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref></type>
        <definition>IntVect amrex::BaseFab&lt; T &gt;::minIndex</definition>
        <argsstring>(const Box &amp;subbox, int comp=0) const noexcept</argsstring>
        <name>minIndex</name>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>subbox</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>location of minimum value in given component in given subbox. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="768" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2680" bodyend="2684"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1af6d66895d4ba3fe45a6ba4705521e282" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::BaseFab&lt; T &gt;::minIndex</definition>
        <argsstring>(const Box &amp;subbox, Real &amp;min_val, IntVect &amp;min_idx, int comp=0) const noexcept</argsstring>
        <name>minIndex</name>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>subbox</declname>
        </param>
        <param>
          <type>Real &amp;</type>
          <declname>min_val</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &amp;</type>
          <declname>min_idx</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>return minimum value and location to allow efficient looping over multiple boxes. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="778" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2689" bodyend="2693"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1ad84e4433b485caf6c9cf76d87a04f4a0" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref></type>
        <definition>IntVect amrex::BaseFab&lt; T &gt;::maxIndex</definition>
        <argsstring>(int comp=0) const noexcept</argsstring>
        <name>maxIndex</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>location of maximum value in given component. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="788" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2698" bodyend="2701"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1ac69c6e4896f54d8ea5ca9fe1114c64f6" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref></type>
        <definition>IntVect amrex::BaseFab&lt; T &gt;::maxIndex</definition>
        <argsstring>(const Box &amp;subbox, int comp=0) const noexcept</argsstring>
        <name>maxIndex</name>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>subbox</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>location of maximum value in given component in given subbox. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="798" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2706" bodyend="2710"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1ac0fa2c605be671fb2f9d97dfe38cc6c8" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::BaseFab&lt; T &gt;::maxIndex</definition>
        <argsstring>(const Box &amp;subbox, Real &amp;max_value, IntVect &amp;max_idx, int comp=0) const noexcept</argsstring>
        <name>maxIndex</name>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>subbox</declname>
        </param>
        <param>
          <type>Real &amp;</type>
          <declname>max_value</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &amp;</type>
          <declname>max_idx</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>return maximum value and location to allow efficient looping over multiple boxes. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="808" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2715" bodyend="2719"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a2daea766f3544b7e920b9ca9b3cb870e" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::BaseFab&lt; T &gt;::maskLT</definition>
        <argsstring>(BaseFab&lt; int &gt; &amp;mask, T const &amp;val, int comp=0) const noexcept</argsstring>
        <name>maskLT</name>
        <param>
          <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Compute mask array with value of 1 in cells where <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref> has value less than val, 0 otherwise. mask is resized by this function. The number of cells marked with 1 returned. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="821" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2724" bodyend="2765"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a51c1b72c4a3a04fe392247242467d27f" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::BaseFab&lt; T &gt;::maskLE</definition>
        <argsstring>(BaseFab&lt; int &gt; &amp;mask, T const &amp;val, int comp=0) const noexcept</argsstring>
        <name>maskLE</name>
        <param>
          <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para><ref refid="structamrex_1_1Same" kindref="compound">Same</ref> as above except mark cells with value less than or equal to val. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="828" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2770" bodyend="2811"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a3e4a9401acaa07ed7747907ccaa18a8e" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::BaseFab&lt; T &gt;::maskEQ</definition>
        <argsstring>(BaseFab&lt; int &gt; &amp;mask, T const &amp;val, int comp=0) const noexcept</argsstring>
        <name>maskEQ</name>
        <param>
          <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para><ref refid="structamrex_1_1Same" kindref="compound">Same</ref> as above except mark cells with value equal to val. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="836" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2816" bodyend="2857"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1ae1a6b0d582503d0257d5927534619526" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::BaseFab&lt; T &gt;::maskGT</definition>
        <argsstring>(BaseFab&lt; int &gt; &amp;mask, T const &amp;val, int comp=0) const noexcept</argsstring>
        <name>maskGT</name>
        <param>
          <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para><ref refid="structamrex_1_1Same" kindref="compound">Same</ref> as above except mark cells with value greater than val. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="843" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2862" bodyend="2903"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a02d3c8e98d8d4b237eabc0ce1756fc33" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::BaseFab&lt; T &gt;::maskGE</definition>
        <argsstring>(BaseFab&lt; int &gt; &amp;mask, T const &amp;val, int comp=0) const noexcept</argsstring>
        <name>maskGE</name>
        <param>
          <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para><ref refid="structamrex_1_1Same" kindref="compound">Same</ref> as above except mark cells with value greater than or equal to val. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="850" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2908" bodyend="2949"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a0a8a30db2ab622857ba9ba7c64f940cb" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T amrex::BaseFab&lt; T &gt;::sum</definition>
        <argsstring>(int comp, int numcomp=1) const noexcept</argsstring>
        <name>sum</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Returns sum of given component of FAB state vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="858" column="8" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3194" bodyend="3197"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1ae146eaf863b19ed32754ed09757d53a3" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T amrex::BaseFab&lt; T &gt;::sum</definition>
        <argsstring>(const Box &amp;subbox, int comp, int numcomp=1) const noexcept</argsstring>
        <name>sum</name>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>subbox</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Compute sum of given component of FAB state vector in given subbox. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="865" column="8" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3202" bodyend="3205"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1ad98a82bccd4fb83e293321c508cbf8e3" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt; T &gt; &amp; amrex::BaseFab&lt; T &gt;::invert</definition>
        <argsstring>(T const &amp;r, const Box &amp;b, int comp=0, int numcomp=1) noexcept</argsstring>
        <name>invert</name>
        <param>
          <type>T const &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Most general version, specify subbox and which components. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="873" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3234" bodyend="3237"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1ad7393f53147c97d7e2ce59bacb6e90ea" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt; T &gt; &amp; amrex::BaseFab&lt; T &gt;::invert</definition>
        <argsstring>(T const &amp;r, int comp, int numcomp=1) noexcept</argsstring>
        <name>invert</name>
        <param>
          <type>T const &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>As above except on entire domain. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="880" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3226" bodyend="3229"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a2d65dc4995843b8c46bc97984cf13749" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt; T &gt; &amp; amrex::BaseFab&lt; T &gt;::negate</definition>
        <argsstring>(const Box &amp;b, int comp=0, int numcomp=1) noexcept</argsstring>
        <name>negate</name>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Negate <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>, most general. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="888" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3218" bodyend="3221"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1acf4c056e581c461ab116dd7974f82e3a" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt; T &gt; &amp; amrex::BaseFab&lt; T &gt;::negate</definition>
        <argsstring>(int comp, int numcomp=1) noexcept</argsstring>
        <name>negate</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>As above, except on entire domain. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="895" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3210" bodyend="3213"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1abb7c6d23546e6178c5c17bc87a2d5ef6" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt; T &gt; &amp; amrex::BaseFab&lt; T &gt;::plus</definition>
        <argsstring>(T const &amp;r, const Box &amp;b, int comp=0, int numcomp=1) noexcept</argsstring>
        <name>plus</name>
        <param>
          <type>T const &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Scalar addition (a[i] &lt;- a[i] + r), most general. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="903" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3250" bodyend="3253"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a30dff1ddf3809400a88f85f546ecbe84" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt; T &gt; &amp; amrex::BaseFab&lt; T &gt;::plus</definition>
        <argsstring>(T const &amp;r, int comp, int numcomp=1) noexcept</argsstring>
        <name>plus</name>
        <param>
          <type>T const &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>As above, except on entire domain. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="911" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3242" bodyend="3245"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1af7a3fdd2cfd65a5f9a2d7e2126973917" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt; T &gt; &amp; amrex::BaseFab&lt; T &gt;::plus</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src, int srccomp, int destcomp, int numcomp=1) noexcept</argsstring>
        <name>plus</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Add src components (srccomp:srccomp+numcomp-1) to this FABs components (destcomp:destcomp+numcomp-1) where the two FABs intersect. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="923" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3258" bodyend="3261"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1aa9c3a519a02df76b99bef93795d6cba3" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt; T &gt; &amp; amrex::BaseFab&lt; T &gt;::plus</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src, const Box &amp;subbox, int srccomp, int destcomp, int numcomp=1) noexcept</argsstring>
        <name>plus</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>subbox</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para><ref refid="structamrex_1_1Same" kindref="compound">Same</ref> as above except addition is restricted to intersection of subbox and src FAB. NOTE: subbox must be contained in this FAB. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="934" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3276" bodyend="3280"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a8eac05318ddeb7bf09d5c1b25acc6d55" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt; T &gt; &amp; amrex::BaseFab&lt; T &gt;::plus</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src, const Box &amp;srcbox, const Box &amp;destbox, int srccomp, int destcomp, int numcomp=1) noexcept</argsstring>
        <name>plus</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>srcbox</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>destbox</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Add srcbox region of src FAB to destbox region of this FAB. The srcbox and destbox must be same size. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="944" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3297" bodyend="3318"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a3dc96c01f9f3d24110fa50e53e93e1b0" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt; T &gt; &amp; amrex::BaseFab&lt; T &gt;::atomicAdd</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;x) noexcept</argsstring>
        <name>atomicAdd</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Atomic FAB addition (a[i] &lt;- a[i] + b[i]). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="953" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2954" bodyend="2959"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a129c6d062f25b04c99aeef00c129fde8" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt; T &gt; &amp; amrex::BaseFab&lt; T &gt;::atomicAdd</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src, int srccomp, int destcomp, int numcomp=1) noexcept</argsstring>
        <name>atomicAdd</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Atomically add src components (srccomp:srccomp+numcomp-1) to this FABs components (destcomp:destcomp+numcomp-1) where the two FABs intersect. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="965" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3266" bodyend="3271"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1aa2775774e0005f2e3d56acc4d23c44a1" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt; T &gt; &amp; amrex::BaseFab&lt; T &gt;::atomicAdd</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src, const Box &amp;subbox, int srccomp, int destcomp, int numcomp=1) noexcept</argsstring>
        <name>atomicAdd</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>subbox</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para><ref refid="structamrex_1_1Same" kindref="compound">Same</ref> as above except addition is restricted to intersection of subbox and src FAB. NOTE: subbox must be contained in this FAB. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="976" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3285" bodyend="3292"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1afa1f8f3a9048c2da47559555e5cc7e43" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt; T &gt; &amp; amrex::BaseFab&lt; T &gt;::atomicAdd</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src, const Box &amp;srcbox, const Box &amp;destbox, int srccomp, int destcomp, int numcomp=1) noexcept</argsstring>
        <name>atomicAdd</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>srcbox</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>destbox</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Atomically add srcbox region of src FAB to destbox region of this FAB. The srcbox and destbox must be same size. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="987" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3323" bodyend="3345"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a1a1bc23a87d40ff55f8fcec600b0054b" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt; T &gt; &amp; amrex::BaseFab&lt; T &gt;::lockAdd</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src, const Box &amp;srcbox, const Box &amp;destbox, int srccomp, int destcomp, int numcomp) noexcept</argsstring>
        <name>lockAdd</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>srcbox</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>destbox</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <briefdescription>
<para>Atomically add srcbox region of src FAB to destbox region of this FAB. The srcbox and destbox must be same size. When OMP is on, this uses OMP locks in the implementation and it&apos;s usually faster than atomicAdd. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="1000" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3350" bodyend="3449"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a051da6643de6a48ee66ec046d560033a" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt; T &gt; &amp; amrex::BaseFab&lt; T &gt;::saxpy</definition>
        <argsstring>(T a, const BaseFab&lt; T &gt; &amp;x, const Box &amp;srcbox, const Box &amp;destbox, int srccomp, int destcomp, int numcomp=1) noexcept</argsstring>
        <name>saxpy</name>
        <param>
          <type>T</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>srcbox</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>destbox</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>FAB SAXPY (y[i] &lt;- y[i] + a * x[i]), in place. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="1009" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2964" bodyend="2986"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a8e5c589a24384ac09b58364b7b7d45a7" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt; T &gt; &amp; amrex::BaseFab&lt; T &gt;::saxpy</definition>
        <argsstring>(T a, const BaseFab&lt; T &gt; &amp;x) noexcept</argsstring>
        <name>saxpy</name>
        <param>
          <type>T</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>FAB SAXPY (y[i] &lt;- y[i] + a * x[i]), in place. All components. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="1017" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2991" bodyend="2996"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a588b01925c451678d621fe58797a5bd7" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt; T &gt; &amp; amrex::BaseFab&lt; T &gt;::xpay</definition>
        <argsstring>(T a, const BaseFab&lt; T &gt; &amp;x, const Box &amp;srcbox, const Box &amp;destbox, int srccomp, int destcomp, int numcomp=1) noexcept</argsstring>
        <name>xpay</name>
        <param>
          <type>T</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>srcbox</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>destbox</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>FAB XPAY (y[i] &lt;- x[i] + a * y[i]) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="1025" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3001" bodyend="3024"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a2b1536046ed1e2201f48955b47243327" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt; T &gt; &amp; amrex::BaseFab&lt; T &gt;::addproduct</definition>
        <argsstring>(const Box &amp;destbox, int destcomp, int numcomp, const BaseFab&lt; T &gt; &amp;src1, int comp1, const BaseFab&lt; T &gt; &amp;src2, int comp2) noexcept</argsstring>
        <name>addproduct</name>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>destbox</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src1</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp1</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src2</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp2</declname>
        </param>
        <briefdescription>
<para>y[i] &lt;- y[i] + x1[i] * x2[i]) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="1034" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3029" bodyend="3048"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a6d0bff982fafed20210cfdd290c51922" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt; T &gt; &amp; amrex::BaseFab&lt; T &gt;::minus</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src, int srccomp, int destcomp, int numcomp=1) noexcept</argsstring>
        <name>minus</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Subtract src components (srccomp:srccomp+numcomp-1) to this FABs components (destcomp:destcomp+numcomp-1) where the two FABs intersect. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="1048" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3454" bodyend="3457"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1aa4e7563980826bc199c9f0189b6c9b26" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt; T &gt; &amp; amrex::BaseFab&lt; T &gt;::minus</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src, const Box &amp;subbox, int srccomp, int destcomp, int numcomp=1) noexcept</argsstring>
        <name>minus</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>subbox</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para><ref refid="structamrex_1_1Same" kindref="compound">Same</ref> as above except subtraction is restricted to intersection of subbox and src FAB. NOTE: subbox must be contained in this FAB. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="1059" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3462" bodyend="3465"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a4f4c18fd897e957e12ccb7597d82764b" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt; T &gt; &amp; amrex::BaseFab&lt; T &gt;::minus</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src, const Box &amp;srcbox, const Box &amp;destbox, int srccomp, int destcomp, int numcomp=1) noexcept</argsstring>
        <name>minus</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>srcbox</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>destbox</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Subtract srcbox region of src FAB from destbox region of this FAB. srcbox and destbox must be same size. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="1070" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3470" bodyend="3491"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a3d568e9a805b719ccf750d68e9f0b563" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt; T &gt; &amp; amrex::BaseFab&lt; T &gt;::mult</definition>
        <argsstring>(T const &amp;r, int comp, int numcomp=1) noexcept</argsstring>
        <name>mult</name>
        <param>
          <type>T const &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Scalar multiplication, except control which components are multiplied. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="1079" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3496" bodyend="3499"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a77c23670c3820173af82382063a8525d" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt; T &gt; &amp; amrex::BaseFab&lt; T &gt;::mult</definition>
        <argsstring>(T const &amp;r, const Box &amp;b, int comp=0, int numcomp=1) noexcept</argsstring>
        <name>mult</name>
        <param>
          <type>T const &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>As above, except specify sub-box. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="1088" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3504" bodyend="3507"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a72337bc09214fce473bf77e724ef9e93" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt; T &gt; &amp; amrex::BaseFab&lt; T &gt;::mult</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src, int srccomp, int destcomp, int numcomp=1) noexcept</argsstring>
        <name>mult</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Multiply src components (srccomp:srccomp+numcomp-1) with this FABs components (destcomp:destcomp+numcomp-1) where the two FABs intersect. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="1100" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3512" bodyend="3515"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a986a4f2008cd82f26730291a78bd5d28" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt; T &gt; &amp; amrex::BaseFab&lt; T &gt;::mult</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src, const Box &amp;subbox, int srccomp, int destcomp, int numcomp=1) noexcept</argsstring>
        <name>mult</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>subbox</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para><ref refid="structamrex_1_1Same" kindref="compound">Same</ref> as above except multiplication is restricted to intersection of subbox and src FAB. NOTE: subbox must be contained in this FAB. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="1112" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3520" bodyend="3523"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a7df0d47826c9b346e9a5df0ff0a32666" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt; T &gt; &amp; amrex::BaseFab&lt; T &gt;::mult</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src, const Box &amp;srcbox, const Box &amp;destbox, int srccomp, int destcomp, int numcomp=1) noexcept</argsstring>
        <name>mult</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>srcbox</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>destbox</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Multiply srcbox region of src FAB with destbox region of this FAB. The srcbox and destbox must be same size. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="1124" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3528" bodyend="3549"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a9d0d2a00cc4e3fa23e019b24016b912b" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt; T &gt; &amp; amrex::BaseFab&lt; T &gt;::divide</definition>
        <argsstring>(T const &amp;r, int comp, int numcomp=1) noexcept</argsstring>
        <name>divide</name>
        <param>
          <type>T const &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>As above except specify which components. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="1133" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3554" bodyend="3557"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a3a8094b23b240faf25973fea41ef0ef0" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt; T &gt; &amp; amrex::BaseFab&lt; T &gt;::divide</definition>
        <argsstring>(T const &amp;r, const Box &amp;b, int comp=0, int numcomp=1) noexcept</argsstring>
        <name>divide</name>
        <param>
          <type>T const &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>As above except specify sub-box. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="1141" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3562" bodyend="3565"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a244a45e4bf0eba8069ab27cfe5feed67" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt; T &gt; &amp; amrex::BaseFab&lt; T &gt;::divide</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src, int srccomp, int destcomp, int numcomp=1) noexcept</argsstring>
        <name>divide</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>This FAB is numerator, src FAB is denominator divide src components (srccomp:srccomp+numcomp-1) into this FABs components (destcomp:destcomp+numcomp-1) where the two FABs intersect. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="1154" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3570" bodyend="3573"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a755fa68b5cfdd5fadd88a234766c271c" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt; T &gt; &amp; amrex::BaseFab&lt; T &gt;::divide</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src, const Box &amp;subbox, int srccomp, int destcomp, int numcomp=1) noexcept</argsstring>
        <name>divide</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>subbox</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para><ref refid="structamrex_1_1Same" kindref="compound">Same</ref> as above except division is restricted to intersection of subbox and src FAB. NOTE: subbox must be contained in this FAB. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="1165" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3578" bodyend="3581"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a8418cc9903556d471e1d637cb49eef1d" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt; T &gt; &amp; amrex::BaseFab&lt; T &gt;::divide</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src, const Box &amp;srcbox, const Box &amp;destbox, int srccomp, int destcomp, int numcomp=1) noexcept</argsstring>
        <name>divide</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>srcbox</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>destbox</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>destbox region of this FAB is numerator. srcbox regions of src FAB is denominator. srcbox and destbox must be same size. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="1176" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3586" bodyend="3607"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1ad858d100150acd894cee6a1de10d61fb" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt; T &gt; &amp; amrex::BaseFab&lt; T &gt;::protected_divide</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src) noexcept</argsstring>
        <name>protected_divide</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>Divide wherever &quot;src&quot; is &quot;true&quot; or &quot;non-zero&quot;. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="1186" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3612" bodyend="3617"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a45109ddf32816d958a662cd23e576d4f" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt; T &gt; &amp; amrex::BaseFab&lt; T &gt;::protected_divide</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src, int srccomp, int destcomp, int numcomp=1) noexcept</argsstring>
        <name>protected_divide</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Divide wherever &quot;src&quot; is &quot;true&quot; or &quot;non-zero&quot;. This FAB is numerator, src FAB is denominator divide src components (srccomp:srccomp+numcomp-1) into this FABs components (destcomp:destcomp+numcomp-1) where the two FABs intersect. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="1200" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3622" bodyend="3627"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a9b6d8b5d08a022612232194b8c3f098d" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt; T &gt; &amp; amrex::BaseFab&lt; T &gt;::protected_divide</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src, const Box &amp;subbox, int srccomp, int destcomp, int numcomp=1) noexcept</argsstring>
        <name>protected_divide</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>subbox</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Divide wherever &quot;src&quot; is &quot;true&quot; or &quot;non-zero&quot;. <ref refid="structamrex_1_1Same" kindref="compound">Same</ref> as above except division is restricted to intersection of subbox and src FAB. NOTE: subbox must be contained in this FAB. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="1213" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3632" bodyend="3639"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1ab2918e0d3ea4dae441569909e73a8db7" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt; T &gt; &amp; amrex::BaseFab&lt; T &gt;::protected_divide</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src, const Box &amp;srcbox, const Box &amp;destbox, int srccomp, int destcomp, int numcomp=1) noexcept</argsstring>
        <name>protected_divide</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>srcbox</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>destbox</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Divide wherever &quot;src&quot; is &quot;true&quot; or &quot;non-zero&quot;. destbox region of this FAB is numerator. srcbox regions of src FAB is denominator. srcbox and destbox must be same size. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="1226" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3644" bodyend="3667"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1af49fda526f1f93ba846db273906cd29b" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt; T &gt; &amp; amrex::BaseFab&lt; T &gt;::linInterp</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;f1, const Box &amp;b1, int comp1, const BaseFab&lt; T &gt; &amp;f2, const Box &amp;b2, int comp2, Real t1, Real t2, Real t, const Box &amp;b, int comp, int numcomp=1) noexcept</argsstring>
        <name>linInterp</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>b1</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp1</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>b2</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp2</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>t1</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>t2</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>t</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Linear interpolation / extrapolation. Result is (t2-t)/(t2-t1)*f1 + (t-t1)/(t2-t1)*f2 Data is taken from b1 region of f1, b2 region of f2 and stored in b region of this FAB. Boxes b, b1 and b2 must be the same size. Data is taken from component comp1 of f1, comp2 of f2, and stored in component comp of this FAB. This FAB is returned as a reference for chaining. </para>
        </briefdescription>
        <detaileddescription>
<para>Linear Interpolation / Extrapolation Result is (t2-t)/(t2-t1)*f1 + (t-t1)/(t2-t1)*f2 Data is taken from b1 region of f1, b2 region of f2 and stored in b region of this FAB. Boxes b, b1 and b2 must be the same size. Data is taken from component comp1 of f1, comp2 of f2, and stored in component comp of this FAB. This fab is returned as a reference for chaining. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="1244" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3682" bodyend="3696"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a666cac025454c374a1e2db655b133aa9" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt; T &gt; &amp; amrex::BaseFab&lt; T &gt;::linInterp</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;f1, int comp1, const BaseFab&lt; T &gt; &amp;f2, int comp2, Real t1, Real t2, Real t, const Box &amp;b, int comp, int numcomp=1) noexcept</argsstring>
        <name>linInterp</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp1</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp2</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>t1</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>t2</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>t</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Version of <ref refid="classamrex_1_1BaseFab_1af49fda526f1f93ba846db273906cd29b" kindref="member">linInterp()</ref> in which b, b1, &amp; b2 are the same. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="1255" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3701" bodyend="3715"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a34dd0c1642740071a0bf70d986e9f52a" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt; T &gt; &amp; amrex::BaseFab&lt; T &gt;::linComb</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;f1, const Box &amp;b1, int comp1, const BaseFab&lt; T &gt; &amp;f2, const Box &amp;b2, int comp2, Real alpha, Real beta, const Box &amp;b, int comp, int numcomp=1) noexcept</argsstring>
        <name>linComb</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>b1</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp1</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>b2</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp2</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Linear combination. Result is alpha*f1 + beta*f2. Data is taken from b1 region of f1, b2 region of f2 and stored in b region of this FAB. Boxes b, b1 and b2 must be the same size. Data is taken from component comp1 of f1, comp2 of f2, and stored in component comp of this FAB. This FAB is returned as a reference for chaining. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="1274" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3053" bodyend="3085"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a9cd1fd0c353673dae4a5138f5ea79f1e" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T amrex::BaseFab&lt; T &gt;::dot</definition>
        <argsstring>(const Box &amp;xbx, int xcomp, const BaseFab&lt; T &gt; &amp;y, const Box &amp;ybx, int ycomp, int numcomp=1) const noexcept</argsstring>
        <name>dot</name>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>xbx</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>xcomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>ybx</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ycomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Dot product of x (i.e.,this) and y. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="1285" column="8" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3090" bodyend="3135"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1ae238c88f700fceb3525dccccc6888135" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T amrex::BaseFab&lt; T &gt;::dotmask</definition>
        <argsstring>(const BaseFab&lt; int &gt; &amp;mask, const Box &amp;xbx, int xcomp, const BaseFab&lt; T &gt; &amp;y, const Box &amp;ybx, int ycomp, int numcomp) const noexcept</argsstring>
        <name>dotmask</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>xbx</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>xcomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>ybx</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ycomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="1293" column="8" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3140" bodyend="3189"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a70a02b9f0a717280df913cead8729dbc" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BaseFab&lt; T &gt;::SetBoxType</definition>
        <argsstring>(const IndexType &amp;typ) noexcept</argsstring>
        <name>SetBoxType</name>
        <param>
          <type>const <ref refid="namespaceamrex_1ad35342b486ef07ba6108169268169296" kindref="member">IndexType</ref> &amp;</type>
          <declname>typ</declname>
        </param>
        <briefdescription>
<para>Change the Box type without change the length. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="1298" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="1298" bodyend="1298"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a898fc7d64ff6e5e26fb612bcbd6a111d" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::BaseFab&lt; T &gt;::setVal</definition>
        <argsstring>(T const &amp;val) noexcept</argsstring>
        <name>setVal</name>
        <param>
          <type>T const &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set value on the whole domain and all components. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="1310" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3724" bodyend="3727"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a450a1a7a50c796a088f93818ce0003cf" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::BaseFab&lt; T &gt;::setVal</definition>
        <argsstring>(T const &amp;x, Box const &amp;bx, DestComp dcomp, NumComps ncomp) noexcept</argsstring>
        <name>setVal</name>
        <param>
          <type>T const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1DestComp" kindref="compound">DestComp</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1NumComps" kindref="compound">NumComps</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
<para>Do nothing if bx is empty. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="1318" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3732" bodyend="3740"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a5373ee74f195b1f31ffc9b37502bcdb4" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::BaseFab&lt; T &gt;::setValIf</definition>
        <argsstring>(T const &amp;val, const BaseFab&lt; int &gt; &amp;mask) noexcept</argsstring>
        <name>setValIf</name>
        <param>
          <type>T const &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="1325" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3745" bodyend="3748"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a49749f076cd8c9e2bed72a9d7ac1041f" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::BaseFab&lt; T &gt;::setValIf</definition>
        <argsstring>(T const &amp;val, Box const &amp;bx, const BaseFab&lt; int &gt; &amp;mask, DestComp dcomp, NumComps ncomp) noexcept</argsstring>
        <name>setValIf</name>
        <param>
          <type>T const &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1DestComp" kindref="compound">DestComp</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1NumComps" kindref="compound">NumComps</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
<para>Do nothing if bx is empty. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="1333" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3753" bodyend="3762"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a573b66fa2db975827a4da4bce09d893e" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::BaseFab&lt; T &gt;::setValIfNot</definition>
        <argsstring>(T const &amp;val, const BaseFab&lt; int &gt; &amp;mask) noexcept</argsstring>
        <name>setValIfNot</name>
        <param>
          <type>T const &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="1340" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3767" bodyend="3770"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1ac78f21924ff160a279d17ae73351c05b" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::BaseFab&lt; T &gt;::setValIfNot</definition>
        <argsstring>(T const &amp;val, Box const &amp;bx, const BaseFab&lt; int &gt; &amp;mask, DestComp dcomp, NumComps ncomp) noexcept</argsstring>
        <name>setValIfNot</name>
        <param>
          <type>T const &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1DestComp" kindref="compound">DestComp</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1NumComps" kindref="compound">NumComps</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
<para>Do nothing if bx is empty. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="1348" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3775" bodyend="3784"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a7c9e5cad84edcb3888480abe8d1df7bc" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::BaseFab&lt; T &gt;::setComplement</definition>
        <argsstring>(T const &amp;x, Box const &amp;bx, DestComp dcomp, NumComps ncomp) noexcept</argsstring>
        <name>setComplement</name>
        <param>
          <type>T const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1DestComp" kindref="compound">DestComp</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1NumComps" kindref="compound">NumComps</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
<para>setVal on the complement of bx in the fab&apos;s domain </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="1356" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3789" bodyend="3810"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a2780bcacf15ff9c08602ddc8fd279434" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt; T &gt; &amp; amrex::BaseFab&lt; T &gt;::copy</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src) noexcept</argsstring>
        <name>copy</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>copy is performed on the intersection of dest and src fabs. All components of dest fab are copied. src fab must have enough components (more is OK). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="1368" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3815" bodyend="3819"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a08ef88a8fe68f56114c7a647c04772bd" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt; T &gt; &amp; amrex::BaseFab&lt; T &gt;::copy</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src, Box bx, SrcComp scomp, DestComp dcomp, NumComps ncomp) noexcept</argsstring>
        <name>copy</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref></type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1SrcComp" kindref="compound">SrcComp</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1DestComp" kindref="compound">DestComp</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1NumComps" kindref="compound">NumComps</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
<para>Do nothing if bx does not intersect with src fab. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="1376" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3824" bodyend="3841"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a2e3c0c27f4451b4962368e70bb9c0825" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt; T &gt; &amp; amrex::BaseFab&lt; T &gt;::plus</definition>
        <argsstring>(T const &amp;val) noexcept</argsstring>
        <name>plus</name>
        <param>
          <type>T const &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Scalar addition on the whole domain and all components. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="1384" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3846" bodyend="3849"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a7c31f46231419fb8c062439a11694b03" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt; T &gt; &amp; amrex::BaseFab&lt; T &gt;::operator+=</definition>
        <argsstring>(T const &amp;val) noexcept</argsstring>
        <name>operator+=</name>
        <param>
          <type>T const &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="1391" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3854" bodyend="3857"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1afa601e460f4af5ec79144dbcd527ff58" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt; T &gt; &amp; amrex::BaseFab&lt; T &gt;::plus</definition>
        <argsstring>(T const &amp;val, Box const &amp;bx, DestComp dcomp, NumComps ncomp) noexcept</argsstring>
        <name>plus</name>
        <param>
          <type>T const &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1DestComp" kindref="compound">DestComp</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1NumComps" kindref="compound">NumComps</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
<para>Do nothing if bx is empty. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="1399" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3862" bodyend="3873"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1ae637024575b35a0f95b58020e31b79ac" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt; T &gt; &amp; amrex::BaseFab&lt; T &gt;::plus</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src) noexcept</argsstring>
        <name>plus</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fab addition is performed on the intersection of dest and src fabs. All components of dest fab are copied. src fab must have enough components (more is OK). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="1410" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3878" bodyend="3881"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a0e5226efe7308e09b4464b4ae91aa6ff" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt; T &gt; &amp; amrex::BaseFab&lt; T &gt;::operator+=</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src) noexcept</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="1417" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3886" bodyend="3889"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a56197b4668f634207c4031bcd9e05909" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt; T &gt; &amp; amrex::BaseFab&lt; T &gt;::plus</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src, Box bx, SrcComp scomp, DestComp dcomp, NumComps ncomp) noexcept</argsstring>
        <name>plus</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref></type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1SrcComp" kindref="compound">SrcComp</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1DestComp" kindref="compound">DestComp</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1NumComps" kindref="compound">NumComps</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
<para>Do nothing if bx does not intersect with src fab. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="1425" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3894" bodyend="3911"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a2cafb2b37fd53db25b7ae67bc8e3eecd" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt; T &gt; &amp; amrex::BaseFab&lt; T &gt;::minus</definition>
        <argsstring>(T const &amp;val) noexcept</argsstring>
        <name>minus</name>
        <param>
          <type>T const &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Scalar subtraction on the whole domain and all components. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="1433" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3916" bodyend="3919"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a48a7d3febdafd19ca651c5eed88147cd" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt; T &gt; &amp; amrex::BaseFab&lt; T &gt;::operator-=</definition>
        <argsstring>(T const &amp;val) noexcept</argsstring>
        <name>operator-=</name>
        <param>
          <type>T const &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="1440" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3924" bodyend="3927"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a841032e4c22463cfc3acc7f6e383384d" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt; T &gt; &amp; amrex::BaseFab&lt; T &gt;::minus</definition>
        <argsstring>(T const &amp;val, Box const &amp;bx, DestComp dcomp, NumComps ncomp) noexcept</argsstring>
        <name>minus</name>
        <param>
          <type>T const &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1DestComp" kindref="compound">DestComp</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1NumComps" kindref="compound">NumComps</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
<para>Do nothing if bx is empty. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="1448" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3932" bodyend="3943"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a5f90e282b02c4e55e3568396ae439235" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt; T &gt; &amp; amrex::BaseFab&lt; T &gt;::minus</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src) noexcept</argsstring>
        <name>minus</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fab subtraction is performed on the intersection of dest and src fabs. All components of dest fab are copied. src fab must have enough components (more is OK). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="1459" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3948" bodyend="3951"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a7bf50c91d4dc7df9c983947f84da3dfb" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt; T &gt; &amp; amrex::BaseFab&lt; T &gt;::operator-=</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src) noexcept</argsstring>
        <name>operator-=</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="1466" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3956" bodyend="3959"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a18ae3e9b17daaf81946b264928babfb6" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt; T &gt; &amp; amrex::BaseFab&lt; T &gt;::minus</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src, Box bx, SrcComp scomp, DestComp dcomp, NumComps ncomp) noexcept</argsstring>
        <name>minus</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref></type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1SrcComp" kindref="compound">SrcComp</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1DestComp" kindref="compound">DestComp</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1NumComps" kindref="compound">NumComps</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
<para>Do nothing if bx does not intersect with src fab. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="1474" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3964" bodyend="3981"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1ac7dbe04481b0bd6c6f532fc2d06f95d1" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt; T &gt; &amp; amrex::BaseFab&lt; T &gt;::mult</definition>
        <argsstring>(T const &amp;val) noexcept</argsstring>
        <name>mult</name>
        <param>
          <type>T const &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Scalar multiplication on the whole domain and all components. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="1482" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3986" bodyend="3989"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a397a547f55264106c669f9ecbecf8897" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt; T &gt; &amp; amrex::BaseFab&lt; T &gt;::operator*=</definition>
        <argsstring>(T const &amp;val) noexcept</argsstring>
        <name>operator*=</name>
        <param>
          <type>T const &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="1489" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="3994" bodyend="3997"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a30f381aceead942f8c703b4c5bba99ab" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt; T &gt; &amp; amrex::BaseFab&lt; T &gt;::mult</definition>
        <argsstring>(T const &amp;val, Box const &amp;bx, DestComp dcomp, NumComps ncomp) noexcept</argsstring>
        <name>mult</name>
        <param>
          <type>T const &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1DestComp" kindref="compound">DestComp</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1NumComps" kindref="compound">NumComps</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
<para>Do nothing if bx is empty. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="1497" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="4002" bodyend="4013"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a4e596c1fdc1cdef0bfd6a60cd3d3b81a" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt; T &gt; &amp; amrex::BaseFab&lt; T &gt;::mult</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src) noexcept</argsstring>
        <name>mult</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fab multiplication is performed on the intersection of dest and src fabs. All components of dest fab are copied. src fab must have enough components (more is OK). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="1508" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="4018" bodyend="4021"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a7433945e87d1450ad2aedd284a1af52b" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt; T &gt; &amp; amrex::BaseFab&lt; T &gt;::operator*=</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src) noexcept</argsstring>
        <name>operator*=</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="1515" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="4026" bodyend="4029"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a31b9d3f58d3529cc2ac64dab553eb294" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt; T &gt; &amp; amrex::BaseFab&lt; T &gt;::mult</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src, Box bx, SrcComp scomp, DestComp dcomp, NumComps ncomp) noexcept</argsstring>
        <name>mult</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref></type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1SrcComp" kindref="compound">SrcComp</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1DestComp" kindref="compound">DestComp</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1NumComps" kindref="compound">NumComps</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
<para>Do nothing if bx does not intersect with src fab. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="1523" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="4034" bodyend="4051"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a0f2ae3ab88fb6542eb2c11990f29ef86" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt; T &gt; &amp; amrex::BaseFab&lt; T &gt;::divide</definition>
        <argsstring>(T const &amp;val) noexcept</argsstring>
        <name>divide</name>
        <param>
          <type>T const &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Scalar division on the whole domain and all components. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="1531" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="4056" bodyend="4059"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1aaa2bf19636336c318059fd497e35c023" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt; T &gt; &amp; amrex::BaseFab&lt; T &gt;::operator/=</definition>
        <argsstring>(T const &amp;val) noexcept</argsstring>
        <name>operator/=</name>
        <param>
          <type>T const &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="1538" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="4064" bodyend="4067"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a9541126c9461236acb64d2f0b32a1781" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt; T &gt; &amp; amrex::BaseFab&lt; T &gt;::divide</definition>
        <argsstring>(T const &amp;val, Box const &amp;bx, DestComp dcomp, NumComps ncomp) noexcept</argsstring>
        <name>divide</name>
        <param>
          <type>T const &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1DestComp" kindref="compound">DestComp</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1NumComps" kindref="compound">NumComps</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
<para>Do nothing if bx is empty. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="1546" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="4072" bodyend="4083"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1ae979617b60ec6cd4d9b5d14dd512b3c2" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt; T &gt; &amp; amrex::BaseFab&lt; T &gt;::divide</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src) noexcept</argsstring>
        <name>divide</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fab division is performed on the intersection of dest and src fabs. All components of dest fab are copied. src fab must have enough components (more is OK). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="1557" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="4088" bodyend="4091"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1ae2402a734250fad951d41376d469365a" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt; T &gt; &amp; amrex::BaseFab&lt; T &gt;::operator/=</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src) noexcept</argsstring>
        <name>operator/=</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="1564" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="4096" bodyend="4099"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1acb13bca4e903870c960bbe7cc0880cec" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt; T &gt; &amp; amrex::BaseFab&lt; T &gt;::divide</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src, Box bx, SrcComp scomp, DestComp dcomp, NumComps ncomp) noexcept</argsstring>
        <name>divide</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref></type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1SrcComp" kindref="compound">SrcComp</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1DestComp" kindref="compound">DestComp</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1NumComps" kindref="compound">NumComps</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
<para>Do nothing if bx does not intersect with src fab. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="1572" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="4104" bodyend="4121"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a5f348c3d0404aa11bb71c5252cc6efe9" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt; T &gt; &amp; amrex::BaseFab&lt; T &gt;::negate</definition>
        <argsstring>() noexcept</argsstring>
        <name>negate</name>
        <briefdescription>
<para>on the whole domain and all components </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="1580" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="4126" bodyend="4129"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1aaf765bafa403ca72a2f136a6efff2b14" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt; T &gt; &amp; amrex::BaseFab&lt; T &gt;::negate</definition>
        <argsstring>(const Box &amp;bx, DestComp dcomp, NumComps ncomp) noexcept</argsstring>
        <name>negate</name>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1DestComp" kindref="compound">DestComp</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1NumComps" kindref="compound">NumComps</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="1587" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="4134" bodyend="4145"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1adc3c76cad27b8ebcac50f472ee28086a" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt; T &gt; &amp; amrex::BaseFab&lt; T &gt;::invert</definition>
        <argsstring>(T const &amp;r) noexcept</argsstring>
        <name>invert</name>
        <param>
          <type>T const &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Fab &lt;- Fab/r on the whole domain and all components. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="1595" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="4150" bodyend="4153"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a3d7a22be04a9f14666b5b6dea43c7aab" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt; T &gt; &amp; amrex::BaseFab&lt; T &gt;::invert</definition>
        <argsstring>(T const &amp;r, const Box &amp;bx, DestComp dcomp, NumComps ncomp) noexcept</argsstring>
        <name>invert</name>
        <param>
          <type>T const &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1DestComp" kindref="compound">DestComp</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1NumComps" kindref="compound">NumComps</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="1602" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="4158" bodyend="4169"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a768eeb824dfd37e3b53c00d79155b36b" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T amrex::BaseFab&lt; T &gt;::sum</definition>
        <argsstring>(const Box &amp;bx, DestComp dcomp, NumComps ncomp) const noexcept</argsstring>
        <name>sum</name>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1DestComp" kindref="compound">DestComp</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1NumComps" kindref="compound">NumComps</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
<para>Sum. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="1610" column="8" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="4174" bodyend="4206"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a6e60b15550e6ba0b5bf63c3ff825232a" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T amrex::BaseFab&lt; T &gt;::dot</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src, const Box &amp;bx, SrcComp scomp, DestComp dcomp, NumComps ncomp) const noexcept</argsstring>
        <name>dot</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1SrcComp" kindref="compound">SrcComp</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1DestComp" kindref="compound">DestComp</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1NumComps" kindref="compound">NumComps</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
<para>Dot product of two Fabs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="1618" column="8" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="4211" bodyend="4246"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1ab78500dde194e48f6e5c50593a7c678a" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T amrex::BaseFab&lt; T &gt;::dot</definition>
        <argsstring>(const Box &amp;bx, int destcomp, int numcomp) const noexcept</argsstring>
        <name>dot</name>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <briefdescription>
<para>Int wrapper for dot. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="1626" column="8" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="4251" bodyend="4254"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a7dcaef3f1c196a9b0fd30d0cda3d6f8e" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T amrex::BaseFab&lt; T &gt;::dot</definition>
        <argsstring>(const Box &amp;bx, DestComp dcomp, NumComps ncomp) const noexcept</argsstring>
        <name>dot</name>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1DestComp" kindref="compound">DestComp</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1NumComps" kindref="compound">NumComps</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
<para>Dot product. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="1634" column="8" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="4260" bodyend="4292"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a8b0abe9713e52fd03cfb469278dc223c" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T amrex::BaseFab&lt; T &gt;::dotmask</definition>
        <argsstring>(const BaseFab&lt; T &gt; &amp;src, const Box &amp;bx, const BaseFab&lt; int &gt; &amp;mask, SrcComp scomp, DestComp dcomp, NumComps ncomp) const noexcept</argsstring>
        <name>dotmask</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1SrcComp" kindref="compound">SrcComp</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1DestComp" kindref="compound">DestComp</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1NumComps" kindref="compound">NumComps</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
<para>Dot product of two Fabs with mask. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="1642" column="8" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="4297" bodyend="4337"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a197583c6096b348de15dcdb671457aee" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
            <declname>run_on</declname>
            <defname>run_on</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
        <definition>BaseFab&lt;T&gt;&amp; amrex::BaseFab&lt; T &gt;::operator=</definition>
        <argsstring>(T const &amp;t) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type>T const &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="2090" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="2090" bodyend="2094"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a1d6dfeb0de1a785895b2a26e05c8ce4a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::BaseFab&lt; T &gt;::Initialize</definition>
        <argsstring>()</argsstring>
        <name>Initialize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="235" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a4b42e2b61ac6d8050def0a5e9bde849f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::BaseFab&lt; T &gt;::Finalize</definition>
        <argsstring>()</argsstring>
        <name>Finalize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="236" column="17"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classamrex_1_1BaseFab_1a35dc22f1d61f4fb05ab75ae93f683d14" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BaseFab&lt; T &gt;::define</definition>
        <argsstring>()</argsstring>
        <name>define</name>
        <briefdescription>
<para>Allocates memory for the BaseFab&lt;T&gt;. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="1647" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="1927" bodyend="1959"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A FortranArrayBox(FAB)-like object. </para>
    </briefdescription>
    <detaileddescription>
<para><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref> emulates the Fortran array concept. Useful operations can be performed upon BaseFabs in C++, and they provide a convenient interface to Fortran when it is necessary to retreat into that language.</para>
<para><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref> is a template class. Through use of the template, a <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref> may be based upon any class. So far at least, most applications have been based upon simple types like integers, real*4s, or real*8s. Most applications do not use BaseFabs directly, but utilize specialized classes derived from <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>.</para>
<para>Classes derived from <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref> include <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref>, <ref refid="classamrex_1_1IArrayBox" kindref="compound">IArrayBox</ref>, <ref refid="classamrex_1_1TagBox" kindref="compound">TagBox</ref>, <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref>, <ref refid="classamrex_1_1EBFArrayBox" kindref="compound">EBFArrayBox</ref>, <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> and <ref refid="classamrex_1_1CutFab" kindref="compound">CutFab</ref>.</para>
<para><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref> objects depend on the dimensionality of space (indirectly through the DOMAIN Box member). It is typical to define the macro SPACEDIM to be 1, 2, or 3 to indicate the dimension of space. See the discussion of class Box for more information. A <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref> contains a Box DOMAIN, which indicates the integer indexing space over which the array is defined. A <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref> also has NVAR components. By components, we mean that for each point in the rectangular indexing space, there are NVAR values associated with that point. A Fortran array corresponding to a <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref> would have (SPACEDIM+1) dimensions.</para>
<para>By design, the array layout in a <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref> mirrors that of a Fortran array. The first index (x direction for example) varies most rapidly, the next index (y direction), if any, varies next fastest. The component index varies last, after all the spatial indices.</para>
<para>It is sometimes convenient to be able to treat a sub-array within an existing <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref> as a <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref> in its own right. This is often referred to as aliasing the <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>. Note that when aliasing is used, the BaseFabs domain will not, in general, be the same as the parent BaseFabs domain, nor will the number of components. <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref> is a dimension dependent class, so SPACEDIM must be defined as either 1, 2, or 3 when compiling.</para>
<para>This is NOT a polymorphic class.</para>
<para>It does NOT provide a copy constructor or assignment operator.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>MUST have a default constructor and an assignment operator. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>amrex::DataAllocator</label>
        <link refid="structamrex_1_1DataAllocator"/>
      </node>
      <node id="1">
        <label>amrex::BaseFab&lt; T &gt;</label>
        <link refid="classamrex_1_1BaseFab"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="11">
        <label>amrex::ArenaInfo</label>
        <link refid="structamrex_1_1ArenaInfo"/>
      </node>
      <node id="2">
        <label>amrex::DataAllocator</label>
        <link refid="structamrex_1_1DataAllocator"/>
        <childnode refid="3" relation="usage">
          <edgelabel>m_arena</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>amrex::Arena</label>
        <link refid="classamrex_1_1Arena"/>
        <childnode refid="4" relation="usage">
          <edgelabel>m_profiler</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>arena_info</edgelabel>
        </childnode>
      </node>
      <node id="10">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="12">
        <label>amrex::BoxND&lt; AMREX_SPACEDIM &gt;</label>
        <link refid="classamrex_1_1BoxND"/>
      </node>
      <node id="4">
        <label>amrex::Arena::ArenaProfiler</label>
        <link refid="structamrex_1_1Arena_1_1ArenaProfiler"/>
        <childnode refid="5" relation="usage">
          <edgelabel>m_currently_allocated</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>m_arena_profiler_mutex</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>m_profiling_stats</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>std::unordered_map&lt; void *, std::pair&lt; amrex::MemStat *, std::size_t &gt; &gt;</label>
      </node>
      <node id="6">
        <label>std::mutex</label>
      </node>
      <node id="8">
        <label>amrex::MemStat</label>
        <link refid="structamrex_1_1MemStat"/>
      </node>
      <node id="9">
        <label>std::string</label>
        <childnode refid="10" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>amrex::BaseFab&lt; T &gt;</label>
        <link refid="classamrex_1_1BaseFab"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>domain</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>std::map&lt; std::string, amrex::MemStat &gt;</label>
        <childnode refid="8" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="181" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="183" bodyend="1658"/>
    <listofallmembers>
      <member refid="classamrex_1_1BaseFab_1af827e9a5df2baf21d45239e49567f4c6" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>abs</name></member>
      <member refid="classamrex_1_1BaseFab_1ae730734f6c370cc53bdfb51efe618033" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>abs</name></member>
      <member refid="classamrex_1_1BaseFab_1a4f6421e1246d3830573c1865f1138f60" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>abs</name></member>
      <member refid="classamrex_1_1BaseFab_1a220803f71ba80b6deab7975fc4da9d03" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>addFromMem</name></member>
      <member refid="classamrex_1_1BaseFab_1a2b1536046ed1e2201f48955b47243327" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>addproduct</name></member>
      <member refid="structamrex_1_1DataAllocator_1adcabda73bbd0120b08dbb2cda22a6427" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>alloc</name></member>
      <member refid="classamrex_1_1BaseFab_1a0b228a35989fd32f481b43adfa43a2ec" prot="protected" virt="non-virtual"><scope>amrex::BaseFab</scope><name>alloc_stream</name></member>
      <member refid="structamrex_1_1DataAllocator_1a477a75a5d73137b29f1a6ddf31af40f7" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>arena</name></member>
      <member refid="classamrex_1_1BaseFab_1a757e00b16f837e3d092aeb625a9dfa6a" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>array</name></member>
      <member refid="classamrex_1_1BaseFab_1a5d54525d2d54f617a0072900458729e1" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>array</name></member>
      <member refid="classamrex_1_1BaseFab_1a56490d543f03319544cb296ea429c414" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>array</name></member>
      <member refid="classamrex_1_1BaseFab_1a587f263a697ccd87db4db2b7d6f42c87" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>array</name></member>
      <member refid="classamrex_1_1BaseFab_1a972c0b6366edff5f72a8b6777ac8ac45" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>array</name></member>
      <member refid="classamrex_1_1BaseFab_1ad4a674eebc8c2d3913f2febac4d37f84" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>array</name></member>
      <member refid="classamrex_1_1BaseFab_1a3dc96c01f9f3d24110fa50e53e93e1b0" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>atomicAdd</name></member>
      <member refid="classamrex_1_1BaseFab_1a129c6d062f25b04c99aeef00c129fde8" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>atomicAdd</name></member>
      <member refid="classamrex_1_1BaseFab_1aa2775774e0005f2e3d56acc4d23c44a1" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>atomicAdd</name></member>
      <member refid="classamrex_1_1BaseFab_1afa1f8f3a9048c2da47559555e5cc7e43" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>atomicAdd</name></member>
      <member refid="classamrex_1_1BaseFab_1ad961346567674565f67ad873d4461f42" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1ae732fa5c1fb9495b98ecce97ccd1be95" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1ae5d9786facded55bfce06cc443594cab" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1a83d88e02757dac7e30b2ac7a13020b22" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1aa42c6cb505873cad1b9c9de64a20c407" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1a4b890373aa053ba5cd3aae0bf5483c1c" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1a8553c8f3915ded4cacfba0c490b98bc5" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1a53ab00ff398b5beb473bf85810189532" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1a2fe573448f0463cc140a1452a9510eb0" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1a27f1fbad6aff0f97e0291664ab11a4e4" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1a8adcfedaa62f241b766513fd9dd3f830" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1a2689fd4a972a4121943d51dc61eee166" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1a6b0fa577ec8190137939f503041e7bf7" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1aa2ce65c438db70645899b1d0c09f2455" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1acdde994980673c595f2348d982aeb70e" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>bigEnd</name></member>
      <member refid="classamrex_1_1BaseFab_1aa288a917ca5613e3e984c58a7975a89d" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>box</name></member>
      <member refid="classamrex_1_1BaseFab_1ae428e6a2645141dd817c288331575f26" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>clear</name></member>
      <member refid="classamrex_1_1BaseFab_1a25ed9ead805e064c8f9dbe34ebbf3a95" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>const_array</name></member>
      <member refid="classamrex_1_1BaseFab_1ae5723c1af2b115b682869e760b1033a0" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>const_array</name></member>
      <member refid="classamrex_1_1BaseFab_1aa3049c7941d487849f2945f2c3447a1e" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>const_array</name></member>
      <member refid="classamrex_1_1BaseFab_1a40dca3a0efea6d6ac5e3103e34b1f3e3" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>contains</name></member>
      <member refid="classamrex_1_1BaseFab_1a9121f1816f016bc765e3acea392169b8" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>contains</name></member>
      <member refid="classamrex_1_1BaseFab_1a977d18ce746c0f9cdaa0c30d24dafc38" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>copy</name></member>
      <member refid="classamrex_1_1BaseFab_1a2d461c954f07f4f27315007cd6142897" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>copy</name></member>
      <member refid="classamrex_1_1BaseFab_1a6713c5a40c37784163c28eed7db1d3ae" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>copy</name></member>
      <member refid="classamrex_1_1BaseFab_1a2780bcacf15ff9c08602ddc8fd279434" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>copy</name></member>
      <member refid="classamrex_1_1BaseFab_1a08ef88a8fe68f56114c7a647c04772bd" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>copy</name></member>
      <member refid="classamrex_1_1BaseFab_1a5e3dbb577a99bb74375d2e5cde801529" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>copyFromMem</name></member>
      <member refid="classamrex_1_1BaseFab_1a1e8c677d4f03b86f4a6e1d1caac46b02" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>copyToMem</name></member>
      <member refid="structamrex_1_1DataAllocator_1a37c4b92bbff76372bd67c006198e400f" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>DataAllocator</name></member>
      <member refid="structamrex_1_1DataAllocator_1ad2f91458d09a1484857061ff235e73bd" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>DataAllocator</name></member>
      <member refid="classamrex_1_1BaseFab_1a5c99c1592a80ba46ab6faf9929773f8d" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>dataPtr</name></member>
      <member refid="classamrex_1_1BaseFab_1a94be04911ba375a16941883fe1c1d247" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>dataPtr</name></member>
      <member refid="classamrex_1_1BaseFab_1af77c50de9cd0e8ec9dbdce27abfa1da4" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>dataPtr</name></member>
      <member refid="classamrex_1_1BaseFab_1a118fb28186b8af61473a0013e2499484" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>dataPtr</name></member>
      <member refid="classamrex_1_1BaseFab_1a35dc22f1d61f4fb05ab75ae93f683d14" prot="protected" virt="non-virtual"><scope>amrex::BaseFab</scope><name>define</name></member>
      <member refid="classamrex_1_1BaseFab_1a9d0d2a00cc4e3fa23e019b24016b912b" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>divide</name></member>
      <member refid="classamrex_1_1BaseFab_1a3a8094b23b240faf25973fea41ef0ef0" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>divide</name></member>
      <member refid="classamrex_1_1BaseFab_1a244a45e4bf0eba8069ab27cfe5feed67" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>divide</name></member>
      <member refid="classamrex_1_1BaseFab_1a755fa68b5cfdd5fadd88a234766c271c" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>divide</name></member>
      <member refid="classamrex_1_1BaseFab_1a8418cc9903556d471e1d637cb49eef1d" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>divide</name></member>
      <member refid="classamrex_1_1BaseFab_1a0f2ae3ab88fb6542eb2c11990f29ef86" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>divide</name></member>
      <member refid="classamrex_1_1BaseFab_1a9541126c9461236acb64d2f0b32a1781" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>divide</name></member>
      <member refid="classamrex_1_1BaseFab_1ae979617b60ec6cd4d9b5d14dd512b3c2" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>divide</name></member>
      <member refid="classamrex_1_1BaseFab_1acb13bca4e903870c960bbe7cc0880cec" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>divide</name></member>
      <member refid="classamrex_1_1BaseFab_1a8e95d8cfaadfe53080ae0092b53202fb" prot="protected" virt="non-virtual"><scope>amrex::BaseFab</scope><name>domain</name></member>
      <member refid="classamrex_1_1BaseFab_1a9cd1fd0c353673dae4a5138f5ea79f1e" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>dot</name></member>
      <member refid="classamrex_1_1BaseFab_1a6e60b15550e6ba0b5bf63c3ff825232a" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>dot</name></member>
      <member refid="classamrex_1_1BaseFab_1ab78500dde194e48f6e5c50593a7c678a" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>dot</name></member>
      <member refid="classamrex_1_1BaseFab_1a7dcaef3f1c196a9b0fd30d0cda3d6f8e" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>dot</name></member>
      <member refid="classamrex_1_1BaseFab_1ae238c88f700fceb3525dccccc6888135" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>dotmask</name></member>
      <member refid="classamrex_1_1BaseFab_1a8b0abe9713e52fd03cfb469278dc223c" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>dotmask</name></member>
      <member refid="classamrex_1_1BaseFab_1a9236f2f88feff79c1d50b9b830750f91" prot="protected" virt="non-virtual"><scope>amrex::BaseFab</scope><name>dptr</name></member>
      <member refid="classamrex_1_1BaseFab_1ac5a36d719054f74a00bfc52e10ec9918" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>elixir</name></member>
      <member refid="classamrex_1_1BaseFab_1ab063c08278822a569d923d57d1e39dee" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>fill_snan</name></member>
      <member refid="classamrex_1_1BaseFab_1a4b42e2b61ac6d8050def0a5e9bde849f" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>Finalize</name></member>
      <member refid="structamrex_1_1DataAllocator_1a5fa328945c30133a9b9c7f93ccf6e78f" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>free</name></member>
      <member refid="classamrex_1_1BaseFab_1ac195a2bbff03a7f02e30788342473d18" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>getVal</name></member>
      <member refid="classamrex_1_1BaseFab_1af8f8e7b8b678678f74f235b0ebdeed9f" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>getVal</name></member>
      <member refid="classamrex_1_1BaseFab_1ac527239df242562c1cd6d05106299041" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>hiVect</name></member>
      <member refid="classamrex_1_1BaseFab_1a4d9eb1a365feee57e8b622f92f42a676" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>indexFromValue</name></member>
      <member refid="classamrex_1_1BaseFab_1a1d6dfeb0de1a785895b2a26e05c8ce4a" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>Initialize</name></member>
      <member refid="classamrex_1_1BaseFab_1ad98a82bccd4fb83e293321c508cbf8e3" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>invert</name></member>
      <member refid="classamrex_1_1BaseFab_1ad7393f53147c97d7e2ce59bacb6e90ea" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>invert</name></member>
      <member refid="classamrex_1_1BaseFab_1adc3c76cad27b8ebcac50f472ee28086a" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>invert</name></member>
      <member refid="classamrex_1_1BaseFab_1a3d7a22be04a9f14666b5b6dea43c7aab" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>invert</name></member>
      <member refid="classamrex_1_1BaseFab_1a4342e997e189d6fe00b281776f9400e6" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>isAllocated</name></member>
      <member refid="classamrex_1_1BaseFab_1ad69dbb55d91cc9784e3f9ee622c53d91" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>length</name></member>
      <member refid="classamrex_1_1BaseFab_1a34dd0c1642740071a0bf70d986e9f52a" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>linComb</name></member>
      <member refid="classamrex_1_1BaseFab_1af49fda526f1f93ba846db273906cd29b" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>linInterp</name></member>
      <member refid="classamrex_1_1BaseFab_1a666cac025454c374a1e2db655b133aa9" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>linInterp</name></member>
      <member refid="classamrex_1_1BaseFab_1a1a1bc23a87d40ff55f8fcec600b0054b" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>lockAdd</name></member>
      <member refid="classamrex_1_1BaseFab_1a5598302356ad5c6af7482fc392c8bb8b" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>loVect</name></member>
      <member refid="structamrex_1_1DataAllocator_1a901b7f1e68950afc823ebc10c093cb94" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>m_arena</name></member>
      <member refid="classamrex_1_1BaseFab_1a3e4a9401acaa07ed7747907ccaa18a8e" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>maskEQ</name></member>
      <member refid="classamrex_1_1BaseFab_1a02d3c8e98d8d4b237eabc0ce1756fc33" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>maskGE</name></member>
      <member refid="classamrex_1_1BaseFab_1ae1a6b0d582503d0257d5927534619526" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>maskGT</name></member>
      <member refid="classamrex_1_1BaseFab_1a51c1b72c4a3a04fe392247242467d27f" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>maskLE</name></member>
      <member refid="classamrex_1_1BaseFab_1a2daea766f3544b7e920b9ca9b3cb870e" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>maskLT</name></member>
      <member refid="classamrex_1_1BaseFab_1a976274fa8a099dc6ccd77fb63a3a0650" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>max</name></member>
      <member refid="classamrex_1_1BaseFab_1a939ad0219e8ede03540eadef78ba7cbb" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>max</name></member>
      <member refid="classamrex_1_1BaseFab_1a776fd1a3ef930d751d3399d380850f1c" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>maxabs</name></member>
      <member refid="classamrex_1_1BaseFab_1a67147a4e532939aaab59f3d83ae93361" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>maxabs</name></member>
      <member refid="classamrex_1_1BaseFab_1ad84e4433b485caf6c9cf76d87a04f4a0" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>maxIndex</name></member>
      <member refid="classamrex_1_1BaseFab_1ac69c6e4896f54d8ea5ca9fe1114c64f6" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>maxIndex</name></member>
      <member refid="classamrex_1_1BaseFab_1ac0fa2c605be671fb2f9d97dfe38cc6c8" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>maxIndex</name></member>
      <member refid="classamrex_1_1BaseFab_1aeb7994e6d44cea18d2b9a0b92f641b64" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>min</name></member>
      <member refid="classamrex_1_1BaseFab_1a6a67cc88f93b200472fba8ee3ba8263c" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>min</name></member>
      <member refid="classamrex_1_1BaseFab_1af53146ccb7317b937c89ebd12e19efd5" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>minIndex</name></member>
      <member refid="classamrex_1_1BaseFab_1a8d45160a5d6cf9f1329ca8b38b1aa6c7" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>minIndex</name></member>
      <member refid="classamrex_1_1BaseFab_1af6d66895d4ba3fe45a6ba4705521e282" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>minIndex</name></member>
      <member refid="classamrex_1_1BaseFab_1aabf9a731c176ed69472b109aa42e967b" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>minmax</name></member>
      <member refid="classamrex_1_1BaseFab_1a1348ff398baf6713f6bbe44bcc1115a1" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>minmax</name></member>
      <member refid="classamrex_1_1BaseFab_1a6d0bff982fafed20210cfdd290c51922" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>minus</name></member>
      <member refid="classamrex_1_1BaseFab_1aa4e7563980826bc199c9f0189b6c9b26" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>minus</name></member>
      <member refid="classamrex_1_1BaseFab_1a4f4c18fd897e957e12ccb7597d82764b" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>minus</name></member>
      <member refid="classamrex_1_1BaseFab_1a2cafb2b37fd53db25b7ae67bc8e3eecd" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>minus</name></member>
      <member refid="classamrex_1_1BaseFab_1a841032e4c22463cfc3acc7f6e383384d" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>minus</name></member>
      <member refid="classamrex_1_1BaseFab_1a5f90e282b02c4e55e3568396ae439235" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>minus</name></member>
      <member refid="classamrex_1_1BaseFab_1a18ae3e9b17daaf81946b264928babfb6" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>minus</name></member>
      <member refid="classamrex_1_1BaseFab_1a3d568e9a805b719ccf750d68e9f0b563" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>mult</name></member>
      <member refid="classamrex_1_1BaseFab_1a77c23670c3820173af82382063a8525d" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>mult</name></member>
      <member refid="classamrex_1_1BaseFab_1a72337bc09214fce473bf77e724ef9e93" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>mult</name></member>
      <member refid="classamrex_1_1BaseFab_1a986a4f2008cd82f26730291a78bd5d28" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>mult</name></member>
      <member refid="classamrex_1_1BaseFab_1a7df0d47826c9b346e9a5df0ff0a32666" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>mult</name></member>
      <member refid="classamrex_1_1BaseFab_1ac7dbe04481b0bd6c6f532fc2d06f95d1" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>mult</name></member>
      <member refid="classamrex_1_1BaseFab_1a30f381aceead942f8c703b4c5bba99ab" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>mult</name></member>
      <member refid="classamrex_1_1BaseFab_1a4e596c1fdc1cdef0bfd6a60cd3d3b81a" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>mult</name></member>
      <member refid="classamrex_1_1BaseFab_1a31b9d3f58d3529cc2ac64dab553eb294" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>mult</name></member>
      <member refid="classamrex_1_1BaseFab_1a5be7479b2a46eaefb945b066cb21de8a" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>nBytes</name></member>
      <member refid="classamrex_1_1BaseFab_1a32e96a4bbc00ecec58d2763ca697bea6" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>nBytes</name></member>
      <member refid="classamrex_1_1BaseFab_1a267006cc0717e9dfbcbd22afc1c89d8c" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>nBytesOwned</name></member>
      <member refid="classamrex_1_1BaseFab_1ae16c6f70417dc8f84e2196afe27b2b15" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>nComp</name></member>
      <member refid="classamrex_1_1BaseFab_1aa5764439bdbcc0d060f92f5a6ca41fab" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>nCompPtr</name></member>
      <member refid="classamrex_1_1BaseFab_1a2d65dc4995843b8c46bc97984cf13749" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>negate</name></member>
      <member refid="classamrex_1_1BaseFab_1acf4c056e581c461ab116dd7974f82e3a" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>negate</name></member>
      <member refid="classamrex_1_1BaseFab_1a5f348c3d0404aa11bb71c5252cc6efe9" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>negate</name></member>
      <member refid="classamrex_1_1BaseFab_1aaf765bafa403ca72a2f136a6efff2b14" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>negate</name></member>
      <member refid="classamrex_1_1BaseFab_1aa1282391dd2449fab71d2524cf0f74a7" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>norm</name></member>
      <member refid="classamrex_1_1BaseFab_1a53bfa690678b7a44a6f1b8b736db232b" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>norm</name></member>
      <member refid="classamrex_1_1BaseFab_1a0cfed6fcd597be27e9d069f9e7a3d18b" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>norminfmask</name></member>
      <member refid="classamrex_1_1BaseFab_1ac6480baad7fdde57bec1e2ad32387300" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>numPts</name></member>
      <member refid="classamrex_1_1BaseFab_1a99b1638f6702821a6b6e63cb860d938f" prot="protected" virt="non-virtual"><scope>amrex::BaseFab</scope><name>nvar</name></member>
      <member refid="classamrex_1_1BaseFab_1ad76ae6115f341053b2eb94affc5e3eee" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>operator()</name></member>
      <member refid="classamrex_1_1BaseFab_1ac1a408be29fc4bfc85971ac414c165ee" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>operator()</name></member>
      <member refid="classamrex_1_1BaseFab_1a10931b31715309bfb452dc2c7fa662df" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>operator()</name></member>
      <member refid="classamrex_1_1BaseFab_1a3427e5ed98498ff54da5f75d22923f5f" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>operator()</name></member>
      <member refid="classamrex_1_1BaseFab_1a397a547f55264106c669f9ecbecf8897" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>operator*=</name></member>
      <member refid="classamrex_1_1BaseFab_1a7433945e87d1450ad2aedd284a1af52b" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>operator*=</name></member>
      <member refid="classamrex_1_1BaseFab_1a7c31f46231419fb8c062439a11694b03" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>operator+=</name></member>
      <member refid="classamrex_1_1BaseFab_1a0e5226efe7308e09b4464b4ae91aa6ff" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>operator+=</name></member>
      <member refid="classamrex_1_1BaseFab_1a48a7d3febdafd19ca651c5eed88147cd" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>operator-=</name></member>
      <member refid="classamrex_1_1BaseFab_1a7bf50c91d4dc7df9c983947f84da3dfb" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>operator-=</name></member>
      <member refid="classamrex_1_1BaseFab_1aaa2bf19636336c318059fd497e35c023" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>operator/=</name></member>
      <member refid="classamrex_1_1BaseFab_1ae2402a734250fad951d41376d469365a" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>operator/=</name></member>
      <member refid="classamrex_1_1BaseFab_1a9a52c7475015824cfb60e6c67ecad522" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>operator=</name></member>
      <member refid="classamrex_1_1BaseFab_1a730800b56af324f6616cdb9ef570cdcc" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>operator=</name></member>
      <member refid="classamrex_1_1BaseFab_1a4b81fe99b0146870a40f702e63dd1415" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>operator=</name></member>
      <member refid="classamrex_1_1BaseFab_1a197583c6096b348de15dcdb671457aee" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>operator=</name></member>
      <member refid="classamrex_1_1BaseFab_1abb7c6d23546e6178c5c17bc87a2d5ef6" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>plus</name></member>
      <member refid="classamrex_1_1BaseFab_1a30dff1ddf3809400a88f85f546ecbe84" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>plus</name></member>
      <member refid="classamrex_1_1BaseFab_1af7a3fdd2cfd65a5f9a2d7e2126973917" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>plus</name></member>
      <member refid="classamrex_1_1BaseFab_1aa9c3a519a02df76b99bef93795d6cba3" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>plus</name></member>
      <member refid="classamrex_1_1BaseFab_1a8eac05318ddeb7bf09d5c1b25acc6d55" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>plus</name></member>
      <member refid="classamrex_1_1BaseFab_1a2e3c0c27f4451b4962368e70bb9c0825" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>plus</name></member>
      <member refid="classamrex_1_1BaseFab_1afa601e460f4af5ec79144dbcd527ff58" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>plus</name></member>
      <member refid="classamrex_1_1BaseFab_1ae637024575b35a0f95b58020e31b79ac" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>plus</name></member>
      <member refid="classamrex_1_1BaseFab_1a56197b4668f634207c4031bcd9e05909" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>plus</name></member>
      <member refid="classamrex_1_1BaseFab_1acc3fa2566c4bf2de3e6f0773e3b0601b" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>prefetchToDevice</name></member>
      <member refid="classamrex_1_1BaseFab_1aea7b9b15c8959be232fa8d0b14b2b507" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>prefetchToHost</name></member>
      <member refid="classamrex_1_1BaseFab_1ad858d100150acd894cee6a1de10d61fb" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>protected_divide</name></member>
      <member refid="classamrex_1_1BaseFab_1a45109ddf32816d958a662cd23e576d4f" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>protected_divide</name></member>
      <member refid="classamrex_1_1BaseFab_1a9b6d8b5d08a022612232194b8c3f098d" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>protected_divide</name></member>
      <member refid="classamrex_1_1BaseFab_1ab2918e0d3ea4dae441569909e73a8db7" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>protected_divide</name></member>
      <member refid="classamrex_1_1BaseFab_1acf3b50d012730dd3521fb2be517573b9" prot="protected" virt="non-virtual"><scope>amrex::BaseFab</scope><name>ptr_owner</name></member>
      <member refid="classamrex_1_1BaseFab_1a4390286fe2327bd5f0561a75ee14499b" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>release</name></member>
      <member refid="classamrex_1_1BaseFab_1a39e58886603710880541bc7030d1d9c6" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>resize</name></member>
      <member refid="classamrex_1_1BaseFab_1a051da6643de6a48ee66ec046d560033a" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>saxpy</name></member>
      <member refid="classamrex_1_1BaseFab_1a8e5c589a24384ac09b58364b7b7d45a7" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>saxpy</name></member>
      <member refid="classamrex_1_1BaseFab_1a70a02b9f0a717280df913cead8729dbc" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>SetBoxType</name></member>
      <member refid="classamrex_1_1BaseFab_1af1143312b97b8dabe016e041fa440e85" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>setComplement</name></member>
      <member refid="classamrex_1_1BaseFab_1a7c9e5cad84edcb3888480abe8d1df7bc" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>setComplement</name></member>
      <member refid="classamrex_1_1BaseFab_1a347010e29c31f4b83480011d98908389" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>setPtr</name></member>
      <member refid="classamrex_1_1BaseFab_1ab24f1f5f55a90b31121560df9c333fa7" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>setVal</name></member>
      <member refid="classamrex_1_1BaseFab_1acbfe1bff2de3daad93c1234eae1f0cf3" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>setVal</name></member>
      <member refid="classamrex_1_1BaseFab_1ad2b35980de651c0823ee08f5f20f642c" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>setVal</name></member>
      <member refid="classamrex_1_1BaseFab_1a898fc7d64ff6e5e26fb612bcbd6a111d" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>setVal</name></member>
      <member refid="classamrex_1_1BaseFab_1a450a1a7a50c796a088f93818ce0003cf" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>setVal</name></member>
      <member refid="classamrex_1_1BaseFab_1a5373ee74f195b1f31ffc9b37502bcdb4" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>setValIf</name></member>
      <member refid="classamrex_1_1BaseFab_1a49749f076cd8c9e2bed72a9d7ac1041f" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>setValIf</name></member>
      <member refid="classamrex_1_1BaseFab_1acb2352671b0792ecd140ea158f3d5ad9" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>setValIfNot</name></member>
      <member refid="classamrex_1_1BaseFab_1a573b66fa2db975827a4da4bce09d893e" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>setValIfNot</name></member>
      <member refid="classamrex_1_1BaseFab_1ac78f21924ff160a279d17ae73351c05b" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>setValIfNot</name></member>
      <member refid="classamrex_1_1BaseFab_1a4e65169d29942cf3adde870d63a91834" prot="protected" virt="non-virtual"><scope>amrex::BaseFab</scope><name>shared_memory</name></member>
      <member refid="classamrex_1_1BaseFab_1a92cb12158a09c20c51ef9347c11d31e4" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>shift</name></member>
      <member refid="classamrex_1_1BaseFab_1ad511764daeaedb9d3de8afc17ca7140c" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>shift</name></member>
      <member refid="classamrex_1_1BaseFab_1acbd52c543782ab54cde88fa60852f563" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>shiftHalf</name></member>
      <member refid="classamrex_1_1BaseFab_1a9ceff0f63f7f998ae97b1b6f8a7e3646" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>shiftHalf</name></member>
      <member refid="classamrex_1_1BaseFab_1aba615c949d4831e48be7fbb76605df0a" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>size</name></member>
      <member refid="classamrex_1_1BaseFab_1ab265b95d14a167ea57faaf998d39f113" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>smallEnd</name></member>
      <member refid="classamrex_1_1BaseFab_1a0a8a30db2ab622857ba9ba7c64f940cb" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>sum</name></member>
      <member refid="classamrex_1_1BaseFab_1ae146eaf863b19ed32754ed09757d53a3" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>sum</name></member>
      <member refid="classamrex_1_1BaseFab_1a768eeb824dfd37e3b53c00d79155b36b" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>sum</name></member>
      <member refid="classamrex_1_1BaseFab_1a86d1b4b6478205b0fcec165260df5772" prot="protected" virt="non-virtual"><scope>amrex::BaseFab</scope><name>truesize</name></member>
      <member refid="classamrex_1_1BaseFab_1a6ffc31b194f5484eef777a47862ddfac" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>value_type</name></member>
      <member refid="classamrex_1_1BaseFab_1a588b01925c451678d621fe58797a5bd7" prot="public" virt="non-virtual"><scope>amrex::BaseFab</scope><name>xpay</name></member>
      <member refid="classamrex_1_1BaseFab_1acf7c1ac49465810a70b9ae1757263f30" prot="public" virt="virtual"><scope>amrex::BaseFab</scope><name>~BaseFab</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
