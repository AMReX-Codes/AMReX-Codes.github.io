<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="structamrex_1_1ParserExecutor" kind="struct" language="C++" prot="public">
    <compoundname>amrex::ParserExecutor</compoundname>
    <includes refid="AMReX__Parser_8H" local="no">AMReX_Parser.H</includes>
    <templateparamlist>
      <param>
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <declname>N</declname>
        <defname>N</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structamrex_1_1ParserExecutor_1a195771c96ef68cb237c6da6f6c2d336d" prot="public" static="no" mutable="no">
        <type>char *</type>
        <definition>char* amrex::ParserExecutor&lt; N &gt;::m_host_executor</definition>
        <argsstring></argsstring>
        <name>m_host_executor</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.H" line="76" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.H" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structamrex_1_1ParserExecutor_1a38862e30a4c2fbeefe1e07252ce69c31" prot="public" static="no" mutable="no">
        <type>char *</type>
        <definition>char* amrex::ParserExecutor&lt; N &gt;::m_device_executor</definition>
        <argsstring></argsstring>
        <name>m_device_executor</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.H" line="78" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.H" bodystart="78" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structamrex_1_1ParserExecutor_1a5f007a74d83f9bdcb198458404414118" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
            <declname>M</declname>
            <defname>M</defname>
            <defval>N</defval>
          </param>
          <param>
            <type>typename std::enable_if_t&lt; M==0, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> double</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE double amrex::ParserExecutor&lt; N &gt;::operator()</definition>
        <argsstring>() const noexcept</argsstring>
        <name>operator()</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.H" line="22" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.H" bodystart="22" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1ParserExecutor_1af5431722ed3970aed878c59a4e0df166" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> std::enable_if_t&lt; sizeof...(Ts)==N &amp;&amp;!<ref refid="structamrex_1_1Same" kindref="compound">amrex::Same</ref>&lt; float, Ts... &gt;::value, double &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE std::enable_if_t&lt;sizeof...(Ts) == N &amp;&amp; !amrex::Same&lt;float,Ts...&gt;::value, double&gt; amrex::ParserExecutor&lt; N &gt;::operator()</definition>
        <argsstring>(Ts... var) const noexcept</argsstring>
        <name>operator()</name>
        <param>
          <type>Ts...</type>
          <declname>var</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.H" line="34" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.H" bodystart="34" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1ParserExecutor_1a4ec94c9ff56d57926d2743b89abb9819" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> std::enable_if_t&lt; sizeof...(Ts)==N &amp;&amp;<ref refid="structamrex_1_1Same" kindref="compound">amrex::Same</ref>&lt; float, Ts... &gt;::value, float &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE std::enable_if_t&lt;sizeof...(Ts) == N &amp;&amp; amrex::Same&lt;float,Ts...&gt;::value, float&gt; amrex::ParserExecutor&lt; N &gt;::operator()</definition>
        <argsstring>(Ts... var) const noexcept</argsstring>
        <name>operator()</name>
        <param>
          <type>Ts...</type>
          <declname>var</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.H" line="47" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.H" bodystart="47" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1ParserExecutor_1a132a34cc401496050ca54b6d3cb3855c" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> double</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE double amrex::ParserExecutor&lt; N &gt;::operator()</definition>
        <argsstring>(GpuArray&lt; double, N &gt; const &amp;var) const noexcept</argsstring>
        <name>operator()</name>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; double, N &gt; const &amp;</type>
          <declname>var</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.H" line="58" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.H" bodystart="58" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1ParserExecutor_1a93e1ada56a461feae37abad6fa8483ad" prot="public" static="no" const="yes" explicit="yes" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE amrex::ParserExecutor&lt; N &gt;::operator bool</definition>
        <argsstring>() const</argsstring>
        <name>operator bool</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.H" line="68" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.H" bodystart="68" bodyend="74"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.H" line="18" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser.H" bodystart="19" bodyend="80"/>
    <listofallmembers>
      <member refid="structamrex_1_1ParserExecutor_1a38862e30a4c2fbeefe1e07252ce69c31" prot="public" virt="non-virtual"><scope>amrex::ParserExecutor</scope><name>m_device_executor</name></member>
      <member refid="structamrex_1_1ParserExecutor_1a195771c96ef68cb237c6da6f6c2d336d" prot="public" virt="non-virtual"><scope>amrex::ParserExecutor</scope><name>m_host_executor</name></member>
      <member refid="structamrex_1_1ParserExecutor_1a93e1ada56a461feae37abad6fa8483ad" prot="public" virt="non-virtual"><scope>amrex::ParserExecutor</scope><name>operator bool</name></member>
      <member refid="structamrex_1_1ParserExecutor_1a5f007a74d83f9bdcb198458404414118" prot="public" virt="non-virtual"><scope>amrex::ParserExecutor</scope><name>operator()</name></member>
      <member refid="structamrex_1_1ParserExecutor_1af5431722ed3970aed878c59a4e0df166" prot="public" virt="non-virtual"><scope>amrex::ParserExecutor</scope><name>operator()</name></member>
      <member refid="structamrex_1_1ParserExecutor_1a4ec94c9ff56d57926d2743b89abb9819" prot="public" virt="non-virtual"><scope>amrex::ParserExecutor</scope><name>operator()</name></member>
      <member refid="structamrex_1_1ParserExecutor_1a132a34cc401496050ca54b6d3cb3855c" prot="public" virt="non-virtual"><scope>amrex::ParserExecutor</scope><name>operator()</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
