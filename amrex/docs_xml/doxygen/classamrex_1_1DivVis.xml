<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classamrex_1_1DivVis" kind="class" language="C++" prot="public">
    <compoundname>amrex::DivVis</compoundname>
    <basecompoundref refid="classamrex_1_1MCLinOp" prot="public" virt="non-virtual">amrex::MCLinOp</basecompoundref>
    <includes refid="AMReX__DivVis_8H" local="no">AMReX_DivVis.H</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classamrex_1_1DivVis_1a5ac06b144dababf33acde384979ab6b5" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> * &gt;</type>
        <definition>Vector&lt; MultiFab* &gt; amrex::DivVis::acoefs</definition>
        <argsstring></argsstring>
        <name>acoefs</name>
        <briefdescription>
<para><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref> (on level) of &quot;a&quot; coefficients. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_DivVis.H" line="272" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_DivVis.H" bodystart="272" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1DivVis_1a8587bfbe902aed914afad7248104c3d1" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *, <ref refid="AMReX__SPACE_8H_1af66ac7d7c04dad9fd54778fe5a4e816f" kindref="member">BL_SPACEDIM</ref> &gt; &gt;</type>
        <definition>Vector&lt; Array&lt; MultiFab*, BL_SPACEDIM&gt; &gt; amrex::DivVis::bcoefs</definition>
        <argsstring></argsstring>
        <name>bcoefs</name>
        <briefdescription>
<para><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref> (on level) of Array (on dimension) of &quot;b&quot; coefficients. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_DivVis.H" line="275" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_DivVis.H" bodystart="275" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1DivVis_1ae044bb26690a4e3b989a12f93d5cb0ee" prot="protected" static="no" mutable="no">
        <type>Real</type>
        <definition>Real amrex::DivVis::alpha</definition>
        <argsstring></argsstring>
        <name>alpha</name>
        <briefdescription>
<para>Scalar &quot;alpha&quot; coefficient. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_DivVis.H" line="278" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_DivVis.H" bodystart="278" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1DivVis_1a5eda3ced4c66caa08c7d18a51c470b81" prot="protected" static="no" mutable="no">
        <type>Real</type>
        <definition>Real amrex::DivVis::beta</definition>
        <argsstring></argsstring>
        <name>beta</name>
        <briefdescription>
<para>Scalar &quot;beta&quot; coefficient. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_DivVis.H" line="281" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_DivVis.H" bodystart="281" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1DivVis_1a746b5ed710d36f972265d012df8b9a6b" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; int &gt;</type>
        <definition>Vector&lt;int&gt; amrex::DivVis::a_valid</definition>
        <argsstring></argsstring>
        <name>a_valid</name>
        <briefdescription>
<para>Flag, can a coeffs be trusted at a level. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_DivVis.H" line="286" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_DivVis.H" bodystart="286" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1DivVis_1a43c0c842916d35d4c8e75be763b082c6" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; int &gt;</type>
        <definition>Vector&lt;int&gt; amrex::DivVis::b_valid</definition>
        <argsstring></argsstring>
        <name>b_valid</name>
        <briefdescription>
<para>Flag, can b coeffs be trusted at a level. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_DivVis.H" line="289" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_DivVis.H" bodystart="289" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classamrex_1_1DivVis_1ad03d16e91df955d7fdc1d3e58879ff38" prot="private" static="yes" mutable="no">
        <type>Real</type>
        <definition>Real amrex::DivVis::a_def</definition>
        <argsstring></argsstring>
        <name>a_def</name>
        <initializer>= 0.0</initializer>
        <briefdescription>
<para>Default value for a (<ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>) coeficient. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_DivVis.H" line="292" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_DivVis.H" bodystart="292" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1DivVis_1a31600764c8764c146ac095b26759188f" prot="private" static="yes" mutable="no">
        <type>Real</type>
        <definition>Real amrex::DivVis::b_def</definition>
        <argsstring></argsstring>
        <name>b_def</name>
        <initializer>= 1.0</initializer>
        <briefdescription>
<para>Default value for b (<ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>) coeficient. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_DivVis.H" line="295" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_DivVis.H" bodystart="295" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1DivVis_1a87478f1a266153c9bc5e55a115a998fa" prot="private" static="yes" mutable="no">
        <type>Real</type>
        <definition>Real amrex::DivVis::alpha_def</definition>
        <argsstring></argsstring>
        <name>alpha_def</name>
        <initializer>= 1.0</initializer>
        <briefdescription>
<para>Default value for alpha (scalar) coeficient. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_DivVis.H" line="298" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_DivVis.H" bodystart="298" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1DivVis_1a471bd09f88c8bafab928781b25b93ece" prot="private" static="yes" mutable="no">
        <type>Real</type>
        <definition>Real amrex::DivVis::beta_def</definition>
        <argsstring></argsstring>
        <name>beta_def</name>
        <initializer>= 1.0</initializer>
        <briefdescription>
<para>Default value for beta (scalar) coeficient. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_DivVis.H" line="301" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_DivVis.H" bodystart="301" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1DivVis_1a422fc4a6cb13a06572b1bab142bb0a39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::DivVis::DivVis</definition>
        <argsstring>(const BndryData &amp;bd, Real _h)</argsstring>
        <name>DivVis</name>
        <param>
          <type>const <ref refid="classamrex_1_1BndryData" kindref="compound">BndryData</ref> &amp;</type>
          <declname>bd</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>_h</declname>
        </param>
        <briefdescription>
<para>Constructor for box array, boundary data and scalar mesh spacing. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bd</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_h</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_DivVis.H" line="79" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_DivVis.cpp" bodystart="23" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DivVis_1a0552b022d249d93e1b8a50ca099efaa2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::DivVis::DivVis</definition>
        <argsstring>(const BndryData &amp;bd, const Real *_h)</argsstring>
        <name>DivVis</name>
        <param>
          <type>const <ref refid="classamrex_1_1BndryData" kindref="compound">BndryData</ref> &amp;</type>
          <declname>bd</declname>
        </param>
        <param>
          <type>const Real *</type>
          <declname>_h</declname>
        </param>
        <briefdescription>
<para>Constructor for box array, boundary data and vector mesh spacing. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bd</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_h</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_DivVis.H" line="88" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_DivVis.cpp" bodystart="37" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DivVis_1aa258ebaec92785420ce8048007a2c98f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>amrex::DivVis::~DivVis</definition>
        <argsstring>() override</argsstring>
        <name>~DivVis</name>
        <briefdescription>
<para>The destructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_DivVis.H" line="94" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_DivVis.cpp" bodystart="71" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DivVis_1a6e56736e19b779b7baf3e14910089cb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::DivVis::setScalars</definition>
        <argsstring>(Real _alpha, Real _beta)</argsstring>
        <name>setScalars</name>
        <param>
          <type>Real</type>
          <declname>_alpha</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>_beta</declname>
        </param>
        <briefdescription>
<para>Set scalar coefficients. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_alpha</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_beta</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_DivVis.H" line="102" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_DivVis.cpp" bodystart="77" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DivVis_1a50e964050f6b9754336fa4f391d49661" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::DivVis::get_alpha</definition>
        <argsstring>() const </argsstring>
        <name>get_alpha</name>
        <briefdescription>
<para>Get scalar alpha coefficient. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_DivVis.H" line="108" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_DivVis.H" bodystart="313" bodyend="316"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DivVis_1a7d9a701344aa31732bcae64631e6f4d2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::DivVis::get_beta</definition>
        <argsstring>() const </argsstring>
        <name>get_beta</name>
        <briefdescription>
<para>Get scalar beta coefficient. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_DivVis.H" line="113" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_DivVis.H" bodystart="320" bodyend="323"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DivVis_1ad71b1ab4713d841bf18478dd2b4482d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
        <definition>const MultiFab &amp; amrex::DivVis::aCoefficients</definition>
        <argsstring>(int level=0)</argsstring>
        <name>aCoefficients</name>
        <param>
          <type>int</type>
          <declname>level</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Return reference to &quot;a&quot; coefficients for base level. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_DivVis.H" line="120" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_DivVis.cpp" bodystart="247" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DivVis_1a24c2bbe9c98b0aabb4cadb521bf4024c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
        <definition>const MultiFab &amp; amrex::DivVis::bCoefficients</definition>
        <argsstring>(int dir, int level=0)</argsstring>
        <name>bCoefficients</name>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>int</type>
          <declname>level</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Return reference to &quot;b&quot; coefficients for base level. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_DivVis.H" line="128" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_DivVis.cpp" bodystart="254" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DivVis_1aa05f2fae8b501b79b5dd6bd115813412" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::DivVis::aCoefficients</definition>
        <argsstring>(const MultiFab &amp;_a)</argsstring>
        <name>aCoefficients</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>_a</declname>
        </param>
        <briefdescription>
<para>Copy _a into &quot;a&quot; coeffs for base level. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_DivVis.H" line="136" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_DivVis.cpp" bodystart="214" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DivVis_1a5879034a967c02fe15f42b921464c095" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::DivVis::ZeroACoefficients</definition>
        <argsstring>()</argsstring>
        <name>ZeroACoefficients</name>
        <briefdescription>
<para>Zero out the &quot;a&quot; coeffs for base level. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_DivVis.H" line="141" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_DivVis.cpp" bodystart="207" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DivVis_1aafc86b9fe1ead6b5805c2ae03f7866d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::DivVis::bCoefficients</definition>
        <argsstring>(const MultiFab &amp;_b, int dir)</argsstring>
        <name>bCoefficients</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>_b</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Copy _b into &quot;b&quot; coeffs in &quot;dir&quot; coordinate direction for base level. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_DivVis.H" line="149" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_DivVis.cpp" bodystart="225" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DivVis_1a34a865db5ebfde900d540434f1d9c9ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::DivVis::bCoefficients</definition>
        <argsstring>(const FArrayBox &amp;_b, int dir, int gridno)</argsstring>
        <name>bCoefficients</name>
        <param>
          <type>const <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>_b</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>int</type>
          <declname>gridno</declname>
        </param>
        <briefdescription>
<para>copy _b into &quot;b&quot; coeffs in &quot;dir&quot; coordinate direction for base level at supplied gridno </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gridno</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_DivVis.H" line="160" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_DivVis.cpp" bodystart="236" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DivVis_1a3c5e163757992ee115775bee80c7d8cd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::DivVis::setCoefficients</definition>
        <argsstring>(const MultiFab &amp;_a, const MultiFab &amp;_bX, const MultiFab &amp;_bY)</argsstring>
        <name>setCoefficients</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>_a</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>_bX</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>_bY</declname>
        </param>
        <briefdescription>
<para>Alternative (older) version of above members. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_DivVis.H" line="165" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_DivVis.H" bodystart="327" bodyend="341"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DivVis_1a4db460774655581784f5a32be76b1cfc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::DivVis::setCoefficients</definition>
        <argsstring>(const MultiFab &amp;_a, const MultiFab *_b)</argsstring>
        <name>setCoefficients</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>_a</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *</type>
          <declname>_b</declname>
        </param>
        <briefdescription>
<para>Collective version of above members (taking an array of MultiFabs for &quot;b&quot;). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_DivVis.H" line="179" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_DivVis.H" bodystart="345" bodyend="351"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DivVis_1af3cdc2d7a7fd39739b9d1b5ac9e26125" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::DivVis::prepareForLevel</definition>
        <argsstring>(int level) override</argsstring>
        <name>prepareForLevel</name>
        <reimplements refid="classamrex_1_1MCLinOp_1a4f8f72730b5255f1849dc924737afb2b">prepareForLevel</reimplements>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <briefdescription>
<para>Allocate/fill internal data for new level. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_DivVis.H" line="187" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_DivVis.cpp" bodystart="100" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DivVis_1af0e7d03301b4f9eec5a4cf2301165076" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::DivVis::clearToLevel</definition>
        <argsstring>(int level) override</argsstring>
        <name>clearToLevel</name>
        <reimplements refid="classamrex_1_1MCLinOp_1a6ee8ade1dbe21a5df28d5079c5f9012b">clearToLevel</reimplements>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <briefdescription>
<para>Remove internal data for this level and all levels above. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_DivVis.H" line="194" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_DivVis.cpp" bodystart="85" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DivVis_1aa8fbda7d6feba1ef41083acd220727da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::DivVis::invalidate_a_to_level</definition>
        <argsstring>(int lev)</argsstring>
        <name>invalidate_a_to_level</name>
        <param>
          <type>int</type>
          <declname>lev</declname>
        </param>
        <briefdescription>
<para>Set flags so that a coeffs at lev and coarser require recalculation. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lev</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_DivVis.H" line="201" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_DivVis.cpp" bodystart="191" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DivVis_1a2e95b26865c8e1eac891d5e6735ef917" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::DivVis::invalidate_b_to_level</definition>
        <argsstring>(int lev)</argsstring>
        <name>invalidate_b_to_level</name>
        <param>
          <type>int</type>
          <declname>lev</declname>
        </param>
        <briefdescription>
<para>Set flags so that b coeffs at lev and coarser require recalculation. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lev</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_DivVis.H" line="208" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_DivVis.cpp" bodystart="199" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DivVis_1abbcb42e06f807f3291586c2e9bac9ca2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::DivVis::compFlux</definition>
        <argsstring>(MultiFab &amp;xflux, MultiFab &amp;yflux, MultiFab &amp;in)</argsstring>
        <name>compFlux</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>xflux</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>yflux</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
<para>Computes flux associated with operator. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_DivVis.H" line="211" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_DivVis.cpp" bodystart="408" bodyend="536"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classamrex_1_1DivVis_1a1d4742da02a48b2258dccf0d5d44d69d" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::DivVis::initCoefficients</definition>
        <argsstring>(const BoxArray &amp;_ba, const DistributionMapping &amp;_dm)</argsstring>
        <name>initCoefficients</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>_ba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>_dm</declname>
        </param>
        <briefdescription>
<para>Initialize a full set (a,b) of coefficients on the box array. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>&amp;_ba</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_dm</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_DivVis.H" line="226" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_DivVis.cpp" bodystart="156" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DivVis_1a427da73cf1a3f42d44b46ede835cc26a" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::DivVis::Fapply</definition>
        <argsstring>(MultiFab &amp;out, const MultiFab &amp;in, int level) override</argsstring>
        <name>Fapply</name>
        <reimplements refid="classamrex_1_1MCLinOp_1ade3433da9720620c8da309e6c71b21d7">Fapply</reimplements>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <briefdescription>
<para>Compute out=L (in) at level=level. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_DivVis.H" line="235" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_DivVis.cpp" bodystart="539" bodyend="653"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DivVis_1a2956a684286e629475db7c190438421c" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::DivVis::Fsmooth</definition>
        <argsstring>(MultiFab &amp;solnL, const MultiFab &amp;rhsL, int level, int phaseflag) override</argsstring>
        <name>Fsmooth</name>
        <reimplements refid="classamrex_1_1MCLinOp_1a7feed2bd8cdae6728eae9cfd741a18f6">Fsmooth</reimplements>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>solnL</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>rhsL</declname>
        </param>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <param>
          <type>int</type>
          <declname>phaseflag</declname>
        </param>
        <briefdescription>
<para>Apply smoother to improve residual to L(solnL)=rhsL. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>solnL</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhsL</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>phaseflag</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_DivVis.H" line="247" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_DivVis.cpp" bodystart="265" bodyend="405"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DivVis_1a66c8a6abe9f07fc41daea4e524b30bd9" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>int</type>
        <definition>int amrex::DivVis::numberComponents</definition>
        <argsstring>() override</argsstring>
        <name>numberComponents</name>
        <reimplements refid="classamrex_1_1MCLinOp_1a231d6176e9d326dd87e6725dd1b56dad">numberComponents</reimplements>
        <briefdescription>
<para>Return number of components. This is virtual since only the derived knows. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_DivVis.H" line="255" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_DivVis.cpp" bodystart="12" bodyend="15"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DivVis_1adf0a29e71872231fcd7516e7744b1896" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>int</type>
        <definition>int amrex::DivVis::numberPhases</definition>
        <argsstring>() override</argsstring>
        <name>numberPhases</name>
        <reimplements refid="classamrex_1_1MCLinOp_1ab1677db15b4a766d9ee79d5b2259dc53">numberPhases</reimplements>
        <briefdescription>
<para>Number of relaxation phases. On derived class knows. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_DivVis.H" line="260" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_DivVis.cpp" bodystart="18" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DivVis_1a6d5ad27eb201084ab9caf827f7046c51" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::DivVis::initConstruct</definition>
        <argsstring>(const Real *_h)</argsstring>
        <name>initConstruct</name>
        <param>
          <type>const Real *</type>
          <declname>_h</declname>
        </param>
        <briefdescription>
<para>Helper function for object construction. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_h</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_DivVis.H" line="267" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_DivVis.cpp" bodystart="48" bodyend="69"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classamrex_1_1DivVis_1a0b8064193c46253a33872d740486e771" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::DivVis::DivVis</definition>
        <argsstring>(const DivVis &amp;)</argsstring>
        <name>DivVis</name>
        <param>
          <type>const <ref refid="classamrex_1_1DivVis" kindref="compound">DivVis</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Disallow copy constructors (for now...to be fixed). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_DivVis.H" line="307" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DivVis_1a741ac21fd94c6e538b6511387e46cb81" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1DivVis" kindref="compound">DivVis</ref> &amp;</type>
        <definition>DivVis&amp; amrex::DivVis::operator=</definition>
        <argsstring>(const DivVis &amp;)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classamrex_1_1DivVis" kindref="compound">DivVis</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_DivVis.H" line="308" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A <ref refid="classamrex_1_1DivVis" kindref="compound">DivVis</ref> tailors the description of a linear operator to apply the second-order central difference approximation to the differential operator, <computeroutput>alpha*a(x).u(x) - beta*div[tau(u(x))]</computeroutput>, on a cell-centered <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>, u(x). Here, alpha and beta are constants, a(x) is a cell-centered <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>, and b(x) is a vector of wall-centered MultiFabs, 1 per dimension. u(x) can have multiple components, but all coefficient info is scalar, and norm reports on ALL components together. tau is a three by three tensor. </para>    </briefdescription>
    <detaileddescription>
<para><computeroutput>b(x)*(u_{i,j}+u_{j,i})</computeroutput></para><para>A <ref refid="classamrex_1_1DivVis" kindref="compound">DivVis</ref> tailors a <ref refid="classamrex_1_1LinOp" kindref="compound">LinOp</ref> (a virtual base class for general linear operators) to compute the second-order central difference approximation to the differential operator,</para><para><computeroutput>alpha*a(x).u(x) - beta*div[tau(u(x))]</computeroutput></para><para>on a cell-centered <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>, u(x). Here, alpha and beta are constants, a(x) is a cell-centered <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>, and b(x) is a vector of wall-centered MultiFabs, 1 per dimension. u(x) can have multiple components, but all coefficient info is scalar, and norm reports on ALL components together. Tau is the 3 by 3 tensor</para><para><computeroutput>b(x)*(u_{i,j}+u_{j,i})</computeroutput></para><para>This class provides the necessary implementations for applying the operator, and for smoothing a guessed solution to the linear equation system, L(u(x)) = rhs (where rhs is another cell-centered <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>). This class also provides access functions to set/control the coefficient MultiFabs a and b, as well as the scalars, alpha and beta. These customizations are designed for 2D and 3D, with constant (but not necessarily equal) mesh spacing in each direction.</para><para>Application of the operator and smoothing are &quot;level&quot; operations, and therefore must access &quot;hidden&quot; level data (such as boundary conditions, etc) as required, in concert with the semantics of the underlying <ref refid="classamrex_1_1LinOp" kindref="compound">LinOp</ref> defintions. Accordingly, these implementations are &quot;protected&quot; and called only by the publically accessible members of the virtual base class, <ref refid="classamrex_1_1LinOp" kindref="compound">LinOp</ref>. Note that these implementations may therefore assume that boundary (ghost) nodes and other pertinent information are filled properly by the base class functions prior to call.</para><para>Defaults are as follows for the coefficients:</para><para>``alpha = 1.0 beta = 1.0 a (<ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>) = 0.0 b (<ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>) = 1.0`` </para>    </detaileddescription>
    <inheritancegraph>
      <node id="1138">
        <label>amrex::MCLinOp</label>
        <link refid="classamrex_1_1MCLinOp"/>
      </node>
      <node id="1137">
        <label>amrex::DivVis</label>
        <link refid="classamrex_1_1DivVis"/>
        <childnode refid="1138" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1146">
        <label>std::vector&lt; amrex::Vector&lt; amrex::MultiMask &gt;, std::allocator&lt; amrex::Vector&lt; amrex::MultiMask &gt; &gt; &gt;</label>
      </node>
      <node id="1176">
        <label>std::vector&lt; MPI_Status, std::allocator&lt; MPI_Status &gt; &gt;</label>
      </node>
      <node id="1148">
        <label>std::vector&lt; amrex::BoxArray, std::allocator&lt; amrex::BoxArray &gt; &gt;</label>
      </node>
      <node id="1157">
        <label>amrex::FabArrayBase::CacheStats</label>
        <link refid="structamrex_1_1FabArrayBase_1_1CacheStats"/>
        <childnode refid="1158" relation="usage">
          <edgelabel>name</edgelabel>
        </childnode>
      </node>
      <node id="1161">
        <label>amrex::FabArrayBase::FabArrayStats</label>
        <link refid="structamrex_1_1FabArrayBase_1_1FabArrayStats"/>
      </node>
      <node id="1160">
        <label>amrex::IntVect</label>
        <link refid="classamrex_1_1IntVect"/>
        <childnode refid="1160" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
      </node>
      <node id="1143">
        <label>amrex::Vector&lt; amrex::BndryRegister &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="1144" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1190">
        <label>amrex::LayoutData&lt; amrex::Vector&lt; amrex::Vector&lt; amrex::BoundCond &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1LayoutData"/>
        <childnode refid="1156" relation="public-inheritance">
        </childnode>
        <childnode refid="1191" relation="usage">
          <edgelabel>m_data</edgelabel>
        </childnode>
      </node>
      <node id="1182">
        <label>Real</label>
      </node>
      <node id="1150">
        <label>std::vector&lt; amrex::Geometry, std::allocator&lt; amrex::Geometry &gt; &gt;</label>
      </node>
      <node id="1177">
        <label>amrex::Vector&lt; MPI_Request &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="1178" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1151">
        <label>amrex::BndryData</label>
        <link refid="classamrex_1_1BndryData"/>
        <childnode refid="1152" relation="public-inheritance">
        </childnode>
        <childnode refid="1180" relation="usage">
          <edgelabel>geom</edgelabel>
        </childnode>
        <childnode refid="1185" relation="usage">
          <edgelabel>bcloc</edgelabel>
        </childnode>
        <childnode refid="1188" relation="usage">
          <edgelabel>masks</edgelabel>
        </childnode>
        <childnode refid="1190" relation="usage">
          <edgelabel>bcond</edgelabel>
        </childnode>
      </node>
      <node id="1171">
        <label>std::vector&lt; std::string, std::allocator&lt; std::string &gt; &gt;</label>
      </node>
      <node id="1162">
        <label>amrex::Vector&lt; int &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="1163" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1158">
        <label>string</label>
      </node>
      <node id="1179">
        <label>amrex::Periodicity</label>
        <link refid="classamrex_1_1Periodicity"/>
        <childnode refid="1160" relation="usage">
          <edgelabel>period</edgelabel>
        </childnode>
      </node>
      <node id="1173">
        <label>std::vector&lt; char *, std::allocator&lt; char * &gt; &gt;</label>
      </node>
      <node id="1189">
        <label>std::vector&lt; amrex::MultiMask, std::allocator&lt; amrex::MultiMask &gt; &gt;</label>
      </node>
      <node id="1147">
        <label>amrex::Vector&lt; amrex::BoxArray &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="1148" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1172">
        <label>amrex::Vector&lt; char * &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="1173" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1192">
        <label>std::vector&lt; amrex::Vector&lt; amrex::Vector&lt; amrex::BoundCond &gt; &gt;, std::allocator&lt; amrex::Vector&lt; amrex::Vector&lt; amrex::BoundCond &gt; &gt; &gt; &gt;</label>
      </node>
      <node id="1174">
        <label>amrex::FabArray&lt; FAB &gt;::ShMem</label>
        <link refid="structamrex_1_1FabArray_1_1ShMem"/>
      </node>
      <node id="1188">
        <label>amrex::Vector&lt; amrex::MultiMask &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="1189" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1178">
        <label>std::vector&lt; MPI_Request, std::allocator&lt; MPI_Request &gt; &gt;</label>
      </node>
      <node id="1163">
        <label>std::vector&lt; int, std::allocator&lt; int &gt; &gt;</label>
      </node>
      <node id="1144">
        <label>std::vector&lt; amrex::BndryRegister, std::allocator&lt; amrex::BndryRegister &gt; &gt;</label>
      </node>
      <node id="1168">
        <label>amrex::BoxArray</label>
        <link refid="classamrex_1_1BoxArray"/>
        <childnode refid="1160" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
        </childnode>
        <childnode refid="1169" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
      </node>
      <node id="1140">
        <label>amrex::MCLinOp</label>
        <link refid="classamrex_1_1MCLinOp"/>
        <childnode refid="1141" relation="usage">
          <edgelabel>h</edgelabel>
        </childnode>
        <childnode refid="1143" relation="usage">
          <edgelabel>undrrelxr</edgelabel>
          <edgelabel>tangderiv</edgelabel>
        </childnode>
        <childnode refid="1145" relation="usage">
          <edgelabel>maskvals</edgelabel>
        </childnode>
        <childnode refid="1147" relation="usage">
          <edgelabel>gbox</edgelabel>
        </childnode>
        <childnode refid="1149" relation="usage">
          <edgelabel>geomarray</edgelabel>
        </childnode>
        <childnode refid="1151" relation="usage">
          <edgelabel>bgb</edgelabel>
        </childnode>
      </node>
      <node id="1183">
        <label>amrex::RealBox</label>
        <link refid="classamrex_1_1RealBox"/>
        <childnode refid="1182" relation="usage">
          <edgelabel>xhi</edgelabel>
          <edgelabel>xlo</edgelabel>
        </childnode>
      </node>
      <node id="1191">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::Vector&lt; amrex::BoundCond &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="1192" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1184">
        <label>amrex::Box</label>
        <link refid="classamrex_1_1Box"/>
        <childnode refid="1160" relation="usage">
          <edgelabel>bigend</edgelabel>
          <edgelabel>smallend</edgelabel>
        </childnode>
        <childnode refid="1169" relation="usage">
          <edgelabel>btype</edgelabel>
        </childnode>
      </node>
      <node id="1166">
        <label>amrex::DistributionMapping::RefID</label>
        <link refid="structamrex_1_1DistributionMapping_1_1RefID"/>
        <childnode refid="1167" relation="usage">
          <edgelabel>data</edgelabel>
        </childnode>
      </node>
      <node id="1175">
        <label>amrex::Vector&lt; MPI_Status &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="1176" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1194">
        <label>std::vector&lt; amrex::MultiFab *, std::allocator&lt; amrex::MultiFab * &gt; &gt;</label>
      </node>
      <node id="1181">
        <label>amrex::CoordSys</label>
        <link refid="classamrex_1_1CoordSys"/>
        <childnode refid="1182" relation="usage">
          <edgelabel>inv_dx</edgelabel>
          <edgelabel>offset</edgelabel>
          <edgelabel>dx</edgelabel>
        </childnode>
      </node>
      <node id="1196">
        <label>std::vector&lt; Array&lt; amrex::MultiFab *, BL_SPACEDIM &gt;, std::allocator&lt; Array&lt; amrex::MultiFab *, BL_SPACEDIM &gt; &gt; &gt;</label>
      </node>
      <node id="1169">
        <label>amrex::IndexType</label>
        <link refid="classamrex_1_1IndexType"/>
      </node>
      <node id="1167">
        <label>amrex::DistributionMapping::Ref</label>
        <link refid="structamrex_1_1DistributionMapping_1_1Ref"/>
        <childnode refid="1162" relation="usage">
          <edgelabel>m_index_array</edgelabel>
          <edgelabel>m_pmap</edgelabel>
        </childnode>
      </node>
      <node id="1153">
        <label>amrex::FabSet</label>
        <link refid="classamrex_1_1FabSet"/>
        <childnode refid="1154" relation="usage">
          <edgelabel>m_mf</edgelabel>
        </childnode>
      </node>
      <node id="1170">
        <label>amrex::Vector&lt; std::string &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="1171" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1159">
        <label>amrex::DistributionMapping</label>
        <link refid="classamrex_1_1DistributionMapping"/>
      </node>
      <node id="1164">
        <label>amrex::FabArrayBase::BDKey</label>
        <link refid="structamrex_1_1FabArrayBase_1_1BDKey"/>
        <childnode refid="1165" relation="usage">
          <edgelabel>m_ba_id</edgelabel>
        </childnode>
        <childnode refid="1166" relation="usage">
          <edgelabel>m_dm_id</edgelabel>
        </childnode>
      </node>
      <node id="1154">
        <label>amrex::MultiFab</label>
        <link refid="classamrex_1_1MultiFab"/>
        <childnode refid="1155" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1152">
        <label>amrex::BndryRegister</label>
        <link refid="classamrex_1_1BndryRegister"/>
        <childnode refid="1153" relation="usage">
          <edgelabel>bndry</edgelabel>
        </childnode>
        <childnode refid="1168" relation="usage">
          <edgelabel>grids</edgelabel>
        </childnode>
      </node>
      <node id="1180">
        <label>amrex::Geometry</label>
        <link refid="classamrex_1_1Geometry"/>
        <childnode refid="1181" relation="public-inheritance">
        </childnode>
        <childnode refid="1183" relation="usage">
          <edgelabel>prob_domain</edgelabel>
        </childnode>
        <childnode refid="1184" relation="usage">
          <edgelabel>domain</edgelabel>
        </childnode>
      </node>
      <node id="1187">
        <label>std::vector&lt; RealTuple, std::allocator&lt; RealTuple &gt; &gt;</label>
      </node>
      <node id="1185">
        <label>amrex::LayoutData&lt; RealTuple &gt;</label>
        <link refid="classamrex_1_1LayoutData"/>
        <childnode refid="1156" relation="public-inheritance">
        </childnode>
        <childnode refid="1186" relation="usage">
          <edgelabel>m_data</edgelabel>
        </childnode>
      </node>
      <node id="1186">
        <label>amrex::Vector&lt; RealTuple &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="1187" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1149">
        <label>amrex::Vector&lt; amrex::Geometry &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="1150" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1155">
        <label>amrex::FabArray&lt; FArrayBox &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="1156" relation="public-inheritance">
        </childnode>
        <childnode refid="1160" relation="usage">
          <edgelabel>fb_nghost</edgelabel>
        </childnode>
        <childnode refid="1162" relation="usage">
          <edgelabel>fb_recv_size</edgelabel>
          <edgelabel>fb_recv_from</edgelabel>
        </childnode>
        <childnode refid="1170" relation="usage">
          <edgelabel>m_tags</edgelabel>
        </childnode>
        <childnode refid="1172" relation="usage">
          <edgelabel>fb_recv_data</edgelabel>
          <edgelabel>fb_send_data</edgelabel>
        </childnode>
        <childnode refid="1174" relation="usage">
          <edgelabel>shmem</edgelabel>
        </childnode>
        <childnode refid="1175" relation="usage">
          <edgelabel>fb_recv_stat</edgelabel>
        </childnode>
        <childnode refid="1177" relation="usage">
          <edgelabel>fb_send_reqs</edgelabel>
          <edgelabel>fb_recv_reqs</edgelabel>
        </childnode>
        <childnode refid="1179" relation="usage">
          <edgelabel>fb_period</edgelabel>
        </childnode>
      </node>
      <node id="1165">
        <label>amrex::BoxArray::RefID</label>
        <link refid="structamrex_1_1BoxArray_1_1RefID"/>
      </node>
      <node id="1195">
        <label>amrex::Vector&lt; Array&lt; amrex::MultiFab *, BL_SPACEDIM &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="1196" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1193">
        <label>amrex::Vector&lt; amrex::MultiFab * &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="1194" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1156">
        <label>amrex::FabArrayBase</label>
        <link refid="classamrex_1_1FabArrayBase"/>
        <childnode refid="1157" relation="usage">
          <edgelabel>m_FBC_stats</edgelabel>
          <edgelabel>m_FPinfo_stats</edgelabel>
          <edgelabel>m_CFinfo_stats</edgelabel>
          <edgelabel>m_TAC_stats</edgelabel>
          <edgelabel>m_CPC_stats</edgelabel>
        </childnode>
        <childnode refid="1159" relation="usage">
          <edgelabel>distributionMap</edgelabel>
        </childnode>
        <childnode refid="1160" relation="usage">
          <edgelabel>n_grow</edgelabel>
          <edgelabel>comm_tile_size</edgelabel>
          <edgelabel>mfiter_tile_size</edgelabel>
          <edgelabel>mfghostiter_tile_size</edgelabel>
        </childnode>
        <childnode refid="1161" relation="usage">
          <edgelabel>m_FA_stats</edgelabel>
        </childnode>
        <childnode refid="1162" relation="usage">
          <edgelabel>indexArray</edgelabel>
        </childnode>
        <childnode refid="1164" relation="usage">
          <edgelabel>m_bdkey</edgelabel>
        </childnode>
        <childnode refid="1168" relation="usage">
          <edgelabel>boxarray</edgelabel>
        </childnode>
      </node>
      <node id="1142">
        <label>std::vector&lt; Array&lt; Real, BL_SPACEDIM &gt;, std::allocator&lt; Array&lt; Real, BL_SPACEDIM &gt; &gt; &gt;</label>
      </node>
      <node id="1145">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::MultiMask &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="1146" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1141">
        <label>amrex::Vector&lt; Array&lt; Real, BL_SPACEDIM &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="1142" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1139">
        <label>amrex::DivVis</label>
        <link refid="classamrex_1_1DivVis"/>
        <childnode refid="1140" relation="public-inheritance">
        </childnode>
        <childnode refid="1193" relation="usage">
          <edgelabel>acoefs</edgelabel>
        </childnode>
        <childnode refid="1195" relation="usage">
          <edgelabel>bcoefs</edgelabel>
        </childnode>
        <childnode refid="1162" relation="usage">
          <edgelabel>a_valid</edgelabel>
          <edgelabel>b_valid</edgelabel>
        </childnode>
        <childnode refid="1182" relation="usage">
          <edgelabel>a_def</edgelabel>
          <edgelabel>beta</edgelabel>
          <edgelabel>beta_def</edgelabel>
          <edgelabel>b_def</edgelabel>
          <edgelabel>alpha</edgelabel>
          <edgelabel>alpha_def</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_DivVis.H" line="70" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_DivVis.H" bodystart="67" bodyend="309"/>
    <listofallmembers>
      <member refid="classamrex_1_1DivVis_1ad03d16e91df955d7fdc1d3e58879ff38" prot="private" virt="non-virtual"><scope>amrex::DivVis</scope><name>a_def</name></member>
      <member refid="classamrex_1_1DivVis_1a746b5ed710d36f972265d012df8b9a6b" prot="private" virt="non-virtual"><scope>amrex::DivVis</scope><name>a_valid</name></member>
      <member refid="classamrex_1_1DivVis_1ad71b1ab4713d841bf18478dd2b4482d9" prot="public" virt="non-virtual"><scope>amrex::DivVis</scope><name>aCoefficients</name></member>
      <member refid="classamrex_1_1DivVis_1aa05f2fae8b501b79b5dd6bd115813412" prot="public" virt="non-virtual"><scope>amrex::DivVis</scope><name>aCoefficients</name></member>
      <member refid="classamrex_1_1DivVis_1a5ac06b144dababf33acde384979ab6b5" prot="protected" virt="non-virtual"><scope>amrex::DivVis</scope><name>acoefs</name></member>
      <member refid="classamrex_1_1DivVis_1ae044bb26690a4e3b989a12f93d5cb0ee" prot="protected" virt="non-virtual"><scope>amrex::DivVis</scope><name>alpha</name></member>
      <member refid="classamrex_1_1DivVis_1a87478f1a266153c9bc5e55a115a998fa" prot="private" virt="non-virtual"><scope>amrex::DivVis</scope><name>alpha_def</name></member>
      <member refid="classamrex_1_1MCLinOp_1a1dd328d6becc964f64a64e90f21df553" prot="public" virt="virtual"><scope>amrex::DivVis</scope><name>apply</name></member>
      <member refid="classamrex_1_1MCLinOp_1a2b7e69f83cc5c8bfbffadb76be7704fe" prot="public" virt="virtual"><scope>amrex::DivVis</scope><name>applyBC</name></member>
      <member refid="classamrex_1_1DivVis_1a31600764c8764c146ac095b26759188f" prot="private" virt="non-virtual"><scope>amrex::DivVis</scope><name>b_def</name></member>
      <member refid="classamrex_1_1DivVis_1a43c0c842916d35d4c8e75be763b082c6" prot="private" virt="non-virtual"><scope>amrex::DivVis</scope><name>b_valid</name></member>
      <member refid="classamrex_1_1MCLinOp_1a5bec91ec69031287d67b5bdbf9412508" prot="public" virt="non-virtual"><scope>amrex::DivVis</scope><name>bcComponentsNeeded</name></member>
      <member refid="classamrex_1_1DivVis_1a24c2bbe9c98b0aabb4cadb521bf4024c" prot="public" virt="non-virtual"><scope>amrex::DivVis</scope><name>bCoefficients</name></member>
      <member refid="classamrex_1_1DivVis_1aafc86b9fe1ead6b5805c2ae03f7866d9" prot="public" virt="non-virtual"><scope>amrex::DivVis</scope><name>bCoefficients</name></member>
      <member refid="classamrex_1_1DivVis_1a34a865db5ebfde900d540434f1d9c9ff" prot="public" virt="non-virtual"><scope>amrex::DivVis</scope><name>bCoefficients</name></member>
      <member refid="classamrex_1_1DivVis_1a8587bfbe902aed914afad7248104c3d1" prot="protected" virt="non-virtual"><scope>amrex::DivVis</scope><name>bcoefs</name></member>
      <member refid="classamrex_1_1DivVis_1a5eda3ced4c66caa08c7d18a51c470b81" prot="protected" virt="non-virtual"><scope>amrex::DivVis</scope><name>beta</name></member>
      <member refid="classamrex_1_1DivVis_1a471bd09f88c8bafab928781b25b93ece" prot="private" virt="non-virtual"><scope>amrex::DivVis</scope><name>beta_def</name></member>
      <member refid="classamrex_1_1MCLinOp_1a548eebb264a5b3282d34eaaaf6c81048" prot="protected" virt="non-virtual"><scope>amrex::DivVis</scope><name>bgb</name></member>
      <member refid="classamrex_1_1MCLinOp_1a6ec10a3937c0a9713f19f292412272d7" prot="public" virt="non-virtual"><scope>amrex::DivVis</scope><name>bndryData</name></member>
      <member refid="classamrex_1_1MCLinOp_1a764b5e7d289f26cdce132b0bae9e26f9" prot="public" virt="non-virtual"><scope>amrex::DivVis</scope><name>bndryData</name></member>
      <member refid="classamrex_1_1MCLinOp_1ab4e66d5839af27df78afb2857925c8cf" prot="public" virt="non-virtual"><scope>amrex::DivVis</scope><name>boxArray</name></member>
      <member refid="classamrex_1_1DivVis_1af0e7d03301b4f9eec5a4cf2301165076" prot="public" virt="virtual"><scope>amrex::DivVis</scope><name>clearToLevel</name></member>
      <member refid="classamrex_1_1DivVis_1abbcb42e06f807f3291586c2e9bac9ca2" prot="public" virt="non-virtual"><scope>amrex::DivVis</scope><name>compFlux</name></member>
      <member refid="classamrex_1_1MCLinOp_1aff280cffee92580e171452431909b3ae" prot="protected" virt="non-virtual"><scope>amrex::DivVis</scope><name>def_harmavg</name></member>
      <member refid="classamrex_1_1MCLinOp_1ad2c3ac0adae28f6f0b678a4ca63cfe38" prot="protected" virt="non-virtual"><scope>amrex::DivVis</scope><name>def_maxorder</name></member>
      <member refid="classamrex_1_1MCLinOp_1a17752cff7eb15c5a2fc3ccee7660ad7a" prot="protected" virt="non-virtual"><scope>amrex::DivVis</scope><name>def_ncomp</name></member>
      <member refid="classamrex_1_1MCLinOp_1a46a805edef342618ac1dbc55736a6c7e" prot="protected" virt="non-virtual"><scope>amrex::DivVis</scope><name>def_verbose</name></member>
      <member refid="classamrex_1_1MCLinOp_1ad6f6925c2ee62dc16755c23fb5311329" prot="public" virt="non-virtual"><scope>amrex::DivVis</scope><name>DistributionMap</name></member>
      <member refid="classamrex_1_1DivVis_1a422fc4a6cb13a06572b1bab142bb0a39" prot="public" virt="non-virtual"><scope>amrex::DivVis</scope><name>DivVis</name></member>
      <member refid="classamrex_1_1DivVis_1a0552b022d249d93e1b8a50ca099efaa2" prot="public" virt="non-virtual"><scope>amrex::DivVis</scope><name>DivVis</name></member>
      <member refid="classamrex_1_1DivVis_1a0b8064193c46253a33872d740486e771" prot="private" virt="non-virtual"><scope>amrex::DivVis</scope><name>DivVis</name></member>
      <member refid="classamrex_1_1DivVis_1a427da73cf1a3f42d44b46ede835cc26a" prot="protected" virt="virtual"><scope>amrex::DivVis</scope><name>Fapply</name></member>
      <member refid="classamrex_1_1MCLinOp_1a94a289e1826ebbbf13494df7fe36ca61" prot="protected" virt="non-virtual"><scope>amrex::DivVis</scope><name>Finalize</name></member>
      <member refid="classamrex_1_1DivVis_1a2956a684286e629475db7c190438421c" prot="protected" virt="virtual"><scope>amrex::DivVis</scope><name>Fsmooth</name></member>
      <member refid="classamrex_1_1MCLinOp_1aab84b6e210e057fe8f2b32033a9a715a" prot="protected" virt="non-virtual"><scope>amrex::DivVis</scope><name>gbox</name></member>
      <member refid="classamrex_1_1MCLinOp_1a8401757edaca90cef77f79780ed167c9" prot="protected" virt="non-virtual"><scope>amrex::DivVis</scope><name>geomarray</name></member>
      <member refid="classamrex_1_1DivVis_1a50e964050f6b9754336fa4f391d49661" prot="public" virt="non-virtual"><scope>amrex::DivVis</scope><name>get_alpha</name></member>
      <member refid="classamrex_1_1DivVis_1a7d9a701344aa31732bcae64631e6f4d2" prot="public" virt="non-virtual"><scope>amrex::DivVis</scope><name>get_beta</name></member>
      <member refid="classamrex_1_1MCLinOp_1a65c9757672ce54994e94dddfb9febf74" prot="protected" virt="non-virtual"><scope>amrex::DivVis</scope><name>h</name></member>
      <member refid="classamrex_1_1MCLinOp_1aff0b62ad254939c0a1a7f58ae21d90d4" prot="protected" virt="non-virtual"><scope>amrex::DivVis</scope><name>harmavg</name></member>
      <member refid="classamrex_1_1DivVis_1a1d4742da02a48b2258dccf0d5d44d69d" prot="protected" virt="non-virtual"><scope>amrex::DivVis</scope><name>initCoefficients</name></member>
      <member refid="classamrex_1_1DivVis_1a6d5ad27eb201084ab9caf827f7046c51" prot="protected" virt="non-virtual"><scope>amrex::DivVis</scope><name>initConstruct</name></member>
      <member refid="classamrex_1_1MCLinOp_1a20ce8b97ab1c99080dd1cd36dc623200" prot="protected" virt="non-virtual"><scope>amrex::DivVis</scope><name>Initialize</name></member>
      <member refid="classamrex_1_1DivVis_1aa8fbda7d6feba1ef41083acd220727da" prot="public" virt="non-virtual"><scope>amrex::DivVis</scope><name>invalidate_a_to_level</name></member>
      <member refid="classamrex_1_1DivVis_1a2e95b26865c8e1eac891d5e6735ef917" prot="public" virt="non-virtual"><scope>amrex::DivVis</scope><name>invalidate_b_to_level</name></member>
      <member refid="classamrex_1_1MCLinOp_1ae88baa01c91d892429aa19aabd3b62ee" prot="protected" virt="non-virtual"><scope>amrex::DivVis</scope><name>makeCoefficients</name></member>
      <member refid="classamrex_1_1MCLinOp_1aab82caa1ac6f5e02d87dbe75c3025855" prot="protected" virt="non-virtual"><scope>amrex::DivVis</scope><name>maskvals</name></member>
      <member refid="classamrex_1_1MCLinOp_1a804804d2586d5f5ddc4d44ac4a8ff084" prot="protected" virt="non-virtual"><scope>amrex::DivVis</scope><name>maxorder</name></member>
      <member refid="classamrex_1_1MCLinOp_1a5093270f2a3d50079a207e51fd7dc465" prot="public" virt="non-virtual"><scope>amrex::DivVis</scope><name>maxOrder</name></member>
      <member refid="classamrex_1_1MCLinOp_1a8ed17b42866690d6da134be9a14adcf5" prot="public" virt="non-virtual"><scope>amrex::DivVis</scope><name>maxOrder</name></member>
      <member refid="classamrex_1_1MCLinOp_1a9cd70c9f66edfb68fac71aa32b5b5ae9" prot="public" virt="non-virtual"><scope>amrex::DivVis</scope><name>MCLinOp</name></member>
      <member refid="classamrex_1_1MCLinOp_1a7440c4d037f8787d5c934fab16a15ec5" prot="public" virt="non-virtual"><scope>amrex::DivVis</scope><name>MCLinOp</name></member>
      <member refid="classamrex_1_1MCLinOp_1a8fa89134bcec7234949bb0e3f6170eb8" prot="public" virt="non-virtual"><scope>amrex::DivVis</scope><name>nComp</name></member>
      <member refid="classamrex_1_1MCLinOp_1abf551f80ea266a0968e23bd59aa18437" prot="public" virt="virtual"><scope>amrex::DivVis</scope><name>norm</name></member>
      <member refid="classamrex_1_1DivVis_1a66c8a6abe9f07fc41daea4e524b30bd9" prot="protected" virt="virtual"><scope>amrex::DivVis</scope><name>numberComponents</name></member>
      <member refid="classamrex_1_1DivVis_1adf0a29e71872231fcd7516e7744b1896" prot="protected" virt="virtual"><scope>amrex::DivVis</scope><name>numberPhases</name></member>
      <member refid="classamrex_1_1MCLinOp_1ac1fac71d0b49cd8f31c09cabb38430fc" prot="protected" virt="non-virtual"><scope>amrex::DivVis</scope><name>numcomp</name></member>
      <member refid="classamrex_1_1MCLinOp_1a7788de4481c7115aaba52c19a53f26d9" prot="public" virt="non-virtual"><scope>amrex::DivVis</scope><name>numGrids</name></member>
      <member refid="classamrex_1_1MCLinOp_1a47f1b32dacb74cf6e351ab88c6803cd5" prot="public" virt="non-virtual"><scope>amrex::DivVis</scope><name>numLevels</name></member>
      <member refid="classamrex_1_1MCLinOp_1aeb79f64caf7ade2d2a3b88aca4399484" prot="protected" virt="non-virtual"><scope>amrex::DivVis</scope><name>numphase</name></member>
      <member refid="classamrex_1_1DivVis_1a741ac21fd94c6e538b6511387e46cb81" prot="private" virt="non-virtual"><scope>amrex::DivVis</scope><name>operator=</name></member>
      <member refid="classamrex_1_1DivVis_1af3cdc2d7a7fd39739b9d1b5ac9e26125" prot="public" virt="virtual"><scope>amrex::DivVis</scope><name>prepareForLevel</name></member>
      <member refid="classamrex_1_1MCLinOp_1ae7ef659b42829b4dc5481b8587698524" prot="public" virt="virtual"><scope>amrex::DivVis</scope><name>residual</name></member>
      <member refid="classamrex_1_1DivVis_1a3c5e163757992ee115775bee80c7d8cd" prot="public" virt="non-virtual"><scope>amrex::DivVis</scope><name>setCoefficients</name></member>
      <member refid="classamrex_1_1DivVis_1a4db460774655581784f5a32be76b1cfc" prot="public" virt="non-virtual"><scope>amrex::DivVis</scope><name>setCoefficients</name></member>
      <member refid="classamrex_1_1DivVis_1a6e56736e19b779b7baf3e14910089cb7" prot="public" virt="non-virtual"><scope>amrex::DivVis</scope><name>setScalars</name></member>
      <member refid="classamrex_1_1MCLinOp_1a6b14eb43e49a37be7468eff05f91191e" prot="public" virt="virtual"><scope>amrex::DivVis</scope><name>smooth</name></member>
      <member refid="classamrex_1_1MCLinOp_1a97da587d448611c195048182744c553d" prot="protected" virt="non-virtual"><scope>amrex::DivVis</scope><name>tangderiv</name></member>
      <member refid="classamrex_1_1MCLinOp_1a2d966fe023cb3ad25504264597ce0899" prot="protected" virt="non-virtual"><scope>amrex::DivVis</scope><name>undrrelxr</name></member>
      <member refid="classamrex_1_1MCLinOp_1afb9e6ab7626ec58559aecc611c010b8b" prot="protected" virt="non-virtual"><scope>amrex::DivVis</scope><name>verbose</name></member>
      <member refid="classamrex_1_1DivVis_1a5879034a967c02fe15f42b921464c095" prot="public" virt="non-virtual"><scope>amrex::DivVis</scope><name>ZeroACoefficients</name></member>
      <member refid="classamrex_1_1DivVis_1aa258ebaec92785420ce8048007a2c98f" prot="public" virt="virtual"><scope>amrex::DivVis</scope><name>~DivVis</name></member>
      <member refid="classamrex_1_1MCLinOp_1af1ed3024751e3079c432cac6fdb83c81" prot="public" virt="virtual"><scope>amrex::DivVis</scope><name>~MCLinOp</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
