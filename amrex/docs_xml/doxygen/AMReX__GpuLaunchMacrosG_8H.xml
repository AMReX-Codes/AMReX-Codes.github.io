<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="AMReX__GpuLaunchMacrosG_8H" kind="file" language="C++">
    <compoundname>AMReX_GpuLaunchMacrosG.H</compoundname>
      <sectiondef kind="define">
      <memberdef kind="define" id="AMReX__GpuLaunchMacrosG_8H_1a8f1f7a2499c2bd357a65b5927cdd66c9" prot="public" static="no">
        <name>AMREX_GPU_LAUNCH_HOST_DEVICE_LAMBDA_BOXIV</name>
        <param><defname>BX</defname></param>
        <param><defname>IV</defname></param>
        <param><defname>block</defname></param>
        <initializer>if (<ref refid="namespaceamrex_1_1Gpu_1a75701478316a5d131da8097cd795118f" kindref="member">amrex::Gpu::inLaunchRegion</ref>()) \
    { \
        long amrex_i_npts = BX.numPts(); \
        const auto amrex_i_ec = amrex::Gpu::ExecutionConfig(amrex_i_npts); \
        <ref refid="namespaceamrex_1a8fd1cb48ab79898f1f480c55c433113a" kindref="member">amrex::launch_global</ref>&lt;&lt;&lt;amrex_i_ec.numBlocks, amrex_i_ec.numThreads, amrex_i_ec.sharedMem, amrex::Gpu::gpuStream()&gt;&gt;&gt;( \
        [=] <ref refid="AMReX__GpuQualifiers_8H_1a4e626ebf06898d71a9e0790877f1694f" kindref="member">AMREX_GPU_DEVICE</ref> () noexcept { \
            for (auto const amrex_i_i : <ref refid="namespaceamrex_1_1Gpu_1a5a7e65f26ef2a8d356ebef518f007aaf" kindref="member">amrex::Gpu::Range</ref>(amrex_i_npts)) { \
                const auto IV = BX.atOffset(amrex_i_i); \
                block \
            } \
        }); \
        <ref refid="AMReX__GpuError_8H_1aff2d29ad26ba217734430c3d36f42dd1" kindref="member">AMREX_GPU_ERROR_CHECK</ref>(); \
    } \
    else { \
        long amrex_i_npts = BX.numPts(); \
        for (auto const amrex_i_i : <ref refid="namespaceamrex_1_1Gpu_1a5a7e65f26ef2a8d356ebef518f007aaf" kindref="member">amrex::Gpu::Range</ref>(amrex_i_npts)) { \
            const auto IV = BX.atOffset(amrex_i_i); \
            block \
        } \
    }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuLaunchMacrosG.H" line="4" column="9" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuLaunchMacrosG.H" bodystart="4" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="AMReX__GpuLaunchMacrosG_8H_1a18770120c9909bec04c6ab56b3429835" prot="public" static="no">
        <name>AMREX_GPU_LAUNCH_DEVICE_LAMBDA_BOXIV</name>
        <param><defname>BX</defname></param>
        <param><defname>IV</defname></param>
        <param><defname>block</defname></param>
        <initializer>if (<ref refid="namespaceamrex_1_1Gpu_1a75701478316a5d131da8097cd795118f" kindref="member">amrex::Gpu::inLaunchRegion</ref>()) \
    { \
        long amrex_i_npts = BX.numPts(); \
        const auto amrex_i_ec = amrex::Gpu::ExecutionConfig(amrex_i_npts);   \
        <ref refid="namespaceamrex_1a8fd1cb48ab79898f1f480c55c433113a" kindref="member">amrex::launch_global</ref>&lt;&lt;&lt;amrex_i_ec.numBlocks, amrex_i_ec.numThreads, amrex_i_ec.sharedMem, amrex::Gpu::gpuStream()&gt;&gt;&gt;( \
        [=] <ref refid="AMReX__GpuQualifiers_8H_1a4e626ebf06898d71a9e0790877f1694f" kindref="member">AMREX_GPU_DEVICE</ref> () noexcept { \
            for (auto const amrex_i_i : <ref refid="namespaceamrex_1_1Gpu_1a5a7e65f26ef2a8d356ebef518f007aaf" kindref="member">amrex::Gpu::Range</ref>(amrex_i_npts)) { \
                const auto IV = BX.atOffset(amrex_i_i); \
                block \
            } \
        }); \
        <ref refid="AMReX__GpuError_8H_1aff2d29ad26ba217734430c3d36f42dd1" kindref="member">AMREX_GPU_ERROR_CHECK</ref>(); \
    } \
    else { \
        <ref refid="namespaceamrex_1aea69993eec3c9ca497cd0e47522b2ec6" kindref="member">amrex::Abort</ref>(&quot;AMREX_GPU_LAUNCH_DEVICE_LAMBDA_BOXIV: cannot call device function from host&quot;); \
    }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuLaunchMacrosG.H" line="26" column="9" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuLaunchMacrosG.H" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="AMReX__GpuLaunchMacrosG_8H_1ae57c0c24e324c7f036e03631ac52ccef" prot="public" static="no">
        <name>AMREX_GPU_LAUNCH_HOST_DEVICE_LAMBDA_RANGE</name>
        <param><defname>TN</defname></param>
        <param><defname>TI</defname></param>
        <param><defname>block</defname></param>
        <initializer>if (<ref refid="namespaceamrex_1_1Gpu_1a75701478316a5d131da8097cd795118f" kindref="member">amrex::Gpu::inLaunchRegion</ref>()) \
    { \
        const auto amrex_i_ec = amrex::Gpu::ExecutionConfig(TN);             \
        <ref refid="namespaceamrex_1a8fd1cb48ab79898f1f480c55c433113a" kindref="member">amrex::launch_global</ref>&lt;&lt;&lt;amrex_i_ec.numBlocks, amrex_i_ec.numThreads, amrex_i_ec.sharedMem, amrex::Gpu::gpuStream()&gt;&gt;&gt;( \
        [=] <ref refid="AMReX__GpuQualifiers_8H_1a4e626ebf06898d71a9e0790877f1694f" kindref="member">AMREX_GPU_DEVICE</ref> () noexcept { \
            for (auto const TI : <ref refid="namespaceamrex_1_1Gpu_1a5a7e65f26ef2a8d356ebef518f007aaf" kindref="member">amrex::Gpu::Range</ref>(TN)) { \
                block \
            } \
        }); \
        <ref refid="AMReX__GpuError_8H_1aff2d29ad26ba217734430c3d36f42dd1" kindref="member">AMREX_GPU_ERROR_CHECK</ref>(); \
    } \
    else { \
        for (auto const TI : <ref refid="namespaceamrex_1_1Gpu_1a5a7e65f26ef2a8d356ebef518f007aaf" kindref="member">amrex::Gpu::Range</ref>(TN)) { \
            block \
        } \
    }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuLaunchMacrosG.H" line="44" column="9" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuLaunchMacrosG.H" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="AMReX__GpuLaunchMacrosG_8H_1ad1f3024e42b239e08da4610129518d1b" prot="public" static="no">
        <name>AMREX_GPU_LAUNCH_HOST_DEVICE_LAMBDA_RANGE_2</name>
        <param><defname>TN1</defname></param>
        <param><defname>TI1</defname></param>
        <param><defname>block1</defname></param>
        <param><defname>TN2</defname></param>
        <param><defname>TI2</defname></param>
        <param><defname>block2</defname></param>
        <initializer>if (<ref refid="namespaceamrex_1_1Gpu_1a75701478316a5d131da8097cd795118f" kindref="member">amrex::Gpu::inLaunchRegion</ref>()) \
    { \
        const auto amrex_i_ec1 = amrex::Gpu::ExecutionConfig(TN1); \
        const auto amrex_i_ec2 = amrex::Gpu::ExecutionConfig(TN2); \
        dim3 amrex_i_nblocks = <ref refid="namespaceamrex_1aaadb66ad08e0a33ec413e2ce8b687414" kindref="member">amrex::max</ref>(amrex_i_ec1.numBlocks.x, \
                                          amrex_i_ec2.numBlocks.x); \
        amrex_i_nblocks.y = 2; \
        <ref refid="namespaceamrex_1a8fd1cb48ab79898f1f480c55c433113a" kindref="member">amrex::launch_global</ref>&lt;&lt;&lt;amrex_i_nblocks, amrex_i_ec1.numThreads, 0, amrex::Gpu::gpuStream()&gt;&gt;&gt;( \
        [=] <ref refid="AMReX__GpuQualifiers_8H_1a4e626ebf06898d71a9e0790877f1694f" kindref="member">AMREX_GPU_DEVICE</ref> () noexcept { \
            switch (blockIdx.y) { \
            case 0: for (auto const TI1 : <ref refid="namespaceamrex_1_1Gpu_1a5a7e65f26ef2a8d356ebef518f007aaf" kindref="member">amrex::Gpu::Range</ref>(TN1)) { \
                        block1 \
                    } \
                    break; \
            case 1: for (auto const TI2 : <ref refid="namespaceamrex_1_1Gpu_1a5a7e65f26ef2a8d356ebef518f007aaf" kindref="member">amrex::Gpu::Range</ref>(TN2)) { \
                        block2 \
                    } \
            } \
        }); \
        <ref refid="AMReX__GpuError_8H_1aff2d29ad26ba217734430c3d36f42dd1" kindref="member">AMREX_GPU_ERROR_CHECK</ref>(); \
    } \
    else { \
        for (auto const TI1 : <ref refid="namespaceamrex_1_1Gpu_1a5a7e65f26ef2a8d356ebef518f007aaf" kindref="member">amrex::Gpu::Range</ref>(TN1)) { \
            block1 \
        } \
        for (auto const TI2 : <ref refid="namespaceamrex_1_1Gpu_1a5a7e65f26ef2a8d356ebef518f007aaf" kindref="member">amrex::Gpu::Range</ref>(TN2)) { \
            block2 \
        } \
    }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuLaunchMacrosG.H" line="63" column="9" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuLaunchMacrosG.H" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="AMReX__GpuLaunchMacrosG_8H_1a85943be0d705485c46b55c8442846c61" prot="public" static="no">
        <name>AMREX_GPU_LAUNCH_HOST_DEVICE_LAMBDA_RANGE_3</name>
        <param><defname>TN1</defname></param>
        <param><defname>TI1</defname></param>
        <param><defname>block1</defname></param>
        <param><defname>TN2</defname></param>
        <param><defname>TI2</defname></param>
        <param><defname>block2</defname></param>
        <param><defname>TN3</defname></param>
        <param><defname>TI3</defname></param>
        <param><defname>block3</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuLaunchMacrosG.H" line="95" column="9" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuLaunchMacrosG.H" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="AMReX__GpuLaunchMacrosG_8H_1a475e84abbd9698afb9147ac67a49bdaa" prot="public" static="no">
        <name>AMREX_GPU_LAUNCH_DEVICE_LAMBDA_RANGE</name>
        <param><defname>TN</defname></param>
        <param><defname>TI</defname></param>
        <param><defname>block</defname></param>
        <initializer>if (<ref refid="namespaceamrex_1_1Gpu_1a75701478316a5d131da8097cd795118f" kindref="member">amrex::Gpu::inLaunchRegion</ref>()) \
    { \
        auto amrex_i_ec = amrex::Gpu::ExecutionConfig(TN); \
        <ref refid="namespaceamrex_1a8fd1cb48ab79898f1f480c55c433113a" kindref="member">amrex::launch_global</ref>&lt;&lt;&lt;amrex_i_ec.numBlocks, amrex_i_ec.numThreads, amrex_i_ec.sharedMem, amrex::Gpu::gpuStream()&gt;&gt;&gt;( \
        [=] <ref refid="AMReX__GpuQualifiers_8H_1a4e626ebf06898d71a9e0790877f1694f" kindref="member">AMREX_GPU_DEVICE</ref> () noexcept { \
            for (auto const TI : <ref refid="namespaceamrex_1_1Gpu_1a5a7e65f26ef2a8d356ebef518f007aaf" kindref="member">amrex::Gpu::Range</ref>(TN)) { \
                block \
            } \
        }); \
        <ref refid="AMReX__GpuError_8H_1aff2d29ad26ba217734430c3d36f42dd1" kindref="member">AMREX_GPU_ERROR_CHECK</ref>(); \
    } \
    else { \
        <ref refid="namespaceamrex_1aea69993eec3c9ca497cd0e47522b2ec6" kindref="member">amrex::Abort</ref>(&quot;AMREX_GPU_LAUNCH_DEVICE_LAMBDA_RANGE: cannot call device function from host&quot;); \
    }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuLaunchMacrosG.H" line="135" column="9" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuLaunchMacrosG.H" bodystart="135" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="AMReX__GpuLaunchMacrosG_8H_1a289cd6699548aba71d287d94299ae098" prot="public" static="no">
        <name>AMREX_GPU_LAUNCH_DEVICE_LAMBDA_RANGE_2</name>
        <param><defname>TN1</defname></param>
        <param><defname>TI1</defname></param>
        <param><defname>block1</defname></param>
        <param><defname>TN2</defname></param>
        <param><defname>TI2</defname></param>
        <param><defname>block2</defname></param>
        <initializer>if (<ref refid="namespaceamrex_1_1Gpu_1a75701478316a5d131da8097cd795118f" kindref="member">amrex::Gpu::inLaunchRegion</ref>()) \
    { \
        const auto amrex_i_ec1 = amrex::Gpu::ExecutionConfig(TN1); \
        const auto amrex_i_ec2 = amrex::Gpu::ExecutionConfig(TN2); \
        dim3 amrex_i_nblocks = <ref refid="namespaceamrex_1aaadb66ad08e0a33ec413e2ce8b687414" kindref="member">amrex::max</ref>(amrex_i_ec1.numBlocks.x, \
                                          amrex_i_ec2.numBlocks.x); \
        amrex_i_nblocks.y = 2; \
        <ref refid="namespaceamrex_1a8fd1cb48ab79898f1f480c55c433113a" kindref="member">amrex::launch_global</ref>&lt;&lt;&lt;amrex_i_nblocks, amrex_i_ec1.numThreads, 0, amrex::Gpu::gpuStream()&gt;&gt;&gt;( \
        [=] <ref refid="AMReX__GpuQualifiers_8H_1a4e626ebf06898d71a9e0790877f1694f" kindref="member">AMREX_GPU_DEVICE</ref> () noexcept { \
            switch (blockIdx.y) { \
            case 0: for (auto const TI1 : <ref refid="namespaceamrex_1_1Gpu_1a5a7e65f26ef2a8d356ebef518f007aaf" kindref="member">amrex::Gpu::Range</ref>(TN1)) { \
                        block1 \
                    } \
                    break; \
            case 1: for (auto const TI2 : <ref refid="namespaceamrex_1_1Gpu_1a5a7e65f26ef2a8d356ebef518f007aaf" kindref="member">amrex::Gpu::Range</ref>(TN2)) { \
                        block2 \
                    } \
            } \
        }); \
        <ref refid="AMReX__GpuError_8H_1aff2d29ad26ba217734430c3d36f42dd1" kindref="member">AMREX_GPU_ERROR_CHECK</ref>(); \
    } \
    else { \
        <ref refid="namespaceamrex_1aea69993eec3c9ca497cd0e47522b2ec6" kindref="member">amrex::Abort</ref>(&quot;AMREX_GPU_LAUNCH_DEVICE_LAMBDA_RANGE_2: cannot call device function from host&quot;); \
    }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuLaunchMacrosG.H" line="152" column="9" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuLaunchMacrosG.H" bodystart="152" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="AMReX__GpuLaunchMacrosG_8H_1ab8f5b7c92c1194b0f0482c84ce1fe5b3" prot="public" static="no">
        <name>AMREX_GPU_LAUNCH_DEVICE_LAMBDA_RANGE_3</name>
        <param><defname>TN1</defname></param>
        <param><defname>TI1</defname></param>
        <param><defname>block1</defname></param>
        <param><defname>TN2</defname></param>
        <param><defname>TI2</defname></param>
        <param><defname>block2</defname></param>
        <param><defname>TN3</defname></param>
        <param><defname>TI3</defname></param>
        <param><defname>block3</defname></param>
        <initializer>if (<ref refid="namespaceamrex_1_1Gpu_1a75701478316a5d131da8097cd795118f" kindref="member">amrex::Gpu::inLaunchRegion</ref>()) \
    { \
        const auto amrex_i_ec1 = amrex::Gpu::ExecutionConfig(TN1); \
        const auto amrex_i_ec2 = amrex::Gpu::ExecutionConfig(TN2); \
        const auto amrex_i_ec3 = amrex::Gpu::ExecutionConfig(TN3); \
        dim3 amrex_i_nblocks = <ref refid="namespaceamrex_1aaadb66ad08e0a33ec413e2ce8b687414" kindref="member">amrex::max</ref>(<ref refid="namespaceamrex_1aaadb66ad08e0a33ec413e2ce8b687414" kindref="member">amrex::max</ref>(amrex_i_ec1.numBlocks.x, \
                                                     amrex_i_ec2.numBlocks.x), \
                                                     amrex_i_ec3.numBlocks.x); \
        amrex_i_nblocks.y = 3; \
        <ref refid="namespaceamrex_1a8fd1cb48ab79898f1f480c55c433113a" kindref="member">amrex::launch_global</ref>&lt;&lt;&lt;amrex_i_nblocks, amrex_i_ec1.numThreads, 0, amrex::Gpu::gpuStream()&gt;&gt;&gt;( \
        [=] <ref refid="AMReX__GpuQualifiers_8H_1a4e626ebf06898d71a9e0790877f1694f" kindref="member">AMREX_GPU_DEVICE</ref> () noexcept { \
            switch (blockIdx.y) { \
            case 0: for (auto const TI1 : <ref refid="namespaceamrex_1_1Gpu_1a5a7e65f26ef2a8d356ebef518f007aaf" kindref="member">amrex::Gpu::Range</ref>(TN1)) { \
                        block1 \
                    } \
                    break; \
            case 1: for (auto const TI2 : <ref refid="namespaceamrex_1_1Gpu_1a5a7e65f26ef2a8d356ebef518f007aaf" kindref="member">amrex::Gpu::Range</ref>(TN2)) { \
                        block2 \
                    } \
            case 2: for (auto const TI3 : <ref refid="namespaceamrex_1_1Gpu_1a5a7e65f26ef2a8d356ebef518f007aaf" kindref="member">amrex::Gpu::Range</ref>(TN3)) { \
                        block3 \
                    } \
            } \
        }); \
        <ref refid="AMReX__GpuError_8H_1aff2d29ad26ba217734430c3d36f42dd1" kindref="member">AMREX_GPU_ERROR_CHECK</ref>(); \
    } \
    else { \
        <ref refid="namespaceamrex_1aea69993eec3c9ca497cd0e47522b2ec6" kindref="member">amrex::Abort</ref>(&quot;AMREX_GPU_LAUNCH_DEVICE_LAMBDA_RANGE_2: cannot call device function from host&quot;); \
    }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuLaunchMacrosG.H" line="179" column="9" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuLaunchMacrosG.H" bodystart="179" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="AMReX__GpuLaunchMacrosG_8H_1a1ab3fba7a2f040bdd4a40de04b22c828" prot="public" static="no">
        <name>AMREX_GPU_LAUNCH_HOST_DEVICE_LAMBDA_BOX</name>
        <param><defname>bbb</defname></param>
        <param><defname>tbb</defname></param>
        <param><defname>block</defname></param>
        <initializer>if (<ref refid="namespaceamrex_1_1Gpu_1a75701478316a5d131da8097cd795118f" kindref="member">amrex::Gpu::inLaunchRegion</ref>()) \
    { \
        const auto amrex_i_ec = amrex::Gpu::ExecutionConfig(bbb); \
        <ref refid="namespaceamrex_1a8fd1cb48ab79898f1f480c55c433113a" kindref="member">amrex::launch_global</ref>&lt;&lt;&lt;amrex_i_ec.numBlocks, amrex_i_ec.numThreads, amrex_i_ec.sharedMem, amrex::Gpu::gpuStream()&gt;&gt;&gt;( \
        [=] <ref refid="AMReX__GpuQualifiers_8H_1a4e626ebf06898d71a9e0790877f1694f" kindref="member">AMREX_GPU_DEVICE</ref> () noexcept { \
            long amrex_i_numpts = bbb.numPts(); \
            long amrex_i_tid = blockDim.x*blockIdx.x + threadIdx.x; \
            long amrex_i_wid = amrex_i_tid / amrex::Gpu::Device::warp_size; \
            long amrex_i_lid = amrex_i_tid - amrex_i_wid*amrex::Gpu::Device::warp_size; \
            long amrex_i_offset = amrex_i_lid + amrex_i_wid*<ref refid="AMReX__GpuLaunch_8H_1aa17614e5b3183f76e0bbb003a8a5e139" kindref="member">AMREX_GPU_NCELLS_PER_THREAD</ref>*amrex::Gpu::Device::warp_size; \
            for (long amrex_i_i = 0; amrex_i_i &lt; <ref refid="AMReX__GpuLaunch_8H_1aa17614e5b3183f76e0bbb003a8a5e139" kindref="member">AMREX_GPU_NCELLS_PER_THREAD</ref>; ++amrex_i_i, amrex_i_offset += amrex::Gpu::Device::warp_size) \
            { \
                <ref refid="classamrex_1_1Box" kindref="compound">amrex::Box</ref> tbb = <ref refid="namespaceamrex_1_1Gpu_1a487b4842b7ddc2b14afd7eb184f89818" kindref="member">amrex::Gpu::getThreadBox</ref>(bbb, amrex_i_offset); \
                if (tbb.ok()) block \
            } \
        }); \
        <ref refid="AMReX__GpuError_8H_1aff2d29ad26ba217734430c3d36f42dd1" kindref="member">AMREX_GPU_ERROR_CHECK</ref>(); \
    } \
    else { \
        const <ref refid="classamrex_1_1Box" kindref="compound">amrex::Box</ref>&amp; tbb = bbb; \
        block \
    }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuLaunchMacrosG.H" line="210" column="9" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuLaunchMacrosG.H" bodystart="210" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="AMReX__GpuLaunchMacrosG_8H_1a08cb2d3ad30327911553ea051dcd0a38" prot="public" static="no">
        <name>AMREX_GPU_LAUNCH_HOST_DEVICE_LAMBDA_ASYNC</name>
        <param><defname>bbb</defname></param>
        <param><defname>tbb</defname></param>
        <param><defname>sync_var</defname></param>
        <param><defname>block</defname></param>
        <initializer>if (<ref refid="namespaceamrex_1_1Gpu_1a75701478316a5d131da8097cd795118f" kindref="member">amrex::Gpu::inLaunchRegion</ref>()) \
    { \
        auto amrex_i_ec = amrex::Gpu::ExecutionConfig(bbb); \
        <ref refid="namespaceamrex_1a8fd1cb48ab79898f1f480c55c433113a" kindref="member">amrex::launch_global</ref>&lt;&lt;&lt;amrex_i_ec.numBlocks, amrex_i_ec.numThreads, amrex_i_ec.sharedMem, amrex::Gpu::gpuStream()&gt;&gt;&gt;( \
        [=] <ref refid="AMReX__GpuQualifiers_8H_1a4e626ebf06898d71a9e0790877f1694f" kindref="member">AMREX_GPU_DEVICE</ref> () noexcept { \
            long amrex_i_numpts = bbb.numPts(); \
            long amrex_i_tid = blockDim.x*blockIdx.x + threadIdx.x; \
            long amrex_i_wid = amrex_i_tid / amrex::Gpu::Device::warp_size; \
            long amrex_i_lid = amrex_i_tid - amrex_i_wid*amrex::Gpu::Device::warp_size; \
            long amrex_i_offset = amrex_i_lid + amrex_i_wid*<ref refid="AMReX__GpuLaunch_8H_1aa17614e5b3183f76e0bbb003a8a5e139" kindref="member">AMREX_GPU_NCELLS_PER_THREAD</ref>*amrex::Gpu::Device::warp_size; \
            for (long amrex_i_i = 0; amrex_i_i &lt; <ref refid="AMReX__GpuLaunch_8H_1aa17614e5b3183f76e0bbb003a8a5e139" kindref="member">AMREX_GPU_NCELLS_PER_THREAD</ref>; ++amrex_i_i, amrex_i_offset += amrex::Gpu::Device::warp_size) \
            { \
                <ref refid="classamrex_1_1Box" kindref="compound">amrex::Box</ref> tbb = <ref refid="namespaceamrex_1_1Gpu_1a487b4842b7ddc2b14afd7eb184f89818" kindref="member">amrex::Gpu::getThreadBox</ref>(bbb, amrex_i_offset); \
                if (tbb.ok()) block \
            } \
        }); \
        ++sync_var; \
        amrex::Gpu::Device::set_stream_index(sync_var); \
        <ref refid="AMReX__GpuError_8H_1aff2d29ad26ba217734430c3d36f42dd1" kindref="member">AMREX_GPU_ERROR_CHECK</ref>(); \
    } \
    else { \
        const <ref refid="classamrex_1_1Box" kindref="compound">amrex::Box</ref>&amp; tbb = bbb; \
        block \
    }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuLaunchMacrosG.H" line="234" column="9" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuLaunchMacrosG.H" bodystart="234" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="AMReX__GpuLaunchMacrosG_8H_1ae300fea905f74fff12ec2fcc4966335c" prot="public" static="no">
        <name>AMREX_GPU_LAUNCH_DEVICE_LAMBDA_BOX</name>
        <param><defname>bbb</defname></param>
        <param><defname>tbb</defname></param>
        <param><defname>block</defname></param>
        <initializer>if (<ref refid="namespaceamrex_1_1Gpu_1a75701478316a5d131da8097cd795118f" kindref="member">amrex::Gpu::inLaunchRegion</ref>()) \
    { \
        const auto amrex_i_ec = amrex::Gpu::ExecutionConfig(bbb); \
        <ref refid="namespaceamrex_1a8fd1cb48ab79898f1f480c55c433113a" kindref="member">amrex::launch_global</ref>&lt;&lt;&lt;amrex_i_ec.numBlocks, amrex_i_ec.numThreads, amrex_i_ec.sharedMem, amrex::Gpu::gpuStream()&gt;&gt;&gt;( \
        [=] <ref refid="AMReX__GpuQualifiers_8H_1a4e626ebf06898d71a9e0790877f1694f" kindref="member">AMREX_GPU_DEVICE</ref> () noexcept { \
            long amrex_i_numpts = bbb.numPts(); \
            long amrex_i_tid = blockDim.x*blockIdx.x + threadIdx.x; \
            long amrex_i_wid = amrex_i_tid / amrex::Gpu::Device::warp_size; \
            long amrex_i_lid = amrex_i_tid - amrex_i_wid*amrex::Gpu::Device::warp_size; \
            long amrex_i_offset = amrex_i_lid + amrex_i_wid*<ref refid="AMReX__GpuLaunch_8H_1aa17614e5b3183f76e0bbb003a8a5e139" kindref="member">AMREX_GPU_NCELLS_PER_THREAD</ref>*amrex::Gpu::Device::warp_size; \
            for (long amrex_i_i = 0; amrex_i_i &lt; <ref refid="AMReX__GpuLaunch_8H_1aa17614e5b3183f76e0bbb003a8a5e139" kindref="member">AMREX_GPU_NCELLS_PER_THREAD</ref>; ++amrex_i_i, amrex_i_offset += amrex::Gpu::Device::warp_size) \
            { \
                <ref refid="classamrex_1_1Box" kindref="compound">amrex::Box</ref> tbb = <ref refid="namespaceamrex_1_1Gpu_1a487b4842b7ddc2b14afd7eb184f89818" kindref="member">amrex::Gpu::getThreadBox</ref>(bbb, amrex_i_offset); \
                if (tbb.ok()) block \
            } \
        }); \
        <ref refid="AMReX__GpuError_8H_1aff2d29ad26ba217734430c3d36f42dd1" kindref="member">AMREX_GPU_ERROR_CHECK</ref>(); \
    } \
    else { \
        <ref refid="namespaceamrex_1aea69993eec3c9ca497cd0e47522b2ec6" kindref="member">amrex::Abort</ref>(&quot;AMREX_GPU_LAUNCH_DEVICE_LAMBDA: cannot call device function from host&quot;); \
    }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuLaunchMacrosG.H" line="260" column="9" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuLaunchMacrosG.H" bodystart="260" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="AMReX__GpuLaunchMacrosG_8H_1a54ab53f6a8e04f6e15cd6ef6eb084e17" prot="public" static="no">
        <name>AMREX_GPU_LAUNCH_HOST_DEVICE_XYZ</name>
        <param><defname>bbx</defname></param>
        <param><defname>bby</defname></param>
        <param><defname>bbz</defname></param>
        <param><defname>tbx</defname></param>
        <param><defname>tby</defname></param>
        <param><defname>tbz</defname></param>
        <param><defname>blockx</defname></param>
        <param><defname>blocky</defname></param>
        <param><defname>blockz</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuLaunchMacrosG.H" line="283" column="9" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuLaunchMacrosG.H" bodystart="283" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="AMReX__GpuLaunchMacrosG_8H_1a5debd083a1702fe10d2cfc07f6c250c4" prot="public" static="no">
        <name>AMREX_GPU_LAUNCH_HOST_DEVICE_LAMBDA_NOBOX</name>
        <param><defname>bbb</defname></param>
        <param><defname>tbb</defname></param>
        <param><defname>block</defname></param>
        <initializer>if (<ref refid="namespaceamrex_1_1Gpu_1a75701478316a5d131da8097cd795118f" kindref="member">amrex::Gpu::inLaunchRegion</ref>()) \
    { \
        const auto amrex_i_ec = amrex::Gpu::ExecutionConfig(); \
        <ref refid="namespaceamrex_1a8fd1cb48ab79898f1f480c55c433113a" kindref="member">amrex::launch_global</ref>&lt;&lt;&lt;amrex_i_ec.numBlocks, amrex_i_ec.numThreads, amrex_i_ec.sharedMem, amrex::Gpu::gpuStream()&gt;&gt;&gt;( \
        [=] <ref refid="AMReX__GpuQualifiers_8H_1a4e626ebf06898d71a9e0790877f1694f" kindref="member">AMREX_GPU_DEVICE</ref> () noexcept { \
            const auto amrex_i_lo = bbb.loVect3d(); \
            const auto amrex_i_hi = bbb.hiVect3d(); \
            for (int amrex_i_k = amrex_i_lo[2] + blockIdx.z * blockDim.z + threadIdx.z; amrex_i_k &lt;= amrex_i_hi[2]; amrex_i_k += blockDim.z * gridDim.z) { \
            for (int amrex_i_j = amrex_i_lo[1] + blockIdx.y * blockDim.y + threadIdx.y; amrex_i_j &lt;= amrex_i_hi[1]; amrex_i_j += blockDim.y * gridDim.y) { \
            for (int amrex_i_i = amrex_i_lo[0] + blockIdx.x * blockDim.x + threadIdx.x; amrex_i_i &lt;= amrex_i_hi[0]; amrex_i_i += blockDim.x * gridDim.x) { \
                <ref refid="classamrex_1_1Box" kindref="compound">amrex::Box</ref> tbb(IntVect(AMREX_D_DECL(amrex_i_i,amrex_i_j,amrex_i_k)), \
                               IntVect(AMREX_D_DECL(amrex_i_i,amrex_i_j,amrex_i_k)), \
                               bbb.type()); \
                block \
            }}} \
        }); \
        <ref refid="AMReX__GpuError_8H_1aff2d29ad26ba217734430c3d36f42dd1" kindref="member">AMREX_GPU_ERROR_CHECK</ref>(); \
    } \
    else { \
        const <ref refid="classamrex_1_1Box" kindref="compound">amrex::Box</ref>&amp; tbb = bbb; \
        block \
    }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuLaunchMacrosG.H" line="324" column="9" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuLaunchMacrosG.H" bodystart="324" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="AMReX__GpuLaunchMacrosG_8H_1afdb04f8f29ef1f1873b3e856c3418d91" prot="public" static="no">
        <name>AMREX_GPU_LAUNCH_HOST_DEVICE</name>
        <param><defname>strategy</defname></param>
        <param><defname>...</defname></param>
        <initializer>{ \
      if (<ref refid="namespaceamrex_1_1Gpu_1a75701478316a5d131da8097cd795118f" kindref="member">amrex::Gpu::inLaunchRegion</ref>()) \
      { \
         const auto amrex_i_ec = strategy;                                           \
         <ref refid="namespaceamrex_1a8fd1cb48ab79898f1f480c55c433113a" kindref="member">amrex::launch_global</ref>&lt;&lt;&lt;amrex_i_ec.numBlocks, amrex_i_ec.numThreads, amrex_i_ec.sharedMem, amrex::Gpu::gpuStream()&gt;&gt;&gt;(__VA_ARGS__); \
         <ref refid="AMReX__GpuError_8H_1aff2d29ad26ba217734430c3d36f42dd1" kindref="member">AMREX_GPU_ERROR_CHECK</ref>(); \
      } \
      else \
      { \
         <ref refid="namespaceamrex_1a006c22eb1e141a0784faa415c00a49c4" kindref="member">amrex::launch_host</ref>(__VA_ARGS__); \
      } \
    }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuLaunchMacrosG.H" line="348" column="9" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuLaunchMacrosG.H" bodystart="348" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="AMReX__GpuLaunchMacrosG_8H_1aaf70337f5a8dc79f8b261d44675be3a4" prot="public" static="no">
        <name>AMREX_GPU_LAUNCH_DEVICE</name>
        <param><defname>strategy</defname></param>
        <param><defname>...</defname></param>
        <initializer>{ \
      if (<ref refid="namespaceamrex_1_1Gpu_1a75701478316a5d131da8097cd795118f" kindref="member">amrex::Gpu::inLaunchRegion</ref>()) \
      { \
         const auto amrex_i_ec = strategy;                                   \
         <ref refid="namespaceamrex_1a8fd1cb48ab79898f1f480c55c433113a" kindref="member">amrex::launch_global</ref>&lt;&lt;&lt;amrex_i_ec.numBlocks, amrex_i_ec.numThreads, amrex_i_ec.sharedMem, amrex::Gpu::gpuStream()&gt;&gt;&gt;(__VA_ARGS__); \
         <ref refid="AMReX__GpuError_8H_1aff2d29ad26ba217734430c3d36f42dd1" kindref="member">AMREX_GPU_ERROR_CHECK</ref>(); \
      } \
      else \
      { \
         <ref refid="namespaceamrex_1aea69993eec3c9ca497cd0e47522b2ec6" kindref="member">amrex::Abort</ref>(&quot;AMREX_GPU_LAUNCH_DEVICE: cannot call device function from host&quot;); \
      } \
    }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuLaunchMacrosG.H" line="362" column="9" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuLaunchMacrosG.H" bodystart="362" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="AMReX__GpuLaunchMacrosG_8H_1a44688f0ed0e82584f58388211c89bcea" prot="public" static="no">
        <name>AMREX_GPU_LAUNCH_GLOBAL</name>
        <param><defname>strategy</defname></param>
        <param><defname>function</defname></param>
        <param><defname>...</defname></param>
        <initializer>{ \
        const auto amrex_i_ec = strategy;                                             \
        function&lt;&lt;&lt;amrex_i_ec.numBlocks, amrex_i_ec.numThreads, amrex_i_ec.sharedMem, amrex::Gpu::gpuStream()&gt;&gt;&gt;(__VA_ARGS__); \
        <ref refid="AMReX__GpuError_8H_1aff2d29ad26ba217734430c3d36f42dd1" kindref="member">AMREX_GPU_ERROR_CHECK</ref>();                                               \
    }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuLaunchMacrosG.H" line="377" column="9" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuLaunchMacrosG.H" bodystart="377" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="AMReX__GpuLaunchMacrosG_8H_1a29d34dc14598d6232a67c02ced582cb3" prot="public" static="no">
        <name>AMREX_GPU_HOST_DEVICE_FOR_1D</name>
        <param><defname>n</defname></param>
        <param><defname>i</defname></param>
        <param><defname>block</defname></param>
        <initializer>if (<ref refid="namespaceamrex_1_1Gpu_1a75701478316a5d131da8097cd795118f" kindref="member">amrex::Gpu::inLaunchRegion</ref>()) \
    { \
        const auto amrex_i_ec = amrex::Gpu::ExecutionConfig(n); \
        <ref refid="namespaceamrex_1a8fd1cb48ab79898f1f480c55c433113a" kindref="member">amrex::launch_global</ref>&lt;&lt;&lt;amrex_i_ec.numBlocks, amrex_i_ec.numThreads, amrex_i_ec.sharedMem, amrex::Gpu::gpuStream()&gt;&gt;&gt;( \
        [=] <ref refid="AMReX__GpuQualifiers_8H_1a4e626ebf06898d71a9e0790877f1694f" kindref="member">AMREX_GPU_DEVICE</ref> () noexcept { \
            for (int i = blockDim.x*blockIdx.x+threadIdx.x, amrex_i_stride = blockDim.x*gridDim.x; \
                     i &lt; n; i += amrex_i_stride) { \
                block \
            } \
        }); \
        <ref refid="AMReX__GpuError_8H_1aff2d29ad26ba217734430c3d36f42dd1" kindref="member">AMREX_GPU_ERROR_CHECK</ref>(); \
    } \
    else { \
        <ref refid="AMReX__Extension_8H_1a8c414106ab987031039a0ad05bb2519b" kindref="member">AMREX_PRAGMA_SIMD</ref> \
        for (auto i = decltype(n){0}; i &lt; n; ++i) block     \
    }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuLaunchMacrosG.H" line="386" column="9" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuLaunchMacrosG.H" bodystart="386" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="AMReX__GpuLaunchMacrosG_8H_1aaa11b38ec048ffdce3869fb15f3d1ff7" prot="public" static="no">
        <name>AMREX_GPU_DEVICE_FOR_1D</name>
        <param><defname>n</defname></param>
        <param><defname>i</defname></param>
        <param><defname>block</defname></param>
        <initializer>{ \
        const auto amrex_i_ec = amrex::Gpu::ExecutionConfig(n); \
        <ref refid="namespaceamrex_1a8fd1cb48ab79898f1f480c55c433113a" kindref="member">amrex::launch_global</ref>&lt;&lt;&lt;amrex_i_ec.numBlocks, amrex_i_ec.numThreads, amrex_i_ec.sharedMem, amrex::Gpu::gpuStream()&gt;&gt;&gt;( \
        [=] <ref refid="AMReX__GpuQualifiers_8H_1a4e626ebf06898d71a9e0790877f1694f" kindref="member">AMREX_GPU_DEVICE</ref> () noexcept { \
            for (int i = blockDim.x*blockIdx.x+threadIdx.x, amrex_i_stride = blockDim.x*gridDim.x; \
                     i &lt; n; i += amrex_i_stride) { \
                block \
            } \
        }); \
        <ref refid="AMReX__GpuError_8H_1aff2d29ad26ba217734430c3d36f42dd1" kindref="member">AMREX_GPU_ERROR_CHECK</ref>(); \
    }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuLaunchMacrosG.H" line="404" column="9" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuLaunchMacrosG.H" bodystart="404" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="AMReX__GpuLaunchMacrosG_8H_1ab14f59d411d19d19888ee7fd5fc3318c" prot="public" static="no">
        <name>AMREX_GPU_DEVICE_PARALLEL_FOR_1D</name>
        <param><defname>...</defname></param>
        <initializer><ref refid="AMReX__GpuLaunchMacrosG_8H_1aaa11b38ec048ffdce3869fb15f3d1ff7" kindref="member">AMREX_GPU_DEVICE_FOR_1D</ref>(__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuLaunchMacrosG.H" line="417" column="9" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuLaunchMacrosG.H" bodystart="417" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="AMReX__GpuLaunchMacrosG_8H_1aa12bff29d50b58116aebcfdf836b1554" prot="public" static="no">
        <name>AMREX_GPU_HOST_DEVICE_FOR_3D</name>
        <param><defname>box</defname></param>
        <param><defname>i</defname></param>
        <param><defname>j</defname></param>
        <param><defname>k</defname></param>
        <param><defname>block</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuLaunchMacrosG.H" line="421" column="9" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuLaunchMacrosG.H" bodystart="421" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="AMReX__GpuLaunchMacrosG_8H_1a756074cbdeac9c602bfcdf0f5b1ba731" prot="public" static="no">
        <name>AMREX_GPU_DEVICE_FOR_3D</name>
        <param><defname>box</defname></param>
        <param><defname>i</defname></param>
        <param><defname>j</defname></param>
        <param><defname>k</defname></param>
        <param><defname>block</defname></param>
        <initializer>{ \
        int amrex_i_ncells = box.numPts(); \
        const auto amrex_i_lo  = <ref refid="namespaceamrex_1a71600c8a528e0f1863154e4cf0183cbc" kindref="member">amrex::lbound</ref>(box); \
        const auto amrex_i_len = <ref refid="namespaceamrex_1ab8f44b56e5ac2f53bcfe742891c1c79c" kindref="member">amrex::length</ref>(box); \
        const auto amrex_i_ec = amrex::Gpu::ExecutionConfig(amrex_i_ncells); \
        <ref refid="namespaceamrex_1a8fd1cb48ab79898f1f480c55c433113a" kindref="member">amrex::launch_global</ref>&lt;&lt;&lt;amrex_i_ec.numBlocks, amrex_i_ec.numThreads, amrex_i_ec.sharedMem, amrex::Gpu::gpuStream()&gt;&gt;&gt;( \
        [=] <ref refid="AMReX__GpuQualifiers_8H_1a4e626ebf06898d71a9e0790877f1694f" kindref="member">AMREX_GPU_DEVICE</ref> () noexcept { \
            for (int amrex_i_icell = blockDim.x*blockIdx.x+threadIdx.x, amrex_i_stride = blockDim.x*gridDim.x; \
                     amrex_i_icell &lt; amrex_i_ncells; amrex_i_icell += amrex_i_stride) { \
                int k =  amrex_i_icell /   (amrex_i_len.x*amrex_i_len.y); \
                int j = (amrex_i_icell - k*(amrex_i_len.x*amrex_i_len.y)) /   amrex_i_len.x; \
                int i = (amrex_i_icell - k*(amrex_i_len.x*amrex_i_len.y)) - j*amrex_i_len.x; \
                i += amrex_i_lo.x; \
                j += amrex_i_lo.y; \
                k += amrex_i_lo.z; \
                block \
            } \
        }); \
        <ref refid="AMReX__GpuError_8H_1aff2d29ad26ba217734430c3d36f42dd1" kindref="member">AMREX_GPU_ERROR_CHECK</ref>(); \
    }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuLaunchMacrosG.H" line="454" column="9" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuLaunchMacrosG.H" bodystart="454" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="AMReX__GpuLaunchMacrosG_8H_1ad4db49719b03555018b9092c203eacfb" prot="public" static="no">
        <name>AMREX_GPU_DEVICE_PARALLEL_FOR_3D</name>
        <param><defname>...</defname></param>
        <initializer><ref refid="AMReX__GpuLaunchMacrosG_8H_1a756074cbdeac9c602bfcdf0f5b1ba731" kindref="member">AMREX_GPU_DEVICE_FOR_3D</ref>(__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuLaunchMacrosG.H" line="476" column="9" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuLaunchMacrosG.H" bodystart="476" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="AMReX__GpuLaunchMacrosG_8H_1a111936fe89c50b4c720ad71fb48f371a" prot="public" static="no">
        <name>AMREX_GPU_HOST_DEVICE_FOR_4D</name>
        <param><defname>box</defname></param>
        <param><defname>ncomp</defname></param>
        <param><defname>i</defname></param>
        <param><defname>j</defname></param>
        <param><defname>k</defname></param>
        <param><defname>n</defname></param>
        <param><defname>block</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuLaunchMacrosG.H" line="480" column="9" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuLaunchMacrosG.H" bodystart="480" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="AMReX__GpuLaunchMacrosG_8H_1a2d61db5a48c71c8460df5ddc71d9b25a" prot="public" static="no">
        <name>AMREX_GPU_DEVICE_FOR_4D</name>
        <param><defname>box</defname></param>
        <param><defname>ncomp</defname></param>
        <param><defname>i</defname></param>
        <param><defname>j</defname></param>
        <param><defname>k</defname></param>
        <param><defname>n</defname></param>
        <param><defname>block</defname></param>
        <initializer>{ \
        int amrex_i_ncells = box.numPts(); \
        const auto amrex_i_lo  = <ref refid="namespaceamrex_1a71600c8a528e0f1863154e4cf0183cbc" kindref="member">amrex::lbound</ref>(box); \
        const auto amrex_i_len = <ref refid="namespaceamrex_1ab8f44b56e5ac2f53bcfe742891c1c79c" kindref="member">amrex::length</ref>(box); \
        const auto amrex_i_ec = amrex::Gpu::ExecutionConfig(amrex_i_ncells); \
        <ref refid="namespaceamrex_1a8fd1cb48ab79898f1f480c55c433113a" kindref="member">amrex::launch_global</ref>&lt;&lt;&lt;amrex_i_ec.numBlocks, amrex_i_ec.numThreads, amrex_i_ec.sharedMem, amrex::Gpu::gpuStream()&gt;&gt;&gt;( \
        [=] <ref refid="AMReX__GpuQualifiers_8H_1a4e626ebf06898d71a9e0790877f1694f" kindref="member">AMREX_GPU_DEVICE</ref> () noexcept { \
            for (int amrex_i_icell = blockDim.x*blockIdx.x+threadIdx.x, amrex_i_stride = blockDim.x*gridDim.x; \
                     amrex_i_icell &lt; amrex_i_ncells; amrex_i_icell += amrex_i_stride) { \
                int k =  amrex_i_icell /   (amrex_i_len.x*amrex_i_len.y); \
                int j = (amrex_i_icell - k*(amrex_i_len.x*amrex_i_len.y)) /   amrex_i_len.x; \
                int i = (amrex_i_icell - k*(amrex_i_len.x*amrex_i_len.y)) - j*amrex_i_len.x; \
                i += amrex_i_lo.x; \
                j += amrex_i_lo.y; \
                k += amrex_i_lo.z; \
                for (int n = 0; n &lt; ncomp; ++n) block \
            } \
        }); \
        <ref refid="AMReX__GpuError_8H_1aff2d29ad26ba217734430c3d36f42dd1" kindref="member">AMREX_GPU_ERROR_CHECK</ref>(); \
    }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuLaunchMacrosG.H" line="514" column="9" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuLaunchMacrosG.H" bodystart="514" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="AMReX__GpuLaunchMacrosG_8H_1a529852b4a0f4316f5c38bdc0033a5be0" prot="public" static="no">
        <name>AMREX_GPU_DEVICE_PARALLEL_FOR_4D</name>
        <param><defname>...</defname></param>
        <initializer><ref refid="AMReX__GpuLaunchMacrosG_8H_1a2d61db5a48c71c8460df5ddc71d9b25a" kindref="member">AMREX_GPU_DEVICE_FOR_4D</ref>(__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuLaunchMacrosG.H" line="536" column="9" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuLaunchMacrosG.H" bodystart="536" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>AMREX_GPU_LAUNCH_MACROS_G_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AMREX_GPU_LAUNCH_MACROS_G_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4" refid="AMReX__GpuLaunchMacrosG_8H_1a8f1f7a2499c2bd357a65b5927cdd66c9" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AMREX_GPU_LAUNCH_HOST_DEVICE_LAMBDA_BOXIV(BX,IV,block)<sp/>\</highlight></codeline>
<codeline lineno="5"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(amrex::Gpu::inLaunchRegion())<sp/>\</highlight></codeline>
<codeline lineno="6"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="7"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>amrex_i_npts<sp/>=<sp/>BX.numPts();<sp/>\</highlight></codeline>
<codeline lineno="8"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>auto<sp/>amrex_i_ec<sp/>=<sp/>amrex::Gpu::ExecutionConfig(amrex_i_npts);<sp/>\</highlight></codeline>
<codeline lineno="9"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>amrex::launch_global&lt;&lt;&lt;amrex_i_ec.numBlocks,<sp/>amrex_i_ec.numThreads,<sp/>amrex_i_ec.sharedMem,<sp/>amrex::Gpu::gpuStream()&gt;&gt;&gt;(<sp/>\</highlight></codeline>
<codeline lineno="10"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[=]<sp/>AMREX_GPU_DEVICE<sp/>()<sp/>noexcept<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="11"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(auto<sp/>const<sp/>amrex_i_i<sp/>:<sp/>amrex::Gpu::Range(amrex_i_npts))<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="12"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>auto<sp/>IV<sp/>=<sp/>BX.atOffset(amrex_i_i);<sp/>\</highlight></codeline>
<codeline lineno="13"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block<sp/>\</highlight></codeline>
<codeline lineno="14"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="15"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});<sp/>\</highlight></codeline>
<codeline lineno="16"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AMREX_GPU_ERROR_CHECK();<sp/>\</highlight></codeline>
<codeline lineno="17"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="18"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="19"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>amrex_i_npts<sp/>=<sp/>BX.numPts();<sp/>\</highlight></codeline>
<codeline lineno="20"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(auto<sp/>const<sp/>amrex_i_i<sp/>:<sp/>amrex::Gpu::Range(amrex_i_npts))<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="21"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>auto<sp/>IV<sp/>=<sp/>BX.atOffset(amrex_i_i);<sp/>\</highlight></codeline>
<codeline lineno="22"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block<sp/>\</highlight></codeline>
<codeline lineno="23"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="24"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26" refid="AMReX__GpuLaunchMacrosG_8H_1a18770120c9909bec04c6ab56b3429835" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AMREX_GPU_LAUNCH_DEVICE_LAMBDA_BOXIV(BX,IV,block)<sp/>\</highlight></codeline>
<codeline lineno="27"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(amrex::Gpu::inLaunchRegion())<sp/>\</highlight></codeline>
<codeline lineno="28"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="29"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>amrex_i_npts<sp/>=<sp/>BX.numPts();<sp/>\</highlight></codeline>
<codeline lineno="30"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>auto<sp/>amrex_i_ec<sp/>=<sp/>amrex::Gpu::ExecutionConfig(amrex_i_npts);<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="31"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>amrex::launch_global&lt;&lt;&lt;amrex_i_ec.numBlocks,<sp/>amrex_i_ec.numThreads,<sp/>amrex_i_ec.sharedMem,<sp/>amrex::Gpu::gpuStream()&gt;&gt;&gt;(<sp/>\</highlight></codeline>
<codeline lineno="32"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[=]<sp/>AMREX_GPU_DEVICE<sp/>()<sp/>noexcept<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="33"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(auto<sp/>const<sp/>amrex_i_i<sp/>:<sp/>amrex::Gpu::Range(amrex_i_npts))<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="34"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>auto<sp/>IV<sp/>=<sp/>BX.atOffset(amrex_i_i);<sp/>\</highlight></codeline>
<codeline lineno="35"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block<sp/>\</highlight></codeline>
<codeline lineno="36"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="37"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});<sp/>\</highlight></codeline>
<codeline lineno="38"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AMREX_GPU_ERROR_CHECK();<sp/>\</highlight></codeline>
<codeline lineno="39"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="40"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="41"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>amrex::Abort(&quot;AMREX_GPU_LAUNCH_DEVICE_LAMBDA_BOXIV:<sp/>cannot<sp/>call<sp/>device<sp/>function<sp/>from<sp/>host&quot;);<sp/>\</highlight></codeline>
<codeline lineno="42"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44" refid="AMReX__GpuLaunchMacrosG_8H_1ae57c0c24e324c7f036e03631ac52ccef" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AMREX_GPU_LAUNCH_HOST_DEVICE_LAMBDA_RANGE(TN,TI,block)<sp/>\</highlight></codeline>
<codeline lineno="45"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(amrex::Gpu::inLaunchRegion())<sp/>\</highlight></codeline>
<codeline lineno="46"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="47"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>auto<sp/>amrex_i_ec<sp/>=<sp/>amrex::Gpu::ExecutionConfig(TN);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="48"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>amrex::launch_global&lt;&lt;&lt;amrex_i_ec.numBlocks,<sp/>amrex_i_ec.numThreads,<sp/>amrex_i_ec.sharedMem,<sp/>amrex::Gpu::gpuStream()&gt;&gt;&gt;(<sp/>\</highlight></codeline>
<codeline lineno="49"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[=]<sp/>AMREX_GPU_DEVICE<sp/>()<sp/>noexcept<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="50"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(auto<sp/>const<sp/>TI<sp/>:<sp/>amrex::Gpu::Range(TN))<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="51"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block<sp/>\</highlight></codeline>
<codeline lineno="52"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="53"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});<sp/>\</highlight></codeline>
<codeline lineno="54"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AMREX_GPU_ERROR_CHECK();<sp/>\</highlight></codeline>
<codeline lineno="55"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="56"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="57"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(auto<sp/>const<sp/>TI<sp/>:<sp/>amrex::Gpu::Range(TN))<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="58"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block<sp/>\</highlight></codeline>
<codeline lineno="59"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="60"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment">//<sp/>two<sp/>fused<sp/>launches</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63" refid="AMReX__GpuLaunchMacrosG_8H_1ad1f3024e42b239e08da4610129518d1b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AMREX_GPU_LAUNCH_HOST_DEVICE_LAMBDA_RANGE_2(TN1,TI1,block1,TN2,TI2,block2)<sp/>\</highlight></codeline>
<codeline lineno="64"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(amrex::Gpu::inLaunchRegion())<sp/>\</highlight></codeline>
<codeline lineno="65"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="66"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>auto<sp/>amrex_i_ec1<sp/>=<sp/>amrex::Gpu::ExecutionConfig(TN1);<sp/>\</highlight></codeline>
<codeline lineno="67"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>auto<sp/>amrex_i_ec2<sp/>=<sp/>amrex::Gpu::ExecutionConfig(TN2);<sp/>\</highlight></codeline>
<codeline lineno="68"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dim3<sp/>amrex_i_nblocks<sp/>=<sp/>amrex::max(amrex_i_ec1.numBlocks.x,<sp/>\</highlight></codeline>
<codeline lineno="69"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>amrex_i_ec2.numBlocks.x);<sp/>\</highlight></codeline>
<codeline lineno="70"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>amrex_i_nblocks.y<sp/>=<sp/>2;<sp/>\</highlight></codeline>
<codeline lineno="71"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>amrex::launch_global&lt;&lt;&lt;amrex_i_nblocks,<sp/>amrex_i_ec1.numThreads,<sp/>0,<sp/>amrex::Gpu::gpuStream()&gt;&gt;&gt;(<sp/>\</highlight></codeline>
<codeline lineno="72"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[=]<sp/>AMREX_GPU_DEVICE<sp/>()<sp/>noexcept<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="73"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>switch<sp/>(blockIdx.y)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="74"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>0:<sp/>for<sp/>(auto<sp/>const<sp/>TI1<sp/>:<sp/>amrex::Gpu::Range(TN1))<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="75"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block1<sp/>\</highlight></codeline>
<codeline lineno="76"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="77"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;<sp/>\</highlight></codeline>
<codeline lineno="78"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>1:<sp/>for<sp/>(auto<sp/>const<sp/>TI2<sp/>:<sp/>amrex::Gpu::Range(TN2))<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="79"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block2<sp/>\</highlight></codeline>
<codeline lineno="80"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="81"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="82"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});<sp/>\</highlight></codeline>
<codeline lineno="83"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AMREX_GPU_ERROR_CHECK();<sp/>\</highlight></codeline>
<codeline lineno="84"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="85"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="86"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(auto<sp/>const<sp/>TI1<sp/>:<sp/>amrex::Gpu::Range(TN1))<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="87"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block1<sp/>\</highlight></codeline>
<codeline lineno="88"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="89"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(auto<sp/>const<sp/>TI2<sp/>:<sp/>amrex::Gpu::Range(TN2))<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="90"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block2<sp/>\</highlight></codeline>
<codeline lineno="91"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="92"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="comment">//<sp/>three<sp/>fused<sp/>launches</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95" refid="AMReX__GpuLaunchMacrosG_8H_1a85943be0d705485c46b55c8442846c61" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AMREX_GPU_LAUNCH_HOST_DEVICE_LAMBDA_RANGE_3(TN1,TI1,block1,TN2,TI2,block2,TN3,TI3,block3)<sp/>\</highlight></codeline>
<codeline lineno="96"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(amrex::Gpu::inLaunchRegion())<sp/>\</highlight></codeline>
<codeline lineno="97"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="98"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>auto<sp/>amrex_i_ec1<sp/>=<sp/>amrex::Gpu::ExecutionConfig(TN1);<sp/>\</highlight></codeline>
<codeline lineno="99"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>auto<sp/>amrex_i_ec2<sp/>=<sp/>amrex::Gpu::ExecutionConfig(TN2);<sp/>\</highlight></codeline>
<codeline lineno="100"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>auto<sp/>amrex_i_ec3<sp/>=<sp/>amrex::Gpu::ExecutionConfig(TN3);<sp/>\</highlight></codeline>
<codeline lineno="101"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dim3<sp/>amrex_i_nblocks<sp/>=<sp/>amrex::max(amrex::max(amrex_i_ec1.numBlocks.x,<sp/>\</highlight></codeline>
<codeline lineno="102"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>amrex_i_ec2.numBlocks.x),<sp/>\</highlight></codeline>
<codeline lineno="103"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>amrex_i_ec3.numBlocks.x);<sp/>\</highlight></codeline>
<codeline lineno="104"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>amrex_i_nblocks.y<sp/>=<sp/>3;<sp/>\</highlight></codeline>
<codeline lineno="105"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>amrex::launch_global&lt;&lt;&lt;amrex_i_nblocks,<sp/>amrex_i_ec1.numThreads,<sp/>0,<sp/>amrex::Gpu::gpuStream()&gt;&gt;&gt;(<sp/>\</highlight></codeline>
<codeline lineno="106"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[=]<sp/>AMREX_GPU_DEVICE<sp/>()<sp/>noexcept<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="107"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>switch<sp/>(blockIdx.y)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="108"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>0:<sp/>for<sp/>(auto<sp/>const<sp/>TI1<sp/>:<sp/>amrex::Gpu::Range(TN1))<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="109"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block1<sp/>\</highlight></codeline>
<codeline lineno="110"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="111"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;<sp/>\</highlight></codeline>
<codeline lineno="112"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>1:<sp/>for<sp/>(auto<sp/>const<sp/>TI2<sp/>:<sp/>amrex::Gpu::Range(TN2))<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="113"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block2<sp/>\</highlight></codeline>
<codeline lineno="114"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="115"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;<sp/>\</highlight></codeline>
<codeline lineno="116"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>2:<sp/>for<sp/>(auto<sp/>const<sp/>TI3<sp/>:<sp/>amrex::Gpu::Range(TN3))<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="117"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block3<sp/>\</highlight></codeline>
<codeline lineno="118"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="119"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="120"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});<sp/>\</highlight></codeline>
<codeline lineno="121"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AMREX_GPU_ERROR_CHECK();<sp/>\</highlight></codeline>
<codeline lineno="122"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="123"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="124"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(auto<sp/>const<sp/>TI1<sp/>:<sp/>amrex::Gpu::Range(TN1))<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="125"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block1<sp/>\</highlight></codeline>
<codeline lineno="126"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="127"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(auto<sp/>const<sp/>TI2<sp/>:<sp/>amrex::Gpu::Range(TN2))<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="128"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block2<sp/>\</highlight></codeline>
<codeline lineno="129"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="130"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(auto<sp/>const<sp/>TI3<sp/>:<sp/>amrex::Gpu::Range(TN3))<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="131"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block3<sp/>\</highlight></codeline>
<codeline lineno="132"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="133"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135" refid="AMReX__GpuLaunchMacrosG_8H_1a475e84abbd9698afb9147ac67a49bdaa" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AMREX_GPU_LAUNCH_DEVICE_LAMBDA_RANGE(TN,TI,block)<sp/>\</highlight></codeline>
<codeline lineno="136"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(amrex::Gpu::inLaunchRegion())<sp/>\</highlight></codeline>
<codeline lineno="137"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="138"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/>amrex_i_ec<sp/>=<sp/>amrex::Gpu::ExecutionConfig(TN);<sp/>\</highlight></codeline>
<codeline lineno="139"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>amrex::launch_global&lt;&lt;&lt;amrex_i_ec.numBlocks,<sp/>amrex_i_ec.numThreads,<sp/>amrex_i_ec.sharedMem,<sp/>amrex::Gpu::gpuStream()&gt;&gt;&gt;(<sp/>\</highlight></codeline>
<codeline lineno="140"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[=]<sp/>AMREX_GPU_DEVICE<sp/>()<sp/>noexcept<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="141"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(auto<sp/>const<sp/>TI<sp/>:<sp/>amrex::Gpu::Range(TN))<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="142"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block<sp/>\</highlight></codeline>
<codeline lineno="143"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="144"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});<sp/>\</highlight></codeline>
<codeline lineno="145"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AMREX_GPU_ERROR_CHECK();<sp/>\</highlight></codeline>
<codeline lineno="146"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="147"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="148"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>amrex::Abort(&quot;AMREX_GPU_LAUNCH_DEVICE_LAMBDA_RANGE:<sp/>cannot<sp/>call<sp/>device<sp/>function<sp/>from<sp/>host&quot;);<sp/>\</highlight></codeline>
<codeline lineno="149"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="comment">//<sp/>two<sp/>fused<sp/>launches</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152" refid="AMReX__GpuLaunchMacrosG_8H_1a289cd6699548aba71d287d94299ae098" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AMREX_GPU_LAUNCH_DEVICE_LAMBDA_RANGE_2(TN1,TI1,block1,TN2,TI2,block2)<sp/>\</highlight></codeline>
<codeline lineno="153"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(amrex::Gpu::inLaunchRegion())<sp/>\</highlight></codeline>
<codeline lineno="154"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="155"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>auto<sp/>amrex_i_ec1<sp/>=<sp/>amrex::Gpu::ExecutionConfig(TN1);<sp/>\</highlight></codeline>
<codeline lineno="156"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>auto<sp/>amrex_i_ec2<sp/>=<sp/>amrex::Gpu::ExecutionConfig(TN2);<sp/>\</highlight></codeline>
<codeline lineno="157"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dim3<sp/>amrex_i_nblocks<sp/>=<sp/>amrex::max(amrex_i_ec1.numBlocks.x,<sp/>\</highlight></codeline>
<codeline lineno="158"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>amrex_i_ec2.numBlocks.x);<sp/>\</highlight></codeline>
<codeline lineno="159"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>amrex_i_nblocks.y<sp/>=<sp/>2;<sp/>\</highlight></codeline>
<codeline lineno="160"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>amrex::launch_global&lt;&lt;&lt;amrex_i_nblocks,<sp/>amrex_i_ec1.numThreads,<sp/>0,<sp/>amrex::Gpu::gpuStream()&gt;&gt;&gt;(<sp/>\</highlight></codeline>
<codeline lineno="161"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[=]<sp/>AMREX_GPU_DEVICE<sp/>()<sp/>noexcept<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="162"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>switch<sp/>(blockIdx.y)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="163"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>0:<sp/>for<sp/>(auto<sp/>const<sp/>TI1<sp/>:<sp/>amrex::Gpu::Range(TN1))<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="164"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block1<sp/>\</highlight></codeline>
<codeline lineno="165"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="166"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;<sp/>\</highlight></codeline>
<codeline lineno="167"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>1:<sp/>for<sp/>(auto<sp/>const<sp/>TI2<sp/>:<sp/>amrex::Gpu::Range(TN2))<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="168"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block2<sp/>\</highlight></codeline>
<codeline lineno="169"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="170"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="171"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});<sp/>\</highlight></codeline>
<codeline lineno="172"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AMREX_GPU_ERROR_CHECK();<sp/>\</highlight></codeline>
<codeline lineno="173"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="174"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="175"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>amrex::Abort(&quot;AMREX_GPU_LAUNCH_DEVICE_LAMBDA_RANGE_2:<sp/>cannot<sp/>call<sp/>device<sp/>function<sp/>from<sp/>host&quot;);<sp/>\</highlight></codeline>
<codeline lineno="176"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="comment">//<sp/>three<sp/>fused<sp/>launches</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179" refid="AMReX__GpuLaunchMacrosG_8H_1ab8f5b7c92c1194b0f0482c84ce1fe5b3" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AMREX_GPU_LAUNCH_DEVICE_LAMBDA_RANGE_3(TN1,TI1,block1,TN2,TI2,block2,TN3,TI3,block3)<sp/>\</highlight></codeline>
<codeline lineno="180"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(amrex::Gpu::inLaunchRegion())<sp/>\</highlight></codeline>
<codeline lineno="181"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="182"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>auto<sp/>amrex_i_ec1<sp/>=<sp/>amrex::Gpu::ExecutionConfig(TN1);<sp/>\</highlight></codeline>
<codeline lineno="183"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>auto<sp/>amrex_i_ec2<sp/>=<sp/>amrex::Gpu::ExecutionConfig(TN2);<sp/>\</highlight></codeline>
<codeline lineno="184"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>auto<sp/>amrex_i_ec3<sp/>=<sp/>amrex::Gpu::ExecutionConfig(TN3);<sp/>\</highlight></codeline>
<codeline lineno="185"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dim3<sp/>amrex_i_nblocks<sp/>=<sp/>amrex::max(amrex::max(amrex_i_ec1.numBlocks.x,<sp/>\</highlight></codeline>
<codeline lineno="186"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>amrex_i_ec2.numBlocks.x),<sp/>\</highlight></codeline>
<codeline lineno="187"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>amrex_i_ec3.numBlocks.x);<sp/>\</highlight></codeline>
<codeline lineno="188"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>amrex_i_nblocks.y<sp/>=<sp/>3;<sp/>\</highlight></codeline>
<codeline lineno="189"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>amrex::launch_global&lt;&lt;&lt;amrex_i_nblocks,<sp/>amrex_i_ec1.numThreads,<sp/>0,<sp/>amrex::Gpu::gpuStream()&gt;&gt;&gt;(<sp/>\</highlight></codeline>
<codeline lineno="190"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[=]<sp/>AMREX_GPU_DEVICE<sp/>()<sp/>noexcept<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="191"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>switch<sp/>(blockIdx.y)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="192"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>0:<sp/>for<sp/>(auto<sp/>const<sp/>TI1<sp/>:<sp/>amrex::Gpu::Range(TN1))<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="193"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block1<sp/>\</highlight></codeline>
<codeline lineno="194"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="195"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;<sp/>\</highlight></codeline>
<codeline lineno="196"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>1:<sp/>for<sp/>(auto<sp/>const<sp/>TI2<sp/>:<sp/>amrex::Gpu::Range(TN2))<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="197"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block2<sp/>\</highlight></codeline>
<codeline lineno="198"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="199"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>2:<sp/>for<sp/>(auto<sp/>const<sp/>TI3<sp/>:<sp/>amrex::Gpu::Range(TN3))<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="200"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block3<sp/>\</highlight></codeline>
<codeline lineno="201"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="202"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="203"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});<sp/>\</highlight></codeline>
<codeline lineno="204"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AMREX_GPU_ERROR_CHECK();<sp/>\</highlight></codeline>
<codeline lineno="205"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="206"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="207"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>amrex::Abort(&quot;AMREX_GPU_LAUNCH_DEVICE_LAMBDA_RANGE_2:<sp/>cannot<sp/>call<sp/>device<sp/>function<sp/>from<sp/>host&quot;);<sp/>\</highlight></codeline>
<codeline lineno="208"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210" refid="AMReX__GpuLaunchMacrosG_8H_1a1ab3fba7a2f040bdd4a40de04b22c828" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AMREX_GPU_LAUNCH_HOST_DEVICE_LAMBDA_BOX(bbb,tbb,block)<sp/>\</highlight></codeline>
<codeline lineno="211"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(amrex::Gpu::inLaunchRegion())<sp/>\</highlight></codeline>
<codeline lineno="212"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="213"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>auto<sp/>amrex_i_ec<sp/>=<sp/>amrex::Gpu::ExecutionConfig(bbb);<sp/>\</highlight></codeline>
<codeline lineno="214"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>amrex::launch_global&lt;&lt;&lt;amrex_i_ec.numBlocks,<sp/>amrex_i_ec.numThreads,<sp/>amrex_i_ec.sharedMem,<sp/>amrex::Gpu::gpuStream()&gt;&gt;&gt;(<sp/>\</highlight></codeline>
<codeline lineno="215"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[=]<sp/>AMREX_GPU_DEVICE<sp/>()<sp/>noexcept<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="216"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>amrex_i_numpts<sp/>=<sp/>bbb.numPts();<sp/>\</highlight></codeline>
<codeline lineno="217"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>amrex_i_tid<sp/>=<sp/>blockDim.x*blockIdx.x<sp/>+<sp/>threadIdx.x;<sp/>\</highlight></codeline>
<codeline lineno="218"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>amrex_i_wid<sp/>=<sp/>amrex_i_tid<sp/>/<sp/>amrex::Gpu::Device::warp_size;<sp/>\</highlight></codeline>
<codeline lineno="219"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>amrex_i_lid<sp/>=<sp/>amrex_i_tid<sp/>-<sp/>amrex_i_wid*amrex::Gpu::Device::warp_size;<sp/>\</highlight></codeline>
<codeline lineno="220"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>amrex_i_offset<sp/>=<sp/>amrex_i_lid<sp/>+<sp/>amrex_i_wid*AMREX_GPU_NCELLS_PER_THREAD*amrex::Gpu::Device::warp_size;<sp/>\</highlight></codeline>
<codeline lineno="221"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(long<sp/>amrex_i_i<sp/>=<sp/>0;<sp/>amrex_i_i<sp/>&lt;<sp/>AMREX_GPU_NCELLS_PER_THREAD;<sp/>++amrex_i_i,<sp/>amrex_i_offset<sp/>+=<sp/>amrex::Gpu::Device::warp_size)<sp/>\</highlight></codeline>
<codeline lineno="222"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="223"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>amrex::Box<sp/>tbb<sp/>=<sp/>amrex::Gpu::getThreadBox(bbb,<sp/>amrex_i_offset);<sp/>\</highlight></codeline>
<codeline lineno="224"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(tbb.ok())<sp/>block<sp/>\</highlight></codeline>
<codeline lineno="225"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="226"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});<sp/>\</highlight></codeline>
<codeline lineno="227"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AMREX_GPU_ERROR_CHECK();<sp/>\</highlight></codeline>
<codeline lineno="228"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="229"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="230"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>amrex::Box&amp;<sp/>tbb<sp/>=<sp/>bbb;<sp/>\</highlight></codeline>
<codeline lineno="231"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block<sp/>\</highlight></codeline>
<codeline lineno="232"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234" refid="AMReX__GpuLaunchMacrosG_8H_1a08cb2d3ad30327911553ea051dcd0a38" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AMREX_GPU_LAUNCH_HOST_DEVICE_LAMBDA_ASYNC(bbb,tbb,sync_var,block)<sp/>\</highlight></codeline>
<codeline lineno="235"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(amrex::Gpu::inLaunchRegion())<sp/>\</highlight></codeline>
<codeline lineno="236"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="237"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/>amrex_i_ec<sp/>=<sp/>amrex::Gpu::ExecutionConfig(bbb);<sp/>\</highlight></codeline>
<codeline lineno="238"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>amrex::launch_global&lt;&lt;&lt;amrex_i_ec.numBlocks,<sp/>amrex_i_ec.numThreads,<sp/>amrex_i_ec.sharedMem,<sp/>amrex::Gpu::gpuStream()&gt;&gt;&gt;(<sp/>\</highlight></codeline>
<codeline lineno="239"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[=]<sp/>AMREX_GPU_DEVICE<sp/>()<sp/>noexcept<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="240"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>amrex_i_numpts<sp/>=<sp/>bbb.numPts();<sp/>\</highlight></codeline>
<codeline lineno="241"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>amrex_i_tid<sp/>=<sp/>blockDim.x*blockIdx.x<sp/>+<sp/>threadIdx.x;<sp/>\</highlight></codeline>
<codeline lineno="242"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>amrex_i_wid<sp/>=<sp/>amrex_i_tid<sp/>/<sp/>amrex::Gpu::Device::warp_size;<sp/>\</highlight></codeline>
<codeline lineno="243"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>amrex_i_lid<sp/>=<sp/>amrex_i_tid<sp/>-<sp/>amrex_i_wid*amrex::Gpu::Device::warp_size;<sp/>\</highlight></codeline>
<codeline lineno="244"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>amrex_i_offset<sp/>=<sp/>amrex_i_lid<sp/>+<sp/>amrex_i_wid*AMREX_GPU_NCELLS_PER_THREAD*amrex::Gpu::Device::warp_size;<sp/>\</highlight></codeline>
<codeline lineno="245"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(long<sp/>amrex_i_i<sp/>=<sp/>0;<sp/>amrex_i_i<sp/>&lt;<sp/>AMREX_GPU_NCELLS_PER_THREAD;<sp/>++amrex_i_i,<sp/>amrex_i_offset<sp/>+=<sp/>amrex::Gpu::Device::warp_size)<sp/>\</highlight></codeline>
<codeline lineno="246"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="247"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>amrex::Box<sp/>tbb<sp/>=<sp/>amrex::Gpu::getThreadBox(bbb,<sp/>amrex_i_offset);<sp/>\</highlight></codeline>
<codeline lineno="248"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(tbb.ok())<sp/>block<sp/>\</highlight></codeline>
<codeline lineno="249"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="250"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});<sp/>\</highlight></codeline>
<codeline lineno="251"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++sync_var;<sp/>\</highlight></codeline>
<codeline lineno="252"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>amrex::Gpu::Device::set_stream_index(sync_var);<sp/>\</highlight></codeline>
<codeline lineno="253"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AMREX_GPU_ERROR_CHECK();<sp/>\</highlight></codeline>
<codeline lineno="254"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="255"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="256"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>amrex::Box&amp;<sp/>tbb<sp/>=<sp/>bbb;<sp/>\</highlight></codeline>
<codeline lineno="257"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block<sp/>\</highlight></codeline>
<codeline lineno="258"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260" refid="AMReX__GpuLaunchMacrosG_8H_1ae300fea905f74fff12ec2fcc4966335c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AMREX_GPU_LAUNCH_DEVICE_LAMBDA_BOX(bbb,tbb,block)<sp/>\</highlight></codeline>
<codeline lineno="261"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(amrex::Gpu::inLaunchRegion())<sp/>\</highlight></codeline>
<codeline lineno="262"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="263"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>auto<sp/>amrex_i_ec<sp/>=<sp/>amrex::Gpu::ExecutionConfig(bbb);<sp/>\</highlight></codeline>
<codeline lineno="264"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>amrex::launch_global&lt;&lt;&lt;amrex_i_ec.numBlocks,<sp/>amrex_i_ec.numThreads,<sp/>amrex_i_ec.sharedMem,<sp/>amrex::Gpu::gpuStream()&gt;&gt;&gt;(<sp/>\</highlight></codeline>
<codeline lineno="265"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[=]<sp/>AMREX_GPU_DEVICE<sp/>()<sp/>noexcept<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="266"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>amrex_i_numpts<sp/>=<sp/>bbb.numPts();<sp/>\</highlight></codeline>
<codeline lineno="267"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>amrex_i_tid<sp/>=<sp/>blockDim.x*blockIdx.x<sp/>+<sp/>threadIdx.x;<sp/>\</highlight></codeline>
<codeline lineno="268"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>amrex_i_wid<sp/>=<sp/>amrex_i_tid<sp/>/<sp/>amrex::Gpu::Device::warp_size;<sp/>\</highlight></codeline>
<codeline lineno="269"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>amrex_i_lid<sp/>=<sp/>amrex_i_tid<sp/>-<sp/>amrex_i_wid*amrex::Gpu::Device::warp_size;<sp/>\</highlight></codeline>
<codeline lineno="270"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>amrex_i_offset<sp/>=<sp/>amrex_i_lid<sp/>+<sp/>amrex_i_wid*AMREX_GPU_NCELLS_PER_THREAD*amrex::Gpu::Device::warp_size;<sp/>\</highlight></codeline>
<codeline lineno="271"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(long<sp/>amrex_i_i<sp/>=<sp/>0;<sp/>amrex_i_i<sp/>&lt;<sp/>AMREX_GPU_NCELLS_PER_THREAD;<sp/>++amrex_i_i,<sp/>amrex_i_offset<sp/>+=<sp/>amrex::Gpu::Device::warp_size)<sp/>\</highlight></codeline>
<codeline lineno="272"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="273"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>amrex::Box<sp/>tbb<sp/>=<sp/>amrex::Gpu::getThreadBox(bbb,<sp/>amrex_i_offset);<sp/>\</highlight></codeline>
<codeline lineno="274"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(tbb.ok())<sp/>block<sp/>\</highlight></codeline>
<codeline lineno="275"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="276"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});<sp/>\</highlight></codeline>
<codeline lineno="277"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AMREX_GPU_ERROR_CHECK();<sp/>\</highlight></codeline>
<codeline lineno="278"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="279"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="280"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>amrex::Abort(&quot;AMREX_GPU_LAUNCH_DEVICE_LAMBDA:<sp/>cannot<sp/>call<sp/>device<sp/>function<sp/>from<sp/>host&quot;);<sp/>\</highlight></codeline>
<codeline lineno="281"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283" refid="AMReX__GpuLaunchMacrosG_8H_1a54ab53f6a8e04f6e15cd6ef6eb084e17" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AMREX_GPU_LAUNCH_HOST_DEVICE_XYZ(bbx,bby,bbz,tbx,tby,tbz,blockx,blocky,blockz)<sp/>\</highlight></codeline>
<codeline lineno="284"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(amrex::Gpu::inLaunchRegion())<sp/>\</highlight></codeline>
<codeline lineno="285"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="286"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>max_pts<sp/>=<sp/>std::max(bbx.numPts(),<sp/>std::max(bby.numPts(),<sp/>bbz.numPts()));<sp/>\</highlight></codeline>
<codeline lineno="287"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>auto<sp/>amrex_i_ec<sp/>=<sp/>Gpu::ExecutionConfig(max_pts);<sp/>\</highlight></codeline>
<codeline lineno="288"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>amrex::launch_global&lt;&lt;&lt;amrex_i_ec.numBlocks,<sp/>amrex_i_ec.numThreads,<sp/>amrex_i_ec.sharedMem,<sp/>amrex::Gpu::gpuStream()&gt;&gt;&gt;(<sp/>\</highlight></codeline>
<codeline lineno="289"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[=]<sp/>AMREX_GPU_DEVICE<sp/>()<sp/>noexcept<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="290"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>amrex_i_tid<sp/>=<sp/>blockDim.x*blockIdx.x<sp/>+<sp/>threadIdx.x;<sp/>\</highlight></codeline>
<codeline lineno="291"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>amrex_i_wid<sp/>=<sp/>amrex_i_tid<sp/>/<sp/>amrex::Gpu::Device::warp_size;<sp/>\</highlight></codeline>
<codeline lineno="292"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>amrex_i_lid<sp/>=<sp/>amrex_i_tid<sp/>-<sp/>amrex_i_wid*amrex::Gpu::Device::warp_size;<sp/>\</highlight></codeline>
<codeline lineno="293"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>long<sp/>amrex_i_offset<sp/>=<sp/>amrex_i_lid<sp/>+<sp/>amrex_i_wid*AMREX_GPU_NCELLS_PER_THREAD*amrex::Gpu::Device::warp_size;<sp/>\</highlight></codeline>
<codeline lineno="294"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>amrex_i_loc_offset<sp/>=<sp/>amrex_i_offset;<sp/>\</highlight></codeline>
<codeline lineno="295"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(long<sp/>amrex_i_i<sp/>=<sp/>0;<sp/>amrex_i_i<sp/>&lt;<sp/>AMREX_GPU_NCELLS_PER_THREAD;<sp/>++amrex_i_i,<sp/>amrex_i_loc_offset<sp/>+=<sp/>amrex::Gpu::Device::warp_size)<sp/>\</highlight></codeline>
<codeline lineno="296"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="297"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>amrex::Box<sp/>tbx<sp/>=<sp/>amrex::Gpu::getThreadBox(bbx,<sp/>amrex_i_loc_offset);<sp/>\</highlight></codeline>
<codeline lineno="298"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(tbx.ok())<sp/>blockx<sp/>\</highlight></codeline>
<codeline lineno="299"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="300"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>amrex_i_loc_offset<sp/>=<sp/>amrex_i_offset;<sp/>\</highlight></codeline>
<codeline lineno="301"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(long<sp/>amrex_i_i<sp/>=<sp/>0;<sp/>amrex_i_i<sp/>&lt;<sp/>AMREX_GPU_NCELLS_PER_THREAD;<sp/>++amrex_i_i,<sp/>amrex_i_loc_offset<sp/>+=<sp/>amrex::Gpu::Device::warp_size)<sp/>\</highlight></codeline>
<codeline lineno="302"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="303"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>amrex::Box<sp/>tby<sp/>=<sp/>amrex::Gpu::getThreadBox(bby,<sp/>amrex_i_loc_offset);<sp/>\</highlight></codeline>
<codeline lineno="304"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(tby.ok())<sp/>blocky<sp/>\</highlight></codeline>
<codeline lineno="305"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="306"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>amrex_i_loc_offset<sp/>=<sp/>amrex_i_offset;<sp/>\</highlight></codeline>
<codeline lineno="307"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(long<sp/>amrex_i_i<sp/>=<sp/>0;<sp/>amrex_i_i<sp/>&lt;<sp/>AMREX_GPU_NCELLS_PER_THREAD;<sp/>++amrex_i_i,<sp/>amrex_i_loc_offset<sp/>+=<sp/>amrex::Gpu::Device::warp_size)<sp/>\</highlight></codeline>
<codeline lineno="308"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="309"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>amrex::Box<sp/>tbz<sp/>=<sp/>amrex::Gpu::getThreadBox(bbz,<sp/>amrex_i_loc_offset);<sp/>\</highlight></codeline>
<codeline lineno="310"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(tbz.ok())<sp/>blockz<sp/>\</highlight></codeline>
<codeline lineno="311"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="312"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});<sp/>\</highlight></codeline>
<codeline lineno="313"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="314"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>else<sp/>\</highlight></codeline>
<codeline lineno="315"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="316"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>amrex::Box&amp;<sp/>tbx<sp/>=<sp/>bbx;<sp/>\</highlight></codeline>
<codeline lineno="317"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blockx<sp/>\</highlight></codeline>
<codeline lineno="318"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>amrex::Box&amp;<sp/>tby<sp/>=<sp/>bby;<sp/>\</highlight></codeline>
<codeline lineno="319"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blocky<sp/>\</highlight></codeline>
<codeline lineno="320"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>amrex::Box&amp;<sp/>tbz<sp/>=<sp/>bbz;<sp/>\</highlight></codeline>
<codeline lineno="321"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blockz<sp/>\</highlight></codeline>
<codeline lineno="322"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324" refid="AMReX__GpuLaunchMacrosG_8H_1a5debd083a1702fe10d2cfc07f6c250c4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AMREX_GPU_LAUNCH_HOST_DEVICE_LAMBDA_NOBOX(bbb,tbb,block)<sp/>\</highlight></codeline>
<codeline lineno="325"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(amrex::Gpu::inLaunchRegion())<sp/>\</highlight></codeline>
<codeline lineno="326"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="327"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>auto<sp/>amrex_i_ec<sp/>=<sp/>amrex::Gpu::ExecutionConfig();<sp/>\</highlight></codeline>
<codeline lineno="328"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>amrex::launch_global&lt;&lt;&lt;amrex_i_ec.numBlocks,<sp/>amrex_i_ec.numThreads,<sp/>amrex_i_ec.sharedMem,<sp/>amrex::Gpu::gpuStream()&gt;&gt;&gt;(<sp/>\</highlight></codeline>
<codeline lineno="329"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[=]<sp/>AMREX_GPU_DEVICE<sp/>()<sp/>noexcept<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="330"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>auto<sp/>amrex_i_lo<sp/>=<sp/>bbb.loVect3d();<sp/>\</highlight></codeline>
<codeline lineno="331"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>auto<sp/>amrex_i_hi<sp/>=<sp/>bbb.hiVect3d();<sp/>\</highlight></codeline>
<codeline lineno="332"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>amrex_i_k<sp/>=<sp/>amrex_i_lo[2]<sp/>+<sp/>blockIdx.z<sp/>*<sp/>blockDim.z<sp/>+<sp/>threadIdx.z;<sp/>amrex_i_k<sp/>&lt;=<sp/>amrex_i_hi[2];<sp/>amrex_i_k<sp/>+=<sp/>blockDim.z<sp/>*<sp/>gridDim.z)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="333"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>amrex_i_j<sp/>=<sp/>amrex_i_lo[1]<sp/>+<sp/>blockIdx.y<sp/>*<sp/>blockDim.y<sp/>+<sp/>threadIdx.y;<sp/>amrex_i_j<sp/>&lt;=<sp/>amrex_i_hi[1];<sp/>amrex_i_j<sp/>+=<sp/>blockDim.y<sp/>*<sp/>gridDim.y)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="334"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>amrex_i_i<sp/>=<sp/>amrex_i_lo[0]<sp/>+<sp/>blockIdx.x<sp/>*<sp/>blockDim.x<sp/>+<sp/>threadIdx.x;<sp/>amrex_i_i<sp/>&lt;=<sp/>amrex_i_hi[0];<sp/>amrex_i_i<sp/>+=<sp/>blockDim.x<sp/>*<sp/>gridDim.x)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="335"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>amrex::Box<sp/>tbb(IntVect(AMREX_D_DECL(amrex_i_i,amrex_i_j,amrex_i_k)),<sp/>\</highlight></codeline>
<codeline lineno="336"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IntVect(AMREX_D_DECL(amrex_i_i,amrex_i_j,amrex_i_k)),<sp/>\</highlight></codeline>
<codeline lineno="337"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bbb.type());<sp/>\</highlight></codeline>
<codeline lineno="338"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block<sp/>\</highlight></codeline>
<codeline lineno="339"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}}}<sp/>\</highlight></codeline>
<codeline lineno="340"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});<sp/>\</highlight></codeline>
<codeline lineno="341"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AMREX_GPU_ERROR_CHECK();<sp/>\</highlight></codeline>
<codeline lineno="342"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="343"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="344"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>amrex::Box&amp;<sp/>tbb<sp/>=<sp/>bbb;<sp/>\</highlight></codeline>
<codeline lineno="345"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block<sp/>\</highlight></codeline>
<codeline lineno="346"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348" refid="AMReX__GpuLaunchMacrosG_8H_1afdb04f8f29ef1f1873b3e856c3418d91" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AMREX_GPU_LAUNCH_HOST_DEVICE(strategy,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="349"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="350"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(amrex::Gpu::inLaunchRegion())<sp/>\</highlight></codeline>
<codeline lineno="351"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="352"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>auto<sp/>amrex_i_ec<sp/>=<sp/>strategy;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="353"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>amrex::launch_global&lt;&lt;&lt;amrex_i_ec.numBlocks,<sp/>amrex_i_ec.numThreads,<sp/>amrex_i_ec.sharedMem,<sp/>amrex::Gpu::gpuStream()&gt;&gt;&gt;(__VA_ARGS__);<sp/>\</highlight></codeline>
<codeline lineno="354"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AMREX_GPU_ERROR_CHECK();<sp/>\</highlight></codeline>
<codeline lineno="355"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="356"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>\</highlight></codeline>
<codeline lineno="357"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="358"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>amrex::launch_host(__VA_ARGS__);<sp/>\</highlight></codeline>
<codeline lineno="359"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="360"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362" refid="AMReX__GpuLaunchMacrosG_8H_1aaf70337f5a8dc79f8b261d44675be3a4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AMREX_GPU_LAUNCH_DEVICE(strategy,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="363"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="364"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(amrex::Gpu::inLaunchRegion())<sp/>\</highlight></codeline>
<codeline lineno="365"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="366"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>auto<sp/>amrex_i_ec<sp/>=<sp/>strategy;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="367"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>amrex::launch_global&lt;&lt;&lt;amrex_i_ec.numBlocks,<sp/>amrex_i_ec.numThreads,<sp/>amrex_i_ec.sharedMem,<sp/>amrex::Gpu::gpuStream()&gt;&gt;&gt;(__VA_ARGS__);<sp/>\</highlight></codeline>
<codeline lineno="368"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AMREX_GPU_ERROR_CHECK();<sp/>\</highlight></codeline>
<codeline lineno="369"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="370"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>\</highlight></codeline>
<codeline lineno="371"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="372"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>amrex::Abort(&quot;AMREX_GPU_LAUNCH_DEVICE:<sp/>cannot<sp/>call<sp/>device<sp/>function<sp/>from<sp/>host&quot;);<sp/>\</highlight></codeline>
<codeline lineno="373"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="374"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Cannot<sp/>respect<sp/>Gpu::inLaunchRegion<sp/>because<sp/>function<sp/>must<sp/>be<sp/>__global__.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377" refid="AMReX__GpuLaunchMacrosG_8H_1a44688f0ed0e82584f58388211c89bcea" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AMREX_GPU_LAUNCH_GLOBAL(strategy,<sp/>function,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="378"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="379"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>auto<sp/>amrex_i_ec<sp/>=<sp/>strategy;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="380"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>function&lt;&lt;&lt;amrex_i_ec.numBlocks,<sp/>amrex_i_ec.numThreads,<sp/>amrex_i_ec.sharedMem,<sp/>amrex::Gpu::gpuStream()&gt;&gt;&gt;(__VA_ARGS__);<sp/>\</highlight></codeline>
<codeline lineno="381"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AMREX_GPU_ERROR_CHECK();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="382"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight><highlight class="comment">//<sp/>FOR_1D</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386" refid="AMReX__GpuLaunchMacrosG_8H_1a29d34dc14598d6232a67c02ced582cb3" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AMREX_GPU_HOST_DEVICE_FOR_1D(n,i,block)<sp/>\</highlight></codeline>
<codeline lineno="387"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(amrex::Gpu::inLaunchRegion())<sp/>\</highlight></codeline>
<codeline lineno="388"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="389"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>auto<sp/>amrex_i_ec<sp/>=<sp/>amrex::Gpu::ExecutionConfig(n);<sp/>\</highlight></codeline>
<codeline lineno="390"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>amrex::launch_global&lt;&lt;&lt;amrex_i_ec.numBlocks,<sp/>amrex_i_ec.numThreads,<sp/>amrex_i_ec.sharedMem,<sp/>amrex::Gpu::gpuStream()&gt;&gt;&gt;(<sp/>\</highlight></codeline>
<codeline lineno="391"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[=]<sp/>AMREX_GPU_DEVICE<sp/>()<sp/>noexcept<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="392"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>blockDim.x*blockIdx.x+threadIdx.x,<sp/>amrex_i_stride<sp/>=<sp/>blockDim.x*gridDim.x;<sp/>\</highlight></codeline>
<codeline lineno="393"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>&lt;<sp/>n;<sp/>i<sp/>+=<sp/>amrex_i_stride)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="394"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block<sp/>\</highlight></codeline>
<codeline lineno="395"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="396"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});<sp/>\</highlight></codeline>
<codeline lineno="397"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AMREX_GPU_ERROR_CHECK();<sp/>\</highlight></codeline>
<codeline lineno="398"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="399"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="400"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AMREX_PRAGMA_SIMD<sp/>\</highlight></codeline>
<codeline lineno="401"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(auto<sp/>i<sp/>=<sp/>decltype(n){0};<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>block<sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="402"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404" refid="AMReX__GpuLaunchMacrosG_8H_1aaa11b38ec048ffdce3869fb15f3d1ff7" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AMREX_GPU_DEVICE_FOR_1D(n,i,block)<sp/>\</highlight></codeline>
<codeline lineno="405"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="406"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>auto<sp/>amrex_i_ec<sp/>=<sp/>amrex::Gpu::ExecutionConfig(n);<sp/>\</highlight></codeline>
<codeline lineno="407"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>amrex::launch_global&lt;&lt;&lt;amrex_i_ec.numBlocks,<sp/>amrex_i_ec.numThreads,<sp/>amrex_i_ec.sharedMem,<sp/>amrex::Gpu::gpuStream()&gt;&gt;&gt;(<sp/>\</highlight></codeline>
<codeline lineno="408"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[=]<sp/>AMREX_GPU_DEVICE<sp/>()<sp/>noexcept<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="409"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>blockDim.x*blockIdx.x+threadIdx.x,<sp/>amrex_i_stride<sp/>=<sp/>blockDim.x*gridDim.x;<sp/>\</highlight></codeline>
<codeline lineno="410"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>&lt;<sp/>n;<sp/>i<sp/>+=<sp/>amrex_i_stride)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="411"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block<sp/>\</highlight></codeline>
<codeline lineno="412"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="413"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});<sp/>\</highlight></codeline>
<codeline lineno="414"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AMREX_GPU_ERROR_CHECK();<sp/>\</highlight></codeline>
<codeline lineno="415"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417" refid="AMReX__GpuLaunchMacrosG_8H_1ab14f59d411d19d19888ee7fd5fc3318c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AMREX_GPU_DEVICE_PARALLEL_FOR_1D(...)<sp/>AMREX_GPU_DEVICE_FOR_1D(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight><highlight class="comment">//<sp/>FOR_3D</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421" refid="AMReX__GpuLaunchMacrosG_8H_1aa12bff29d50b58116aebcfdf836b1554" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AMREX_GPU_HOST_DEVICE_FOR_3D(box,i,j,k,block)<sp/>\</highlight></codeline>
<codeline lineno="422"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(amrex::Gpu::inLaunchRegion())<sp/>\</highlight></codeline>
<codeline lineno="423"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="424"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>amrex_i_ncells<sp/>=<sp/>box.numPts();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="425"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>auto<sp/>amrex_i_lo<sp/><sp/>=<sp/>amrex::lbound(box);<sp/>\</highlight></codeline>
<codeline lineno="426"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>auto<sp/>amrex_i_len<sp/>=<sp/>amrex::length(box);<sp/>\</highlight></codeline>
<codeline lineno="427"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>auto<sp/>amrex_i_ec<sp/>=<sp/>amrex::Gpu::ExecutionConfig(amrex_i_ncells);<sp/>\</highlight></codeline>
<codeline lineno="428"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>amrex::launch_global&lt;&lt;&lt;amrex_i_ec.numBlocks,<sp/>amrex_i_ec.numThreads,<sp/>amrex_i_ec.sharedMem,<sp/>amrex::Gpu::gpuStream()&gt;&gt;&gt;(<sp/>\</highlight></codeline>
<codeline lineno="429"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[=]<sp/>AMREX_GPU_DEVICE<sp/>()<sp/>noexcept<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="430"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>amrex_i_icell<sp/>=<sp/>blockDim.x*blockIdx.x+threadIdx.x,<sp/>amrex_i_stride<sp/>=<sp/>blockDim.x*gridDim.x;<sp/>\</highlight></codeline>
<codeline lineno="431"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>amrex_i_icell<sp/>&lt;<sp/>amrex_i_ncells;<sp/>amrex_i_icell<sp/>+=<sp/>amrex_i_stride)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="432"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>k<sp/>=<sp/><sp/>amrex_i_icell<sp/>/<sp/><sp/><sp/>(amrex_i_len.x*amrex_i_len.y);<sp/>\</highlight></codeline>
<codeline lineno="433"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>j<sp/>=<sp/>(amrex_i_icell<sp/>-<sp/>k*(amrex_i_len.x*amrex_i_len.y))<sp/>/<sp/><sp/><sp/>amrex_i_len.x;<sp/>\</highlight></codeline>
<codeline lineno="434"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>i<sp/>=<sp/>(amrex_i_icell<sp/>-<sp/>k*(amrex_i_len.x*amrex_i_len.y))<sp/>-<sp/>j*amrex_i_len.x;<sp/>\</highlight></codeline>
<codeline lineno="435"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>+=<sp/>amrex_i_lo.x;<sp/>\</highlight></codeline>
<codeline lineno="436"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>+=<sp/>amrex_i_lo.y;<sp/>\</highlight></codeline>
<codeline lineno="437"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>+=<sp/>amrex_i_lo.z;<sp/>\</highlight></codeline>
<codeline lineno="438"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block<sp/>\</highlight></codeline>
<codeline lineno="439"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="440"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});<sp/>\</highlight></codeline>
<codeline lineno="441"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AMREX_GPU_ERROR_CHECK();<sp/>\</highlight></codeline>
<codeline lineno="442"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="443"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="444"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>auto<sp/>amrex_i_lo<sp/>=<sp/>amrex::lbound(box);<sp/>\</highlight></codeline>
<codeline lineno="445"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>auto<sp/>amrex_i_hi<sp/>=<sp/>amrex::ubound(box);<sp/>\</highlight></codeline>
<codeline lineno="446"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>k<sp/>=<sp/>amrex_i_lo.z;<sp/>k<sp/>&lt;=<sp/>amrex_i_hi.z;<sp/>++k)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="447"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>j<sp/>=<sp/>amrex_i_lo.y;<sp/>j<sp/>&lt;=<sp/>amrex_i_hi.y;<sp/>++j)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="448"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AMREX_PRAGMA_SIMD<sp/>\</highlight></codeline>
<codeline lineno="449"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>amrex_i_lo.x;<sp/>i<sp/>&lt;=<sp/>amrex_i_hi.x;<sp/>++i)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="450"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block<sp/>\</highlight></codeline>
<codeline lineno="451"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}}}<sp/>\</highlight></codeline>
<codeline lineno="452"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="454" refid="AMReX__GpuLaunchMacrosG_8H_1a756074cbdeac9c602bfcdf0f5b1ba731" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AMREX_GPU_DEVICE_FOR_3D(box,i,j,k,block)<sp/>\</highlight></codeline>
<codeline lineno="455"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="456"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>amrex_i_ncells<sp/>=<sp/>box.numPts();<sp/>\</highlight></codeline>
<codeline lineno="457"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>auto<sp/>amrex_i_lo<sp/><sp/>=<sp/>amrex::lbound(box);<sp/>\</highlight></codeline>
<codeline lineno="458"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>auto<sp/>amrex_i_len<sp/>=<sp/>amrex::length(box);<sp/>\</highlight></codeline>
<codeline lineno="459"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>auto<sp/>amrex_i_ec<sp/>=<sp/>amrex::Gpu::ExecutionConfig(amrex_i_ncells);<sp/>\</highlight></codeline>
<codeline lineno="460"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>amrex::launch_global&lt;&lt;&lt;amrex_i_ec.numBlocks,<sp/>amrex_i_ec.numThreads,<sp/>amrex_i_ec.sharedMem,<sp/>amrex::Gpu::gpuStream()&gt;&gt;&gt;(<sp/>\</highlight></codeline>
<codeline lineno="461"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[=]<sp/>AMREX_GPU_DEVICE<sp/>()<sp/>noexcept<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="462"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>amrex_i_icell<sp/>=<sp/>blockDim.x*blockIdx.x+threadIdx.x,<sp/>amrex_i_stride<sp/>=<sp/>blockDim.x*gridDim.x;<sp/>\</highlight></codeline>
<codeline lineno="463"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>amrex_i_icell<sp/>&lt;<sp/>amrex_i_ncells;<sp/>amrex_i_icell<sp/>+=<sp/>amrex_i_stride)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="464"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>k<sp/>=<sp/><sp/>amrex_i_icell<sp/>/<sp/><sp/><sp/>(amrex_i_len.x*amrex_i_len.y);<sp/>\</highlight></codeline>
<codeline lineno="465"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>j<sp/>=<sp/>(amrex_i_icell<sp/>-<sp/>k*(amrex_i_len.x*amrex_i_len.y))<sp/>/<sp/><sp/><sp/>amrex_i_len.x;<sp/>\</highlight></codeline>
<codeline lineno="466"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>i<sp/>=<sp/>(amrex_i_icell<sp/>-<sp/>k*(amrex_i_len.x*amrex_i_len.y))<sp/>-<sp/>j*amrex_i_len.x;<sp/>\</highlight></codeline>
<codeline lineno="467"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>+=<sp/>amrex_i_lo.x;<sp/>\</highlight></codeline>
<codeline lineno="468"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>+=<sp/>amrex_i_lo.y;<sp/>\</highlight></codeline>
<codeline lineno="469"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>+=<sp/>amrex_i_lo.z;<sp/>\</highlight></codeline>
<codeline lineno="470"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block<sp/>\</highlight></codeline>
<codeline lineno="471"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="472"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});<sp/>\</highlight></codeline>
<codeline lineno="473"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AMREX_GPU_ERROR_CHECK();<sp/>\</highlight></codeline>
<codeline lineno="474"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476" refid="AMReX__GpuLaunchMacrosG_8H_1ad4db49719b03555018b9092c203eacfb" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AMREX_GPU_DEVICE_PARALLEL_FOR_3D(...)<sp/>AMREX_GPU_DEVICE_FOR_3D(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight><highlight class="comment">//<sp/>FOR_4D</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight></codeline>
<codeline lineno="480" refid="AMReX__GpuLaunchMacrosG_8H_1a111936fe89c50b4c720ad71fb48f371a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AMREX_GPU_HOST_DEVICE_FOR_4D(box,ncomp,i,j,k,n,block)<sp/>\</highlight></codeline>
<codeline lineno="481"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(amrex::Gpu::inLaunchRegion())<sp/>\</highlight></codeline>
<codeline lineno="482"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="483"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>amrex_i_ncells<sp/>=<sp/>box.numPts();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="484"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>auto<sp/>amrex_i_lo<sp/><sp/>=<sp/>amrex::lbound(box);<sp/>\</highlight></codeline>
<codeline lineno="485"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>auto<sp/>amrex_i_len<sp/>=<sp/>amrex::length(box);<sp/>\</highlight></codeline>
<codeline lineno="486"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>auto<sp/>amrex_i_ec<sp/>=<sp/>amrex::Gpu::ExecutionConfig(amrex_i_ncells);<sp/>\</highlight></codeline>
<codeline lineno="487"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>amrex::launch_global&lt;&lt;&lt;amrex_i_ec.numBlocks,<sp/>amrex_i_ec.numThreads,<sp/>amrex_i_ec.sharedMem,<sp/>amrex::Gpu::gpuStream()&gt;&gt;&gt;(<sp/>\</highlight></codeline>
<codeline lineno="488"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[=]<sp/>AMREX_GPU_DEVICE<sp/>()<sp/>noexcept<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="489"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>amrex_i_icell<sp/>=<sp/>blockDim.x*blockIdx.x+threadIdx.x,<sp/>amrex_i_stride<sp/>=<sp/>blockDim.x*gridDim.x;<sp/>\</highlight></codeline>
<codeline lineno="490"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>amrex_i_icell<sp/>&lt;<sp/>amrex_i_ncells;<sp/>amrex_i_icell<sp/>+=<sp/>amrex_i_stride)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="491"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>k<sp/>=<sp/><sp/>amrex_i_icell<sp/>/<sp/><sp/><sp/>(amrex_i_len.x*amrex_i_len.y);<sp/>\</highlight></codeline>
<codeline lineno="492"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>j<sp/>=<sp/>(amrex_i_icell<sp/>-<sp/>k*(amrex_i_len.x*amrex_i_len.y))<sp/>/<sp/><sp/><sp/>amrex_i_len.x;<sp/>\</highlight></codeline>
<codeline lineno="493"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>i<sp/>=<sp/>(amrex_i_icell<sp/>-<sp/>k*(amrex_i_len.x*amrex_i_len.y))<sp/>-<sp/>j*amrex_i_len.x;<sp/>\</highlight></codeline>
<codeline lineno="494"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>+=<sp/>amrex_i_lo.x;<sp/>\</highlight></codeline>
<codeline lineno="495"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>+=<sp/>amrex_i_lo.y;<sp/>\</highlight></codeline>
<codeline lineno="496"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>+=<sp/>amrex_i_lo.z;<sp/>\</highlight></codeline>
<codeline lineno="497"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>n<sp/>=<sp/>0;<sp/>n<sp/>&lt;<sp/>ncomp;<sp/>++n)<sp/>block<sp/>\</highlight></codeline>
<codeline lineno="498"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="499"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});<sp/>\</highlight></codeline>
<codeline lineno="500"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AMREX_GPU_ERROR_CHECK();<sp/>\</highlight></codeline>
<codeline lineno="501"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="502"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="503"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>auto<sp/>amrex_i_lo<sp/>=<sp/>amrex::lbound(box);<sp/>\</highlight></codeline>
<codeline lineno="504"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>auto<sp/>amrex_i_hi<sp/>=<sp/>amrex::ubound(box);<sp/>\</highlight></codeline>
<codeline lineno="505"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>n<sp/>=<sp/>0;<sp/>n<sp/>&lt;<sp/>ncomp;<sp/>++n)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="506"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>k<sp/>=<sp/>amrex_i_lo.z;<sp/>k<sp/>&lt;=<sp/>amrex_i_hi.z;<sp/>++k)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="507"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>j<sp/>=<sp/>amrex_i_lo.y;<sp/>j<sp/>&lt;=<sp/>amrex_i_hi.y;<sp/>++j)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="508"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AMREX_PRAGMA_SIMD<sp/>\</highlight></codeline>
<codeline lineno="509"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>amrex_i_lo.x;<sp/>i<sp/>&lt;=<sp/>amrex_i_hi.x;<sp/>++i)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="510"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block<sp/>\</highlight></codeline>
<codeline lineno="511"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}}}}<sp/>\</highlight></codeline>
<codeline lineno="512"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight></codeline>
<codeline lineno="514" refid="AMReX__GpuLaunchMacrosG_8H_1a2d61db5a48c71c8460df5ddc71d9b25a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AMREX_GPU_DEVICE_FOR_4D(box,ncomp,i,j,k,n,block)<sp/>\</highlight></codeline>
<codeline lineno="515"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="516"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>amrex_i_ncells<sp/>=<sp/>box.numPts();<sp/>\</highlight></codeline>
<codeline lineno="517"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>auto<sp/>amrex_i_lo<sp/><sp/>=<sp/>amrex::lbound(box);<sp/>\</highlight></codeline>
<codeline lineno="518"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>auto<sp/>amrex_i_len<sp/>=<sp/>amrex::length(box);<sp/>\</highlight></codeline>
<codeline lineno="519"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>auto<sp/>amrex_i_ec<sp/>=<sp/>amrex::Gpu::ExecutionConfig(amrex_i_ncells);<sp/>\</highlight></codeline>
<codeline lineno="520"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>amrex::launch_global&lt;&lt;&lt;amrex_i_ec.numBlocks,<sp/>amrex_i_ec.numThreads,<sp/>amrex_i_ec.sharedMem,<sp/>amrex::Gpu::gpuStream()&gt;&gt;&gt;(<sp/>\</highlight></codeline>
<codeline lineno="521"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[=]<sp/>AMREX_GPU_DEVICE<sp/>()<sp/>noexcept<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="522"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>amrex_i_icell<sp/>=<sp/>blockDim.x*blockIdx.x+threadIdx.x,<sp/>amrex_i_stride<sp/>=<sp/>blockDim.x*gridDim.x;<sp/>\</highlight></codeline>
<codeline lineno="523"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>amrex_i_icell<sp/>&lt;<sp/>amrex_i_ncells;<sp/>amrex_i_icell<sp/>+=<sp/>amrex_i_stride)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="524"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>k<sp/>=<sp/><sp/>amrex_i_icell<sp/>/<sp/><sp/><sp/>(amrex_i_len.x*amrex_i_len.y);<sp/>\</highlight></codeline>
<codeline lineno="525"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>j<sp/>=<sp/>(amrex_i_icell<sp/>-<sp/>k*(amrex_i_len.x*amrex_i_len.y))<sp/>/<sp/><sp/><sp/>amrex_i_len.x;<sp/>\</highlight></codeline>
<codeline lineno="526"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>i<sp/>=<sp/>(amrex_i_icell<sp/>-<sp/>k*(amrex_i_len.x*amrex_i_len.y))<sp/>-<sp/>j*amrex_i_len.x;<sp/>\</highlight></codeline>
<codeline lineno="527"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>+=<sp/>amrex_i_lo.x;<sp/>\</highlight></codeline>
<codeline lineno="528"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>+=<sp/>amrex_i_lo.y;<sp/>\</highlight></codeline>
<codeline lineno="529"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>+=<sp/>amrex_i_lo.z;<sp/>\</highlight></codeline>
<codeline lineno="530"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>n<sp/>=<sp/>0;<sp/>n<sp/>&lt;<sp/>ncomp;<sp/>++n)<sp/>block<sp/>\</highlight></codeline>
<codeline lineno="531"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="532"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});<sp/>\</highlight></codeline>
<codeline lineno="533"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AMREX_GPU_ERROR_CHECK();<sp/>\</highlight></codeline>
<codeline lineno="534"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight></codeline>
<codeline lineno="536" refid="AMReX__GpuLaunchMacrosG_8H_1a529852b4a0f4316f5c38bdc0033a5be0" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AMREX_GPU_DEVICE_PARALLEL_FOR_4D(...)<sp/>AMREX_GPU_DEVICE_FOR_4D(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_GpuLaunchMacrosG.H"/>
  </compounddef>
</doxygen>
