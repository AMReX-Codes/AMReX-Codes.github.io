<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classamrex_1_1Orientation" kind="class" language="C++" prot="public">
    <compoundname>amrex::Orientation</compoundname>
    <includes refid="AMReX__Orientation_8H" local="no">AMReX_Orientation.H</includes>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classamrex_1_1Orientation_1a877c697bbab9de21af4012197ba76410" prot="public" static="no" strong="no">
        <type></type>
        <name>Side</name>
        <enumvalue id="classamrex_1_1Orientation_1a877c697bbab9de21af4012197ba76410a20ab23ed836ba1667dddbd915ff85255" prot="public">
          <name>low</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classamrex_1_1Orientation_1a877c697bbab9de21af4012197ba76410ae82bb2777abd5901ea82ca6721b716a8" prot="public">
          <name>high</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>In each dimension a face is either low or high. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.H" line="35" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.H" bodystart="35" bodyend="35"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classamrex_1_1Orientation_1a89ae2d0b6ad2bb943c5bf57233fdae87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class OrientationIter</definition>
        <argsstring></argsstring>
        <name>OrientationIter</name>
        <param>
          <type><ref refid="classamrex_1_1OrientationIter" kindref="compound">OrientationIter</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.H" line="33" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.H" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1Orientation_1a1a84a7ddf56279e4a09fb51fc80fe955" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::istream &amp;</type>
        <definition>std::istream&amp; operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;is, Orientation &amp;o)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Orientation" kindref="compound">Orientation</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>Read from an istream. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.H" line="95" column="25" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.cpp" bodystart="25" bodyend="45"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1Orientation_1a3a44078514365792a6288dcd61a668b0" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::Orientation::val</definition>
        <argsstring></argsstring>
        <name>val</name>
        <initializer>= -1</initializer>
        <briefdescription>
<para>The data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.H" line="127" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.H" bodystart="127" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1Orientation_1a4706129433791b27ed00bd69b4cff5f7" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr amrex::Orientation::Orientation</definition>
        <argsstring>() noexcept=default</argsstring>
        <name>Orientation</name>
        <briefdescription>
<para>The default constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.H" line="37" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Orientation_1a382d3782efffb9d5c5d132f5758b7cb5" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE amrex::Orientation::Orientation</definition>
        <argsstring>(int dir, Side side) noexcept</argsstring>
        <name>Orientation</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Orientation_1a877c697bbab9de21af4012197ba76410" kindref="member">Side</ref></type>
          <declname>side</declname>
        </param>
        <briefdescription>
<para>Set the orientation of a side. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.H" line="40" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.H" bodystart="40" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Orientation_1a377b4d3db6c833a77b181d4329d4c530" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr <ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref></type>
        <definition>constexpr AMREX_GPU_HOST_DEVICE amrex::Orientation::Orientation</definition>
        <argsstring>(Direction dir, Side side) noexcept</argsstring>
        <name>Orientation</name>
        <param>
          <type><ref refid="namespaceamrex_1a8de829410ed15dbc56e4dafc9bc6ea69" kindref="member">Direction</ref></type>
          <declname>dir</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Orientation_1a877c697bbab9de21af4012197ba76410" kindref="member">Side</ref></type>
          <declname>side</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.H" line="47" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.H" bodystart="47" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Orientation_1a113bd6398654564605653436aff3db76" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE bool amrex::Orientation::operator==</definition>
        <argsstring>(const Orientation &amp;o) const noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classamrex_1_1Orientation" kindref="compound">Orientation</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>Logical equality. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.H" line="53" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.H" bodystart="53" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Orientation_1a20616a77be20de0b816afe9db8cb3427" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE bool amrex::Orientation::operator!=</definition>
        <argsstring>(const Orientation &amp;o) const noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classamrex_1_1Orientation" kindref="compound">Orientation</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>Logical inequality. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.H" line="56" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.H" bodystart="56" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Orientation_1a3c9e80d08753362f5c7afbddd600265b" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE bool amrex::Orientation::operator&lt;</definition>
        <argsstring>(const Orientation &amp;o) const noexcept</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classamrex_1_1Orientation" kindref="compound">Orientation</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>Less-than. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.H" line="59" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.H" bodystart="59" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Orientation_1af58a1225b480f11546da44203aad48b7" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE bool amrex::Orientation::operator&lt;=</definition>
        <argsstring>(const Orientation &amp;o) const noexcept</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="classamrex_1_1Orientation" kindref="compound">Orientation</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>Less-than or equal. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.H" line="62" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.H" bodystart="62" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Orientation_1a5744e431e5a8462467ef74563e4163d3" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE bool amrex::Orientation::operator&gt;</definition>
        <argsstring>(const Orientation &amp;o) const noexcept</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classamrex_1_1Orientation" kindref="compound">Orientation</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>Greater-than. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.H" line="65" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.H" bodystart="65" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Orientation_1af14b906cbe8c60d19ef9a2c86288900c" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE bool amrex::Orientation::operator&gt;=</definition>
        <argsstring>(const Orientation &amp;o) const noexcept</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="classamrex_1_1Orientation" kindref="compound">Orientation</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>Greater-than or equal. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.H" line="68" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.H" bodystart="68" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Orientation_1ab45ae38d0f52ccaa5d37747aae17af88" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr <ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref></type>
        <definition>constexpr AMREX_GPU_HOST_DEVICE amrex::Orientation::operator int</definition>
        <argsstring>() const noexcept</argsstring>
        <name>operator int</name>
        <briefdescription>
<para>This conversion operator maps an orientation into a unique integer in the range [0 .. 2*AMREX_SPACEDIM-1] according to the above ordering. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.H" line="75" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.H" bodystart="75" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Orientation_1a2b165e7e8b05111ce8c93285bc85f081" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Orientation" kindref="compound">Orientation</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE Orientation amrex::Orientation::flip</definition>
        <argsstring>() const noexcept</argsstring>
        <name>flip</name>
        <briefdescription>
<para>Return opposite orientation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.H" line="78" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.H" bodystart="78" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Orientation_1a57676b2fc696de4eba8ab6a6c0d6b29e" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE int amrex::Orientation::coordDir</definition>
        <argsstring>() const noexcept</argsstring>
        <name>coordDir</name>
        <briefdescription>
<para>Returns the coordinate direction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.H" line="84" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.H" bodystart="84" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Orientation_1abcc064a6070e3e2deab527311ac91135" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Orientation_1a877c697bbab9de21af4012197ba76410" kindref="member">Side</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE Side amrex::Orientation::faceDir</definition>
        <argsstring>() const noexcept</argsstring>
        <name>faceDir</name>
        <briefdescription>
<para>Returns the orientation of the face <ndash/> low or high. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.H" line="87" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.H" bodystart="87" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Orientation_1a810886bfa5b2df027287545304c73ad6" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE bool amrex::Orientation::isLow</definition>
        <argsstring>() const noexcept</argsstring>
        <name>isLow</name>
        <briefdescription>
<para>Returns true if <ref refid="classamrex_1_1Orientation" kindref="compound">Orientation</ref> is low. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.H" line="90" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.H" bodystart="90" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Orientation_1ad165d895eaa7163b73c35a501479d83b" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE bool amrex::Orientation::isHigh</definition>
        <argsstring>() const noexcept</argsstring>
        <name>isHigh</name>
        <briefdescription>
<para>Returns true if <ref refid="classamrex_1_1Orientation" kindref="compound">Orientation</ref> is high. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.H" line="93" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.H" bodystart="93" bodyend="93"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classamrex_1_1Orientation_1a8357bdd8096531117cdcb334a5bab9b0" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> static constexpr <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE static constexpr AMREX_FORCE_INLINE int amrex::Orientation::xlo</definition>
        <argsstring>() noexcept</argsstring>
        <name>xlo</name>
        <briefdescription>
<para>Int value of the x-lo-face. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.H" line="99" column="26" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.H" bodystart="99" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Orientation_1a9f188bc06079f1c188304a32ad6110a1" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> static constexpr <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE static constexpr AMREX_FORCE_INLINE int amrex::Orientation::xhi</definition>
        <argsstring>() noexcept</argsstring>
        <name>xhi</name>
        <briefdescription>
<para>Int value of the x-hi-face. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.H" line="103" column="26" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.H" bodystart="103" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Orientation_1a834da152cd3da5a15d0b486a2765778f" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> static constexpr <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE static constexpr AMREX_FORCE_INLINE int amrex::Orientation::ylo</definition>
        <argsstring>() noexcept</argsstring>
        <name>ylo</name>
        <briefdescription>
<para>Int value of the y-lo-face. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.H" line="107" column="26" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.H" bodystart="107" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Orientation_1a60ebce7e24f582476b0759479c38cec8" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> static constexpr <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE static constexpr AMREX_FORCE_INLINE int amrex::Orientation::yhi</definition>
        <argsstring>() noexcept</argsstring>
        <name>yhi</name>
        <briefdescription>
<para>Int value of the y-hi-face. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.H" line="111" column="26" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.H" bodystart="111" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Orientation_1adc5c24fdb759cd388af0ca18c37a49f3" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> static constexpr <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE static constexpr AMREX_FORCE_INLINE int amrex::Orientation::zlo</definition>
        <argsstring>() noexcept</argsstring>
        <name>zlo</name>
        <briefdescription>
<para>Int value of the z-lo-face. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.H" line="115" column="26" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.H" bodystart="115" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Orientation_1a04130dc48cb39636a34e8b35f79f0dd4" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> static constexpr <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE static constexpr AMREX_FORCE_INLINE int amrex::Orientation::zhi</definition>
        <argsstring>() noexcept</argsstring>
        <name>zhi</name>
        <briefdescription>
<para>Int value of the z-hi-face. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.H" line="119" column="26" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.H" bodystart="119" bodyend="119"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classamrex_1_1Orientation_1a77e0b0c3ba62b33380805f6d6da3ca5e" prot="private" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE amrex::Orientation::Orientation</definition>
        <argsstring>(int v) noexcept</argsstring>
        <name>Orientation</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Used internally. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.H" line="124" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.H" bodystart="124" bodyend="124"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Encapsulation of the <ref refid="classamrex_1_1Orientation" kindref="compound">Orientation</ref> of the Faces of a <ref refid="classamrex_1_1Box" kindref="compound">Box</ref>. </para>
    </briefdescription>
    <detaileddescription>
<para>This class encapsulates the orientation of the faces of a <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> by providing an ordering of each of the faces of a <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> in AMREX_SPACEDIM dimensions. This allows iterating over all the faces of a <ref refid="classamrex_1_1Box" kindref="compound">Box</ref>. The ordering first traverses the AMREX_SPACEDIM low sides from direction 0 .. AMREX_SPACEDIM-1 and then the AMREX_SPACEDIM high sides from direction 0 .. AMREX_SPACEDIM-1. </para>
    </detaileddescription>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.H" line="29" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.H" bodystart="30" bodyend="128"/>
    <listofallmembers>
      <member refid="classamrex_1_1Orientation_1a57676b2fc696de4eba8ab6a6c0d6b29e" prot="public" virt="non-virtual"><scope>amrex::Orientation</scope><name>coordDir</name></member>
      <member refid="classamrex_1_1Orientation_1abcc064a6070e3e2deab527311ac91135" prot="public" virt="non-virtual"><scope>amrex::Orientation</scope><name>faceDir</name></member>
      <member refid="classamrex_1_1Orientation_1a2b165e7e8b05111ce8c93285bc85f081" prot="public" virt="non-virtual"><scope>amrex::Orientation</scope><name>flip</name></member>
      <member refid="classamrex_1_1Orientation_1a877c697bbab9de21af4012197ba76410ae82bb2777abd5901ea82ca6721b716a8" prot="public" virt="non-virtual"><scope>amrex::Orientation</scope><name>high</name></member>
      <member refid="classamrex_1_1Orientation_1ad165d895eaa7163b73c35a501479d83b" prot="public" virt="non-virtual"><scope>amrex::Orientation</scope><name>isHigh</name></member>
      <member refid="classamrex_1_1Orientation_1a810886bfa5b2df027287545304c73ad6" prot="public" virt="non-virtual"><scope>amrex::Orientation</scope><name>isLow</name></member>
      <member refid="classamrex_1_1Orientation_1a877c697bbab9de21af4012197ba76410a20ab23ed836ba1667dddbd915ff85255" prot="public" virt="non-virtual"><scope>amrex::Orientation</scope><name>low</name></member>
      <member refid="classamrex_1_1Orientation_1ab45ae38d0f52ccaa5d37747aae17af88" prot="public" virt="non-virtual"><scope>amrex::Orientation</scope><name>operator int</name></member>
      <member refid="classamrex_1_1Orientation_1a20616a77be20de0b816afe9db8cb3427" prot="public" virt="non-virtual"><scope>amrex::Orientation</scope><name>operator!=</name></member>
      <member refid="classamrex_1_1Orientation_1a3c9e80d08753362f5c7afbddd600265b" prot="public" virt="non-virtual"><scope>amrex::Orientation</scope><name>operator&lt;</name></member>
      <member refid="classamrex_1_1Orientation_1af58a1225b480f11546da44203aad48b7" prot="public" virt="non-virtual"><scope>amrex::Orientation</scope><name>operator&lt;=</name></member>
      <member refid="classamrex_1_1Orientation_1a113bd6398654564605653436aff3db76" prot="public" virt="non-virtual"><scope>amrex::Orientation</scope><name>operator==</name></member>
      <member refid="classamrex_1_1Orientation_1a5744e431e5a8462467ef74563e4163d3" prot="public" virt="non-virtual"><scope>amrex::Orientation</scope><name>operator&gt;</name></member>
      <member refid="classamrex_1_1Orientation_1af14b906cbe8c60d19ef9a2c86288900c" prot="public" virt="non-virtual"><scope>amrex::Orientation</scope><name>operator&gt;=</name></member>
      <member refid="classamrex_1_1Orientation_1a1a84a7ddf56279e4a09fb51fc80fe955" prot="public" virt="non-virtual"><scope>amrex::Orientation</scope><name>operator&gt;&gt;</name></member>
      <member refid="classamrex_1_1Orientation_1a4706129433791b27ed00bd69b4cff5f7" prot="public" virt="non-virtual"><scope>amrex::Orientation</scope><name>Orientation</name></member>
      <member refid="classamrex_1_1Orientation_1a382d3782efffb9d5c5d132f5758b7cb5" prot="public" virt="non-virtual"><scope>amrex::Orientation</scope><name>Orientation</name></member>
      <member refid="classamrex_1_1Orientation_1a377b4d3db6c833a77b181d4329d4c530" prot="public" virt="non-virtual"><scope>amrex::Orientation</scope><name>Orientation</name></member>
      <member refid="classamrex_1_1Orientation_1a77e0b0c3ba62b33380805f6d6da3ca5e" prot="private" virt="non-virtual"><scope>amrex::Orientation</scope><name>Orientation</name></member>
      <member refid="classamrex_1_1Orientation_1a89ae2d0b6ad2bb943c5bf57233fdae87" prot="public" virt="non-virtual"><scope>amrex::Orientation</scope><name>OrientationIter</name></member>
      <member refid="classamrex_1_1Orientation_1a877c697bbab9de21af4012197ba76410" prot="public" virt="non-virtual"><scope>amrex::Orientation</scope><name>Side</name></member>
      <member refid="classamrex_1_1Orientation_1a3a44078514365792a6288dcd61a668b0" prot="private" virt="non-virtual"><scope>amrex::Orientation</scope><name>val</name></member>
      <member refid="classamrex_1_1Orientation_1a9f188bc06079f1c188304a32ad6110a1" prot="public" virt="non-virtual"><scope>amrex::Orientation</scope><name>xhi</name></member>
      <member refid="classamrex_1_1Orientation_1a8357bdd8096531117cdcb334a5bab9b0" prot="public" virt="non-virtual"><scope>amrex::Orientation</scope><name>xlo</name></member>
      <member refid="classamrex_1_1Orientation_1a60ebce7e24f582476b0759479c38cec8" prot="public" virt="non-virtual"><scope>amrex::Orientation</scope><name>yhi</name></member>
      <member refid="classamrex_1_1Orientation_1a834da152cd3da5a15d0b486a2765778f" prot="public" virt="non-virtual"><scope>amrex::Orientation</scope><name>ylo</name></member>
      <member refid="classamrex_1_1Orientation_1a04130dc48cb39636a34e8b35f79f0dd4" prot="public" virt="non-virtual"><scope>amrex::Orientation</scope><name>zhi</name></member>
      <member refid="classamrex_1_1Orientation_1adc5c24fdb759cd388af0ca18c37a49f3" prot="public" virt="non-virtual"><scope>amrex::Orientation</scope><name>zlo</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
