<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classamrex_1_1Cluster" kind="class" language="C++" prot="public">
    <compoundname>amrex::Cluster</compoundname>
    <includes refid="AMReX__Cluster_8H" local="no">AMReX_Cluster.H</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1Cluster_1a97e723c3499aedd07e910e30bbb1d51a" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1a5e922fb76ff2eb645844783ad65d1490" kindref="member">Box</ref></type>
        <definition>Box amrex::Cluster::m_bx</definition>
        <argsstring></argsstring>
        <name>m_bx</name>
        <qualifiedname>amrex::Cluster::m_bx</qualifiedname>
        <briefdescription>
<para>The data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Cluster.H" line="129" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Cluster.H" bodystart="129" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1Cluster_1a609327af6ac8ee5902c0c7d0a6629772" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1a95101764f5ec64cd1dd6e55614702cdb" kindref="member">IntVect</ref> *</type>
        <definition>IntVect* amrex::Cluster::m_ar</definition>
        <argsstring></argsstring>
        <name>m_ar</name>
        <qualifiedname>amrex::Cluster::m_ar</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Cluster.H" line="130" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Cluster.H" bodystart="130" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1Cluster_1a614d1738c82b3361f91ddd9572a5e0a3" prot="private" static="no" mutable="no">
        <type>Long</type>
        <definition>Long amrex::Cluster::m_len</definition>
        <argsstring></argsstring>
        <name>m_len</name>
        <qualifiedname>amrex::Cluster::m_len</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Cluster.H" line="131" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Cluster.H" bodystart="131" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1Cluster_1a85b0d78aa07a1e794745a1166a7fec82" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::Cluster::Cluster</definition>
        <argsstring>() noexcept=default</argsstring>
        <name>Cluster</name>
        <qualifiedname>amrex::Cluster::Cluster</qualifiedname>
        <briefdescription>
<para>The default constructor <ndash/> builds invalid <ref refid="classamrex_1_1Cluster" kindref="compound">Cluster</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Cluster.H" line="30" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Cluster_1ad963b8773932d15280fdd5243f089699" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::Cluster::Cluster</definition>
        <argsstring>(IntVect *a, Long len) noexcept</argsstring>
        <name>Cluster</name>
        <qualifiedname>amrex::Cluster::Cluster</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1a95101764f5ec64cd1dd6e55614702cdb" kindref="member">IntVect</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Long</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Construct a cluster from an array of IntVects. The <ref refid="classamrex_1_1Cluster" kindref="compound">Cluster</ref> object does NOT take over memory management of array; i.e. that&apos;s the user&apos;s ultimate responsibility. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Cluster.H" line="40" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Cluster.cpp" bodystart="18" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Cluster_1a88711e631c613fc5a5109466c997cbf2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::Cluster::Cluster</definition>
        <argsstring>(Cluster &amp;c, const Box &amp;b)</argsstring>
        <name>Cluster</name>
        <qualifiedname>amrex::Cluster::Cluster</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1Cluster" kindref="compound">Cluster</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a5e922fb76ff2eb645844783ad65d1490" kindref="member">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Construct new cluster by removing all points from c that lie in box b. <ref refid="classamrex_1_1Cluster" kindref="compound">Cluster</ref> c is modified and may become invalid. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Cluster.H" line="49" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Cluster.cpp" bodystart="46" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Cluster_1aaed7b54ca160992ed7fa68179a7e1302" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::Cluster::~Cluster</definition>
        <argsstring>()=default</argsstring>
        <name>~Cluster</name>
        <qualifiedname>amrex::Cluster::~Cluster</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Cluster.H" line="51" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Cluster_1a9e4256a40033c7f410b78dd175236308" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::Cluster::Cluster</definition>
        <argsstring>(const Cluster &amp;)=delete</argsstring>
        <name>Cluster</name>
        <qualifiedname>amrex::Cluster::Cluster</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1Cluster" kindref="compound">Cluster</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Cluster.H" line="52" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Cluster_1a42768669b97210933f9591ac28c882eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::Cluster::Cluster</definition>
        <argsstring>(Cluster &amp;&amp;)=delete</argsstring>
        <name>Cluster</name>
        <qualifiedname>amrex::Cluster::Cluster</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1Cluster" kindref="compound">Cluster</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Cluster.H" line="53" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Cluster_1afca4bbb92d1f772e8cca613282577ecd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1Cluster" kindref="compound">Cluster</ref> &amp;</type>
        <definition>Cluster &amp; amrex::Cluster::operator=</definition>
        <argsstring>(const Cluster &amp;)=delete</argsstring>
        <name>operator=</name>
        <qualifiedname>amrex::Cluster::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1Cluster" kindref="compound">Cluster</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Cluster.H" line="54" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Cluster_1a1cfb620c5310289d32ae096cb7ec6d5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1Cluster" kindref="compound">Cluster</ref> &amp;</type>
        <definition>Cluster &amp; amrex::Cluster::operator=</definition>
        <argsstring>(Cluster &amp;&amp;)=delete</argsstring>
        <name>operator=</name>
        <qualifiedname>amrex::Cluster::operator=</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1Cluster" kindref="compound">Cluster</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Cluster.H" line="55" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Cluster_1a537a776998d0b5b0ea5fb883988dd856" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="namespaceamrex_1a5e922fb76ff2eb645844783ad65d1490" kindref="member">Box</ref> &amp;</type>
        <definition>const Box &amp; amrex::Cluster::box</definition>
        <argsstring>() const noexcept</argsstring>
        <name>box</name>
        <qualifiedname>amrex::Cluster::box</qualifiedname>
        <briefdescription>
<para>Return minimal box containing all tagged points. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Cluster.H" line="60" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Cluster.H" bodystart="60" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Cluster_1ad5855c6485c1d9b2b16d8d87ea0aabf4" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::Cluster::ok</definition>
        <argsstring>() const noexcept</argsstring>
        <name>ok</name>
        <qualifiedname>amrex::Cluster::ok</qualifiedname>
        <briefdescription>
<para>Does cluster contain any points? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Cluster.H" line="65" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Cluster.H" bodystart="65" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Cluster_1a63a315fa3deb62851baf4e607d0c8c03" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>Long</type>
        <definition>Long amrex::Cluster::numTag</definition>
        <argsstring>() const noexcept</argsstring>
        <name>numTag</name>
        <qualifiedname>amrex::Cluster::numTag</qualifiedname>
        <briefdescription>
<para>Returns number of tagged points in cluster. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Cluster.H" line="70" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Cluster.H" bodystart="70" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Cluster_1ad765826ea9e9762f2328cac81faefc5c" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>Long</type>
        <definition>Long amrex::Cluster::numTag</definition>
        <argsstring>(const Box &amp;b) const noexcept</argsstring>
        <name>numTag</name>
        <qualifiedname>amrex::Cluster::numTag</qualifiedname>
        <param>
          <type>const <ref refid="namespaceamrex_1a5e922fb76ff2eb645844783ad65d1490" kindref="member">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Return number of tagged points in intersection of cluster and Box b. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Cluster.H" line="77" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Cluster.cpp" bodystart="116" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Cluster_1ada7fc0e6b932ef954e034d0da871f10d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1Cluster" kindref="compound">Cluster</ref> *</type>
        <definition>Cluster * amrex::Cluster::chop</definition>
        <argsstring>()</argsstring>
        <name>chop</name>
        <qualifiedname>amrex::Cluster::chop</qualifiedname>
        <briefdescription>
<para>This operation splits a cluster into two pieces by selecting a cutting plane with certain optimal characteristics then dividing the tagged points into clusters on either side of the plane. One cluster is returned as a new object the other is the modified calling object. This is called by chop(eff) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Cluster.H" line="86" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Cluster.cpp" bodystart="261" bodyend="334"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Cluster_1a334eb4810f3a2efcf713b44eee9d4d7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1Cluster" kindref="compound">Cluster</ref> *</type>
        <definition>Cluster * amrex::Cluster::new_chop</definition>
        <argsstring>()</argsstring>
        <name>new_chop</name>
        <qualifiedname>amrex::Cluster::new_chop</qualifiedname>
        <briefdescription>
<para>This version of chop has slightly different logic - in this case if a cut results in two boxes with the same grid efficiency as the original box then the cut is reverted and a cut in a different direction is chosen This is called by new_chop(eff) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Cluster.H" line="95" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Cluster.cpp" bodystart="337" bodyend="440"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Cluster_1aa47a0fcba1b6084cfc319bf1e64267bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Cluster::distribute</definition>
        <argsstring>(ClusterList &amp;clst, const BoxDomain &amp;bd)</argsstring>
        <name>distribute</name>
        <qualifiedname>amrex::Cluster::distribute</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1ClusterList" kindref="compound">ClusterList</ref> &amp;</type>
          <declname>clst</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref> &amp;</type>
          <declname>bd</declname>
        </param>
        <briefdescription>
<para>Constructs a list of cluster objects obtained by intersecting this cluster with each box in bl. The list is returned in the argument clst. For each intersection that includes tagged points, construct a new cluster by removing those points from this object. Empty intersections or those that contain no tagged points will not generate a new cluster. Note that this cluster will be modified and possibly become invalid in the process. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>clst</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bd</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Cluster.H" line="110" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Cluster.cpp" bodystart="98" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Cluster_1a663b75105444c3cfca994b499b52d038" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::Cluster::eff</definition>
        <argsstring>() const noexcept</argsstring>
        <name>eff</name>
        <qualifiedname>amrex::Cluster::eff</qualifiedname>
        <briefdescription>
<para>Compute ratio of tagged to total number of points in cluster. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Cluster.H" line="116" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Cluster.H" bodystart="116" bodyend="119"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="classamrex_1_1Cluster_1ae1575a7a7ef6b42efa8ddf43f838ddac" prot="private" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Cluster::minBox</definition>
        <argsstring>() noexcept</argsstring>
        <name>minBox</name>
        <qualifiedname>amrex::Cluster::minBox</qualifiedname>
        <briefdescription>
<para>Compute and store minimal box containing tagged points. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Cluster.H" line="126" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Cluster.cpp" bodystart="129" bodyend="145"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>A cluster of tagged cells. </para>
    </briefdescription>
    <detaileddescription>
<para>Utility class for tagging error cells. </para>
    </detaileddescription>
    <collaborationgraph>
      <node id="2">
        <label>amrex::BoxND&lt; 3 &gt;</label>
        <link refid="classamrex_1_1BoxND"/>
      </node>
      <node id="1">
        <label>amrex::Cluster</label>
        <link refid="classamrex_1_1Cluster"/>
        <childnode refid="2" relation="usage">
          <edgelabel>m_bx</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>m_ar</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>amrex::IntVectND&lt; dim &gt;</label>
        <link refid="classamrex_1_1IntVectND"/>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Cluster.H" line="23" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Cluster.H" bodystart="24" bodyend="132"/>
    <listofallmembers>
      <member refid="classamrex_1_1Cluster_1a537a776998d0b5b0ea5fb883988dd856" prot="public" virt="non-virtual"><scope>amrex::Cluster</scope><name>box</name></member>
      <member refid="classamrex_1_1Cluster_1ada7fc0e6b932ef954e034d0da871f10d" prot="public" virt="non-virtual"><scope>amrex::Cluster</scope><name>chop</name></member>
      <member refid="classamrex_1_1Cluster_1a85b0d78aa07a1e794745a1166a7fec82" prot="public" virt="non-virtual"><scope>amrex::Cluster</scope><name>Cluster</name></member>
      <member refid="classamrex_1_1Cluster_1ad963b8773932d15280fdd5243f089699" prot="public" virt="non-virtual"><scope>amrex::Cluster</scope><name>Cluster</name></member>
      <member refid="classamrex_1_1Cluster_1a88711e631c613fc5a5109466c997cbf2" prot="public" virt="non-virtual"><scope>amrex::Cluster</scope><name>Cluster</name></member>
      <member refid="classamrex_1_1Cluster_1a9e4256a40033c7f410b78dd175236308" prot="public" virt="non-virtual"><scope>amrex::Cluster</scope><name>Cluster</name></member>
      <member refid="classamrex_1_1Cluster_1a42768669b97210933f9591ac28c882eb" prot="public" virt="non-virtual"><scope>amrex::Cluster</scope><name>Cluster</name></member>
      <member refid="classamrex_1_1Cluster_1aa47a0fcba1b6084cfc319bf1e64267bb" prot="public" virt="non-virtual"><scope>amrex::Cluster</scope><name>distribute</name></member>
      <member refid="classamrex_1_1Cluster_1a663b75105444c3cfca994b499b52d038" prot="public" virt="non-virtual"><scope>amrex::Cluster</scope><name>eff</name></member>
      <member refid="classamrex_1_1Cluster_1a609327af6ac8ee5902c0c7d0a6629772" prot="private" virt="non-virtual"><scope>amrex::Cluster</scope><name>m_ar</name></member>
      <member refid="classamrex_1_1Cluster_1a97e723c3499aedd07e910e30bbb1d51a" prot="private" virt="non-virtual"><scope>amrex::Cluster</scope><name>m_bx</name></member>
      <member refid="classamrex_1_1Cluster_1a614d1738c82b3361f91ddd9572a5e0a3" prot="private" virt="non-virtual"><scope>amrex::Cluster</scope><name>m_len</name></member>
      <member refid="classamrex_1_1Cluster_1ae1575a7a7ef6b42efa8ddf43f838ddac" prot="private" virt="non-virtual"><scope>amrex::Cluster</scope><name>minBox</name></member>
      <member refid="classamrex_1_1Cluster_1a334eb4810f3a2efcf713b44eee9d4d7b" prot="public" virt="non-virtual"><scope>amrex::Cluster</scope><name>new_chop</name></member>
      <member refid="classamrex_1_1Cluster_1a63a315fa3deb62851baf4e607d0c8c03" prot="public" virt="non-virtual"><scope>amrex::Cluster</scope><name>numTag</name></member>
      <member refid="classamrex_1_1Cluster_1ad765826ea9e9762f2328cac81faefc5c" prot="public" virt="non-virtual"><scope>amrex::Cluster</scope><name>numTag</name></member>
      <member refid="classamrex_1_1Cluster_1ad5855c6485c1d9b2b16d8d87ea0aabf4" prot="public" virt="non-virtual"><scope>amrex::Cluster</scope><name>ok</name></member>
      <member refid="classamrex_1_1Cluster_1afca4bbb92d1f772e8cca613282577ecd" prot="public" virt="non-virtual"><scope>amrex::Cluster</scope><name>operator=</name></member>
      <member refid="classamrex_1_1Cluster_1a1cfb620c5310289d32ae096cb7ec6d5b" prot="public" virt="non-virtual"><scope>amrex::Cluster</scope><name>operator=</name></member>
      <member refid="classamrex_1_1Cluster_1aaed7b54ca160992ed7fa68179a7e1302" prot="public" virt="non-virtual"><scope>amrex::Cluster</scope><name>~Cluster</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
