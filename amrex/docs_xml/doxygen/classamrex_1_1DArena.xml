<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classamrex_1_1DArena" kind="class" language="C++" prot="public">
    <compoundname>amrex::DArena</compoundname>
    <basecompoundref refid="classamrex_1_1Arena" prot="public" virt="non-virtual">amrex::Arena</basecompoundref>
    <includes refid="AMReX__DArena_8H" local="no">AMReX_DArena.H</includes>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classamrex_1_1DArena_1a271820274e7f0fb9c6e028350f8bf291" prot="private" static="yes" mutable="no">
        <type>constexpr int</type>
        <definition>constexpr int amrex::DArena::m_max_max_order</definition>
        <argsstring></argsstring>
        <name>m_max_max_order</name>
        <initializer>= 30</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_DArena.H" line="39" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_DArena.H" bodystart="39" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1DArena_1a1061832f806866fdf9902b89c7013792" prot="private" static="no" mutable="no">
        <type>std::array&lt; std::unordered_set&lt; std::ptrdiff_t &gt;, <ref refid="classamrex_1_1DArena_1a271820274e7f0fb9c6e028350f8bf291" kindref="member">m_max_max_order</ref>+1 &gt;</type>
        <definition>std::array&lt;std::unordered_set&lt;std::ptrdiff_t&gt;, m_max_max_order+1&gt; amrex::DArena::m_free</definition>
        <argsstring></argsstring>
        <name>m_free</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_DArena.H" line="41" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_DArena.H" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1DArena_1aa9274b236cdc85ff9d33d35f2d8027d3" prot="private" static="no" mutable="no">
        <type>std::unordered_map&lt; std::ptrdiff_t, int &gt;</type>
        <definition>std::unordered_map&lt;std::ptrdiff_t,int&gt; amrex::DArena::m_used</definition>
        <argsstring></argsstring>
        <name>m_used</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_DArena.H" line="43" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_DArena.H" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1DArena_1a1fe171de824be042a8b957b2fe35d7f3" prot="private" static="no" mutable="no">
        <type>std::unordered_map&lt; void *, std::size_t &gt;</type>
        <definition>std::unordered_map&lt;void*,std::size_t&gt; amrex::DArena::m_system</definition>
        <argsstring></argsstring>
        <name>m_system</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_DArena.H" line="44" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_DArena.H" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1DArena_1a60dde49130e2e6672c0f70a63a5fde2c" prot="private" static="no" mutable="no">
        <type>char *</type>
        <definition>char* amrex::DArena::m_baseptr</definition>
        <argsstring></argsstring>
        <name>m_baseptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_DArena.H" line="45" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_DArena.H" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1DArena_1a9532cfd8968174b10df559bd24b8061e" prot="private" static="no" mutable="no">
        <type>std::size_t</type>
        <definition>std::size_t amrex::DArena::m_max_size</definition>
        <argsstring></argsstring>
        <name>m_max_size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_DArena.H" line="46" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_DArena.H" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1DArena_1a948e7568bd55ee259524b92bc872f22e" prot="private" static="no" mutable="no">
        <type>std::size_t</type>
        <definition>std::size_t amrex::DArena::m_block_size</definition>
        <argsstring></argsstring>
        <name>m_block_size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_DArena.H" line="47" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_DArena.H" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1DArena_1a3c3130abd9ad3a07c1fc765e702f5301" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int amrex::DArena::m_max_order</definition>
        <argsstring></argsstring>
        <name>m_max_order</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_DArena.H" line="48" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_DArena.H" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1DArena_1a3118de6f458432e9ebc3529e0101c87f" prot="private" static="no" mutable="no">
        <type>std::mutex</type>
        <definition>std::mutex amrex::DArena::m_mutex</definition>
        <argsstring></argsstring>
        <name>m_mutex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_DArena.H" line="49" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_DArena.H" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1DArena_1aa60ef4331c287042fd3ea4e037c4fd42" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::DArena::warning_printed</definition>
        <argsstring></argsstring>
        <name>warning_printed</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_DArena.H" line="50" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_DArena.H" bodystart="50" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1DArena_1a7cb796087fa7b90048cb294e5bd2a3a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::DArena::DArena</definition>
        <argsstring>(std::size_t max_size, std::size_t max_block_size, ArenaInfo info)</argsstring>
        <name>DArena</name>
        <param>
          <type>std::size_t</type>
          <declname>max_size</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>max_block_size</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1ArenaInfo" kindref="compound">ArenaInfo</ref></type>
          <declname>info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_DArena.H" line="23" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_DArena.cpp" bodystart="22" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DArena_1a41c0a4b57a9c225167b97d7fc936a2c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::DArena::DArena</definition>
        <argsstring>(DArena const &amp;)=delete</argsstring>
        <name>DArena</name>
        <param>
          <type><ref refid="classamrex_1_1DArena" kindref="compound">DArena</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_DArena.H" line="25" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DArena_1aa80948acc5b6bd402b99377935f6dd8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::DArena::DArena</definition>
        <argsstring>(DArena &amp;&amp;)=delete</argsstring>
        <name>DArena</name>
        <param>
          <type><ref refid="classamrex_1_1DArena" kindref="compound">DArena</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_DArena.H" line="26" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DArena_1ae770fd4904c4054aea8602012daaf844" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1DArena" kindref="compound">DArena</ref> &amp;</type>
        <definition>DArena&amp; amrex::DArena::operator=</definition>
        <argsstring>(DArena const &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1DArena" kindref="compound">DArena</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_DArena.H" line="27" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DArena_1a1ef1b9a302146fe2f1fab81bbd40e9c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1DArena" kindref="compound">DArena</ref> &amp;</type>
        <definition>DArena&amp; amrex::DArena::operator=</definition>
        <argsstring>(DArena &amp;&amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1DArena" kindref="compound">DArena</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_DArena.H" line="28" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DArena_1a1c086ae3cdaba882bb0b4617878cd034" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>amrex::DArena::~DArena</definition>
        <argsstring>() override</argsstring>
        <name>~DArena</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_DArena.H" line="30" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_DArena.cpp" bodystart="53" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DArena_1ae231217fe1f9796f26a006b122146940" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void *</type>
        <definition>void * amrex::DArena::alloc</definition>
        <argsstring>(std::size_t nbytes) overridefinal</argsstring>
        <name>alloc</name>
        <reimplements refid="classamrex_1_1Arena_1a46ce2cd5cfc039cec64548b031fbde2e">alloc</reimplements>
        <param>
          <type>std::size_t</type>
          <declname>sz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allocate a dynamic memory arena <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sz</parametername>
</parameternamelist>
<parameterdescription>
<para>size of the memory request </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pointer to the allocated memory </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_DArena.H" line="32" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_DArena.cpp" bodystart="62" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DArena_1a334bde7e4a70a4fd2a7b09c216dfc504" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void amrex::DArena::free</definition>
        <argsstring>(void *p) overridefinal</argsstring>
        <name>free</name>
        <reimplements refid="classamrex_1_1Arena_1a0c7e0730574c98febb6ddca2712cb515">free</reimplements>
        <param>
          <type>void *</type>
          <declname>pt</declname>
        </param>
        <briefdescription>
<para>A pure virtual function for deleting the arena pointed to by pt. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_DArena.H" line="33" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_DArena.cpp" bodystart="105" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DArena_1ac27feebfcb23c0487d2bb3973d4ac8c5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t amrex::DArena::totalMem</definition>
        <argsstring>() const </argsstring>
        <name>totalMem</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_DArena.H" line="35" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_DArena.H" bodystart="35" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DArena_1ab78d724a379d45a2b0c599dd19b80d4e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t amrex::DArena::freeMem</definition>
        <argsstring>() const </argsstring>
        <name>freeMem</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_DArena.H" line="36" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_DArena.cpp" bodystart="160" bodyend="169"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classamrex_1_1DArena_1a1ca2c5bbabce7267c652b6583b8da2b2" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ptrdiff_t</type>
        <definition>std::ptrdiff_t amrex::DArena::allocate_order</definition>
        <argsstring>(int order)</argsstring>
        <name>allocate_order</name>
        <param>
          <type>int</type>
          <declname>order</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_DArena.H" line="52" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_DArena.cpp" bodystart="128" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DArena_1aff39d5f7aae00008761d13e8cd4f429c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::DArena::deallocate_order</definition>
        <argsstring>(int order, std::ptrdiff_t offset)</argsstring>
        <name>deallocate_order</name>
        <param>
          <type>int</type>
          <declname>order</declname>
        </param>
        <param>
          <type>std::ptrdiff_t</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_DArena.H" line="53" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_DArena.cpp" bodystart="147" bodyend="157"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1013">
        <label>amrex::Arena</label>
        <link refid="classamrex_1_1Arena"/>
      </node>
      <node id="1012">
        <label>amrex::DArena</label>
        <link refid="classamrex_1_1DArena"/>
        <childnode refid="1013" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1016">
        <label>amrex::ArenaInfo</label>
        <link refid="structamrex_1_1ArenaInfo"/>
      </node>
      <node id="1015">
        <label>amrex::Arena</label>
        <link refid="classamrex_1_1Arena"/>
        <childnode refid="1016" relation="usage">
          <edgelabel>arena_info</edgelabel>
        </childnode>
      </node>
      <node id="1014">
        <label>amrex::DArena</label>
        <link refid="classamrex_1_1DArena"/>
        <childnode refid="1015" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_DArena.H" line="20" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_DArena.H" bodystart="18" bodyend="54"/>
    <listofallmembers>
      <member refid="classamrex_1_1Arena_1a253c417e0bd2863509c75d6250468a4e" prot="public" virt="non-virtual"><scope>amrex::DArena</scope><name>align</name></member>
      <member refid="classamrex_1_1Arena_1a52dd4bf03bb4d31899bca6ca3440760a" prot="protected" virt="non-virtual"><scope>amrex::DArena</scope><name>align_size</name></member>
      <member refid="classamrex_1_1DArena_1ae231217fe1f9796f26a006b122146940" prot="public" virt="virtual"><scope>amrex::DArena</scope><name>alloc</name></member>
      <member refid="classamrex_1_1DArena_1a1ca2c5bbabce7267c652b6583b8da2b2" prot="private" virt="non-virtual"><scope>amrex::DArena</scope><name>allocate_order</name></member>
      <member refid="classamrex_1_1Arena_1afc721e195430f79b2d1b287c490ef0fb" prot="protected" virt="non-virtual"><scope>amrex::DArena</scope><name>allocate_system</name></member>
      <member refid="classamrex_1_1Arena_1aeb2158ba443c9b23ba0d12bcf38a66e1" prot="protected" virt="non-virtual"><scope>amrex::DArena</scope><name>arena_info</name></member>
      <member refid="classamrex_1_1DArena_1a7cb796087fa7b90048cb294e5bd2a3a3" prot="public" virt="non-virtual"><scope>amrex::DArena</scope><name>DArena</name></member>
      <member refid="classamrex_1_1DArena_1a41c0a4b57a9c225167b97d7fc936a2c8" prot="public" virt="non-virtual"><scope>amrex::DArena</scope><name>DArena</name></member>
      <member refid="classamrex_1_1DArena_1aa80948acc5b6bd402b99377935f6dd8b" prot="public" virt="non-virtual"><scope>amrex::DArena</scope><name>DArena</name></member>
      <member refid="classamrex_1_1DArena_1aff39d5f7aae00008761d13e8cd4f429c" prot="private" virt="non-virtual"><scope>amrex::DArena</scope><name>deallocate_order</name></member>
      <member refid="classamrex_1_1Arena_1ac07ba8cda253cddee3cab1168ac65694" prot="protected" virt="non-virtual"><scope>amrex::DArena</scope><name>deallocate_system</name></member>
      <member refid="classamrex_1_1Arena_1a06dd6197d2081d7dd4c1bed308edd387" prot="public" virt="non-virtual"><scope>amrex::DArena</scope><name>Finalize</name></member>
      <member refid="classamrex_1_1DArena_1a334bde7e4a70a4fd2a7b09c216dfc504" prot="public" virt="virtual"><scope>amrex::DArena</scope><name>free</name></member>
      <member refid="classamrex_1_1DArena_1ab78d724a379d45a2b0c599dd19b80d4e" prot="public" virt="non-virtual"><scope>amrex::DArena</scope><name>freeMem</name></member>
      <member refid="classamrex_1_1Arena_1a9f40990a545f4d280e905117fc6a0786" prot="public" virt="non-virtual"><scope>amrex::DArena</scope><name>Initialize</name></member>
      <member refid="classamrex_1_1DArena_1a60dde49130e2e6672c0f70a63a5fde2c" prot="private" virt="non-virtual"><scope>amrex::DArena</scope><name>m_baseptr</name></member>
      <member refid="classamrex_1_1DArena_1a948e7568bd55ee259524b92bc872f22e" prot="private" virt="non-virtual"><scope>amrex::DArena</scope><name>m_block_size</name></member>
      <member refid="classamrex_1_1DArena_1a1061832f806866fdf9902b89c7013792" prot="private" virt="non-virtual"><scope>amrex::DArena</scope><name>m_free</name></member>
      <member refid="classamrex_1_1DArena_1a271820274e7f0fb9c6e028350f8bf291" prot="private" virt="non-virtual"><scope>amrex::DArena</scope><name>m_max_max_order</name></member>
      <member refid="classamrex_1_1DArena_1a3c3130abd9ad3a07c1fc765e702f5301" prot="private" virt="non-virtual"><scope>amrex::DArena</scope><name>m_max_order</name></member>
      <member refid="classamrex_1_1DArena_1a9532cfd8968174b10df559bd24b8061e" prot="private" virt="non-virtual"><scope>amrex::DArena</scope><name>m_max_size</name></member>
      <member refid="classamrex_1_1DArena_1a3118de6f458432e9ebc3529e0101c87f" prot="private" virt="non-virtual"><scope>amrex::DArena</scope><name>m_mutex</name></member>
      <member refid="classamrex_1_1DArena_1a1fe171de824be042a8b957b2fe35d7f3" prot="private" virt="non-virtual"><scope>amrex::DArena</scope><name>m_system</name></member>
      <member refid="classamrex_1_1DArena_1aa9274b236cdc85ff9d33d35f2d8027d3" prot="private" virt="non-virtual"><scope>amrex::DArena</scope><name>m_used</name></member>
      <member refid="classamrex_1_1DArena_1ae770fd4904c4054aea8602012daaf844" prot="public" virt="non-virtual"><scope>amrex::DArena</scope><name>operator=</name></member>
      <member refid="classamrex_1_1DArena_1a1ef1b9a302146fe2f1fab81bbd40e9c4" prot="public" virt="non-virtual"><scope>amrex::DArena</scope><name>operator=</name></member>
      <member refid="classamrex_1_1Arena_1a506a68384da30629323d0839f13812c2" prot="public" virt="non-virtual"><scope>amrex::DArena</scope><name>PrintUsage</name></member>
      <member refid="classamrex_1_1DArena_1ac27feebfcb23c0487d2bb3973d4ac8c5" prot="public" virt="non-virtual"><scope>amrex::DArena</scope><name>totalMem</name></member>
      <member refid="classamrex_1_1DArena_1aa60ef4331c287042fd3ea4e037c4fd42" prot="private" virt="non-virtual"><scope>amrex::DArena</scope><name>warning_printed</name></member>
      <member refid="classamrex_1_1Arena_1a515142557e6b630fbad746e3c33776e5" prot="public" virt="virtual"><scope>amrex::DArena</scope><name>~Arena</name></member>
      <member refid="classamrex_1_1DArena_1a1c086ae3cdaba882bb0b4617878cd034" prot="public" virt="virtual"><scope>amrex::DArena</scope><name>~DArena</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
