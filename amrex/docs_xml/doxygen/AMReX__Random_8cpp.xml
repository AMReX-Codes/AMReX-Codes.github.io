<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="AMReX__Random_8cpp" kind="file" language="C++">
    <compoundname>AMReX_Random.cpp</compoundname>
    <includes local="no">set</includes>
    <includes local="no">random</includes>
    <includes local="no">limits</includes>
    <includes refid="AMReX__Arena_8H" local="no">AMReX_Arena.H</includes>
    <includes refid="AMReX__BLFort_8H" local="no">AMReX_BLFort.H</includes>
    <includes refid="AMReX__Print_8H" local="no">AMReX_Print.H</includes>
    <includes refid="AMReX__Random_8H" local="no">AMReX_Random.H</includes>
    <includes refid="AMReX__BlockMutex_8H" local="no">AMReX_BlockMutex.H</includes>
    <includes refid="AMReX__Gpu_8H" local="no">AMReX_Gpu.H</includes>
    <includes refid="AMReX__OpenMP_8H" local="no">AMReX_OpenMP.H</includes>
    <incdepgraph>
      <node id="43753">
        <label>AMReX_OpenMP.H</label>
        <link refid="AMReX__OpenMP_8H"/>
        <childnode refid="43676" relation="include">
        </childnode>
      </node>
      <node id="43772">
        <label>AMReX_GpuContainers.H</label>
        <link refid="AMReX__GpuContainers_8H"/>
        <childnode refid="43676" relation="include">
        </childnode>
        <childnode refid="43731" relation="include">
        </childnode>
        <childnode refid="43773" relation="include">
        </childnode>
        <childnode refid="43710" relation="include">
        </childnode>
        <childnode refid="43774" relation="include">
        </childnode>
        <childnode refid="43771" relation="include">
        </childnode>
        <childnode refid="43775" relation="include">
        </childnode>
        <childnode refid="43718" relation="include">
        </childnode>
      </node>
      <node id="43709">
        <label>AMReX_ParallelContext.H</label>
        <link refid="AMReX__ParallelContext_8H"/>
        <childnode refid="43676" relation="include">
        </childnode>
        <childnode refid="43699" relation="include">
        </childnode>
        <childnode refid="43706" relation="include">
        </childnode>
        <childnode refid="43710" relation="include">
        </childnode>
        <childnode refid="43684" relation="include">
        </childnode>
      </node>
      <node id="43707">
        <label>iomanip</label>
      </node>
      <node id="43696">
        <label>functional</label>
      </node>
      <node id="43746">
        <label>AMReX_BoxArray.H</label>
        <link refid="AMReX__BoxArray_8H"/>
        <childnode refid="43676" relation="include">
        </childnode>
        <childnode refid="43695" relation="include">
        </childnode>
        <childnode refid="43700" relation="include">
        </childnode>
        <childnode refid="43743" relation="include">
        </childnode>
        <childnode refid="43747" relation="include">
        </childnode>
        <childnode refid="43727" relation="include">
        </childnode>
        <childnode refid="43748" relation="include">
        </childnode>
        <childnode refid="43716" relation="include">
        </childnode>
        <childnode refid="43710" relation="include">
        </childnode>
      </node>
      <node id="43674">
        <label>limits</label>
      </node>
      <node id="43715">
        <label>AMReX_BLProfiler.H</label>
        <link refid="AMReX__BLProfiler_8H"/>
        <childnode refid="43676" relation="include">
        </childnode>
        <childnode refid="43697" relation="include">
        </childnode>
        <childnode refid="43690" relation="include">
        </childnode>
      </node>
      <node id="43671">
        <label>/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Random.cpp</label>
        <link refid="AMReX_Random.cpp"/>
        <childnode refid="43672" relation="include">
        </childnode>
        <childnode refid="43673" relation="include">
        </childnode>
        <childnode refid="43674" relation="include">
        </childnode>
        <childnode refid="43675" relation="include">
        </childnode>
        <childnode refid="43701" relation="include">
        </childnode>
        <childnode refid="43704" relation="include">
        </childnode>
        <childnode refid="43733" relation="include">
        </childnode>
        <childnode refid="43736" relation="include">
        </childnode>
        <childnode refid="43737" relation="include">
        </childnode>
        <childnode refid="43753" relation="include">
        </childnode>
      </node>
      <node id="43773">
        <label>iterator</label>
      </node>
      <node id="43723">
        <label>AMReX_Box.H</label>
        <link refid="AMReX__Box_8H"/>
        <childnode refid="43676" relation="include">
        </childnode>
        <childnode refid="43724" relation="include">
        </childnode>
        <childnode refid="43721" relation="include">
        </childnode>
        <childnode refid="43702" relation="include">
        </childnode>
        <childnode refid="43684" relation="include">
        </childnode>
        <childnode refid="43725" relation="include">
        </childnode>
        <childnode refid="43727" relation="include">
        </childnode>
        <childnode refid="43728" relation="include">
        </childnode>
        <childnode refid="43703" relation="include">
        </childnode>
        <childnode refid="43716" relation="include">
        </childnode>
        <childnode refid="43729" relation="include">
        </childnode>
        <childnode refid="43710" relation="include">
        </childnode>
        <childnode refid="43679" relation="include">
        </childnode>
        <childnode refid="43719" relation="include">
        </childnode>
      </node>
      <node id="43691">
        <label>float.h</label>
      </node>
      <node id="43762">
        <label>AMReX_GpuUtility.H</label>
        <link refid="AMReX__GpuUtility_8H"/>
        <childnode refid="43676" relation="include">
        </childnode>
        <childnode refid="43679" relation="include">
        </childnode>
        <childnode refid="43720" relation="include">
        </childnode>
        <childnode refid="43719" relation="include">
        </childnode>
        <childnode refid="43741" relation="include">
        </childnode>
        <childnode refid="43687" relation="include">
        </childnode>
        <childnode refid="43690" relation="include">
        </childnode>
        <childnode refid="43688" relation="include">
        </childnode>
        <childnode refid="43716" relation="include">
        </childnode>
        <childnode refid="43729" relation="include">
        </childnode>
        <childnode refid="43695" relation="include">
        </childnode>
        <childnode refid="43693" relation="include">
        </childnode>
        <childnode refid="43755" relation="include">
        </childnode>
      </node>
      <node id="43735">
        <label>cstdint</label>
      </node>
      <node id="43749">
        <label>AMReX_DistributionMapping.H</label>
        <link refid="AMReX__DistributionMapping_8H"/>
        <childnode refid="43676" relation="include">
        </childnode>
        <childnode refid="43743" relation="include">
        </childnode>
        <childnode refid="43674" relation="include">
        </childnode>
        <childnode refid="43699" relation="include">
        </childnode>
        <childnode refid="43700" relation="include">
        </childnode>
        <childnode refid="43695" relation="include">
        </childnode>
        <childnode refid="43678" relation="include">
        </childnode>
        <childnode refid="43716" relation="include">
        </childnode>
        <childnode refid="43710" relation="include">
        </childnode>
        <childnode refid="43723" relation="include">
        </childnode>
        <childnode refid="43690" relation="include">
        </childnode>
        <childnode refid="43712" relation="include">
        </childnode>
      </node>
      <node id="43761">
        <label>AMReX_Functional.H</label>
        <link refid="AMReX__Functional_8H"/>
        <childnode refid="43676" relation="include">
        </childnode>
        <childnode refid="43679" relation="include">
        </childnode>
      </node>
      <node id="43725">
        <label>AMReX_IntVect.H</label>
        <link refid="AMReX__IntVect_8H"/>
        <childnode refid="43676" relation="include">
        </childnode>
        <childnode refid="43688" relation="include">
        </childnode>
        <childnode refid="43684" relation="include">
        </childnode>
        <childnode refid="43703" relation="include">
        </childnode>
        <childnode refid="43716" relation="include">
        </childnode>
        <childnode refid="43710" relation="include">
        </childnode>
        <childnode refid="43722" relation="include">
        </childnode>
        <childnode refid="43677" relation="include">
        </childnode>
        <childnode refid="43687" relation="include">
        </childnode>
        <childnode refid="43679" relation="include">
        </childnode>
        <childnode refid="43692" relation="include">
        </childnode>
        <childnode refid="43724" relation="include">
        </childnode>
        <childnode refid="43694" relation="include">
        </childnode>
        <childnode refid="43693" relation="include">
        </childnode>
        <childnode refid="43674" relation="include">
        </childnode>
        <childnode refid="43726" relation="include">
        </childnode>
        <childnode refid="43711" relation="include">
        </childnode>
      </node>
      <node id="43678">
        <label>AMReX.H</label>
        <link refid="AMReX_8H"/>
        <childnode refid="43676" relation="include">
        </childnode>
        <childnode refid="43679" relation="include">
        </childnode>
        <childnode refid="43680" relation="include">
        </childnode>
        <childnode refid="43682" relation="include">
        </childnode>
        <childnode refid="43684" relation="include">
        </childnode>
        <childnode refid="43685" relation="include">
        </childnode>
        <childnode refid="43687" relation="include">
        </childnode>
        <childnode refid="43688" relation="include">
        </childnode>
        <childnode refid="43690" relation="include">
        </childnode>
        <childnode refid="43692" relation="include">
        </childnode>
        <childnode refid="43695" relation="include">
        </childnode>
        <childnode refid="43696" relation="include">
        </childnode>
        <childnode refid="43697" relation="include">
        </childnode>
        <childnode refid="43681" relation="include">
        </childnode>
        <childnode refid="43698" relation="include">
        </childnode>
        <childnode refid="43699" relation="include">
        </childnode>
      </node>
      <node id="43680">
        <label>AMReX_GpuPrint.H</label>
        <link refid="AMReX__GpuPrint_8H"/>
        <childnode refid="43676" relation="include">
        </childnode>
        <childnode refid="43681" relation="include">
        </childnode>
      </node>
      <node id="43768">
        <label>AMReX_GpuLaunchFunctsC.H</label>
        <link refid="AMReX__GpuLaunchFunctsC_8H"/>
        <childnode refid="43676" relation="include">
        </childnode>
      </node>
      <node id="43752">
        <label>AMReX_GpuError.H</label>
        <link refid="AMReX__GpuError_8H"/>
        <childnode refid="43676" relation="include">
        </childnode>
        <childnode refid="43742" relation="include">
        </childnode>
        <childnode refid="43697" relation="include">
        </childnode>
      </node>
      <node id="43710">
        <label>AMReX_Vector.H</label>
        <link refid="AMReX__Vector_8H"/>
        <childnode refid="43676" relation="include">
        </childnode>
        <childnode refid="43711" relation="include">
        </childnode>
        <childnode refid="43698" relation="include">
        </childnode>
        <childnode refid="43699" relation="include">
        </childnode>
        <childnode refid="43677" relation="include">
        </childnode>
        <childnode refid="43687" relation="include">
        </childnode>
        <childnode refid="43688" relation="include">
        </childnode>
      </node>
      <node id="43704">
        <label>AMReX_Print.H</label>
        <link refid="AMReX__Print_8H"/>
        <childnode refid="43676" relation="include">
        </childnode>
        <childnode refid="43705" relation="include">
        </childnode>
        <childnode refid="43706" relation="include">
        </childnode>
        <childnode refid="43707" relation="include">
        </childnode>
        <childnode refid="43708" relation="include">
        </childnode>
        <childnode refid="43678" relation="include">
        </childnode>
        <childnode refid="43709" relation="include">
        </childnode>
        <childnode refid="43712" relation="include">
        </childnode>
      </node>
      <node id="43693">
        <label>cmath</label>
      </node>
      <node id="43683">
        <label>cassert</label>
      </node>
      <node id="43686">
        <label>stdexcept</label>
      </node>
      <node id="43731">
        <label>numeric</label>
      </node>
      <node id="43701">
        <label>AMReX_BLFort.H</label>
        <link refid="AMReX__BLFort_8H"/>
        <childnode refid="43676" relation="include">
        </childnode>
        <childnode refid="43688" relation="include">
        </childnode>
        <childnode refid="43702" relation="include">
        </childnode>
        <childnode refid="43690" relation="include">
        </childnode>
        <childnode refid="43703" relation="include">
        </childnode>
      </node>
      <node id="43763">
        <label>AMReX_Tuple.H</label>
        <link refid="AMReX__Tuple_8H"/>
        <childnode refid="43676" relation="include">
        </childnode>
        <childnode refid="43717" relation="include">
        </childnode>
        <childnode refid="43764" relation="include">
        </childnode>
        <childnode refid="43696" relation="include">
        </childnode>
        <childnode refid="43718" relation="include">
        </childnode>
        <childnode refid="43708" relation="include">
        </childnode>
        <childnode refid="43740" relation="include">
        </childnode>
        <childnode refid="43765" relation="include">
        </childnode>
        <childnode refid="43761" relation="include">
        </childnode>
        <childnode refid="43679" relation="include">
        </childnode>
      </node>
      <node id="43748">
        <label>AMReX_BoxList.H</label>
        <link refid="AMReX__BoxList_8H"/>
        <childnode refid="43676" relation="include">
        </childnode>
        <childnode refid="43724" relation="include">
        </childnode>
        <childnode refid="43725" relation="include">
        </childnode>
        <childnode refid="43727" relation="include">
        </childnode>
        <childnode refid="43723" relation="include">
        </childnode>
        <childnode refid="43716" relation="include">
        </childnode>
        <childnode refid="43710" relation="include">
        </childnode>
      </node>
      <node id="43697">
        <label>string</label>
      </node>
      <node id="43766">
        <label>AMReX_Loop.H</label>
        <link refid="AMReX__Loop_8H"/>
        <childnode refid="43676" relation="include">
        </childnode>
        <childnode refid="43723" relation="include">
        </childnode>
      </node>
      <node id="43743">
        <label>map</label>
      </node>
      <node id="43733">
        <label>AMReX_Random.H</label>
        <link refid="AMReX__Random_8H"/>
        <childnode refid="43676" relation="include">
        </childnode>
        <childnode refid="43678" relation="include">
        </childnode>
        <childnode refid="43679" relation="include">
        </childnode>
        <childnode refid="43712" relation="include">
        </childnode>
        <childnode refid="43734" relation="include">
        </childnode>
        <childnode refid="43674" relation="include">
        </childnode>
        <childnode refid="43735" relation="include">
        </childnode>
      </node>
      <node id="43765">
        <label>AMReX_IndexSequence.H</label>
        <link refid="AMReX__IndexSequence_8H"/>
        <childnode refid="43676" relation="include">
        </childnode>
        <childnode refid="43708" relation="include">
        </childnode>
      </node>
      <node id="43745">
        <label>cfloat</label>
      </node>
      <node id="43706">
        <label>fstream</label>
      </node>
      <node id="43736">
        <label>AMReX_BlockMutex.H</label>
        <link refid="AMReX__BlockMutex_8H"/>
        <childnode refid="43676" relation="include">
        </childnode>
        <childnode refid="43737" relation="include">
        </childnode>
      </node>
      <node id="43702">
        <label>AMReX_ArrayLim.H</label>
        <link refid="AMReX__ArrayLim_8H"/>
        <childnode refid="43676" relation="include">
        </childnode>
        <childnode refid="43690" relation="include">
        </childnode>
      </node>
      <node id="43716">
        <label>AMReX_Array.H</label>
        <link refid="AMReX__Array_8H"/>
        <childnode refid="43676" relation="include">
        </childnode>
        <childnode refid="43717" relation="include">
        </childnode>
        <childnode refid="43699" relation="include">
        </childnode>
        <childnode refid="43708" relation="include">
        </childnode>
        <childnode refid="43697" relation="include">
        </childnode>
        <childnode refid="43695" relation="include">
        </childnode>
        <childnode refid="43705" relation="include">
        </childnode>
        <childnode refid="43681" relation="include">
        </childnode>
        <childnode refid="43718" relation="include">
        </childnode>
        <childnode refid="43678" relation="include">
        </childnode>
        <childnode refid="43679" relation="include">
        </childnode>
        <childnode refid="43719" relation="include">
        </childnode>
        <childnode refid="43677" relation="include">
        </childnode>
        <childnode refid="43703" relation="include">
        </childnode>
        <childnode refid="43690" relation="include">
        </childnode>
        <childnode refid="43721" relation="include">
        </childnode>
        <childnode refid="43722" relation="include">
        </childnode>
      </node>
      <node id="43759">
        <label>AMReX_GpuReduce.H</label>
        <link refid="AMReX__GpuReduce_8H"/>
        <childnode refid="43676" relation="include">
        </childnode>
        <childnode refid="43679" relation="include">
        </childnode>
        <childnode refid="43719" relation="include">
        </childnode>
        <childnode refid="43720" relation="include">
        </childnode>
        <childnode refid="43760" relation="include">
        </childnode>
        <childnode refid="43762" relation="include">
        </childnode>
        <childnode refid="43761" relation="include">
        </childnode>
      </node>
      <node id="43703">
        <label>AMReX_SPACE.H</label>
        <link refid="AMReX__SPACE_8H"/>
        <childnode refid="43676" relation="include">
        </childnode>
      </node>
      <node id="43734">
        <label>AMReX_RandomEngine.H</label>
        <link refid="AMReX__RandomEngine_8H"/>
        <childnode refid="43676" relation="include">
        </childnode>
        <childnode refid="43679" relation="include">
        </childnode>
        <childnode refid="43687" relation="include">
        </childnode>
      </node>
      <node id="43720">
        <label>AMReX_GpuTypes.H</label>
        <link refid="AMReX__GpuTypes_8H"/>
        <childnode refid="43676" relation="include">
        </childnode>
      </node>
      <node id="43687">
        <label>AMReX_Extension.H</label>
        <link refid="AMReX__Extension_8H"/>
        <childnode refid="43676" relation="include">
        </childnode>
      </node>
      <node id="43771">
        <label>AMReX_GpuAllocators.H</label>
        <link refid="AMReX__GpuAllocators_8H"/>
        <childnode refid="43676" relation="include">
        </childnode>
        <childnode refid="43743" relation="include">
        </childnode>
        <childnode refid="43699" relation="include">
        </childnode>
        <childnode refid="43674" relation="include">
        </childnode>
        <childnode refid="43718" relation="include">
        </childnode>
        <childnode refid="43704" relation="include">
        </childnode>
        <childnode refid="43675" relation="include">
        </childnode>
        <childnode refid="43741" relation="include">
        </childnode>
      </node>
      <node id="43756">
        <label>AMReX_GpuLaunch.H</label>
        <link refid="AMReX__GpuLaunch_8H"/>
        <childnode refid="43676" relation="include">
        </childnode>
        <childnode refid="43679" relation="include">
        </childnode>
        <childnode refid="43738" relation="include">
        </childnode>
        <childnode refid="43719" relation="include">
        </childnode>
        <childnode refid="43720" relation="include">
        </childnode>
        <childnode refid="43752" relation="include">
        </childnode>
        <childnode refid="43757" relation="include">
        </childnode>
        <childnode refid="43741" relation="include">
        </childnode>
        <childnode refid="43758" relation="include">
        </childnode>
        <childnode refid="43759" relation="include">
        </childnode>
        <childnode refid="43739" relation="include">
        </childnode>
        <childnode refid="43763" relation="include">
        </childnode>
        <childnode refid="43723" relation="include">
        </childnode>
        <childnode refid="43766" relation="include">
        </childnode>
        <childnode refid="43687" relation="include">
        </childnode>
        <childnode refid="43677" relation="include">
        </childnode>
        <childnode refid="43740" relation="include">
        </childnode>
        <childnode refid="43754" relation="include">
        </childnode>
        <childnode refid="43734" relation="include">
        </childnode>
        <childnode refid="43721" relation="include">
        </childnode>
        <childnode refid="43700" relation="include">
        </childnode>
        <childnode refid="43674" relation="include">
        </childnode>
        <childnode refid="43711" relation="include">
        </childnode>
        <childnode refid="43708" relation="include">
        </childnode>
        <childnode refid="43767" relation="include">
        </childnode>
        <childnode refid="43768" relation="include">
        </childnode>
      </node>
      <node id="43673">
        <label>random</label>
      </node>
      <node id="43751">
        <label>sys/types.h</label>
      </node>
      <node id="43730">
        <label>typeinfo</label>
      </node>
      <node id="43676">
        <label>AMReX_Config.H</label>
      </node>
      <node id="43681">
        <label>cstdio</label>
      </node>
      <node id="43740">
        <label>AMReX_TypeTraits.H</label>
        <link refid="AMReX__TypeTraits_8H"/>
        <childnode refid="43676" relation="include">
        </childnode>
        <childnode refid="43718" relation="include">
        </childnode>
        <childnode refid="43687" relation="include">
        </childnode>
      </node>
      <node id="43719">
        <label>AMReX_GpuControl.H</label>
        <link refid="AMReX__GpuControl_8H"/>
        <childnode refid="43676" relation="include">
        </childnode>
        <childnode refid="43679" relation="include">
        </childnode>
        <childnode refid="43720" relation="include">
        </childnode>
      </node>
      <node id="43764">
        <label>tuple</label>
      </node>
      <node id="43713">
        <label>AMReX_BLBackTrace.H</label>
        <link refid="AMReX__BLBackTrace_8H"/>
        <childnode refid="43676" relation="include">
        </childnode>
        <childnode refid="43714" relation="include">
        </childnode>
        <childnode refid="43697" relation="include">
        </childnode>
        <childnode refid="43708" relation="include">
        </childnode>
        <childnode refid="43705" relation="include">
        </childnode>
        <childnode refid="43681" relation="include">
        </childnode>
        <childnode refid="43694" relation="include">
        </childnode>
      </node>
      <node id="43775">
        <label>AMReX_Scan.H</label>
        <link refid="AMReX__Scan_8H"/>
        <childnode refid="43676" relation="include">
        </childnode>
        <childnode refid="43737" relation="include">
        </childnode>
        <childnode refid="43675" relation="include">
        </childnode>
        <childnode refid="43735" relation="include">
        </childnode>
        <childnode refid="43718" relation="include">
        </childnode>
      </node>
      <node id="43750">
        <label>AMReX_FileSystem.H</label>
        <link refid="AMReX__FileSystem_8H"/>
        <childnode refid="43676" relation="include">
        </childnode>
        <childnode refid="43697" relation="include">
        </childnode>
        <childnode refid="43751" relation="include">
        </childnode>
      </node>
      <node id="43714">
        <label>stack</label>
      </node>
      <node id="43698">
        <label>vector</label>
      </node>
      <node id="43677">
        <label>AMReX_BLassert.H</label>
        <link refid="AMReX__BLassert_8H"/>
        <childnode refid="43676" relation="include">
        </childnode>
        <childnode refid="43678" relation="include">
        </childnode>
      </node>
      <node id="43692">
        <label>AMReX_Math.H</label>
        <link refid="AMReX__Math_8H"/>
        <childnode refid="43676" relation="include">
        </childnode>
        <childnode refid="43679" relation="include">
        </childnode>
        <childnode refid="43687" relation="include">
        </childnode>
        <childnode refid="43693" relation="include">
        </childnode>
        <childnode refid="43694" relation="include">
        </childnode>
      </node>
      <node id="43679">
        <label>AMReX_GpuQualifiers.H</label>
        <link refid="AMReX__GpuQualifiers_8H"/>
        <childnode refid="43676" relation="include">
        </childnode>
      </node>
      <node id="43708">
        <label>utility</label>
      </node>
      <node id="43717">
        <label>array</label>
      </node>
      <node id="43705">
        <label>sstream</label>
      </node>
      <node id="43685">
        <label>AMReX_Exception.H</label>
        <link refid="AMReX__Exception_8H"/>
        <childnode refid="43676" relation="include">
        </childnode>
        <childnode refid="43686" relation="include">
        </childnode>
      </node>
      <node id="43721">
        <label>AMReX_Algorithm.H</label>
        <link refid="AMReX__Algorithm_8H"/>
        <childnode refid="43676" relation="include">
        </childnode>
        <childnode refid="43711" relation="include">
        </childnode>
        <childnode refid="43679" relation="include">
        </childnode>
        <childnode refid="43687" relation="include">
        </childnode>
        <childnode refid="43722" relation="include">
        </childnode>
        <childnode refid="43677" relation="include">
        </childnode>
      </node>
      <node id="43688">
        <label>AMReX_INT.H</label>
        <link refid="AMReX__INT_8H"/>
        <childnode refid="43676" relation="include">
        </childnode>
        <childnode refid="43689" relation="include">
        </childnode>
      </node>
      <node id="43738">
        <label>AMReX_GpuKernelInfo.H</label>
        <link refid="AMReX__GpuKernelInfo_8H"/>
        <childnode refid="43676" relation="include">
        </childnode>
      </node>
      <node id="43757">
        <label>AMReX_GpuRange.H</label>
        <link refid="AMReX__GpuRange_8H"/>
        <childnode refid="43676" relation="include">
        </childnode>
        <childnode refid="43679" relation="include">
        </childnode>
        <childnode refid="43719" relation="include">
        </childnode>
        <childnode refid="43752" relation="include">
        </childnode>
        <childnode refid="43723" relation="include">
        </childnode>
        <childnode refid="43740" relation="include">
        </childnode>
      </node>
      <node id="43712">
        <label>AMReX_ParallelDescriptor.H</label>
        <link refid="AMReX__ParallelDescriptor_8H"/>
        <childnode refid="43676" relation="include">
        </childnode>
        <childnode refid="43684" relation="include">
        </childnode>
        <childnode refid="43709" relation="include">
        </childnode>
        <childnode refid="43713" relation="include">
        </childnode>
        <childnode refid="43715" relation="include">
        </childnode>
        <childnode refid="43677" relation="include">
        </childnode>
        <childnode refid="43688" relation="include">
        </childnode>
        <childnode refid="43690" relation="include">
        </childnode>
        <childnode refid="43716" relation="include">
        </childnode>
        <childnode refid="43710" relation="include">
        </childnode>
        <childnode refid="43723" relation="include">
        </childnode>
        <childnode refid="43695" relation="include">
        </childnode>
        <childnode refid="43698" relation="include">
        </childnode>
        <childnode refid="43697" relation="include">
        </childnode>
        <childnode refid="43730" relation="include">
        </childnode>
        <childnode refid="43711" relation="include">
        </childnode>
        <childnode refid="43696" relation="include">
        </childnode>
        <childnode refid="43674" relation="include">
        </childnode>
        <childnode refid="43731" relation="include">
        </childnode>
        <childnode refid="43732" relation="include">
        </childnode>
      </node>
      <node id="43742">
        <label>AMReX_Utility.H</label>
        <link refid="AMReX__Utility_8H"/>
        <childnode refid="43676" relation="include">
        </childnode>
        <childnode refid="43694" relation="include">
        </childnode>
        <childnode refid="43695" relation="include">
        </childnode>
        <childnode refid="43705" relation="include">
        </childnode>
        <childnode refid="43697" relation="include">
        </childnode>
        <childnode refid="43743" relation="include">
        </childnode>
        <childnode refid="43744" relation="include">
        </childnode>
        <childnode refid="43718" relation="include">
        </childnode>
        <childnode refid="43726" relation="include">
        </childnode>
        <childnode refid="43674" relation="include">
        </childnode>
        <childnode refid="43745" relation="include">
        </childnode>
        <childnode refid="43677" relation="include">
        </childnode>
        <childnode refid="43690" relation="include">
        </childnode>
        <childnode refid="43688" relation="include">
        </childnode>
        <childnode refid="43716" relation="include">
        </childnode>
        <childnode refid="43710" relation="include">
        </childnode>
        <childnode refid="43723" relation="include">
        </childnode>
        <childnode refid="43746" relation="include">
        </childnode>
        <childnode refid="43749" relation="include">
        </childnode>
        <childnode refid="43712" relation="include">
        </childnode>
        <childnode refid="43733" relation="include">
        </childnode>
        <childnode refid="43679" relation="include">
        </childnode>
        <childnode refid="43750" relation="include">
        </childnode>
      </node>
      <node id="43675">
        <label>AMReX_Arena.H</label>
        <link refid="AMReX__Arena_8H"/>
        <childnode refid="43676" relation="include">
        </childnode>
        <childnode refid="43677" relation="include">
        </childnode>
        <childnode refid="43700" relation="include">
        </childnode>
        <childnode refid="43694" relation="include">
        </childnode>
      </node>
      <node id="43728">
        <label>AMReX_Orientation.H</label>
        <link refid="AMReX__Orientation_8H"/>
        <childnode refid="43676" relation="include">
        </childnode>
        <childnode refid="43724" relation="include">
        </childnode>
        <childnode refid="43677" relation="include">
        </childnode>
        <childnode refid="43703" relation="include">
        </childnode>
        <childnode refid="43679" relation="include">
        </childnode>
      </node>
      <node id="43722">
        <label>AMReX_Dim3.H</label>
        <link refid="AMReX__Dim3_8H"/>
        <childnode refid="43676" relation="include">
        </childnode>
        <childnode refid="43695" relation="include">
        </childnode>
        <childnode refid="43690" relation="include">
        </childnode>
        <childnode refid="43679" relation="include">
        </childnode>
      </node>
      <node id="43724">
        <label>iosfwd</label>
      </node>
      <node id="43694">
        <label>cstdlib</label>
      </node>
      <node id="43695">
        <label>iostream</label>
      </node>
      <node id="43727">
        <label>AMReX_IndexType.H</label>
        <link refid="AMReX__IndexType_8H"/>
        <childnode refid="43676" relation="include">
        </childnode>
        <childnode refid="43724" relation="include">
        </childnode>
        <childnode refid="43684" relation="include">
        </childnode>
        <childnode refid="43725" relation="include">
        </childnode>
        <childnode refid="43703" relation="include">
        </childnode>
      </node>
      <node id="43729">
        <label>AMReX_Array4.H</label>
        <link refid="AMReX__Array4_8H"/>
        <childnode refid="43676" relation="include">
        </childnode>
        <childnode refid="43725" relation="include">
        </childnode>
        <childnode refid="43680" relation="include">
        </childnode>
      </node>
      <node id="43700">
        <label>cstddef</label>
      </node>
      <node id="43747">
        <label>unordered_map</label>
      </node>
      <node id="43774">
        <label>AMReX_PODVector.H</label>
        <link refid="AMReX__PODVector_8H"/>
        <childnode refid="43676" relation="include">
        </childnode>
        <childnode refid="43740" relation="include">
        </childnode>
        <childnode refid="43737" relation="include">
        </childnode>
        <childnode refid="43771" relation="include">
        </childnode>
        <childnode refid="43772" relation="include">
        </childnode>
        <childnode refid="43741" relation="include">
        </childnode>
        <childnode refid="43718" relation="include">
        </childnode>
        <childnode refid="43708" relation="include">
        </childnode>
        <childnode refid="43699" relation="include">
        </childnode>
        <childnode refid="43755" relation="include">
        </childnode>
      </node>
      <node id="43737">
        <label>AMReX_Gpu.H</label>
        <link refid="AMReX__Gpu_8H"/>
        <childnode refid="43676" relation="include">
        </childnode>
        <childnode refid="43679" relation="include">
        </childnode>
        <childnode refid="43738" relation="include">
        </childnode>
        <childnode refid="43680" relation="include">
        </childnode>
        <childnode refid="43682" relation="include">
        </childnode>
        <childnode refid="43720" relation="include">
        </childnode>
        <childnode refid="43719" relation="include">
        </childnode>
        <childnode refid="43739" relation="include">
        </childnode>
        <childnode refid="43756" relation="include">
        </childnode>
        <childnode refid="43752" relation="include">
        </childnode>
        <childnode refid="43760" relation="include">
        </childnode>
        <childnode refid="43762" relation="include">
        </childnode>
        <childnode refid="43741" relation="include">
        </childnode>
        <childnode refid="43769" relation="include">
        </childnode>
        <childnode refid="43770" relation="include">
        </childnode>
        <childnode refid="43758" relation="include">
        </childnode>
        <childnode refid="43757" relation="include">
        </childnode>
        <childnode refid="43759" relation="include">
        </childnode>
        <childnode refid="43771" relation="include">
        </childnode>
        <childnode refid="43772" relation="include">
        </childnode>
        <childnode refid="43776" relation="include">
        </childnode>
      </node>
      <node id="43726">
        <label>climits</label>
      </node>
      <node id="43776">
        <label>AMReX_CudaGraph.H</label>
        <link refid="AMReX__CudaGraph_8H"/>
        <childnode refid="43676" relation="include">
        </childnode>
      </node>
      <node id="43744">
        <label>chrono</label>
      </node>
      <node id="43767">
        <label>AMReX_GpuLaunchMacrosC.H</label>
        <link refid="AMReX__GpuLaunchMacrosC_8H"/>
        <childnode refid="43676" relation="include">
        </childnode>
      </node>
      <node id="43732">
        <label>csignal</label>
      </node>
      <node id="43739">
        <label>AMReX_GpuFuse.H</label>
        <link refid="AMReX__GpuFuse_8H"/>
        <childnode refid="43676" relation="include">
        </childnode>
        <childnode refid="43675" relation="include">
        </childnode>
        <childnode refid="43710" relation="include">
        </childnode>
        <childnode refid="43723" relation="include">
        </childnode>
        <childnode refid="43740" relation="include">
        </childnode>
        <childnode refid="43741" relation="include">
        </childnode>
        <childnode refid="43754" relation="include">
        </childnode>
        <childnode refid="43755" relation="include">
        </childnode>
        <childnode refid="43699" relation="include">
        </childnode>
      </node>
      <node id="43754">
        <label>AMReX_GpuLaunchGlobal.H</label>
        <link refid="AMReX__GpuLaunchGlobal_8H"/>
        <childnode refid="43676" relation="include">
        </childnode>
        <childnode refid="43679" relation="include">
        </childnode>
      </node>
      <node id="43718">
        <label>type_traits</label>
      </node>
      <node id="43672">
        <label>set</label>
      </node>
      <node id="43684">
        <label>AMReX_ccse-mpi.H</label>
        <link refid="AMReX__ccse-mpi_8H"/>
        <childnode refid="43676" relation="include">
        </childnode>
      </node>
      <node id="43770">
        <label>AMReX_GpuElixir.H</label>
        <link refid="AMReX__GpuElixir_8H"/>
        <childnode refid="43676" relation="include">
        </childnode>
        <childnode refid="43675" relation="include">
        </childnode>
      </node>
      <node id="43711">
        <label>algorithm</label>
      </node>
      <node id="43741">
        <label>AMReX_GpuDevice.H</label>
        <link refid="AMReX__GpuDevice_8H"/>
        <childnode refid="43676" relation="include">
        </childnode>
        <childnode refid="43694" relation="include">
        </childnode>
        <childnode refid="43699" relation="include">
        </childnode>
        <childnode refid="43717" relation="include">
        </childnode>
        <childnode refid="43678" relation="include">
        </childnode>
        <childnode refid="43742" relation="include">
        </childnode>
        <childnode refid="43720" relation="include">
        </childnode>
        <childnode refid="43752" relation="include">
        </childnode>
        <childnode refid="43719" relation="include">
        </childnode>
        <childnode refid="43753" relation="include">
        </childnode>
        <childnode refid="43710" relation="include">
        </childnode>
      </node>
      <node id="43682">
        <label>AMReX_GpuAssert.H</label>
        <link refid="AMReX__GpuAssert_8H"/>
        <childnode refid="43676" relation="include">
        </childnode>
        <childnode refid="43683" relation="include">
        </childnode>
      </node>
      <node id="43760">
        <label>AMReX_GpuAtomic.H</label>
        <link refid="AMReX__GpuAtomic_8H"/>
        <childnode refid="43676" relation="include">
        </childnode>
        <childnode refid="43679" relation="include">
        </childnode>
        <childnode refid="43761" relation="include">
        </childnode>
      </node>
      <node id="43755">
        <label>cstring</label>
      </node>
      <node id="43699">
        <label>memory</label>
      </node>
      <node id="43769">
        <label>AMReX_GpuAsyncArray.H</label>
        <link refid="AMReX__GpuAsyncArray_8H"/>
        <childnode refid="43676" relation="include">
        </childnode>
        <childnode refid="43700" relation="include">
        </childnode>
        <childnode refid="43755" relation="include">
        </childnode>
        <childnode refid="43694" relation="include">
        </childnode>
        <childnode refid="43699" relation="include">
        </childnode>
        <childnode refid="43675" relation="include">
        </childnode>
        <childnode refid="43740" relation="include">
        </childnode>
        <childnode refid="43741" relation="include">
        </childnode>
      </node>
      <node id="43689">
        <label>inttypes.h</label>
      </node>
      <node id="43758">
        <label>AMReX_GpuMemory.H</label>
        <link refid="AMReX__GpuMemory_8H"/>
        <childnode refid="43676" relation="include">
        </childnode>
        <childnode refid="43679" relation="include">
        </childnode>
        <childnode refid="43719" relation="include">
        </childnode>
        <childnode refid="43741" relation="include">
        </childnode>
        <childnode refid="43740" relation="include">
        </childnode>
        <childnode refid="43675" relation="include">
        </childnode>
        <childnode refid="43694" relation="include">
        </childnode>
      </node>
      <node id="43690">
        <label>AMReX_REAL.H</label>
        <link refid="AMReX__REAL_8H"/>
        <childnode refid="43676" relation="include">
        </childnode>
        <childnode refid="43687" relation="include">
        </childnode>
        <childnode refid="43691" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="AMReX__Random_8cpp_1a7149b75200fd1c2399da882ca3a148bb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BL_FORT_PROC_DECL</definition>
        <argsstring>(BLUTILINITRAND, blutilinitrand)(const int *sd)</argsstring>
        <name>BL_FORT_PROC_DECL</name>
        <param>
          <type>BLUTILINITRAND</type>
        </param>
        <param>
          <type>blutilinitrand</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Random.cpp" line="409" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Random.cpp" bodystart="409" bodyend="413"/>
      </memberdef>
      <memberdef kind="function" id="AMReX__Random_8cpp_1a5eda724d6b6a9ddba6328fc28698964c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BL_FORT_PROC_DECL</definition>
        <argsstring>(BLINITRAND, blinitrand)(const int *sd)</argsstring>
        <name>BL_FORT_PROC_DECL</name>
        <param>
          <type>BLINITRAND</type>
        </param>
        <param>
          <type>blinitrand</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Random.cpp" line="415" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Random.cpp" bodystart="415" bodyend="419"/>
      </memberdef>
      <memberdef kind="function" id="AMReX__Random_8cpp_1a12c16cae3c80d3004856c006d2a4a2a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BL_FORT_PROC_DECL</definition>
        <argsstring>(BLUTILRAND, blutilrand)(amrex</argsstring>
        <name>BL_FORT_PROC_DECL</name>
        <param>
          <type>BLUTILRAND</type>
        </param>
        <param>
          <type>blutilrand</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Random.cpp" line="421" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Random.cpp" bodystart="421" bodyend="424"/>
      </memberdef>
      <memberdef kind="function" id="AMReX__Random_8cpp_1af7786727a4dfac68a7b0bcf67f62f61e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double amrex_random</definition>
        <argsstring>()</argsstring>
        <name>amrex_random</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Random.cpp" line="428" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Random.cpp" bodystart="428" bodyend="431"/>
      </memberdef>
      <memberdef kind="function" id="AMReX__Random_8cpp_1a61da6a9297e0e72c5db8a53520594ac5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>amrex::Long</type>
        <definition>amrex::Long amrex_random_int</definition>
        <argsstring>(amrex::Long n)</argsstring>
        <name>amrex_random_int</name>
        <param>
          <type>amrex::Long</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Random.cpp" line="434" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Random.cpp" bodystart="434" bodyend="437"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;set&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;random&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="AMReX__Arena_8H" kindref="compound">AMReX_Arena.H</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="AMReX__BLFort_8H" kindref="compound">AMReX_BLFort.H</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="AMReX__Print_8H" kindref="compound">AMReX_Print.H</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="AMReX__Random_8H" kindref="compound">AMReX_Random.H</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="AMReX__BlockMutex_8H" kindref="compound">AMReX_BlockMutex.H</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="AMReX__Gpu_8H" kindref="compound">AMReX_Gpu.H</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="AMReX__OpenMP_8H" kindref="compound">AMReX_OpenMP.H</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal">{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nthreads;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">amrex::Vector&lt;std::mt19937&gt;</ref><sp/>generators;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(AMREX_USE_CUDA)<sp/>||<sp/>defined(AMREX_USE_HIP)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__GpuQualifiers_8H_1a4e626ebf06898d71a9e0790877f1694f" kindref="member">AMREX_GPU_DEVICE</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gpu_nstates_d;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__GpuQualifiers_8H_1a4e626ebf06898d71a9e0790877f1694f" kindref="member">AMREX_GPU_DEVICE</ref><sp/>amrex::randState_t*<sp/>d_states_d_ptr;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>amrex::BlockMutex*<sp/>h_mutex_h_ptr<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>amrex::BlockMutex*<sp/>d_mutex_h_ptr<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__GpuQualifiers_8H_1a4e626ebf06898d71a9e0790877f1694f" kindref="member">AMREX_GPU_DEVICE</ref><sp/>amrex::BlockMutex*<sp/>d_mutex_d_ptr<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal">}</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>AMREX_USE_GPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceamrex" kindref="compound">amrex</ref><sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>AMREX_USE_DPCPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>dpcpp_rng_descr*<sp/>rand_engine_descr<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>amrex::randState_t*<sp/>d_states_h_ptr<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal">}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>AMREX_USE_GPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ResizeRandomSeed<sp/>()</highlight></codeline>
<codeline lineno="42"><highlight class="normal">{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a548fbd9b2cd72a927f463003f4adb0b1" kindref="member">BL_PROFILE</ref>(</highlight><highlight class="stringliteral">&quot;ResizeRandomSeed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceamrex" kindref="compound">amrex</ref>;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1abce0125a244f443854b1c4a2709c5990" kindref="member">DeallocateRandomSeedDevArray</ref>();</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N<sp/>=<sp/>Gpu::Device::maxBlocksPerLaunch()<sp/>*<sp/><ref refid="AMReX__GpuControl_8H_1a2e7fcf2342ee5da11b271a774cf65388" kindref="member">AMREX_GPU_MAX_THREADS</ref>;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>AMREX_USE_DPCPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>rand_engine_descr<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>dpcpp_rng_descr</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(Gpu::Device::nullQueue(),<sp/>sycl::range&lt;1&gt;(N),</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a33162ef233c092e9e6fd75ab291b9b29" kindref="member">ParallelDescriptor::MyProc</ref>()*1234567ULL<sp/>+<sp/>12345ULL,<sp/>1);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(AMREX_USE_CUDA)<sp/>||<sp/>defined(AMREX_USE_HIP)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>d_states_h_ptr<sp/>=<sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">randState_t*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="namespaceamrex_1ae3d1414946b992f39ca41f135f12a0d1" kindref="member">The_Arena</ref>()-&gt;<ref refid="classamrex_1_1Arena_1a46ce2cd5cfc039cec64548b031fbde2e" kindref="member">alloc</ref>(N*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(randState_t)));</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>h_mutex_h_ptr<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>amrex::BlockMutex(N);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>d_mutex_h_ptr<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">amrex::BlockMutex*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal"><sp/>(<ref refid="namespaceamrex_1ae3d1414946b992f39ca41f135f12a0d1" kindref="member">The_Arena</ref>()-&gt;<ref refid="classamrex_1_1Arena_1a46ce2cd5cfc039cec64548b031fbde2e" kindref="member">alloc</ref>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(amrex::BlockMutex)));</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1ae243b10c65516ed7dfeaf9aed7e75aa3" kindref="member">amrex::Gpu::htod_memcpy</ref>(d_mutex_h_ptr,<sp/>h_mutex_h_ptr,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(amrex::BlockMutex));</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>randState_t*<sp/>d_states_h_ptr_local<sp/>=<sp/>d_states_h_ptr;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>amrex::BlockMutex*<sp/>d_mutex_h_ptr_local<sp/>=<sp/>d_mutex_h_ptr;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a3bddb069b268576e6fa712be45c218ae" kindref="member">amrex::single_task</ref>([=]<sp/><ref refid="AMReX__GpuQualifiers_8H_1a4e626ebf06898d71a9e0790877f1694f" kindref="member">AMREX_GPU_DEVICE</ref><sp/>()<sp/>noexcept</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d_states_d_ptr<sp/>=<sp/>d_states_h_ptr_local;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d_mutex_d_ptr<sp/>=<sp/>d_mutex_h_ptr_local;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gpu_nstates_d<sp/>=<sp/>N;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a33162ef233c092e9e6fd75ab291b9b29" kindref="member">MyProc</ref><sp/>=<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a33162ef233c092e9e6fd75ab291b9b29" kindref="member">amrex::ParallelDescriptor::MyProc</ref>();</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1aff9b2ebd167a621c7784769618bda4c6" kindref="member">amrex::ParallelFor</ref>(N,<sp/>[=]<sp/><ref refid="AMReX__GpuQualifiers_8H_1a4e626ebf06898d71a9e0790877f1694f" kindref="member">AMREX_GPU_DEVICE</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx)<sp/>noexcept</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>amrex::ULong<sp/>seed<sp/>=<sp/>MyProc*1234567ULL<sp/>+<sp/>12345ULL<sp/>;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>seqstart<sp/>=<sp/>idx<sp/>+<sp/>10<sp/>*<sp/>idx<sp/>;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__GpuControl_8H_1a0008c69fc4b1c0dff4da75ec778f4941" kindref="member">AMREX_HIP_OR_CUDA</ref>(<sp/>hiprand_init(seed,<sp/>seqstart,<sp/>0,<sp/>&amp;d_states_d_ptr[idx]);,</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curand_init(seed,<sp/>seqstart,<sp/>0,<sp/>&amp;d_states_d_ptr[idx]);<sp/>)</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1Gpu_1a0040af3e7783b853140a6e13c755fc25" kindref="member">Gpu::synchronize</ref>();</highlight></codeline>
<codeline lineno="86"><highlight class="normal">}</highlight></codeline>
<codeline lineno="87"><highlight class="normal">}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><ref refid="namespaceamrex_1ae9f820f5a65928568f3751fd584fa5ed" kindref="member">amrex::InitRandom</ref><sp/>(amrex::ULong<sp/>seed,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nprocs)</highlight></codeline>
<codeline lineno="92"><highlight class="normal">{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>nthreads<sp/>=<sp/><ref refid="namespaceamrex_1_1OpenMP_1ade36032ab5920b203a693a1cc44bd82a" kindref="member">OpenMP::get_max_threads</ref>();</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>generators.resize(nthreads);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_OPENMP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>omp<sp/>parallel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tid<sp/>=<sp/><ref refid="namespaceamrex_1_1OpenMP_1a27ed6354b68b2bd8721658a8779af032" kindref="member">OpenMP::get_thread_num</ref>();</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>amrex::ULong<sp/>init_seed<sp/>=<sp/>seed<sp/>+<sp/>tid*nprocs;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>generators[tid].seed(init_seed);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>AMREX_USE_GPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>ResizeRandomSeed();</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal">}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>AMREX_USE_GPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><ref refid="AMReX__GpuQualifiers_8H_1a4e626ebf06898d71a9e0790877f1694f" kindref="member">AMREX_GPU_DEVICE</ref></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>amrex::get_state<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tid)</highlight></codeline>
<codeline lineno="113"><highlight class="normal">{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>AMREX_USE_DPCPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="comment">//<sp/>xxxxx<sp/>DPCPP<sp/>todo</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a95b1159ba3a5494abd49dc9b3d34eacf" kindref="member">amrex::ignore_unused</ref>(tid);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>block<sp/>size<sp/>must<sp/>evenly<sp/>divide<sp/>#<sp/>of<sp/>RNG<sp/>states<sp/>so<sp/>we<sp/>cut<sp/>off<sp/>the<sp/>excess<sp/>states</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bsize<sp/>=<sp/>blockDim.x<sp/>*<sp/>blockDim.y<sp/>*<sp/>blockDim.z;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nstates<sp/>=<sp/>gpu_nstates_d<sp/>-<sp/>(gpu_nstates_d<sp/>%<sp/>bsize);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>tid<sp/>%<sp/>nstates;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>d_mutex_d_ptr-&gt;lock(i);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal">}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><ref refid="AMReX__GpuQualifiers_8H_1a4e626ebf06898d71a9e0790877f1694f" kindref="member">AMREX_GPU_DEVICE</ref></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>amrex::free_state<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tid)</highlight></codeline>
<codeline lineno="132"><highlight class="normal">{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>AMREX_USE_DPCPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a95b1159ba3a5494abd49dc9b3d34eacf" kindref="member">amrex::ignore_unused</ref>(tid);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="comment">//<sp/>xxxxx<sp/>DPCPP<sp/>todo</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bsize<sp/>=<sp/>blockDim.x<sp/>*<sp/>blockDim.y<sp/>*<sp/>blockDim.z;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nstates<sp/>=<sp/>gpu_nstates_d<sp/>-<sp/>(gpu_nstates_d<sp/>%<sp/>bsize);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>tid<sp/>%<sp/>nstates;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>d_mutex_d_ptr-&gt;unlock(i);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal">}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>AMREX_USE_CUDA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal">amrex::Real<sp/><ref refid="namespaceamrex_1a6a4ed5dc1eeb3e5b409eb8975c9e829b" kindref="member">amrex::RandomNormal</ref><sp/>(amrex::Real<sp/>mean,<sp/>amrex::Real<sp/>stddev)</highlight></codeline>
<codeline lineno="150"><highlight class="normal">{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>amrex::Real<sp/>rand;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__CUDA_ARCH__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blockId<sp/>=<sp/>blockIdx.x<sp/>+<sp/>blockIdx.y<sp/>*<sp/>gridDim.x<sp/>+<sp/>gridDim.x<sp/>*<sp/>gridDim.y<sp/>*<sp/>blockIdx.z;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tid<sp/>=<sp/>blockId<sp/>*<sp/>(blockDim.x<sp/>*<sp/>blockDim.y<sp/>*<sp/>blockDim.z)</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>(threadIdx.z<sp/>*<sp/>(blockDim.x<sp/>*<sp/>blockDim.y))</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>(threadIdx.y<sp/>*<sp/>blockDim.x)<sp/>+<sp/>threadIdx.x<sp/>;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>get_state(tid);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>BL_USE_FLOAT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>rand<sp/>=<sp/>stddev<sp/>*<sp/><sp/>curand_normal(&amp;d_states_d_ptr[i])<sp/>+<sp/>mean;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>rand<sp/>=<sp/>stddev<sp/>*<sp/><sp/>curand_normal_double(&amp;d_states_d_ptr[i])<sp/>+<sp/>mean;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>__threadfence();</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>free_state(tid);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>std::normal_distribution&lt;amrex::Real&gt;<sp/>distribution(mean,<sp/>stddev);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tid<sp/>=<sp/><ref refid="namespaceamrex_1_1OpenMP_1a27ed6354b68b2bd8721658a8779af032" kindref="member">OpenMP::get_thread_num</ref>();</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>rand<sp/>=<sp/>distribution(generators[tid]);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rand;</highlight></codeline>
<codeline lineno="176"><highlight class="normal">}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>AMREX_USE_CUDA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal">amrex::Real<sp/><ref refid="namespaceamrex_1a3ba29f87f49dfb416b85b65c8b5cd9c3" kindref="member">amrex::Random</ref><sp/>()</highlight></codeline>
<codeline lineno="182"><highlight class="normal">{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>amrex::Real<sp/>rand;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__CUDA_ARCH__)<sp/><sp/><sp/>//<sp/>on<sp/>the<sp/>device</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blockId<sp/>=<sp/>blockIdx.x<sp/>+<sp/>blockIdx.y<sp/>*<sp/>gridDim.x<sp/>+<sp/>gridDim.x<sp/>*<sp/>gridDim.y<sp/>*<sp/>blockIdx.z;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tid<sp/>=<sp/>blockId<sp/>*<sp/>(blockDim.x<sp/>*<sp/>blockDim.y<sp/>*<sp/>blockDim.z)</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>(threadIdx.z<sp/>*<sp/>(blockDim.x<sp/>*<sp/>blockDim.y))</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>(threadIdx.y<sp/>*<sp/>blockDim.x)<sp/>+<sp/>threadIdx.x<sp/>;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>get_state(tid);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>curand_uniform<sp/>generates<sp/>numbers<sp/>in<sp/>(0.0,1],<sp/>while</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::uniform_real_distribution<sp/>in<sp/>[0.0,<sp/>1.0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>BL_USE_FLOAT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>rand<sp/>=<sp/>1.0f<sp/>-<sp/>curand_uniform(&amp;d_states_d_ptr[i]);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>rand<sp/>=<sp/>1.0<sp/>-<sp/>curand_uniform_double(&amp;d_states_d_ptr[i]);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>__threadfence();</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>free_state(tid);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/><sp/><sp/><sp/><sp/>//<sp/>on<sp/>the<sp/>host</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uniform_real_distribution&lt;amrex::Real&gt;<sp/>distribution(0.0,<sp/>1.0);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tid<sp/>=<sp/><ref refid="namespaceamrex_1_1OpenMP_1a27ed6354b68b2bd8721658a8779af032" kindref="member">OpenMP::get_thread_num</ref>();</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>rand<sp/>=<sp/>distribution(generators[tid]);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rand;</highlight></codeline>
<codeline lineno="212"><highlight class="normal">}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>AMREX_USE_CUDA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1aadec079fd8e2cdca36f7f49355e33864" kindref="member">amrex::RandomPoisson</ref><sp/>(amrex::Real<sp/>lambda)</highlight></codeline>
<codeline lineno="218"><highlight class="normal">{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rand;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__CUDA_ARCH__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>blockId<sp/>=<sp/>blockIdx.x<sp/>+<sp/>blockIdx.y<sp/>*<sp/>gridDim.x<sp/>+<sp/>gridDim.x<sp/>*<sp/>gridDim.y<sp/>*<sp/>blockIdx.z;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tid<sp/>=<sp/>blockId<sp/>*<sp/>(blockDim.x<sp/>*<sp/>blockDim.y<sp/>*<sp/>blockDim.z)</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>(threadIdx.z<sp/>*<sp/>(blockDim.x<sp/>*<sp/>blockDim.y))</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>(threadIdx.y<sp/>*<sp/>blockDim.x)<sp/>+<sp/>threadIdx.x<sp/>;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>get_state(tid);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>rand<sp/>=<sp/>curand_poisson(&amp;d_states_d_ptr[i],<sp/>lambda);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>__threadfence();</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>free_state(tid);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>std::poisson_distribution&lt;unsigned<sp/>int&gt;<sp/>distribution(lambda);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tid<sp/>=<sp/><ref refid="namespaceamrex_1_1OpenMP_1a27ed6354b68b2bd8721658a8779af032" kindref="member">OpenMP::get_thread_num</ref>();</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>rand<sp/>=<sp/>distribution(generators[tid]);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rand;</highlight></codeline>
<codeline lineno="243"><highlight class="normal">}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>AMREX_USE_CUDA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a20796a80df81ee204983811cc8a1b705" kindref="member">amrex::Random_int</ref><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="249"><highlight class="normal">{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__CUDA_ARCH__)<sp/><sp/>//<sp/>on<sp/>the<sp/>device</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>RAND_M<sp/>=<sp/>4294967295;<sp/></highlight><highlight class="comment">//<sp/>2**32-1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blockId<sp/>=<sp/>blockIdx.x<sp/>+<sp/>blockIdx.y<sp/>*<sp/>gridDim.x<sp/>+<sp/>gridDim.x<sp/>*<sp/>gridDim.y<sp/>*<sp/>blockIdx.z;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tid<sp/>=<sp/>blockId<sp/>*<sp/>(blockDim.x<sp/>*<sp/>blockDim.y<sp/>*<sp/>blockDim.z)</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>(threadIdx.z<sp/>*<sp/>(blockDim.x<sp/>*<sp/>blockDim.y))</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>(threadIdx.y<sp/>*<sp/>blockDim.x)<sp/>+<sp/>threadIdx.x<sp/>;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rand;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>get_state(tid);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rand<sp/>=<sp/><sp/>curand(&amp;d_states_d_ptr[i]);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(rand<sp/>&gt;<sp/>(RAND_M<sp/>-<sp/>RAND_M<sp/>%<sp/>n));</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>__threadfence();</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>free_state(tid);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rand<sp/>%<sp/>n;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/>//<sp/>on<sp/>the<sp/>host</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uniform_int_distribution&lt;unsigned<sp/>int&gt;<sp/>distribution(0,<sp/>n-1);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tid<sp/>=<sp/><ref refid="namespaceamrex_1_1OpenMP_1a27ed6354b68b2bd8721658a8779af032" kindref="member">OpenMP::get_thread_num</ref>();</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>distribution(generators[tid]);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal">}</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><ref refid="AMReX__GpuQualifiers_8H_1af7feff7858c7b1d3557509d883c46674" kindref="member">AMREX_GPU_HOST</ref><sp/>amrex::ULong</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><ref refid="namespaceamrex_1a4bcd8d65b3b8e649e5d701d5a9ef4093" kindref="member">amrex::Random_long</ref><sp/>(amrex::ULong<sp/>n)</highlight></codeline>
<codeline lineno="280"><highlight class="normal">{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uniform_int_distribution&lt;amrex::ULong&gt;<sp/>distribution(0,<sp/>n-1);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tid<sp/>=<sp/><ref refid="namespaceamrex_1_1OpenMP_1a27ed6354b68b2bd8721658a8779af032" kindref="member">OpenMP::get_thread_num</ref>();</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>distribution(generators[tid]);</highlight></codeline>
<codeline lineno="284"><highlight class="normal">}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><ref refid="namespaceamrex_1ad1b283df95b292f478597bc503170459" kindref="member">amrex::SaveRandomState</ref><sp/>(std::ostream&amp;<sp/>os)</highlight></codeline>
<codeline lineno="288"><highlight class="normal">{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nthreads;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>generators[i]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="292"><highlight class="normal">}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><ref refid="namespaceamrex_1ae45a9a3a96e46d7b15173894b25134fc" kindref="member">amrex::RestoreRandomState</ref><sp/>(std::istream&amp;<sp/>is,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nthreads_old,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nstep_old)</highlight></codeline>
<codeline lineno="296"><highlight class="normal">{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N<sp/>=<sp/><ref refid="namespaceamrex_1_1detail_1a05ef6e98eba987410d73df1617fa569da39de58104accdcd761fe01946da9a4a0" kindref="member">std::min</ref>(nthreads,<sp/>nthreads_old);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>N;<sp/>i++)</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>&gt;&gt;<sp/>generators[i];</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nthreads<sp/>&gt;<sp/>nthreads_old)<sp/>{</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1aa191723b5d24ceaf64e9d49f542cfcc2" kindref="member">NProcs</ref><sp/>=<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1aa191723b5d24ceaf64e9d49f542cfcc2" kindref="member">ParallelDescriptor::NProcs</ref>();</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MyProc<sp/>=<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a33162ef233c092e9e6fd75ab291b9b29" kindref="member">ParallelDescriptor::MyProc</ref>();</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>nthreads_old;<sp/>i<sp/>&lt;<sp/>nthreads;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>amrex::ULong<sp/>seed<sp/>=<sp/>MyProc+1<sp/>+<sp/>i*<ref refid="namespaceamrex_1_1ParallelDescriptor_1aa191723b5d24ceaf64e9d49f542cfcc2" kindref="member">NProcs</ref>;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceamrex_1_1detail_1a05ef6e98eba987410d73df1617fa569da86cadfc48eb8f9dd4a2e4a3980a6b265" kindref="member">std::numeric_limits&lt;amrex::ULong&gt;::max</ref>()/(amrex::ULong)(nstep_old+1)</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;<sp/>static_cast&lt;amrex::ULong&gt;(nthreads*NProcs))<sp/></highlight><highlight class="comment">//<sp/>avoid<sp/>overflow</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>+=<sp/>nstep_old*nthreads*<ref refid="namespaceamrex_1_1ParallelDescriptor_1aa191723b5d24ceaf64e9d49f542cfcc2" kindref="member">NProcs</ref>;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>generators[i].seed(seed);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="314"><highlight class="normal">}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><ref refid="namespaceamrex_1aa2c1209819cd8dd79499c2b9f088120e" kindref="member">amrex::UniqueRandomSubset</ref><sp/>(<ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;int&gt;</ref><sp/>&amp;uSet,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>setSize,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>poolSize,</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>printSet)</highlight></codeline>
<codeline lineno="319"><highlight class="normal">{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(setSize<sp/>&gt;<sp/>poolSize)<sp/>{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1ad26f2328bf66aa9678347a6055a25431" kindref="member">amrex::Abort</ref>(</highlight><highlight class="stringliteral">&quot;****<sp/>Error<sp/>in<sp/>UniqueRandomSubset:<sp/><sp/>setSize<sp/>&gt;<sp/>poolSize.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/>std::set&lt;int&gt;<sp/>copySet;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;int&gt;</ref><sp/>uSetTemp;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(static_cast&lt;int&gt;(copySet.size())<sp/>&lt;<sp/>setSize)<sp/>{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r(<ref refid="namespaceamrex_1a20796a80df81ee204983811cc8a1b705" kindref="member">amrex::Random_int</ref>(poolSize));</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(copySet.find(r)<sp/>==<sp/>copySet.end())<sp/>{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>copySet.insert(r);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uSetTemp.push_back(r);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/>uSet<sp/>=<sp/>uSetTemp;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(printSet)<sp/>{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i(0);<sp/>i<sp/>&lt;<sp/>uSet.<ref refid="classamrex_1_1Vector_1a58c24fe05cc91d42ebe7151c398f0c58" kindref="member">size</ref>();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1AllPrint" kindref="compound">amrex::AllPrint</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;uSet[&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]<sp/><sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>uSet[i]<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="338"><highlight class="normal">}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a113534c1251300931774c81dbf2fcbae" kindref="member">amrex::ResetRandomSeed</ref><sp/>(amrex::ULong<sp/>seed)</highlight></codeline>
<codeline lineno="341"><highlight class="normal">{</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1ae9f820f5a65928568f3751fd584fa5ed" kindref="member">InitRandom</ref>(seed);</highlight></codeline>
<codeline lineno="343"><highlight class="normal">}</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><ref refid="namespaceamrex_1abce0125a244f443854b1c4a2709c5990" kindref="member">amrex::DeallocateRandomSeedDevArray</ref><sp/>()</highlight></codeline>
<codeline lineno="347"><highlight class="normal">{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>AMREX_USE_GPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>AMREX_USE_DPCPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rand_engine_descr)<sp/>{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>rand_engine_descr;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1Gpu_1a0040af3e7783b853140a6e13c755fc25" kindref="member">Gpu::synchronize</ref>();</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rand_engine_descr<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(d_states_h_ptr<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1ae3d1414946b992f39ca41f135f12a0d1" kindref="member">The_Arena</ref>()-&gt;<ref refid="classamrex_1_1Arena_1a0c7e0730574c98febb6ddca2712cb515" kindref="member">free</ref>(d_states_h_ptr);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d_states_h_ptr<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h_mutex_h_ptr<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>h_mutex_h_ptr;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h_mutex_h_ptr<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(d_mutex_h_ptr<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1ae3d1414946b992f39ca41f135f12a0d1" kindref="member">The_Arena</ref>()-&gt;<ref refid="classamrex_1_1Arena_1a0c7e0730574c98febb6ddca2712cb515" kindref="member">free</ref>(d_mutex_h_ptr);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d_mutex_h_ptr<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal">}</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><ref refid="namespaceamrex_1aaf97cdbc0db387b57d9641d57cce591e" kindref="member">amrex::NItemsPerBin</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>totalItems,<sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;int&gt;</ref><sp/>&amp;binCounts)</highlight></codeline>
<codeline lineno="379"><highlight class="normal">{</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(binCounts.<ref refid="classamrex_1_1Vector_1a58c24fe05cc91d42ebe7151c398f0c58" kindref="member">size</ref>()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1adf03962600e13b4ecd73531bd77d0cf5" kindref="member">verbose</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>countForAll(totalItems<sp/>/<sp/>binCounts.<ref refid="classamrex_1_1Vector_1a58c24fe05cc91d42ebe7151c398f0c58" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>remainder(totalItems<sp/>%<sp/>binCounts.<ref refid="classamrex_1_1Vector_1a58c24fe05cc91d42ebe7151c398f0c58" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="namespaceamrex_1adf03962600e13b4ecd73531bd77d0cf5" kindref="member">verbose</ref>)<sp/>{</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Print" kindref="compound">amrex::Print</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;amrex::NItemsPerBin:<sp/><sp/>countForAll<sp/>remainder<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>countForAll</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>remainder<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i(0);<sp/>i<sp/>&lt;<sp/>binCounts.<ref refid="classamrex_1_1Vector_1a58c24fe05cc91d42ebe7151c398f0c58" kindref="member">size</ref>();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>binCounts[i]<sp/>=<sp/>countForAll;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i(0);<sp/>i<sp/>&lt;<sp/>remainder;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>++binCounts[i];</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i(0);<sp/>i<sp/>&lt;<sp/>binCounts.<ref refid="classamrex_1_1Vector_1a58c24fe05cc91d42ebe7151c398f0c58" kindref="member">size</ref>();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="namespaceamrex_1adf03962600e13b4ecd73531bd77d0cf5" kindref="member">verbose</ref>)<sp/>{</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Print" kindref="compound">amrex::Print</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;amrex::NItemsPerBin::<sp/><sp/>binCounts[&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>binCounts[i]<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="401"><highlight class="normal">}</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Fortran<sp/>entry<sp/>points<sp/>for<sp/>amrex::Random().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(AMREX_XSDK)<sp/>&amp;&amp;<sp/>!defined(BL_NO_FORT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><ref refid="AMReX__Random_8cpp_1a7149b75200fd1c2399da882ca3a148bb" kindref="member">BL_FORT_PROC_DECL</ref>(BLUTILINITRAND,blutilinitrand)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>sd)</highlight></codeline>
<codeline lineno="410"><highlight class="normal">{</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/>amrex::ULong<sp/>seed<sp/>=<sp/>*sd;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1ae9f820f5a65928568f3751fd584fa5ed" kindref="member">amrex::InitRandom</ref>(seed);</highlight></codeline>
<codeline lineno="413"><highlight class="normal">}</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><ref refid="AMReX__Random_8cpp_1a7149b75200fd1c2399da882ca3a148bb" kindref="member">BL_FORT_PROC_DECL</ref>(BLINITRAND,blinitrand)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>sd)</highlight></codeline>
<codeline lineno="416"><highlight class="normal">{</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/>amrex::ULong<sp/>seed<sp/>=<sp/>*sd;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1ae9f820f5a65928568f3751fd584fa5ed" kindref="member">amrex::InitRandom</ref>(seed);</highlight></codeline>
<codeline lineno="419"><highlight class="normal">}</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><ref refid="AMReX__Random_8cpp_1a7149b75200fd1c2399da882ca3a148bb" kindref="member">BL_FORT_PROC_DECL</ref>(BLUTILRAND,blutilrand)(amrex::Real*<sp/>rn)</highlight></codeline>
<codeline lineno="422"><highlight class="normal">{</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>*rn<sp/>=<sp/><ref refid="namespaceamrex_1a3ba29f87f49dfb416b85b65c8b5cd9c3" kindref="member">amrex::Random</ref>();</highlight></codeline>
<codeline lineno="424"><highlight class="normal">}</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="AMReX__Random_8cpp_1af7786727a4dfac68a7b0bcf67f62f61e" kindref="member">amrex_random</ref><sp/>()</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a3ba29f87f49dfb416b85b65c8b5cd9c3" kindref="member">amrex::Random</ref>();</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>for<sp/>Fortran,<sp/>which<sp/>doesn&apos;t<sp/>have<sp/>unsigned<sp/>long.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>amrex::Long<sp/><ref refid="AMReX__Random_8cpp_1a61da6a9297e0e72c5db8a53520594ac5" kindref="member">amrex_random_int</ref><sp/>(amrex::Long<sp/>n)</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">amrex::Long</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="namespaceamrex_1a20796a80df81ee204983811cc8a1b705" kindref="member">amrex::Random_int</ref>(static_cast&lt;amrex::ULong&gt;(n)));</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="438"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Random.cpp"/>
  </compounddef>
</doxygen>
