<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="structamrex_1_1BlockMutex" kind="struct" language="C++" prot="public">
    <compoundname>amrex::BlockMutex</compoundname>
    <includes refid="AMReX__BlockMutex_8H" local="no">AMReX_BlockMutex.H</includes>
    <innerclass refid="unionamrex_1_1BlockMutex_1_1state__t" prot="public">amrex::BlockMutex::state_t</innerclass>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structamrex_1_1BlockMutex_1a5dd0ffbdeea32e60081285deaf2923ec" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::BlockMutex::m_nstates</definition>
        <argsstring></argsstring>
        <name>m_nstates</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BlockMutex.H" line="84" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BlockMutex.H" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structamrex_1_1BlockMutex_1ab5a49fbd49c206ff3f03ee616e60b990" prot="private" static="no" mutable="no">
        <type><ref refid="unionamrex_1_1BlockMutex_1_1state__t" kindref="compound">state_t</ref> *</type>
        <definition>state_t* amrex::BlockMutex::m_state</definition>
        <argsstring></argsstring>
        <name>m_state</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BlockMutex.H" line="85" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BlockMutex.H" bodystart="85" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structamrex_1_1BlockMutex_1a15739554c59b1f13c811674d600856a6" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr <ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="unionamrex_1_1BlockMutex_1_1state__t" kindref="compound">state_t</ref></type>
        <definition>static constexpr AMREX_GPU_HOST_DEVICE state_t amrex::BlockMutex::FreeState</definition>
        <argsstring>() noexcept</argsstring>
        <name>FreeState</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BlockMutex.H" line="20" column="30" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BlockMutex.H" bodystart="20" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1BlockMutex_1adbef3193b3d4efdeacc00a4c0bf0d396" prot="public" static="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BlockMutex::init_states</definition>
        <argsstring>(state_t *state, int N) noexcept</argsstring>
        <name>init_states</name>
        <param>
          <type><ref refid="unionamrex_1_1BlockMutex_1_1state__t" kindref="compound">state_t</ref> *</type>
          <declname>state</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>N</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BlockMutex.H" line="24" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BlockMutex.cpp" bodystart="7" bodyend="19"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structamrex_1_1BlockMutex_1a6ecc59b2420e534d8288d4dbc46bcb72" prot="public" static="no" const="no" explicit="yes" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::BlockMutex::BlockMutex</definition>
        <argsstring>(int N) noexcept</argsstring>
        <name>BlockMutex</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>N</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BlockMutex.H" line="26" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BlockMutex.cpp" bodystart="21" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1BlockMutex_1a2c7806c54820135f097449360f35a8f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::BlockMutex::~BlockMutex</definition>
        <argsstring>()</argsstring>
        <name>~BlockMutex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BlockMutex.H" line="28" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BlockMutex.cpp" bodystart="34" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1BlockMutex_1a3eb4aec3fa8021b4fcb50768365ca52f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BlockMutex::operator=</definition>
        <argsstring>(BlockMutex const &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="structamrex_1_1BlockMutex" kindref="compound">BlockMutex</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BlockMutex.H" line="30" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1BlockMutex_1ad0e65d9bf77725b6bad2a6794d6e2fee" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1a4e626ebf06898d71a9e0790877f1694f" kindref="member">AMREX_GPU_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_DEVICE AMREX_FORCE_INLINE void amrex::BlockMutex::lock</definition>
        <argsstring>(int i) noexcept</argsstring>
        <name>lock</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BlockMutex.H" line="33" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BlockMutex.H" bodystart="33" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1BlockMutex_1abd55deb11f6e1a89fa7e6ba517c581ff" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1a4e626ebf06898d71a9e0790877f1694f" kindref="member">AMREX_GPU_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_DEVICE AMREX_FORCE_INLINE void amrex::BlockMutex::unlock</definition>
        <argsstring>(int i) noexcept</argsstring>
        <name>unlock</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BlockMutex.H" line="59" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BlockMutex.H" bodystart="59" bodyend="80"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="3">
        <label>amrex::BlockMutex::state_t::II</label>
        <link refid="structamrex_1_1BlockMutex_1_1state__t_1_1II"/>
      </node>
      <node id="2">
        <label>amrex::BlockMutex::state_t</label>
        <link refid="unionamrex_1_1BlockMutex_1_1state__t"/>
        <childnode refid="3" relation="usage">
          <edgelabel>data</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>amrex::BlockMutex</label>
        <link refid="structamrex_1_1BlockMutex"/>
        <childnode refid="2" relation="usage">
          <edgelabel>m_state</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BlockMutex.H" line="12" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BlockMutex.H" bodystart="11" bodyend="86"/>
    <listofallmembers>
      <member refid="structamrex_1_1BlockMutex_1a6ecc59b2420e534d8288d4dbc46bcb72" prot="public" virt="non-virtual"><scope>amrex::BlockMutex</scope><name>BlockMutex</name></member>
      <member refid="structamrex_1_1BlockMutex_1a15739554c59b1f13c811674d600856a6" prot="public" virt="non-virtual"><scope>amrex::BlockMutex</scope><name>FreeState</name></member>
      <member refid="structamrex_1_1BlockMutex_1adbef3193b3d4efdeacc00a4c0bf0d396" prot="public" virt="non-virtual"><scope>amrex::BlockMutex</scope><name>init_states</name></member>
      <member refid="structamrex_1_1BlockMutex_1ad0e65d9bf77725b6bad2a6794d6e2fee" prot="public" virt="non-virtual"><scope>amrex::BlockMutex</scope><name>lock</name></member>
      <member refid="structamrex_1_1BlockMutex_1a5dd0ffbdeea32e60081285deaf2923ec" prot="private" virt="non-virtual"><scope>amrex::BlockMutex</scope><name>m_nstates</name></member>
      <member refid="structamrex_1_1BlockMutex_1ab5a49fbd49c206ff3f03ee616e60b990" prot="private" virt="non-virtual"><scope>amrex::BlockMutex</scope><name>m_state</name></member>
      <member refid="structamrex_1_1BlockMutex_1a3eb4aec3fa8021b4fcb50768365ca52f" prot="public" virt="non-virtual"><scope>amrex::BlockMutex</scope><name>operator=</name></member>
      <member refid="structamrex_1_1BlockMutex_1abd55deb11f6e1a89fa7e6ba517c581ff" prot="public" virt="non-virtual"><scope>amrex::BlockMutex</scope><name>unlock</name></member>
      <member refid="structamrex_1_1BlockMutex_1a2c7806c54820135f097449360f35a8f4" prot="public" virt="non-virtual"><scope>amrex::BlockMutex</scope><name>~BlockMutex</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
