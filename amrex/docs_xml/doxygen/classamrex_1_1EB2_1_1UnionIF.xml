<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classamrex_1_1EB2_1_1UnionIF" kind="class" language="C++" prot="public">
    <compoundname>amrex::EB2::UnionIF</compoundname>
    <basecompoundref refid="classamrex_1_1GpuTuple" prot="public" virt="non-virtual">amrex::GpuTuple&lt; Fs... &gt;</basecompoundref>
    <includes refid="AMReX__EB2__IF__Union_8H" local="no">AMReX_EB2_IF_Union.H</includes>
    <templateparamlist>
      <param>
        <type>class...</type>
        <declname>Fs</declname>
        <defname>Fs</defname>
      </param>
    </templateparamlist>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1EB2_1_1UnionIF_1ac1f454172200f68f6572ca2b2bae01a4" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::EB2::UnionIF&lt; Fs &gt;::operator()</definition>
        <argsstring>(const RealArray &amp;p) const noexcept</argsstring>
        <name>operator()</name>
        <qualifiedname>amrex::EB2::UnionIF::operator()</qualifiedname>
        <param>
          <type>const <ref refid="namespaceamrex_1aeb06fab72f85728954130adbe25c5397" kindref="member">RealArray</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Union.H" line="53" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Union.H" bodystart="53" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EB2_1_1UnionIF_1a0dbee4f12e9685ee6b73486337728deb" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
            <defval><ref refid="classamrex_1_1EB2_1_1UnionIF" kindref="compound">UnionIF</ref>&lt;Fs...&gt;</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; <ref refid="structamrex_1_1EB2_1_1IsGPUable" kindref="compound">IsGPUable</ref>&lt; U &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>__host__ __device__ Real</type>
        <definition>__host__ __device__ Real amrex::EB2::UnionIF&lt; Fs &gt;::operator()</definition>
        <argsstring>(Real x, Real y, Real z) const noexcept</argsstring>
        <name>operator()</name>
        <qualifiedname>amrex::EB2::UnionIF::operator()</qualifiedname>
        <param>
          <type>Real</type>
          <declname>x</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>y</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Union.H" line="60" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Union.H" bodystart="60" bodyend="63"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-func">
      <memberdef kind="function" id="classamrex_1_1EB2_1_1UnionIF_1ad7d30bca0252b6df844781049ce9e96f" prot="protected" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t...</type>
            <declname>Is</declname>
            <defname>Is</defname>
          </param>
        </templateparamlist>
        <type>Real</type>
        <definition>Real amrex::EB2::UnionIF&lt; Fs &gt;::op_impl</definition>
        <argsstring>(const RealArray &amp;p, std::index_sequence&lt; Is... &gt;) const noexcept</argsstring>
        <name>op_impl</name>
        <qualifiedname>amrex::EB2::UnionIF::op_impl</qualifiedname>
        <param>
          <type>const <ref refid="namespaceamrex_1aeb06fab72f85728954130adbe25c5397" kindref="member">RealArray</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>std::index_sequence&lt; Is... &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Union.H" line="68" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Union.H" bodystart="68" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EB2_1_1UnionIF_1aa75147c849fce0cdb4d309da6e1bdcb9" prot="protected" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t...</type>
            <declname>Is</declname>
            <defname>Is</defname>
          </param>
        </templateparamlist>
        <type>__host__ __device__ Real</type>
        <definition>__host__ __device__ Real amrex::EB2::UnionIF&lt; Fs &gt;::op_impl</definition>
        <argsstring>(Real x, Real y, Real z, std::index_sequence&lt; Is... &gt;) const noexcept</argsstring>
        <name>op_impl</name>
        <qualifiedname>amrex::EB2::UnionIF::op_impl</qualifiedname>
        <param>
          <type>Real</type>
          <declname>x</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>y</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>z</declname>
        </param>
        <param>
          <type>std::index_sequence&lt; Is... &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Union.H" line="75" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Union.H" bodystart="75" bodyend="78"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>amrex::GpuTuple&lt; Fs... &gt;</label>
        <link refid="classamrex_1_1GpuTuple"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>amrex::EB2::UnionIF&lt; Fs &gt;</label>
        <link refid="classamrex_1_1EB2_1_1UnionIF"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>amrex::detail::gpu_tuple_impl&lt; 0, Ts... &gt;</label>
        <link refid="structamrex_1_1detail_1_1gpu__tuple__impl"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>amrex::GpuTuple&lt; Fs... &gt;</label>
        <link refid="classamrex_1_1GpuTuple"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>amrex::EB2::UnionIF&lt; Fs &gt;</label>
        <link refid="classamrex_1_1EB2_1_1UnionIF"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>amrex::detail::gpu_tuple_impl&lt; 0, Ts... &gt;</label>
        <link refid="structamrex_1_1detail_1_1gpu__tuple__impl"/>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Union.H" line="47" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Union.H" bodystart="49" bodyend="79"/>
    <listofallmembers>
      <member refid="classamrex_1_1GpuTuple_1a810f7350cebe29e2d0441738bc7ae9bb" prot="public" virt="non-virtual"><scope>amrex::EB2::UnionIF</scope><name>GpuTuple</name></member>
      <member refid="classamrex_1_1GpuTuple_1aaa9ed202ceb2122e08523b1b17e68b2a" prot="public" virt="non-virtual"><scope>amrex::EB2::UnionIF</scope><name>GpuTuple</name></member>
      <member refid="classamrex_1_1GpuTuple_1a4fbb6462763e67abd37e85e9dd3a00ab" prot="public" virt="non-virtual"><scope>amrex::EB2::UnionIF</scope><name>GpuTuple</name></member>
      <member refid="classamrex_1_1EB2_1_1UnionIF_1ad7d30bca0252b6df844781049ce9e96f" prot="protected" virt="non-virtual"><scope>amrex::EB2::UnionIF</scope><name>op_impl</name></member>
      <member refid="classamrex_1_1EB2_1_1UnionIF_1aa75147c849fce0cdb4d309da6e1bdcb9" prot="protected" virt="non-virtual"><scope>amrex::EB2::UnionIF</scope><name>op_impl</name></member>
      <member refid="classamrex_1_1EB2_1_1UnionIF_1ac1f454172200f68f6572ca2b2bae01a4" prot="public" virt="non-virtual"><scope>amrex::EB2::UnionIF</scope><name>operator()</name></member>
      <member refid="classamrex_1_1EB2_1_1UnionIF_1a0dbee4f12e9685ee6b73486337728deb" prot="public" virt="non-virtual"><scope>amrex::EB2::UnionIF</scope><name>operator()</name></member>
      <member refid="classamrex_1_1GpuTuple_1a2c585d6a0e6fdc0b888f77b3af03d034" prot="public" virt="non-virtual"><scope>amrex::EB2::UnionIF</scope><name>operator=</name></member>
      <member refid="classamrex_1_1GpuTuple_1a5013870df94592dadfef5b83efec5d45" prot="public" virt="non-virtual"><scope>amrex::EB2::UnionIF</scope><name>operator=</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
