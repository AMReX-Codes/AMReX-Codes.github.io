<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="namespaceamrex_1_1EB2" kind="namespace" language="C++">
    <compoundname>amrex::EB2</compoundname>
    <innerclass refid="classamrex_1_1EB2_1_1AllRegularIF" prot="public">amrex::EB2::AllRegularIF</innerclass>
    <innerclass refid="classamrex_1_1EB2_1_1BoxIF" prot="public">amrex::EB2::BoxIF</innerclass>
    <innerclass refid="structamrex_1_1EB2_1_1Cell" prot="public">amrex::EB2::Cell</innerclass>
    <innerclass refid="classamrex_1_1EB2_1_1ChkptFile" prot="public">amrex::EB2::ChkptFile</innerclass>
    <innerclass refid="classamrex_1_1EB2_1_1ChkptFileLevel" prot="public">amrex::EB2::ChkptFileLevel</innerclass>
    <innerclass refid="classamrex_1_1EB2_1_1ComplementIF" prot="public">amrex::EB2::ComplementIF</innerclass>
    <innerclass refid="classamrex_1_1EB2_1_1CylinderIF" prot="public">amrex::EB2::CylinderIF</innerclass>
    <innerclass refid="classamrex_1_1EB2_1_1DevicePtrIF" prot="public">amrex::EB2::DevicePtrIF</innerclass>
    <innerclass refid="classamrex_1_1EB2_1_1DifferenceIF" prot="public">amrex::EB2::DifferenceIF</innerclass>
    <innerclass refid="structamrex_1_1EB2_1_1Edge" prot="public">amrex::EB2::Edge</innerclass>
    <innerclass refid="classamrex_1_1EB2_1_1EllipsoidIF" prot="public">amrex::EB2::EllipsoidIF</innerclass>
    <innerclass refid="classamrex_1_1EB2_1_1ExtrusionIF" prot="public">amrex::EB2::ExtrusionIF</innerclass>
    <innerclass refid="structamrex_1_1EB2_1_1Face" prot="public">amrex::EB2::Face</innerclass>
    <innerclass refid="classamrex_1_1EB2_1_1GeometryShop" prot="public">amrex::EB2::GeometryShop</innerclass>
    <innerclass refid="classamrex_1_1EB2_1_1GFab" prot="public">amrex::EB2::GFab</innerclass>
    <innerclass refid="classamrex_1_1EB2_1_1GShopLevel" prot="public">amrex::EB2::GShopLevel</innerclass>
    <innerclass refid="classamrex_1_1EB2_1_1IndexSpace" prot="public">amrex::EB2::IndexSpace</innerclass>
    <innerclass refid="classamrex_1_1EB2_1_1IndexSpaceChkptFile" prot="public">amrex::EB2::IndexSpaceChkptFile</innerclass>
    <innerclass refid="classamrex_1_1EB2_1_1IndexSpaceImp" prot="public">amrex::EB2::IndexSpaceImp</innerclass>
    <innerclass refid="classamrex_1_1EB2_1_1IndexSpaceSTL" prot="public">amrex::EB2::IndexSpaceSTL</innerclass>
    <innerclass refid="classamrex_1_1EB2_1_1IntersectionIF" prot="public">amrex::EB2::IntersectionIF</innerclass>
    <innerclass refid="structamrex_1_1EB2_1_1IsGPUable" prot="public">amrex::EB2::IsGPUable</innerclass>
    <innerclass refid="structamrex_1_1EB2_1_1IsGPUable_3_01ComplementIF_3_01F_01_4_00_01std_1_1enable__if__t_3_01IsGPUae5a3ecdbbe2872ad1fcb116fcced2fba" prot="public">amrex::EB2::IsGPUable&lt; ComplementIF&lt; F &gt;, std::enable_if_t&lt; IsGPUable&lt; F &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="structamrex_1_1EB2_1_1IsGPUable_3_01D_00_01std_1_1enable__if__t_3_01std_1_1is__base__of__v_3_01GPUable_00_01D_01_4_01_4_01_4" prot="public">amrex::EB2::IsGPUable&lt; D, std::enable_if_t&lt; std::is_base_of_v&lt; GPUable, D &gt; &gt; &gt;</innerclass>
    <innerclass refid="structamrex_1_1EB2_1_1IsGPUable_3_01DifferenceIF_3_01F_00_01G_01_4_00_01std_1_1enable__if__t_3_0b8f5d460277f1d91a5423c29613f5d25" prot="public">amrex::EB2::IsGPUable&lt; DifferenceIF&lt; F, G &gt;, std::enable_if_t&lt; IsGPUable&lt; F &gt;::value &amp;&amp;IsGPUable&lt; G &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="structamrex_1_1EB2_1_1IsGPUable_3_01ExtrusionIF_3_01F_01_4_00_01std_1_1enable__if__t_3_01IsGPUabf062b6fd2701f97c86146ed02bddaa9e" prot="public">amrex::EB2::IsGPUable&lt; ExtrusionIF&lt; F &gt;, std::enable_if_t&lt; IsGPUable&lt; F &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="structamrex_1_1EB2_1_1IsGPUable_3_01IntersectionIF_3_01F_01_4_00_01std_1_1enable__if__t_3_01IsGPf9c8a061c673452f35713630afd9be10" prot="public">amrex::EB2::IsGPUable&lt; IntersectionIF&lt; F &gt;, std::enable_if_t&lt; IsGPUable&lt; F &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="structamrex_1_1EB2_1_1IsGPUable_3_01IntersectionIF_3_01Head_00_01Tail_8_8_8_01_4_00_01std_1_1ena0c37219ffe6b39871c91221e9d798d75" prot="public">amrex::EB2::IsGPUable&lt; IntersectionIF&lt; Head, Tail... &gt;, std::enable_if_t&lt; IsGPUable&lt; Head &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="structamrex_1_1EB2_1_1IsGPUable_3_01LatheIF_3_01F_01_4_00_01std_1_1enable__if__t_3_01IsGPUable_3_01F_01_4_1_1value_01_4_01_4" prot="public">amrex::EB2::IsGPUable&lt; LatheIF&lt; F &gt;, std::enable_if_t&lt; IsGPUable&lt; F &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="structamrex_1_1EB2_1_1IsGPUable_3_01RotationIF_3_01F_01_4_00_01std_1_1enable__if__t_3_01IsGPUable_3_01F_01_4_1_1value_01_4_01_4" prot="public">amrex::EB2::IsGPUable&lt; RotationIF&lt; F &gt;, std::enable_if_t&lt; IsGPUable&lt; F &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="structamrex_1_1EB2_1_1IsGPUable_3_01ScaleIF_3_01F_01_4_00_01std_1_1enable__if__t_3_01IsGPUable_3_01F_01_4_1_1value_01_4_01_4" prot="public">amrex::EB2::IsGPUable&lt; ScaleIF&lt; F &gt;, std::enable_if_t&lt; IsGPUable&lt; F &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="structamrex_1_1EB2_1_1IsGPUable_3_01TranslationIF_3_01F_01_4_00_01std_1_1enable__if__t_3_01IsGPUdd6f125157b8f676e3869d8d3fbaabf1" prot="public">amrex::EB2::IsGPUable&lt; TranslationIF&lt; F &gt;, std::enable_if_t&lt; IsGPUable&lt; F &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="structamrex_1_1EB2_1_1IsGPUable_3_01UnionIF_3_01F_01_4_00_01std_1_1enable__if__t_3_01IsGPUable_3_01F_01_4_1_1value_01_4_01_4" prot="public">amrex::EB2::IsGPUable&lt; UnionIF&lt; F &gt;, std::enable_if_t&lt; IsGPUable&lt; F &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="structamrex_1_1EB2_1_1IsGPUable_3_01UnionIF_3_01Head_00_01Tail_8_8_8_01_4_00_01std_1_1enable__if6eb1e381bbe58b34365e2ea43c9dd797" prot="public">amrex::EB2::IsGPUable&lt; UnionIF&lt; Head, Tail... &gt;, std::enable_if_t&lt; IsGPUable&lt; Head &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="classamrex_1_1EB2_1_1LatheIF" prot="public">amrex::EB2::LatheIF</innerclass>
    <innerclass refid="classamrex_1_1EB2_1_1Level" prot="public">amrex::EB2::Level</innerclass>
    <innerclass refid="classamrex_1_1EB2_1_1MultiGFab" prot="public">amrex::EB2::MultiGFab</innerclass>
    <innerclass refid="structamrex_1_1EB2_1_1Neighbor" prot="public">amrex::EB2::Neighbor</innerclass>
    <innerclass refid="classamrex_1_1EB2_1_1ParserIF" prot="public">amrex::EB2::ParserIF</innerclass>
    <innerclass refid="classamrex_1_1EB2_1_1PlaneIF" prot="public">amrex::EB2::PlaneIF</innerclass>
    <innerclass refid="classamrex_1_1EB2_1_1PolyIF" prot="public">amrex::EB2::PolyIF</innerclass>
    <innerclass refid="classamrex_1_1EB2_1_1PolynomialIF" prot="public">amrex::EB2::PolynomialIF</innerclass>
    <innerclass refid="classamrex_1_1EB2_1_1PolyTerm" prot="public">amrex::EB2::PolyTerm</innerclass>
    <innerclass refid="classamrex_1_1EB2_1_1RotationIF" prot="public">amrex::EB2::RotationIF</innerclass>
    <innerclass refid="classamrex_1_1EB2_1_1ScaleIF" prot="public">amrex::EB2::ScaleIF</innerclass>
    <innerclass refid="classamrex_1_1EB2_1_1SphereIF" prot="public">amrex::EB2::SphereIF</innerclass>
    <innerclass refid="classamrex_1_1EB2_1_1SplineIF" prot="public">amrex::EB2::SplineIF</innerclass>
    <innerclass refid="classamrex_1_1EB2_1_1STLLevel" prot="public">amrex::EB2::STLLevel</innerclass>
    <innerclass refid="classamrex_1_1EB2_1_1TorusIF" prot="public">amrex::EB2::TorusIF</innerclass>
    <innerclass refid="classamrex_1_1EB2_1_1TranslationIF" prot="public">amrex::EB2::TranslationIF</innerclass>
    <innerclass refid="classamrex_1_1EB2_1_1UnionIF" prot="public">amrex::EB2::UnionIF</innerclass>
    <innerclass refid="structamrex_1_1EB2_1_1Vertex" prot="public">amrex::EB2::Vertex</innerclass>
    <innernamespace refid="namespaceamrex_1_1EB2_1_1detail">amrex::EB2::detail</innernamespace>
    <innernamespace refid="namespaceamrex_1_1EB2_1_1IIF__detail">amrex::EB2::IIF_detail</innernamespace>
    <innernamespace refid="namespaceamrex_1_1EB2_1_1Type">amrex::EB2::Type</innernamespace>
    <innernamespace refid="namespaceamrex_1_1EB2_1_1UIF__detail">amrex::EB2::UIF_detail</innernamespace>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespaceamrex_1_1EB2_1a853647130b0422fbb57870513c44b89b" prot="public" static="no">
        <type>std::pair&lt; <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref>, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
        <definition>using amrex::EB2::VertexID = typedef std::pair&lt;IntVect,int&gt;</definition>
        <argsstring></argsstring>
        <name>VertexID</name>
        <qualifiedname>amrex::EB2::VertexID</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_Graph.H" line="27" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_Graph.H" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1_1EB2_1ad5118c9d34449d5fcba10d141751b0d6" prot="public" static="no">
        <type>uint32_t</type>
        <definition>using amrex::EB2::Type_t = typedef uint32_t</definition>
        <argsstring></argsstring>
        <name>Type_t</name>
        <qualifiedname>amrex::EB2::Type_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_Graph.H" line="35" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_Graph.H" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1_1EB2_1a0838e8d3d2f11703bb21ebb6bddbb1b1" prot="public" static="no">
        <type>std::unordered_map&lt; <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref>, <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="structamrex_1_1EB2_1_1Vertex" kindref="compound">Vertex</ref> &gt;, <ref refid="classamrex_1_1IntVectND_1a5a9e63436988a005e0f65d25b34a417c" kindref="member">IntVect::hasher</ref> &gt;</type>
        <definition>using amrex::EB2::Graph = typedef std::unordered_map&lt;IntVect, Vector&lt;Vertex&gt;, IntVect::hasher&gt;</definition>
        <argsstring></argsstring>
        <name>Graph</name>
        <qualifiedname>amrex::EB2::Graph</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_Graph.H" line="85" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_Graph.H" bodystart="85" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="var">
      <memberdef kind="variable" id="namespaceamrex_1_1EB2_1a0e86c3c8bf9f242ddba11fbe8db60e66" prot="public" static="no" mutable="no">
        <type><ref refid="AMReX__Extension_8H_1ac05fa35b3db13c4599d7ad5fc51bef47" kindref="member">AMREX_EXPORT</ref> <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>AMREX_EXPORT int amrex::EB2::max_grid_size</definition>
        <argsstring></argsstring>
        <name>max_grid_size</name>
        <qualifiedname>amrex::EB2::max_grid_size</qualifiedname>
        <initializer>= 64</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.cpp" line="23" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.cpp" bodystart="23" bodyend="-1" declfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.H" declline="18" declcolumn="25"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1_1EB2_1a900c8b65fe13dca2d107ec8ae396b7b7" prot="public" static="no" mutable="no">
        <type><ref refid="AMReX__Extension_8H_1ac05fa35b3db13c4599d7ad5fc51bef47" kindref="member">AMREX_EXPORT</ref> bool</type>
        <definition>AMREX_EXPORT bool amrex::EB2::extend_domain_face</definition>
        <argsstring></argsstring>
        <name>extend_domain_face</name>
        <qualifiedname>amrex::EB2::extend_domain_face</qualifiedname>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.cpp" line="24" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.cpp" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1_1EB2_1aa6d8b9ccdeea03640db903d130f9af47" prot="public" static="no" mutable="no">
        <type><ref refid="AMReX__Extension_8H_1ac05fa35b3db13c4599d7ad5fc51bef47" kindref="member">AMREX_EXPORT</ref> <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>AMREX_EXPORT int amrex::EB2::num_coarsen_opt</definition>
        <argsstring></argsstring>
        <name>num_coarsen_opt</name>
        <qualifiedname>amrex::EB2::num_coarsen_opt</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.cpp" line="25" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.cpp" bodystart="25" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="namespaceamrex_1_1EB2_1a44d269eae8c3bc0c9c0aff8961ed61be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EB2::Initialize</definition>
        <argsstring>()</argsstring>
        <name>Initialize</name>
        <qualifiedname>amrex::EB2::Initialize</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.cpp" line="27" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.cpp" bodystart="27" bodyend="35" declfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.H" declline="22" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1EB2_1afd3e2ed9a69b9e53f5b68eca49ee6fe6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EB2::Finalize</definition>
        <argsstring>()</argsstring>
        <name>Finalize</name>
        <qualifiedname>amrex::EB2::Finalize</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.cpp" line="37" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.cpp" bodystart="37" bodyend="40" declfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.H" declline="23" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1EB2_1a2258b3042676370ae01a2968e6962765" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::EB2::ExtendDomainFace</definition>
        <argsstring>()</argsstring>
        <name>ExtendDomainFace</name>
        <qualifiedname>amrex::EB2::ExtendDomainFace</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.cpp" line="42" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.cpp" bodystart="42" bodyend="45" declfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.H" declline="111" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1EB2_1a0077b0d85e112a8f4be7662f1cde1048" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::EB2::NumCoarsenOpt</definition>
        <argsstring>()</argsstring>
        <name>NumCoarsenOpt</name>
        <qualifiedname>amrex::EB2::NumCoarsenOpt</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.cpp" line="47" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.cpp" bodystart="47" bodyend="50" declfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.H" declline="112" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1EB2_1ab08bb163ec9d566ce748dd6c4a7f0385" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1EB2_1_1IndexSpace" kindref="compound">IndexSpace</ref> *</type>
        <definition>const IndexSpace * amrex::EB2::TopIndexSpaceIfPresent</definition>
        <argsstring>() noexcept</argsstring>
        <name>TopIndexSpaceIfPresent</name>
        <qualifiedname>amrex::EB2::TopIndexSpaceIfPresent</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.cpp" line="76" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.cpp" bodystart="76" bodyend="81" declfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.H" declline="65" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1EB2_1a027cac750cb881076f90fdcf0e9c5adc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EB2::Build</definition>
        <argsstring>(const Geometry &amp;geom, int required_coarsening_level, int max_coarsening_level, int ngrow, bool build_coarse_level_by_coarsening, bool a_extend_domain_face, int a_num_coarsen_opt)</argsstring>
        <name>Build</name>
        <qualifiedname>amrex::EB2::Build</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>required_coarsening_level</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>max_coarsening_level</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngrow</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>build_coarse_level_by_coarsening</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>a_extend_domain_face</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>a_num_coarsen_opt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.cpp" line="84" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.cpp" bodystart="84" bodyend="235" declfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.H" declline="131" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1EB2_1a72554dbd2be4d423812d6207b9c61aa3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EB2::addFineLevels</definition>
        <argsstring>(int num_new_fine_levels)</argsstring>
        <name>addFineLevels</name>
        <qualifiedname>amrex::EB2::addFineLevels</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_new_fine_levels</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.cpp" line="237" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.cpp" bodystart="237" bodyend="244" declfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.H" declline="150" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1EB2_1a0847e43de0f68d0a78bb75f9a6fefcd9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EB2::addRegularCoarseLevels</definition>
        <argsstring>(int num_new_coarse_levels)</argsstring>
        <name>addRegularCoarseLevels</name>
        <qualifiedname>amrex::EB2::addRegularCoarseLevels</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_new_coarse_levels</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.cpp" line="246" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.cpp" bodystart="246" bodyend="252" declfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.H" declline="152" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1EB2_1afb0afb98a8713d8031d524dd41ef94de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EB2::BuildFromChkptFile</definition>
        <argsstring>(std::string const &amp;fname, const Geometry &amp;geom, int required_coarsening_level, int max_coarsening_level, int ngrow, bool build_coarse_level_by_coarsening, bool a_extend_domain_face)</argsstring>
        <name>BuildFromChkptFile</name>
        <qualifiedname>amrex::EB2::BuildFromChkptFile</qualifiedname>
        <param>
          <type>std::string const &amp;</type>
          <declname>fname</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>required_coarsening_level</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>max_coarsening_level</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngrow</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>build_coarse_level_by_coarsening</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>a_extend_domain_face</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.cpp" line="255" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.cpp" bodystart="255" bodyend="266" declfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.H" declline="139" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1EB2_1a24ca6e81d1f15a678a6cb8ecb82de63e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::EB2::maxCoarseningLevel</definition>
        <argsstring>(const Geometry &amp;geom)</argsstring>
        <name>maxCoarseningLevel</name>
        <qualifiedname>amrex::EB2::maxCoarseningLevel</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.cpp" line="282" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.cpp" bodystart="282" bodyend="287" declfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.H" declline="147" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1EB2_1acb02398d0c8b02dae840acf4f35b886c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::EB2::maxCoarseningLevel</definition>
        <argsstring>(IndexSpace const *ebis, const Geometry &amp;geom)</argsstring>
        <name>maxCoarseningLevel</name>
        <qualifiedname>amrex::EB2::maxCoarseningLevel</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1EB2_1_1IndexSpace" kindref="compound">IndexSpace</ref> const *</type>
          <declname>ebis</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.cpp" line="290" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.cpp" bodystart="290" bodyend="295" declfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.H" declline="148" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1EB2_1ad7f55d0b557cb48b84323df22a77d9d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EB2::useEB2</definition>
        <argsstring>(bool)</argsstring>
        <name>useEB2</name>
        <qualifiedname>amrex::EB2::useEB2</qualifiedname>
        <param>
          <type>bool</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.H" line="20" column="6" declfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.H" declline="20" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1EB2_1a784ed5060f1c191f23c74d8b23f8d2a2" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1EB2_1_1IndexSpace" kindref="compound">IndexSpace</ref> *</type>
        <definition>const IndexSpace * amrex::EB2::TopIndexSpace</definition>
        <argsstring>() noexcept</argsstring>
        <name>TopIndexSpace</name>
        <qualifiedname>amrex::EB2::TopIndexSpace</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.H" line="66" column="25" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.H" bodystart="66" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1EB2_1ae3dd30a7f30d52e12f0f8ef8eb57f7fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename G</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::EB2::Build</definition>
        <argsstring>(const G &amp;gshop, const Geometry &amp;geom, int required_coarsening_level, int max_coarsening_level, int ngrow=4, bool build_coarse_level_by_coarsening=true, bool extend_domain_face=ExtendDomainFace(), int num_coarsen_opt=NumCoarsenOpt())</argsstring>
        <name>Build</name>
        <qualifiedname>amrex::EB2::Build</qualifiedname>
        <param>
          <type>const G &amp;</type>
          <declname>gshop</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>required_coarsening_level</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>max_coarsening_level</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngrow</declname>
          <defval>4</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>build_coarse_level_by_coarsening</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>extend_domain_face</declname>
          <defval><ref refid="namespaceamrex_1_1EB2_1a2258b3042676370ae01a2968e6962765" kindref="member">ExtendDomainFace</ref>()</defval>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_coarsen_opt</declname>
          <defval><ref refid="namespaceamrex_1_1EB2_1a0077b0d85e112a8f4be7662f1cde1048" kindref="member">NumCoarsenOpt</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.H" line="116" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.H" bodystart="116" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1EB2_1a8791492ceba31d5d14372a20721e3695" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::EB2::build_faces</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; EBCellFlag &gt; const &amp;cell, Array4&lt; Type_t &gt; const &amp;fx, Array4&lt; Type_t &gt; const &amp;fy, Array4&lt; Real &gt; const &amp;levset, Array4&lt; Real const &gt; const &amp;interx, Array4&lt; Real const &gt; const &amp;intery, Array4&lt; Real &gt; const &amp;apx, Array4&lt; Real &gt; const &amp;apy, Array4&lt; Real &gt; const &amp;fcx, Array4&lt; Real &gt; const &amp;fcy, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dx, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;problo, bool cover_multiple_cuts, int &amp;nsmallfaces) noexcept</argsstring>
        <name>build_faces</name>
        <qualifiedname>amrex::EB2::build_faces</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> &gt; const &amp;</type>
          <declname>cell</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1_1EB2_1ad5118c9d34449d5fcba10d141751b0d6" kindref="member">Type_t</ref> &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1_1EB2_1ad5118c9d34449d5fcba10d141751b0d6" kindref="member">Type_t</ref> &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>levset</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>interx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>intery</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>apx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>apy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fcx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fcy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>problo</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>cover_multiple_cuts</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &amp;</type>
          <declname>nsmallfaces</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_2D_C.cpp" line="198" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_2D_C.cpp" bodystart="198" bodyend="350"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1EB2_1ab93166de851db0edebb5ae2569b88cc1" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EB2::build_cells</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; EBCellFlag &gt; const &amp;cell, Array4&lt; Type_t &gt; const &amp;fx, Array4&lt; Type_t &gt; const &amp;fy, Array4&lt; Real &gt; const &amp;apx, Array4&lt; Real &gt; const &amp;apy, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dx, Array4&lt; Real &gt; const &amp;vfrac, Array4&lt; Real &gt; const &amp;vcent, Array4&lt; Real &gt; const &amp;barea, Array4&lt; Real &gt; const &amp;bcent, Array4&lt; Real &gt; const &amp;bnorm, Array4&lt; Real &gt; const &amp;levset, Real small_volfrac, Geometry const &amp;geom, bool extend_domain_face, int &amp;nsmallcells, int const nmulticuts) noexcept</argsstring>
        <name>build_cells</name>
        <qualifiedname>amrex::EB2::build_cells</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> &gt; const &amp;</type>
          <declname>cell</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1_1EB2_1ad5118c9d34449d5fcba10d141751b0d6" kindref="member">Type_t</ref> &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1_1EB2_1ad5118c9d34449d5fcba10d141751b0d6" kindref="member">Type_t</ref> &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>apx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>apy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>vfrac</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>vcent</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>barea</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>bcent</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>bnorm</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>levset</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>small_volfrac</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> const &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>extend_domain_face</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &amp;</type>
          <declname>nsmallcells</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const</type>
          <declname>nmulticuts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_2D_C.cpp" line="352" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_2D_C.cpp" bodystart="352" bodyend="454"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1EB2_1a82d4783a176cefd7ff69a7d61215a8c9" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EB2::set_connection_flags</definition>
        <argsstring>(Box const &amp;bxg1, Array4&lt; EBCellFlag &gt; const &amp;cell, Array4&lt; Type_t &gt; const &amp;fx, Array4&lt; Type_t &gt; const &amp;fy) noexcept</argsstring>
        <name>set_connection_flags</name>
        <qualifiedname>amrex::EB2::set_connection_flags</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> const &amp;</type>
          <declname>bxg1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> &gt; const &amp;</type>
          <declname>cell</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1_1EB2_1ad5118c9d34449d5fcba10d141751b0d6" kindref="member">Type_t</ref> &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1_1EB2_1ad5118c9d34449d5fcba10d141751b0d6" kindref="member">Type_t</ref> &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_2D_C.cpp" line="456" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_2D_C.cpp" bodystart="456" bodyend="498"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1EB2_1aefdb7b36e49b26a7d9d6c13f381bf5ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::EB2::amrex_eb2_build_types</definition>
        <argsstring>(Box const &amp;tbx, Box const &amp;bxg2, Array4&lt; Real const &gt; const &amp;s, Array4&lt; EBCellFlag &gt; const &amp;cell, Array4&lt; Type_t &gt; const &amp;fx, Array4&lt; Type_t &gt; const &amp;fy)</argsstring>
        <name>amrex_eb2_build_types</name>
        <qualifiedname>amrex::EB2::amrex_eb2_build_types</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> const &amp;</type>
          <declname>tbx</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> const &amp;</type>
          <declname>bxg2</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> &gt; const &amp;</type>
          <declname>cell</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1_1EB2_1ad5118c9d34449d5fcba10d141751b0d6" kindref="member">Type_t</ref> &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1_1EB2_1ad5118c9d34449d5fcba10d141751b0d6" kindref="member">Type_t</ref> &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_2D_C.H" line="9" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_2D_C.H" bodystart="9" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1EB2_1af82727cbe02923f0e85c79498083ac33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE int amrex::EB2::check_mvmc</definition>
        <argsstring>(int i, int j, int, Array4&lt; Real const &gt; const &amp;fine)</argsstring>
        <name>check_mvmc</name>
        <qualifiedname>amrex::EB2::check_mvmc</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>k</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fine</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_2D_C.H" line="77" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_2D_C.H" bodystart="77" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1EB2_1a1f2e881daa9ff0a537137a2e09129db9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE int amrex::EB2::coarsen_from_fine</definition>
        <argsstring>(int i, int j, Box const &amp;bx, int ngrow, Array4&lt; Real &gt; const &amp;cvol, Array4&lt; Real &gt; const &amp;ccent, Array4&lt; Real &gt; const &amp;cba, Array4&lt; Real &gt; const &amp;cbc, Array4&lt; Real &gt; const &amp;cbn, Array4&lt; Real &gt; const &amp;capx, Array4&lt; Real &gt; const &amp;capy, Array4&lt; Real &gt; const &amp;cfcx, Array4&lt; Real &gt; const &amp;cfcy, Array4&lt; Real &gt; const &amp;cecx, Array4&lt; Real &gt; const &amp;cecy, Array4&lt; EBCellFlag &gt; const &amp;cflag, Array4&lt; Real const &gt; const &amp;fvol, Array4&lt; Real const &gt; const &amp;fcent, Array4&lt; Real const &gt; const &amp;fba, Array4&lt; Real const &gt; const &amp;fbc, Array4&lt; Real const &gt; const &amp;fbn, Array4&lt; Real const &gt; const &amp;fapx, Array4&lt; Real const &gt; const &amp;fapy, Array4&lt; Real const &gt; const &amp;ffcx, Array4&lt; Real const &gt; const &amp;ffcy, Array4&lt; Real const &gt; const &amp;fecx, Array4&lt; Real const &gt; const &amp;fecy, Array4&lt; EBCellFlag const &gt; const &amp;fflag)</argsstring>
        <name>coarsen_from_fine</name>
        <qualifiedname>amrex::EB2::coarsen_from_fine</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngrow</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>cvol</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>ccent</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>cba</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>cbc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>cbn</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>capx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>capy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>cfcx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>cfcy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>cecx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>cecy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> &gt; const &amp;</type>
          <declname>cflag</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fvol</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcent</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fba</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fbc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fbn</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fapx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fapy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ffcx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ffcy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fecx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fecy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> const &gt; const &amp;</type>
          <declname>fflag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_2D_C.H" line="96" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_2D_C.H" bodystart="96" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1EB2_1a97bb46ef943ca61f6c69345a636c8f91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::EB2::build_cellflag_from_ap</definition>
        <argsstring>(int i, int j, Array4&lt; EBCellFlag &gt; const &amp;cflag, Array4&lt; Real const &gt; const &amp;apx, Array4&lt; Real const &gt; const &amp;apy)</argsstring>
        <name>build_cellflag_from_ap</name>
        <qualifiedname>amrex::EB2::build_cellflag_from_ap</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> &gt; const &amp;</type>
          <declname>cflag</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_2D_C.H" line="268" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_2D_C.H" bodystart="268" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1EB2_1aceb9b2336e3a1251dca7ab15420dbfcd" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::EB2::build_faces</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; EBCellFlag &gt; const &amp;cell, Array4&lt; Type_t &gt; const &amp;fx, Array4&lt; Type_t &gt; const &amp;fy, Array4&lt; Type_t &gt; const &amp;fz, Array4&lt; Type_t const &gt; const &amp;ex, Array4&lt; Type_t const &gt; const &amp;ey, Array4&lt; Type_t const &gt; const &amp;ez, Array4&lt; Real &gt; const &amp;levset, Array4&lt; Real const &gt; const &amp;interx, Array4&lt; Real const &gt; const &amp;intery, Array4&lt; Real const &gt; const &amp;interz, Array4&lt; Real &gt; const &amp;apx, Array4&lt; Real &gt; const &amp;apy, Array4&lt; Real &gt; const &amp;apz, Array4&lt; Real &gt; const &amp;fcx, Array4&lt; Real &gt; const &amp;fcy, Array4&lt; Real &gt; const &amp;fcz, Array4&lt; Real &gt; const &amp;m2x, Array4&lt; Real &gt; const &amp;m2y, Array4&lt; Real &gt; const &amp;m2z, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dx, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;problo, bool cover_multiple_cuts) noexcept</argsstring>
        <name>build_faces</name>
        <qualifiedname>amrex::EB2::build_faces</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> &gt; const &amp;</type>
          <declname>cell</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1_1EB2_1ad5118c9d34449d5fcba10d141751b0d6" kindref="member">Type_t</ref> &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1_1EB2_1ad5118c9d34449d5fcba10d141751b0d6" kindref="member">Type_t</ref> &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1_1EB2_1ad5118c9d34449d5fcba10d141751b0d6" kindref="member">Type_t</ref> &gt; const &amp;</type>
          <declname>fz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1_1EB2_1ad5118c9d34449d5fcba10d141751b0d6" kindref="member">Type_t</ref> const &gt; const &amp;</type>
          <declname>ex</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1_1EB2_1ad5118c9d34449d5fcba10d141751b0d6" kindref="member">Type_t</ref> const &gt; const &amp;</type>
          <declname>ey</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1_1EB2_1ad5118c9d34449d5fcba10d141751b0d6" kindref="member">Type_t</ref> const &gt; const &amp;</type>
          <declname>ez</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>levset</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>interx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>intery</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>interz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>apx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>apy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>apz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fcx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fcy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fcz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>m2x</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>m2y</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>m2z</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>problo</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>cover_multiple_cuts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_3D_C.cpp" line="359" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_3D_C.cpp" bodystart="359" bodyend="776"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1EB2_1a679c49e19ddd76e1b5193718e37bf6c1" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EB2::build_cells</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; EBCellFlag &gt; const &amp;cell, Array4&lt; Type_t &gt; const &amp;fx, Array4&lt; Type_t &gt; const &amp;fy, Array4&lt; Type_t &gt; const &amp;fz, Array4&lt; Real &gt; const &amp;apx, Array4&lt; Real &gt; const &amp;apy, Array4&lt; Real &gt; const &amp;apz, Array4&lt; Real const &gt; const &amp;fcx, Array4&lt; Real const &gt; const &amp;fcy, Array4&lt; Real const &gt; const &amp;fcz, Array4&lt; Real const &gt; const &amp;m2x, Array4&lt; Real const &gt; const &amp;m2y, Array4&lt; Real const &gt; const &amp;m2z, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dx, Array4&lt; Real &gt; const &amp;vfrac, Array4&lt; Real &gt; const &amp;vcent, Array4&lt; Real &gt; const &amp;barea, Array4&lt; Real &gt; const &amp;bcent, Array4&lt; Real &gt; const &amp;bnorm, Array4&lt; EBCellFlag &gt; const &amp;ctmp, Array4&lt; Real &gt; const &amp;levset, Real small_volfrac, Geometry const &amp;geom, bool extend_domain_face, bool cover_multiple_cuts, int &amp;nsmallcells, int &amp;nmulticuts) noexcept</argsstring>
        <name>build_cells</name>
        <qualifiedname>amrex::EB2::build_cells</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> &gt; const &amp;</type>
          <declname>cell</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1_1EB2_1ad5118c9d34449d5fcba10d141751b0d6" kindref="member">Type_t</ref> &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1_1EB2_1ad5118c9d34449d5fcba10d141751b0d6" kindref="member">Type_t</ref> &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1_1EB2_1ad5118c9d34449d5fcba10d141751b0d6" kindref="member">Type_t</ref> &gt; const &amp;</type>
          <declname>fz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>apx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>apy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>apz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>m2x</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>m2y</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>m2z</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>vfrac</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>vcent</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>barea</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>bcent</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>bnorm</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> &gt; const &amp;</type>
          <declname>ctmp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>levset</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>small_volfrac</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> const &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>extend_domain_face</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>cover_multiple_cuts</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &amp;</type>
          <declname>nsmallcells</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &amp;</type>
          <declname>nmulticuts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_3D_C.cpp" line="778" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_3D_C.cpp" bodystart="778" bodyend="942"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1EB2_1a9b7e8df1d1bc60db9850f4a8abc067cd" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EB2::set_connection_flags</definition>
        <argsstring>(Box const &amp;bx, Box const &amp;bxg1, Array4&lt; EBCellFlag &gt; const &amp;cell, Array4&lt; EBCellFlag &gt; const &amp;ctmp, Array4&lt; Type_t &gt; const &amp;fx, Array4&lt; Type_t &gt; const &amp;fy, Array4&lt; Type_t &gt; const &amp;fz) noexcept</argsstring>
        <name>set_connection_flags</name>
        <qualifiedname>amrex::EB2::set_connection_flags</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> const &amp;</type>
          <declname>bxg1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> &gt; const &amp;</type>
          <declname>cell</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> &gt; const &amp;</type>
          <declname>ctmp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1_1EB2_1ad5118c9d34449d5fcba10d141751b0d6" kindref="member">Type_t</ref> &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1_1EB2_1ad5118c9d34449d5fcba10d141751b0d6" kindref="member">Type_t</ref> &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1_1EB2_1ad5118c9d34449d5fcba10d141751b0d6" kindref="member">Type_t</ref> &gt; const &amp;</type>
          <declname>fz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_3D_C.cpp" line="944" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_3D_C.cpp" bodystart="944" bodyend="1130"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1EB2_1a202c73f9ebfcb787c75aad17804f9490" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::EB2::amrex_eb2_build_types</definition>
        <argsstring>(Box const &amp;tbx, Box const &amp;bxg2, Array4&lt; Real const &gt; const &amp;s, Array4&lt; EBCellFlag &gt; const &amp;cell, Array4&lt; Type_t &gt; const &amp;fx, Array4&lt; Type_t &gt; const &amp;fy, Array4&lt; Type_t &gt; const &amp;fz, Array4&lt; Type_t &gt; const &amp;ex, Array4&lt; Type_t &gt; const &amp;ey, Array4&lt; Type_t &gt; const &amp;ez)</argsstring>
        <name>amrex_eb2_build_types</name>
        <qualifiedname>amrex::EB2::amrex_eb2_build_types</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> const &amp;</type>
          <declname>tbx</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> const &amp;</type>
          <declname>bxg2</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> &gt; const &amp;</type>
          <declname>cell</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1_1EB2_1ad5118c9d34449d5fcba10d141751b0d6" kindref="member">Type_t</ref> &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1_1EB2_1ad5118c9d34449d5fcba10d141751b0d6" kindref="member">Type_t</ref> &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1_1EB2_1ad5118c9d34449d5fcba10d141751b0d6" kindref="member">Type_t</ref> &gt; const &amp;</type>
          <declname>fz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1_1EB2_1ad5118c9d34449d5fcba10d141751b0d6" kindref="member">Type_t</ref> &gt; const &amp;</type>
          <declname>ex</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1_1EB2_1ad5118c9d34449d5fcba10d141751b0d6" kindref="member">Type_t</ref> &gt; const &amp;</type>
          <declname>ey</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1_1EB2_1ad5118c9d34449d5fcba10d141751b0d6" kindref="member">Type_t</ref> &gt; const &amp;</type>
          <declname>ez</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_3D_C.H" line="9" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_3D_C.H" bodystart="9" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1EB2_1ae3a379167092afad59e2ece6617e7e46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE int amrex::EB2::coarsen_from_fine</definition>
        <argsstring>(int i, int j, int k, Box const &amp;bx, int ngrow, Array4&lt; Real &gt; const &amp;cvol, Array4&lt; Real &gt; const &amp;ccent, Array4&lt; Real &gt; const &amp;cba, Array4&lt; Real &gt; const &amp;cbc, Array4&lt; Real &gt; const &amp;cbn, Array4&lt; Real &gt; const &amp;capx, Array4&lt; Real &gt; const &amp;capy, Array4&lt; Real &gt; const &amp;capz, Array4&lt; Real &gt; const &amp;cfcx, Array4&lt; Real &gt; const &amp;cfcy, Array4&lt; Real &gt; const &amp;cfcz, Array4&lt; Real &gt; const &amp;cecx, Array4&lt; Real &gt; const &amp;cecy, Array4&lt; Real &gt; const &amp;cecz, Array4&lt; EBCellFlag &gt; const &amp;cflag, Array4&lt; Real const &gt; const &amp;fvol, Array4&lt; Real const &gt; const &amp;fcent, Array4&lt; Real const &gt; const &amp;fba, Array4&lt; Real const &gt; const &amp;fbc, Array4&lt; Real const &gt; const &amp;fbn, Array4&lt; Real const &gt; const &amp;fapx, Array4&lt; Real const &gt; const &amp;fapy, Array4&lt; Real const &gt; const &amp;fapz, Array4&lt; Real const &gt; const &amp;ffcx, Array4&lt; Real const &gt; const &amp;ffcy, Array4&lt; Real const &gt; const &amp;ffcz, Array4&lt; Real const &gt; const &amp;fecx, Array4&lt; Real const &gt; const &amp;fecy, Array4&lt; Real const &gt; const &amp;fecz, Array4&lt; EBCellFlag const &gt; const &amp;fflag)</argsstring>
        <name>coarsen_from_fine</name>
        <qualifiedname>amrex::EB2::coarsen_from_fine</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngrow</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>cvol</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>ccent</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>cba</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>cbc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>cbn</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>capx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>capy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>capz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>cfcx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>cfcy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>cfcz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>cecx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>cecy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>cecz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> &gt; const &amp;</type>
          <declname>cflag</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fvol</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcent</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fba</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fbc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fbn</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fapx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fapy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fapz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ffcx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ffcy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ffcz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fecx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fecy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fecz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> const &gt; const &amp;</type>
          <declname>fflag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_3D_C.H" line="307" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_3D_C.H" bodystart="307" bodyend="629"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1EB2_1ad4baf361d00889173d59e758d4db781a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::EB2::build_cellflag_from_ap</definition>
        <argsstring>(int i, int j, int k, Array4&lt; EBCellFlag &gt; const &amp;cflag, Array4&lt; Real const &gt; const &amp;apx, Array4&lt; Real const &gt; const &amp;apy, Array4&lt; Real const &gt; const &amp;apz)</argsstring>
        <name>build_cellflag_from_ap</name>
        <qualifiedname>amrex::EB2::build_cellflag_from_ap</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> &gt; const &amp;</type>
          <declname>cflag</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_3D_C.H" line="632" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_3D_C.H" bodystart="632" bodyend="748"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1EB2_1ae800250c2c38174f8c7e09534afa8f72" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EB2::intercept_to_edge_centroid</definition>
        <argsstring>(AMREX_D_DECL(Array4&lt; Real &gt; const &amp;excent, Array4&lt; Real &gt; const &amp;eycent, Array4&lt; Real &gt; const &amp;ezcent), AMREX_D_DECL(Array4&lt; Type_t const &gt; const &amp;fx, Array4&lt; Type_t const &gt; const &amp;fy, Array4&lt; Type_t const &gt; const &amp;fz), Array4&lt; Real const &gt; const &amp;levset, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dx, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;problo) noexcept</argsstring>
        <name>intercept_to_edge_centroid</name>
        <qualifiedname>amrex::EB2::intercept_to_edge_centroid</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1a8de829410ed15dbc56e4dafc9bc6ea69a68b0c60ae4f5670ee8d0ad5dda84d0fd" kindref="member">AMREX_D_DECL</ref>(<ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;excent, <ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;eycent, <ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;ezcent)</type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a8de829410ed15dbc56e4dafc9bc6ea69a68b0c60ae4f5670ee8d0ad5dda84d0fd" kindref="member">AMREX_D_DECL</ref>(<ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1_1EB2_1ad5118c9d34449d5fcba10d141751b0d6" kindref="member">Type_t</ref> const &gt; const &amp;fx, <ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1_1EB2_1ad5118c9d34449d5fcba10d141751b0d6" kindref="member">Type_t</ref> const &gt; const &amp;fy, <ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1_1EB2_1ad5118c9d34449d5fcba10d141751b0d6" kindref="member">Type_t</ref> const &gt; const &amp;fz)</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>levset</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>problo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_ND_C.cpp" line="5" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_ND_C.cpp" bodystart="5" bodyend="65" declfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_C.H" declline="82" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1EB2_1a26665fe0c584ed57e499dbbcd2ace388" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; IsGPUable&lt; F &gt;::value &gt; *</type>
            <declname>FOO</declname>
            <defname>FOO</defname>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> Real</type>
        <definition>AMREX_GPU_HOST_DEVICE Real amrex::EB2::IF_f</definition>
        <argsstring>(F const &amp;f, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;p) noexcept</argsstring>
        <name>IF_f</name>
        <qualifiedname>amrex::EB2::IF_f</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_GeometryShop.H" line="21" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_GeometryShop.H" bodystart="21" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1EB2_1afe01e9165cc64a28a0b7e9ca72fc43ca" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> Real</type>
        <definition>AMREX_GPU_HOST_DEVICE Real amrex::EB2::BrentRootFinder</definition>
        <argsstring>(GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;lo, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;hi, int rangedir, F const &amp;f) noexcept</argsstring>
        <name>BrentRootFinder</name>
        <qualifiedname>amrex::EB2::BrentRootFinder</qualifiedname>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>lo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>hi</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>rangedir</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> const &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_GeometryShop.H" line="42" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_GeometryShop.H" bodystart="42" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1EB2_1af4b0318e71437c1f5c0e243c47bf531d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1EB2_1_1GeometryShop" kindref="compound">GeometryShop</ref>&lt; std::decay_t&lt; <ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> &gt; &gt;</type>
        <definition>GeometryShop&lt; std::decay_t&lt; F &gt; &gt; amrex::EB2::makeShop</definition>
        <argsstring>(F &amp;&amp;f)</argsstring>
        <name>makeShop</name>
        <qualifiedname>amrex::EB2::makeShop</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_GeometryShop.H" line="523" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_GeometryShop.H" bodystart="523" bodyend="526"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1EB2_1a276f4cb291c4ad9bee772b14e3e96ade" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class R</type>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1EB2_1_1GeometryShop" kindref="compound">GeometryShop</ref>&lt; std::decay_t&lt; <ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> &gt;, std::decay_t&lt; R &gt; &gt;</type>
        <definition>GeometryShop&lt; std::decay_t&lt; F &gt;, std::decay_t&lt; R &gt; &gt; amrex::EB2::makeShop</definition>
        <argsstring>(F &amp;&amp;f, R &amp;&amp;r)</argsstring>
        <name>makeShop</name>
        <qualifiedname>amrex::EB2::makeShop</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>R &amp;&amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_GeometryShop.H" line="530" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_GeometryShop.H" bodystart="530" bodyend="535"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1EB2_1aa3173c6e0e35482e10a5f23ff74bc66c" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="classamrex_1_1EB2_1_1ComplementIF" kindref="compound">ComplementIF</ref>&lt; std::decay_t&lt; <ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> &gt; &gt;</type>
        <definition>constexpr ComplementIF&lt; std::decay_t&lt; F &gt; &gt; amrex::EB2::makeComplement</definition>
        <argsstring>(F &amp;&amp;f)</argsstring>
        <name>makeComplement</name>
        <qualifiedname>amrex::EB2::makeComplement</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Complement.H" line="44" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Complement.H" bodystart="44" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1EB2_1a024696926e0bd36bdf623e361774fde2" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class G</type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="classamrex_1_1EB2_1_1DifferenceIF" kindref="compound">DifferenceIF</ref>&lt; std::decay_t&lt; <ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> &gt;, std::decay_t&lt; G &gt; &gt;</type>
        <definition>constexpr DifferenceIF&lt; std::decay_t&lt; F &gt;, std::decay_t&lt; G &gt; &gt; amrex::EB2::makeDifference</definition>
        <argsstring>(F &amp;&amp;f, G &amp;&amp;g)</argsstring>
        <name>makeDifference</name>
        <qualifiedname>amrex::EB2::makeDifference</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>G &amp;&amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Difference.H" line="58" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Difference.H" bodystart="58" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1EB2_1a626a4a8b4491ce5841d36073b1106e2d" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="classamrex_1_1EB2_1_1ExtrusionIF" kindref="compound">ExtrusionIF</ref>&lt; std::decay_t&lt; <ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> &gt; &gt;</type>
        <definition>constexpr ExtrusionIF&lt; std::decay_t&lt; F &gt; &gt; amrex::EB2::extrude</definition>
        <argsstring>(F &amp;&amp;f, int direction)</argsstring>
        <name>extrude</name>
        <qualifiedname>amrex::EB2::extrude</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>direction</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Extrusion.H" line="58" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Extrusion.H" bodystart="58" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1EB2_1ae0d790552342d9c0ad3e66109cae2b64" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>Fs</declname>
            <defname>Fs</defname>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="classamrex_1_1EB2_1_1IntersectionIF" kindref="compound">IntersectionIF</ref>&lt; std::decay_t&lt; Fs &gt; ... &gt;</type>
        <definition>constexpr IntersectionIF&lt; std::decay_t&lt; Fs &gt; ... &gt; amrex::EB2::makeIntersection</definition>
        <argsstring>(Fs &amp;&amp;... fs)</argsstring>
        <name>makeIntersection</name>
        <qualifiedname>amrex::EB2::makeIntersection</qualifiedname>
        <param>
          <type>Fs &amp;&amp;...</type>
          <declname>fs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Intersection.H" line="91" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Intersection.H" bodystart="91" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1EB2_1a0c67902fe3875f5f8507b219fea04f7b" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="classamrex_1_1EB2_1_1LatheIF" kindref="compound">LatheIF</ref>&lt; std::decay_t&lt; <ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> &gt; &gt;</type>
        <definition>constexpr LatheIF&lt; std::decay_t&lt; F &gt; &gt; amrex::EB2::lathe</definition>
        <argsstring>(F &amp;&amp;f)</argsstring>
        <name>lathe</name>
        <qualifiedname>amrex::EB2::lathe</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Lathe.H" line="55" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Lathe.H" bodystart="55" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1EB2_1ab4be176c56d2cfbc6db9099e1952c3bb" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="classamrex_1_1EB2_1_1RotationIF" kindref="compound">RotationIF</ref>&lt; std::decay_t&lt; <ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> &gt; &gt;</type>
        <definition>constexpr RotationIF&lt; std::decay_t&lt; F &gt; &gt; amrex::EB2::rotate</definition>
        <argsstring>(F &amp;&amp;f, const Real angle, const int dir)</argsstring>
        <name>rotate</name>
        <qualifiedname>amrex::EB2::rotate</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>const Real</type>
          <declname>angle</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Rotation.H" line="110" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Rotation.H" bodystart="110" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1EB2_1a9df657737496b52f73cbd1b5abc1f4e8" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="classamrex_1_1EB2_1_1ScaleIF" kindref="compound">ScaleIF</ref>&lt; std::decay_t&lt; <ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> &gt; &gt;</type>
        <definition>constexpr ScaleIF&lt; std::decay_t&lt; F &gt; &gt; amrex::EB2::scale</definition>
        <argsstring>(F &amp;&amp;f, const RealArray &amp;scalefactor)</argsstring>
        <name>scale</name>
        <qualifiedname>amrex::EB2::scale</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a9de48c04056551924746c42f9eda3c8f" kindref="member">RealArray</ref> &amp;</type>
          <declname>scalefactor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Scale.H" line="56" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Scale.H" bodystart="56" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1EB2_1a12c9130dbff8389ed10957c652da6ca7" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="classamrex_1_1EB2_1_1TranslationIF" kindref="compound">TranslationIF</ref>&lt; std::decay_t&lt; <ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> &gt; &gt;</type>
        <definition>constexpr TranslationIF&lt; std::decay_t&lt; F &gt; &gt; amrex::EB2::translate</definition>
        <argsstring>(F &amp;&amp;f, const RealArray &amp;offset)</argsstring>
        <name>translate</name>
        <qualifiedname>amrex::EB2::translate</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a9de48c04056551924746c42f9eda3c8f" kindref="member">RealArray</ref> &amp;</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Translation.H" line="52" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Translation.H" bodystart="52" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1EB2_1a3274debe16b7ba538e264790ed9f05c3" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>Fs</declname>
            <defname>Fs</defname>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="classamrex_1_1EB2_1_1UnionIF" kindref="compound">UnionIF</ref>&lt; std::decay_t&lt; Fs &gt; ... &gt;</type>
        <definition>constexpr UnionIF&lt; std::decay_t&lt; Fs &gt; ... &gt; amrex::EB2::makeUnion</definition>
        <argsstring>(Fs &amp;&amp;... fs)</argsstring>
        <name>makeUnion</name>
        <qualifiedname>amrex::EB2::makeUnion</qualifiedname>
        <param>
          <type>Fs &amp;&amp;...</type>
          <declname>fs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Union.H" line="91" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Union.H" bodystart="91" bodyend="94"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="32" column="1"/>
  </compounddef>
</doxygen>
