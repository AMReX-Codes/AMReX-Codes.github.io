<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="namespaceamrex_1_1EB2" kind="namespace" language="C++">
    <compoundname>amrex::EB2</compoundname>
    <innerclass refid="classamrex_1_1EB2_1_1AllRegularIF" prot="public">amrex::EB2::AllRegularIF</innerclass>
    <innerclass refid="classamrex_1_1EB2_1_1BoxIF" prot="public">amrex::EB2::BoxIF</innerclass>
    <innerclass refid="structamrex_1_1EB2_1_1Cell" prot="public">amrex::EB2::Cell</innerclass>
    <innerclass refid="classamrex_1_1EB2_1_1ComplementIF" prot="public">amrex::EB2::ComplementIF</innerclass>
    <innerclass refid="classamrex_1_1EB2_1_1CylinderIF" prot="public">amrex::EB2::CylinderIF</innerclass>
    <innerclass refid="classamrex_1_1EB2_1_1DifferenceIF" prot="public">amrex::EB2::DifferenceIF</innerclass>
    <innerclass refid="structamrex_1_1EB2_1_1Edge" prot="public">amrex::EB2::Edge</innerclass>
    <innerclass refid="classamrex_1_1EB2_1_1EllipsoidIF" prot="public">amrex::EB2::EllipsoidIF</innerclass>
    <innerclass refid="classamrex_1_1EB2_1_1ExtrusionIF" prot="public">amrex::EB2::ExtrusionIF</innerclass>
    <innerclass refid="structamrex_1_1EB2_1_1Face" prot="public">amrex::EB2::Face</innerclass>
    <innerclass refid="classamrex_1_1EB2_1_1GeometryShop" prot="public">amrex::EB2::GeometryShop</innerclass>
    <innerclass refid="classamrex_1_1EB2_1_1GFab" prot="public">amrex::EB2::GFab</innerclass>
    <innerclass refid="classamrex_1_1EB2_1_1GShopLevel" prot="public">amrex::EB2::GShopLevel</innerclass>
    <innerclass refid="classamrex_1_1EB2_1_1IndexSpace" prot="public">amrex::EB2::IndexSpace</innerclass>
    <innerclass refid="classamrex_1_1EB2_1_1IndexSpaceImp" prot="public">amrex::EB2::IndexSpaceImp</innerclass>
    <innerclass refid="classamrex_1_1EB2_1_1IntersectionIF" prot="public">amrex::EB2::IntersectionIF</innerclass>
    <innerclass refid="structamrex_1_1EB2_1_1IsGPUable" prot="public">amrex::EB2::IsGPUable</innerclass>
    <innerclass refid="structamrex_1_1EB2_1_1IsGPUable_3_01ComplementIF_3_01F_01_4_00_01typename_01std_1_1enable__if_3_439214b16f92fe663637b42c0a5a5552" prot="public">amrex::EB2::IsGPUable&lt; ComplementIF&lt; F &gt;, typename std::enable_if&lt; IsGPUable&lt; F &gt;::value &gt;::type &gt;</innerclass>
    <innerclass refid="structamrex_1_1EB2_1_1IsGPUable_3_01D_00_01typename_01std_1_1enable__if_3_01std_1_1is__base__of_e7975428109c6f3d89c9f8ba8c25626f" prot="public">amrex::EB2::IsGPUable&lt; D, typename std::enable_if&lt; std::is_base_of&lt; GPUable, D &gt;::value &gt;::type &gt;</innerclass>
    <innerclass refid="structamrex_1_1EB2_1_1IsGPUable_3_01DifferenceIF_3_01F_00_01G_01_4_00_01typename_01std_1_1enableac26215ba9e0277ee7231118dc9a8a74" prot="public">amrex::EB2::IsGPUable&lt; DifferenceIF&lt; F, G &gt;, typename std::enable_if&lt; IsGPUable&lt; F &gt;::value &amp;&amp;IsGPUable&lt; G &gt;::value &gt;::type &gt;</innerclass>
    <innerclass refid="structamrex_1_1EB2_1_1IsGPUable_3_01ExtrusionIF_3_01F_01_4_00_01typename_01std_1_1enable__if_3_09ce565cdabb0194a6744226a21d9e2e3" prot="public">amrex::EB2::IsGPUable&lt; ExtrusionIF&lt; F &gt;, typename std::enable_if&lt; IsGPUable&lt; F &gt;::value &gt;::type &gt;</innerclass>
    <innerclass refid="structamrex_1_1EB2_1_1IsGPUable_3_01IntersectionIF_3_01F_01_4_00_01typename_01std_1_1enable__if_f70fe5a0af601f73704d1e7de99c14ec" prot="public">amrex::EB2::IsGPUable&lt; IntersectionIF&lt; F &gt;, typename std::enable_if&lt; IsGPUable&lt; F &gt;::value &gt;::type &gt;</innerclass>
    <innerclass refid="structamrex_1_1EB2_1_1IsGPUable_3_01IntersectionIF_3_01Head_00_01Tail_8_8_8_01_4_00_01typename_0aa6c0e2bc9cf84a2cc942d5a159f7839" prot="public">amrex::EB2::IsGPUable&lt; IntersectionIF&lt; Head, Tail... &gt;, typename std::enable_if&lt; IsGPUable&lt; Head &gt;::value &gt;::type &gt;</innerclass>
    <innerclass refid="structamrex_1_1EB2_1_1IsGPUable_3_01LatheIF_3_01F_01_4_00_01typename_01std_1_1enable__if_3_01IsG870c79fcc93b5ecb25be1ee2def9f2cf" prot="public">amrex::EB2::IsGPUable&lt; LatheIF&lt; F &gt;, typename std::enable_if&lt; IsGPUable&lt; F &gt;::value &gt;::type &gt;</innerclass>
    <innerclass refid="structamrex_1_1EB2_1_1IsGPUable_3_01RotationIF_3_01F_01_4_00_01typename_01std_1_1enable__if_3_01b6ccedc39c7ac77911bc5f24c7580486" prot="public">amrex::EB2::IsGPUable&lt; RotationIF&lt; F &gt;, typename std::enable_if&lt; IsGPUable&lt; F &gt;::value &gt;::type &gt;</innerclass>
    <innerclass refid="structamrex_1_1EB2_1_1IsGPUable_3_01ScaleIF_3_01F_01_4_00_01typename_01std_1_1enable__if_3_01IsGb66e057f4b07510742d8ce2847c0a0a3" prot="public">amrex::EB2::IsGPUable&lt; ScaleIF&lt; F &gt;, typename std::enable_if&lt; IsGPUable&lt; F &gt;::value &gt;::type &gt;</innerclass>
    <innerclass refid="structamrex_1_1EB2_1_1IsGPUable_3_01UnionIF_3_01F_01_4_00_01typename_01std_1_1enable__if_3_01IsG689753bc6f6f97a7132aea5fbd359250" prot="public">amrex::EB2::IsGPUable&lt; UnionIF&lt; F &gt;, typename std::enable_if&lt; IsGPUable&lt; F &gt;::value &gt;::type &gt;</innerclass>
    <innerclass refid="structamrex_1_1EB2_1_1IsGPUable_3_01UnionIF_3_01Head_00_01Tail_8_8_8_01_4_00_01typename_01std_1_0106a99ebe3263da4342cdd68c621473" prot="public">amrex::EB2::IsGPUable&lt; UnionIF&lt; Head, Tail... &gt;, typename std::enable_if&lt; IsGPUable&lt; Head &gt;::value &gt;::type &gt;</innerclass>
    <innerclass refid="classamrex_1_1EB2_1_1LatheIF" prot="public">amrex::EB2::LatheIF</innerclass>
    <innerclass refid="classamrex_1_1EB2_1_1Level" prot="public">amrex::EB2::Level</innerclass>
    <innerclass refid="classamrex_1_1EB2_1_1MultiGFab" prot="public">amrex::EB2::MultiGFab</innerclass>
    <innerclass refid="structamrex_1_1EB2_1_1Neighbor" prot="public">amrex::EB2::Neighbor</innerclass>
    <innerclass refid="classamrex_1_1EB2_1_1PlaneIF" prot="public">amrex::EB2::PlaneIF</innerclass>
    <innerclass refid="classamrex_1_1EB2_1_1PolynomialIF" prot="public">amrex::EB2::PolynomialIF</innerclass>
    <innerclass refid="classamrex_1_1EB2_1_1PolyTerm" prot="public">amrex::EB2::PolyTerm</innerclass>
    <innerclass refid="classamrex_1_1EB2_1_1RotationIF" prot="public">amrex::EB2::RotationIF</innerclass>
    <innerclass refid="classamrex_1_1EB2_1_1ScaleIF" prot="public">amrex::EB2::ScaleIF</innerclass>
    <innerclass refid="classamrex_1_1EB2_1_1SphereIF" prot="public">amrex::EB2::SphereIF</innerclass>
    <innerclass refid="classamrex_1_1EB2_1_1SplineIF" prot="public">amrex::EB2::SplineIF</innerclass>
    <innerclass refid="classamrex_1_1EB2_1_1TorusIF" prot="public">amrex::EB2::TorusIF</innerclass>
    <innerclass refid="classamrex_1_1EB2_1_1TranslationIF" prot="public">amrex::EB2::TranslationIF</innerclass>
    <innerclass refid="classamrex_1_1EB2_1_1UnionIF" prot="public">amrex::EB2::UnionIF</innerclass>
    <innerclass refid="structamrex_1_1EB2_1_1Vertex" prot="public">amrex::EB2::Vertex</innerclass>
    <innernamespace refid="namespaceamrex_1_1EB2_1_1IIF__detail">amrex::EB2::IIF_detail</innernamespace>
    <innernamespace refid="namespaceamrex_1_1EB2_1_1Type">amrex::EB2::Type</innernamespace>
    <innernamespace refid="namespaceamrex_1_1EB2_1_1UIF__detail">amrex::EB2::UIF_detail</innernamespace>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespaceamrex_1_1EB2_1a853647130b0422fbb57870513c44b89b" prot="public" static="no">
        <type>std::pair&lt; <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref>, int &gt;</type>
        <definition>using amrex::EB2::VertexID = typedef std::pair&lt;IntVect,int&gt;</definition>
        <argsstring></argsstring>
        <name>VertexID</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB2_Graph.H" line="26" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB2_Graph.H" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1_1EB2_1ad5118c9d34449d5fcba10d141751b0d6" prot="public" static="no">
        <type>uint32_t</type>
        <definition>using amrex::EB2::Type_t = typedef uint32_t</definition>
        <argsstring></argsstring>
        <name>Type_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB2_Graph.H" line="34" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB2_Graph.H" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1_1EB2_1a0838e8d3d2f11703bb21ebb6bddbb1b1" prot="public" static="no">
        <type>std::unordered_map&lt; <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref>, <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="structamrex_1_1EB2_1_1Vertex" kindref="compound">Vertex</ref> &gt;, <ref refid="classamrex_1_1IntVect_1a0da0ad772b267330594cbcc72bb48c5c" kindref="member">IntVect::hasher</ref> &gt;</type>
        <definition>using amrex::EB2::Graph = typedef std::unordered_map&lt;IntVect, Vector&lt;Vertex&gt;, IntVect::hasher&gt;</definition>
        <argsstring></argsstring>
        <name>Graph</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB2_Graph.H" line="84" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB2_Graph.H" bodystart="84" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespaceamrex_1_1EB2_1a6a03e6a896276bd89190ad6eee9566e1" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int amrex::EB2::max_grid_size</definition>
        <argsstring></argsstring>
        <name>max_grid_size</name>
        <initializer>= 64</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB2.cpp" line="20" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB2.cpp" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1_1EB2_1af9f8eda7d77f8705392a61722d28737f" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::EB2::compare_with_ch_eb</definition>
        <argsstring></argsstring>
        <name>compare_with_ch_eb</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB2.cpp" line="21" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB2.cpp" bodystart="21" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceamrex_1_1EB2_1a44d269eae8c3bc0c9c0aff8961ed61be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EB2::Initialize</definition>
        <argsstring>()</argsstring>
        <name>Initialize</name>
        <briefdescription>
<para>called in <ref refid="namespaceamrex_1a187cdb4f4273fdf9bcad01ac8e3fcc4d" kindref="member">amrex::Initialize()</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB2.cpp" line="23" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB2.cpp" bodystart="23" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1EB2_1afd3e2ed9a69b9e53f5b68eca49ee6fe6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EB2::Finalize</definition>
        <argsstring>()</argsstring>
        <name>Finalize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB2.cpp" line="32" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB2.cpp" bodystart="32" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1EB2_1ab08bb163ec9d566ce748dd6c4a7f0385" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1EB2_1_1IndexSpace" kindref="compound">IndexSpace</ref> *</type>
        <definition>const IndexSpace * amrex::EB2::TopIndexSpaceIfPresent</definition>
        <argsstring>() noexcept</argsstring>
        <name>TopIndexSpaceIfPresent</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB2.cpp" line="61" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB2.cpp" bodystart="61" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1EB2_1a6d2f867ae0ec004f8b26fb0346086b1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EB2::Build</definition>
        <argsstring>(const Geometry &amp;geom, int required_coarsening_level, int max_coarsening_level, int ngrow)</argsstring>
        <name>Build</name>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>int</type>
          <declname>required_coarsening_level</declname>
        </param>
        <param>
          <type>int</type>
          <declname>max_coarsening_level</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ngrow</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB2.cpp" line="69" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB2.cpp" bodystart="69" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1EB2_1a24ca6e81d1f15a678a6cb8ecb82de63e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::EB2::maxCoarseningLevel</definition>
        <argsstring>(const Geometry &amp;geom)</argsstring>
        <name>maxCoarseningLevel</name>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB2.cpp" line="195" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB2.cpp" bodystart="195" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1EB2_1acb02398d0c8b02dae840acf4f35b886c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::EB2::maxCoarseningLevel</definition>
        <argsstring>(IndexSpace const *ebis, const Geometry &amp;geom)</argsstring>
        <name>maxCoarseningLevel</name>
        <param>
          <type><ref refid="classamrex_1_1EB2_1_1IndexSpace" kindref="compound">IndexSpace</ref> const *</type>
          <declname>ebis</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB2.cpp" line="203" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB2.cpp" bodystart="203" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1EB2_1ad7f55d0b557cb48b84323df22a77d9d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EB2::useEB2</definition>
        <argsstring>(bool)</argsstring>
        <name>useEB2</name>
        <param>
          <type>bool</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB2.H" line="20" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1EB2_1a8530ce06d34d311dcf665910e91189bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename G</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::EB2::Build</definition>
        <argsstring>(const G &amp;gshop, const Geometry &amp;geom, int required_coarsening_level, int max_coarsening_level, int ngrow=4)</argsstring>
        <name>Build</name>
        <param>
          <type>const G &amp;</type>
          <declname>gshop</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>int</type>
          <declname>required_coarsening_level</declname>
        </param>
        <param>
          <type>int</type>
          <declname>max_coarsening_level</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ngrow</declname>
          <defval>4</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB2.H" line="93" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB2.H" bodystart="93" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1EB2_1af85ab581cd4980e9d47fafeb2b010ea4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EB2::build_faces</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; EBCellFlag &gt; const &amp;cell, Array4&lt; Type_t &gt; const &amp;fx, Array4&lt; Type_t &gt; const &amp;fy, Array4&lt; Real const  &gt; const &amp;levset, Array4&lt; Real const  &gt; const &amp;interx, Array4&lt; Real const  &gt; const &amp;intery, Array4&lt; Real &gt; const &amp;apx, Array4&lt; Real &gt; const &amp;apy, Array4&lt; Real &gt; const &amp;fcx, Array4&lt; Real &gt; const &amp;fcy, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dx, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;problo)</argsstring>
        <name>build_faces</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> &gt; const &amp;</type>
          <declname>cell</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1_1EB2_1ad5118c9d34449d5fcba10d141751b0d6" kindref="member">Type_t</ref> &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1_1EB2_1ad5118c9d34449d5fcba10d141751b0d6" kindref="member">Type_t</ref> &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>levset</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>interx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>intery</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>apx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>apy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fcx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fcy</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a317082290117984ef29e149750e2c7a8" kindref="member">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dx</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a317082290117984ef29e149750e2c7a8" kindref="member">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>problo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB2_2D_C.cpp" line="5" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB2_2D_C.cpp" bodystart="5" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1EB2_1a4326a942766ad3edeadf4eeb7499608d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EB2::build_cells</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; EBCellFlag &gt; const &amp;cell, Array4&lt; Type_t &gt; const &amp;fx, Array4&lt; Type_t &gt; const &amp;fy, Array4&lt; Real &gt; const &amp;apx, Array4&lt; Real &gt; const &amp;apy, Array4&lt; Real &gt; const &amp;vfrac, Array4&lt; Real &gt; const &amp;vcent, Array4&lt; Real &gt; const &amp;barea, Array4&lt; Real &gt; const &amp;bcent, Array4&lt; Real &gt; const &amp;bnorm)</argsstring>
        <name>build_cells</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> &gt; const &amp;</type>
          <declname>cell</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1_1EB2_1ad5118c9d34449d5fcba10d141751b0d6" kindref="member">Type_t</ref> &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1_1EB2_1ad5118c9d34449d5fcba10d141751b0d6" kindref="member">Type_t</ref> &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>apx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>apy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>vfrac</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>vcent</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>barea</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>bcent</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>bnorm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB2_2D_C.cpp" line="116" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB2_2D_C.cpp" bodystart="116" bodyend="317"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1EB2_1a7ba57151d47433c3db4f9e62154c159f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::EB2::amrex_eb2_build_types</definition>
        <argsstring>(Box const &amp;tbx, Box const &amp;bxg2, Array4&lt; Real const  &gt; const &amp;s, Array4&lt; EBCellFlag &gt; const &amp;cell, Array4&lt; Type_t &gt; const &amp;fx, Array4&lt; Type_t &gt; const &amp;fy)</argsstring>
        <name>amrex_eb2_build_types</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>tbx</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bxg2</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> &gt; const &amp;</type>
          <declname>cell</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1_1EB2_1ad5118c9d34449d5fcba10d141751b0d6" kindref="member">Type_t</ref> &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1_1EB2_1ad5118c9d34449d5fcba10d141751b0d6" kindref="member">Type_t</ref> &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB2_2D_C.H" line="8" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB2_2D_C.H" bodystart="8" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1EB2_1a19be3d964abd6337f91d608c0f46fa3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EB2::build_faces</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; EBCellFlag &gt; const &amp;cell, Array4&lt; Type_t &gt; const &amp;fx, Array4&lt; Type_t &gt; const &amp;fy, Array4&lt; Type_t &gt; const &amp;fz, Array4&lt; Type_t &gt; const &amp;ex, Array4&lt; Type_t &gt; const &amp;ey, Array4&lt; Type_t &gt; const &amp;ez, Array4&lt; Real const  &gt; const &amp;levset, Array4&lt; Real const  &gt; const &amp;interx, Array4&lt; Real const  &gt; const &amp;intery, Array4&lt; Real const  &gt; const &amp;interz, Array4&lt; Real &gt; const &amp;apx, Array4&lt; Real &gt; const &amp;apy, Array4&lt; Real &gt; const &amp;apz, Array4&lt; Real &gt; const &amp;fcx, Array4&lt; Real &gt; const &amp;fcy, Array4&lt; Real &gt; const &amp;fcz, Array4&lt; Real &gt; const &amp;m2x, Array4&lt; Real &gt; const &amp;m2y, Array4&lt; Real &gt; const &amp;m2z, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dx, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;problo)</argsstring>
        <name>build_faces</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> &gt; const &amp;</type>
          <declname>cell</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1_1EB2_1ad5118c9d34449d5fcba10d141751b0d6" kindref="member">Type_t</ref> &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1_1EB2_1ad5118c9d34449d5fcba10d141751b0d6" kindref="member">Type_t</ref> &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1_1EB2_1ad5118c9d34449d5fcba10d141751b0d6" kindref="member">Type_t</ref> &gt; const &amp;</type>
          <declname>fz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1_1EB2_1ad5118c9d34449d5fcba10d141751b0d6" kindref="member">Type_t</ref> &gt; const &amp;</type>
          <declname>ex</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1_1EB2_1ad5118c9d34449d5fcba10d141751b0d6" kindref="member">Type_t</ref> &gt; const &amp;</type>
          <declname>ey</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1_1EB2_1ad5118c9d34449d5fcba10d141751b0d6" kindref="member">Type_t</ref> &gt; const &amp;</type>
          <declname>ez</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>levset</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>interx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>intery</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>interz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>apx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>apy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>apz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fcx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fcy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fcz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>m2x</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>m2y</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>m2z</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a317082290117984ef29e149750e2c7a8" kindref="member">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dx</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a317082290117984ef29e149750e2c7a8" kindref="member">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>problo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB2_3D_C.cpp" line="119" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB2_3D_C.cpp" bodystart="119" bodyend="477"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1EB2_1a50c2e04b17b3ea318d87d0b12ef9b13b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EB2::build_cells</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; EBCellFlag &gt; const &amp;cell, Array4&lt; Type_t &gt; const &amp;fx, Array4&lt; Type_t &gt; const &amp;fy, Array4&lt; Type_t &gt; const &amp;fz, Array4&lt; Real &gt; const &amp;apx, Array4&lt; Real &gt; const &amp;apy, Array4&lt; Real &gt; const &amp;apz, Array4&lt; Real const  &gt; const &amp;fcx, Array4&lt; Real const  &gt; const &amp;fcy, Array4&lt; Real const  &gt; const &amp;fcz, Array4&lt; Real const  &gt; const &amp;m2x, Array4&lt; Real const  &gt; const &amp;m2y, Array4&lt; Real const  &gt; const &amp;m2z, Array4&lt; Real &gt; const &amp;vfrac, Array4&lt; Real &gt; const &amp;vcent, Array4&lt; Real &gt; const &amp;barea, Array4&lt; Real &gt; const &amp;bcent, Array4&lt; Real &gt; const &amp;bnorm, Array4&lt; EBCellFlag &gt; const &amp;ctmp)</argsstring>
        <name>build_cells</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> &gt; const &amp;</type>
          <declname>cell</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1_1EB2_1ad5118c9d34449d5fcba10d141751b0d6" kindref="member">Type_t</ref> &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1_1EB2_1ad5118c9d34449d5fcba10d141751b0d6" kindref="member">Type_t</ref> &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1_1EB2_1ad5118c9d34449d5fcba10d141751b0d6" kindref="member">Type_t</ref> &gt; const &amp;</type>
          <declname>fz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>apx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>apy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>apz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>fcx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>fcy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>fcz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>m2x</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>m2y</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>m2z</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>vfrac</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>vcent</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>barea</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>bcent</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>bnorm</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> &gt; const &amp;</type>
          <declname>ctmp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB2_3D_C.cpp" line="479" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB2_3D_C.cpp" bodystart="479" bodyend="867"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1EB2_1a3f7a5615d8bbdbe47974e1f67f8ae9d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::EB2::amrex_eb2_build_types</definition>
        <argsstring>(Box const &amp;tbx, Box const &amp;bxg2, Array4&lt; Real const  &gt; const &amp;s, Array4&lt; EBCellFlag &gt; const &amp;cell, Array4&lt; Type_t &gt; const &amp;fx, Array4&lt; Type_t &gt; const &amp;fy, Array4&lt; Type_t &gt; const &amp;fz, Array4&lt; Type_t &gt; const &amp;ex, Array4&lt; Type_t &gt; const &amp;ey, Array4&lt; Type_t &gt; const &amp;ez)</argsstring>
        <name>amrex_eb2_build_types</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>tbx</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bxg2</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> &gt; const &amp;</type>
          <declname>cell</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1_1EB2_1ad5118c9d34449d5fcba10d141751b0d6" kindref="member">Type_t</ref> &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1_1EB2_1ad5118c9d34449d5fcba10d141751b0d6" kindref="member">Type_t</ref> &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1_1EB2_1ad5118c9d34449d5fcba10d141751b0d6" kindref="member">Type_t</ref> &gt; const &amp;</type>
          <declname>fz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1_1EB2_1ad5118c9d34449d5fcba10d141751b0d6" kindref="member">Type_t</ref> &gt; const &amp;</type>
          <declname>ex</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1_1EB2_1ad5118c9d34449d5fcba10d141751b0d6" kindref="member">Type_t</ref> &gt; const &amp;</type>
          <declname>ey</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1_1EB2_1ad5118c9d34449d5fcba10d141751b0d6" kindref="member">Type_t</ref> &gt; const &amp;</type>
          <declname>ez</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB2_3D_C.H" line="8" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB2_3D_C.H" bodystart="8" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1EB2_1a26665fe0c584ed57e499dbbcd2ace388" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; IsGPUable&lt; F &gt;::value &gt;::type *</type>
            <declname>FOO</declname>
            <defname>FOO</defname>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> Real</type>
        <definition>AMREX_GPU_HOST_DEVICE Real amrex::EB2::IF_f</definition>
        <argsstring>(F const &amp;f, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;p) noexcept</argsstring>
        <name>IF_f</name>
        <param>
          <type>F const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a317082290117984ef29e149750e2c7a8" kindref="member">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB2_GeometryShop.H" line="19" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB2_GeometryShop.H" bodystart="19" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1EB2_1afe01e9165cc64a28a0b7e9ca72fc43ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> Real</type>
        <definition>AMREX_GPU_HOST_DEVICE Real amrex::EB2::BrentRootFinder</definition>
        <argsstring>(GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;lo, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;hi, int rangedir, F const &amp;f) noexcept</argsstring>
        <name>BrentRootFinder</name>
        <param>
          <type><ref refid="namespaceamrex_1a317082290117984ef29e149750e2c7a8" kindref="member">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>lo</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a317082290117984ef29e149750e2c7a8" kindref="member">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>hi</declname>
        </param>
        <param>
          <type>int</type>
          <declname>rangedir</declname>
        </param>
        <param>
          <type>F const &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB2_GeometryShop.H" line="40" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB2_GeometryShop.H" bodystart="40" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1EB2_1a23cfabfaa38e0f849adc5e41eaa0e32a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1EB2_1_1GeometryShop" kindref="compound">GeometryShop</ref>&lt; typename std::decay&lt; F &gt;::type &gt;</type>
        <definition>GeometryShop&lt;typename std::decay&lt;F&gt;::type&gt; amrex::EB2::makeShop</definition>
        <argsstring>(F &amp;&amp;f)</argsstring>
        <name>makeShop</name>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB2_GeometryShop.H" line="334" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB2_GeometryShop.H" bodystart="334" bodyend="337"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1EB2_1a6689939adc9cd129828b1246501c2ddc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="classamrex_1_1EB2_1_1ComplementIF" kindref="compound">ComplementIF</ref>&lt; typename std::decay&lt; F &gt;::type &gt;</type>
        <definition>constexpr ComplementIF&lt;typename std::decay&lt;F&gt;::type&gt; amrex::EB2::makeComplement</definition>
        <argsstring>(F &amp;&amp;f)</argsstring>
        <name>makeComplement</name>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB2_IF_Complement.H" line="49" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB2_IF_Complement.H" bodystart="49" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1EB2_1a8d7bc742e281f0aa021c859e7cd8f355" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class G</type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="classamrex_1_1EB2_1_1DifferenceIF" kindref="compound">DifferenceIF</ref>&lt; typename std::decay&lt; F &gt;::type, typename std::decay&lt; G &gt;::type &gt;</type>
        <definition>constexpr DifferenceIF&lt;typename std::decay&lt;F&gt;::type, typename std::decay&lt;G&gt;::type&gt; amrex::EB2::makeDifference</definition>
        <argsstring>(F &amp;&amp;f, G &amp;&amp;g)</argsstring>
        <name>makeDifference</name>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>G &amp;&amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB2_IF_Difference.H" line="66" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB2_IF_Difference.H" bodystart="66" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1EB2_1a465223723f892e3c4bdcf8e6239d9f55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="classamrex_1_1EB2_1_1ExtrusionIF" kindref="compound">ExtrusionIF</ref>&lt; typename std::decay&lt; F &gt;::type &gt;</type>
        <definition>constexpr ExtrusionIF&lt;typename std::decay&lt;F&gt;::type&gt; amrex::EB2::extrude</definition>
        <argsstring>(F &amp;&amp;f, int direction)</argsstring>
        <name>extrude</name>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>int</type>
          <declname>direction</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB2_IF_Extrusion.H" line="66" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB2_IF_Extrusion.H" bodystart="66" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1EB2_1aff27a604053e5a38fd448706de6488b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>Fs</declname>
            <defname>Fs</defname>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="classamrex_1_1EB2_1_1IntersectionIF" kindref="compound">IntersectionIF</ref>&lt; typename std::decay&lt; Fs &gt;::type... &gt;</type>
        <definition>constexpr IntersectionIF&lt;typename std::decay&lt;Fs&gt;::type ...&gt; amrex::EB2::makeIntersection</definition>
        <argsstring>(Fs &amp;&amp;...fs)</argsstring>
        <name>makeIntersection</name>
        <param>
          <type>Fs &amp;&amp;...</type>
          <declname>fs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB2_IF_Intersection.H" line="91" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB2_IF_Intersection.H" bodystart="91" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1EB2_1a06fb3c21b6b807e82950c9483152d4cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="classamrex_1_1EB2_1_1LatheIF" kindref="compound">LatheIF</ref>&lt; typename std::decay&lt; F &gt;::type &gt;</type>
        <definition>constexpr LatheIF&lt;typename std::decay&lt;F&gt;::type&gt; amrex::EB2::lathe</definition>
        <argsstring>(F &amp;&amp;f)</argsstring>
        <name>lathe</name>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB2_IF_Lathe.H" line="60" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB2_IF_Lathe.H" bodystart="60" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1EB2_1adeed62ac81d87a16c489f15eb4b9e214" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="classamrex_1_1EB2_1_1RotationIF" kindref="compound">RotationIF</ref>&lt; typename std::decay&lt; F &gt;::type &gt;</type>
        <definition>constexpr RotationIF&lt;typename std::decay&lt;F&gt;::type&gt; amrex::EB2::rotate</definition>
        <argsstring>(F &amp;&amp;f, const Real angle, const int dir)</argsstring>
        <name>rotate</name>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>const Real</type>
          <declname>angle</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB2_IF_Rotation.H" line="120" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB2_IF_Rotation.H" bodystart="120" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1EB2_1a4b05cbf05f3fca5d4ec5846fb5502e5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="classamrex_1_1EB2_1_1ScaleIF" kindref="compound">ScaleIF</ref>&lt; typename std::decay&lt; F &gt;::type &gt;</type>
        <definition>constexpr ScaleIF&lt;typename std::decay&lt;F&gt;::type&gt; amrex::EB2::scale</definition>
        <argsstring>(F &amp;&amp;f, const RealArray &amp;scalefactor)</argsstring>
        <name>scale</name>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a9de48c04056551924746c42f9eda3c8f" kindref="member">RealArray</ref> &amp;</type>
          <declname>scalefactor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB2_IF_Scale.H" line="70" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB2_IF_Scale.H" bodystart="70" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1EB2_1a1d98d3722935491fe83fe526ec9d5760" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="classamrex_1_1EB2_1_1TranslationIF" kindref="compound">TranslationIF</ref>&lt; typename std::decay&lt; F &gt;::type &gt;</type>
        <definition>constexpr TranslationIF&lt;typename std::decay&lt;F&gt;::type&gt; amrex::EB2::translate</definition>
        <argsstring>(F &amp;&amp;f, const RealArray &amp;offset)</argsstring>
        <name>translate</name>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a9de48c04056551924746c42f9eda3c8f" kindref="member">RealArray</ref> &amp;</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB2_IF_Translation.H" line="57" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB2_IF_Translation.H" bodystart="57" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1EB2_1ae1c1ff0fbaf7ff938aae5f3daf43d607" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>Fs</declname>
            <defname>Fs</defname>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="classamrex_1_1EB2_1_1UnionIF" kindref="compound">UnionIF</ref>&lt; typename std::decay&lt; Fs &gt;::type... &gt;</type>
        <definition>constexpr UnionIF&lt;typename std::decay&lt;Fs&gt;::type ...&gt; amrex::EB2::makeUnion</definition>
        <argsstring>(Fs &amp;&amp;...fs)</argsstring>
        <name>makeUnion</name>
        <param>
          <type>Fs &amp;&amp;...</type>
          <declname>fs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB2_IF_Union.H" line="91" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB2_IF_Union.H" bodystart="91" bodyend="94"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" line="32" column="1"/>
  </compounddef>
</doxygen>
