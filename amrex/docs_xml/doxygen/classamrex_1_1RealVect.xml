<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classamrex_1_1RealVect" kind="class" language="C++" prot="public">
    <compoundname>amrex::RealVect</compoundname>
    <includes refid="AMReX__RealVect_8H" local="no">AMReX_RealVect.H</includes>
      <sectiondef kind="user-defined">
      <header>Constructors and Accessors</header>
      <memberdef kind="function" id="classamrex_1_1RealVect_1a8235cd0c01476d67b44b3c82b173c351" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> constexpr</type>
        <definition>AMREX_GPU_HOST_DEVICE constexpr amrex::RealVect::RealVect</definition>
        <argsstring>() noexcept</argsstring>
        <name>RealVect</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Construct a <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> whose components are zero. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="45" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" bodystart="45" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVect_1a3b80d8eb549dcdfa0fc5ab37b3d0bd1f" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::RealVect::RealVect</definition>
        <argsstring>(const std::vector&lt; Real &gt; &amp;vr) noexcept</argsstring>
        <name>RealVect</name>
        <param>
          <type>const std::vector&lt; Real &gt; &amp;</type>
          <declname>vr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="47" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" bodystart="47" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVect_1aa3193e01e08d304b72016eee922c48e0" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> constexpr</type>
        <definition>AMREX_GPU_HOST_DEVICE constexpr amrex::RealVect::RealVect</definition>
        <argsstring>(Real i) noexcept</argsstring>
        <name>RealVect</name>
        <param>
          <type>Real</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Construct a <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> given the specific values for its coordinates. AMREX_D_DECL is a macro that sets the constructor to take AMREX_SPACEDIM arguments. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="63" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" bodystart="63" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVect_1a95ba2b64c46580f6e8ebbb7f35dad2cb" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE amrex::RealVect::RealVect</definition>
        <argsstring>(const Real *a) noexcept</argsstring>
        <name>RealVect</name>
        <param>
          <type>const Real *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Construct a <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> setting the coordinates to the corresponding values in the Real array a. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="71" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" bodystart="71" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVect_1ae2fd3bdec2802aef034cc7cfb36bf14a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE amrex::RealVect::RealVect</definition>
        <argsstring>(const IntVect &amp;iv) noexcept</argsstring>
        <name>RealVect</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>iv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Construct a <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> from an <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> by coercing each component from <computeroutput>int</computeroutput> to Real. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="79" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" bodystart="79" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVect_1a5948bd284dcc6c88bffae39d109b8789" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Real &amp;</type>
        <definition>Real&amp; amrex::RealVect::operator[]</definition>
        <argsstring>(int i)&amp;&amp;=delete</argsstring>
        <name>operator[]</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Prevent rvalue assignment to the <emphasis>i</emphasis>&apos;th coordinate of the <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="86" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVect_1ab17771f42cf9642cd5899d8bbe77f5f0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> Real &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE Real&amp; amrex::RealVect::operator[]</definition>
        <argsstring>(int i)&amp;noexcept</argsstring>
        <name>operator[]</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a modifiable lvalue reference to the <emphasis>i</emphasis>&apos;th coordinate of the <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="95" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" bodystart="95" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVect_1ae1d5a95100e25091c6cb29a50e0c2be7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> const Real &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE const Real&amp; amrex::RealVect::operator[]</definition>
        <argsstring>(int i) const &amp;noexcept</argsstring>
        <name>operator[]</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the <emphasis>i</emphasis>&apos;th coordinate of the <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="104" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" bodystart="104" bodyend="105"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Iterators</header>
      <memberdef kind="function" id="classamrex_1_1RealVect_1a3383094f7bbff555574a91c64d01f4fb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> Real *</type>
        <definition>AMREX_GPU_HOST_DEVICE Real* amrex::RealVect::begin</definition>
        <argsstring>() noexcept</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return pointer to the first component. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="120" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" bodystart="120" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVect_1afb2aca19edd4e582423fb866f5ac7686" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> const Real *</type>
        <definition>AMREX_GPU_HOST_DEVICE const Real* amrex::RealVect::begin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return pointer to the first component. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="128" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" bodystart="128" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVect_1a81c9df182cc9ede59e3eb3f75e144957" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> Real *</type>
        <definition>AMREX_GPU_HOST_DEVICE Real* amrex::RealVect::end</definition>
        <argsstring>() noexcept</argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return pointer to the one past last component </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="136" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" bodystart="136" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVect_1a02b3f4a04dc877e51bf6a2340ab1046e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> const Real *</type>
        <definition>AMREX_GPU_HOST_DEVICE const Real* amrex::RealVect::end</definition>
        <argsstring>() const noexcept</argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return pointer to the one past last component </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="144" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" bodystart="144" bodyend="144"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Comparison Operators</header>
      <memberdef kind="function" id="classamrex_1_1RealVect_1a787b257855e1c1f21c26438230e0f482" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE bool amrex::RealVect::operator==</definition>
        <argsstring>(const RealVect &amp;p) const noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if this <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> is equivalent to argument <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref>. All comparisons between analogous components must be satisfied. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="159" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" bodystart="159" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVect_1a0fdb785f0952ba5c6672a90a0a9120d0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE bool amrex::RealVect::operator!=</definition>
        <argsstring>(const RealVect &amp;p) const noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if this <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> is different from argument <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref>. All comparisons between analogous components must be satisfied. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="169" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" bodystart="169" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVect_1a5df564194fcc375edcc202ed6bae4aea" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE bool amrex::RealVect::operator&lt;</definition>
        <argsstring>(const RealVect &amp;p) const noexcept</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if this <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> is less than argument <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref>. All comparisons between analogous components must be satisfied. Note that, since the comparison is component-wise, it is possible for an <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> to be neither greater than, less than, nor equal to another. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="182" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" bodystart="788" bodyend="791"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVect_1a6c435556885b7c563cc6c0c02c107c69" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE bool amrex::RealVect::operator&lt;=</definition>
        <argsstring>(const RealVect &amp;p) const noexcept</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if this <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> is less than or equal to argument <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref>. All comparisons between analogous components must be satisfied. Note that, since the comparison is component-wise, it is possible for an <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> to be neither greater than or equal to, less than or equal to, nor equal to another. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="193" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" bodystart="796" bodyend="799"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVect_1af98b10ea8dcc7c6b0a87218452b39448" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE bool amrex::RealVect::operator&gt;</definition>
        <argsstring>(const RealVect &amp;p) const noexcept</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if this <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> is greater than argument <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref>. All comparisons between analogous components must be satisfied. Note that, since the comparison is component-wise, it is possible for an <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> to be neither greater than, less than, nor equal to another. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="204" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" bodystart="804" bodyend="807"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVect_1aede3778179f57e5b9c02a7ed7cbfa04d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE bool amrex::RealVect::operator&gt;=</definition>
        <argsstring>(const RealVect &amp;p) const noexcept</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if this <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> is greater than or equal to argument <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref>. All comparisons between analogous components must be satisfied. Note that, since the comparison is component-wise, it is possible for an <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> to be neither greater than or equal to, less than or equal to, nor equal to another. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="216" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" bodystart="812" bodyend="815"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Arithmetic Operators</header>
      <memberdef kind="function" id="classamrex_1_1RealVect_1a9588a0f9a417aa33d3131b7ffcdbab5f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE RealVect &amp; amrex::RealVect::operator+=</definition>
        <argsstring>(Real s) noexcept</argsstring>
        <name>operator+=</name>
        <param>
          <type>Real</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Modifies this <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> by addition of a scalar to each component. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="230" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" bodystart="880" bodyend="884"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVect_1a4abec8704c5d7117457d1c6b8edc1cb1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE RealVect amrex::RealVect::operator+</definition>
        <argsstring>(Real s) const noexcept</argsstring>
        <name>operator+</name>
        <param>
          <type>Real</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> that is this <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> with a scalar s added to each component. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="238" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" bodystart="920" bodyend="924"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVect_1a0e5740b532214831cf6cf56dec666098" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE RealVect &amp; amrex::RealVect::operator+=</definition>
        <argsstring>(const RealVect &amp;p) noexcept</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Modifies this <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> by component-wise addition by argument. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="245" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" bodystart="888" bodyend="892"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVect_1a4d98c8467cecdb5b939ba120d29fbc9d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE RealVect &amp; amrex::RealVect::operator-=</definition>
        <argsstring>(Real s) noexcept</argsstring>
        <name>operator-=</name>
        <param>
          <type>Real</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Modifies this <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> by subtraction of a scalar from each component. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="253" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" bodystart="650" bodyend="654"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVect_1a3a078245dfc6d742afcaf41f8fe8c0da" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE RealVect &amp; amrex::RealVect::operator-=</definition>
        <argsstring>(const RealVect &amp;p) noexcept</argsstring>
        <name>operator-=</name>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Modifies this <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> by component-wise subtraction by argument. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="260" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" bodystart="668" bodyend="673"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVect_1a6f5adf2159116692f8f67cb96cb0e351" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE RealVect amrex::RealVect::operator-</definition>
        <argsstring>(Real s) const noexcept</argsstring>
        <name>operator-</name>
        <param>
          <type>Real</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> that is this <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> with a scalar s subtracted from each component. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="268" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" bodystart="912" bodyend="916"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVect_1aa0f24542a6d07e02073616961cd2b285" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE RealVect &amp; amrex::RealVect::operator*=</definition>
        <argsstring>(Real s) noexcept</argsstring>
        <name>operator*=</name>
        <param>
          <type>Real</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Modifies this <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> by multiplying each component by a scalar. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="275" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" bodystart="659" bodyend="663"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVect_1a661d136b50fe686020f621f5528de4d4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> Real</type>
        <definition>AMREX_GPU_HOST_DEVICE Real amrex::RealVect::dotProduct</definition>
        <argsstring>(const RealVect &amp;a_rhs) const noexcept</argsstring>
        <name>dotProduct</name>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>a_rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the result of the scalar product with another <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="282" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" bodystart="860" bodyend="865"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVect_1a2662b0dc461f4bb3f54cfa456dd2dcd1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE RealVect &amp; amrex::RealVect::operator*=</definition>
        <argsstring>(const RealVect &amp;p) noexcept</argsstring>
        <name>operator*=</name>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Modifies this <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> by component-wise multiplication by argument. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="298" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" bodystart="896" bodyend="900"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVect_1a94e4700dcfa50729e8a0fcd7d2e82fb6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE RealVect amrex::RealVect::operator*</definition>
        <argsstring>(Real s) const noexcept</argsstring>
        <name>operator*</name>
        <param>
          <type>Real</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> that is this <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> with each component multiplied by a scalar. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="312" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" bodystart="904" bodyend="908"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVect_1a36fb56305984eee6881717a5ae1f65e8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE RealVect &amp; amrex::RealVect::operator/=</definition>
        <argsstring>(Real s) noexcept</argsstring>
        <name>operator/=</name>
        <param>
          <type>Real</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Modifies this <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> by dividing each component by a scalar. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="319" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" bodystart="928" bodyend="932"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVect_1a00e94bec2f221dd7f96873a3fd0a181b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE RealVect &amp; amrex::RealVect::operator/=</definition>
        <argsstring>(const RealVect &amp;p) noexcept</argsstring>
        <name>operator/=</name>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Modifies this <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> by component-wise division by argument. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="326" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" bodystart="936" bodyend="940"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVect_1aa976869120ccbfd2660d36c18013a66c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE RealVect amrex::RealVect::operator/</definition>
        <argsstring>(Real s) const noexcept</argsstring>
        <name>operator/</name>
        <param>
          <type>Real</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> that is this <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> with each component divided by a scalar. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="340" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" bodystart="944" bodyend="948"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVect_1addcc9764c758d18f28fb58fd3c5b3a8b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE RealVect &amp; amrex::RealVect::scale</definition>
        <argsstring>(Real s) noexcept</argsstring>
        <name>scale</name>
        <param>
          <type>Real</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Modifies this <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> by multiplying each component by a scalar. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="347" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" bodystart="694" bodyend="698"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVect_1ad83cc01ed7402d9d384b73c046a96b87" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE IntVect amrex::RealVect::floor</definition>
        <argsstring>() const noexcept</argsstring>
        <name>floor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns an <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> whose components are the std::floor of the <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> components. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="355" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" bodystart="703" bodyend="708"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVect_1a792ecde737e120649cc137385297100c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE IntVect amrex::RealVect::ceil</definition>
        <argsstring>() const noexcept</argsstring>
        <name>ceil</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns an <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> whose components are the std::floor of the <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> components. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="363" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" bodystart="713" bodyend="718"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVect_1a4a0514b2fe9078aff7ca5d72da6d6159" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE IntVect amrex::RealVect::round</definition>
        <argsstring>() const noexcept</argsstring>
        <name>round</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns an <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> whose components are the std::floor of the <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> components. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="371" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" bodystart="723" bodyend="728"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Other arithmetic operators</header>
      <memberdef kind="function" id="classamrex_1_1RealVect_1a7da81c75533a97e32fed875a93f6a7c8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE RealVect &amp; amrex::RealVect::min</definition>
        <argsstring>(const RealVect &amp;p) noexcept</argsstring>
        <name>min</name>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Modifies this <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> by taking component-wise min with <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> argument. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="386" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" bodystart="820" bodyend="826"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVect_1a30944a8839e0dc2a873dc3fbef6b2c41" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE RealVect &amp; amrex::RealVect::max</definition>
        <argsstring>(const RealVect &amp;p) noexcept</argsstring>
        <name>max</name>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Modifies this <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> by taking component-wise max with <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> argument. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="402" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" bodystart="831" bodyend="837"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1RealVect_1a0450ba685d7fa9c493158ec2a005f792" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE RealVect min</definition>
        <argsstring>(const RealVect &amp;p1, const RealVect &amp;p2) noexcept</argsstring>
        <name>min</name>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> that is the component-wise minimum of two argument RealVects. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="394" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" bodystart="842" bodyend="847"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1RealVect_1a2c15c7a018202ae522e0777c120fa109" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE RealVect max</definition>
        <argsstring>(const RealVect &amp;p1, const RealVect &amp;p2) noexcept</argsstring>
        <name>max</name>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> that is the component-wise maximum of two argument RealVects. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="410" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" bodystart="852" bodyend="857"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Unary operators</header>
      <memberdef kind="function" id="classamrex_1_1RealVect_1a6a373b73cae408485adcb02e6b11d4f2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE RealVect amrex::RealVect::operator+</definition>
        <argsstring>() const noexcept</argsstring>
        <name>operator+</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unary plus <ndash/> for completeness. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="424" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" bodystart="678" bodyend="681"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVect_1ac49e1cd3af85aa3a6cf106f8064fb3d0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE RealVect amrex::RealVect::operator-</definition>
        <argsstring>() const noexcept</argsstring>
        <name>operator-</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unary minus <ndash/> negates all components of this <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="431" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" bodystart="686" bodyend="689"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVect_1a74051dce8bdf28e977934f2dedf0c993" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> Real</type>
        <definition>AMREX_GPU_HOST_DEVICE Real amrex::RealVect::sum</definition>
        <argsstring>() const noexcept</argsstring>
        <name>sum</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sum of all components of this <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="438" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" bodystart="733" bodyend="736"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVect_1a5cb72900ed102d11d069c1e157364f59" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> Real</type>
        <definition>AMREX_GPU_HOST_DEVICE Real amrex::RealVect::vectorLength</definition>
        <argsstring>() const noexcept</argsstring>
        <name>vectorLength</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>sqrt(sum squares) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="445" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" bodystart="741" bodyend="752"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVect_1ab83bde52e73520cc1375d513030374df" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> Real</type>
        <definition>AMREX_GPU_HOST_DEVICE Real amrex::RealVect::radSquared</definition>
        <argsstring>() const noexcept</argsstring>
        <name>radSquared</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>sum squares<ndash/>no square root </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="452" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" bodystart="757" bodyend="766"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVect_1a29bd7850951ae800d2bfd13ec8a3d593" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> Real</type>
        <definition>AMREX_GPU_HOST_DEVICE Real amrex::RealVect::product</definition>
        <argsstring>() const noexcept</argsstring>
        <name>product</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Product of all components of this <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="459" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" bodystart="771" bodyend="774"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVect_1ad6ae47a8656e02c4d566cdf251d5e532" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> int</type>
        <definition>AMREX_GPU_HOST_DEVICE int amrex::RealVect::minDir</definition>
        <argsstring>(const bool &amp;a_doAbs) const noexcept</argsstring>
        <name>minDir</name>
        <param>
          <type>const bool &amp;</type>
          <declname>a_doAbs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Component with the minimum value of this <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> (returns 0 if they are all the same). a_doAbs : if true then take the absolute value before comparing </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="467" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" bodystart="952" bodyend="973"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVect_1a2d79ca79da983c3064622c628ecc8d93" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> int</type>
        <definition>AMREX_GPU_HOST_DEVICE int amrex::RealVect::maxDir</definition>
        <argsstring>(const bool &amp;a_doAbs) const noexcept</argsstring>
        <name>maxDir</name>
        <param>
          <type>const bool &amp;</type>
          <declname>a_doAbs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Component with the maximum value of this <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> (returns 0 if they are all the same). a_doAbs : if true then take the absolute value before comparing </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="475" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" bodystart="977" bodyend="998"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Data pointer functions</header>
      <memberdef kind="function" id="classamrex_1_1RealVect_1ade2f2eb10ca0655878ddb552c36208fc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> const Real *</type>
        <definition>AMREX_GPU_HOST_DEVICE const Real* amrex::RealVect::dataPtr</definition>
        <argsstring>() const noexcept</argsstring>
        <name>dataPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Only for sending stuff to Fortran </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="489" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" bodystart="489" bodyend="489"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVect_1a42fb3dffe08753e7c65790ffca5d9124" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> Real *</type>
        <definition>AMREX_GPU_HOST_DEVICE Real* amrex::RealVect::dataPtr</definition>
        <argsstring>() noexcept</argsstring>
        <name>dataPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Only for sending stuff to Fortran </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="496" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" bodystart="496" bodyend="496"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Constants</header>
      <memberdef kind="variable" id="classamrex_1_1RealVect_1ab64ddfe8e473503acf9a5f7103467b13" prot="public" static="yes" mutable="no">
        <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref></type>
        <definition>const RealVect amrex::RealVect::Zero</definition>
        <argsstring></argsstring>
        <name>Zero</name>
        <initializer>= <ref refid="classamrex_1_1RealVect_1abf73cc1782b728a662e6eab58a01fc38" kindref="member">RealVect::TheZeroVector</ref>()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is a <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> all of whose components are equal to zero. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="524" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" bodystart="524" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1RealVect_1a6745f136d89bdb15e57c3387ca01e973" prot="public" static="yes" mutable="no">
        <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref></type>
        <definition>const RealVect amrex::RealVect::Unit</definition>
        <argsstring></argsstring>
        <name>Unit</name>
        <initializer>= <ref refid="classamrex_1_1RealVect_1a415190eae196ab804f9d6aa4653e878a" kindref="member">RealVect::TheUnitVector</ref>()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is a <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> all of whose components are equal to one. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="530" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" bodystart="530" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1RealVect_1a4d734f607d5639afba8bf2e56c4c66ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE RealVect BASISREALV</definition>
        <argsstring>(int dir) noexcept</argsstring>
        <name>BASISREALV</name>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a basis vector in the given coordinate direction.<linebreak/>
 In 2-D:<linebreak/>
 BASISREALV(0) == (1.,0.); BASISREALV(1) == (0.,1.).<linebreak/>
 In 3-D:<linebreak/>
 BASISREALV(0) == (1.,0.,0.); BASISREALV(1) == (0.,1.,0.); BASISREALV(2) == (0.,0.,1.).<linebreak/>
 Note that the coordinate directions are based at zero. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="518" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" bodystart="1002" bodyend="1008"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Static public members functions</header>
      <memberdef kind="function" id="classamrex_1_1RealVect_1abf73cc1782b728a662e6eab58a01fc38" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> static <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> constexpr <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE static AMREX_FORCE_INLINE constexpr RealVect amrex::RealVect::TheZeroVector</definition>
        <argsstring>() noexcept</argsstring>
        <name>TheZeroVector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The zero vector in AMREX_SPACEDIM-dimensional space. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="544" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" bodystart="544" bodyend="546"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVect_1a415190eae196ab804f9d6aa4653e878a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> static <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> constexpr <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE static AMREX_FORCE_INLINE constexpr RealVect amrex::RealVect::TheUnitVector</definition>
        <argsstring>() noexcept</argsstring>
        <name>TheUnitVector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The unit vector in AMREX_SPACEDIM-dimensional space. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="552" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" bodystart="552" bodyend="554"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Arithmetic friend functions</header>
      <memberdef kind="friend" id="classamrex_1_1RealVect_1a1e1ca0e6dc8c1ffe047d20716a80ded5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE RealVect operator+</definition>
        <argsstring>(Real s, const RealVect &amp;p) noexcept</argsstring>
        <name>operator+</name>
        <param>
          <type>Real</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> that is a <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> <emphasis>p</emphasis> with a scalar <emphasis>s</emphasis> added to each component. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="569" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" bodystart="1020" bodyend="1024"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1RealVect_1a3f84cf28a3eb1f690b08ac9486c7dcf9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE RealVect operator-</definition>
        <argsstring>(Real s, const RealVect &amp;p) noexcept</argsstring>
        <name>operator-</name>
        <param>
          <type>Real</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns <emphasis>s - p</emphasis>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="576" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" bodystart="1028" bodyend="1032"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1RealVect_1a51443bb99fc505d285d7fe70a60ddb3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE RealVect operator*</definition>
        <argsstring>(Real s, const RealVect &amp;p) noexcept</argsstring>
        <name>operator*</name>
        <param>
          <type>Real</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> that is a <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> <emphasis>p</emphasis> with each component multiplied by a scalar <emphasis>s</emphasis>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="584" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" bodystart="1036" bodyend="1040"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1RealVect_1a1fca01b7216175d3cd1f366840f46373" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE RealVect operator/</definition>
        <argsstring>(Real s, const RealVect &amp;p) noexcept</argsstring>
        <name>operator/</name>
        <param>
          <type>Real</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> that is a <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> <emphasis>p</emphasis> with each component divided by a scalar <emphasis>s</emphasis>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="591" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" bodystart="1012" bodyend="1016"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1RealVect_1ab33793196d0917f9e4b69d8e84412430" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE RealVect operator+</definition>
        <argsstring>(const RealVect &amp;s, const RealVect &amp;p) noexcept</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns component-wise sum of RealVects <emphasis>s</emphasis> and <emphasis>p</emphasis>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="598" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" bodystart="1052" bodyend="1056"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1RealVect_1a394035414055d9cfe78d10bb63d4f169" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE RealVect operator-</definition>
        <argsstring>(const RealVect &amp;s, const RealVect &amp;p) noexcept</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns <emphasis>s - p</emphasis>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="605" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" bodystart="1060" bodyend="1064"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1RealVect_1a3ca85db4b44ceb45ad915a815e79578a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE RealVect operator*</definition>
        <argsstring>(const RealVect &amp;s, const RealVect &amp;p) noexcept</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns component-wise product of <emphasis>s</emphasis> and <emphasis>p</emphasis>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="612" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" bodystart="1068" bodyend="1072"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1RealVect_1ac0469b60807117dc2419785ce1168b84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE RealVect operator/</definition>
        <argsstring>(const RealVect &amp;s, const RealVect &amp;p) noexcept</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns component-wise quotient <emphasis>p / s</emphasis>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="618" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" bodystart="1044" bodyend="1048"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1RealVect_1aced393e91058fd9dcf46321c5f8f1eef" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE RealVect scale</definition>
        <argsstring>(const RealVect &amp;p, Real s) noexcept</argsstring>
        <name>scale</name>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> obtained by multiplying each of the components of the given <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> by a scalar. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="626" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" bodystart="779" bodyend="783"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classamrex_1_1RealVect_1a0f0b7286c21b06ba0eea3a31c09cf2f1" prot="protected" static="no" mutable="no">
        <type>Real</type>
        <definition>Real amrex::RealVect::vect[SpaceDim]</definition>
        <argsstring>[SpaceDim]</argsstring>
        <name>vect</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The individual components of this <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="643" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" bodystart="643" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classamrex_1_1RealVect_1a7df5aee72e64ca92a9b83ecb5d2dde1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;ostr, const RealVect &amp;p)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>ostr</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="classamrex_1_1Print" kindref="compound">Print</ref> to the given output stream in ASCII. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="634" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.cpp" bodystart="10" bodyend="14"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1RealVect_1a12a8ba870c44c0b8df87fbf476ba0240" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend std::istream &amp;</type>
        <definition>std::istream&amp; operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;is, RealVect &amp;iv)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>iv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="636" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.cpp" bodystart="17" bodyend="40"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A Real vector in SpaceDim-dimensional space. </para>    </briefdescription>
    <detaileddescription>
<para>The class <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> is an implementation of a Real vector in a SpaceDim-dimensional space. <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> values are accessed using the operator[] function, as for a normal C++ array. In addition, the basic arithmetic operators have been overloaded to implement scaling and translation operations. </para>    </detaileddescription>
    <collaborationgraph>
      <node id="6291">
        <label>Real</label>
      </node>
      <node id="6290">
        <label>amrex::RealVect</label>
        <link refid="classamrex_1_1RealVect"/>
        <childnode refid="6290" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
        <childnode refid="6291" relation="usage">
          <edgelabel>vect</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="32" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" bodystart="31" bodyend="645"/>
    <listofallmembers>
      <member refid="classamrex_1_1RealVect_1a4d734f607d5639afba8bf2e56c4c66ac" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>BASISREALV</name></member>
      <member refid="classamrex_1_1RealVect_1a3383094f7bbff555574a91c64d01f4fb" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>begin</name></member>
      <member refid="classamrex_1_1RealVect_1afb2aca19edd4e582423fb866f5ac7686" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>begin</name></member>
      <member refid="classamrex_1_1RealVect_1a792ecde737e120649cc137385297100c" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>ceil</name></member>
      <member refid="classamrex_1_1RealVect_1ade2f2eb10ca0655878ddb552c36208fc" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>dataPtr</name></member>
      <member refid="classamrex_1_1RealVect_1a42fb3dffe08753e7c65790ffca5d9124" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>dataPtr</name></member>
      <member refid="classamrex_1_1RealVect_1a661d136b50fe686020f621f5528de4d4" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>dotProduct</name></member>
      <member refid="classamrex_1_1RealVect_1a81c9df182cc9ede59e3eb3f75e144957" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>end</name></member>
      <member refid="classamrex_1_1RealVect_1a02b3f4a04dc877e51bf6a2340ab1046e" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>end</name></member>
      <member refid="classamrex_1_1RealVect_1ad83cc01ed7402d9d384b73c046a96b87" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>floor</name></member>
      <member refid="classamrex_1_1RealVect_1a30944a8839e0dc2a873dc3fbef6b2c41" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>max</name></member>
      <member refid="classamrex_1_1RealVect_1a2c15c7a018202ae522e0777c120fa109" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>max</name></member>
      <member refid="classamrex_1_1RealVect_1a2d79ca79da983c3064622c628ecc8d93" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>maxDir</name></member>
      <member refid="classamrex_1_1RealVect_1a7da81c75533a97e32fed875a93f6a7c8" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>min</name></member>
      <member refid="classamrex_1_1RealVect_1a0450ba685d7fa9c493158ec2a005f792" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>min</name></member>
      <member refid="classamrex_1_1RealVect_1ad6ae47a8656e02c4d566cdf251d5e532" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>minDir</name></member>
      <member refid="classamrex_1_1RealVect_1a0fdb785f0952ba5c6672a90a0a9120d0" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>operator!=</name></member>
      <member refid="classamrex_1_1RealVect_1a94e4700dcfa50729e8a0fcd7d2e82fb6" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>operator*</name></member>
      <member refid="classamrex_1_1RealVect_1a51443bb99fc505d285d7fe70a60ddb3c" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>operator*</name></member>
      <member refid="classamrex_1_1RealVect_1a3ca85db4b44ceb45ad915a815e79578a" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>operator*</name></member>
      <member refid="classamrex_1_1RealVect_1aa0f24542a6d07e02073616961cd2b285" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>operator*=</name></member>
      <member refid="classamrex_1_1RealVect_1a2662b0dc461f4bb3f54cfa456dd2dcd1" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>operator*=</name></member>
      <member refid="classamrex_1_1RealVect_1a4abec8704c5d7117457d1c6b8edc1cb1" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>operator+</name></member>
      <member refid="classamrex_1_1RealVect_1a6a373b73cae408485adcb02e6b11d4f2" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>operator+</name></member>
      <member refid="classamrex_1_1RealVect_1a1e1ca0e6dc8c1ffe047d20716a80ded5" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>operator+</name></member>
      <member refid="classamrex_1_1RealVect_1ab33793196d0917f9e4b69d8e84412430" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>operator+</name></member>
      <member refid="classamrex_1_1RealVect_1a9588a0f9a417aa33d3131b7ffcdbab5f" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>operator+=</name></member>
      <member refid="classamrex_1_1RealVect_1a0e5740b532214831cf6cf56dec666098" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>operator+=</name></member>
      <member refid="classamrex_1_1RealVect_1a6f5adf2159116692f8f67cb96cb0e351" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>operator-</name></member>
      <member refid="classamrex_1_1RealVect_1ac49e1cd3af85aa3a6cf106f8064fb3d0" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>operator-</name></member>
      <member refid="classamrex_1_1RealVect_1a3f84cf28a3eb1f690b08ac9486c7dcf9" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>operator-</name></member>
      <member refid="classamrex_1_1RealVect_1a394035414055d9cfe78d10bb63d4f169" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>operator-</name></member>
      <member refid="classamrex_1_1RealVect_1a4d98c8467cecdb5b939ba120d29fbc9d" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>operator-=</name></member>
      <member refid="classamrex_1_1RealVect_1a3a078245dfc6d742afcaf41f8fe8c0da" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>operator-=</name></member>
      <member refid="classamrex_1_1RealVect_1aa976869120ccbfd2660d36c18013a66c" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>operator/</name></member>
      <member refid="classamrex_1_1RealVect_1a1fca01b7216175d3cd1f366840f46373" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>operator/</name></member>
      <member refid="classamrex_1_1RealVect_1ac0469b60807117dc2419785ce1168b84" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>operator/</name></member>
      <member refid="classamrex_1_1RealVect_1a36fb56305984eee6881717a5ae1f65e8" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>operator/=</name></member>
      <member refid="classamrex_1_1RealVect_1a00e94bec2f221dd7f96873a3fd0a181b" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>operator/=</name></member>
      <member refid="classamrex_1_1RealVect_1a5df564194fcc375edcc202ed6bae4aea" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>operator&lt;</name></member>
      <member refid="classamrex_1_1RealVect_1a7df5aee72e64ca92a9b83ecb5d2dde1f" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>operator&lt;&lt;</name></member>
      <member refid="classamrex_1_1RealVect_1a6c435556885b7c563cc6c0c02c107c69" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>operator&lt;=</name></member>
      <member refid="classamrex_1_1RealVect_1a787b257855e1c1f21c26438230e0f482" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>operator==</name></member>
      <member refid="classamrex_1_1RealVect_1af98b10ea8dcc7c6b0a87218452b39448" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>operator&gt;</name></member>
      <member refid="classamrex_1_1RealVect_1aede3778179f57e5b9c02a7ed7cbfa04d" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>operator&gt;=</name></member>
      <member refid="classamrex_1_1RealVect_1a12a8ba870c44c0b8df87fbf476ba0240" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>operator&gt;&gt;</name></member>
      <member refid="classamrex_1_1RealVect_1a5948bd284dcc6c88bffae39d109b8789" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1RealVect_1ab17771f42cf9642cd5899d8bbe77f5f0" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1RealVect_1ae1d5a95100e25091c6cb29a50e0c2be7" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1RealVect_1a29bd7850951ae800d2bfd13ec8a3d593" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>product</name></member>
      <member refid="classamrex_1_1RealVect_1ab83bde52e73520cc1375d513030374df" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>radSquared</name></member>
      <member refid="classamrex_1_1RealVect_1a8235cd0c01476d67b44b3c82b173c351" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>RealVect</name></member>
      <member refid="classamrex_1_1RealVect_1a3b80d8eb549dcdfa0fc5ab37b3d0bd1f" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>RealVect</name></member>
      <member refid="classamrex_1_1RealVect_1aa3193e01e08d304b72016eee922c48e0" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>RealVect</name></member>
      <member refid="classamrex_1_1RealVect_1a95ba2b64c46580f6e8ebbb7f35dad2cb" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>RealVect</name></member>
      <member refid="classamrex_1_1RealVect_1ae2fd3bdec2802aef034cc7cfb36bf14a" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>RealVect</name></member>
      <member refid="classamrex_1_1RealVect_1a4a0514b2fe9078aff7ca5d72da6d6159" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>round</name></member>
      <member refid="classamrex_1_1RealVect_1addcc9764c758d18f28fb58fd3c5b3a8b" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>scale</name></member>
      <member refid="classamrex_1_1RealVect_1aced393e91058fd9dcf46321c5f8f1eef" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>scale</name></member>
      <member refid="classamrex_1_1RealVect_1a74051dce8bdf28e977934f2dedf0c993" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>sum</name></member>
      <member refid="classamrex_1_1RealVect_1a415190eae196ab804f9d6aa4653e878a" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>TheUnitVector</name></member>
      <member refid="classamrex_1_1RealVect_1abf73cc1782b728a662e6eab58a01fc38" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>TheZeroVector</name></member>
      <member refid="classamrex_1_1RealVect_1a6745f136d89bdb15e57c3387ca01e973" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>Unit</name></member>
      <member refid="classamrex_1_1RealVect_1a0f0b7286c21b06ba0eea3a31c09cf2f1" prot="protected" virt="non-virtual"><scope>amrex::RealVect</scope><name>vect</name></member>
      <member refid="classamrex_1_1RealVect_1a5cb72900ed102d11d069c1e157364f59" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>vectorLength</name></member>
      <member refid="classamrex_1_1RealVect_1ab64ddfe8e473503acf9a5f7103467b13" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>Zero</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
