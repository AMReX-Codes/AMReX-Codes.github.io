<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classamrex_1_1Gpu_1_1AsyncArray" kind="class" language="C++" prot="public">
    <compoundname>amrex::Gpu::AsyncArray</compoundname>
    <includes refid="AMReX__GpuAsyncArray_8H" local="no">AMReX_GpuAsyncArray.H</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
      <param>
        <type>std::enable_if_t&lt; std::is_trivially_copyable_v&lt; T &gt;, int &gt;</type>
        <defval>0</defval>
      </param>
    </templateparamlist>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1Gpu_1_1AsyncArray_1a8faf9b9425340e64e8849fad230ca590" prot="private" static="no" mutable="no">
        <type>T *</type>
        <definition>T* amrex::Gpu::AsyncArray&lt; T, &gt;::d_data</definition>
        <argsstring></argsstring>
        <name>d_data</name>
        <qualifiedname>amrex::Gpu::AsyncArray::d_data</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAsyncArray.H" line="131" column="7" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAsyncArray.H" bodystart="131" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1Gpu_1_1AsyncArray_1a51d329542fc90dfadcbe838a312a5470" prot="private" static="no" mutable="no">
        <type>T *</type>
        <definition>T* amrex::Gpu::AsyncArray&lt; T, &gt;::h_data</definition>
        <argsstring></argsstring>
        <name>h_data</name>
        <qualifiedname>amrex::Gpu::AsyncArray::h_data</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAsyncArray.H" line="132" column="7" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAsyncArray.H" bodystart="132" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1Gpu_1_1AsyncArray_1a19e80d7e6014ed527622b7e69399569b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::Gpu::AsyncArray&lt; T, &gt;::AsyncArray</definition>
        <argsstring>(T const *h_p, const std::size_t n)</argsstring>
        <name>AsyncArray</name>
        <qualifiedname>amrex::Gpu::AsyncArray::AsyncArray</qualifiedname>
        <param>
          <type>T const *</type>
          <declname>h_p</declname>
        </param>
        <param>
          <type>const std::size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAsyncArray.H" line="32" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAsyncArray.H" bodystart="32" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Gpu_1_1AsyncArray_1afea82268e2d2995085c150e9865923a3" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
            <defval>T</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; std::is_standard_layout_v&lt; U &gt; &amp;&amp;std::is_trivial_v&lt; U &gt;, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>amrex::Gpu::AsyncArray&lt; T, &gt;::AsyncArray</definition>
        <argsstring>(const std::size_t n)</argsstring>
        <name>AsyncArray</name>
        <qualifiedname>amrex::Gpu::AsyncArray::AsyncArray</qualifiedname>
        <param>
          <type>const std::size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAsyncArray.H" line="47" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAsyncArray.H" bodystart="47" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Gpu_1_1AsyncArray_1ad3151b13ffc1cc951122dcf7365b7b37" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::Gpu::AsyncArray&lt; T, &gt;::~AsyncArray</definition>
        <argsstring>()</argsstring>
        <name>~AsyncArray</name>
        <qualifiedname>amrex::Gpu::AsyncArray::~AsyncArray</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAsyncArray.H" line="62" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAsyncArray.H" bodystart="62" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Gpu_1_1AsyncArray_1ae5fa0653fa0f802d97db317490b06f08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::Gpu::AsyncArray&lt; T, &gt;::AsyncArray</definition>
        <argsstring>(AsyncArray const &amp;)=delete</argsstring>
        <name>AsyncArray</name>
        <qualifiedname>amrex::Gpu::AsyncArray::AsyncArray</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1AsyncArray" kindref="compound">AsyncArray</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAsyncArray.H" line="64" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Gpu_1_1AsyncArray_1a7daf60c1b5ef8f273684eaa098048746" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::Gpu::AsyncArray&lt; T, &gt;::AsyncArray</definition>
        <argsstring>(AsyncArray &amp;&amp;)=delete</argsstring>
        <name>AsyncArray</name>
        <qualifiedname>amrex::Gpu::AsyncArray::AsyncArray</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1AsyncArray" kindref="compound">AsyncArray</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAsyncArray.H" line="65" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Gpu_1_1AsyncArray_1ac6b94ba54d0f143f579690a55fd1150a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Gpu::AsyncArray&lt; T, &gt;::operator=</definition>
        <argsstring>(AsyncArray const &amp;)=delete</argsstring>
        <name>operator=</name>
        <qualifiedname>amrex::Gpu::AsyncArray::operator=</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1AsyncArray" kindref="compound">AsyncArray</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAsyncArray.H" line="66" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Gpu_1_1AsyncArray_1ae70344e048d89311ae808a9485fd8b8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Gpu::AsyncArray&lt; T, &gt;::operator=</definition>
        <argsstring>(AsyncArray &amp;&amp;)=delete</argsstring>
        <name>operator=</name>
        <qualifiedname>amrex::Gpu::AsyncArray::operator=</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1AsyncArray" kindref="compound">AsyncArray</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAsyncArray.H" line="67" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Gpu_1_1AsyncArray_1a2ecda4ba26cc8a9f8a28fdadf99a6894" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>T const *</type>
        <definition>T const  * amrex::Gpu::AsyncArray&lt; T, &gt;::data</definition>
        <argsstring>() const noexcept</argsstring>
        <name>data</name>
        <qualifiedname>amrex::Gpu::AsyncArray::data</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAsyncArray.H" line="69" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAsyncArray.H" bodystart="69" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Gpu_1_1AsyncArray_1aef6af3a84b1434a23a674c67f5864bfb" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>T *</type>
        <definition>T * amrex::Gpu::AsyncArray&lt; T, &gt;::data</definition>
        <argsstring>() noexcept</argsstring>
        <name>data</name>
        <qualifiedname>amrex::Gpu::AsyncArray::data</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAsyncArray.H" line="70" column="8" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAsyncArray.H" bodystart="70" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Gpu_1_1AsyncArray_1a6e7dcb50bfad7d17b1b6e90f76ad3d88" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Gpu::AsyncArray&lt; T, &gt;::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <qualifiedname>amrex::Gpu::AsyncArray::clear</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAsyncArray.H" line="71" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAsyncArray.H" bodystart="71" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Gpu_1_1AsyncArray_1a8b192b54f34ecf9a231c4877a5625a6d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Gpu::AsyncArray&lt; T, &gt;::copyToHost</definition>
        <argsstring>(T *h_p, std::size_t n) const</argsstring>
        <name>copyToHost</name>
        <qualifiedname>amrex::Gpu::AsyncArray::copyToHost</qualifiedname>
        <param>
          <type>T *</type>
          <declname>h_p</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAsyncArray.H" line="114" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAsyncArray.H" bodystart="114" bodyend="128"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAsyncArray.H" line="28" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAsyncArray.H" bodystart="29" bodyend="133"/>
    <listofallmembers>
      <member refid="classamrex_1_1Gpu_1_1AsyncArray_1a19e80d7e6014ed527622b7e69399569b" prot="public" virt="non-virtual"><scope>amrex::Gpu::AsyncArray</scope><name>AsyncArray</name></member>
      <member refid="classamrex_1_1Gpu_1_1AsyncArray_1afea82268e2d2995085c150e9865923a3" prot="public" virt="non-virtual"><scope>amrex::Gpu::AsyncArray</scope><name>AsyncArray</name></member>
      <member refid="classamrex_1_1Gpu_1_1AsyncArray_1ae5fa0653fa0f802d97db317490b06f08" prot="public" virt="non-virtual"><scope>amrex::Gpu::AsyncArray</scope><name>AsyncArray</name></member>
      <member refid="classamrex_1_1Gpu_1_1AsyncArray_1a7daf60c1b5ef8f273684eaa098048746" prot="public" virt="non-virtual"><scope>amrex::Gpu::AsyncArray</scope><name>AsyncArray</name></member>
      <member refid="classamrex_1_1Gpu_1_1AsyncArray_1a6e7dcb50bfad7d17b1b6e90f76ad3d88" prot="public" virt="non-virtual"><scope>amrex::Gpu::AsyncArray</scope><name>clear</name></member>
      <member refid="classamrex_1_1Gpu_1_1AsyncArray_1a8b192b54f34ecf9a231c4877a5625a6d" prot="public" virt="non-virtual"><scope>amrex::Gpu::AsyncArray</scope><name>copyToHost</name></member>
      <member refid="classamrex_1_1Gpu_1_1AsyncArray_1a8faf9b9425340e64e8849fad230ca590" prot="private" virt="non-virtual"><scope>amrex::Gpu::AsyncArray</scope><name>d_data</name></member>
      <member refid="classamrex_1_1Gpu_1_1AsyncArray_1a2ecda4ba26cc8a9f8a28fdadf99a6894" prot="public" virt="non-virtual"><scope>amrex::Gpu::AsyncArray</scope><name>data</name></member>
      <member refid="classamrex_1_1Gpu_1_1AsyncArray_1aef6af3a84b1434a23a674c67f5864bfb" prot="public" virt="non-virtual"><scope>amrex::Gpu::AsyncArray</scope><name>data</name></member>
      <member refid="classamrex_1_1Gpu_1_1AsyncArray_1a51d329542fc90dfadcbe838a312a5470" prot="private" virt="non-virtual"><scope>amrex::Gpu::AsyncArray</scope><name>h_data</name></member>
      <member refid="classamrex_1_1Gpu_1_1AsyncArray_1ac6b94ba54d0f143f579690a55fd1150a" prot="public" virt="non-virtual"><scope>amrex::Gpu::AsyncArray</scope><name>operator=</name></member>
      <member refid="classamrex_1_1Gpu_1_1AsyncArray_1ae70344e048d89311ae808a9485fd8b8f" prot="public" virt="non-virtual"><scope>amrex::Gpu::AsyncArray</scope><name>operator=</name></member>
      <member refid="classamrex_1_1Gpu_1_1AsyncArray_1ad3151b13ffc1cc951122dcf7365b7b37" prot="public" virt="non-virtual"><scope>amrex::Gpu::AsyncArray</scope><name>~AsyncArray</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
