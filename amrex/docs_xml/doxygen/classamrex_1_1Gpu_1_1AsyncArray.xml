<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classamrex_1_1Gpu_1_1AsyncArray" kind="class" language="C++" prot="public">
    <compoundname>amrex::Gpu::AsyncArray</compoundname>
    <includes refid="AMReX__GpuAsyncArray_8H" local="no">AMReX_GpuAsyncArray.H</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
      <param>
        <type>typename</type>
        <declname>std::enable_if< AMREX_IS_TRIVIALLY_COPYABLE(T), int >::type</declname>
        <defname>std::enable_if< AMREX_IS_TRIVIALLY_COPYABLE(T), int >::type</defname>
        <defval>0</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1Gpu_1_1AsyncArray_1afcdba42d606234841dc54107bb186fb8" prot="private" static="no" mutable="no">
        <type>T *</type>
        <definition>T* amrex::Gpu::AsyncArray&lt; T, type &gt;::d_data</definition>
        <argsstring></argsstring>
        <name>d_data</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAsyncArray.H" line="121" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAsyncArray.H" bodystart="121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1Gpu_1_1AsyncArray_1a4d8ff9603bf44cd72f83703f34ecb0c9" prot="private" static="no" mutable="no">
        <type>T *</type>
        <definition>T* amrex::Gpu::AsyncArray&lt; T, type &gt;::h_data</definition>
        <argsstring></argsstring>
        <name>h_data</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAsyncArray.H" line="122" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAsyncArray.H" bodystart="122" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1Gpu_1_1AsyncArray_1a5132aad64609e805be6bd7fe440396f6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::Gpu::AsyncArray&lt; T, type &gt;::AsyncArray</definition>
        <argsstring>(T const *h_p, const std::size_t n)</argsstring>
        <name>AsyncArray</name>
        <param>
          <type>T const *</type>
          <declname>h_p</declname>
        </param>
        <param>
          <type>const std::size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAsyncArray.H" line="33" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAsyncArray.H" bodystart="33" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Gpu_1_1AsyncArray_1a293682071d4e5741d0229e7b75f8a8e2" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
            <defval>T</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_pod&lt; U &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>amrex::Gpu::AsyncArray&lt; T, type &gt;::AsyncArray</definition>
        <argsstring>(const std::size_t n)</argsstring>
        <name>AsyncArray</name>
        <param>
          <type>const std::size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAsyncArray.H" line="48" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAsyncArray.H" bodystart="48" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Gpu_1_1AsyncArray_1a2b729323da571ece4ca18364dcd2d8d8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::Gpu::AsyncArray&lt; T, type &gt;::~AsyncArray</definition>
        <argsstring>()</argsstring>
        <name>~AsyncArray</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAsyncArray.H" line="63" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAsyncArray.H" bodystart="63" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Gpu_1_1AsyncArray_1a3c0649a02bc8985508034155a8fabee5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>T const  *</type>
        <definition>T const* amrex::Gpu::AsyncArray&lt; T, type &gt;::data</definition>
        <argsstring>() const noexcept</argsstring>
        <name>data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAsyncArray.H" line="65" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAsyncArray.H" bodystart="65" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Gpu_1_1AsyncArray_1a6003edef5bf56afdbc973c6cffd03569" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T *</type>
        <definition>T* amrex::Gpu::AsyncArray&lt; T, type &gt;::data</definition>
        <argsstring>() noexcept</argsstring>
        <name>data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAsyncArray.H" line="66" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAsyncArray.H" bodystart="66" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Gpu_1_1AsyncArray_1ae4a6ff36b2cd3780d311a02bb7126e30" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Gpu::AsyncArray&lt; T, type &gt;::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAsyncArray.H" line="67" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAsyncArray.H" bodystart="67" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Gpu_1_1AsyncArray_1a5ff1c6c875107fbb0d57d9f627297d69" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Gpu::AsyncArray&lt; T, type &gt;::copyToHost</definition>
        <argsstring>(T *h_p, std::size_t n) const</argsstring>
        <name>copyToHost</name>
        <param>
          <type>T *</type>
          <declname>h_p</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAsyncArray.H" line="105" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAsyncArray.H" bodystart="105" bodyend="118"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAsyncArray.H" line="30" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAsyncArray.H" bodystart="29" bodyend="123"/>
    <listofallmembers>
      <member refid="classamrex_1_1Gpu_1_1AsyncArray_1a5132aad64609e805be6bd7fe440396f6" prot="public" virt="non-virtual"><scope>amrex::Gpu::AsyncArray</scope><name>AsyncArray</name></member>
      <member refid="classamrex_1_1Gpu_1_1AsyncArray_1a293682071d4e5741d0229e7b75f8a8e2" prot="public" virt="non-virtual"><scope>amrex::Gpu::AsyncArray</scope><name>AsyncArray</name></member>
      <member refid="classamrex_1_1Gpu_1_1AsyncArray_1ae4a6ff36b2cd3780d311a02bb7126e30" prot="public" virt="non-virtual"><scope>amrex::Gpu::AsyncArray</scope><name>clear</name></member>
      <member refid="classamrex_1_1Gpu_1_1AsyncArray_1a5ff1c6c875107fbb0d57d9f627297d69" prot="public" virt="non-virtual"><scope>amrex::Gpu::AsyncArray</scope><name>copyToHost</name></member>
      <member refid="classamrex_1_1Gpu_1_1AsyncArray_1afcdba42d606234841dc54107bb186fb8" prot="private" virt="non-virtual"><scope>amrex::Gpu::AsyncArray</scope><name>d_data</name></member>
      <member refid="classamrex_1_1Gpu_1_1AsyncArray_1a3c0649a02bc8985508034155a8fabee5" prot="public" virt="non-virtual"><scope>amrex::Gpu::AsyncArray</scope><name>data</name></member>
      <member refid="classamrex_1_1Gpu_1_1AsyncArray_1a6003edef5bf56afdbc973c6cffd03569" prot="public" virt="non-virtual"><scope>amrex::Gpu::AsyncArray</scope><name>data</name></member>
      <member refid="classamrex_1_1Gpu_1_1AsyncArray_1a4d8ff9603bf44cd72f83703f34ecb0c9" prot="private" virt="non-virtual"><scope>amrex::Gpu::AsyncArray</scope><name>h_data</name></member>
      <member refid="classamrex_1_1Gpu_1_1AsyncArray_1a2b729323da571ece4ca18364dcd2d8d8" prot="public" virt="non-virtual"><scope>amrex::Gpu::AsyncArray</scope><name>~AsyncArray</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
