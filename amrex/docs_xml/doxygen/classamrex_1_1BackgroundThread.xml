<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classamrex_1_1BackgroundThread" kind="class" language="C++" prot="public">
    <compoundname>amrex::BackgroundThread</compoundname>
    <includes refid="AMReX__BackgroundThread_8H" local="no">AMReX_BackgroundThread.H</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1BackgroundThread_1a3093fd845f22fd2dd628aca6a442851f" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; std::thread &gt;</type>
        <definition>std::unique_ptr&lt;std::thread&gt; amrex::BackgroundThread::m_thread</definition>
        <argsstring></argsstring>
        <name>m_thread</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BackgroundThread.H" line="33" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BackgroundThread.H" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1BackgroundThread_1a9f33f06880c6b03a62b70fd559ab53df" prot="private" static="no" mutable="no">
        <type>std::mutex</type>
        <definition>std::mutex amrex::BackgroundThread::m_mutx</definition>
        <argsstring></argsstring>
        <name>m_mutx</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BackgroundThread.H" line="34" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BackgroundThread.H" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1BackgroundThread_1a71752cb305b9ed234397d1575b5c679b" prot="private" static="no" mutable="no">
        <type>std::condition_variable</type>
        <definition>std::condition_variable amrex::BackgroundThread::m_job_cond</definition>
        <argsstring></argsstring>
        <name>m_job_cond</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BackgroundThread.H" line="35" column="29" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BackgroundThread.H" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1BackgroundThread_1adbb640d4685fec31cf46171b7833a059" prot="private" static="no" mutable="no">
        <type>std::condition_variable</type>
        <definition>std::condition_variable amrex::BackgroundThread::m_done_cond</definition>
        <argsstring></argsstring>
        <name>m_done_cond</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BackgroundThread.H" line="36" column="29" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BackgroundThread.H" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1BackgroundThread_1ab67b8bb7e25e2ed11cc2232a777835fd" prot="private" static="no" mutable="no">
        <type>std::queue&lt; std::function&lt; void()&gt; &gt;</type>
        <definition>std::queue&lt;std::function&lt;void()&gt; &gt; amrex::BackgroundThread::m_func</definition>
        <argsstring></argsstring>
        <name>m_func</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BackgroundThread.H" line="37" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BackgroundThread.H" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1BackgroundThread_1a50eaee402e1e16b45a4e535eda4f2860" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::BackgroundThread::m_clearing</definition>
        <argsstring></argsstring>
        <name>m_clearing</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BackgroundThread.H" line="38" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BackgroundThread.H" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1BackgroundThread_1a3011c472d16bad3f2fb7f8749dfb31f4" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::BackgroundThread::m_finalizing</definition>
        <argsstring></argsstring>
        <name>m_finalizing</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BackgroundThread.H" line="39" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BackgroundThread.H" bodystart="39" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1BackgroundThread_1a276804e5d463c6c46c248701f73f18c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::BackgroundThread::BackgroundThread</definition>
        <argsstring>()</argsstring>
        <name>BackgroundThread</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BackgroundThread.H" line="18" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BackgroundThread.cpp" bodystart="5" bodyend="8"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BackgroundThread_1ab5ad8734e492ca7784f7fa8af2d4c29e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::BackgroundThread::~BackgroundThread</definition>
        <argsstring>()</argsstring>
        <name>~BackgroundThread</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BackgroundThread.H" line="19" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BackgroundThread.cpp" bodystart="10" bodyend="17"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BackgroundThread_1ad8890dc2d74b85c2c76944b9fe74b9bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::BackgroundThread::BackgroundThread</definition>
        <argsstring>(BackgroundThread const &amp;)=delete</argsstring>
        <name>BackgroundThread</name>
        <param>
          <type><ref refid="classamrex_1_1BackgroundThread" kindref="compound">BackgroundThread</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BackgroundThread.H" line="20" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BackgroundThread_1af44fe9acf8dd7a7c6815ce8380134849" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::BackgroundThread::BackgroundThread</definition>
        <argsstring>(BackgroundThread &amp;&amp;)=delete</argsstring>
        <name>BackgroundThread</name>
        <param>
          <type><ref refid="classamrex_1_1BackgroundThread" kindref="compound">BackgroundThread</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BackgroundThread.H" line="21" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BackgroundThread_1ac0f5a3c8b889af8ac29ab19ccf3b288b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BackgroundThread" kindref="compound">BackgroundThread</ref> &amp;</type>
        <definition>BackgroundThread&amp; amrex::BackgroundThread::operator=</definition>
        <argsstring>(BackgroundThread const &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1BackgroundThread" kindref="compound">BackgroundThread</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BackgroundThread.H" line="22" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BackgroundThread_1a84fe07d6505966071f15d2f65509baa7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BackgroundThread" kindref="compound">BackgroundThread</ref> &amp;</type>
        <definition>BackgroundThread&amp; amrex::BackgroundThread::operator=</definition>
        <argsstring>(BackgroundThread &amp;&amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1BackgroundThread" kindref="compound">BackgroundThread</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BackgroundThread.H" line="23" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BackgroundThread_1a31e717cddbcc5e4079da2d35d11a5c68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BackgroundThread::Submit</definition>
        <argsstring>(std::function&lt; void()&gt; &amp;&amp;a_f)</argsstring>
        <name>Submit</name>
        <param>
          <type>std::function&lt; void()&gt; &amp;&amp;</type>
          <declname>a_f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BackgroundThread.H" line="25" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BackgroundThread.cpp" bodystart="38" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BackgroundThread_1aa62257343be0d75867496c765d0d959e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BackgroundThread::Submit</definition>
        <argsstring>(std::function&lt; void()&gt; const &amp;a_f)</argsstring>
        <name>Submit</name>
        <param>
          <type>std::function&lt; void()&gt; const &amp;</type>
          <declname>a_f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BackgroundThread.H" line="26" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BackgroundThread.cpp" bodystart="45" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BackgroundThread_1a1087e92b5b216fe4574e45078338cd51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BackgroundThread::Finish</definition>
        <argsstring>()</argsstring>
        <name>Finish</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BackgroundThread.H" line="28" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BackgroundThread.cpp" bodystart="52" bodyend="61"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classamrex_1_1BackgroundThread_1a7ef8784994644d4a4fa8a46205610b2b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BackgroundThread::do_job</definition>
        <argsstring>()</argsstring>
        <name>do_job</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BackgroundThread.H" line="31" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BackgroundThread.cpp" bodystart="19" bodyend="36"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="2">
        <label>std::queue&lt; std::function&lt; void()&gt; &gt;</label>
      </node>
      <node id="4">
        <label>std::unique_ptr&lt; std::thread &gt;</label>
      </node>
      <node id="3">
        <label>std::mutex</label>
      </node>
      <node id="1">
        <label>amrex::BackgroundThread</label>
        <link refid="classamrex_1_1BackgroundThread"/>
        <childnode refid="2" relation="usage">
          <edgelabel>m_func</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>m_mutx</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>m_thread</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BackgroundThread.H" line="15" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BackgroundThread.H" bodystart="16" bodyend="40"/>
    <listofallmembers>
      <member refid="classamrex_1_1BackgroundThread_1a276804e5d463c6c46c248701f73f18c7" prot="public" virt="non-virtual"><scope>amrex::BackgroundThread</scope><name>BackgroundThread</name></member>
      <member refid="classamrex_1_1BackgroundThread_1ad8890dc2d74b85c2c76944b9fe74b9bf" prot="public" virt="non-virtual"><scope>amrex::BackgroundThread</scope><name>BackgroundThread</name></member>
      <member refid="classamrex_1_1BackgroundThread_1af44fe9acf8dd7a7c6815ce8380134849" prot="public" virt="non-virtual"><scope>amrex::BackgroundThread</scope><name>BackgroundThread</name></member>
      <member refid="classamrex_1_1BackgroundThread_1a7ef8784994644d4a4fa8a46205610b2b" prot="private" virt="non-virtual"><scope>amrex::BackgroundThread</scope><name>do_job</name></member>
      <member refid="classamrex_1_1BackgroundThread_1a1087e92b5b216fe4574e45078338cd51" prot="public" virt="non-virtual"><scope>amrex::BackgroundThread</scope><name>Finish</name></member>
      <member refid="classamrex_1_1BackgroundThread_1a50eaee402e1e16b45a4e535eda4f2860" prot="private" virt="non-virtual"><scope>amrex::BackgroundThread</scope><name>m_clearing</name></member>
      <member refid="classamrex_1_1BackgroundThread_1adbb640d4685fec31cf46171b7833a059" prot="private" virt="non-virtual"><scope>amrex::BackgroundThread</scope><name>m_done_cond</name></member>
      <member refid="classamrex_1_1BackgroundThread_1a3011c472d16bad3f2fb7f8749dfb31f4" prot="private" virt="non-virtual"><scope>amrex::BackgroundThread</scope><name>m_finalizing</name></member>
      <member refid="classamrex_1_1BackgroundThread_1ab67b8bb7e25e2ed11cc2232a777835fd" prot="private" virt="non-virtual"><scope>amrex::BackgroundThread</scope><name>m_func</name></member>
      <member refid="classamrex_1_1BackgroundThread_1a71752cb305b9ed234397d1575b5c679b" prot="private" virt="non-virtual"><scope>amrex::BackgroundThread</scope><name>m_job_cond</name></member>
      <member refid="classamrex_1_1BackgroundThread_1a9f33f06880c6b03a62b70fd559ab53df" prot="private" virt="non-virtual"><scope>amrex::BackgroundThread</scope><name>m_mutx</name></member>
      <member refid="classamrex_1_1BackgroundThread_1a3093fd845f22fd2dd628aca6a442851f" prot="private" virt="non-virtual"><scope>amrex::BackgroundThread</scope><name>m_thread</name></member>
      <member refid="classamrex_1_1BackgroundThread_1ac0f5a3c8b889af8ac29ab19ccf3b288b" prot="public" virt="non-virtual"><scope>amrex::BackgroundThread</scope><name>operator=</name></member>
      <member refid="classamrex_1_1BackgroundThread_1a84fe07d6505966071f15d2f65509baa7" prot="public" virt="non-virtual"><scope>amrex::BackgroundThread</scope><name>operator=</name></member>
      <member refid="classamrex_1_1BackgroundThread_1a31e717cddbcc5e4079da2d35d11a5c68" prot="public" virt="non-virtual"><scope>amrex::BackgroundThread</scope><name>Submit</name></member>
      <member refid="classamrex_1_1BackgroundThread_1aa62257343be0d75867496c765d0d959e" prot="public" virt="non-virtual"><scope>amrex::BackgroundThread</scope><name>Submit</name></member>
      <member refid="classamrex_1_1BackgroundThread_1ab5ad8734e492ca7784f7fa8af2d4c29e" prot="public" virt="non-virtual"><scope>amrex::BackgroundThread</scope><name>~BackgroundThread</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
