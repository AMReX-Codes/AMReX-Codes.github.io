<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="AMReX__GpuLaunchFunctsC_8H" kind="file" language="C++">
    <compoundname>AMReX_GpuLaunchFunctsC.H</compoundname>
    <includes local="no">AMReX_Config.H</includes>
    <incdepgraph>
      <node id="1">
        <label>/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H</label>
        <link refid="AMReX__GpuLaunchFunctsC_8H"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>AMReX_Config.H</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespaceamrex">amrex</innernamespace>
    <innernamespace refid="namespaceamrex_1_1detail">amrex::detail</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>AMREX_GPU_LAUNCH_FUNCTS_C_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AMREX_GPU_LAUNCH_FUNCTS_C_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;AMReX_Config.H&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceamrex" kindref="compound">amrex</ref><sp/>{</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacedetail" kindref="compound">detail</ref><sp/>{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__GpuQualifiers_8H_1a4e626ebf06898d71a9e0790877f1694f" kindref="member">AMREX_GPU_DEVICE</ref></highlight></codeline>
<codeline lineno="10" refid="namespaceamrex_1_1detail_1aca3a36a75e09011d483bcaaa6f9ee7f5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1detail_1aca3a36a75e09011d483bcaaa6f9ee7f5" kindref="member">call_f</ref><sp/>(F<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>f,<sp/>N<sp/>i)</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noexcept<sp/>-&gt;<sp/>decltype(f(0))</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f(i);</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__GpuQualifiers_8H_1a4e626ebf06898d71a9e0790877f1694f" kindref="member">AMREX_GPU_DEVICE</ref></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1detail_1aca3a36a75e09011d483bcaaa6f9ee7f5" kindref="member">call_f</ref><sp/>(F<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>f,<sp/>N<sp/>i)</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noexcept<sp/>-&gt;<sp/>decltype(f(0,<ref refid="structamrex_1_1Gpu_1_1Handler" kindref="compound">Gpu::Handler</ref>{}))</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f(i,Gpu::Handler{});</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__GpuQualifiers_8H_1a4e626ebf06898d71a9e0790877f1694f" kindref="member">AMREX_GPU_DEVICE</ref></highlight></codeline>
<codeline lineno="26" refid="namespaceamrex_1_1detail_1ac02794506750edcf0d39acedf4ddb19d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1detail_1aca3a36a75e09011d483bcaaa6f9ee7f5" kindref="member">call_f</ref><sp/>(F<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>f,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k)</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noexcept<sp/>-&gt;<sp/>decltype(f(0,0,0))</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f(i,j,k);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__GpuQualifiers_8H_1a4e626ebf06898d71a9e0790877f1694f" kindref="member">AMREX_GPU_DEVICE</ref></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1detail_1aca3a36a75e09011d483bcaaa6f9ee7f5" kindref="member">call_f</ref><sp/>(F<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>f,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k)</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noexcept<sp/>-&gt;<sp/>decltype(f(0,0,0,<ref refid="structamrex_1_1Gpu_1_1Handler" kindref="compound">Gpu::Handler</ref>{}))</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f(i,j,k,Gpu::Handler{});</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__GpuQualifiers_8H_1a4e626ebf06898d71a9e0790877f1694f" kindref="member">AMREX_GPU_DEVICE</ref></highlight></codeline>
<codeline lineno="42" refid="namespaceamrex_1_1detail_1a58cd3a1197191b66f72a97cbd1d11544" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1detail_1aca3a36a75e09011d483bcaaa6f9ee7f5" kindref="member">call_f</ref><sp/>(F<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>f,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k,<sp/>T<sp/>n)</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noexcept<sp/>-&gt;<sp/>decltype(f(0,0,0,0))</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f(i,j,k,n);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__GpuQualifiers_8H_1a4e626ebf06898d71a9e0790877f1694f" kindref="member">AMREX_GPU_DEVICE</ref></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1detail_1aca3a36a75e09011d483bcaaa6f9ee7f5" kindref="member">call_f</ref><sp/>(F<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>f,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k,<sp/>T<sp/>n)</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noexcept<sp/>-&gt;<sp/>decltype(f(0,0,0,0,<ref refid="structamrex_1_1Gpu_1_1Handler" kindref="compound">Gpu::Handler</ref>{}))</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f(i,j,k,n,Gpu::Handler{});</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal">}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L&gt;</highlight></codeline>
<codeline lineno="58" refid="namespaceamrex_1ada73ee47d1c3a0d63725ce77e1334257" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1ada73ee47d1c3a0d63725ce77e1334257" kindref="member">launch</ref><sp/>(T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>n,<sp/>L&amp;&amp;<sp/>f,<sp/>std::size_t<sp/></highlight><highlight class="comment">/*shared_mem_bytes*/</highlight><highlight class="normal">=0)<sp/>noexcept</highlight></codeline>
<codeline lineno="59"><highlight class="normal">{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>f(n);</highlight></codeline>
<codeline lineno="61"><highlight class="normal">}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal">template<sp/>&lt;typename<sp/>T,<sp/>typename<sp/>L,<sp/>typename<sp/>M=std::enable_if_t&lt;std::is_integral&lt;T&gt;::value&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="64" refid="namespaceamrex_1a254b157995b540641c02a74d2ad65ebe" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a254b157995b540641c02a74d2ad65ebe" kindref="member">For</ref><sp/>(T<sp/>n,<sp/>L&amp;&amp;<sp/>f)<sp/>noexcept</highlight></codeline>
<codeline lineno="65"><highlight class="normal">{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(T<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1detail_1aca3a36a75e09011d483bcaaa6f9ee7f5" kindref="member">detail::call_f</ref>(f,i);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal">}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal">template<sp/>&lt;typename<sp/>T,<sp/>typename<sp/>L,<sp/>typename<sp/>M=std::enable_if_t&lt;std::is_integral&lt;T&gt;::value&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="72" refid="namespaceamrex_1a58f6305adbac638674782f274ce8bb80" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a254b157995b540641c02a74d2ad65ebe" kindref="member">For</ref><sp/>(<ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,<sp/>T<sp/>n,<sp/>L&amp;&amp;<sp/>f)<sp/>noexcept</highlight></codeline>
<codeline lineno="73"><highlight class="normal">{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a254b157995b540641c02a74d2ad65ebe" kindref="member">For</ref>(n,<sp/>std::forward&lt;L&gt;(f));</highlight></codeline>
<codeline lineno="75"><highlight class="normal">}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal">template<sp/>&lt;typename<sp/>T,<sp/>typename<sp/>L,<sp/>typename<sp/>M=std::enable_if_t&lt;std::is_integral&lt;T&gt;::value&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="78" refid="namespaceamrex_1aff9b2ebd167a621c7784769618bda4c6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1aff9b2ebd167a621c7784769618bda4c6" kindref="member">ParallelFor</ref><sp/>(T<sp/>n,<sp/>L&amp;&amp;<sp/>f)<sp/>noexcept</highlight></codeline>
<codeline lineno="79"><highlight class="normal">{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__Extension_8H_1a8c414106ab987031039a0ad05bb2519b" kindref="member">AMREX_PRAGMA_SIMD</ref></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(T<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1detail_1aca3a36a75e09011d483bcaaa6f9ee7f5" kindref="member">detail::call_f</ref>(f,i);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal">}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal">template<sp/>&lt;typename<sp/>T,<sp/>typename<sp/>L,<sp/>typename<sp/>M=std::enable_if_t&lt;std::is_integral&lt;T&gt;::value&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="87" refid="namespaceamrex_1a3402f6ed86316371198e6c2ff17ac5ac" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1aff9b2ebd167a621c7784769618bda4c6" kindref="member">ParallelFor</ref><sp/>(<ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,<sp/>T<sp/>n,<sp/>L&amp;&amp;<sp/>f)<sp/>noexcept</highlight></codeline>
<codeline lineno="88"><highlight class="normal">{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1aff9b2ebd167a621c7784769618bda4c6" kindref="member">ParallelFor</ref>(n,<sp/>std::forward&lt;L&gt;(f));</highlight></codeline>
<codeline lineno="90"><highlight class="normal">}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L&gt;</highlight></codeline>
<codeline lineno="93" refid="namespaceamrex_1a6daa7b128f7df0ad214eb964c3467cdf" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a254b157995b540641c02a74d2ad65ebe" kindref="member">For</ref><sp/>(<ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box,<sp/>L&amp;&amp;<sp/>f)<sp/>noexcept</highlight></codeline>
<codeline lineno="94"><highlight class="normal">{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lo<sp/>=<sp/><ref refid="namespaceamrex_1a71600c8a528e0f1863154e4cf0183cbc" kindref="member">amrex::lbound</ref>(box);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>hi<sp/>=<sp/><ref refid="namespaceamrex_1a6ce6b4176121c2c23327903a8139af0c" kindref="member">amrex::ubound</ref>(box);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>lo.z;<sp/>k<sp/>&lt;=<sp/>hi.z;<sp/>++k)<sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>lo.y;<sp/>j<sp/>&lt;=<sp/>hi.y;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>lo.x;<sp/>i<sp/>&lt;=<sp/>hi.x;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1detail_1aca3a36a75e09011d483bcaaa6f9ee7f5" kindref="member">detail::call_f</ref>(f,i,j,k);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>}}}</highlight></codeline>
<codeline lineno="102"><highlight class="normal">}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L&gt;</highlight></codeline>
<codeline lineno="105" refid="namespaceamrex_1a897ec22faf83646115076a4520a5abbf" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a254b157995b540641c02a74d2ad65ebe" kindref="member">For</ref><sp/>(<ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,<sp/><ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box,<sp/>L&amp;&amp;<sp/>f)<sp/>noexcept</highlight></codeline>
<codeline lineno="106"><highlight class="normal">{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a254b157995b540641c02a74d2ad65ebe" kindref="member">For</ref>(box,<sp/>std::forward&lt;L&gt;(f));</highlight></codeline>
<codeline lineno="108"><highlight class="normal">}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L&gt;</highlight></codeline>
<codeline lineno="111" refid="namespaceamrex_1ac96f4d9630c4ea1445766061b3fed3f4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1aff9b2ebd167a621c7784769618bda4c6" kindref="member">ParallelFor</ref><sp/>(<ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box,<sp/>L&amp;&amp;<sp/>f)<sp/>noexcept</highlight></codeline>
<codeline lineno="112"><highlight class="normal">{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lo<sp/>=<sp/><ref refid="namespaceamrex_1a71600c8a528e0f1863154e4cf0183cbc" kindref="member">amrex::lbound</ref>(box);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>hi<sp/>=<sp/><ref refid="namespaceamrex_1a6ce6b4176121c2c23327903a8139af0c" kindref="member">amrex::ubound</ref>(box);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>lo.z;<sp/>k<sp/>&lt;=<sp/>hi.z;<sp/>++k)<sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>lo.y;<sp/>j<sp/>&lt;=<sp/>hi.y;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__Extension_8H_1a8c414106ab987031039a0ad05bb2519b" kindref="member">AMREX_PRAGMA_SIMD</ref></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>lo.x;<sp/>i<sp/>&lt;=<sp/>hi.x;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1detail_1aca3a36a75e09011d483bcaaa6f9ee7f5" kindref="member">detail::call_f</ref>(f,i,j,k);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>}}}</highlight></codeline>
<codeline lineno="121"><highlight class="normal">}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L&gt;</highlight></codeline>
<codeline lineno="124" refid="namespaceamrex_1a4508b95a3ecc4f15b0b66d7520981f4b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1aff9b2ebd167a621c7784769618bda4c6" kindref="member">ParallelFor</ref><sp/>(<ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,<sp/><ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box,<sp/>L&amp;&amp;<sp/>f)<sp/>noexcept</highlight></codeline>
<codeline lineno="125"><highlight class="normal">{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1aff9b2ebd167a621c7784769618bda4c6" kindref="member">ParallelFor</ref>(box,<sp/>std::forward&lt;L&gt;(f));</highlight></codeline>
<codeline lineno="127"><highlight class="normal">}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal">template<sp/>&lt;typename<sp/>T,<sp/>typename<sp/>L,<sp/>typename<sp/>M=std::enable_if_t&lt;std::is_integral&lt;T&gt;::value&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="130" refid="namespaceamrex_1a27afa434166c6cd6925b63f2729f1e76" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a254b157995b540641c02a74d2ad65ebe" kindref="member">For</ref><sp/>(<ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box,<sp/>T<sp/>ncomp,<sp/>L&amp;&amp;<sp/>f)<sp/>noexcept</highlight></codeline>
<codeline lineno="131"><highlight class="normal">{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lo<sp/>=<sp/><ref refid="namespaceamrex_1a71600c8a528e0f1863154e4cf0183cbc" kindref="member">amrex::lbound</ref>(box);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>hi<sp/>=<sp/><ref refid="namespaceamrex_1a6ce6b4176121c2c23327903a8139af0c" kindref="member">amrex::ubound</ref>(box);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(T<sp/>n<sp/>=<sp/>0;<sp/>n<sp/>&lt;<sp/>ncomp;<sp/>++n)<sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>lo.z;<sp/>k<sp/>&lt;=<sp/>hi.z;<sp/>++k)<sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>lo.y;<sp/>j<sp/>&lt;=<sp/>hi.y;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>lo.x;<sp/>i<sp/>&lt;=<sp/>hi.x;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1detail_1aca3a36a75e09011d483bcaaa6f9ee7f5" kindref="member">detail::call_f</ref>(f,i,j,k,n);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}}}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal">}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal">template<sp/>&lt;typename<sp/>T,<sp/>typename<sp/>L,<sp/>typename<sp/>M=std::enable_if_t&lt;std::is_integral&lt;T&gt;::value&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="144" refid="namespaceamrex_1a71600bb098640c24e93a816035b4a254" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a254b157995b540641c02a74d2ad65ebe" kindref="member">For</ref><sp/>(<ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,<sp/><ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box,<sp/>T<sp/>ncomp,<sp/>L&amp;&amp;<sp/>f)<sp/>noexcept</highlight></codeline>
<codeline lineno="145"><highlight class="normal">{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a254b157995b540641c02a74d2ad65ebe" kindref="member">For</ref>(box,<sp/>ncomp,<sp/>std::forward&lt;L&gt;(f));</highlight></codeline>
<codeline lineno="147"><highlight class="normal">}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal">template<sp/>&lt;typename<sp/>T,<sp/>typename<sp/>L,<sp/>typename<sp/>M=std::enable_if_t&lt;std::is_integral&lt;T&gt;::value&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="150" refid="namespaceamrex_1a53fa136d7eac223e2fad334c8b15e138" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1aff9b2ebd167a621c7784769618bda4c6" kindref="member">ParallelFor</ref><sp/>(<ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box,<sp/>T<sp/>ncomp,<sp/>L&amp;&amp;<sp/>f)<sp/>noexcept</highlight></codeline>
<codeline lineno="151"><highlight class="normal">{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lo<sp/>=<sp/><ref refid="namespaceamrex_1a71600c8a528e0f1863154e4cf0183cbc" kindref="member">amrex::lbound</ref>(box);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>hi<sp/>=<sp/><ref refid="namespaceamrex_1a6ce6b4176121c2c23327903a8139af0c" kindref="member">amrex::ubound</ref>(box);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(T<sp/>n<sp/>=<sp/>0;<sp/>n<sp/>&lt;<sp/>ncomp;<sp/>++n)<sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>lo.z;<sp/>k<sp/>&lt;=<sp/>hi.z;<sp/>++k)<sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>lo.y;<sp/>j<sp/>&lt;=<sp/>hi.y;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__Extension_8H_1a8c414106ab987031039a0ad05bb2519b" kindref="member">AMREX_PRAGMA_SIMD</ref></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>lo.x;<sp/>i<sp/>&lt;=<sp/>hi.x;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1detail_1aca3a36a75e09011d483bcaaa6f9ee7f5" kindref="member">detail::call_f</ref>(f,i,j,k,n);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}}}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal">}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal">template<sp/>&lt;typename<sp/>T,<sp/>typename<sp/>L,<sp/>typename<sp/>M=std::enable_if_t&lt;std::is_integral&lt;T&gt;::value&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="165" refid="namespaceamrex_1a9744823a175d8d361c9ad0f48d6d2ca7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1aff9b2ebd167a621c7784769618bda4c6" kindref="member">ParallelFor</ref><sp/>(<ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,<sp/><ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box,<sp/>T<sp/>ncomp,<sp/>L&amp;&amp;<sp/>f)<sp/>noexcept</highlight></codeline>
<codeline lineno="166"><highlight class="normal">{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1aff9b2ebd167a621c7784769618bda4c6" kindref="member">ParallelFor</ref>(box,<sp/>ncomp,<sp/>std::forward&lt;L&gt;(f));</highlight></codeline>
<codeline lineno="168"><highlight class="normal">}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2&gt;</highlight></codeline>
<codeline lineno="171" refid="namespaceamrex_1a88a534ac7f6788df74e2a3b69f36d5ee" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a254b157995b540641c02a74d2ad65ebe" kindref="member">For</ref><sp/>(<ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/><ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/>L1&amp;&amp;<sp/>f1,<sp/>L2&amp;&amp;<sp/>f2)<sp/>noexcept</highlight></codeline>
<codeline lineno="172"><highlight class="normal">{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a254b157995b540641c02a74d2ad65ebe" kindref="member">For</ref>(box1,<sp/>std::forward&lt;L1&gt;(f1));</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a254b157995b540641c02a74d2ad65ebe" kindref="member">For</ref>(box2,<sp/>std::forward&lt;L2&gt;(f2));</highlight></codeline>
<codeline lineno="175"><highlight class="normal">}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2&gt;</highlight></codeline>
<codeline lineno="178" refid="namespaceamrex_1ac4fca0bbf870bf63e6410d5bfb8f6cec" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a254b157995b540641c02a74d2ad65ebe" kindref="member">For</ref><sp/>(<ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,<sp/><ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/><ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/>L1&amp;&amp;<sp/>f1,<sp/>L2&amp;&amp;<sp/>f2)<sp/>noexcept</highlight></codeline>
<codeline lineno="179"><highlight class="normal">{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a254b157995b540641c02a74d2ad65ebe" kindref="member">For</ref><sp/>(box1,<sp/>box2,<sp/>std::forward&lt;L1&gt;(f1),<sp/>std::forward&lt;L2&gt;(f2));</highlight></codeline>
<codeline lineno="181"><highlight class="normal">}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L3&gt;</highlight></codeline>
<codeline lineno="184" refid="namespaceamrex_1aa3d67648733b6d47b6f579e9f157ee11" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a254b157995b540641c02a74d2ad65ebe" kindref="member">For</ref><sp/>(<ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/><ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/><ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box3,<sp/>L1&amp;&amp;<sp/>f1,<sp/>L2&amp;&amp;<sp/>f2,<sp/>L3&amp;&amp;<sp/>f3)<sp/>noexcept</highlight></codeline>
<codeline lineno="185"><highlight class="normal">{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a254b157995b540641c02a74d2ad65ebe" kindref="member">For</ref>(box1,<sp/>std::forward&lt;L1&gt;(f1));</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a254b157995b540641c02a74d2ad65ebe" kindref="member">For</ref>(box2,<sp/>std::forward&lt;L2&gt;(f2));</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a254b157995b540641c02a74d2ad65ebe" kindref="member">For</ref>(box3,<sp/>std::forward&lt;L3&gt;(f3));</highlight></codeline>
<codeline lineno="189"><highlight class="normal">}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L3&gt;</highlight></codeline>
<codeline lineno="192" refid="namespaceamrex_1a12ef8f8c8150215890fcf56e024ffe54" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a254b157995b540641c02a74d2ad65ebe" kindref="member">For</ref><sp/>(<ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,<sp/><ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/><ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/><ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box3,<sp/>L1&amp;&amp;<sp/>f1,<sp/>L2&amp;&amp;<sp/>f2,<sp/>L3&amp;&amp;<sp/>f3)<sp/>noexcept</highlight></codeline>
<codeline lineno="193"><highlight class="normal">{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a254b157995b540641c02a74d2ad65ebe" kindref="member">For</ref>(box1,<sp/>box2,<sp/>box3,<sp/>std::forward&lt;L1&gt;(f1),<sp/>std::forward&lt;L2&gt;(f2),<sp/>std::forward&lt;L3&gt;(f3));</highlight></codeline>
<codeline lineno="195"><highlight class="normal">}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2,</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M1=std::enable_if_t&lt;std::is_integral&lt;T1&gt;::value&gt;,</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M2=std::enable_if_t&lt;std::is_integral&lt;T2&gt;::value&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="200" refid="namespaceamrex_1a3410871e25fe94c964b94bdc5a5af600" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a254b157995b540641c02a74d2ad65ebe" kindref="member">For</ref><sp/>(<ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/>T1<sp/>ncomp1,<sp/>L1&amp;&amp;<sp/>f1,</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/>T2<sp/>ncomp2,<sp/>L2&amp;&amp;<sp/>f2)<sp/>noexcept</highlight></codeline>
<codeline lineno="202"><highlight class="normal">{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a254b157995b540641c02a74d2ad65ebe" kindref="member">For</ref>(box1,<sp/>ncomp1,<sp/>std::forward&lt;L1&gt;(f1));</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a254b157995b540641c02a74d2ad65ebe" kindref="member">For</ref>(box2,<sp/>ncomp2,<sp/>std::forward&lt;L2&gt;(f2));</highlight></codeline>
<codeline lineno="205"><highlight class="normal">}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2,</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M1=std::enable_if_t&lt;std::is_integral&lt;T1&gt;::value&gt;,</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M2=std::enable_if_t&lt;std::is_integral&lt;T2&gt;::value&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="210" refid="namespaceamrex_1aeeba5c10b16807384e4d6fbc84843f28" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a254b157995b540641c02a74d2ad65ebe" kindref="member">For</ref><sp/>(<ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/>T1<sp/>ncomp1,<sp/>L1&amp;&amp;<sp/>f1,</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/>T2<sp/>ncomp2,<sp/>L2&amp;&amp;<sp/>f2)<sp/>noexcept</highlight></codeline>
<codeline lineno="213"><highlight class="normal">{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a254b157995b540641c02a74d2ad65ebe" kindref="member">For</ref>(box1,ncomp1,std::forward&lt;L1&gt;(f1),box2,ncomp2,std::forward&lt;L2&gt;(f2));</highlight></codeline>
<codeline lineno="215"><highlight class="normal">}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T3,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L3,</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M1=std::enable_if_t&lt;std::is_integral&lt;T1&gt;::value&gt;,</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M2=std::enable_if_t&lt;std::is_integral&lt;T2&gt;::value&gt;,</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M3=std::enable_if_t&lt;std::is_integral&lt;T3&gt;::value&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="221" refid="namespaceamrex_1a7421bdf4eb985c8246d56cb401862eec" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a254b157995b540641c02a74d2ad65ebe" kindref="member">For</ref><sp/>(<ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/>T1<sp/>ncomp1,<sp/>L1&amp;&amp;<sp/>f1,</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/>T2<sp/>ncomp2,<sp/>L2&amp;&amp;<sp/>f2,</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box3,<sp/>T3<sp/>ncomp3,<sp/>L3&amp;&amp;<sp/>f3)<sp/>noexcept</highlight></codeline>
<codeline lineno="224"><highlight class="normal">{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a254b157995b540641c02a74d2ad65ebe" kindref="member">For</ref>(box1,<sp/>ncomp1,<sp/>std::forward&lt;L1&gt;(f1));</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a254b157995b540641c02a74d2ad65ebe" kindref="member">For</ref>(box2,<sp/>ncomp2,<sp/>std::forward&lt;L2&gt;(f2));</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a254b157995b540641c02a74d2ad65ebe" kindref="member">For</ref>(box3,<sp/>ncomp3,<sp/>std::forward&lt;L3&gt;(f3));</highlight></codeline>
<codeline lineno="228"><highlight class="normal">}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T3,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L3,</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M1=std::enable_if_t&lt;std::is_integral&lt;T1&gt;::value&gt;,</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M2=std::enable_if_t&lt;std::is_integral&lt;T2&gt;::value&gt;,</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M3=std::enable_if_t&lt;std::is_integral&lt;T3&gt;::value&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="234" refid="namespaceamrex_1a24ce492df29f97eea1da6d4d6a0e5bdc" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a254b157995b540641c02a74d2ad65ebe" kindref="member">For</ref><sp/>(<ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/>T1<sp/>ncomp1,<sp/>L1&amp;&amp;<sp/>f1,</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/>T2<sp/>ncomp2,<sp/>L2&amp;&amp;<sp/>f2,</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box3,<sp/>T3<sp/>ncomp3,<sp/>L3&amp;&amp;<sp/>f3)<sp/>noexcept</highlight></codeline>
<codeline lineno="238"><highlight class="normal">{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a254b157995b540641c02a74d2ad65ebe" kindref="member">For</ref>(box1,ncomp1,std::forward&lt;L1&gt;(f1),</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>box2,ncomp2,std::forward&lt;L2&gt;(f2),</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>box3,ncomp3,std::forward&lt;L3&gt;(f3));</highlight></codeline>
<codeline lineno="242"><highlight class="normal">}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2&gt;</highlight></codeline>
<codeline lineno="245" refid="namespaceamrex_1a10d0f241ad4d9d28d20fa84630e7c476" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1aff9b2ebd167a621c7784769618bda4c6" kindref="member">ParallelFor</ref><sp/>(<ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/><ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/>L1&amp;&amp;<sp/>f1,<sp/>L2&amp;&amp;<sp/>f2)<sp/>noexcept</highlight></codeline>
<codeline lineno="246"><highlight class="normal">{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1aff9b2ebd167a621c7784769618bda4c6" kindref="member">ParallelFor</ref>(box1,<sp/>std::forward&lt;L1&gt;(f1));</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1aff9b2ebd167a621c7784769618bda4c6" kindref="member">ParallelFor</ref>(box2,<sp/>std::forward&lt;L2&gt;(f2));</highlight></codeline>
<codeline lineno="249"><highlight class="normal">}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2&gt;</highlight></codeline>
<codeline lineno="252" refid="namespaceamrex_1a3176ade9b263bdb8eff5d6899c1b44bf" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1aff9b2ebd167a621c7784769618bda4c6" kindref="member">ParallelFor</ref><sp/>(<ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,<sp/><ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/><ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/>L1&amp;&amp;<sp/>f1,<sp/>L2&amp;&amp;<sp/>f2)<sp/>noexcept</highlight></codeline>
<codeline lineno="253"><highlight class="normal">{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1aff9b2ebd167a621c7784769618bda4c6" kindref="member">ParallelFor</ref>(box1,box2,f1,f2);</highlight></codeline>
<codeline lineno="255"><highlight class="normal">}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L3&gt;</highlight></codeline>
<codeline lineno="258" refid="namespaceamrex_1a723dc684ea9fb13ba007143c904d0b45" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1aff9b2ebd167a621c7784769618bda4c6" kindref="member">ParallelFor</ref><sp/>(<ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/><ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/><ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box3,<sp/>L1&amp;&amp;<sp/>f1,<sp/>L2&amp;&amp;<sp/>f2,<sp/>L3&amp;&amp;<sp/>f3)<sp/>noexcept</highlight></codeline>
<codeline lineno="259"><highlight class="normal">{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1aff9b2ebd167a621c7784769618bda4c6" kindref="member">ParallelFor</ref>(box1,<sp/>std::forward&lt;L1&gt;(f1));</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1aff9b2ebd167a621c7784769618bda4c6" kindref="member">ParallelFor</ref>(box2,<sp/>std::forward&lt;L2&gt;(f2));</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1aff9b2ebd167a621c7784769618bda4c6" kindref="member">ParallelFor</ref>(box3,<sp/>std::forward&lt;L3&gt;(f3));</highlight></codeline>
<codeline lineno="263"><highlight class="normal">}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L3&gt;</highlight></codeline>
<codeline lineno="266" refid="namespaceamrex_1ae29d0bf15408a1011f1efe2268bc02c1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1aff9b2ebd167a621c7784769618bda4c6" kindref="member">ParallelFor</ref><sp/>(<ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,<sp/><ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/><ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/><ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box3,<sp/>L1&amp;&amp;<sp/>f1,<sp/>L2&amp;&amp;<sp/>f2,<sp/>L3&amp;&amp;<sp/>f3)<sp/>noexcept</highlight></codeline>
<codeline lineno="267"><highlight class="normal">{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1aff9b2ebd167a621c7784769618bda4c6" kindref="member">ParallelFor</ref>(box1,box2,box3,std::forward&lt;L1&gt;(f1),std::forward&lt;L2&gt;(f2),std::forward&lt;L3&gt;(f3));</highlight></codeline>
<codeline lineno="269"><highlight class="normal">}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2,</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M1=std::enable_if_t&lt;std::is_integral&lt;T1&gt;::value&gt;,</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M2=std::enable_if_t&lt;std::is_integral&lt;T2&gt;::value&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="274" refid="namespaceamrex_1a6f268bb50cb57088d5321ed0c04c61b1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1aff9b2ebd167a621c7784769618bda4c6" kindref="member">ParallelFor</ref><sp/>(<ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/>T1<sp/>ncomp1,<sp/>L1&amp;&amp;<sp/>f1,</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/>T2<sp/>ncomp2,<sp/>L2&amp;&amp;<sp/>f2)<sp/>noexcept</highlight></codeline>
<codeline lineno="276"><highlight class="normal">{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1aff9b2ebd167a621c7784769618bda4c6" kindref="member">ParallelFor</ref>(box1,<sp/>ncomp1,<sp/>std::forward&lt;L1&gt;(f1));</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1aff9b2ebd167a621c7784769618bda4c6" kindref="member">ParallelFor</ref>(box2,<sp/>ncomp2,<sp/>std::forward&lt;L2&gt;(f2));</highlight></codeline>
<codeline lineno="279"><highlight class="normal">}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2,</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M1=std::enable_if_t&lt;std::is_integral&lt;T1&gt;::value&gt;,</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M2=std::enable_if_t&lt;std::is_integral&lt;T2&gt;::value&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="284" refid="namespaceamrex_1ad72c9207638dee72b9c2ccedc35868d6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1aff9b2ebd167a621c7784769618bda4c6" kindref="member">ParallelFor</ref><sp/>(<ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/>T1<sp/>ncomp1,<sp/>L1&amp;&amp;<sp/>f1,</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/>T2<sp/>ncomp2,<sp/>L2&amp;&amp;<sp/>f2)<sp/>noexcept</highlight></codeline>
<codeline lineno="287"><highlight class="normal">{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1aff9b2ebd167a621c7784769618bda4c6" kindref="member">ParallelFor</ref>(box1,ncomp1,std::forward&lt;L1&gt;(f1),</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>box2,ncomp2,std::forward&lt;L2&gt;(f2));</highlight></codeline>
<codeline lineno="290"><highlight class="normal">}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T3,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L3,</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M1=std::enable_if_t&lt;std::is_integral&lt;T1&gt;::value&gt;,</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M2=std::enable_if_t&lt;std::is_integral&lt;T2&gt;::value&gt;,</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M3=std::enable_if_t&lt;std::is_integral&lt;T3&gt;::value&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="296" refid="namespaceamrex_1ac9332ec3412332457a7273412131b24a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1aff9b2ebd167a621c7784769618bda4c6" kindref="member">ParallelFor</ref><sp/>(<ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/>T1<sp/>ncomp1,<sp/>L1&amp;&amp;<sp/>f1,</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/>T2<sp/>ncomp2,<sp/>L2&amp;&amp;<sp/>f2,</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box3,<sp/>T3<sp/>ncomp3,<sp/>L3&amp;&amp;<sp/>f3)<sp/>noexcept</highlight></codeline>
<codeline lineno="299"><highlight class="normal">{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1aff9b2ebd167a621c7784769618bda4c6" kindref="member">ParallelFor</ref>(box1,<sp/>ncomp1,<sp/>std::forward&lt;L1&gt;(f1));</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1aff9b2ebd167a621c7784769618bda4c6" kindref="member">ParallelFor</ref>(box2,<sp/>ncomp2,<sp/>std::forward&lt;L2&gt;(f2));</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1aff9b2ebd167a621c7784769618bda4c6" kindref="member">ParallelFor</ref>(box3,<sp/>ncomp3,<sp/>std::forward&lt;L3&gt;(f3));</highlight></codeline>
<codeline lineno="303"><highlight class="normal">}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T3,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L3,</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M1=std::enable_if_t&lt;std::is_integral&lt;T1&gt;::value&gt;,</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M2=std::enable_if_t&lt;std::is_integral&lt;T2&gt;::value&gt;,</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M3=std::enable_if_t&lt;std::is_integral&lt;T3&gt;::value&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="309" refid="namespaceamrex_1a410d6b1d4212f6b2cd1166ab26a693c6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1aff9b2ebd167a621c7784769618bda4c6" kindref="member">ParallelFor</ref><sp/>(<ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/>T1<sp/>ncomp1,<sp/>L1&amp;&amp;<sp/>f1,</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/>T2<sp/>ncomp2,<sp/>L2&amp;&amp;<sp/>f2,</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box3,<sp/>T3<sp/>ncomp3,<sp/>L3&amp;&amp;<sp/>f3)<sp/>noexcept</highlight></codeline>
<codeline lineno="313"><highlight class="normal">{</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1aff9b2ebd167a621c7784769618bda4c6" kindref="member">ParallelFor</ref>(box1,<sp/>ncomp1,<sp/>std::forward&lt;L1&gt;(f1),</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>box2,<sp/>ncomp2,<sp/>std::forward&lt;L2&gt;(f2),</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>box3,<sp/>ncomp3,<sp/>std::forward&lt;L3&gt;(f3));</highlight></codeline>
<codeline lineno="317"><highlight class="normal">}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2,</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M=std::enable_if_t&lt;std::is_integral&lt;N&gt;::value&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="321" refid="namespaceamrex_1a5a1395d7a528a4346d3abbbf457bf078" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a5a1395d7a528a4346d3abbbf457bf078" kindref="member">FabReduce</ref><sp/>(<ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box,<sp/>N<sp/>ncomp,<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>init_val,</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L1&amp;&amp;<sp/>f1,<sp/>L2&amp;&amp;<sp/>f2,<sp/>std::size_t<sp/></highlight><highlight class="comment">/*shared_mem_bytes*/</highlight><highlight class="normal">=0)<sp/>noexcept</highlight></codeline>
<codeline lineno="323"><highlight class="normal">{</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>init_val;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lo<sp/>=<sp/><ref refid="namespaceamrex_1a71600c8a528e0f1863154e4cf0183cbc" kindref="member">amrex::lbound</ref>(box);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>hi<sp/>=<sp/><ref refid="namespaceamrex_1a6ce6b4176121c2c23327903a8139af0c" kindref="member">amrex::ubound</ref>(box);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(N<sp/>n<sp/>=<sp/>0;<sp/>n<sp/>&lt;<sp/>ncomp;<sp/>++n)<sp/>{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>lo.z;<sp/>k<sp/>&lt;=<sp/>hi.z;<sp/>++k)<sp/>{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>lo.y;<sp/>j<sp/>&lt;=<sp/>hi.y;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>lo.x;<sp/>i<sp/>&lt;=<sp/>hi.x;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f1(i,j,k,n,&amp;r);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}}}</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>f2(r);</highlight></codeline>
<codeline lineno="335"><highlight class="normal">}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2&gt;</highlight></codeline>
<codeline lineno="338" refid="namespaceamrex_1a6fbc9ce751f84cb6447998a0ef18da98" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a5a1395d7a528a4346d3abbbf457bf078" kindref="member">FabReduce</ref><sp/>(<ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box,<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>init_val,</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L1&amp;&amp;<sp/>f1,<sp/>L2&amp;&amp;<sp/>f2,<sp/>std::size_t<sp/></highlight><highlight class="comment">/*shared_mem_bytes*/</highlight><highlight class="normal">=0)<sp/>noexcept</highlight></codeline>
<codeline lineno="340"><highlight class="normal">{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>init_val;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lo<sp/>=<sp/><ref refid="namespaceamrex_1a71600c8a528e0f1863154e4cf0183cbc" kindref="member">amrex::lbound</ref>(box);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>hi<sp/>=<sp/><ref refid="namespaceamrex_1a6ce6b4176121c2c23327903a8139af0c" kindref="member">amrex::ubound</ref>(box);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>lo.z;<sp/>k<sp/>&lt;=<sp/>hi.z;<sp/>++k)<sp/>{</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>lo.y;<sp/>j<sp/>&lt;=<sp/>hi.y;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>lo.x;<sp/>i<sp/>&lt;=<sp/>hi.x;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f1(i,j,k,&amp;r);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>}}}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>f2(r);</highlight></codeline>
<codeline lineno="350"><highlight class="normal">}</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2,</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M=std::enable_if_t&lt;std::is_integral&lt;N&gt;::value&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="354" refid="namespaceamrex_1aa97bf4be56f176e3af5b90f5b5955a04" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1aa97bf4be56f176e3af5b90f5b5955a04" kindref="member">VecReduce</ref><sp/>(N<sp/>n,<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>init_val,</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L1&amp;&amp;<sp/>f1,<sp/>L2&amp;&amp;<sp/>f2,<sp/>std::size_t<sp/></highlight><highlight class="comment">/*shared_mem_bytes*/</highlight><highlight class="normal">=0)<sp/>noexcept</highlight></codeline>
<codeline lineno="356"><highlight class="normal">{</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>init_val;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(N<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f1(i,&amp;r);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>f2(r);</highlight></codeline>
<codeline lineno="362"><highlight class="normal">}</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal">template<sp/>&lt;typename<sp/>T,<sp/>typename<sp/>L,<sp/>typename<sp/>M=std::enable_if_t&lt;std::is_integral&lt;T&gt;::value&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="365" refid="namespaceamrex_1a8fbd6b37b492537aed607bfd14595409" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a8fbd6b37b492537aed607bfd14595409" kindref="member">HostDeviceParallelFor</ref><sp/>(T<sp/>n,<sp/>L&amp;&amp;<sp/>f)<sp/>noexcept</highlight></codeline>
<codeline lineno="366"><highlight class="normal">{</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1aff9b2ebd167a621c7784769618bda4c6" kindref="member">ParallelFor</ref>(n,std::forward&lt;L&gt;(f));</highlight></codeline>
<codeline lineno="368"><highlight class="normal">}</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L&gt;</highlight></codeline>
<codeline lineno="371" refid="namespaceamrex_1ada9330c731a48fc44471ebc3c6487231" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a8fbd6b37b492537aed607bfd14595409" kindref="member">HostDeviceParallelFor</ref><sp/>(<ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box,<sp/>L&amp;&amp;<sp/>f)<sp/>noexcept</highlight></codeline>
<codeline lineno="372"><highlight class="normal">{</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1aff9b2ebd167a621c7784769618bda4c6" kindref="member">ParallelFor</ref>(box,std::forward&lt;L&gt;(f));</highlight></codeline>
<codeline lineno="374"><highlight class="normal">}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal">template<sp/>&lt;typename<sp/>T,<sp/>typename<sp/>L,<sp/>typename<sp/>M=std::enable_if_t&lt;std::is_integral&lt;T&gt;::value&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="377" refid="namespaceamrex_1a0cccddb84fe8782da9ad7a41659db4a0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a8fbd6b37b492537aed607bfd14595409" kindref="member">HostDeviceParallelFor</ref><sp/>(<ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box,<sp/>T<sp/>ncomp,<sp/>L&amp;&amp;<sp/>f)<sp/>noexcept</highlight></codeline>
<codeline lineno="378"><highlight class="normal">{</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1aff9b2ebd167a621c7784769618bda4c6" kindref="member">ParallelFor</ref>(box,ncomp,std::forward&lt;L&gt;(f));</highlight></codeline>
<codeline lineno="380"><highlight class="normal">}</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2&gt;</highlight></codeline>
<codeline lineno="383" refid="namespaceamrex_1a8a34ce92315500abfec2cd2f5a6e5874" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a8fbd6b37b492537aed607bfd14595409" kindref="member">HostDeviceParallelFor</ref><sp/>(<ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/><ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/>L1&amp;&amp;<sp/>f1,<sp/>L2&amp;&amp;<sp/>f2)<sp/>noexcept</highlight></codeline>
<codeline lineno="384"><highlight class="normal">{</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1aff9b2ebd167a621c7784769618bda4c6" kindref="member">ParallelFor</ref>(box1,box2,std::forward&lt;L1&gt;(f1),std::forward&lt;L2&gt;(f2));</highlight></codeline>
<codeline lineno="386"><highlight class="normal">}</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L3&gt;</highlight></codeline>
<codeline lineno="389" refid="namespaceamrex_1a291ee384b7b8dfe9bbfd673ea01e1116" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a8fbd6b37b492537aed607bfd14595409" kindref="member">HostDeviceParallelFor</ref><sp/>(<ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/><ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/><ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box3,</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L1&amp;&amp;<sp/>f1,<sp/>L2&amp;&amp;<sp/>f2,<sp/>L3&amp;&amp;<sp/>f3)<sp/>noexcept</highlight></codeline>
<codeline lineno="391"><highlight class="normal">{</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1aff9b2ebd167a621c7784769618bda4c6" kindref="member">ParallelFor</ref>(box1,box2,box3,std::forward&lt;L1&gt;(f1),std::forward&lt;L2&gt;(f2),std::forward&lt;L3&gt;(f3));</highlight></codeline>
<codeline lineno="393"><highlight class="normal">}</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2,</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M1=std::enable_if_t&lt;std::is_integral&lt;T1&gt;::value&gt;,</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M2=std::enable_if_t&lt;std::is_integral&lt;T2&gt;::value&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="398" refid="namespaceamrex_1a868eed399e45cf6ec37ef16d6a3fe52c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a8fbd6b37b492537aed607bfd14595409" kindref="member">HostDeviceParallelFor</ref><sp/>(<ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/>T1<sp/>ncomp1,<sp/>L1&amp;&amp;<sp/>f1,</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/>T2<sp/>ncomp2,<sp/>L2&amp;&amp;<sp/>f2)<sp/>noexcept</highlight></codeline>
<codeline lineno="400"><highlight class="normal">{</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1aff9b2ebd167a621c7784769618bda4c6" kindref="member">ParallelFor</ref>(box1,ncomp1,std::forward&lt;L1&gt;(f1),box2,ncomp2,std::forward&lt;L2&gt;(f2));</highlight></codeline>
<codeline lineno="402"><highlight class="normal">}</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T3,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L3,</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M1=std::enable_if_t&lt;std::is_integral&lt;T1&gt;::value&gt;,</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M2=std::enable_if_t&lt;std::is_integral&lt;T2&gt;::value&gt;,</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M3=std::enable_if_t&lt;std::is_integral&lt;T3&gt;::value&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="408" refid="namespaceamrex_1a5203186b0e34bf6cea673cd5a84b5a65" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a8fbd6b37b492537aed607bfd14595409" kindref="member">HostDeviceParallelFor</ref><sp/>(<ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/>T1<sp/>ncomp1,<sp/>L1&amp;&amp;<sp/>f1,</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/>T2<sp/>ncomp2,<sp/>L2&amp;&amp;<sp/>f2,</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box3,<sp/>T3<sp/>ncomp3,<sp/>L3&amp;&amp;<sp/>f3)<sp/>noexcept</highlight></codeline>
<codeline lineno="411"><highlight class="normal">{</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1aff9b2ebd167a621c7784769618bda4c6" kindref="member">ParallelFor</ref>(box1,ncomp1,std::forward&lt;L1&gt;(f1),</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>box2,ncomp2,std::forward&lt;L2&gt;(f2),</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>box3,ncomp3,std::forward&lt;L3&gt;(f3));</highlight></codeline>
<codeline lineno="415"><highlight class="normal">}</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal">template<sp/>&lt;typename<sp/>T,<sp/>typename<sp/>L,<sp/>typename<sp/>M=std::enable_if_t&lt;std::is_integral&lt;T&gt;::value&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="418" refid="namespaceamrex_1a7272329c4c5b06cda2ee47e4ee3f46e2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a7272329c4c5b06cda2ee47e4ee3f46e2" kindref="member">HostDeviceFor</ref><sp/>(T<sp/>n,<sp/>L&amp;&amp;<sp/>f)<sp/>noexcept</highlight></codeline>
<codeline lineno="419"><highlight class="normal">{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a254b157995b540641c02a74d2ad65ebe" kindref="member">For</ref>(n,std::forward&lt;L&gt;(f));</highlight></codeline>
<codeline lineno="421"><highlight class="normal">}</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L&gt;</highlight></codeline>
<codeline lineno="424" refid="namespaceamrex_1a674b3cdfb298f33ab148c79b1a8f864e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a7272329c4c5b06cda2ee47e4ee3f46e2" kindref="member">HostDeviceFor</ref><sp/>(<ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box,<sp/>L&amp;&amp;<sp/>f)<sp/>noexcept</highlight></codeline>
<codeline lineno="425"><highlight class="normal">{</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a254b157995b540641c02a74d2ad65ebe" kindref="member">For</ref>(box,std::forward&lt;L&gt;(f));</highlight></codeline>
<codeline lineno="427"><highlight class="normal">}</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal">template<sp/>&lt;typename<sp/>T,<sp/>typename<sp/>L,<sp/>typename<sp/>M=std::enable_if_t&lt;std::is_integral&lt;T&gt;::value&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="430" refid="namespaceamrex_1aa8e17ba59ac39be36ae9b30b2a79a9a5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a7272329c4c5b06cda2ee47e4ee3f46e2" kindref="member">HostDeviceFor</ref><sp/>(<ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box,<sp/>T<sp/>ncomp,<sp/>L&amp;&amp;<sp/>f)<sp/>noexcept</highlight></codeline>
<codeline lineno="431"><highlight class="normal">{</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a254b157995b540641c02a74d2ad65ebe" kindref="member">For</ref>(box,ncomp,std::forward&lt;L&gt;(f));</highlight></codeline>
<codeline lineno="433"><highlight class="normal">}</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2&gt;</highlight></codeline>
<codeline lineno="436" refid="namespaceamrex_1ab2dc88579a70cfe068381de5523e4e6a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a7272329c4c5b06cda2ee47e4ee3f46e2" kindref="member">HostDeviceFor</ref><sp/>(<ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/><ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/>L1&amp;&amp;<sp/>f1,<sp/>L2&amp;&amp;<sp/>f2)<sp/>noexcept</highlight></codeline>
<codeline lineno="437"><highlight class="normal">{</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a254b157995b540641c02a74d2ad65ebe" kindref="member">For</ref>(box1,box2,std::forward&lt;L1&gt;(f1),std::forward&lt;L2&gt;(f2));</highlight></codeline>
<codeline lineno="439"><highlight class="normal">}</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L3&gt;</highlight></codeline>
<codeline lineno="442" refid="namespaceamrex_1ab85f87612e22364c1d3e310670c9fef0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a7272329c4c5b06cda2ee47e4ee3f46e2" kindref="member">HostDeviceFor</ref><sp/>(<ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/><ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/><ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box3,</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L1&amp;&amp;<sp/>f1,<sp/>L2&amp;&amp;<sp/>f2,<sp/>L3&amp;&amp;<sp/>f3)<sp/>noexcept</highlight></codeline>
<codeline lineno="444"><highlight class="normal">{</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a254b157995b540641c02a74d2ad65ebe" kindref="member">For</ref>(box1,box2,box3,std::forward&lt;L1&gt;(f1),std::forward&lt;L2&gt;(f2),std::forward&lt;L3&gt;(f3));</highlight></codeline>
<codeline lineno="446"><highlight class="normal">}</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2,</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M1=std::enable_if_t&lt;std::is_integral&lt;T1&gt;::value&gt;,</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M2=std::enable_if_t&lt;std::is_integral&lt;T2&gt;::value&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="451" refid="namespaceamrex_1ac4cd096351a9069431300195029519db" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a7272329c4c5b06cda2ee47e4ee3f46e2" kindref="member">HostDeviceFor</ref><sp/>(<ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/>T1<sp/>ncomp1,<sp/>L1&amp;&amp;<sp/>f1,</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/>T2<sp/>ncomp2,<sp/>L2&amp;&amp;<sp/>f2)<sp/>noexcept</highlight></codeline>
<codeline lineno="453"><highlight class="normal">{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a254b157995b540641c02a74d2ad65ebe" kindref="member">For</ref>(box1,ncomp1,std::forward&lt;L1&gt;(f1),box2,ncomp2,std::forward&lt;L2&gt;(f2));</highlight></codeline>
<codeline lineno="455"><highlight class="normal">}</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T3,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L3,</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M1=std::enable_if_t&lt;std::is_integral&lt;T1&gt;::value&gt;,</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M2=std::enable_if_t&lt;std::is_integral&lt;T2&gt;::value&gt;,</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M3=std::enable_if_t&lt;std::is_integral&lt;T3&gt;::value&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="461" refid="namespaceamrex_1a6857dbe043af9dfc73a2bc572b14e918" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a7272329c4c5b06cda2ee47e4ee3f46e2" kindref="member">HostDeviceFor</ref><sp/>(<ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/>T1<sp/>ncomp1,<sp/>L1&amp;&amp;<sp/>f1,</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/>T2<sp/>ncomp2,<sp/>L2&amp;&amp;<sp/>f2,</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box3,<sp/>T3<sp/>ncomp3,<sp/>L3&amp;&amp;<sp/>f3)<sp/>noexcept</highlight></codeline>
<codeline lineno="464"><highlight class="normal">{</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a254b157995b540641c02a74d2ad65ebe" kindref="member">For</ref>(box1,ncomp1,std::forward&lt;L1&gt;(f1),</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>box2,ncomp2,std::forward&lt;L2&gt;(f2),</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>box3,ncomp3,std::forward&lt;L3&gt;(f3));</highlight></codeline>
<codeline lineno="468"><highlight class="normal">}</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal">template<sp/>&lt;typename<sp/>T,<sp/>typename<sp/>L,<sp/>typename<sp/>M=std::enable_if_t&lt;std::is_integral&lt;T&gt;::value&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="471" refid="namespaceamrex_1aaa43ade38dff5d2e3eea8085d5c2e99e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a8fbd6b37b492537aed607bfd14595409" kindref="member">HostDeviceParallelFor</ref><sp/>(<ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,<sp/>T<sp/>n,<sp/>L&amp;&amp;<sp/>f)<sp/>noexcept</highlight></codeline>
<codeline lineno="472"><highlight class="normal">{</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1aff9b2ebd167a621c7784769618bda4c6" kindref="member">ParallelFor</ref>(n,std::forward&lt;L&gt;(f));</highlight></codeline>
<codeline lineno="474"><highlight class="normal">}</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L&gt;</highlight></codeline>
<codeline lineno="477" refid="namespaceamrex_1ae691b4150bbebc8fa1a0ad685c42a15b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a8fbd6b37b492537aed607bfd14595409" kindref="member">HostDeviceParallelFor</ref><sp/>(<ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,<sp/><ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box,<sp/>L&amp;&amp;<sp/>f)<sp/>noexcept</highlight></codeline>
<codeline lineno="478"><highlight class="normal">{</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1aff9b2ebd167a621c7784769618bda4c6" kindref="member">ParallelFor</ref>(box,std::forward&lt;L&gt;(f));</highlight></codeline>
<codeline lineno="480"><highlight class="normal">}</highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal">template<sp/>&lt;typename<sp/>T,<sp/>typename<sp/>L,<sp/>typename<sp/>M=std::enable_if_t&lt;std::is_integral&lt;T&gt;::value&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="483" refid="namespaceamrex_1ac8ee3123268c4e941ac44214a7e5f9f8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a8fbd6b37b492537aed607bfd14595409" kindref="member">HostDeviceParallelFor</ref><sp/>(<ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,<sp/><ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box,<sp/>T<sp/>ncomp,<sp/>L&amp;&amp;<sp/>f)<sp/>noexcept</highlight></codeline>
<codeline lineno="484"><highlight class="normal">{</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1aff9b2ebd167a621c7784769618bda4c6" kindref="member">ParallelFor</ref>(box,ncomp,std::forward&lt;L&gt;(f));</highlight></codeline>
<codeline lineno="486"><highlight class="normal">}</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2&gt;</highlight></codeline>
<codeline lineno="489" refid="namespaceamrex_1afff3ae3db80c80c67b8a89f72c7fad01" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a8fbd6b37b492537aed607bfd14595409" kindref="member">HostDeviceParallelFor</ref><sp/>(<ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,<sp/><ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/><ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/>L1&amp;&amp;<sp/>f1,<sp/>L2&amp;&amp;<sp/>f2)<sp/>noexcept</highlight></codeline>
<codeline lineno="490"><highlight class="normal">{</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1aff9b2ebd167a621c7784769618bda4c6" kindref="member">ParallelFor</ref>(box1,box2,std::forward&lt;L1&gt;(f1),std::forward&lt;L2&gt;(f2));</highlight></codeline>
<codeline lineno="492"><highlight class="normal">}</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L3&gt;</highlight></codeline>
<codeline lineno="495" refid="namespaceamrex_1a49077d5108dc85db1db7938f039a778b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a8fbd6b37b492537aed607bfd14595409" kindref="member">HostDeviceParallelFor</ref><sp/>(<ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/><ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/><ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box3,</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L1&amp;&amp;<sp/>f1,<sp/>L2&amp;&amp;<sp/>f2,<sp/>L3&amp;&amp;<sp/>f3)<sp/>noexcept</highlight></codeline>
<codeline lineno="498"><highlight class="normal">{</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1aff9b2ebd167a621c7784769618bda4c6" kindref="member">ParallelFor</ref>(box1,box2,box3,std::forward&lt;L1&gt;(f1),std::forward&lt;L2&gt;(f2),std::forward&lt;L3&gt;(f3));</highlight></codeline>
<codeline lineno="500"><highlight class="normal">}</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2,</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M1=std::enable_if_t&lt;std::is_integral&lt;T1&gt;::value&gt;,</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M2=std::enable_if_t&lt;std::is_integral&lt;T2&gt;::value&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="505" refid="namespaceamrex_1a35d0951b57ea7c93629e68e42c3a6807" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a8fbd6b37b492537aed607bfd14595409" kindref="member">HostDeviceParallelFor</ref><sp/>(<ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/>T1<sp/>ncomp1,<sp/>L1&amp;&amp;<sp/>f1,</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/>T2<sp/>ncomp2,<sp/>L2&amp;&amp;<sp/>f2)<sp/>noexcept</highlight></codeline>
<codeline lineno="508"><highlight class="normal">{</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1aff9b2ebd167a621c7784769618bda4c6" kindref="member">ParallelFor</ref>(box1,ncomp1,std::forward&lt;L1&gt;(f1),box2,ncomp2,std::forward&lt;L2&gt;(f2));</highlight></codeline>
<codeline lineno="510"><highlight class="normal">}</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T3,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L3,</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M1=std::enable_if_t&lt;std::is_integral&lt;T1&gt;::value&gt;,</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M2=std::enable_if_t&lt;std::is_integral&lt;T2&gt;::value&gt;,</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M3=std::enable_if_t&lt;std::is_integral&lt;T3&gt;::value&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="516" refid="namespaceamrex_1aa928415b2afda06373493941877c8daa" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a8fbd6b37b492537aed607bfd14595409" kindref="member">HostDeviceParallelFor</ref><sp/>(<ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/>T1<sp/>ncomp1,<sp/>L1&amp;&amp;<sp/>f1,</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/>T2<sp/>ncomp2,<sp/>L2&amp;&amp;<sp/>f2,</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box3,<sp/>T3<sp/>ncomp3,<sp/>L3&amp;&amp;<sp/>f3)<sp/>noexcept</highlight></codeline>
<codeline lineno="520"><highlight class="normal">{</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1aff9b2ebd167a621c7784769618bda4c6" kindref="member">ParallelFor</ref>(box1,ncomp1,std::forward&lt;L1&gt;(f1),</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>box2,ncomp2,std::forward&lt;L2&gt;(f2),</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>box3,ncomp3,std::forward&lt;L3&gt;(f3));</highlight></codeline>
<codeline lineno="524"><highlight class="normal">}</highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal">template<sp/>&lt;typename<sp/>T,<sp/>typename<sp/>L,<sp/>typename<sp/>M=std::enable_if_t&lt;std::is_integral&lt;T&gt;::value&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="527" refid="namespaceamrex_1aad398246e65a7d7102beb5169e03a04d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a7272329c4c5b06cda2ee47e4ee3f46e2" kindref="member">HostDeviceFor</ref><sp/>(<ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,<sp/>T<sp/>n,<sp/>L&amp;&amp;<sp/>f)<sp/>noexcept</highlight></codeline>
<codeline lineno="528"><highlight class="normal">{</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a254b157995b540641c02a74d2ad65ebe" kindref="member">For</ref>(n,std::forward&lt;L&gt;(f));</highlight></codeline>
<codeline lineno="530"><highlight class="normal">}</highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L&gt;</highlight></codeline>
<codeline lineno="533" refid="namespaceamrex_1a5b26a31faefa1749b9fb899d1818244b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a7272329c4c5b06cda2ee47e4ee3f46e2" kindref="member">HostDeviceFor</ref><sp/>(<ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,<sp/><ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box,<sp/>L&amp;&amp;<sp/>f)<sp/>noexcept</highlight></codeline>
<codeline lineno="534"><highlight class="normal">{</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a254b157995b540641c02a74d2ad65ebe" kindref="member">For</ref>(box,std::forward&lt;L&gt;(f));</highlight></codeline>
<codeline lineno="536"><highlight class="normal">}</highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal">template<sp/>&lt;typename<sp/>T,<sp/>typename<sp/>L,<sp/>typename<sp/>M=std::enable_if_t&lt;std::is_integral&lt;T&gt;::value&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="539" refid="namespaceamrex_1a3b9faf23e1d7db427410543fb90dfe54" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a7272329c4c5b06cda2ee47e4ee3f46e2" kindref="member">HostDeviceFor</ref><sp/>(<ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,<sp/><ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box,<sp/>T<sp/>ncomp,<sp/>L&amp;&amp;<sp/>f)<sp/>noexcept</highlight></codeline>
<codeline lineno="540"><highlight class="normal">{</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a254b157995b540641c02a74d2ad65ebe" kindref="member">For</ref>(box,ncomp,std::forward&lt;L&gt;(f));</highlight></codeline>
<codeline lineno="542"><highlight class="normal">}</highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2&gt;</highlight></codeline>
<codeline lineno="545" refid="namespaceamrex_1a5484386a731a820195e419b9ff0d0fc2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a7272329c4c5b06cda2ee47e4ee3f46e2" kindref="member">HostDeviceFor</ref><sp/>(<ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,<sp/><ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/><ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/>L1&amp;&amp;<sp/>f1,<sp/>L2&amp;&amp;<sp/>f2)<sp/>noexcept</highlight></codeline>
<codeline lineno="546"><highlight class="normal">{</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a254b157995b540641c02a74d2ad65ebe" kindref="member">For</ref>(box1,box2,std::forward&lt;L1&gt;(f1),std::forward&lt;L2&gt;(f2));</highlight></codeline>
<codeline lineno="548"><highlight class="normal">}</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L3&gt;</highlight></codeline>
<codeline lineno="551" refid="namespaceamrex_1aec488f9795341de5cb922ba7ad08066c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a7272329c4c5b06cda2ee47e4ee3f46e2" kindref="member">HostDeviceFor</ref><sp/>(<ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/><ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/><ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box3,</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L1&amp;&amp;<sp/>f1,<sp/>L2&amp;&amp;<sp/>f2,<sp/>L3&amp;&amp;<sp/>f3)<sp/>noexcept</highlight></codeline>
<codeline lineno="554"><highlight class="normal">{</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a254b157995b540641c02a74d2ad65ebe" kindref="member">For</ref>(box1,box2,box3,std::forward&lt;L1&gt;(f1),std::forward&lt;L2&gt;(f2),std::forward&lt;L3&gt;(f3));</highlight></codeline>
<codeline lineno="556"><highlight class="normal">}</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2,</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M1=std::enable_if_t&lt;std::is_integral&lt;T1&gt;::value&gt;,</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M2=std::enable_if_t&lt;std::is_integral&lt;T2&gt;::value&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="561" refid="namespaceamrex_1a440c08a8f25cc712e02cefb709238206" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a7272329c4c5b06cda2ee47e4ee3f46e2" kindref="member">HostDeviceFor</ref><sp/>(<ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/>T1<sp/>ncomp1,<sp/>L1&amp;&amp;<sp/>f1,</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/>T2<sp/>ncomp2,<sp/>L2&amp;&amp;<sp/>f2)<sp/>noexcept</highlight></codeline>
<codeline lineno="564"><highlight class="normal">{</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a254b157995b540641c02a74d2ad65ebe" kindref="member">For</ref>(box1,ncomp1,std::forward&lt;L1&gt;(f1),box2,ncomp2,std::forward&lt;L2&gt;(f2));</highlight></codeline>
<codeline lineno="566"><highlight class="normal">}</highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T3,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L3,</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M1=std::enable_if_t&lt;std::is_integral&lt;T1&gt;::value&gt;,</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M2=std::enable_if_t&lt;std::is_integral&lt;T2&gt;::value&gt;,</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M3=std::enable_if_t&lt;std::is_integral&lt;T3&gt;::value&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="572" refid="namespaceamrex_1ad6c49d13c537803899b8c4cc0cce7516" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a7272329c4c5b06cda2ee47e4ee3f46e2" kindref="member">HostDeviceFor</ref><sp/>(<ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/>T1<sp/>ncomp1,<sp/>L1&amp;&amp;<sp/>f1,</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/>T2<sp/>ncomp2,<sp/>L2&amp;&amp;<sp/>f2,</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box3,<sp/>T3<sp/>ncomp3,<sp/>L3&amp;&amp;<sp/>f3)<sp/>noexcept</highlight></codeline>
<codeline lineno="576"><highlight class="normal">{</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a254b157995b540641c02a74d2ad65ebe" kindref="member">For</ref>(box1,ncomp1,std::forward&lt;L1&gt;(f1),</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>box2,ncomp2,std::forward&lt;L2&gt;(f2),</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>box3,ncomp3,std::forward&lt;L3&gt;(f3));</highlight></codeline>
<codeline lineno="580"><highlight class="normal">}</highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal">template<sp/>&lt;typename<sp/>T,<sp/>typename<sp/>L,<sp/>typename<sp/>M=std::enable_if_t&lt;std::is_integral&lt;T&gt;::value&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="583" refid="namespaceamrex_1a2de21a574a15104cfa7e94e52dd6ab67" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a2de21a574a15104cfa7e94e52dd6ab67" kindref="member">ParallelForRNG</ref><sp/>(T<sp/>n,<sp/>L&amp;&amp;<sp/>f)<sp/>noexcept</highlight></codeline>
<codeline lineno="584"><highlight class="normal">{</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(T<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f(i,<ref refid="structamrex_1_1RandomEngine" kindref="compound">RandomEngine</ref>{});</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="588"><highlight class="normal">}</highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L&gt;</highlight></codeline>
<codeline lineno="591" refid="namespaceamrex_1a6b36710af5d429b6ee50b3d6ff67c240" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a2de21a574a15104cfa7e94e52dd6ab67" kindref="member">ParallelForRNG</ref><sp/>(<ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box,<sp/>L&amp;&amp;<sp/>f)<sp/>noexcept</highlight></codeline>
<codeline lineno="592"><highlight class="normal">{</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lo<sp/>=<sp/><ref refid="namespaceamrex_1a71600c8a528e0f1863154e4cf0183cbc" kindref="member">amrex::lbound</ref>(box);</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>hi<sp/>=<sp/><ref refid="namespaceamrex_1a6ce6b4176121c2c23327903a8139af0c" kindref="member">amrex::ubound</ref>(box);</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>lo.z;<sp/>k<sp/>&lt;=<sp/>hi.z;<sp/>++k)<sp/>{</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>lo.y;<sp/>j<sp/>&lt;=<sp/>hi.y;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>lo.x;<sp/>i<sp/>&lt;=<sp/>hi.x;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f(i,j,k,<ref refid="structamrex_1_1RandomEngine" kindref="compound">RandomEngine</ref>{});</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/>}}}</highlight></codeline>
<codeline lineno="600"><highlight class="normal">}</highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal">template<sp/>&lt;typename<sp/>T,<sp/>typename<sp/>L,<sp/>typename<sp/>M=std::enable_if_t&lt;std::is_integral&lt;T&gt;::value&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="603" refid="namespaceamrex_1ae0528e001d631f2240d2d111fed2607d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a2de21a574a15104cfa7e94e52dd6ab67" kindref="member">ParallelForRNG</ref><sp/>(<ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box,<sp/>T<sp/>ncomp,<sp/>L&amp;&amp;<sp/>f)<sp/>noexcept</highlight></codeline>
<codeline lineno="604"><highlight class="normal">{</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lo<sp/>=<sp/><ref refid="namespaceamrex_1a71600c8a528e0f1863154e4cf0183cbc" kindref="member">amrex::lbound</ref>(box);</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>hi<sp/>=<sp/><ref refid="namespaceamrex_1a6ce6b4176121c2c23327903a8139af0c" kindref="member">amrex::ubound</ref>(box);</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(T<sp/>n<sp/>=<sp/>0;<sp/>n<sp/>&lt;<sp/>ncomp;<sp/>++n)<sp/>{</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>lo.z;<sp/>k<sp/>&lt;=<sp/>hi.z;<sp/>++k)<sp/>{</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>lo.y;<sp/>j<sp/>&lt;=<sp/>hi.y;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>lo.x;<sp/>i<sp/>&lt;=<sp/>hi.x;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f(i,j,k,n,<ref refid="structamrex_1_1RandomEngine" kindref="compound">RandomEngine</ref>{});</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}}}</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="614"><highlight class="normal">}</highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L&gt;</highlight></codeline>
<codeline lineno="617" refid="namespaceamrex_1aa785b3b07c24c864604e8de72a0bb919" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1aa785b3b07c24c864604e8de72a0bb919" kindref="member">single_task</ref><sp/>(L&amp;&amp;<sp/>f)<sp/>noexcept</highlight></codeline>
<codeline lineno="618"><highlight class="normal">{</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/>f();</highlight></codeline>
<codeline lineno="620"><highlight class="normal">}</highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal">}</highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H"/>
  </compounddef>
</doxygen>
