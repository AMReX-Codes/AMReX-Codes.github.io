<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="AMReX__GpuLaunchFunctsC_8H" kind="file" language="C++">
    <compoundname>AMReX_GpuLaunchFunctsC.H</compoundname>
    <includes local="no">AMReX_Config.H</includes>
    <incdepgraph>
      <node id="1">
        <label>/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H</label>
        <link refid="AMReX__GpuLaunchFunctsC_8H"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>AMReX_Config.H</label>
      </node>
    </incdepgraph>
    <innerclass refid="structamrex_1_1SIMDindex" prot="public">amrex::SIMDindex</innerclass>
    <innernamespace refid="namespaceamrex">amrex</innernamespace>
    <innernamespace refid="namespaceamrex_1_1detail">amrex::detail</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>AMREX_GPU_LAUNCH_FUNCTS_C_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AMREX_GPU_LAUNCH_FUNCTS_C_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;AMReX_Config.H&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceamrex" kindref="compound">amrex</ref><sp/>{</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>WIDTH,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>N=</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="16" refid="structamrex_1_1SIMDindex" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structamrex_1_1SIMDindex" kindref="compound">SIMDindex</ref></highlight></codeline>
<codeline lineno="17"><highlight class="normal">{</highlight></codeline>
<codeline lineno="19" refid="structamrex_1_1SIMDindex_1a95a073aef6d29dc3fc24c1fc7be5bbeb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structamrex_1_1SIMDindex_1a95a073aef6d29dc3fc24c1fc7be5bbeb" kindref="member">width</ref><sp/>=<sp/>WIDTH;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="22" refid="structamrex_1_1SIMDindex_1ae16bbb82f5c9d524440b2499985cf894" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>N<sp/><ref refid="structamrex_1_1SIMDindex_1ae16bbb82f5c9d524440b2499985cf894" kindref="member">index</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="23"><highlight class="normal">};</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacedetail" kindref="compound">detail</ref><sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>call_f_scalar_handler</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref></highlight></codeline>
<codeline lineno="31" refid="namespaceamrex_1_1detail_1aa004283e3920e413c389c093161cad79" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1detail_1aa004283e3920e413c389c093161cad79" kindref="member">call_f_scalar_handler</ref><sp/>(<ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>f,<sp/>N<sp/>i)</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>-&gt;<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(f(0))</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f(i);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1detail_1aa004283e3920e413c389c093161cad79" kindref="member">call_f_scalar_handler</ref><sp/>(<ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>f,<sp/>N<sp/>i)</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>-&gt;<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(f(0,<ref refid="structamrex_1_1Gpu_1_1Handler" kindref="compound">Gpu::Handler</ref>{}))</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f(i,<sp/>Gpu::Handler{});</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>call_f_intvect_inner</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref>,<sp/>std::size_t...Ns,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">...Args&gt;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref></highlight></codeline>
<codeline lineno="49" refid="namespaceamrex_1_1detail_1ade8d882f6ba75270a6ea576d8bba3577" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1detail_1ade8d882f6ba75270a6ea576d8bba3577" kindref="member">call_f_intvect_inner</ref><sp/>(std::index_sequence&lt;Ns...&gt;,<sp/><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>f,<sp/><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND&lt;1&gt;</ref><sp/>iv,<sp/>Args...args)</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noexcept<sp/>-&gt;<sp/>decltype(f(0,<sp/>0,<sp/>0,<sp/>args...))</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f(iv[0],<sp/>0,<sp/>0,<sp/>args...);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref>,<sp/>std::size_t...Ns,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">...Args&gt;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref></highlight></codeline>
<codeline lineno="57" refid="namespaceamrex_1_1detail_1a64ebcc6c0abdb545a519a9d378dca174" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1detail_1ade8d882f6ba75270a6ea576d8bba3577" kindref="member">call_f_intvect_inner</ref><sp/>(std::index_sequence&lt;Ns...&gt;,<sp/><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>f,<sp/><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND&lt;2&gt;</ref><sp/>iv,<sp/>Args...args)</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noexcept<sp/>-&gt;<sp/>decltype(f(0,<sp/>0,<sp/>0,<sp/>args...))</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f(iv[0],<sp/>iv[1],<sp/>0,<sp/>args...);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim,<sp/>std::size_t...Ns,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">...Args&gt;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref></highlight></codeline>
<codeline lineno="65" refid="namespaceamrex_1_1detail_1a36c4819d0af66858bf09a3dd588fca74" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1detail_1ade8d882f6ba75270a6ea576d8bba3577" kindref="member">call_f_intvect_inner</ref><sp/>(std::index_sequence&lt;Ns...&gt;,<sp/><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>f,<sp/><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND&lt;dim&gt;</ref><sp/>iv,<sp/>Args...args)</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noexcept<sp/>-&gt;<sp/>decltype(f(iv,<sp/>args...))</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f(iv,<sp/>args...);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim,<sp/>std::size_t...Ns,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">...Args&gt;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1detail_1ade8d882f6ba75270a6ea576d8bba3577" kindref="member">call_f_intvect_inner</ref><sp/>(std::index_sequence&lt;Ns...&gt;,<sp/><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>f,<sp/><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND&lt;dim&gt;</ref><sp/>iv,<sp/>Args...args)</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noexcept<sp/>-&gt;<sp/>decltype(f(iv[Ns]...,<sp/>args...))</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f(iv[Ns]...,<sp/>args...);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>call_f_intvect_engine</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim&gt;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref></highlight></codeline>
<codeline lineno="83" refid="namespaceamrex_1_1detail_1abf33e4589ea5adab841f76cf4ba8fec2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1detail_1abf33e4589ea5adab841f76cf4ba8fec2" kindref="member">call_f_intvect_engine</ref><sp/>(<ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>f,<sp/><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND&lt;dim&gt;</ref><sp/>iv,<sp/><ref refid="structamrex_1_1RandomEngine" kindref="compound">RandomEngine</ref><sp/>engine)</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>-&gt;<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(<ref refid="namespaceamrex_1_1detail_1ade8d882f6ba75270a6ea576d8bba3577" kindref="member">call_f_intvect_inner</ref>(std::make_index_sequence&lt;dim&gt;(),<sp/>f,<sp/>iv,<sp/>engine))</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1detail_1ade8d882f6ba75270a6ea576d8bba3577" kindref="member">call_f_intvect_inner</ref>(std::make_index_sequence&lt;dim&gt;(),<sp/>f,<sp/>iv,<sp/>engine);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>call_f_intvect_handler</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim&gt;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref></highlight></codeline>
<codeline lineno="93" refid="namespaceamrex_1_1detail_1a046cf7f7c280ba419ad77e7d97f61d88" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1detail_1a046cf7f7c280ba419ad77e7d97f61d88" kindref="member">call_f_intvect_handler</ref><sp/>(<ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>f,<sp/><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND&lt;dim&gt;</ref><sp/>iv)</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>-&gt;<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(<ref refid="namespaceamrex_1_1detail_1ade8d882f6ba75270a6ea576d8bba3577" kindref="member">call_f_intvect_inner</ref>(std::make_index_sequence&lt;dim&gt;(),<sp/>f,<sp/>iv))</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1detail_1ade8d882f6ba75270a6ea576d8bba3577" kindref="member">call_f_intvect_inner</ref>(std::make_index_sequence&lt;dim&gt;(),<sp/>f,<sp/>iv);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim&gt;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1detail_1a046cf7f7c280ba419ad77e7d97f61d88" kindref="member">call_f_intvect_handler</ref><sp/>(<ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>f,<sp/><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND&lt;dim&gt;</ref><sp/>iv)</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>-&gt;<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(<ref refid="namespaceamrex_1_1detail_1ade8d882f6ba75270a6ea576d8bba3577" kindref="member">call_f_intvect_inner</ref>(std::make_index_sequence&lt;dim&gt;(),<sp/>f,<sp/>iv,<sp/><ref refid="structamrex_1_1Gpu_1_1Handler" kindref="compound">Gpu::Handler</ref>{}))</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1detail_1ade8d882f6ba75270a6ea576d8bba3577" kindref="member">call_f_intvect_inner</ref>(std::make_index_sequence&lt;dim&gt;(),<sp/>f,<sp/>iv,<sp/>Gpu::Handler{});</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>call_f_intvect_ncomp_engine</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim&gt;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref></highlight></codeline>
<codeline lineno="111" refid="namespaceamrex_1_1detail_1acdccebd8d9e6a4c1db19363438a5cba2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1detail_1acdccebd8d9e6a4c1db19363438a5cba2" kindref="member">call_f_intvect_ncomp_engine</ref><sp/>(<ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>f,<sp/><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND&lt;dim&gt;</ref><sp/>iv,<sp/>T<sp/>n,<sp/><ref refid="structamrex_1_1RandomEngine" kindref="compound">RandomEngine</ref><sp/>engine)</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>-&gt;<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(<ref refid="namespaceamrex_1_1detail_1ade8d882f6ba75270a6ea576d8bba3577" kindref="member">call_f_intvect_inner</ref>(std::make_index_sequence&lt;dim&gt;(),<sp/>f,<sp/>iv,<sp/>n,<sp/>engine))</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1detail_1ade8d882f6ba75270a6ea576d8bba3577" kindref="member">call_f_intvect_inner</ref>(std::make_index_sequence&lt;dim&gt;(),<sp/>f,<sp/>iv,<sp/>n,<sp/>engine);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>call_f_intvect_ncomp_handler</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim&gt;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref></highlight></codeline>
<codeline lineno="121" refid="namespaceamrex_1_1detail_1a1d5d1924885f09d0c057d56268dfb895" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1detail_1a1d5d1924885f09d0c057d56268dfb895" kindref="member">call_f_intvect_ncomp_handler</ref><sp/>(<ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>f,<sp/><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND&lt;dim&gt;</ref><sp/>iv,<sp/>T<sp/>n)</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>-&gt;<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(<ref refid="namespaceamrex_1_1detail_1ade8d882f6ba75270a6ea576d8bba3577" kindref="member">call_f_intvect_inner</ref>(std::make_index_sequence&lt;dim&gt;(),<sp/>f,<sp/>iv,<sp/>n))</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1detail_1ade8d882f6ba75270a6ea576d8bba3577" kindref="member">call_f_intvect_inner</ref>(std::make_index_sequence&lt;dim&gt;(),<sp/>f,<sp/>iv,<sp/>n);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim&gt;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1detail_1a1d5d1924885f09d0c057d56268dfb895" kindref="member">call_f_intvect_ncomp_handler</ref><sp/>(<ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>f,<sp/><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND&lt;dim&gt;</ref><sp/>iv,<sp/>T<sp/>n)</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>-&gt;<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(<ref refid="namespaceamrex_1_1detail_1ade8d882f6ba75270a6ea576d8bba3577" kindref="member">call_f_intvect_inner</ref>(std::make_index_sequence&lt;dim&gt;(),<sp/>f,<sp/>iv,<sp/>n,<sp/><ref refid="structamrex_1_1Gpu_1_1Handler" kindref="compound">Gpu::Handler</ref>{}))</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1detail_1ade8d882f6ba75270a6ea576d8bba3577" kindref="member">call_f_intvect_inner</ref>(std::make_index_sequence&lt;dim&gt;(),<sp/>f,<sp/>iv,<sp/>n,<sp/>Gpu::Handler{});</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal">}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L&gt;</highlight></codeline>
<codeline lineno="138" refid="namespaceamrex_1a685ae8eab582f895ce964b6a99030ef2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a685ae8eab582f895ce964b6a99030ef2" kindref="member">launch</ref><sp/>(T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>n,<sp/>L&amp;&amp;<sp/>f)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal">{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>std::forward&lt;L&gt;(f)(n);</highlight></codeline>
<codeline lineno="141"><highlight class="normal">}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L&gt;</highlight></codeline>
<codeline lineno="144" refid="namespaceamrex_1a30469a18e5c88bd166595ac713cabe22" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a685ae8eab582f895ce964b6a99030ef2" kindref="member">launch</ref><sp/>(T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>n,<sp/>L&amp;&amp;<sp/>f)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal">{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a0a525af3444a2814c6dbda9e71a965a5" kindref="member">amrex::ignore_unused</ref>(MT);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>std::forward&lt;L&gt;(f)(n);</highlight></codeline>
<codeline lineno="148"><highlight class="normal">}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M=std::enable_if_t&lt;std::is_</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">egral_v&lt;T&gt;&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><ref refid="AMReX__Extension_8H_1a959c30675fdc4974adca486be8de3c6e" kindref="member">AMREX_ATTRIBUTE_FLATTEN_FOR</ref></highlight></codeline>
<codeline lineno="152" refid="namespaceamrex_1adb038d495d77c299406ea33380d0f548" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1adb038d495d77c299406ea33380d0f548" kindref="member">For</ref><sp/>(T<sp/>n,<sp/>L<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>f)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal">{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(T<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1detail_1aa004283e3920e413c389c093161cad79" kindref="member">detail::call_f_scalar_handler</ref>(f,i);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="normal">}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M=std::enable_if_t&lt;std::is_</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">egral_v&lt;T&gt;&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="160" refid="namespaceamrex_1a22c6c19b7533ed5219ce1853d5aa625d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1adb038d495d77c299406ea33380d0f548" kindref="member">For</ref><sp/>(T<sp/>n,<sp/>L&amp;&amp;<sp/>f)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal">{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a0a525af3444a2814c6dbda9e71a965a5" kindref="member">amrex::ignore_unused</ref>(MT);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1adb038d495d77c299406ea33380d0f548" kindref="member">For</ref>(n,<sp/>std::forward&lt;L&gt;(f));</highlight></codeline>
<codeline lineno="164"><highlight class="normal">}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M=std::enable_if_t&lt;std::is_</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">egral_v&lt;T&gt;&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="167" refid="namespaceamrex_1a58f6305adbac638674782f274ce8bb80" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1adb038d495d77c299406ea33380d0f548" kindref="member">For</ref><sp/>(<ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,<sp/>T<sp/>n,<sp/>L&amp;&amp;<sp/>f)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal">{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1adb038d495d77c299406ea33380d0f548" kindref="member">For</ref>(n,<sp/>std::forward&lt;L&gt;(f));</highlight></codeline>
<codeline lineno="170"><highlight class="normal">}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M=std::enable_if_t&lt;std::is_</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">egral_v&lt;T&gt;&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="173" refid="namespaceamrex_1a7cea287f0304e88558d9ca04a4c36ed8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1adb038d495d77c299406ea33380d0f548" kindref="member">For</ref><sp/>(<ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,<sp/>T<sp/>n,<sp/>L&amp;&amp;<sp/>f)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal">{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a0a525af3444a2814c6dbda9e71a965a5" kindref="member">amrex::ignore_unused</ref>(MT);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1adb038d495d77c299406ea33380d0f548" kindref="member">For</ref>(n,<sp/>std::forward&lt;L&gt;(f));</highlight></codeline>
<codeline lineno="177"><highlight class="normal">}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M=std::enable_if_t&lt;std::is_</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">egral_v&lt;T&gt;&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><ref refid="AMReX__Extension_8H_1a959c30675fdc4974adca486be8de3c6e" kindref="member">AMREX_ATTRIBUTE_FLATTEN_FOR</ref></highlight></codeline>
<codeline lineno="181" refid="namespaceamrex_1af60d0d1ff2d8e4b50ece6b220764f064" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a1f15630874d45aeb722ca649e6c4c3a9" kindref="member">ParallelFor</ref><sp/>(T<sp/>n,<sp/>L<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>f)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal">{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__Extension_8H_1a8c414106ab987031039a0ad05bb2519b" kindref="member">AMREX_PRAGMA_SIMD</ref></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(T<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1detail_1aa004283e3920e413c389c093161cad79" kindref="member">detail::call_f_scalar_handler</ref>(f,i);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="187"><highlight class="normal">}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M=std::enable_if_t&lt;std::is_</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">egral_v&lt;T&gt;&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="190" refid="namespaceamrex_1a072608d6bf753001563975d5a8fe4fbd" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a1f15630874d45aeb722ca649e6c4c3a9" kindref="member">ParallelFor</ref><sp/>(T<sp/>n,<sp/>L&amp;&amp;<sp/>f)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal">{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a0a525af3444a2814c6dbda9e71a965a5" kindref="member">amrex::ignore_unused</ref>(MT);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a1f15630874d45aeb722ca649e6c4c3a9" kindref="member">ParallelFor</ref>(n,<sp/>std::forward&lt;L&gt;(f));</highlight></codeline>
<codeline lineno="194"><highlight class="normal">}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>WIDTH,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M=std::enable_if_t&lt;std::is_</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">egral_v&lt;N&gt;&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><ref refid="AMReX__Extension_8H_1a959c30675fdc4974adca486be8de3c6e" kindref="member">AMREX_ATTRIBUTE_FLATTEN_FOR</ref></highlight></codeline>
<codeline lineno="206" refid="namespaceamrex_1a7329f7a3e903d5a9abcd5f8603def1a1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a7329f7a3e903d5a9abcd5f8603def1a1" kindref="member">ParallelForSIMD</ref><sp/>(N<sp/>n,<sp/>L<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>f)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal">{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>N<sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>vectorize<sp/>full<sp/>lanes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>i<sp/>+<sp/>WIDTH<sp/>&lt;=<sp/>n;<sp/>i+=WIDTH)<sp/>{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f(<ref refid="structamrex_1_1SIMDindex" kindref="compound">SIMDindex&lt;WIDTH, N&gt;</ref>{i});</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>scalar<sp/>handling<sp/>of<sp/>the<sp/>remainder</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>note:<sp/>we<sp/>could<sp/>make<sp/>the<sp/>remainder<sp/>calls<sp/>faster,<sp/>by<sp/>repeatedly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>decreasing<sp/>the<sp/>SIMD<sp/>width<sp/>by<sp/>2<sp/>until<sp/>we<sp/>reach<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f(<ref refid="structamrex_1_1SIMDindex" kindref="compound">SIMDindex&lt;1, N&gt;</ref>{i});</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="219"><highlight class="normal">}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M=std::enable_if_t&lt;std::is_</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">egral_v&lt;T&gt;&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="222" refid="namespaceamrex_1a3402f6ed86316371198e6c2ff17ac5ac" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a1f15630874d45aeb722ca649e6c4c3a9" kindref="member">ParallelFor</ref><sp/>(<ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,<sp/>T<sp/>n,<sp/>L&amp;&amp;<sp/>f)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal">{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a1f15630874d45aeb722ca649e6c4c3a9" kindref="member">ParallelFor</ref>(n,<sp/>std::forward&lt;L&gt;(f));</highlight></codeline>
<codeline lineno="225"><highlight class="normal">}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M=std::enable_if_t&lt;std::is_</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">egral_v&lt;T&gt;&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="228" refid="namespaceamrex_1afc6cc810bf41a81eface49f9cc852316" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a1f15630874d45aeb722ca649e6c4c3a9" kindref="member">ParallelFor</ref><sp/>(<ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,<sp/>T<sp/>n,<sp/>L&amp;&amp;<sp/>f)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal">{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a0a525af3444a2814c6dbda9e71a965a5" kindref="member">amrex::ignore_unused</ref>(MT);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a1f15630874d45aeb722ca649e6c4c3a9" kindref="member">ParallelFor</ref>(n,<sp/>std::forward&lt;L&gt;(f));</highlight></codeline>
<codeline lineno="232"><highlight class="normal">}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacedetail" kindref="compound">detail</ref><sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">im,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim&gt;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref></highlight></codeline>
<codeline lineno="238" refid="namespaceamrex_1_1detail_1a3fed1f766f2a246764a7880eecc640c8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1detail_1a3fed1f766f2a246764a7880eecc640c8" kindref="member">For_impND</ref><sp/>(L<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>f,<sp/><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>lo,<sp/><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>hi,<sp/><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND&lt;dim&gt;</ref><sp/>iv)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal">{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(idim<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i0<sp/>=<sp/>lo[0],<sp/>h0<sp/>=<sp/>hi[0];<sp/>i0<sp/>&lt;=<sp/>h0;<sp/>++i0)<sp/>{<sp/>iv[0]<sp/>=<sp/>i0;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1detail_1a046cf7f7c280ba419ad77e7d97f61d88" kindref="member">call_f_intvect_handler</ref>(f,iv);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(idim<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i1<sp/>=<sp/>lo[1],<sp/>h1<sp/>=<sp/>hi[1];<sp/>i1<sp/>&lt;=<sp/>h1;<sp/>++i1)<sp/>{<sp/>iv[1]<sp/>=<sp/>i1;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i0<sp/>=<sp/>lo[0],<sp/>h0<sp/>=<sp/>hi[0];<sp/>i0<sp/>&lt;=<sp/>h0;<sp/>++i0)<sp/>{<sp/>iv[0]<sp/>=<sp/>i0;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1detail_1a046cf7f7c280ba419ad77e7d97f61d88" kindref="member">call_f_intvect_handler</ref>(f,iv);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(idim<sp/>==<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i2<sp/>=<sp/>lo[2],<sp/>h2<sp/>=<sp/>hi[2];<sp/>i2<sp/>&lt;=<sp/>h2;<sp/>++i2)<sp/>{<sp/>iv[2]<sp/>=<sp/>i2;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i1<sp/>=<sp/>lo[1],<sp/>h1<sp/>=<sp/>hi[1];<sp/>i1<sp/>&lt;=<sp/>h1;<sp/>++i1)<sp/>{<sp/>iv[1]<sp/>=<sp/>i1;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i0<sp/>=<sp/>lo[0],<sp/>h0<sp/>=<sp/>hi[0];<sp/>i0<sp/>&lt;=<sp/>h0;<sp/>++i0)<sp/>{<sp/>iv[0]<sp/>=<sp/>i0;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1detail_1a046cf7f7c280ba419ad77e7d97f61d88" kindref="member">call_f_intvect_handler</ref>(f,iv);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}}}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>lo[idim-1],<sp/>hd<sp/>=<sp/>hi[idim-1];<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>&lt;=<sp/>hd;<sp/>++id)<sp/>{<sp/>iv[idim-1]<sp/>=<sp/>id;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1detail_1a3fed1f766f2a246764a7880eecc640c8" kindref="member">For_impND</ref>&lt;idim-1&gt;(f,<sp/>lo,<sp/>hi,<sp/>iv);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="260"><highlight class="normal">}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal">}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim&gt;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><ref refid="AMReX__Extension_8H_1a959c30675fdc4974adca486be8de3c6e" kindref="member">AMREX_ATTRIBUTE_FLATTEN_FOR</ref></highlight></codeline>
<codeline lineno="266" refid="namespaceamrex_1a0d978e5f393e8e667b075e736636f1c4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1adb038d495d77c299406ea33380d0f548" kindref="member">For</ref><sp/>(<ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box,<sp/>L<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>f)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal">{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lo<sp/>=<sp/><ref refid="namespaceamrex_1a40424ba2cf6e3c4e7f26ee81e83cc2cb" kindref="member">amrex::lbound_iv</ref>(box);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>hi<sp/>=<sp/><ref refid="namespaceamrex_1aa0b5ecef36390cfee654d209a6023589" kindref="member">amrex::ubound_iv</ref>(box);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND&lt;dim&gt;</ref><sp/>iv;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>detail::For_impND&lt;dim&gt;(f,<sp/>lo,<sp/>hi,<sp/>iv);</highlight></codeline>
<codeline lineno="272"><highlight class="normal">}</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim&gt;</highlight></codeline>
<codeline lineno="275" refid="namespaceamrex_1ad35f3db1603e73e8e8d7f652bb6865eb" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1adb038d495d77c299406ea33380d0f548" kindref="member">For</ref><sp/>(<ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box,<sp/>L&amp;&amp;<sp/>f)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal">{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a0a525af3444a2814c6dbda9e71a965a5" kindref="member">amrex::ignore_unused</ref>(MT);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1adb038d495d77c299406ea33380d0f548" kindref="member">For</ref>(box,<sp/>std::forward&lt;L&gt;(f));</highlight></codeline>
<codeline lineno="279"><highlight class="normal">}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim&gt;</highlight></codeline>
<codeline lineno="282" refid="namespaceamrex_1a9a81d8c924a27f9fb7decf2d2ac1dcd8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1adb038d495d77c299406ea33380d0f548" kindref="member">For</ref><sp/>(<ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,<sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box,<sp/>L&amp;&amp;<sp/>f)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal">{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1adb038d495d77c299406ea33380d0f548" kindref="member">For</ref>(box,<sp/>std::forward&lt;L&gt;(f));</highlight></codeline>
<codeline lineno="285"><highlight class="normal">}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim&gt;</highlight></codeline>
<codeline lineno="288" refid="namespaceamrex_1ad6b4af72f2df44517e9b6162fbe028d2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1adb038d495d77c299406ea33380d0f548" kindref="member">For</ref><sp/>(<ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,<sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box,<sp/>L&amp;&amp;<sp/>f)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal">{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a0a525af3444a2814c6dbda9e71a965a5" kindref="member">amrex::ignore_unused</ref>(MT);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1adb038d495d77c299406ea33380d0f548" kindref="member">For</ref>(box,<sp/>std::forward&lt;L&gt;(f));</highlight></codeline>
<codeline lineno="292"><highlight class="normal">}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacedetail" kindref="compound">detail</ref><sp/>{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">im,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim&gt;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref></highlight></codeline>
<codeline lineno="298" refid="namespaceamrex_1_1detail_1abbcccb7a439192126cc04a4980052d70" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1detail_1abbcccb7a439192126cc04a4980052d70" kindref="member">ParallelFor_impND</ref><sp/>(L<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>f,<sp/><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>lo,<sp/><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>hi,<sp/><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND&lt;dim&gt;</ref><sp/>iv)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal">{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(idim<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__Extension_8H_1a8c414106ab987031039a0ad05bb2519b" kindref="member">AMREX_PRAGMA_SIMD</ref></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i0<sp/>=<sp/>lo[0],<sp/>h0<sp/>=<sp/>hi[0];<sp/>i0<sp/>&lt;=<sp/>h0;<sp/>++i0)<sp/>{<sp/>iv[0]<sp/>=<sp/>i0;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1detail_1a046cf7f7c280ba419ad77e7d97f61d88" kindref="member">call_f_intvect_handler</ref>(f,iv);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(idim<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i1<sp/>=<sp/>lo[1],<sp/>h1<sp/>=<sp/>hi[1];<sp/>i1<sp/>&lt;=<sp/>h1;<sp/>++i1)<sp/>{<sp/>iv[1]<sp/>=<sp/>i1;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__Extension_8H_1a8c414106ab987031039a0ad05bb2519b" kindref="member">AMREX_PRAGMA_SIMD</ref></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i0<sp/>=<sp/>lo[0],<sp/>h0<sp/>=<sp/>hi[0];<sp/>i0<sp/>&lt;=<sp/>h0;<sp/>++i0)<sp/>{<sp/>iv[0]<sp/>=<sp/>i0;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1detail_1a046cf7f7c280ba419ad77e7d97f61d88" kindref="member">call_f_intvect_handler</ref>(f,iv);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}}</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(idim<sp/>==<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i2<sp/>=<sp/>lo[2],<sp/>h2<sp/>=<sp/>hi[2];<sp/>i2<sp/>&lt;=<sp/>h2;<sp/>++i2)<sp/>{<sp/>iv[2]<sp/>=<sp/>i2;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i1<sp/>=<sp/>lo[1],<sp/>h1<sp/>=<sp/>hi[1];<sp/>i1<sp/>&lt;=<sp/>h1;<sp/>++i1)<sp/>{<sp/>iv[1]<sp/>=<sp/>i1;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__Extension_8H_1a8c414106ab987031039a0ad05bb2519b" kindref="member">AMREX_PRAGMA_SIMD</ref></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i0<sp/>=<sp/>lo[0],<sp/>h0<sp/>=<sp/>hi[0];<sp/>i0<sp/>&lt;=<sp/>h0;<sp/>++i0)<sp/>{<sp/>iv[0]<sp/>=<sp/>i0;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1detail_1a046cf7f7c280ba419ad77e7d97f61d88" kindref="member">call_f_intvect_handler</ref>(f,iv);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}}}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>lo[idim-1],<sp/>hd<sp/>=<sp/>hi[idim-1];<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>&lt;=<sp/>hd;<sp/>++id)<sp/>{<sp/>iv[idim-1]<sp/>=<sp/>id;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1detail_1abbcccb7a439192126cc04a4980052d70" kindref="member">ParallelFor_impND</ref>&lt;idim-1&gt;(f,<sp/>lo,<sp/>hi,<sp/>iv);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="323"><highlight class="normal">}</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal">}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim&gt;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><ref refid="AMReX__Extension_8H_1a959c30675fdc4974adca486be8de3c6e" kindref="member">AMREX_ATTRIBUTE_FLATTEN_FOR</ref></highlight></codeline>
<codeline lineno="329" refid="namespaceamrex_1a66c7166d0d13ddd9eae467278ebea3d1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a1f15630874d45aeb722ca649e6c4c3a9" kindref="member">ParallelFor</ref><sp/>(<ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box,<sp/>L<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>f)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal">{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lo<sp/>=<sp/><ref refid="namespaceamrex_1a40424ba2cf6e3c4e7f26ee81e83cc2cb" kindref="member">amrex::lbound_iv</ref>(box);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>hi<sp/>=<sp/><ref refid="namespaceamrex_1aa0b5ecef36390cfee654d209a6023589" kindref="member">amrex::ubound_iv</ref>(box);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND&lt;dim&gt;</ref><sp/>iv;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>detail::ParallelFor_impND&lt;dim&gt;(f,<sp/>lo,<sp/>hi,<sp/>iv);</highlight></codeline>
<codeline lineno="335"><highlight class="normal">}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim&gt;</highlight></codeline>
<codeline lineno="338" refid="namespaceamrex_1a7de77cd36a3fdb46c7f93216c3123989" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a1f15630874d45aeb722ca649e6c4c3a9" kindref="member">ParallelFor</ref><sp/>(<ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box,<sp/>L&amp;&amp;<sp/>f)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal">{</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a0a525af3444a2814c6dbda9e71a965a5" kindref="member">amrex::ignore_unused</ref>(MT);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a1f15630874d45aeb722ca649e6c4c3a9" kindref="member">ParallelFor</ref>(box,<sp/>std::forward&lt;L&gt;(f));</highlight></codeline>
<codeline lineno="342"><highlight class="normal">}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim&gt;</highlight></codeline>
<codeline lineno="345" refid="namespaceamrex_1ab1293861fa35f7217666cb145467f09f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a1f15630874d45aeb722ca649e6c4c3a9" kindref="member">ParallelFor</ref><sp/>(<ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,<sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box,<sp/>L&amp;&amp;<sp/>f)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal">{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a1f15630874d45aeb722ca649e6c4c3a9" kindref="member">ParallelFor</ref>(box,<sp/>std::forward&lt;L&gt;(f));</highlight></codeline>
<codeline lineno="348"><highlight class="normal">}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim&gt;</highlight></codeline>
<codeline lineno="351" refid="namespaceamrex_1ab9f2354c8582cd76f586127d34330e3c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a1f15630874d45aeb722ca649e6c4c3a9" kindref="member">ParallelFor</ref><sp/>(<ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,<sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box,<sp/>L&amp;&amp;<sp/>f)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal">{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a0a525af3444a2814c6dbda9e71a965a5" kindref="member">amrex::ignore_unused</ref>(MT);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a1f15630874d45aeb722ca649e6c4c3a9" kindref="member">ParallelFor</ref>(box,<sp/>std::forward&lt;L&gt;(f));</highlight></codeline>
<codeline lineno="355"><highlight class="normal">}</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacedetail" kindref="compound">detail</ref><sp/>{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">im,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim&gt;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref></highlight></codeline>
<codeline lineno="361" refid="namespaceamrex_1_1detail_1af64c8e0dcca83824d84b736217db75a6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1detail_1a3fed1f766f2a246764a7880eecc640c8" kindref="member">For_impND</ref><sp/>(L<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>f,<sp/><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>lo,<sp/><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>hi,<sp/><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND&lt;dim&gt;</ref><sp/>iv,<sp/>T<sp/>n)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal">{</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(idim<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i0<sp/>=<sp/>lo[0],<sp/>h0<sp/>=<sp/>hi[0];<sp/>i0<sp/>&lt;=<sp/>h0;<sp/>++i0)<sp/>{<sp/>iv[0]<sp/>=<sp/>i0;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1detail_1a1d5d1924885f09d0c057d56268dfb895" kindref="member">call_f_intvect_ncomp_handler</ref>(f,iv,n);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(idim<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i1<sp/>=<sp/>lo[1],<sp/>h1<sp/>=<sp/>hi[1];<sp/>i1<sp/>&lt;=<sp/>h1;<sp/>++i1)<sp/>{<sp/>iv[1]<sp/>=<sp/>i1;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i0<sp/>=<sp/>lo[0],<sp/>h0<sp/>=<sp/>hi[0];<sp/>i0<sp/>&lt;=<sp/>h0;<sp/>++i0)<sp/>{<sp/>iv[0]<sp/>=<sp/>i0;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1detail_1a1d5d1924885f09d0c057d56268dfb895" kindref="member">call_f_intvect_ncomp_handler</ref>(f,iv,n);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}}</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(idim<sp/>==<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i2<sp/>=<sp/>lo[2],<sp/>h2<sp/>=<sp/>hi[2];<sp/>i2<sp/>&lt;=<sp/>h2;<sp/>++i2)<sp/>{<sp/>iv[2]<sp/>=<sp/>i2;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i1<sp/>=<sp/>lo[1],<sp/>h1<sp/>=<sp/>hi[1];<sp/>i1<sp/>&lt;=<sp/>h1;<sp/>++i1)<sp/>{<sp/>iv[1]<sp/>=<sp/>i1;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i0<sp/>=<sp/>lo[0],<sp/>h0<sp/>=<sp/>hi[0];<sp/>i0<sp/>&lt;=<sp/>h0;<sp/>++i0)<sp/>{<sp/>iv[0]<sp/>=<sp/>i0;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1detail_1a1d5d1924885f09d0c057d56268dfb895" kindref="member">call_f_intvect_ncomp_handler</ref>(f,iv,n);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}}}</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>lo[idim-1],<sp/>hd<sp/>=<sp/>hi[idim-1];<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>&lt;=<sp/>hd;<sp/>++id)<sp/>{<sp/>iv[idim-1]<sp/>=<sp/>id;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1detail_1a3fed1f766f2a246764a7880eecc640c8" kindref="member">For_impND</ref>&lt;idim-1&gt;(f,<sp/>lo,<sp/>hi,<sp/>iv,<sp/>n);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="383"><highlight class="normal">}</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal">}</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M=std::enable_if_t&lt;std::is_</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">egral_v&lt;T&gt;&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><ref refid="AMReX__Extension_8H_1a959c30675fdc4974adca486be8de3c6e" kindref="member">AMREX_ATTRIBUTE_FLATTEN_FOR</ref></highlight></codeline>
<codeline lineno="389" refid="namespaceamrex_1ac265b5bf7b7f3dca04c343c198b4d6ae" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1adb038d495d77c299406ea33380d0f548" kindref="member">For</ref><sp/>(<ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box,<sp/>T<sp/>ncomp,<sp/>L<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>f)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal">{</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lo<sp/>=<sp/><ref refid="namespaceamrex_1a40424ba2cf6e3c4e7f26ee81e83cc2cb" kindref="member">amrex::lbound_iv</ref>(box);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>hi<sp/>=<sp/><ref refid="namespaceamrex_1aa0b5ecef36390cfee654d209a6023589" kindref="member">amrex::ubound_iv</ref>(box);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND&lt;dim&gt;</ref><sp/>iv;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(T<sp/>n<sp/>=<sp/>0;<sp/>n<sp/>&lt;<sp/>ncomp;<sp/>++n)<sp/>{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::For_impND&lt;dim&gt;(f,<sp/>lo,<sp/>hi,<sp/>iv,<sp/>n);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="397"><highlight class="normal">}</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M=std::enable_if_t&lt;std::is_</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">egral_v&lt;T&gt;&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="400" refid="namespaceamrex_1a82a13be7442ff8f47fe56b3fdd1665c2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1adb038d495d77c299406ea33380d0f548" kindref="member">For</ref><sp/>(<ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box,<sp/>T<sp/>ncomp,<sp/>L&amp;&amp;<sp/>f)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal">{</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a0a525af3444a2814c6dbda9e71a965a5" kindref="member">amrex::ignore_unused</ref>(MT);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1adb038d495d77c299406ea33380d0f548" kindref="member">For</ref>(box,<sp/>ncomp,<sp/>std::forward&lt;L&gt;(f));</highlight></codeline>
<codeline lineno="404"><highlight class="normal">}</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M=std::enable_if_t&lt;std::is_</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">egral_v&lt;T&gt;&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="407" refid="namespaceamrex_1a251ca4b51f175328b286fdfd7171c15f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1adb038d495d77c299406ea33380d0f548" kindref="member">For</ref><sp/>(<ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,<sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box,<sp/>T<sp/>ncomp,<sp/>L&amp;&amp;<sp/>f)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal">{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1adb038d495d77c299406ea33380d0f548" kindref="member">For</ref>(box,<sp/>ncomp,<sp/>std::forward&lt;L&gt;(f));</highlight></codeline>
<codeline lineno="410"><highlight class="normal">}</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M=std::enable_if_t&lt;std::is_</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">egral_v&lt;T&gt;&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="413" refid="namespaceamrex_1a04fbb0e48ef14f89ace92b1cc058e043" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1adb038d495d77c299406ea33380d0f548" kindref="member">For</ref><sp/>(<ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,<sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box,<sp/>T<sp/>ncomp,<sp/>L&amp;&amp;<sp/>f)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal">{</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a0a525af3444a2814c6dbda9e71a965a5" kindref="member">amrex::ignore_unused</ref>(MT);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1adb038d495d77c299406ea33380d0f548" kindref="member">For</ref>(box,<sp/>ncomp,<sp/>std::forward&lt;L&gt;(f));</highlight></codeline>
<codeline lineno="417"><highlight class="normal">}</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacedetail" kindref="compound">detail</ref><sp/>{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">im,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim&gt;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref></highlight></codeline>
<codeline lineno="423" refid="namespaceamrex_1_1detail_1a9806a4f60e5ec27fadcda28a97df3806" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1detail_1abbcccb7a439192126cc04a4980052d70" kindref="member">ParallelFor_impND</ref><sp/>(L<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>f,<sp/><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>lo,<sp/><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>hi,<sp/><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND&lt;dim&gt;</ref><sp/>iv,<sp/>T<sp/>n)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal">{</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(idim<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__Extension_8H_1a8c414106ab987031039a0ad05bb2519b" kindref="member">AMREX_PRAGMA_SIMD</ref></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i0<sp/>=<sp/>lo[0],<sp/>h0<sp/>=<sp/>hi[0];<sp/>i0<sp/>&lt;=<sp/>h0;<sp/>++i0)<sp/>{<sp/>iv[0]<sp/>=<sp/>i0;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1detail_1a1d5d1924885f09d0c057d56268dfb895" kindref="member">call_f_intvect_ncomp_handler</ref>(f,iv,n);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(idim<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i1<sp/>=<sp/>lo[1],<sp/>h1<sp/>=<sp/>hi[1];<sp/>i1<sp/>&lt;=<sp/>h1;<sp/>++i1)<sp/>{<sp/>iv[1]<sp/>=<sp/>i1;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__Extension_8H_1a8c414106ab987031039a0ad05bb2519b" kindref="member">AMREX_PRAGMA_SIMD</ref></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i0<sp/>=<sp/>lo[0],<sp/>h0<sp/>=<sp/>hi[0];<sp/>i0<sp/>&lt;=<sp/>h0;<sp/>++i0)<sp/>{<sp/>iv[0]<sp/>=<sp/>i0;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1detail_1a1d5d1924885f09d0c057d56268dfb895" kindref="member">call_f_intvect_ncomp_handler</ref>(f,iv,n);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}}</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(idim<sp/>==<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i2<sp/>=<sp/>lo[2],<sp/>h2<sp/>=<sp/>hi[2];<sp/>i2<sp/>&lt;=<sp/>h2;<sp/>++i2)<sp/>{<sp/>iv[2]<sp/>=<sp/>i2;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i1<sp/>=<sp/>lo[1],<sp/>h1<sp/>=<sp/>hi[1];<sp/>i1<sp/>&lt;=<sp/>h1;<sp/>++i1)<sp/>{<sp/>iv[1]<sp/>=<sp/>i1;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__Extension_8H_1a8c414106ab987031039a0ad05bb2519b" kindref="member">AMREX_PRAGMA_SIMD</ref></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i0<sp/>=<sp/>lo[0],<sp/>h0<sp/>=<sp/>hi[0];<sp/>i0<sp/>&lt;=<sp/>h0;<sp/>++i0)<sp/>{<sp/>iv[0]<sp/>=<sp/>i0;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1detail_1a1d5d1924885f09d0c057d56268dfb895" kindref="member">call_f_intvect_ncomp_handler</ref>(f,iv,n);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}}}</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>lo[idim-1],<sp/>hd<sp/>=<sp/>hi[idim-1];<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>&lt;=<sp/>hd;<sp/>++id)<sp/>{<sp/>iv[idim-1]<sp/>=<sp/>id;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1detail_1abbcccb7a439192126cc04a4980052d70" kindref="member">ParallelFor_impND</ref>&lt;idim-1&gt;(f,<sp/>lo,<sp/>hi,<sp/>iv,<sp/>n);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="448"><highlight class="normal">}</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal">}</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M=std::enable_if_t&lt;std::is_</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">egral_v&lt;T&gt;&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><ref refid="AMReX__Extension_8H_1a959c30675fdc4974adca486be8de3c6e" kindref="member">AMREX_ATTRIBUTE_FLATTEN_FOR</ref></highlight></codeline>
<codeline lineno="454" refid="namespaceamrex_1aa21e723d12168fdcb9ac99c7f71ee05d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a1f15630874d45aeb722ca649e6c4c3a9" kindref="member">ParallelFor</ref><sp/>(<ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box,<sp/>T<sp/>ncomp,<sp/>L<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>f)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal">{</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lo<sp/>=<sp/><ref refid="namespaceamrex_1a40424ba2cf6e3c4e7f26ee81e83cc2cb" kindref="member">amrex::lbound_iv</ref>(box);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>hi<sp/>=<sp/><ref refid="namespaceamrex_1aa0b5ecef36390cfee654d209a6023589" kindref="member">amrex::ubound_iv</ref>(box);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND&lt;dim&gt;</ref><sp/>iv;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(T<sp/>n<sp/>=<sp/>0;<sp/>n<sp/>&lt;<sp/>ncomp;<sp/>++n)<sp/>{</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::ParallelFor_impND&lt;dim&gt;(f,<sp/>lo,<sp/>hi,<sp/>iv,<sp/>n);</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="462"><highlight class="normal">}</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M=std::enable_if_t&lt;std::is_</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">egral_v&lt;T&gt;&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="465" refid="namespaceamrex_1a048c1967f6f553c7a62e0d8bdf34ff75" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a1f15630874d45aeb722ca649e6c4c3a9" kindref="member">ParallelFor</ref><sp/>(<ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box,<sp/>T<sp/>ncomp,<sp/>L&amp;&amp;<sp/>f)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal">{</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a0a525af3444a2814c6dbda9e71a965a5" kindref="member">amrex::ignore_unused</ref>(MT);</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a1f15630874d45aeb722ca649e6c4c3a9" kindref="member">ParallelFor</ref>(box,<sp/>ncomp,<sp/>std::forward&lt;L&gt;(f));</highlight></codeline>
<codeline lineno="469"><highlight class="normal">}</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M=std::enable_if_t&lt;std::is_</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">egral_v&lt;T&gt;&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="472" refid="namespaceamrex_1ace191cd2e5d99b138f7bf17c0162351a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a1f15630874d45aeb722ca649e6c4c3a9" kindref="member">ParallelFor</ref><sp/>(<ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,<sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box,<sp/>T<sp/>ncomp,<sp/>L&amp;&amp;<sp/>f)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal">{</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a1f15630874d45aeb722ca649e6c4c3a9" kindref="member">ParallelFor</ref>(box,<sp/>ncomp,<sp/>std::forward&lt;L&gt;(f));</highlight></codeline>
<codeline lineno="475"><highlight class="normal">}</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M=std::enable_if_t&lt;std::is_</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">egral_v&lt;T&gt;&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="478" refid="namespaceamrex_1aa6b5e74f73b2fc7b3174fa45e9d79e5d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a1f15630874d45aeb722ca649e6c4c3a9" kindref="member">ParallelFor</ref><sp/>(<ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,<sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box,<sp/>T<sp/>ncomp,<sp/>L&amp;&amp;<sp/>f)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal">{</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a0a525af3444a2814c6dbda9e71a965a5" kindref="member">amrex::ignore_unused</ref>(MT);</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a1f15630874d45aeb722ca649e6c4c3a9" kindref="member">ParallelFor</ref>(box,<sp/>ncomp,<sp/>std::forward&lt;L&gt;(f));</highlight></codeline>
<codeline lineno="482"><highlight class="normal">}</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim&gt;</highlight></codeline>
<codeline lineno="485" refid="namespaceamrex_1a833a3a896f9a27574e313b57e01ebd85" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1adb038d495d77c299406ea33380d0f548" kindref="member">For</ref><sp/>(<ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/>L1&amp;&amp;<sp/>f1,<sp/>L2&amp;&amp;<sp/>f2)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal">{</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1adb038d495d77c299406ea33380d0f548" kindref="member">For</ref>(box1,<sp/>std::forward&lt;L1&gt;(f1));</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1adb038d495d77c299406ea33380d0f548" kindref="member">For</ref>(box2,<sp/>std::forward&lt;L2&gt;(f2));</highlight></codeline>
<codeline lineno="489"><highlight class="normal">}</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim&gt;</highlight></codeline>
<codeline lineno="492" refid="namespaceamrex_1a7dff05ac5b5c424d1af38a8410e3f155" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1adb038d495d77c299406ea33380d0f548" kindref="member">For</ref><sp/>(<ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/>L1&amp;&amp;<sp/>f1,<sp/>L2&amp;&amp;<sp/>f2)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal">{</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a0a525af3444a2814c6dbda9e71a965a5" kindref="member">amrex::ignore_unused</ref>(MT);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1adb038d495d77c299406ea33380d0f548" kindref="member">For</ref>(box1,<sp/>std::forward&lt;L1&gt;(f1));</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1adb038d495d77c299406ea33380d0f548" kindref="member">For</ref>(box2,<sp/>std::forward&lt;L2&gt;(f2));</highlight></codeline>
<codeline lineno="497"><highlight class="normal">}</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim&gt;</highlight></codeline>
<codeline lineno="500" refid="namespaceamrex_1a7fc8e0d09589aa2e8933caa1677ea10a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1adb038d495d77c299406ea33380d0f548" kindref="member">For</ref><sp/>(<ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,<sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/>L1&amp;&amp;<sp/>f1,<sp/>L2&amp;&amp;<sp/>f2)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal">{</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1adb038d495d77c299406ea33380d0f548" kindref="member">For</ref><sp/>(box1,<sp/>box2,<sp/>std::forward&lt;L1&gt;(f1),<sp/>std::forward&lt;L2&gt;(f2));</highlight></codeline>
<codeline lineno="503"><highlight class="normal">}</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim&gt;</highlight></codeline>
<codeline lineno="506" refid="namespaceamrex_1abd78b57fec2c2043ec2bdef7116aa775" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1adb038d495d77c299406ea33380d0f548" kindref="member">For</ref><sp/>(<ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,<sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/>L1&amp;&amp;<sp/>f1,<sp/>L2&amp;&amp;<sp/>f2)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal">{</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a0a525af3444a2814c6dbda9e71a965a5" kindref="member">amrex::ignore_unused</ref>(MT);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1adb038d495d77c299406ea33380d0f548" kindref="member">For</ref><sp/>(box1,<sp/>box2,<sp/>std::forward&lt;L1&gt;(f1),<sp/>std::forward&lt;L2&gt;(f2));</highlight></codeline>
<codeline lineno="510"><highlight class="normal">}</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L3,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim&gt;</highlight></codeline>
<codeline lineno="513" refid="namespaceamrex_1aac7c7bd1c17c60efcd9caba171127c04" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1adb038d495d77c299406ea33380d0f548" kindref="member">For</ref><sp/>(<ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box3,<sp/>L1&amp;&amp;<sp/>f1,<sp/>L2&amp;&amp;<sp/>f2,<sp/>L3&amp;&amp;<sp/>f3)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal">{</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1adb038d495d77c299406ea33380d0f548" kindref="member">For</ref>(box1,<sp/>std::forward&lt;L1&gt;(f1));</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1adb038d495d77c299406ea33380d0f548" kindref="member">For</ref>(box2,<sp/>std::forward&lt;L2&gt;(f2));</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1adb038d495d77c299406ea33380d0f548" kindref="member">For</ref>(box3,<sp/>std::forward&lt;L3&gt;(f3));</highlight></codeline>
<codeline lineno="518"><highlight class="normal">}</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L3,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim&gt;</highlight></codeline>
<codeline lineno="521" refid="namespaceamrex_1a5b952ccbc50bc9049506897ea8050373" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1adb038d495d77c299406ea33380d0f548" kindref="member">For</ref><sp/>(<ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box3,<sp/>L1&amp;&amp;<sp/>f1,<sp/>L2&amp;&amp;<sp/>f2,<sp/>L3&amp;&amp;<sp/>f3)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal">{</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a0a525af3444a2814c6dbda9e71a965a5" kindref="member">amrex::ignore_unused</ref>(MT);</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1adb038d495d77c299406ea33380d0f548" kindref="member">For</ref>(box1,<sp/>std::forward&lt;L1&gt;(f1));</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1adb038d495d77c299406ea33380d0f548" kindref="member">For</ref>(box2,<sp/>std::forward&lt;L2&gt;(f2));</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1adb038d495d77c299406ea33380d0f548" kindref="member">For</ref>(box3,<sp/>std::forward&lt;L3&gt;(f3));</highlight></codeline>
<codeline lineno="527"><highlight class="normal">}</highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L3,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim&gt;</highlight></codeline>
<codeline lineno="530" refid="namespaceamrex_1a2c17fa7ab4b55cbcb121d819843bef73" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1adb038d495d77c299406ea33380d0f548" kindref="member">For</ref><sp/>(<ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,<sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box3,<sp/>L1&amp;&amp;<sp/>f1,<sp/>L2&amp;&amp;<sp/>f2,<sp/>L3&amp;&amp;<sp/>f3)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal">{</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1adb038d495d77c299406ea33380d0f548" kindref="member">For</ref>(box1,<sp/>box2,<sp/>box3,<sp/>std::forward&lt;L1&gt;(f1),<sp/>std::forward&lt;L2&gt;(f2),<sp/>std::forward&lt;L3&gt;(f3));</highlight></codeline>
<codeline lineno="533"><highlight class="normal">}</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L3,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim&gt;</highlight></codeline>
<codeline lineno="536" refid="namespaceamrex_1ac6fd71501b0c33f59a45f24fb45bdc3e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1adb038d495d77c299406ea33380d0f548" kindref="member">For</ref><sp/>(<ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,<sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box3,<sp/>L1&amp;&amp;<sp/>f1,<sp/>L2&amp;&amp;<sp/>f2,<sp/>L3&amp;&amp;<sp/>f3)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal">{</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a0a525af3444a2814c6dbda9e71a965a5" kindref="member">amrex::ignore_unused</ref>(MT);</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1adb038d495d77c299406ea33380d0f548" kindref="member">For</ref>(box1,<sp/>box2,<sp/>box3,<sp/>std::forward&lt;L1&gt;(f1),<sp/>std::forward&lt;L2&gt;(f2),<sp/>std::forward&lt;L3&gt;(f3));</highlight></codeline>
<codeline lineno="540"><highlight class="normal">}</highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim,</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M1=std::enable_if_t&lt;std::is_integral_v&lt;T1&gt;&gt;,</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M2=std::enable_if_t&lt;std::is_integral_v&lt;T2&gt;&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="545" refid="namespaceamrex_1a1ea98821ea183c55bd8a7ecca588e971" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1adb038d495d77c299406ea33380d0f548" kindref="member">For</ref><sp/>(<ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/>T1<sp/>ncomp1,<sp/>L1&amp;&amp;<sp/>f1,</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/>T2<sp/>ncomp2,<sp/>L2&amp;&amp;<sp/>f2)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal">{</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1adb038d495d77c299406ea33380d0f548" kindref="member">For</ref>(box1,<sp/>ncomp1,<sp/>std::forward&lt;L1&gt;(f1));</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1adb038d495d77c299406ea33380d0f548" kindref="member">For</ref>(box2,<sp/>ncomp2,<sp/>std::forward&lt;L2&gt;(f2));</highlight></codeline>
<codeline lineno="550"><highlight class="normal">}</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim,</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M1=std::enable_if_t&lt;std::is_integral_v&lt;T1&gt;&gt;,</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M2=std::enable_if_t&lt;std::is_integral_v&lt;T2&gt;&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="555" refid="namespaceamrex_1adbfb44e1a05afe7fbdae500ab3797481" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1adb038d495d77c299406ea33380d0f548" kindref="member">For</ref><sp/>(<ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/>T1<sp/>ncomp1,<sp/>L1&amp;&amp;<sp/>f1,</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/>T2<sp/>ncomp2,<sp/>L2&amp;&amp;<sp/>f2)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal">{</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a0a525af3444a2814c6dbda9e71a965a5" kindref="member">amrex::ignore_unused</ref>(MT);</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1adb038d495d77c299406ea33380d0f548" kindref="member">For</ref>(box1,<sp/>ncomp1,<sp/>std::forward&lt;L1&gt;(f1));</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1adb038d495d77c299406ea33380d0f548" kindref="member">For</ref>(box2,<sp/>ncomp2,<sp/>std::forward&lt;L2&gt;(f2));</highlight></codeline>
<codeline lineno="561"><highlight class="normal">}</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim,</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M1=std::enable_if_t&lt;std::is_integral_v&lt;T1&gt;&gt;,</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M2=std::enable_if_t&lt;std::is_integral_v&lt;T2&gt;&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="566" refid="namespaceamrex_1aa9c28f856b384e7639fbb34427123b7d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1adb038d495d77c299406ea33380d0f548" kindref="member">For</ref><sp/>(<ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/>T1<sp/>ncomp1,<sp/>L1&amp;&amp;<sp/>f1,</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/>T2<sp/>ncomp2,<sp/>L2&amp;&amp;<sp/>f2)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal">{</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1adb038d495d77c299406ea33380d0f548" kindref="member">For</ref>(box1,ncomp1,std::forward&lt;L1&gt;(f1),box2,ncomp2,std::forward&lt;L2&gt;(f2));</highlight></codeline>
<codeline lineno="571"><highlight class="normal">}</highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim,</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M1=std::enable_if_t&lt;std::is_integral_v&lt;T1&gt;&gt;,</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M2=std::enable_if_t&lt;std::is_integral_v&lt;T2&gt;&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="576" refid="namespaceamrex_1a097659acd9d92785f8e0a1aff4c06ee5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1adb038d495d77c299406ea33380d0f548" kindref="member">For</ref><sp/>(<ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/>T1<sp/>ncomp1,<sp/>L1&amp;&amp;<sp/>f1,</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/>T2<sp/>ncomp2,<sp/>L2&amp;&amp;<sp/>f2)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal">{</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a0a525af3444a2814c6dbda9e71a965a5" kindref="member">amrex::ignore_unused</ref>(MT);</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1adb038d495d77c299406ea33380d0f548" kindref="member">For</ref>(box1,ncomp1,std::forward&lt;L1&gt;(f1),box2,ncomp2,std::forward&lt;L2&gt;(f2));</highlight></codeline>
<codeline lineno="582"><highlight class="normal">}</highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T3,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L3,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim,</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M1=std::enable_if_t&lt;std::is_integral_v&lt;T1&gt;&gt;,</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M2=std::enable_if_t&lt;std::is_integral_v&lt;T2&gt;&gt;,</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M3=std::enable_if_t&lt;std::is_integral_v&lt;T3&gt;&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="588" refid="namespaceamrex_1aeee7a2a1b52aa2d57763ab36928ceec4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1adb038d495d77c299406ea33380d0f548" kindref="member">For</ref><sp/>(<ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/>T1<sp/>ncomp1,<sp/>L1&amp;&amp;<sp/>f1,</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/>T2<sp/>ncomp2,<sp/>L2&amp;&amp;<sp/>f2,</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box3,<sp/>T3<sp/>ncomp3,<sp/>L3&amp;&amp;<sp/>f3)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal">{</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1adb038d495d77c299406ea33380d0f548" kindref="member">For</ref>(box1,<sp/>ncomp1,<sp/>std::forward&lt;L1&gt;(f1));</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1adb038d495d77c299406ea33380d0f548" kindref="member">For</ref>(box2,<sp/>ncomp2,<sp/>std::forward&lt;L2&gt;(f2));</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1adb038d495d77c299406ea33380d0f548" kindref="member">For</ref>(box3,<sp/>ncomp3,<sp/>std::forward&lt;L3&gt;(f3));</highlight></codeline>
<codeline lineno="595"><highlight class="normal">}</highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T3,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L3,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim,</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M1=std::enable_if_t&lt;std::is_integral_v&lt;T1&gt;&gt;,</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M2=std::enable_if_t&lt;std::is_integral_v&lt;T2&gt;&gt;,</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M3=std::enable_if_t&lt;std::is_integral_v&lt;T3&gt;&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="601" refid="namespaceamrex_1a3de6383b95f0e709a16c8aa212a530a0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1adb038d495d77c299406ea33380d0f548" kindref="member">For</ref><sp/>(<ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/>T1<sp/>ncomp1,<sp/>L1&amp;&amp;<sp/>f1,</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/>T2<sp/>ncomp2,<sp/>L2&amp;&amp;<sp/>f2,</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box3,<sp/>T3<sp/>ncomp3,<sp/>L3&amp;&amp;<sp/>f3)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal">{</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a0a525af3444a2814c6dbda9e71a965a5" kindref="member">amrex::ignore_unused</ref>(MT);</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1adb038d495d77c299406ea33380d0f548" kindref="member">For</ref>(box1,<sp/>ncomp1,<sp/>std::forward&lt;L1&gt;(f1));</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1adb038d495d77c299406ea33380d0f548" kindref="member">For</ref>(box2,<sp/>ncomp2,<sp/>std::forward&lt;L2&gt;(f2));</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1adb038d495d77c299406ea33380d0f548" kindref="member">For</ref>(box3,<sp/>ncomp3,<sp/>std::forward&lt;L3&gt;(f3));</highlight></codeline>
<codeline lineno="609"><highlight class="normal">}</highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T3,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L3,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim,</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M1=std::enable_if_t&lt;std::is_integral_v&lt;T1&gt;&gt;,</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M2=std::enable_if_t&lt;std::is_integral_v&lt;T2&gt;&gt;,</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M3=std::enable_if_t&lt;std::is_integral_v&lt;T3&gt;&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="615" refid="namespaceamrex_1ad457e5329315312926c0113d9f3d626d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1adb038d495d77c299406ea33380d0f548" kindref="member">For</ref><sp/>(<ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/>T1<sp/>ncomp1,<sp/>L1&amp;&amp;<sp/>f1,</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/>T2<sp/>ncomp2,<sp/>L2&amp;&amp;<sp/>f2,</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box3,<sp/>T3<sp/>ncomp3,<sp/>L3&amp;&amp;<sp/>f3)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal">{</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1adb038d495d77c299406ea33380d0f548" kindref="member">For</ref>(box1,ncomp1,std::forward&lt;L1&gt;(f1),</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>box2,ncomp2,std::forward&lt;L2&gt;(f2),</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>box3,ncomp3,std::forward&lt;L3&gt;(f3));</highlight></codeline>
<codeline lineno="623"><highlight class="normal">}</highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T3,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L3,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim,</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M1=std::enable_if_t&lt;std::is_integral_v&lt;T1&gt;&gt;,</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M2=std::enable_if_t&lt;std::is_integral_v&lt;T2&gt;&gt;,</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M3=std::enable_if_t&lt;std::is_integral_v&lt;T3&gt;&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="629" refid="namespaceamrex_1a2f8ea56d6a1b9ab6ae591e7a11d0edfa" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1adb038d495d77c299406ea33380d0f548" kindref="member">For</ref><sp/>(<ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/>T1<sp/>ncomp1,<sp/>L1&amp;&amp;<sp/>f1,</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/>T2<sp/>ncomp2,<sp/>L2&amp;&amp;<sp/>f2,</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box3,<sp/>T3<sp/>ncomp3,<sp/>L3&amp;&amp;<sp/>f3)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal">{</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a0a525af3444a2814c6dbda9e71a965a5" kindref="member">amrex::ignore_unused</ref>(MT);</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1adb038d495d77c299406ea33380d0f548" kindref="member">For</ref>(box1,ncomp1,std::forward&lt;L1&gt;(f1),</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>box2,ncomp2,std::forward&lt;L2&gt;(f2),</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>box3,ncomp3,std::forward&lt;L3&gt;(f3));</highlight></codeline>
<codeline lineno="638"><highlight class="normal">}</highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim&gt;</highlight></codeline>
<codeline lineno="641" refid="namespaceamrex_1ae05b0f6257a895df1534273573b33a53" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a1f15630874d45aeb722ca649e6c4c3a9" kindref="member">ParallelFor</ref><sp/>(<ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/>L1&amp;&amp;<sp/>f1,<sp/>L2&amp;&amp;<sp/>f2)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal">{</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a1f15630874d45aeb722ca649e6c4c3a9" kindref="member">ParallelFor</ref>(box1,<sp/>std::forward&lt;L1&gt;(f1));</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a1f15630874d45aeb722ca649e6c4c3a9" kindref="member">ParallelFor</ref>(box2,<sp/>std::forward&lt;L2&gt;(f2));</highlight></codeline>
<codeline lineno="645"><highlight class="normal">}</highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim&gt;</highlight></codeline>
<codeline lineno="648" refid="namespaceamrex_1aae53def9f180287be2550afbc0a1e7c4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a1f15630874d45aeb722ca649e6c4c3a9" kindref="member">ParallelFor</ref><sp/>(<ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/>L1&amp;&amp;<sp/>f1,<sp/>L2&amp;&amp;<sp/>f2)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal">{</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a0a525af3444a2814c6dbda9e71a965a5" kindref="member">amrex::ignore_unused</ref>(MT);</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a1f15630874d45aeb722ca649e6c4c3a9" kindref="member">ParallelFor</ref>(box1,<sp/>std::forward&lt;L1&gt;(f1));</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a1f15630874d45aeb722ca649e6c4c3a9" kindref="member">ParallelFor</ref>(box2,<sp/>std::forward&lt;L2&gt;(f2));</highlight></codeline>
<codeline lineno="653"><highlight class="normal">}</highlight></codeline>
<codeline lineno="654"><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim&gt;</highlight></codeline>
<codeline lineno="656" refid="namespaceamrex_1ad4d0a1a75e2f23d9ac1ab9fc6d1b1941" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a1f15630874d45aeb722ca649e6c4c3a9" kindref="member">ParallelFor</ref><sp/>(<ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,<sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/>L1&amp;&amp;<sp/>f1,<sp/>L2&amp;&amp;<sp/>f2)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal">{</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a1f15630874d45aeb722ca649e6c4c3a9" kindref="member">ParallelFor</ref>(box1,box2,std::forward&lt;L1&gt;(f1),std::forward&lt;L2&gt;(f2));</highlight></codeline>
<codeline lineno="659"><highlight class="normal">}</highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim&gt;</highlight></codeline>
<codeline lineno="662" refid="namespaceamrex_1a973070d38bb44c6d77839d06bdd95b61" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a1f15630874d45aeb722ca649e6c4c3a9" kindref="member">ParallelFor</ref><sp/>(<ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,<sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/>L1&amp;&amp;<sp/>f1,<sp/>L2&amp;&amp;<sp/>f2)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal">{</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a0a525af3444a2814c6dbda9e71a965a5" kindref="member">amrex::ignore_unused</ref>(MT);</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a1f15630874d45aeb722ca649e6c4c3a9" kindref="member">ParallelFor</ref>(box1,box2,std::forward&lt;L1&gt;(f1),std::forward&lt;L2&gt;(f2));</highlight></codeline>
<codeline lineno="666"><highlight class="normal">}</highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L3,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim&gt;</highlight></codeline>
<codeline lineno="669" refid="namespaceamrex_1a83b6cc642bf2ef072306f845daace1a9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a1f15630874d45aeb722ca649e6c4c3a9" kindref="member">ParallelFor</ref><sp/>(<ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box3,<sp/>L1&amp;&amp;<sp/>f1,<sp/>L2&amp;&amp;<sp/>f2,<sp/>L3&amp;&amp;<sp/>f3)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal">{</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a1f15630874d45aeb722ca649e6c4c3a9" kindref="member">ParallelFor</ref>(box1,<sp/>std::forward&lt;L1&gt;(f1));</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a1f15630874d45aeb722ca649e6c4c3a9" kindref="member">ParallelFor</ref>(box2,<sp/>std::forward&lt;L2&gt;(f2));</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a1f15630874d45aeb722ca649e6c4c3a9" kindref="member">ParallelFor</ref>(box3,<sp/>std::forward&lt;L3&gt;(f3));</highlight></codeline>
<codeline lineno="674"><highlight class="normal">}</highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L3,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim&gt;</highlight></codeline>
<codeline lineno="677" refid="namespaceamrex_1a3889213a6ba449a1676c884fd4473979" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a1f15630874d45aeb722ca649e6c4c3a9" kindref="member">ParallelFor</ref><sp/>(<ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box3,<sp/>L1&amp;&amp;<sp/>f1,<sp/>L2&amp;&amp;<sp/>f2,<sp/>L3&amp;&amp;<sp/>f3)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal">{</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a0a525af3444a2814c6dbda9e71a965a5" kindref="member">amrex::ignore_unused</ref>(MT);</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a1f15630874d45aeb722ca649e6c4c3a9" kindref="member">ParallelFor</ref>(box1,<sp/>std::forward&lt;L1&gt;(f1));</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a1f15630874d45aeb722ca649e6c4c3a9" kindref="member">ParallelFor</ref>(box2,<sp/>std::forward&lt;L2&gt;(f2));</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a1f15630874d45aeb722ca649e6c4c3a9" kindref="member">ParallelFor</ref>(box3,<sp/>std::forward&lt;L3&gt;(f3));</highlight></codeline>
<codeline lineno="683"><highlight class="normal">}</highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L3,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim&gt;</highlight></codeline>
<codeline lineno="686" refid="namespaceamrex_1a2085f4123d08ffc2a370f76a5f15a8ad" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a1f15630874d45aeb722ca649e6c4c3a9" kindref="member">ParallelFor</ref><sp/>(<ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,<sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box3,<sp/>L1&amp;&amp;<sp/>f1,<sp/>L2&amp;&amp;<sp/>f2,<sp/>L3&amp;&amp;<sp/>f3)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal">{</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a1f15630874d45aeb722ca649e6c4c3a9" kindref="member">ParallelFor</ref>(box1,box2,box3,std::forward&lt;L1&gt;(f1),std::forward&lt;L2&gt;(f2),std::forward&lt;L3&gt;(f3));</highlight></codeline>
<codeline lineno="689"><highlight class="normal">}</highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L3,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim&gt;</highlight></codeline>
<codeline lineno="692" refid="namespaceamrex_1a48ddb79d8398fdbbd3e1c41cbc7ef207" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a1f15630874d45aeb722ca649e6c4c3a9" kindref="member">ParallelFor</ref><sp/>(<ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,<sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box3,<sp/>L1&amp;&amp;<sp/>f1,<sp/>L2&amp;&amp;<sp/>f2,<sp/>L3&amp;&amp;<sp/>f3)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal">{</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a0a525af3444a2814c6dbda9e71a965a5" kindref="member">amrex::ignore_unused</ref>(MT);</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a1f15630874d45aeb722ca649e6c4c3a9" kindref="member">ParallelFor</ref>(box1,box2,box3,std::forward&lt;L1&gt;(f1),std::forward&lt;L2&gt;(f2),std::forward&lt;L3&gt;(f3));</highlight></codeline>
<codeline lineno="696"><highlight class="normal">}</highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim,</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M1=std::enable_if_t&lt;std::is_integral_v&lt;T1&gt;&gt;,</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M2=std::enable_if_t&lt;std::is_integral_v&lt;T2&gt;&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="701" refid="namespaceamrex_1a5c27ea1a053d1c7eb9de380f9432bddd" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a1f15630874d45aeb722ca649e6c4c3a9" kindref="member">ParallelFor</ref><sp/>(<ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/>T1<sp/>ncomp1,<sp/>L1&amp;&amp;<sp/>f1,</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/>T2<sp/>ncomp2,<sp/>L2&amp;&amp;<sp/>f2)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal">{</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a1f15630874d45aeb722ca649e6c4c3a9" kindref="member">ParallelFor</ref>(box1,<sp/>ncomp1,<sp/>std::forward&lt;L1&gt;(f1));</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a1f15630874d45aeb722ca649e6c4c3a9" kindref="member">ParallelFor</ref>(box2,<sp/>ncomp2,<sp/>std::forward&lt;L2&gt;(f2));</highlight></codeline>
<codeline lineno="706"><highlight class="normal">}</highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim,</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M1=std::enable_if_t&lt;std::is_integral_v&lt;T1&gt;&gt;,</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M2=std::enable_if_t&lt;std::is_integral_v&lt;T2&gt;&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="711" refid="namespaceamrex_1a3a883621c742ff0baa422bb24ee9178c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a1f15630874d45aeb722ca649e6c4c3a9" kindref="member">ParallelFor</ref><sp/>(<ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/>T1<sp/>ncomp1,<sp/>L1&amp;&amp;<sp/>f1,</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/>T2<sp/>ncomp2,<sp/>L2&amp;&amp;<sp/>f2)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal">{</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a0a525af3444a2814c6dbda9e71a965a5" kindref="member">amrex::ignore_unused</ref>(MT);</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a1f15630874d45aeb722ca649e6c4c3a9" kindref="member">ParallelFor</ref>(box1,<sp/>ncomp1,<sp/>std::forward&lt;L1&gt;(f1));</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a1f15630874d45aeb722ca649e6c4c3a9" kindref="member">ParallelFor</ref>(box2,<sp/>ncomp2,<sp/>std::forward&lt;L2&gt;(f2));</highlight></codeline>
<codeline lineno="717"><highlight class="normal">}</highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim,</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M1=std::enable_if_t&lt;std::is_integral_v&lt;T1&gt;&gt;,</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M2=std::enable_if_t&lt;std::is_integral_v&lt;T2&gt;&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="722" refid="namespaceamrex_1af0d555cdb1a9c3d5e48a5db38af5b6b8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a1f15630874d45aeb722ca649e6c4c3a9" kindref="member">ParallelFor</ref><sp/>(<ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/>T1<sp/>ncomp1,<sp/>L1&amp;&amp;<sp/>f1,</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/>T2<sp/>ncomp2,<sp/>L2&amp;&amp;<sp/>f2)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal">{</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a1f15630874d45aeb722ca649e6c4c3a9" kindref="member">ParallelFor</ref>(box1,ncomp1,std::forward&lt;L1&gt;(f1),</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>box2,ncomp2,std::forward&lt;L2&gt;(f2));</highlight></codeline>
<codeline lineno="728"><highlight class="normal">}</highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim,</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M1=std::enable_if_t&lt;std::is_integral_v&lt;T1&gt;&gt;,</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M2=std::enable_if_t&lt;std::is_integral_v&lt;T2&gt;&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="733" refid="namespaceamrex_1a0583f5f82579c44211cb38d6bd8e9742" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a1f15630874d45aeb722ca649e6c4c3a9" kindref="member">ParallelFor</ref><sp/>(<ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/>T1<sp/>ncomp1,<sp/>L1&amp;&amp;<sp/>f1,</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/>T2<sp/>ncomp2,<sp/>L2&amp;&amp;<sp/>f2)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal">{</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a0a525af3444a2814c6dbda9e71a965a5" kindref="member">amrex::ignore_unused</ref>(MT);</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a1f15630874d45aeb722ca649e6c4c3a9" kindref="member">ParallelFor</ref>(box1,ncomp1,std::forward&lt;L1&gt;(f1),</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>box2,ncomp2,std::forward&lt;L2&gt;(f2));</highlight></codeline>
<codeline lineno="740"><highlight class="normal">}</highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T3,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L3,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim,</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M1=std::enable_if_t&lt;std::is_integral_v&lt;T1&gt;&gt;,</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M2=std::enable_if_t&lt;std::is_integral_v&lt;T2&gt;&gt;,</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M3=std::enable_if_t&lt;std::is_integral_v&lt;T3&gt;&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="746" refid="namespaceamrex_1aa038af75a97822c5df21f691781e2145" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a1f15630874d45aeb722ca649e6c4c3a9" kindref="member">ParallelFor</ref><sp/>(<ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/>T1<sp/>ncomp1,<sp/>L1&amp;&amp;<sp/>f1,</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/>T2<sp/>ncomp2,<sp/>L2&amp;&amp;<sp/>f2,</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box3,<sp/>T3<sp/>ncomp3,<sp/>L3&amp;&amp;<sp/>f3)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal">{</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a1f15630874d45aeb722ca649e6c4c3a9" kindref="member">ParallelFor</ref>(box1,<sp/>ncomp1,<sp/>std::forward&lt;L1&gt;(f1));</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a1f15630874d45aeb722ca649e6c4c3a9" kindref="member">ParallelFor</ref>(box2,<sp/>ncomp2,<sp/>std::forward&lt;L2&gt;(f2));</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a1f15630874d45aeb722ca649e6c4c3a9" kindref="member">ParallelFor</ref>(box3,<sp/>ncomp3,<sp/>std::forward&lt;L3&gt;(f3));</highlight></codeline>
<codeline lineno="753"><highlight class="normal">}</highlight></codeline>
<codeline lineno="754"><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T3,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L3,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim,</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M1=std::enable_if_t&lt;std::is_integral_v&lt;T1&gt;&gt;,</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M2=std::enable_if_t&lt;std::is_integral_v&lt;T2&gt;&gt;,</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M3=std::enable_if_t&lt;std::is_integral_v&lt;T3&gt;&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="759" refid="namespaceamrex_1a61b418ec6d1a69f9963e1790e218efe6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a1f15630874d45aeb722ca649e6c4c3a9" kindref="member">ParallelFor</ref><sp/>(<ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/>T1<sp/>ncomp1,<sp/>L1&amp;&amp;<sp/>f1,</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/>T2<sp/>ncomp2,<sp/>L2&amp;&amp;<sp/>f2,</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box3,<sp/>T3<sp/>ncomp3,<sp/>L3&amp;&amp;<sp/>f3)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal">{</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a0a525af3444a2814c6dbda9e71a965a5" kindref="member">amrex::ignore_unused</ref>(MT);</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a1f15630874d45aeb722ca649e6c4c3a9" kindref="member">ParallelFor</ref>(box1,<sp/>ncomp1,<sp/>std::forward&lt;L1&gt;(f1));</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a1f15630874d45aeb722ca649e6c4c3a9" kindref="member">ParallelFor</ref>(box2,<sp/>ncomp2,<sp/>std::forward&lt;L2&gt;(f2));</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a1f15630874d45aeb722ca649e6c4c3a9" kindref="member">ParallelFor</ref>(box3,<sp/>ncomp3,<sp/>std::forward&lt;L3&gt;(f3));</highlight></codeline>
<codeline lineno="767"><highlight class="normal">}</highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T3,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L3,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim,</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M1=std::enable_if_t&lt;std::is_integral_v&lt;T1&gt;&gt;,</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M2=std::enable_if_t&lt;std::is_integral_v&lt;T2&gt;&gt;,</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M3=std::enable_if_t&lt;std::is_integral_v&lt;T3&gt;&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="773" refid="namespaceamrex_1aab66312a8b6b1917316863fdb67ca868" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a1f15630874d45aeb722ca649e6c4c3a9" kindref="member">ParallelFor</ref><sp/>(<ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/>T1<sp/>ncomp1,<sp/>L1&amp;&amp;<sp/>f1,</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/>T2<sp/>ncomp2,<sp/>L2&amp;&amp;<sp/>f2,</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box3,<sp/>T3<sp/>ncomp3,<sp/>L3&amp;&amp;<sp/>f3)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal">{</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a1f15630874d45aeb722ca649e6c4c3a9" kindref="member">ParallelFor</ref>(box1,<sp/>ncomp1,<sp/>std::forward&lt;L1&gt;(f1),</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>box2,<sp/>ncomp2,<sp/>std::forward&lt;L2&gt;(f2),</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>box3,<sp/>ncomp3,<sp/>std::forward&lt;L3&gt;(f3));</highlight></codeline>
<codeline lineno="781"><highlight class="normal">}</highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T3,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L3,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim,</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M1=std::enable_if_t&lt;std::is_integral_v&lt;T1&gt;&gt;,</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M2=std::enable_if_t&lt;std::is_integral_v&lt;T2&gt;&gt;,</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M3=std::enable_if_t&lt;std::is_integral_v&lt;T3&gt;&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="787" refid="namespaceamrex_1aea15a461fa55040196c830e84ecba7fb" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a1f15630874d45aeb722ca649e6c4c3a9" kindref="member">ParallelFor</ref><sp/>(<ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/>T1<sp/>ncomp1,<sp/>L1&amp;&amp;<sp/>f1,</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/>T2<sp/>ncomp2,<sp/>L2&amp;&amp;<sp/>f2,</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box3,<sp/>T3<sp/>ncomp3,<sp/>L3&amp;&amp;<sp/>f3)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal">{</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a0a525af3444a2814c6dbda9e71a965a5" kindref="member">amrex::ignore_unused</ref>(MT);</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a1f15630874d45aeb722ca649e6c4c3a9" kindref="member">ParallelFor</ref>(box1,<sp/>ncomp1,<sp/>std::forward&lt;L1&gt;(f1),</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>box2,<sp/>ncomp2,<sp/>std::forward&lt;L2&gt;(f2),</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>box3,<sp/>ncomp3,<sp/>std::forward&lt;L3&gt;(f3));</highlight></codeline>
<codeline lineno="796"><highlight class="normal">}</highlight></codeline>
<codeline lineno="797"><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M=std::enable_if_t&lt;std::is_</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">egral_v&lt;T&gt;&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="799" refid="namespaceamrex_1a8fbd6b37b492537aed607bfd14595409" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a8fbd6b37b492537aed607bfd14595409" kindref="member">HostDeviceParallelFor</ref><sp/>(T<sp/>n,<sp/>L&amp;&amp;<sp/>f)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal">{</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a1f15630874d45aeb722ca649e6c4c3a9" kindref="member">ParallelFor</ref>(n,std::forward&lt;L&gt;(f));</highlight></codeline>
<codeline lineno="802"><highlight class="normal">}</highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M=std::enable_if_t&lt;std::is_</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">egral_v&lt;T&gt;&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="805" refid="namespaceamrex_1a404044a9b269d7f9672d46b81c41584b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a8fbd6b37b492537aed607bfd14595409" kindref="member">HostDeviceParallelFor</ref><sp/>(T<sp/>n,<sp/>L&amp;&amp;<sp/>f)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal">{</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a0a525af3444a2814c6dbda9e71a965a5" kindref="member">amrex::ignore_unused</ref>(MT);</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a1f15630874d45aeb722ca649e6c4c3a9" kindref="member">ParallelFor</ref>(n,std::forward&lt;L&gt;(f));</highlight></codeline>
<codeline lineno="809"><highlight class="normal">}</highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim&gt;</highlight></codeline>
<codeline lineno="812" refid="namespaceamrex_1a5f7177073e56ccdb161d727c3b355c86" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a8fbd6b37b492537aed607bfd14595409" kindref="member">HostDeviceParallelFor</ref><sp/>(<ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box,<sp/>L&amp;&amp;<sp/>f)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal">{</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a1f15630874d45aeb722ca649e6c4c3a9" kindref="member">ParallelFor</ref>(box,std::forward&lt;L&gt;(f));</highlight></codeline>
<codeline lineno="815"><highlight class="normal">}</highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim&gt;</highlight></codeline>
<codeline lineno="818" refid="namespaceamrex_1ab4270fccceeedebb34cd792b94c0328e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a8fbd6b37b492537aed607bfd14595409" kindref="member">HostDeviceParallelFor</ref><sp/>(<ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box,<sp/>L&amp;&amp;<sp/>f)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal">{</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a0a525af3444a2814c6dbda9e71a965a5" kindref="member">amrex::ignore_unused</ref>(MT);</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a1f15630874d45aeb722ca649e6c4c3a9" kindref="member">ParallelFor</ref>(box,std::forward&lt;L&gt;(f));</highlight></codeline>
<codeline lineno="822"><highlight class="normal">}</highlight></codeline>
<codeline lineno="823"><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M=std::enable_if_t&lt;std::is_</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">egral_v&lt;T&gt;&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="825" refid="namespaceamrex_1a40f6f2af18bb504d5435ff204e0e0b09" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a8fbd6b37b492537aed607bfd14595409" kindref="member">HostDeviceParallelFor</ref><sp/>(<ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box,<sp/>T<sp/>ncomp,<sp/>L&amp;&amp;<sp/>f)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal">{</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a1f15630874d45aeb722ca649e6c4c3a9" kindref="member">ParallelFor</ref>(box,ncomp,std::forward&lt;L&gt;(f));</highlight></codeline>
<codeline lineno="828"><highlight class="normal">}</highlight></codeline>
<codeline lineno="829"><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M=std::enable_if_t&lt;std::is_</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">egral_v&lt;T&gt;&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="831" refid="namespaceamrex_1af8cec6ecebfff309e9064f7b8d70928a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a8fbd6b37b492537aed607bfd14595409" kindref="member">HostDeviceParallelFor</ref><sp/>(<ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box,<sp/>T<sp/>ncomp,<sp/>L&amp;&amp;<sp/>f)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal">{</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a0a525af3444a2814c6dbda9e71a965a5" kindref="member">amrex::ignore_unused</ref>(MT);</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a1f15630874d45aeb722ca649e6c4c3a9" kindref="member">ParallelFor</ref>(box,ncomp,std::forward&lt;L&gt;(f));</highlight></codeline>
<codeline lineno="835"><highlight class="normal">}</highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim&gt;</highlight></codeline>
<codeline lineno="838" refid="namespaceamrex_1a3763c5b1f0bd54bd4811e503351f2377" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a8fbd6b37b492537aed607bfd14595409" kindref="member">HostDeviceParallelFor</ref><sp/>(<ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/>L1&amp;&amp;<sp/>f1,<sp/>L2&amp;&amp;<sp/>f2)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal">{</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a1f15630874d45aeb722ca649e6c4c3a9" kindref="member">ParallelFor</ref>(box1,box2,std::forward&lt;L1&gt;(f1),std::forward&lt;L2&gt;(f2));</highlight></codeline>
<codeline lineno="841"><highlight class="normal">}</highlight></codeline>
<codeline lineno="842"><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim&gt;</highlight></codeline>
<codeline lineno="844" refid="namespaceamrex_1a7011860ac4d3b9662c2e213cf74c2c7a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a8fbd6b37b492537aed607bfd14595409" kindref="member">HostDeviceParallelFor</ref><sp/>(<ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/>L1&amp;&amp;<sp/>f1,<sp/>L2&amp;&amp;<sp/>f2)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal">{</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a0a525af3444a2814c6dbda9e71a965a5" kindref="member">amrex::ignore_unused</ref>(MT);</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a1f15630874d45aeb722ca649e6c4c3a9" kindref="member">ParallelFor</ref>(box1,box2,std::forward&lt;L1&gt;(f1),std::forward&lt;L2&gt;(f2));</highlight></codeline>
<codeline lineno="848"><highlight class="normal">}</highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L3,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim&gt;</highlight></codeline>
<codeline lineno="851" refid="namespaceamrex_1a78a12c2221bfea8298c5ad4aa060ed28" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a8fbd6b37b492537aed607bfd14595409" kindref="member">HostDeviceParallelFor</ref><sp/>(<ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box3,</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L1&amp;&amp;<sp/>f1,<sp/>L2&amp;&amp;<sp/>f2,<sp/>L3&amp;&amp;<sp/>f3)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal">{</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a1f15630874d45aeb722ca649e6c4c3a9" kindref="member">ParallelFor</ref>(box1,box2,box3,std::forward&lt;L1&gt;(f1),std::forward&lt;L2&gt;(f2),std::forward&lt;L3&gt;(f3));</highlight></codeline>
<codeline lineno="855"><highlight class="normal">}</highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L3,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim&gt;</highlight></codeline>
<codeline lineno="858" refid="namespaceamrex_1af90c18c90c9f3e9391ee30ce7a721944" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a8fbd6b37b492537aed607bfd14595409" kindref="member">HostDeviceParallelFor</ref><sp/>(<ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box3,</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L1&amp;&amp;<sp/>f1,<sp/>L2&amp;&amp;<sp/>f2,<sp/>L3&amp;&amp;<sp/>f3)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal">{</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a0a525af3444a2814c6dbda9e71a965a5" kindref="member">amrex::ignore_unused</ref>(MT);</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a1f15630874d45aeb722ca649e6c4c3a9" kindref="member">ParallelFor</ref>(box1,box2,box3,std::forward&lt;L1&gt;(f1),std::forward&lt;L2&gt;(f2),std::forward&lt;L3&gt;(f3));</highlight></codeline>
<codeline lineno="863"><highlight class="normal">}</highlight></codeline>
<codeline lineno="864"><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim,</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M1=std::enable_if_t&lt;std::is_integral_v&lt;T1&gt;&gt;,</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M2=std::enable_if_t&lt;std::is_integral_v&lt;T2&gt;&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="868" refid="namespaceamrex_1a3a030f294fac0688f0a029c43b79b68b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a8fbd6b37b492537aed607bfd14595409" kindref="member">HostDeviceParallelFor</ref><sp/>(<ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/>T1<sp/>ncomp1,<sp/>L1&amp;&amp;<sp/>f1,</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/>T2<sp/>ncomp2,<sp/>L2&amp;&amp;<sp/>f2)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="870"><highlight class="normal">{</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a1f15630874d45aeb722ca649e6c4c3a9" kindref="member">ParallelFor</ref>(box1,ncomp1,std::forward&lt;L1&gt;(f1),box2,ncomp2,std::forward&lt;L2&gt;(f2));</highlight></codeline>
<codeline lineno="872"><highlight class="normal">}</highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim,</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M1=std::enable_if_t&lt;std::is_integral_v&lt;T1&gt;&gt;,</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M2=std::enable_if_t&lt;std::is_integral_v&lt;T2&gt;&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="877" refid="namespaceamrex_1a007b0bae48db5de4faf67eee59ad6fa4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a8fbd6b37b492537aed607bfd14595409" kindref="member">HostDeviceParallelFor</ref><sp/>(<ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/>T1<sp/>ncomp1,<sp/>L1&amp;&amp;<sp/>f1,</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/>T2<sp/>ncomp2,<sp/>L2&amp;&amp;<sp/>f2)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal">{</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a0a525af3444a2814c6dbda9e71a965a5" kindref="member">amrex::ignore_unused</ref>(MT);</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a1f15630874d45aeb722ca649e6c4c3a9" kindref="member">ParallelFor</ref>(box1,ncomp1,std::forward&lt;L1&gt;(f1),box2,ncomp2,std::forward&lt;L2&gt;(f2));</highlight></codeline>
<codeline lineno="882"><highlight class="normal">}</highlight></codeline>
<codeline lineno="883"><highlight class="normal"></highlight></codeline>
<codeline lineno="884"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T3,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L3,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim,</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M1=std::enable_if_t&lt;std::is_integral_v&lt;T1&gt;&gt;,</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M2=std::enable_if_t&lt;std::is_integral_v&lt;T2&gt;&gt;,</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M3=std::enable_if_t&lt;std::is_integral_v&lt;T3&gt;&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="888" refid="namespaceamrex_1a8b56d06bc25e8334cf9af48c442e906d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a8fbd6b37b492537aed607bfd14595409" kindref="member">HostDeviceParallelFor</ref><sp/>(<ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/>T1<sp/>ncomp1,<sp/>L1&amp;&amp;<sp/>f1,</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/>T2<sp/>ncomp2,<sp/>L2&amp;&amp;<sp/>f2,</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box3,<sp/>T3<sp/>ncomp3,<sp/>L3&amp;&amp;<sp/>f3)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal">{</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a1f15630874d45aeb722ca649e6c4c3a9" kindref="member">ParallelFor</ref>(box1,ncomp1,std::forward&lt;L1&gt;(f1),</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>box2,ncomp2,std::forward&lt;L2&gt;(f2),</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>box3,ncomp3,std::forward&lt;L3&gt;(f3));</highlight></codeline>
<codeline lineno="895"><highlight class="normal">}</highlight></codeline>
<codeline lineno="896"><highlight class="normal"></highlight></codeline>
<codeline lineno="897"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T3,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L3,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim,</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M1=std::enable_if_t&lt;std::is_integral_v&lt;T1&gt;&gt;,</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M2=std::enable_if_t&lt;std::is_integral_v&lt;T2&gt;&gt;,</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M3=std::enable_if_t&lt;std::is_integral_v&lt;T3&gt;&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="901" refid="namespaceamrex_1ad57d36e469431aff623f22b3dcebb502" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a8fbd6b37b492537aed607bfd14595409" kindref="member">HostDeviceParallelFor</ref><sp/>(<ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/>T1<sp/>ncomp1,<sp/>L1&amp;&amp;<sp/>f1,</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/>T2<sp/>ncomp2,<sp/>L2&amp;&amp;<sp/>f2,</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box3,<sp/>T3<sp/>ncomp3,<sp/>L3&amp;&amp;<sp/>f3)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="904"><highlight class="normal">{</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a0a525af3444a2814c6dbda9e71a965a5" kindref="member">amrex::ignore_unused</ref>(MT);</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a1f15630874d45aeb722ca649e6c4c3a9" kindref="member">ParallelFor</ref>(box1,ncomp1,std::forward&lt;L1&gt;(f1),</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>box2,ncomp2,std::forward&lt;L2&gt;(f2),</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>box3,ncomp3,std::forward&lt;L3&gt;(f3));</highlight></codeline>
<codeline lineno="909"><highlight class="normal">}</highlight></codeline>
<codeline lineno="910"><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M=std::enable_if_t&lt;std::is_</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">egral_v&lt;T&gt;&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="912" refid="namespaceamrex_1a7272329c4c5b06cda2ee47e4ee3f46e2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a7272329c4c5b06cda2ee47e4ee3f46e2" kindref="member">HostDeviceFor</ref><sp/>(T<sp/>n,<sp/>L&amp;&amp;<sp/>f)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal">{</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1adb038d495d77c299406ea33380d0f548" kindref="member">For</ref>(n,std::forward&lt;L&gt;(f));</highlight></codeline>
<codeline lineno="915"><highlight class="normal">}</highlight></codeline>
<codeline lineno="916"><highlight class="normal"></highlight></codeline>
<codeline lineno="917"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M=std::enable_if_t&lt;std::is_</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">egral_v&lt;T&gt;&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="918" refid="namespaceamrex_1a52a015c2685e72eedbec426e5c759e38" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a7272329c4c5b06cda2ee47e4ee3f46e2" kindref="member">HostDeviceFor</ref><sp/>(T<sp/>n,<sp/>L&amp;&amp;<sp/>f)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal">{</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a0a525af3444a2814c6dbda9e71a965a5" kindref="member">amrex::ignore_unused</ref>(MT);</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1adb038d495d77c299406ea33380d0f548" kindref="member">For</ref>(n,std::forward&lt;L&gt;(f));</highlight></codeline>
<codeline lineno="922"><highlight class="normal">}</highlight></codeline>
<codeline lineno="923"><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim&gt;</highlight></codeline>
<codeline lineno="925" refid="namespaceamrex_1a3189a2b23e96e8168b832bf046f9ffcc" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a7272329c4c5b06cda2ee47e4ee3f46e2" kindref="member">HostDeviceFor</ref><sp/>(<ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box,<sp/>L&amp;&amp;<sp/>f)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal">{</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1adb038d495d77c299406ea33380d0f548" kindref="member">For</ref>(box,std::forward&lt;L&gt;(f));</highlight></codeline>
<codeline lineno="928"><highlight class="normal">}</highlight></codeline>
<codeline lineno="929"><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim&gt;</highlight></codeline>
<codeline lineno="931" refid="namespaceamrex_1a310f80bb86e77de79b992eb3a5611060" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a7272329c4c5b06cda2ee47e4ee3f46e2" kindref="member">HostDeviceFor</ref><sp/>(<ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box,<sp/>L&amp;&amp;<sp/>f)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal">{</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a0a525af3444a2814c6dbda9e71a965a5" kindref="member">amrex::ignore_unused</ref>(MT);</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1adb038d495d77c299406ea33380d0f548" kindref="member">For</ref>(box,std::forward&lt;L&gt;(f));</highlight></codeline>
<codeline lineno="935"><highlight class="normal">}</highlight></codeline>
<codeline lineno="936"><highlight class="normal"></highlight></codeline>
<codeline lineno="937"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M=std::enable_if_t&lt;std::is_</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">egral_v&lt;T&gt;&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="938" refid="namespaceamrex_1ad7f374c1219aa3622e64b4be6dfb02b5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a7272329c4c5b06cda2ee47e4ee3f46e2" kindref="member">HostDeviceFor</ref><sp/>(<ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box,<sp/>T<sp/>ncomp,<sp/>L&amp;&amp;<sp/>f)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="939"><highlight class="normal">{</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1adb038d495d77c299406ea33380d0f548" kindref="member">For</ref>(box,ncomp,std::forward&lt;L&gt;(f));</highlight></codeline>
<codeline lineno="941"><highlight class="normal">}</highlight></codeline>
<codeline lineno="942"><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M=std::enable_if_t&lt;std::is_</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">egral_v&lt;T&gt;&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="944" refid="namespaceamrex_1a545d5fef2095d5f3fddea69dba151840" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a7272329c4c5b06cda2ee47e4ee3f46e2" kindref="member">HostDeviceFor</ref><sp/>(<ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box,<sp/>T<sp/>ncomp,<sp/>L&amp;&amp;<sp/>f)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal">{</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a0a525af3444a2814c6dbda9e71a965a5" kindref="member">amrex::ignore_unused</ref>(MT);</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1adb038d495d77c299406ea33380d0f548" kindref="member">For</ref>(box,ncomp,std::forward&lt;L&gt;(f));</highlight></codeline>
<codeline lineno="948"><highlight class="normal">}</highlight></codeline>
<codeline lineno="949"><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim&gt;</highlight></codeline>
<codeline lineno="951" refid="namespaceamrex_1a4bf53c73af6a835b3ccde8b962e7d3f6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a7272329c4c5b06cda2ee47e4ee3f46e2" kindref="member">HostDeviceFor</ref><sp/>(<ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/>L1&amp;&amp;<sp/>f1,<sp/>L2&amp;&amp;<sp/>f2)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="952"><highlight class="normal">{</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1adb038d495d77c299406ea33380d0f548" kindref="member">For</ref>(box1,box2,std::forward&lt;L1&gt;(f1),std::forward&lt;L2&gt;(f2));</highlight></codeline>
<codeline lineno="954"><highlight class="normal">}</highlight></codeline>
<codeline lineno="955"><highlight class="normal"></highlight></codeline>
<codeline lineno="956"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim&gt;</highlight></codeline>
<codeline lineno="957" refid="namespaceamrex_1af4b9f892d7cd16b475416f18ff672640" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a7272329c4c5b06cda2ee47e4ee3f46e2" kindref="member">HostDeviceFor</ref><sp/>(<ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/>L1&amp;&amp;<sp/>f1,<sp/>L2&amp;&amp;<sp/>f2)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="958"><highlight class="normal">{</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a0a525af3444a2814c6dbda9e71a965a5" kindref="member">amrex::ignore_unused</ref>(MT);</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1adb038d495d77c299406ea33380d0f548" kindref="member">For</ref>(box1,box2,std::forward&lt;L1&gt;(f1),std::forward&lt;L2&gt;(f2));</highlight></codeline>
<codeline lineno="961"><highlight class="normal">}</highlight></codeline>
<codeline lineno="962"><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L3,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim&gt;</highlight></codeline>
<codeline lineno="964" refid="namespaceamrex_1a3506b815d7bc6b3c3a06bf8a51152bf0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a7272329c4c5b06cda2ee47e4ee3f46e2" kindref="member">HostDeviceFor</ref><sp/>(<ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box3,</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L1&amp;&amp;<sp/>f1,<sp/>L2&amp;&amp;<sp/>f2,<sp/>L3&amp;&amp;<sp/>f3)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal">{</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1adb038d495d77c299406ea33380d0f548" kindref="member">For</ref>(box1,box2,box3,std::forward&lt;L1&gt;(f1),std::forward&lt;L2&gt;(f2),std::forward&lt;L3&gt;(f3));</highlight></codeline>
<codeline lineno="968"><highlight class="normal">}</highlight></codeline>
<codeline lineno="969"><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L3,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim&gt;</highlight></codeline>
<codeline lineno="971" refid="namespaceamrex_1a80d05bc95164f89ff3bef69567dd8bda" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a7272329c4c5b06cda2ee47e4ee3f46e2" kindref="member">HostDeviceFor</ref><sp/>(<ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box3,</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L1&amp;&amp;<sp/>f1,<sp/>L2&amp;&amp;<sp/>f2,<sp/>L3&amp;&amp;<sp/>f3)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal">{</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a0a525af3444a2814c6dbda9e71a965a5" kindref="member">amrex::ignore_unused</ref>(MT);</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1adb038d495d77c299406ea33380d0f548" kindref="member">For</ref>(box1,box2,box3,std::forward&lt;L1&gt;(f1),std::forward&lt;L2&gt;(f2),std::forward&lt;L3&gt;(f3));</highlight></codeline>
<codeline lineno="976"><highlight class="normal">}</highlight></codeline>
<codeline lineno="977"><highlight class="normal"></highlight></codeline>
<codeline lineno="978"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim,</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M1=std::enable_if_t&lt;std::is_integral_v&lt;T1&gt;&gt;,</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M2=std::enable_if_t&lt;std::is_integral_v&lt;T2&gt;&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="981" refid="namespaceamrex_1a64c77616437c6705f7880c08e0032062" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a7272329c4c5b06cda2ee47e4ee3f46e2" kindref="member">HostDeviceFor</ref><sp/>(<ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/>T1<sp/>ncomp1,<sp/>L1&amp;&amp;<sp/>f1,</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/>T2<sp/>ncomp2,<sp/>L2&amp;&amp;<sp/>f2)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="983"><highlight class="normal">{</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1adb038d495d77c299406ea33380d0f548" kindref="member">For</ref>(box1,ncomp1,std::forward&lt;L1&gt;(f1),box2,ncomp2,std::forward&lt;L2&gt;(f2));</highlight></codeline>
<codeline lineno="985"><highlight class="normal">}</highlight></codeline>
<codeline lineno="986"><highlight class="normal"></highlight></codeline>
<codeline lineno="987"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim,</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M1=std::enable_if_t&lt;std::is_integral_v&lt;T1&gt;&gt;,</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M2=std::enable_if_t&lt;std::is_integral_v&lt;T2&gt;&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="990" refid="namespaceamrex_1af6fbad8fd43a238a5e51ef4037c9b3f3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a7272329c4c5b06cda2ee47e4ee3f46e2" kindref="member">HostDeviceFor</ref><sp/>(<ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/>T1<sp/>ncomp1,<sp/>L1&amp;&amp;<sp/>f1,</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/>T2<sp/>ncomp2,<sp/>L2&amp;&amp;<sp/>f2)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="992"><highlight class="normal">{</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a0a525af3444a2814c6dbda9e71a965a5" kindref="member">amrex::ignore_unused</ref>(MT);</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1adb038d495d77c299406ea33380d0f548" kindref="member">For</ref>(box1,ncomp1,std::forward&lt;L1&gt;(f1),box2,ncomp2,std::forward&lt;L2&gt;(f2));</highlight></codeline>
<codeline lineno="995"><highlight class="normal">}</highlight></codeline>
<codeline lineno="996"><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T3,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L3,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim,</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M1=std::enable_if_t&lt;std::is_integral_v&lt;T1&gt;&gt;,</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M2=std::enable_if_t&lt;std::is_integral_v&lt;T2&gt;&gt;,</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M3=std::enable_if_t&lt;std::is_integral_v&lt;T3&gt;&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="1001" refid="namespaceamrex_1a88f467b530e8ca7c172eb7a1edee4642" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a7272329c4c5b06cda2ee47e4ee3f46e2" kindref="member">HostDeviceFor</ref><sp/>(<ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/>T1<sp/>ncomp1,<sp/>L1&amp;&amp;<sp/>f1,</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/>T2<sp/>ncomp2,<sp/>L2&amp;&amp;<sp/>f2,</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box3,<sp/>T3<sp/>ncomp3,<sp/>L3&amp;&amp;<sp/>f3)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1adb038d495d77c299406ea33380d0f548" kindref="member">For</ref>(box1,ncomp1,std::forward&lt;L1&gt;(f1),</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>box2,ncomp2,std::forward&lt;L2&gt;(f2),</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>box3,ncomp3,std::forward&lt;L3&gt;(f3));</highlight></codeline>
<codeline lineno="1008"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"></highlight></codeline>
<codeline lineno="1010"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T3,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L3,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim,</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M1=std::enable_if_t&lt;std::is_integral_v&lt;T1&gt;&gt;,</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M2=std::enable_if_t&lt;std::is_integral_v&lt;T2&gt;&gt;,</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M3=std::enable_if_t&lt;std::is_integral_v&lt;T3&gt;&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="1014" refid="namespaceamrex_1a805938fae1e017c24d596bc5c95406df" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a7272329c4c5b06cda2ee47e4ee3f46e2" kindref="member">HostDeviceFor</ref><sp/>(<ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/>T1<sp/>ncomp1,<sp/>L1&amp;&amp;<sp/>f1,</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/>T2<sp/>ncomp2,<sp/>L2&amp;&amp;<sp/>f2,</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box3,<sp/>T3<sp/>ncomp3,<sp/>L3&amp;&amp;<sp/>f3)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1017"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a0a525af3444a2814c6dbda9e71a965a5" kindref="member">amrex::ignore_unused</ref>(MT);</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1adb038d495d77c299406ea33380d0f548" kindref="member">For</ref>(box1,ncomp1,std::forward&lt;L1&gt;(f1),</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>box2,ncomp2,std::forward&lt;L2&gt;(f2),</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>box3,ncomp3,std::forward&lt;L3&gt;(f3));</highlight></codeline>
<codeline lineno="1022"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"></highlight></codeline>
<codeline lineno="1024"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M=std::enable_if_t&lt;std::is_</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">egral_v&lt;T&gt;&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="1025" refid="namespaceamrex_1aaa43ade38dff5d2e3eea8085d5c2e99e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a8fbd6b37b492537aed607bfd14595409" kindref="member">HostDeviceParallelFor</ref><sp/>(<ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,<sp/>T<sp/>n,<sp/>L&amp;&amp;<sp/>f)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1026"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a1f15630874d45aeb722ca649e6c4c3a9" kindref="member">ParallelFor</ref>(n,std::forward&lt;L&gt;(f));</highlight></codeline>
<codeline lineno="1028"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"></highlight></codeline>
<codeline lineno="1030"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M=std::enable_if_t&lt;std::is_</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">egral_v&lt;T&gt;&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="1031" refid="namespaceamrex_1a0fce6fe39c46eb7d8cfce96b5cd18675" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a8fbd6b37b492537aed607bfd14595409" kindref="member">HostDeviceParallelFor</ref><sp/>(<ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,<sp/>T<sp/>n,<sp/>L&amp;&amp;<sp/>f)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1032"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a0a525af3444a2814c6dbda9e71a965a5" kindref="member">amrex::ignore_unused</ref>(MT);</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a1f15630874d45aeb722ca649e6c4c3a9" kindref="member">ParallelFor</ref>(n,std::forward&lt;L&gt;(f));</highlight></codeline>
<codeline lineno="1035"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"></highlight></codeline>
<codeline lineno="1037"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim&gt;</highlight></codeline>
<codeline lineno="1038" refid="namespaceamrex_1a98cc7310a7b756ded68f0d3b81e2c4c2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a8fbd6b37b492537aed607bfd14595409" kindref="member">HostDeviceParallelFor</ref><sp/>(<ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,<sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box,<sp/>L&amp;&amp;<sp/>f)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a1f15630874d45aeb722ca649e6c4c3a9" kindref="member">ParallelFor</ref>(box,std::forward&lt;L&gt;(f));</highlight></codeline>
<codeline lineno="1041"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"></highlight></codeline>
<codeline lineno="1043"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim&gt;</highlight></codeline>
<codeline lineno="1044" refid="namespaceamrex_1a7a9cfe9817ad71f341d5d3d80e3f0d59" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a8fbd6b37b492537aed607bfd14595409" kindref="member">HostDeviceParallelFor</ref><sp/>(<ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,<sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box,<sp/>L&amp;&amp;<sp/>f)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1045"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a0a525af3444a2814c6dbda9e71a965a5" kindref="member">amrex::ignore_unused</ref>(MT);</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a1f15630874d45aeb722ca649e6c4c3a9" kindref="member">ParallelFor</ref>(box,std::forward&lt;L&gt;(f));</highlight></codeline>
<codeline lineno="1048"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"></highlight></codeline>
<codeline lineno="1050"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M=std::enable_if_t&lt;std::is_</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">egral_v&lt;T&gt;&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="1051" refid="namespaceamrex_1a4ad7270aa3fe2e3247c76b4b70e0eea5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a8fbd6b37b492537aed607bfd14595409" kindref="member">HostDeviceParallelFor</ref><sp/>(<ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,<sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box,<sp/>T<sp/>ncomp,<sp/>L&amp;&amp;<sp/>f)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1052"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a1f15630874d45aeb722ca649e6c4c3a9" kindref="member">ParallelFor</ref>(box,ncomp,std::forward&lt;L&gt;(f));</highlight></codeline>
<codeline lineno="1054"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"></highlight></codeline>
<codeline lineno="1056"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M=std::enable_if_t&lt;std::is_</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">egral_v&lt;T&gt;&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="1057" refid="namespaceamrex_1ae03b20a613037d3fdd4421d95ebbd98e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a8fbd6b37b492537aed607bfd14595409" kindref="member">HostDeviceParallelFor</ref><sp/>(<ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,<sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box,<sp/>T<sp/>ncomp,<sp/>L&amp;&amp;<sp/>f)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1058"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a0a525af3444a2814c6dbda9e71a965a5" kindref="member">amrex::ignore_unused</ref>(MT);</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a1f15630874d45aeb722ca649e6c4c3a9" kindref="member">ParallelFor</ref>(box,ncomp,std::forward&lt;L&gt;(f));</highlight></codeline>
<codeline lineno="1061"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"></highlight></codeline>
<codeline lineno="1063"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim&gt;</highlight></codeline>
<codeline lineno="1064" refid="namespaceamrex_1a75ed59606fb6aabb3e07828d1e4931bb" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a8fbd6b37b492537aed607bfd14595409" kindref="member">HostDeviceParallelFor</ref><sp/>(<ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,<sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/>L1&amp;&amp;<sp/>f1,<sp/>L2&amp;&amp;<sp/>f2)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a1f15630874d45aeb722ca649e6c4c3a9" kindref="member">ParallelFor</ref>(box1,box2,std::forward&lt;L1&gt;(f1),std::forward&lt;L2&gt;(f2));</highlight></codeline>
<codeline lineno="1067"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"></highlight></codeline>
<codeline lineno="1069"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim&gt;</highlight></codeline>
<codeline lineno="1070" refid="namespaceamrex_1a01095cb6a015bfd16cca1c163987890e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a8fbd6b37b492537aed607bfd14595409" kindref="member">HostDeviceParallelFor</ref><sp/>(<ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,<sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/>L1&amp;&amp;<sp/>f1,<sp/>L2&amp;&amp;<sp/>f2)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1071"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a0a525af3444a2814c6dbda9e71a965a5" kindref="member">amrex::ignore_unused</ref>(MT);</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a1f15630874d45aeb722ca649e6c4c3a9" kindref="member">ParallelFor</ref>(box1,box2,std::forward&lt;L1&gt;(f1),std::forward&lt;L2&gt;(f2));</highlight></codeline>
<codeline lineno="1074"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"></highlight></codeline>
<codeline lineno="1076"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L3,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim&gt;</highlight></codeline>
<codeline lineno="1077" refid="namespaceamrex_1a98d800b1df2cb51d14698a774c042149" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a8fbd6b37b492537aed607bfd14595409" kindref="member">HostDeviceParallelFor</ref><sp/>(<ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box3,</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L1&amp;&amp;<sp/>f1,<sp/>L2&amp;&amp;<sp/>f2,<sp/>L3&amp;&amp;<sp/>f3)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1080"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a1f15630874d45aeb722ca649e6c4c3a9" kindref="member">ParallelFor</ref>(box1,box2,box3,std::forward&lt;L1&gt;(f1),std::forward&lt;L2&gt;(f2),std::forward&lt;L3&gt;(f3));</highlight></codeline>
<codeline lineno="1082"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"></highlight></codeline>
<codeline lineno="1084"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L3,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim&gt;</highlight></codeline>
<codeline lineno="1085" refid="namespaceamrex_1a1b58de92252e75ce90ced33d8e4aefba" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a8fbd6b37b492537aed607bfd14595409" kindref="member">HostDeviceParallelFor</ref><sp/>(<ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box3,</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L1&amp;&amp;<sp/>f1,<sp/>L2&amp;&amp;<sp/>f2,<sp/>L3&amp;&amp;<sp/>f3)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1088"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a0a525af3444a2814c6dbda9e71a965a5" kindref="member">amrex::ignore_unused</ref>(MT);</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a1f15630874d45aeb722ca649e6c4c3a9" kindref="member">ParallelFor</ref>(box1,box2,box3,std::forward&lt;L1&gt;(f1),std::forward&lt;L2&gt;(f2),std::forward&lt;L3&gt;(f3));</highlight></codeline>
<codeline lineno="1091"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"></highlight></codeline>
<codeline lineno="1093"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim,</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M1=std::enable_if_t&lt;std::is_integral_v&lt;T1&gt;&gt;,</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M2=std::enable_if_t&lt;std::is_integral_v&lt;T2&gt;&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="1096" refid="namespaceamrex_1a9ab943c1c98941cd33ad27e2f7cf993a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a8fbd6b37b492537aed607bfd14595409" kindref="member">HostDeviceParallelFor</ref><sp/>(<ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/>T1<sp/>ncomp1,<sp/>L1&amp;&amp;<sp/>f1,</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/>T2<sp/>ncomp2,<sp/>L2&amp;&amp;<sp/>f2)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1099"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a1f15630874d45aeb722ca649e6c4c3a9" kindref="member">ParallelFor</ref>(box1,ncomp1,std::forward&lt;L1&gt;(f1),box2,ncomp2,std::forward&lt;L2&gt;(f2));</highlight></codeline>
<codeline lineno="1101"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"></highlight></codeline>
<codeline lineno="1103"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim,</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M1=std::enable_if_t&lt;std::is_integral_v&lt;T1&gt;&gt;,</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M2=std::enable_if_t&lt;std::is_integral_v&lt;T2&gt;&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="1106" refid="namespaceamrex_1a4269ee16d264a32b677830fb53747255" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a8fbd6b37b492537aed607bfd14595409" kindref="member">HostDeviceParallelFor</ref><sp/>(<ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/>T1<sp/>ncomp1,<sp/>L1&amp;&amp;<sp/>f1,</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/>T2<sp/>ncomp2,<sp/>L2&amp;&amp;<sp/>f2)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1109"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a0a525af3444a2814c6dbda9e71a965a5" kindref="member">amrex::ignore_unused</ref>(MT);</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a1f15630874d45aeb722ca649e6c4c3a9" kindref="member">ParallelFor</ref>(box1,ncomp1,std::forward&lt;L1&gt;(f1),box2,ncomp2,std::forward&lt;L2&gt;(f2));</highlight></codeline>
<codeline lineno="1112"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"></highlight></codeline>
<codeline lineno="1114"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T3,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L3,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim,</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M1=std::enable_if_t&lt;std::is_integral_v&lt;T1&gt;&gt;,</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M2=std::enable_if_t&lt;std::is_integral_v&lt;T2&gt;&gt;,</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M3=std::enable_if_t&lt;std::is_integral_v&lt;T3&gt;&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="1118" refid="namespaceamrex_1a4d64ccb2db1999b9ccb64ea88de96d43" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a8fbd6b37b492537aed607bfd14595409" kindref="member">HostDeviceParallelFor</ref><sp/>(<ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/>T1<sp/>ncomp1,<sp/>L1&amp;&amp;<sp/>f1,</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/>T2<sp/>ncomp2,<sp/>L2&amp;&amp;<sp/>f2,</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box3,<sp/>T3<sp/>ncomp3,<sp/>L3&amp;&amp;<sp/>f3)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1122"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a1f15630874d45aeb722ca649e6c4c3a9" kindref="member">ParallelFor</ref>(box1,ncomp1,std::forward&lt;L1&gt;(f1),</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>box2,ncomp2,std::forward&lt;L2&gt;(f2),</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>box3,ncomp3,std::forward&lt;L3&gt;(f3));</highlight></codeline>
<codeline lineno="1126"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"></highlight></codeline>
<codeline lineno="1128"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T3,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L3,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim,</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M1=std::enable_if_t&lt;std::is_integral_v&lt;T1&gt;&gt;,</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M2=std::enable_if_t&lt;std::is_integral_v&lt;T2&gt;&gt;,</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M3=std::enable_if_t&lt;std::is_integral_v&lt;T3&gt;&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="1132" refid="namespaceamrex_1a50e9cb160a110200ce5b3e2a32f8a4bc" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a8fbd6b37b492537aed607bfd14595409" kindref="member">HostDeviceParallelFor</ref><sp/>(<ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/>T1<sp/>ncomp1,<sp/>L1&amp;&amp;<sp/>f1,</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/>T2<sp/>ncomp2,<sp/>L2&amp;&amp;<sp/>f2,</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box3,<sp/>T3<sp/>ncomp3,<sp/>L3&amp;&amp;<sp/>f3)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1136"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a0a525af3444a2814c6dbda9e71a965a5" kindref="member">amrex::ignore_unused</ref>(MT);</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a1f15630874d45aeb722ca649e6c4c3a9" kindref="member">ParallelFor</ref>(box1,ncomp1,std::forward&lt;L1&gt;(f1),</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>box2,ncomp2,std::forward&lt;L2&gt;(f2),</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>box3,ncomp3,std::forward&lt;L3&gt;(f3));</highlight></codeline>
<codeline lineno="1141"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"></highlight></codeline>
<codeline lineno="1143"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M=std::enable_if_t&lt;std::is_</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">egral_v&lt;T&gt;&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="1144" refid="namespaceamrex_1aad398246e65a7d7102beb5169e03a04d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a7272329c4c5b06cda2ee47e4ee3f46e2" kindref="member">HostDeviceFor</ref><sp/>(<ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,<sp/>T<sp/>n,<sp/>L&amp;&amp;<sp/>f)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1145"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1adb038d495d77c299406ea33380d0f548" kindref="member">For</ref>(n,std::forward&lt;L&gt;(f));</highlight></codeline>
<codeline lineno="1147"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"></highlight></codeline>
<codeline lineno="1149"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M=std::enable_if_t&lt;std::is_</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">egral_v&lt;T&gt;&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="1150" refid="namespaceamrex_1a3100c920743097917f3a6a9ab4b90436" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a7272329c4c5b06cda2ee47e4ee3f46e2" kindref="member">HostDeviceFor</ref><sp/>(<ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,<sp/>T<sp/>n,<sp/>L&amp;&amp;<sp/>f)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1151"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a0a525af3444a2814c6dbda9e71a965a5" kindref="member">amrex::ignore_unused</ref>(MT);</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1adb038d495d77c299406ea33380d0f548" kindref="member">For</ref>(n,std::forward&lt;L&gt;(f));</highlight></codeline>
<codeline lineno="1154"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"></highlight></codeline>
<codeline lineno="1156"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim&gt;</highlight></codeline>
<codeline lineno="1157" refid="namespaceamrex_1aa7987e46b80fa56902831dbe79888564" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a7272329c4c5b06cda2ee47e4ee3f46e2" kindref="member">HostDeviceFor</ref><sp/>(<ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,<sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box,<sp/>L&amp;&amp;<sp/>f)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1158"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1adb038d495d77c299406ea33380d0f548" kindref="member">For</ref>(box,std::forward&lt;L&gt;(f));</highlight></codeline>
<codeline lineno="1160"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"></highlight></codeline>
<codeline lineno="1162"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim&gt;</highlight></codeline>
<codeline lineno="1163" refid="namespaceamrex_1a4c3d7656b89863a89eb34a8cf265edd6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a7272329c4c5b06cda2ee47e4ee3f46e2" kindref="member">HostDeviceFor</ref><sp/>(<ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,<sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box,<sp/>L&amp;&amp;<sp/>f)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1164"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a0a525af3444a2814c6dbda9e71a965a5" kindref="member">amrex::ignore_unused</ref>(MT);</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1adb038d495d77c299406ea33380d0f548" kindref="member">For</ref>(box,std::forward&lt;L&gt;(f));</highlight></codeline>
<codeline lineno="1167"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"></highlight></codeline>
<codeline lineno="1169"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M=std::enable_if_t&lt;std::is_</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">egral_v&lt;T&gt;&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="1170" refid="namespaceamrex_1aa542e73ac4ffe59f5a44c65aec316ac6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a7272329c4c5b06cda2ee47e4ee3f46e2" kindref="member">HostDeviceFor</ref><sp/>(<ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,<sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box,<sp/>T<sp/>ncomp,<sp/>L&amp;&amp;<sp/>f)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1171"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1adb038d495d77c299406ea33380d0f548" kindref="member">For</ref>(box,ncomp,std::forward&lt;L&gt;(f));</highlight></codeline>
<codeline lineno="1173"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"></highlight></codeline>
<codeline lineno="1175"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M=std::enable_if_t&lt;std::is_</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">egral_v&lt;T&gt;&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="1176" refid="namespaceamrex_1abd2a3580ff1d0be31736e0ae542495bb" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a7272329c4c5b06cda2ee47e4ee3f46e2" kindref="member">HostDeviceFor</ref><sp/>(<ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,<sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box,<sp/>T<sp/>ncomp,<sp/>L&amp;&amp;<sp/>f)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1177"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a0a525af3444a2814c6dbda9e71a965a5" kindref="member">amrex::ignore_unused</ref>(MT);</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1adb038d495d77c299406ea33380d0f548" kindref="member">For</ref>(box,ncomp,std::forward&lt;L&gt;(f));</highlight></codeline>
<codeline lineno="1180"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"></highlight></codeline>
<codeline lineno="1182"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim&gt;</highlight></codeline>
<codeline lineno="1183" refid="namespaceamrex_1a6b53227a97323409b958730f49ebb17b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a7272329c4c5b06cda2ee47e4ee3f46e2" kindref="member">HostDeviceFor</ref><sp/>(<ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,<sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/>L1&amp;&amp;<sp/>f1,<sp/>L2&amp;&amp;<sp/>f2)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1184"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1adb038d495d77c299406ea33380d0f548" kindref="member">For</ref>(box1,box2,std::forward&lt;L1&gt;(f1),std::forward&lt;L2&gt;(f2));</highlight></codeline>
<codeline lineno="1186"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"></highlight></codeline>
<codeline lineno="1188"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim&gt;</highlight></codeline>
<codeline lineno="1189" refid="namespaceamrex_1a7761bb2e4a79916f5a00f4ac50d86beb" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a7272329c4c5b06cda2ee47e4ee3f46e2" kindref="member">HostDeviceFor</ref><sp/>(<ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,<sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/>L1&amp;&amp;<sp/>f1,<sp/>L2&amp;&amp;<sp/>f2)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1190"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a0a525af3444a2814c6dbda9e71a965a5" kindref="member">amrex::ignore_unused</ref>(MT);</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1adb038d495d77c299406ea33380d0f548" kindref="member">For</ref>(box1,box2,std::forward&lt;L1&gt;(f1),std::forward&lt;L2&gt;(f2));</highlight></codeline>
<codeline lineno="1193"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"></highlight></codeline>
<codeline lineno="1195"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L3,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim&gt;</highlight></codeline>
<codeline lineno="1196" refid="namespaceamrex_1a874d24acab9e84aa6b01a562b658cf9e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a7272329c4c5b06cda2ee47e4ee3f46e2" kindref="member">HostDeviceFor</ref><sp/>(<ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box3,</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L1&amp;&amp;<sp/>f1,<sp/>L2&amp;&amp;<sp/>f2,<sp/>L3&amp;&amp;<sp/>f3)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1199"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1adb038d495d77c299406ea33380d0f548" kindref="member">For</ref>(box1,box2,box3,std::forward&lt;L1&gt;(f1),std::forward&lt;L2&gt;(f2),std::forward&lt;L3&gt;(f3));</highlight></codeline>
<codeline lineno="1201"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"></highlight></codeline>
<codeline lineno="1203"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L3,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim&gt;</highlight></codeline>
<codeline lineno="1204" refid="namespaceamrex_1aca863bd6a848c4968b89d3e011986744" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a7272329c4c5b06cda2ee47e4ee3f46e2" kindref="member">HostDeviceFor</ref><sp/>(<ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box3,</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L1&amp;&amp;<sp/>f1,<sp/>L2&amp;&amp;<sp/>f2,<sp/>L3&amp;&amp;<sp/>f3)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1207"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a0a525af3444a2814c6dbda9e71a965a5" kindref="member">amrex::ignore_unused</ref>(MT);</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1adb038d495d77c299406ea33380d0f548" kindref="member">For</ref>(box1,box2,box3,std::forward&lt;L1&gt;(f1),std::forward&lt;L2&gt;(f2),std::forward&lt;L3&gt;(f3));</highlight></codeline>
<codeline lineno="1210"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"></highlight></codeline>
<codeline lineno="1212"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim,</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M1=std::enable_if_t&lt;std::is_integral_v&lt;T1&gt;&gt;,</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M2=std::enable_if_t&lt;std::is_integral_v&lt;T2&gt;&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="1215" refid="namespaceamrex_1af335937a7c7f6e30fb69365120d56062" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a7272329c4c5b06cda2ee47e4ee3f46e2" kindref="member">HostDeviceFor</ref><sp/>(<ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/>T1<sp/>ncomp1,<sp/>L1&amp;&amp;<sp/>f1,</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/>T2<sp/>ncomp2,<sp/>L2&amp;&amp;<sp/>f2)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1218"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1adb038d495d77c299406ea33380d0f548" kindref="member">For</ref>(box1,ncomp1,std::forward&lt;L1&gt;(f1),box2,ncomp2,std::forward&lt;L2&gt;(f2));</highlight></codeline>
<codeline lineno="1220"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"></highlight></codeline>
<codeline lineno="1222"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim,</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M1=std::enable_if_t&lt;std::is_integral_v&lt;T1&gt;&gt;,</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M2=std::enable_if_t&lt;std::is_integral_v&lt;T2&gt;&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="1225" refid="namespaceamrex_1aa712034e4c1839d2f237b545bffed04f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a7272329c4c5b06cda2ee47e4ee3f46e2" kindref="member">HostDeviceFor</ref><sp/>(<ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/>T1<sp/>ncomp1,<sp/>L1&amp;&amp;<sp/>f1,</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/>T2<sp/>ncomp2,<sp/>L2&amp;&amp;<sp/>f2)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1228"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a0a525af3444a2814c6dbda9e71a965a5" kindref="member">amrex::ignore_unused</ref>(MT);</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1adb038d495d77c299406ea33380d0f548" kindref="member">For</ref>(box1,ncomp1,std::forward&lt;L1&gt;(f1),box2,ncomp2,std::forward&lt;L2&gt;(f2));</highlight></codeline>
<codeline lineno="1231"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"></highlight></codeline>
<codeline lineno="1233"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T3,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L3,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim,</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M1=std::enable_if_t&lt;std::is_integral_v&lt;T1&gt;&gt;,</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M2=std::enable_if_t&lt;std::is_integral_v&lt;T2&gt;&gt;,</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M3=std::enable_if_t&lt;std::is_integral_v&lt;T3&gt;&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="1237" refid="namespaceamrex_1a9c27a235f3c50e77f60a837f9bffb7a7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a7272329c4c5b06cda2ee47e4ee3f46e2" kindref="member">HostDeviceFor</ref><sp/>(<ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/>T1<sp/>ncomp1,<sp/>L1&amp;&amp;<sp/>f1,</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/>T2<sp/>ncomp2,<sp/>L2&amp;&amp;<sp/>f2,</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box3,<sp/>T3<sp/>ncomp3,<sp/>L3&amp;&amp;<sp/>f3)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1241"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1adb038d495d77c299406ea33380d0f548" kindref="member">For</ref>(box1,ncomp1,std::forward&lt;L1&gt;(f1),</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>box2,ncomp2,std::forward&lt;L2&gt;(f2),</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>box3,ncomp3,std::forward&lt;L3&gt;(f3));</highlight></codeline>
<codeline lineno="1245"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"></highlight></codeline>
<codeline lineno="1247"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T3,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L3,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim,</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M1=std::enable_if_t&lt;std::is_integral_v&lt;T1&gt;&gt;,</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M2=std::enable_if_t&lt;std::is_integral_v&lt;T2&gt;&gt;,</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M3=std::enable_if_t&lt;std::is_integral_v&lt;T3&gt;&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="1251" refid="namespaceamrex_1aaa27170808a043a0bdb895b594df8fef" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a7272329c4c5b06cda2ee47e4ee3f46e2" kindref="member">HostDeviceFor</ref><sp/>(<ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box1,<sp/>T1<sp/>ncomp1,<sp/>L1&amp;&amp;<sp/>f1,</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box2,<sp/>T2<sp/>ncomp2,<sp/>L2&amp;&amp;<sp/>f2,</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box3,<sp/>T3<sp/>ncomp3,<sp/>L3&amp;&amp;<sp/>f3)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1255"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a0a525af3444a2814c6dbda9e71a965a5" kindref="member">amrex::ignore_unused</ref>(MT);</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1adb038d495d77c299406ea33380d0f548" kindref="member">For</ref>(box1,ncomp1,std::forward&lt;L1&gt;(f1),</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>box2,ncomp2,std::forward&lt;L2&gt;(f2),</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>box3,ncomp3,std::forward&lt;L3&gt;(f3));</highlight></codeline>
<codeline lineno="1260"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"></highlight></codeline>
<codeline lineno="1262"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M=std::enable_if_t&lt;std::is_</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">egral_v&lt;T&gt;&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><ref refid="AMReX__Extension_8H_1a959c30675fdc4974adca486be8de3c6e" kindref="member">AMREX_ATTRIBUTE_FLATTEN_FOR</ref></highlight></codeline>
<codeline lineno="1264" refid="namespaceamrex_1ae3514c3f8c4b2a78c2ddc9b49d8cca6c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1ae3514c3f8c4b2a78c2ddc9b49d8cca6c" kindref="member">ParallelForRNG</ref><sp/>(T<sp/>n,<sp/>L<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>f)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1265"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(T<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f(i,<ref refid="structamrex_1_1RandomEngine" kindref="compound">RandomEngine</ref>{});</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1269"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"></highlight></codeline>
<codeline lineno="1271"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacedetail" kindref="compound">detail</ref><sp/>{</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"></highlight></codeline>
<codeline lineno="1273"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">im,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim&gt;</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref></highlight></codeline>
<codeline lineno="1275" refid="namespaceamrex_1_1detail_1aa9178db9a47be24aee36f3c72d0ed274" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1detail_1aa9178db9a47be24aee36f3c72d0ed274" kindref="member">ParallelForRNG_impND</ref><sp/>(L<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>f,<sp/><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>lo,<sp/><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>hi,<sp/><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND&lt;dim&gt;</ref><sp/>iv)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1276"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(idim<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i0<sp/>=<sp/>lo[0],<sp/>h0<sp/>=<sp/>hi[0];<sp/>i0<sp/>&lt;=<sp/>h0;<sp/>++i0)<sp/>{<sp/>iv[0]<sp/>=<sp/>i0;</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1detail_1abf33e4589ea5adab841f76cf4ba8fec2" kindref="member">call_f_intvect_engine</ref>(f,iv,<ref refid="structamrex_1_1RandomEngine" kindref="compound">RandomEngine</ref>{});</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(idim<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i1<sp/>=<sp/>lo[1],<sp/>h1<sp/>=<sp/>hi[1];<sp/>i1<sp/>&lt;=<sp/>h1;<sp/>++i1)<sp/>{<sp/>iv[1]<sp/>=<sp/>i1;</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i0<sp/>=<sp/>lo[0],<sp/>h0<sp/>=<sp/>hi[0];<sp/>i0<sp/>&lt;=<sp/>h0;<sp/>++i0)<sp/>{<sp/>iv[0]<sp/>=<sp/>i0;</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1detail_1abf33e4589ea5adab841f76cf4ba8fec2" kindref="member">call_f_intvect_engine</ref>(f,iv,<ref refid="structamrex_1_1RandomEngine" kindref="compound">RandomEngine</ref>{});</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}}</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(idim<sp/>==<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i2<sp/>=<sp/>lo[2],<sp/>h2<sp/>=<sp/>hi[2];<sp/>i2<sp/>&lt;=<sp/>h2;<sp/>++i2)<sp/>{<sp/>iv[2]<sp/>=<sp/>i2;</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i1<sp/>=<sp/>lo[1],<sp/>h1<sp/>=<sp/>hi[1];<sp/>i1<sp/>&lt;=<sp/>h1;<sp/>++i1)<sp/>{<sp/>iv[1]<sp/>=<sp/>i1;</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i0<sp/>=<sp/>lo[0],<sp/>h0<sp/>=<sp/>hi[0];<sp/>i0<sp/>&lt;=<sp/>h0;<sp/>++i0)<sp/>{<sp/>iv[0]<sp/>=<sp/>i0;</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1detail_1abf33e4589ea5adab841f76cf4ba8fec2" kindref="member">call_f_intvect_engine</ref>(f,iv,<ref refid="structamrex_1_1RandomEngine" kindref="compound">RandomEngine</ref>{});</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}}}</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>lo[idim-1],<sp/>hd<sp/>=<sp/>hi[idim-1];<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>&lt;=<sp/>hd;<sp/>++id)<sp/>{<sp/>iv[idim-1]<sp/>=<sp/>id;</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1detail_1aa9178db9a47be24aee36f3c72d0ed274" kindref="member">ParallelForRNG_impND</ref>&lt;idim-1&gt;(f,<sp/>lo,<sp/>hi,<sp/>iv);</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1297"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"></highlight></codeline>
<codeline lineno="1299"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">im,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim&gt;</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref></highlight></codeline>
<codeline lineno="1301" refid="namespaceamrex_1_1detail_1a80bc7ba0eaf66754172d9d1d172eeacc" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1detail_1aa9178db9a47be24aee36f3c72d0ed274" kindref="member">ParallelForRNG_impND</ref><sp/>(L<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>f,<sp/><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>lo,<sp/><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>hi,<sp/><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND&lt;dim&gt;</ref><sp/>iv,<sp/>T<sp/>n)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1302"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(idim<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i0<sp/>=<sp/>lo[0],<sp/>h0<sp/>=<sp/>hi[0];<sp/>i0<sp/>&lt;=<sp/>h0;<sp/>++i0)<sp/>{<sp/>iv[0]<sp/>=<sp/>i0;</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1detail_1acdccebd8d9e6a4c1db19363438a5cba2" kindref="member">call_f_intvect_ncomp_engine</ref>(f,iv,n,<ref refid="structamrex_1_1RandomEngine" kindref="compound">RandomEngine</ref>{});</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(idim<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i1<sp/>=<sp/>lo[1],<sp/>h1<sp/>=<sp/>hi[1];<sp/>i1<sp/>&lt;=<sp/>h1;<sp/>++i1)<sp/>{<sp/>iv[1]<sp/>=<sp/>i1;</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i0<sp/>=<sp/>lo[0],<sp/>h0<sp/>=<sp/>hi[0];<sp/>i0<sp/>&lt;=<sp/>h0;<sp/>++i0)<sp/>{<sp/>iv[0]<sp/>=<sp/>i0;</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1detail_1acdccebd8d9e6a4c1db19363438a5cba2" kindref="member">call_f_intvect_ncomp_engine</ref>(f,iv,n,<ref refid="structamrex_1_1RandomEngine" kindref="compound">RandomEngine</ref>{});</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}}</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(idim<sp/>==<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i2<sp/>=<sp/>lo[2],<sp/>h2<sp/>=<sp/>hi[2];<sp/>i2<sp/>&lt;=<sp/>h2;<sp/>++i2)<sp/>{<sp/>iv[2]<sp/>=<sp/>i2;</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i1<sp/>=<sp/>lo[1],<sp/>h1<sp/>=<sp/>hi[1];<sp/>i1<sp/>&lt;=<sp/>h1;<sp/>++i1)<sp/>{<sp/>iv[1]<sp/>=<sp/>i1;</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i0<sp/>=<sp/>lo[0],<sp/>h0<sp/>=<sp/>hi[0];<sp/>i0<sp/>&lt;=<sp/>h0;<sp/>++i0)<sp/>{<sp/>iv[0]<sp/>=<sp/>i0;</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1detail_1acdccebd8d9e6a4c1db19363438a5cba2" kindref="member">call_f_intvect_ncomp_engine</ref>(f,iv,n,<ref refid="structamrex_1_1RandomEngine" kindref="compound">RandomEngine</ref>{});</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}}}</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>lo[idim-1],<sp/>hd<sp/>=<sp/>hi[idim-1];<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>&lt;=<sp/>hd;<sp/>++id)<sp/>{<sp/>iv[idim-1]<sp/>=<sp/>id;</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1detail_1aa9178db9a47be24aee36f3c72d0ed274" kindref="member">ParallelForRNG_impND</ref>&lt;idim-1&gt;(f,<sp/>lo,<sp/>hi,<sp/>iv,<sp/>n);</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1323"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"></highlight></codeline>
<codeline lineno="1325"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"></highlight></codeline>
<codeline lineno="1327"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim&gt;</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><ref refid="AMReX__Extension_8H_1a959c30675fdc4974adca486be8de3c6e" kindref="member">AMREX_ATTRIBUTE_FLATTEN_FOR</ref></highlight></codeline>
<codeline lineno="1329" refid="namespaceamrex_1a63990001fd080e6f727c689437f5668e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1ae3514c3f8c4b2a78c2ddc9b49d8cca6c" kindref="member">ParallelForRNG</ref><sp/>(<ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box,<sp/>L<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>f)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1330"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lo<sp/>=<sp/><ref refid="namespaceamrex_1a40424ba2cf6e3c4e7f26ee81e83cc2cb" kindref="member">amrex::lbound_iv</ref>(box);</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>hi<sp/>=<sp/><ref refid="namespaceamrex_1aa0b5ecef36390cfee654d209a6023589" kindref="member">amrex::ubound_iv</ref>(box);</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND&lt;dim&gt;</ref><sp/>iv;</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/>detail::ParallelForRNG_impND&lt;dim&gt;(f,<sp/>lo,<sp/>hi,<sp/>iv);</highlight></codeline>
<codeline lineno="1335"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"></highlight></codeline>
<codeline lineno="1337"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M=std::enable_if_t&lt;std::is_</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">egral_v&lt;T&gt;&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><ref refid="AMReX__Extension_8H_1a959c30675fdc4974adca486be8de3c6e" kindref="member">AMREX_ATTRIBUTE_FLATTEN_FOR</ref></highlight></codeline>
<codeline lineno="1339" refid="namespaceamrex_1a521bdccaadc0600f798cb1ffbb083e86" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1ae3514c3f8c4b2a78c2ddc9b49d8cca6c" kindref="member">ParallelForRNG</ref><sp/>(<ref refid="classamrex_1_1BoxND" kindref="compound">BoxND&lt;dim&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>box,<sp/>T<sp/>ncomp,<sp/>L<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>f)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1340"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lo<sp/>=<sp/><ref refid="namespaceamrex_1a40424ba2cf6e3c4e7f26ee81e83cc2cb" kindref="member">amrex::lbound_iv</ref>(box);</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>hi<sp/>=<sp/><ref refid="namespaceamrex_1aa0b5ecef36390cfee654d209a6023589" kindref="member">amrex::ubound_iv</ref>(box);</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND&lt;dim&gt;</ref><sp/>iv;</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(T<sp/>n<sp/>=<sp/>0;<sp/>n<sp/>&lt;<sp/>ncomp;<sp/>++n)<sp/>{</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::ParallelForRNG_impND&lt;dim&gt;(f,<sp/>lo,<sp/>hi,<sp/>iv,<sp/>n);</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1347"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"></highlight></codeline>
<codeline lineno="1349"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L&gt;</highlight></codeline>
<codeline lineno="1350" refid="namespaceamrex_1aa785b3b07c24c864604e8de72a0bb919" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1aa785b3b07c24c864604e8de72a0bb919" kindref="member">single_task</ref><sp/>(L&amp;&amp;<sp/>f)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1351"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/>std::forward&lt;L&gt;(f)();</highlight></codeline>
<codeline lineno="1353"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"></highlight></codeline>
<codeline lineno="1355"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"></highlight></codeline>
<codeline lineno="1357"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H"/>
  </compounddef>
</doxygen>
