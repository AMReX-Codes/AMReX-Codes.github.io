<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classamrex_1_1EB2_1_1PolyIF" kind="class" language="C++" prot="public">
    <compoundname>amrex::EB2::PolyIF</compoundname>
    <basecompoundref refid="structamrex_1_1GPUable" prot="public" virt="non-virtual">amrex::GPUable</basecompoundref>
    <includes refid="AMReX__EB2__IF__Polynomial_8H" local="no">AMReX_EB2_IF_Polynomial.H</includes>
    <templateparamlist>
      <param>
        <type>unsigned <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <declname>N</declname>
        <defname>N</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classamrex_1_1EB2_1_1PolyIF_1aa2c56927d92aab11d6102c29c9040f30" prot="protected" static="no" mutable="no">
        <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; <ref refid="classamrex_1_1EB2_1_1PolyTerm" kindref="compound">PolyTerm</ref>, N &gt;</type>
        <definition>GpuArray&lt;PolyTerm,N&gt; amrex::EB2::PolyIF&lt; N &gt;::m_polynomial</definition>
        <argsstring></argsstring>
        <name>m_polynomial</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Polynomial.H" line="66" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Polynomial.H" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1EB2_1_1PolyIF_1a6de7c0bbb4b6f360ad71bb75da9ccf4b" prot="protected" static="no" mutable="no">
        <type>Real</type>
        <definition>Real amrex::EB2::PolyIF&lt; N &gt;::m_sign</definition>
        <argsstring></argsstring>
        <name>m_sign</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Polynomial.H" line="67" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Polynomial.H" bodystart="67" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1EB2_1_1PolyIF_1ae25262d67072428f2cad3d6efb2f5877" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::EB2::PolyIF&lt; N &gt;::PolyIF</definition>
        <argsstring>(const GpuArray&lt; PolyTerm, N &gt; &amp;a_polynomial, bool a_inside=true)</argsstring>
        <name>PolyIF</name>
        <param>
          <type>const <ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; <ref refid="classamrex_1_1EB2_1_1PolyTerm" kindref="compound">PolyTerm</ref>, N &gt; &amp;</type>
          <declname>a_polynomial</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>a_inside</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>inside: is the fluid inside the ellipsoid? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Polynomial.H" line="39" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Polynomial.H" bodystart="39" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EB2_1_1PolyIF_1aa6101e99f628dfb33b9304d7288417d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::EB2::PolyIF&lt; N &gt;::PolyIF</definition>
        <argsstring>(const PolyIF &amp;rhs)=default</argsstring>
        <name>PolyIF</name>
        <param>
          <type>const <ref refid="classamrex_1_1EB2_1_1PolyIF" kindref="compound">PolyIF</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Polynomial.H" line="44" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EB2_1_1PolyIF_1a2828a134a5c9d18b76762eb68aa86931" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::EB2::PolyIF&lt; N &gt;::PolyIF</definition>
        <argsstring>(PolyIF &amp;&amp;rhs)=default</argsstring>
        <name>PolyIF</name>
        <param>
          <type><ref refid="classamrex_1_1EB2_1_1PolyIF" kindref="compound">PolyIF</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Polynomial.H" line="45" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EB2_1_1PolyIF_1a9e5c1b58abc7fa448004a79861cf2532" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1EB2_1_1PolyIF" kindref="compound">PolyIF</ref> &amp;</type>
        <definition>PolyIF&amp; amrex::EB2::PolyIF&lt; N &gt;::operator=</definition>
        <argsstring>(const PolyIF &amp;rhs)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classamrex_1_1EB2_1_1PolyIF" kindref="compound">PolyIF</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Polynomial.H" line="46" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EB2_1_1PolyIF_1a0eedefdf7c1b9ee826f08c0b86d11577" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1EB2_1_1PolyIF" kindref="compound">PolyIF</ref> &amp;</type>
        <definition>PolyIF&amp; amrex::EB2::PolyIF&lt; N &gt;::operator=</definition>
        <argsstring>(PolyIF &amp;&amp;rhs)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1EB2_1_1PolyIF" kindref="compound">PolyIF</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Polynomial.H" line="47" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EB2_1_1PolyIF_1aaa660becce2b6d314003918489a6c426" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> Real</type>
        <definition>AMREX_GPU_HOST_DEVICE Real amrex::EB2::PolyIF&lt; N &gt;::operator()</definition>
        <argsstring>(AMREX_D_DECL(Real x, Real y, Real z)) const noexcept</argsstring>
        <name>operator()</name>
        <param>
          <type>AMREX_D_DECL(Real x, Real y, Real z)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Polynomial.H" line="50" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Polynomial.H" bodystart="50" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EB2_1_1PolyIF_1a5c6c6284278cec6a7031daf8a067c13b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::EB2::PolyIF&lt; N &gt;::operator()</definition>
        <argsstring>(const RealArray &amp;p) const noexcept</argsstring>
        <name>operator()</name>
        <param>
          <type>const <ref refid="namespaceamrex_1a9de48c04056551924746c42f9eda3c8f" kindref="member">RealArray</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Polynomial.H" line="61" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Polynomial.H" bodystart="61" bodyend="63"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="4334">
        <label>amrex::GPUable</label>
        <link refid="structamrex_1_1GPUable"/>
      </node>
      <node id="4333">
        <label>amrex::EB2::PolyIF&lt; N &gt;</label>
        <link refid="classamrex_1_1EB2_1_1PolyIF"/>
        <childnode refid="4334" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4339">
        <label>amrex::IntVect</label>
        <link refid="classamrex_1_1IntVect"/>
        <childnode refid="4339" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
      </node>
      <node id="4340">
        <label>Real</label>
      </node>
      <node id="4337">
        <label>amrex::GpuArray&lt; amrex::EB2::PolyTerm, N &gt;</label>
        <link refid="structamrex_1_1GpuArray"/>
        <childnode refid="4338" relation="usage">
          <edgelabel>arr</edgelabel>
        </childnode>
      </node>
      <node id="4338">
        <label>amrex::EB2::PolyTerm</label>
        <link refid="classamrex_1_1EB2_1_1PolyTerm"/>
        <childnode refid="4339" relation="usage">
          <edgelabel>powers</edgelabel>
        </childnode>
        <childnode refid="4340" relation="usage">
          <edgelabel>coef</edgelabel>
        </childnode>
      </node>
      <node id="4336">
        <label>amrex::GPUable</label>
        <link refid="structamrex_1_1GPUable"/>
      </node>
      <node id="4335">
        <label>amrex::EB2::PolyIF&lt; N &gt;</label>
        <link refid="classamrex_1_1EB2_1_1PolyIF"/>
        <childnode refid="4336" relation="public-inheritance">
        </childnode>
        <childnode refid="4337" relation="usage">
          <edgelabel>m_polynomial</edgelabel>
        </childnode>
        <childnode refid="4340" relation="usage">
          <edgelabel>m_sign</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Polynomial.H" line="35" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Polynomial.H" bodystart="33" bodyend="68"/>
    <listofallmembers>
      <member refid="classamrex_1_1EB2_1_1PolyIF_1aa2c56927d92aab11d6102c29c9040f30" prot="protected" virt="non-virtual"><scope>amrex::EB2::PolyIF</scope><name>m_polynomial</name></member>
      <member refid="classamrex_1_1EB2_1_1PolyIF_1a6de7c0bbb4b6f360ad71bb75da9ccf4b" prot="protected" virt="non-virtual"><scope>amrex::EB2::PolyIF</scope><name>m_sign</name></member>
      <member refid="classamrex_1_1EB2_1_1PolyIF_1aaa660becce2b6d314003918489a6c426" prot="public" virt="non-virtual"><scope>amrex::EB2::PolyIF</scope><name>operator()</name></member>
      <member refid="classamrex_1_1EB2_1_1PolyIF_1a5c6c6284278cec6a7031daf8a067c13b" prot="public" virt="non-virtual"><scope>amrex::EB2::PolyIF</scope><name>operator()</name></member>
      <member refid="classamrex_1_1EB2_1_1PolyIF_1a9e5c1b58abc7fa448004a79861cf2532" prot="public" virt="non-virtual"><scope>amrex::EB2::PolyIF</scope><name>operator=</name></member>
      <member refid="classamrex_1_1EB2_1_1PolyIF_1a0eedefdf7c1b9ee826f08c0b86d11577" prot="public" virt="non-virtual"><scope>amrex::EB2::PolyIF</scope><name>operator=</name></member>
      <member refid="classamrex_1_1EB2_1_1PolyIF_1ae25262d67072428f2cad3d6efb2f5877" prot="public" virt="non-virtual"><scope>amrex::EB2::PolyIF</scope><name>PolyIF</name></member>
      <member refid="classamrex_1_1EB2_1_1PolyIF_1aa6101e99f628dfb33b9304d7288417d2" prot="public" virt="non-virtual"><scope>amrex::EB2::PolyIF</scope><name>PolyIF</name></member>
      <member refid="classamrex_1_1EB2_1_1PolyIF_1a2828a134a5c9d18b76762eb68aa86931" prot="public" virt="non-virtual"><scope>amrex::EB2::PolyIF</scope><name>PolyIF</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
