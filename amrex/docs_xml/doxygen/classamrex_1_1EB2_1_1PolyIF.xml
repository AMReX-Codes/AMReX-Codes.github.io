<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classamrex_1_1EB2_1_1PolyIF" kind="class" language="C++" prot="public">
    <compoundname>amrex::EB2::PolyIF</compoundname>
    <basecompoundref refid="structamrex_1_1GPUable" prot="public" virt="non-virtual">amrex::GPUable</basecompoundref>
    <includes refid="AMReX__EB2__IF__Polynomial_8H" local="no">AMReX_EB2_IF_Polynomial.H</includes>
    <templateparamlist>
      <param>
        <type>unsigned int</type>
        <declname>N</declname>
        <defname>N</defname>
      </param>
    </templateparamlist>
    <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classamrex_1_1EB2_1_1PolyIF_1aa2c56927d92aab11d6102c29c9040f30" prot="protected" static="no" mutable="no">
        <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; <ref refid="classamrex_1_1EB2_1_1PolyTerm" kindref="compound">PolyTerm</ref>, N &gt;</type>
        <definition>GpuArray&lt;PolyTerm,N&gt; amrex::EB2::PolyIF&lt; N &gt;::m_polynomial</definition>
        <argsstring></argsstring>
        <name>m_polynomial</name>
        <qualifiedname>amrex::EB2::PolyIF::m_polynomial</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Polynomial.H" line="61" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Polynomial.H" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1EB2_1_1PolyIF_1a6de7c0bbb4b6f360ad71bb75da9ccf4b" prot="protected" static="no" mutable="no">
        <type>Real</type>
        <definition>Real amrex::EB2::PolyIF&lt; N &gt;::m_sign</definition>
        <argsstring></argsstring>
        <name>m_sign</name>
        <qualifiedname>amrex::EB2::PolyIF::m_sign</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Polynomial.H" line="62" column="26" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Polynomial.H" bodystart="62" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1EB2_1_1PolyIF_1ae25262d67072428f2cad3d6efb2f5877" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::EB2::PolyIF&lt; N &gt;::PolyIF</definition>
        <argsstring>(const GpuArray&lt; PolyTerm, N &gt; &amp;a_polynomial, bool a_inside=true)</argsstring>
        <name>PolyIF</name>
        <qualifiedname>amrex::EB2::PolyIF::PolyIF</qualifiedname>
        <param>
          <type>const <ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; <ref refid="classamrex_1_1EB2_1_1PolyTerm" kindref="compound">PolyTerm</ref>, N &gt; &amp;</type>
          <declname>a_polynomial</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>a_inside</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>inside: is the fluid inside the ellipsoid? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Polynomial.H" line="39" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Polynomial.H" bodystart="39" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EB2_1_1PolyIF_1ae2e394ad002616118d8c46139842042f" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ Real</type>
        <definition>__host__ __device__ Real amrex::EB2::PolyIF&lt; N &gt;::operator()</definition>
        <argsstring>(Real x, Real y, Real z) const noexcept</argsstring>
        <name>operator()</name>
        <qualifiedname>amrex::EB2::PolyIF::operator()</qualifiedname>
        <param>
          <type>Real</type>
          <declname>x</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>y</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Polynomial.H" line="45" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Polynomial.H" bodystart="45" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EB2_1_1PolyIF_1a5c6c6284278cec6a7031daf8a067c13b" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::EB2::PolyIF&lt; N &gt;::operator()</definition>
        <argsstring>(const RealArray &amp;p) const noexcept</argsstring>
        <name>operator()</name>
        <qualifiedname>amrex::EB2::PolyIF::operator()</qualifiedname>
        <param>
          <type>const <ref refid="namespaceamrex_1aeb06fab72f85728954130adbe25c5397" kindref="member">RealArray</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Polynomial.H" line="56" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Polynomial.H" bodystart="56" bodyend="58"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>amrex::EB2::PolyIF&lt; N &gt;</label>
        <link refid="classamrex_1_1EB2_1_1PolyIF"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>amrex::GPUable</label>
        <link refid="structamrex_1_1GPUable"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>amrex::GpuArray&lt; amrex::EB2::PolyTerm, N &gt;</label>
        <link refid="structamrex_1_1GpuArray"/>
        <childnode refid="4" relation="usage">
          <edgelabel>arr</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>amrex::IntVectND&lt; 3 &gt;</label>
        <link refid="classamrex_1_1IntVectND"/>
      </node>
      <node id="1">
        <label>amrex::EB2::PolyIF&lt; N &gt;</label>
        <link refid="classamrex_1_1EB2_1_1PolyIF"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>m_polynomial</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>amrex::EB2::PolyTerm</label>
        <link refid="classamrex_1_1EB2_1_1PolyTerm"/>
        <childnode refid="5" relation="usage">
          <edgelabel>powers</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>amrex::GPUable</label>
        <link refid="structamrex_1_1GPUable"/>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Polynomial.H" line="33" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Polynomial.H" bodystart="35" bodyend="63"/>
    <listofallmembers>
      <member refid="classamrex_1_1EB2_1_1PolyIF_1aa2c56927d92aab11d6102c29c9040f30" prot="protected" virt="non-virtual"><scope>amrex::EB2::PolyIF</scope><name>m_polynomial</name></member>
      <member refid="classamrex_1_1EB2_1_1PolyIF_1a6de7c0bbb4b6f360ad71bb75da9ccf4b" prot="protected" virt="non-virtual"><scope>amrex::EB2::PolyIF</scope><name>m_sign</name></member>
      <member refid="classamrex_1_1EB2_1_1PolyIF_1ae2e394ad002616118d8c46139842042f" prot="public" virt="non-virtual"><scope>amrex::EB2::PolyIF</scope><name>operator()</name></member>
      <member refid="classamrex_1_1EB2_1_1PolyIF_1a5c6c6284278cec6a7031daf8a067c13b" prot="public" virt="non-virtual"><scope>amrex::EB2::PolyIF</scope><name>operator()</name></member>
      <member refid="classamrex_1_1EB2_1_1PolyIF_1ae25262d67072428f2cad3d6efb2f5877" prot="public" virt="non-virtual"><scope>amrex::EB2::PolyIF</scope><name>PolyIF</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
