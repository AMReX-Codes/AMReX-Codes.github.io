<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classamrex_1_1STLtools" kind="class" language="C++" prot="public">
    <compoundname>amrex::STLtools</compoundname>
    <includes refid="AMReX__EB__STL__utils_8H" local="no">AMReX_EB_STL_utils.H</includes>
    <innerclass refid="structamrex_1_1STLtools_1_1BVHNodeT" prot="public">amrex::STLtools::BVHNodeT</innerclass>
    <innerclass refid="structamrex_1_1STLtools_1_1Triangle" prot="public">amrex::STLtools::Triangle</innerclass>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classamrex_1_1STLtools_1a5e4b2f7bb8d632ea0128bcddfddb6dc0" prot="public" static="no">
        <type><ref refid="structamrex_1_1STLtools_1_1BVHNodeT" kindref="compound">BVHNodeT</ref>&lt; <ref refid="classamrex_1_1STLtools_1a2e7418a1e57f61cf7154c966f5ced655" kindref="member">m_bvh_max_size</ref>, <ref refid="classamrex_1_1STLtools_1a401996bf07e630652925eb7478369d04" kindref="member">m_bvh_max_splits</ref> &gt;</type>
        <definition>using amrex::STLtools::Node =  BVHNodeT&lt;m_bvh_max_size,m_bvh_max_splits&gt;</definition>
        <argsstring></argsstring>
        <name>Node</name>
        <qualifiedname>amrex::STLtools::Node</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.H" line="57" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.H" bodystart="57" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classamrex_1_1STLtools_1a2e7418a1e57f61cf7154c966f5ced655" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>constexpr int amrex::STLtools::m_bvh_max_size</definition>
        <argsstring></argsstring>
        <name>m_bvh_max_size</name>
        <qualifiedname>amrex::STLtools::m_bvh_max_size</qualifiedname>
        <initializer>= 4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.H" line="53" column="26" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.H" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1STLtools_1a401996bf07e630652925eb7478369d04" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>constexpr int amrex::STLtools::m_bvh_max_splits</definition>
        <argsstring></argsstring>
        <name>m_bvh_max_splits</name>
        <qualifiedname>amrex::STLtools::m_bvh_max_splits</qualifiedname>
        <initializer>= 4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.H" line="54" column="26" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.H" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1STLtools_1a07f80cd69640a2e642f686cc4ac99b46" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>constexpr int amrex::STLtools::m_bvh_max_stack_size</definition>
        <argsstring></argsstring>
        <name>m_bvh_max_stack_size</name>
        <qualifiedname>amrex::STLtools::m_bvh_max_stack_size</qualifiedname>
        <initializer>= 12</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.H" line="55" column="26" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.H" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1STLtools_1a071a8fb28babb5af263c2aa74a0d979b" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>constexpr int amrex::STLtools::allregular</definition>
        <argsstring></argsstring>
        <name>allregular</name>
        <qualifiedname>amrex::STLtools::allregular</qualifiedname>
        <initializer>= -1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.H" line="59" column="26" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.H" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1STLtools_1ad0e62c6693f9f0100b33547ddef29fa2" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>constexpr int amrex::STLtools::mixedcells</definition>
        <argsstring></argsstring>
        <name>mixedcells</name>
        <qualifiedname>amrex::STLtools::mixedcells</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.H" line="60" column="26" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.H" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1STLtools_1ad56ce2bf01da43520e270f2ae570f29a" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>constexpr int amrex::STLtools::allcovered</definition>
        <argsstring></argsstring>
        <name>allcovered</name>
        <qualifiedname>amrex::STLtools::allcovered</qualifiedname>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.H" line="61" column="26" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.H" bodystart="61" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1STLtools_1a7fc4e4a3a6c2b96639d17a9d97f7483e" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::STLtools::m_bvh_optimization</definition>
        <argsstring></argsstring>
        <name>m_bvh_optimization</name>
        <qualifiedname>amrex::STLtools::m_bvh_optimization</qualifiedname>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.H" line="91" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.H" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1STLtools_1afe0f0661535402979c4c346235b957fc" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1_1Gpu_1a99e1f048890efc1c275606cb9bdc41c7" kindref="member">Gpu::DeviceVector</ref>&lt; <ref refid="structamrex_1_1STLtools_1_1Triangle" kindref="compound">Triangle</ref> &gt;</type>
        <definition>Gpu::DeviceVector&lt;Triangle&gt; amrex::STLtools::m_tri_pts_d</definition>
        <argsstring></argsstring>
        <name>m_tri_pts_d</name>
        <qualifiedname>amrex::STLtools::m_tri_pts_d</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.H" line="93" column="23" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.H" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1STLtools_1accd39d6fb1aca77a857b0a4ad1e51ce4" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1_1Gpu_1a99e1f048890efc1c275606cb9bdc41c7" kindref="member">Gpu::DeviceVector</ref>&lt; <ref refid="structamrex_1_1XDim3" kindref="compound">XDim3</ref> &gt;</type>
        <definition>Gpu::DeviceVector&lt;XDim3&gt; amrex::STLtools::m_tri_normals_d</definition>
        <argsstring></argsstring>
        <name>m_tri_normals_d</name>
        <qualifiedname>amrex::STLtools::m_tri_normals_d</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.H" line="94" column="23" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.H" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1STLtools_1a4d33bde9a9fb3ecd32f19faf74c6e36f" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1_1Gpu_1a99e1f048890efc1c275606cb9bdc41c7" kindref="member">Gpu::DeviceVector</ref>&lt; <ref refid="classamrex_1_1STLtools_1a5e4b2f7bb8d632ea0128bcddfddb6dc0" kindref="member">Node</ref> &gt;</type>
        <definition>Gpu::DeviceVector&lt;Node&gt; amrex::STLtools::m_bvh_nodes</definition>
        <argsstring></argsstring>
        <name>m_bvh_nodes</name>
        <qualifiedname>amrex::STLtools::m_bvh_nodes</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.H" line="95" column="23" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.H" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1STLtools_1a02713b3bdf5197301486a78cca290534" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::STLtools::m_num_tri</definition>
        <argsstring></argsstring>
        <name>m_num_tri</name>
        <qualifiedname>amrex::STLtools::m_num_tri</qualifiedname>
        <initializer>=0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.H" line="97" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.H" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1STLtools_1aeeee47c9bfc52a2c01f6b6ad38043b49" prot="private" static="no" mutable="no">
        <type><ref refid="structamrex_1_1XDim3" kindref="compound">XDim3</ref></type>
        <definition>XDim3 amrex::STLtools::m_ptmin</definition>
        <argsstring></argsstring>
        <name>m_ptmin</name>
        <qualifiedname>amrex::STLtools::m_ptmin</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.H" line="99" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.H" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1STLtools_1a135d25559bca9a4ec5dca07f1d08378b" prot="private" static="no" mutable="no">
        <type><ref refid="structamrex_1_1XDim3" kindref="compound">XDim3</ref></type>
        <definition>XDim3 amrex::STLtools::m_ptmax</definition>
        <argsstring></argsstring>
        <name>m_ptmax</name>
        <qualifiedname>amrex::STLtools::m_ptmax</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.H" line="100" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.H" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1STLtools_1ab287060a4866170710f23abb884afe91" prot="private" static="no" mutable="no">
        <type><ref refid="structamrex_1_1XDim3" kindref="compound">XDim3</ref></type>
        <definition>XDim3 amrex::STLtools::m_ptref</definition>
        <argsstring></argsstring>
        <name>m_ptref</name>
        <qualifiedname>amrex::STLtools::m_ptref</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.H" line="101" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.H" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1STLtools_1ae50a6d985147b0ae607e688e120f2935" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::STLtools::m_boundry_is_outside</definition>
        <argsstring></argsstring>
        <name>m_boundry_is_outside</name>
        <qualifiedname>amrex::STLtools::m_boundry_is_outside</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.H" line="102" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.H" bodystart="102" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1STLtools_1abfa10179458910f9d08c44c9385c03ad" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::STLtools::setBVHOptimization</definition>
        <argsstring>(bool flag)</argsstring>
        <name>setBVHOptimization</name>
        <qualifiedname>amrex::STLtools::setBVHOptimization</qualifiedname>
        <param>
          <type>bool</type>
          <declname>flag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.H" line="63" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.H" bodystart="63" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1STLtools_1abde98e341a2edf239bfa987ce47ed2be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::STLtools::read_stl_file</definition>
        <argsstring>(std::string const &amp;fname, Real scale, Array&lt; Real, 3 &gt; const &amp;center, int reverse_normal)</argsstring>
        <name>read_stl_file</name>
        <qualifiedname>amrex::STLtools::read_stl_file</qualifiedname>
        <param>
          <type>std::string const &amp;</type>
          <declname>fname</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>scale</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; Real, 3 &gt; const &amp;</type>
          <declname>center</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>reverse_normal</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.H" line="65" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.cpp" bodystart="195" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1STLtools_1a84b77230eb00f0ebb682f6751fc5184b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::STLtools::fill</definition>
        <argsstring>(MultiFab &amp;mf, IntVect const &amp;nghost, Geometry const &amp;geom, Real outside_value=-1._rt, Real inside_value=1._rt) const</argsstring>
        <name>fill</name>
        <qualifiedname>amrex::STLtools::fill</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> const &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>outside_value</declname>
          <defval>-1._rt</defval>
        </param>
        <param>
          <type>Real</type>
          <declname>inside_value</declname>
          <defval>1._rt</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.H" line="68" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.cpp" bodystart="624" bodyend="697"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1STLtools_1a6f8e64bd2b4c7935903ce0d5daa44f70" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::STLtools::getBoxType</definition>
        <argsstring>(Box const &amp;box, Geometry const &amp;geom, RunOn) const</argsstring>
        <name>getBoxType</name>
        <qualifiedname>amrex::STLtools::getBoxType</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> const &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.H" line="71" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.cpp" bodystart="700" bodyend="805"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1STLtools_1aefcdeb44ca0770702422b5f7eb289234" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::STLtools::fillFab</definition>
        <argsstring>(BaseFab&lt; Real &gt; &amp;levelset, const Geometry &amp;geom, RunOn, Box const &amp;bounding_box) const</argsstring>
        <name>fillFab</name>
        <qualifiedname>amrex::STLtools::fillFab</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; Real &gt; &amp;</type>
          <declname>levelset</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> const &amp;</type>
          <declname>bounding_box</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.H" line="75" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.cpp" bodystart="808" bodyend="873"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1STLtools_1addae911a258f776f2bf862da19290953" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::STLtools::getIntercept</definition>
        <argsstring>(Array&lt; Array4&lt; Real &gt;, AMREX_SPACEDIM &gt; const &amp;inter_arr, Array&lt; Array4&lt; EB2::Type_t const &gt;, AMREX_SPACEDIM &gt; const &amp;type_arr, Array4&lt; Real const &gt; const &amp;lst, Geometry const &amp;geom, RunOn, Box const &amp;bounding_box) const</argsstring>
        <name>getIntercept</name>
        <qualifiedname>amrex::STLtools::getIntercept</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt;, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>inter_arr</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1_1EB2_1ad5118c9d34449d5fcba10d141751b0d6" kindref="member">EB2::Type_t</ref> const &gt;, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>type_arr</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>lst</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> const &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> const &amp;</type>
          <declname>bounding_box</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.H" line="78" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.cpp" bodystart="876" bodyend="1057"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1STLtools_1a8036d07cde7c16212fb98e08c1408a85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::STLtools::prepare</definition>
        <argsstring>(Gpu::PinnedVector&lt; Triangle &gt; a_tri_pts)</argsstring>
        <name>prepare</name>
        <qualifiedname>amrex::STLtools::prepare</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1_1Gpu_1a6e76d121ad2e1030d86ccbc9a47f6fde" kindref="member">Gpu::PinnedVector</ref>&lt; <ref refid="structamrex_1_1STLtools_1_1Triangle" kindref="compound">Triangle</ref> &gt;</type>
          <declname>a_tri_pts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.H" line="87" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.cpp" bodystart="348" bodyend="520"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classamrex_1_1STLtools_1ad1e74ed017c04e4c073999b1ab577858" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>static constexpr bool amrex::STLtools::isGPUable</definition>
        <argsstring>() noexcept</argsstring>
        <name>isGPUable</name>
        <qualifiedname>amrex::STLtools::isGPUable</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.H" line="73" column="27" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.H" bodystart="73" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1STLtools_1ade00ed9461b4c9782dd363cb75dc84ae" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::STLtools::updateIntercept</definition>
        <argsstring>(Array&lt; Array4&lt; Real &gt;, AMREX_SPACEDIM &gt; const &amp;inter_arr, Array&lt; Array4&lt; EB2::Type_t const &gt;, AMREX_SPACEDIM &gt; const &amp;type_arr, Array4&lt; Real const &gt; const &amp;lst, Geometry const &amp;geom)</argsstring>
        <name>updateIntercept</name>
        <qualifiedname>amrex::STLtools::updateIntercept</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt;, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>inter_arr</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1_1EB2_1ad5118c9d34449d5fcba10d141751b0d6" kindref="member">EB2::Type_t</ref> const &gt;, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>type_arr</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>lst</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> const &amp;</type>
          <declname>geom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.H" line="83" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.cpp" bodystart="1060" bodyend="1114"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="classamrex_1_1STLtools_1addf47db1e1abc59b6ac84e8042ac5f9d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::STLtools::read_ascii_stl_file</definition>
        <argsstring>(std::string const &amp;fname, Real scale, Array&lt; Real, 3 &gt; const &amp;center, int reverse_normal, Gpu::PinnedVector&lt; Triangle &gt; &amp;a_tri_pts)</argsstring>
        <name>read_ascii_stl_file</name>
        <qualifiedname>amrex::STLtools::read_ascii_stl_file</qualifiedname>
        <param>
          <type>std::string const &amp;</type>
          <declname>fname</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>scale</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; Real, 3 &gt; const &amp;</type>
          <declname>center</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>reverse_normal</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1_1Gpu_1a6e76d121ad2e1030d86ccbc9a47f6fde" kindref="member">Gpu::PinnedVector</ref>&lt; <ref refid="structamrex_1_1STLtools_1_1Triangle" kindref="compound">Triangle</ref> &gt; &amp;</type>
          <declname>a_tri_pts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.H" line="104" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.cpp" bodystart="276" bodyend="345"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1STLtools_1aa230c243869c15b3c0b42c2b424e6fd6" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::STLtools::read_binary_stl_file</definition>
        <argsstring>(std::string const &amp;fname, Real scale, Array&lt; Real, 3 &gt; const &amp;center, int reverse_normal, Gpu::PinnedVector&lt; Triangle &gt; &amp;a_tri_pts)</argsstring>
        <name>read_binary_stl_file</name>
        <qualifiedname>amrex::STLtools::read_binary_stl_file</qualifiedname>
        <param>
          <type>std::string const &amp;</type>
          <declname>fname</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>scale</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; Real, 3 &gt; const &amp;</type>
          <declname>center</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>reverse_normal</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1_1Gpu_1a6e76d121ad2e1030d86ccbc9a47f6fde" kindref="member">Gpu::PinnedVector</ref>&lt; <ref refid="structamrex_1_1STLtools_1_1Triangle" kindref="compound">Triangle</ref> &gt; &amp;</type>
          <declname>a_tri_pts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.H" line="107" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.cpp" bodystart="222" bodyend="273"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classamrex_1_1STLtools_1afcec3c63f5854b95aa657693322a8643" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::STLtools::build_bvh</definition>
        <argsstring>(Triangle *begin, Triangle *end, Gpu::PinnedVector&lt; Node &gt; &amp;bvh_nodes)</argsstring>
        <name>build_bvh</name>
        <qualifiedname>amrex::STLtools::build_bvh</qualifiedname>
        <param>
          <type><ref refid="structamrex_1_1STLtools_1_1Triangle" kindref="compound">Triangle</ref> *</type>
          <declname>begin</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1STLtools_1_1Triangle" kindref="compound">Triangle</ref> *</type>
          <declname>end</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1_1Gpu_1a6e76d121ad2e1030d86ccbc9a47f6fde" kindref="member">Gpu::PinnedVector</ref>&lt; <ref refid="classamrex_1_1STLtools_1a5e4b2f7bb8d632ea0128bcddfddb6dc0" kindref="member">Node</ref> &gt; &amp;</type>
          <declname>bvh_nodes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.H" line="111" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.cpp" bodystart="523" bodyend="604"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1STLtools_1a0473b066498d4c0df39749018a3babcd" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::STLtools::bvh_size</definition>
        <argsstring>(int ntri, std::size_t &amp;nnodes)</argsstring>
        <name>bvh_size</name>
        <qualifiedname>amrex::STLtools::bvh_size</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ntri</declname>
        </param>
        <param>
          <type>std::size_t &amp;</type>
          <declname>nnodes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.H" line="112" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.cpp" bodystart="607" bodyend="621"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="10">
        <label>amrex::PODVector&lt; amrex::STLtools::BVHNodeT &gt;</label>
        <link refid="classamrex_1_1PODVector"/>
        <childnode refid="11" relation="public-inheritance">
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>m_data</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>amrex::PODVector&lt; amrex::STLtools::Triangle &gt;</label>
        <link refid="classamrex_1_1PODVector"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>m_data</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>amrex::PODVector&lt; amrex::XDim3 &gt;</label>
        <link refid="classamrex_1_1PODVector"/>
        <childnode refid="9" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>m_data</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>T</label>
      </node>
      <node id="7">
        <label>Real</label>
      </node>
      <node id="13">
        <label>amrex::RealBox</label>
        <link refid="classamrex_1_1RealBox"/>
        <childnode refid="7" relation="usage">
          <edgelabel>xhi</edgelabel>
          <edgelabel>xlo</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>amrex::STLtools</label>
        <link refid="classamrex_1_1STLtools"/>
        <childnode refid="2" relation="usage">
          <edgelabel>m_tri_pts_d</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>m_tri_normals_d</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>m_bvh_nodes</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>m_ptmax</edgelabel>
          <edgelabel>m_ptmin</edgelabel>
          <edgelabel>m_ptref</edgelabel>
        </childnode>
      </node>
      <node id="12">
        <label>amrex::STLtools::BVHNodeT&lt; M, N &gt;</label>
        <link refid="structamrex_1_1STLtools_1_1BVHNodeT"/>
        <childnode refid="13" relation="usage">
          <edgelabel>boundingbox</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>triangles</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>trinorm</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>amrex::STLtools::Triangle</label>
        <link refid="structamrex_1_1STLtools_1_1Triangle"/>
        <childnode refid="6" relation="usage">
          <edgelabel>v1</edgelabel>
          <edgelabel>v2</edgelabel>
          <edgelabel>v3</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>amrex::XDim3</label>
        <link refid="structamrex_1_1XDim3"/>
        <childnode refid="7" relation="usage">
          <edgelabel>x</edgelabel>
          <edgelabel>y</edgelabel>
          <edgelabel>z</edgelabel>
        </childnode>
      </node>
      <node id="11">
        <label>std::allocator&lt; T &gt;</label>
        <childnode refid="4" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>std::allocator&lt; T &gt;</label>
        <childnode refid="4" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="9">
        <label>std::allocator&lt; T &gt;</label>
        <childnode refid="4" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.H" line="18" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.H" bodystart="19" bodyend="113"/>
    <listofallmembers>
      <member refid="classamrex_1_1STLtools_1ad56ce2bf01da43520e270f2ae570f29a" prot="public" virt="non-virtual"><scope>amrex::STLtools</scope><name>allcovered</name></member>
      <member refid="classamrex_1_1STLtools_1a071a8fb28babb5af263c2aa74a0d979b" prot="public" virt="non-virtual"><scope>amrex::STLtools</scope><name>allregular</name></member>
      <member refid="classamrex_1_1STLtools_1afcec3c63f5854b95aa657693322a8643" prot="private" virt="non-virtual"><scope>amrex::STLtools</scope><name>build_bvh</name></member>
      <member refid="classamrex_1_1STLtools_1a0473b066498d4c0df39749018a3babcd" prot="private" virt="non-virtual"><scope>amrex::STLtools</scope><name>bvh_size</name></member>
      <member refid="classamrex_1_1STLtools_1a84b77230eb00f0ebb682f6751fc5184b" prot="public" virt="non-virtual"><scope>amrex::STLtools</scope><name>fill</name></member>
      <member refid="classamrex_1_1STLtools_1aefcdeb44ca0770702422b5f7eb289234" prot="public" virt="non-virtual"><scope>amrex::STLtools</scope><name>fillFab</name></member>
      <member refid="classamrex_1_1STLtools_1a6f8e64bd2b4c7935903ce0d5daa44f70" prot="public" virt="non-virtual"><scope>amrex::STLtools</scope><name>getBoxType</name></member>
      <member refid="classamrex_1_1STLtools_1addae911a258f776f2bf862da19290953" prot="public" virt="non-virtual"><scope>amrex::STLtools</scope><name>getIntercept</name></member>
      <member refid="classamrex_1_1STLtools_1ad1e74ed017c04e4c073999b1ab577858" prot="public" virt="non-virtual"><scope>amrex::STLtools</scope><name>isGPUable</name></member>
      <member refid="classamrex_1_1STLtools_1ae50a6d985147b0ae607e688e120f2935" prot="private" virt="non-virtual"><scope>amrex::STLtools</scope><name>m_boundry_is_outside</name></member>
      <member refid="classamrex_1_1STLtools_1a2e7418a1e57f61cf7154c966f5ced655" prot="public" virt="non-virtual"><scope>amrex::STLtools</scope><name>m_bvh_max_size</name></member>
      <member refid="classamrex_1_1STLtools_1a401996bf07e630652925eb7478369d04" prot="public" virt="non-virtual"><scope>amrex::STLtools</scope><name>m_bvh_max_splits</name></member>
      <member refid="classamrex_1_1STLtools_1a07f80cd69640a2e642f686cc4ac99b46" prot="public" virt="non-virtual"><scope>amrex::STLtools</scope><name>m_bvh_max_stack_size</name></member>
      <member refid="classamrex_1_1STLtools_1a4d33bde9a9fb3ecd32f19faf74c6e36f" prot="private" virt="non-virtual"><scope>amrex::STLtools</scope><name>m_bvh_nodes</name></member>
      <member refid="classamrex_1_1STLtools_1a7fc4e4a3a6c2b96639d17a9d97f7483e" prot="private" virt="non-virtual"><scope>amrex::STLtools</scope><name>m_bvh_optimization</name></member>
      <member refid="classamrex_1_1STLtools_1a02713b3bdf5197301486a78cca290534" prot="private" virt="non-virtual"><scope>amrex::STLtools</scope><name>m_num_tri</name></member>
      <member refid="classamrex_1_1STLtools_1a135d25559bca9a4ec5dca07f1d08378b" prot="private" virt="non-virtual"><scope>amrex::STLtools</scope><name>m_ptmax</name></member>
      <member refid="classamrex_1_1STLtools_1aeeee47c9bfc52a2c01f6b6ad38043b49" prot="private" virt="non-virtual"><scope>amrex::STLtools</scope><name>m_ptmin</name></member>
      <member refid="classamrex_1_1STLtools_1ab287060a4866170710f23abb884afe91" prot="private" virt="non-virtual"><scope>amrex::STLtools</scope><name>m_ptref</name></member>
      <member refid="classamrex_1_1STLtools_1accd39d6fb1aca77a857b0a4ad1e51ce4" prot="private" virt="non-virtual"><scope>amrex::STLtools</scope><name>m_tri_normals_d</name></member>
      <member refid="classamrex_1_1STLtools_1afe0f0661535402979c4c346235b957fc" prot="private" virt="non-virtual"><scope>amrex::STLtools</scope><name>m_tri_pts_d</name></member>
      <member refid="classamrex_1_1STLtools_1ad0e62c6693f9f0100b33547ddef29fa2" prot="public" virt="non-virtual"><scope>amrex::STLtools</scope><name>mixedcells</name></member>
      <member refid="classamrex_1_1STLtools_1a5e4b2f7bb8d632ea0128bcddfddb6dc0" prot="public" virt="non-virtual"><scope>amrex::STLtools</scope><name>Node</name></member>
      <member refid="classamrex_1_1STLtools_1a8036d07cde7c16212fb98e08c1408a85" prot="public" virt="non-virtual"><scope>amrex::STLtools</scope><name>prepare</name></member>
      <member refid="classamrex_1_1STLtools_1addf47db1e1abc59b6ac84e8042ac5f9d" prot="private" virt="non-virtual"><scope>amrex::STLtools</scope><name>read_ascii_stl_file</name></member>
      <member refid="classamrex_1_1STLtools_1aa230c243869c15b3c0b42c2b424e6fd6" prot="private" virt="non-virtual"><scope>amrex::STLtools</scope><name>read_binary_stl_file</name></member>
      <member refid="classamrex_1_1STLtools_1abde98e341a2edf239bfa987ce47ed2be" prot="public" virt="non-virtual"><scope>amrex::STLtools</scope><name>read_stl_file</name></member>
      <member refid="classamrex_1_1STLtools_1abfa10179458910f9d08c44c9385c03ad" prot="public" virt="non-virtual"><scope>amrex::STLtools</scope><name>setBVHOptimization</name></member>
      <member refid="classamrex_1_1STLtools_1ade00ed9461b4c9782dd363cb75dc84ae" prot="public" virt="non-virtual"><scope>amrex::STLtools</scope><name>updateIntercept</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
