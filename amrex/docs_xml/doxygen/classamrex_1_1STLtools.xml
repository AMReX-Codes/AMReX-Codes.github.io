<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classamrex_1_1STLtools" kind="class" language="C++" prot="public">
    <compoundname>amrex::STLtools</compoundname>
    <includes refid="AMReX__EB__STL__utils_8H" local="no">AMReX_EB_STL_utils.H</includes>
    <innerclass refid="structamrex_1_1STLtools_1_1Triangle" prot="public">amrex::STLtools::Triangle</innerclass>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classamrex_1_1STLtools_1a071a8fb28babb5af263c2aa74a0d979b" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>constexpr int amrex::STLtools::allregular</definition>
        <argsstring></argsstring>
        <name>allregular</name>
        <initializer>= -1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.H" line="20" column="26" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.H" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1STLtools_1ad0e62c6693f9f0100b33547ddef29fa2" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>constexpr int amrex::STLtools::mixedcells</definition>
        <argsstring></argsstring>
        <name>mixedcells</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.H" line="21" column="26" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.H" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1STLtools_1ad56ce2bf01da43520e270f2ae570f29a" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>constexpr int amrex::STLtools::allcovered</definition>
        <argsstring></argsstring>
        <name>allcovered</name>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.H" line="22" column="26" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.H" bodystart="22" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1STLtools_1aee7f90ddbeb003f7aac15f3b448c4a87" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1_1Gpu_1a6e76d121ad2e1030d86ccbc9a47f6fde" kindref="member">Gpu::PinnedVector</ref>&lt; <ref refid="structamrex_1_1STLtools_1_1Triangle" kindref="compound">Triangle</ref> &gt;</type>
        <definition>Gpu::PinnedVector&lt;Triangle&gt; amrex::STLtools::m_tri_pts_h</definition>
        <argsstring></argsstring>
        <name>m_tri_pts_h</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.H" line="26" column="23" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.H" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1STLtools_1afe0f0661535402979c4c346235b957fc" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1_1Gpu_1a99e1f048890efc1c275606cb9bdc41c7" kindref="member">Gpu::DeviceVector</ref>&lt; <ref refid="structamrex_1_1STLtools_1_1Triangle" kindref="compound">Triangle</ref> &gt;</type>
        <definition>Gpu::DeviceVector&lt;Triangle&gt; amrex::STLtools::m_tri_pts_d</definition>
        <argsstring></argsstring>
        <name>m_tri_pts_d</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.H" line="27" column="23" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.H" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1STLtools_1accd39d6fb1aca77a857b0a4ad1e51ce4" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1_1Gpu_1a99e1f048890efc1c275606cb9bdc41c7" kindref="member">Gpu::DeviceVector</ref>&lt; <ref refid="structamrex_1_1XDim3" kindref="compound">XDim3</ref> &gt;</type>
        <definition>Gpu::DeviceVector&lt;XDim3&gt; amrex::STLtools::m_tri_normals_d</definition>
        <argsstring></argsstring>
        <name>m_tri_normals_d</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.H" line="28" column="23" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.H" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1STLtools_1a02713b3bdf5197301486a78cca290534" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::STLtools::m_num_tri</definition>
        <argsstring></argsstring>
        <name>m_num_tri</name>
        <initializer>=0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.H" line="30" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.H" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1STLtools_1aeeee47c9bfc52a2c01f6b6ad38043b49" prot="private" static="no" mutable="no">
        <type><ref refid="structamrex_1_1XDim3" kindref="compound">XDim3</ref></type>
        <definition>XDim3 amrex::STLtools::m_ptmin</definition>
        <argsstring></argsstring>
        <name>m_ptmin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.H" line="32" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.H" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1STLtools_1a135d25559bca9a4ec5dca07f1d08378b" prot="private" static="no" mutable="no">
        <type><ref refid="structamrex_1_1XDim3" kindref="compound">XDim3</ref></type>
        <definition>XDim3 amrex::STLtools::m_ptmax</definition>
        <argsstring></argsstring>
        <name>m_ptmax</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.H" line="33" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.H" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1STLtools_1ab287060a4866170710f23abb884afe91" prot="private" static="no" mutable="no">
        <type><ref refid="structamrex_1_1XDim3" kindref="compound">XDim3</ref></type>
        <definition>XDim3 amrex::STLtools::m_ptref</definition>
        <argsstring></argsstring>
        <name>m_ptref</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.H" line="34" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.H" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1STLtools_1ae50a6d985147b0ae607e688e120f2935" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::STLtools::m_boundry_is_outside</definition>
        <argsstring></argsstring>
        <name>m_boundry_is_outside</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.H" line="35" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.H" bodystart="35" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classamrex_1_1STLtools_1aa4f438da64a6ea3b7520112aac9f8fd3" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::STLtools::read_ascii_stl_file</definition>
        <argsstring>(std::string const &amp;fname, Real scale, Array&lt; Real, 3 &gt; const &amp;center, int reverse_normal)</argsstring>
        <name>read_ascii_stl_file</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>fname</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>scale</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; Real, 3 &gt; const &amp;</type>
          <declname>center</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>reverse_normal</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.H" line="37" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.cpp" bodystart="168" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1STLtools_1aca6050ea96a310625fe20e9f9594680a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::STLtools::read_binary_stl_file</definition>
        <argsstring>(std::string const &amp;fname, Real scale, Array&lt; Real, 3 &gt; const &amp;center, int reverse_normal)</argsstring>
        <name>read_binary_stl_file</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>fname</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>scale</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; Real, 3 &gt; const &amp;</type>
          <declname>center</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>reverse_normal</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.H" line="39" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.cpp" bodystart="120" bodyend="165"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1STLtools_1a137269ba305483a92bf01d19ec1fd07c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::STLtools::prepare</definition>
        <argsstring>()</argsstring>
        <name>prepare</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.H" line="44" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.cpp" bodystart="239" bodyend="415"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1STLtools_1abde98e341a2edf239bfa987ce47ed2be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::STLtools::read_stl_file</definition>
        <argsstring>(std::string const &amp;fname, Real scale, Array&lt; Real, 3 &gt; const &amp;center, int reverse_normal)</argsstring>
        <name>read_stl_file</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>fname</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>scale</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; Real, 3 &gt; const &amp;</type>
          <declname>center</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>reverse_normal</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.H" line="46" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.cpp" bodystart="95" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1STLtools_1a84b77230eb00f0ebb682f6751fc5184b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::STLtools::fill</definition>
        <argsstring>(MultiFab &amp;mf, IntVect const &amp;nghost, Geometry const &amp;geom, Real outside_value=-1._rt, Real inside_value=1._rt) const</argsstring>
        <name>fill</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> const &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>outside_value</declname>
          <defval>-1._rt</defval>
        </param>
        <param>
          <type>Real</type>
          <declname>inside_value</declname>
          <defval>1._rt</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.H" line="49" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.cpp" bodystart="418" bodyend="460"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1STLtools_1a6f8e64bd2b4c7935903ce0d5daa44f70" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::STLtools::getBoxType</definition>
        <argsstring>(Box const &amp;box, Geometry const &amp;geom, RunOn) const</argsstring>
        <name>getBoxType</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> const &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.H" line="52" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.cpp" bodystart="463" bodyend="541"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1STLtools_1aefcdeb44ca0770702422b5f7eb289234" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::STLtools::fillFab</definition>
        <argsstring>(BaseFab&lt; Real &gt; &amp;levelset, const Geometry &amp;geom, RunOn, Box const &amp;bounding_box) const</argsstring>
        <name>fillFab</name>
        <param>
          <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; Real &gt; &amp;</type>
          <declname>levelset</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bounding_box</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.H" line="56" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.cpp" bodystart="544" bodyend="584"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1STLtools_1addae911a258f776f2bf862da19290953" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::STLtools::getIntercept</definition>
        <argsstring>(Array&lt; Array4&lt; Real &gt;, AMREX_SPACEDIM &gt; const &amp;inter_arr, Array&lt; Array4&lt; EB2::Type_t const &gt;, AMREX_SPACEDIM &gt; const &amp;type_arr, Array4&lt; Real const &gt; const &amp;lst, Geometry const &amp;geom, RunOn, Box const &amp;bounding_box) const</argsstring>
        <name>getIntercept</name>
        <param>
          <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt;, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>inter_arr</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1_1EB2_1ad5118c9d34449d5fcba10d141751b0d6" kindref="member">EB2::Type_t</ref> const &gt;, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>type_arr</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>lst</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> const &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bounding_box</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.H" line="59" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.cpp" bodystart="587" bodyend="678"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classamrex_1_1STLtools_1ad1e74ed017c04e4c073999b1ab577858" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>static constexpr bool amrex::STLtools::isGPUable</definition>
        <argsstring>() noexcept</argsstring>
        <name>isGPUable</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.H" line="54" column="27" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.H" bodystart="54" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1STLtools_1ade00ed9461b4c9782dd363cb75dc84ae" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::STLtools::updateIntercept</definition>
        <argsstring>(Array&lt; Array4&lt; Real &gt;, AMREX_SPACEDIM &gt; const &amp;inter_arr, Array&lt; Array4&lt; EB2::Type_t const &gt;, AMREX_SPACEDIM &gt; const &amp;type_arr, Array4&lt; Real const &gt; const &amp;lst, Geometry const &amp;geom)</argsstring>
        <name>updateIntercept</name>
        <param>
          <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt;, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>inter_arr</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1_1EB2_1ad5118c9d34449d5fcba10d141751b0d6" kindref="member">EB2::Type_t</ref> const &gt;, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>type_arr</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>lst</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> const &amp;</type>
          <declname>geom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.H" line="64" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.cpp" bodystart="681" bodyend="735"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="4">
        <label>T</label>
      </node>
      <node id="7">
        <label>Real</label>
      </node>
      <node id="5">
        <label>amrex::PODVector&lt; amrex::XDim3 &gt;</label>
        <link refid="classamrex_1_1PODVector"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>std::allocator&lt; T &gt;</label>
        <childnode refid="4" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>amrex::PODVector&lt; amrex::STLtools::Triangle &gt;</label>
        <link refid="classamrex_1_1PODVector"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>amrex::STLtools</label>
        <link refid="classamrex_1_1STLtools"/>
        <childnode refid="2" relation="usage">
          <edgelabel>m_tri_pts_d</edgelabel>
          <edgelabel>m_tri_pts_h</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>m_tri_normals_d</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>m_ptmax</edgelabel>
          <edgelabel>m_ptmin</edgelabel>
          <edgelabel>m_ptref</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>amrex::XDim3</label>
        <link refid="structamrex_1_1XDim3"/>
        <childnode refid="7" relation="usage">
          <edgelabel>x</edgelabel>
          <edgelabel>y</edgelabel>
          <edgelabel>z</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.H" line="13" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_STL_utils.H" bodystart="14" bodyend="68"/>
    <listofallmembers>
      <member refid="classamrex_1_1STLtools_1ad56ce2bf01da43520e270f2ae570f29a" prot="public" virt="non-virtual"><scope>amrex::STLtools</scope><name>allcovered</name></member>
      <member refid="classamrex_1_1STLtools_1a071a8fb28babb5af263c2aa74a0d979b" prot="public" virt="non-virtual"><scope>amrex::STLtools</scope><name>allregular</name></member>
      <member refid="classamrex_1_1STLtools_1a84b77230eb00f0ebb682f6751fc5184b" prot="public" virt="non-virtual"><scope>amrex::STLtools</scope><name>fill</name></member>
      <member refid="classamrex_1_1STLtools_1aefcdeb44ca0770702422b5f7eb289234" prot="public" virt="non-virtual"><scope>amrex::STLtools</scope><name>fillFab</name></member>
      <member refid="classamrex_1_1STLtools_1a6f8e64bd2b4c7935903ce0d5daa44f70" prot="public" virt="non-virtual"><scope>amrex::STLtools</scope><name>getBoxType</name></member>
      <member refid="classamrex_1_1STLtools_1addae911a258f776f2bf862da19290953" prot="public" virt="non-virtual"><scope>amrex::STLtools</scope><name>getIntercept</name></member>
      <member refid="classamrex_1_1STLtools_1ad1e74ed017c04e4c073999b1ab577858" prot="public" virt="non-virtual"><scope>amrex::STLtools</scope><name>isGPUable</name></member>
      <member refid="classamrex_1_1STLtools_1ae50a6d985147b0ae607e688e120f2935" prot="private" virt="non-virtual"><scope>amrex::STLtools</scope><name>m_boundry_is_outside</name></member>
      <member refid="classamrex_1_1STLtools_1a02713b3bdf5197301486a78cca290534" prot="private" virt="non-virtual"><scope>amrex::STLtools</scope><name>m_num_tri</name></member>
      <member refid="classamrex_1_1STLtools_1a135d25559bca9a4ec5dca07f1d08378b" prot="private" virt="non-virtual"><scope>amrex::STLtools</scope><name>m_ptmax</name></member>
      <member refid="classamrex_1_1STLtools_1aeeee47c9bfc52a2c01f6b6ad38043b49" prot="private" virt="non-virtual"><scope>amrex::STLtools</scope><name>m_ptmin</name></member>
      <member refid="classamrex_1_1STLtools_1ab287060a4866170710f23abb884afe91" prot="private" virt="non-virtual"><scope>amrex::STLtools</scope><name>m_ptref</name></member>
      <member refid="classamrex_1_1STLtools_1accd39d6fb1aca77a857b0a4ad1e51ce4" prot="private" virt="non-virtual"><scope>amrex::STLtools</scope><name>m_tri_normals_d</name></member>
      <member refid="classamrex_1_1STLtools_1afe0f0661535402979c4c346235b957fc" prot="private" virt="non-virtual"><scope>amrex::STLtools</scope><name>m_tri_pts_d</name></member>
      <member refid="classamrex_1_1STLtools_1aee7f90ddbeb003f7aac15f3b448c4a87" prot="private" virt="non-virtual"><scope>amrex::STLtools</scope><name>m_tri_pts_h</name></member>
      <member refid="classamrex_1_1STLtools_1ad0e62c6693f9f0100b33547ddef29fa2" prot="public" virt="non-virtual"><scope>amrex::STLtools</scope><name>mixedcells</name></member>
      <member refid="classamrex_1_1STLtools_1a137269ba305483a92bf01d19ec1fd07c" prot="public" virt="non-virtual"><scope>amrex::STLtools</scope><name>prepare</name></member>
      <member refid="classamrex_1_1STLtools_1aa4f438da64a6ea3b7520112aac9f8fd3" prot="private" virt="non-virtual"><scope>amrex::STLtools</scope><name>read_ascii_stl_file</name></member>
      <member refid="classamrex_1_1STLtools_1aca6050ea96a310625fe20e9f9594680a" prot="private" virt="non-virtual"><scope>amrex::STLtools</scope><name>read_binary_stl_file</name></member>
      <member refid="classamrex_1_1STLtools_1abde98e341a2edf239bfa987ce47ed2be" prot="public" virt="non-virtual"><scope>amrex::STLtools</scope><name>read_stl_file</name></member>
      <member refid="classamrex_1_1STLtools_1ade00ed9461b4c9782dd363cb75dc84ae" prot="public" virt="non-virtual"><scope>amrex::STLtools</scope><name>updateIntercept</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
