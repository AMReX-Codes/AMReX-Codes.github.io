<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classamrex_1_1Vector" kind="class" language="C++" prot="public">
    <compoundname>amrex::Vector</compoundname>
    <basecompoundref prot="public" virt="non-virtual">std::vector&lt; T, Allocator &gt;</basecompoundref>
    <includes refid="AMReX__Vector_8H" local="no">AMReX_Vector.H</includes>
    <templateparamlist>
      <param>
        <type>class</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
      <param>
        <type>class</type>
        <declname>Allocator</declname>
        <defname>Allocator</defname>
        <defval>std::allocator&lt;T&gt;</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1Vector_1a21762c932d02442c5b633ed8f9245644" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T&amp; amrex::Vector&lt; T, Allocator &gt;::operator[]</definition>
        <argsstring>(size_type i) noexcept</argsstring>
        <name>operator[]</name>
        <param>
          <type>size_type</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Vector.H" line="33" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Vector.H" bodystart="33" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Vector_1a386c8f4b57c4b34a5b0b34809554f89e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T&amp; amrex::Vector&lt; T, Allocator &gt;::operator[]</definition>
        <argsstring>(size_type i) const noexcept</argsstring>
        <name>operator[]</name>
        <param>
          <type>size_type</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Vector.H" line="39" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Vector.H" bodystart="39" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Vector_1ab7e27d7251f3583037eee2d3333f53dd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T *</type>
        <definition>T* amrex::Vector&lt; T, Allocator &gt;::dataPtr</definition>
        <argsstring>() noexcept</argsstring>
        <name>dataPtr</name>
        <briefdescription>
<para>get access to the underlying data pointer </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Vector.H" line="46" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Vector.H" bodystart="46" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Vector_1a417a1c35af1defbc46ec92e7c9eee93f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const T *</type>
        <definition>const T* amrex::Vector&lt; T, Allocator &gt;::dataPtr</definition>
        <argsstring>() const noexcept</argsstring>
        <name>dataPtr</name>
        <briefdescription>
<para>get access to the underlying data pointer </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Vector.H" line="48" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Vector.H" bodystart="48" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Vector_1a58c24fe05cc91d42ebe7151c398f0c58" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Long</type>
        <definition>Long amrex::Vector&lt; T, Allocator &gt;::size</definition>
        <argsstring>() const noexcept</argsstring>
        <name>size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Vector.H" line="50" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Vector.H" bodystart="50" bodyend="50"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This class is a thin wrapper around std::vector. Unlike vector, <ref refid="classamrex_1_1Vector_1a21762c932d02442c5b633ed8f9245644" kindref="member">Vector::operator[]</ref> provides bound checking when compiled with DEBUG=TRUE. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="4845">
        <label>std::vector&lt; T, Allocator &gt;</label>
      </node>
      <node id="4844">
        <label>amrex::Vector&lt; T, Allocator &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4845" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4847">
        <label>std::vector&lt; T, Allocator &gt;</label>
      </node>
      <node id="4846">
        <label>amrex::Vector&lt; T, Allocator &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4847" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Vector.H" line="27" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Vector.H" bodystart="24" bodyend="52"/>
    <listofallmembers>
      <member refid="classamrex_1_1Vector_1ab7e27d7251f3583037eee2d3333f53dd" prot="public" virt="non-virtual"><scope>amrex::Vector</scope><name>dataPtr</name></member>
      <member refid="classamrex_1_1Vector_1a417a1c35af1defbc46ec92e7c9eee93f" prot="public" virt="non-virtual"><scope>amrex::Vector</scope><name>dataPtr</name></member>
      <member refid="classamrex_1_1Vector_1a21762c932d02442c5b633ed8f9245644" prot="public" virt="non-virtual"><scope>amrex::Vector</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1Vector_1a386c8f4b57c4b34a5b0b34809554f89e" prot="public" virt="non-virtual"><scope>amrex::Vector</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1Vector_1a58c24fe05cc91d42ebe7151c398f0c58" prot="public" virt="non-virtual"><scope>amrex::Vector</scope><name>size</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
