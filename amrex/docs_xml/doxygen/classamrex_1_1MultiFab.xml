<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classamrex_1_1MultiFab" kind="class" language="C++" prot="public">
    <compoundname>amrex::MultiFab</compoundname>
    <basecompoundref refid="classamrex_1_1FabArray" prot="public" virt="non-virtual">amrex::FabArray&lt; FArrayBox &gt;</basecompoundref>
    <includes refid="AMReX__MultiFab_8H" local="no">AMReX_MultiFab.H</includes>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classamrex_1_1MultiFab_1a1124d24928511321f4381ebd60b0c15b" prot="private" static="no">
        <type><ref refid="classamrex_1_1FabArrayBase_1a9bdd65ce61ce9ee5ca52c6b387dd4800" kindref="member">FabArrayBase::CopyComTagsContainer</ref></type>
        <definition>using amrex::MultiFab::CopyComTagsContainer =  FabArrayBase::CopyComTagsContainer</definition>
        <argsstring></argsstring>
        <name>CopyComTagsContainer</name>
        <briefdescription>
<para>Some useful typedefs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="683" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" bodystart="683" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1MultiFab_1a26137d0a3c8a4a024bf811fbaac6208d" prot="private" static="no">
        <type><ref refid="classamrex_1_1FabArrayBase_1aa36883196eb7b1d039fd1941966a4310" kindref="member">FabArrayBase::MapOfCopyComTagContainers</ref></type>
        <definition>using amrex::MultiFab::MapOfCopyComTagContainers =  FabArrayBase::MapOfCopyComTagContainers</definition>
        <argsstring></argsstring>
        <name>MapOfCopyComTagContainers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="684" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" bodystart="684" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1MultiFab_1abcce72db937ae8e326d2cb14cb114e7d" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::MultiFab::MultiFab</definition>
        <argsstring>() noexcept</argsstring>
        <name>MultiFab</name>
        <briefdescription>
<para>Constructs an empty <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Data can be defined at a later time using the define member functions inherited from <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="47" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="474" bodyend="480"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a19ec88a3ec56e2af03e7d127f8edb79e" prot="public" static="no" const="no" explicit="yes" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::MultiFab::MultiFab</definition>
        <argsstring>(Arena *a) noexcept</argsstring>
        <name>MultiFab</name>
        <param>
          <type><ref refid="classamrex_1_1Arena" kindref="compound">Arena</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Constructs an empty <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Data can be defined at a later time using the define member functions. If <computeroutput>define</computeroutput> is called later with a nullptr as <ref refid="structamrex_1_1MFInfo" kindref="compound">MFInfo</ref>&apos;s arena, the default <ref refid="classamrex_1_1Arena" kindref="compound">Arena</ref> <computeroutput>a</computeroutput> will be used. If the arena in <ref refid="structamrex_1_1MFInfo" kindref="compound">MFInfo</ref> is not a nullptr, the <ref refid="structamrex_1_1MFInfo" kindref="compound">MFInfo</ref>&apos;s arena will be used. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="57" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="482" bodyend="489"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a89ca350582ac479d9278fa2e0ec1a9c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MultiFab::MultiFab</definition>
        <argsstring>(const BoxArray &amp;bxs, const DistributionMapping &amp;dm, int ncomp, int ngrow, const MFInfo &amp;info=MFInfo(), const FabFactory&lt; FArrayBox &gt; &amp;factory=FArrayBoxFactory())</argsstring>
        <name>MultiFab</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>bxs</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngrow</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1MFInfo" kindref="compound">MFInfo</ref> &amp;</type>
          <declname>info</declname>
          <defval><ref refid="structamrex_1_1MFInfo" kindref="compound">MFInfo</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &gt; &amp;</type>
          <declname>factory</declname>
          <defval><ref refid="namespaceamrex_1abda821661019fb0a77eb3a9706dc7330" kindref="member">FArrayBoxFactory</ref>()</defval>
        </param>
        <briefdescription>
<para>Constructs a <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>The size of the <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> is given by the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> grown by <computeroutput>ngrow</computeroutput>, and the number of components is given by <computeroutput>ncomp</computeroutput>. If <computeroutput>info</computeroutput> is set to not allocating memory, then no FArrayBoxes are allocated at this time but can be defined later.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bxs</parametername>
</parameternamelist>
<parameterdescription>
<para>a valid region </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dm</parametername>
</parameternamelist>
<parameterdescription>
<para>a DistribuionMapping </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncomp</parametername>
</parameternamelist>
<parameterdescription>
<para>number of components </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ngrow</parametername>
</parameternamelist>
<parameterdescription>
<para>number of cells the region grows </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>info</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structamrex_1_1MFInfo" kindref="compound">MFInfo</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="73" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="491" bodyend="498"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a2c97960be1543778b979eb2a22c2b5d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MultiFab::MultiFab</definition>
        <argsstring>(const BoxArray &amp;bxs, const DistributionMapping &amp;dm, int ncomp, const IntVect &amp;ngrow, const MFInfo &amp;info=MFInfo(), const FabFactory&lt; FArrayBox &gt; &amp;factory=FArrayBoxFactory())</argsstring>
        <name>MultiFab</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>bxs</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ngrow</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1MFInfo" kindref="compound">MFInfo</ref> &amp;</type>
          <declname>info</declname>
          <defval><ref refid="structamrex_1_1MFInfo" kindref="compound">MFInfo</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &gt; &amp;</type>
          <declname>factory</declname>
          <defval><ref refid="namespaceamrex_1abda821661019fb0a77eb3a9706dc7330" kindref="member">FArrayBoxFactory</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="85" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="500" bodyend="514"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1ab61f9da32d4aad58172e8871dc992e45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MultiFab::MultiFab</definition>
        <argsstring>(const MultiFab &amp;rhs, MakeType maketype, int scomp, int ncomp)</argsstring>
        <name>MultiFab</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a0a36c65d0681a832330b2812f16786a6" kindref="member">MakeType</ref></type>
          <declname>maketype</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
<para>Make an alias <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that <computeroutput>maketype</computeroutput> must be <computeroutput><ref refid="namespaceamrex_1a0a36c65d0681a832330b2812f16786a6a1477998364b5f02d6ce68e3da29be1ba" kindref="member">amrex::make_alias</ref></computeroutput>, <computeroutput>scomp</computeroutput> is the starting component of the alias, and <computeroutput>ncomp</computeroutput> is the number of components in the new aliasing <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="104" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="516" bodyend="524"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1ae27094337c6cdcd4dd4a0e8dea9d1321" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MultiFab::~MultiFab</definition>
        <argsstring>()</argsstring>
        <name>~MultiFab</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="106" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="535" bodyend="540"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1ae5d26ea953fbc273c65f7c489511f656" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::MultiFab::MultiFab</definition>
        <argsstring>(MultiFab &amp;&amp;rhs) noexcept</argsstring>
        <name>MultiFab</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="108" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="526" bodyend="533"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1aa2e6e3cf95934c1b6ee898d10a1845f0" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
        <definition>MultiFab&amp; amrex::MultiFab::operator=</definition>
        <argsstring>(MultiFab &amp;&amp;rhs) noexcept=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="109" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1ad82dfbf92b93fa09d680fe6e3bec36e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MultiFab::MultiFab</definition>
        <argsstring>(const MultiFab &amp;rhs)=delete</argsstring>
        <name>MultiFab</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="111" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a62b9fe978cd451f411245dc8a1e97b40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
        <definition>MultiFab&amp; amrex::MultiFab::operator=</definition>
        <argsstring>(const MultiFab &amp;rhs)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="112" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a08cbe2b2bf9887d4971bd9270c3aa734" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiFab::define</definition>
        <argsstring>(const BoxArray &amp;bxs, const DistributionMapping &amp;dm, int nvar, int ngrow, const MFInfo &amp;info=MFInfo(), const FabFactory&lt; FArrayBox &gt; &amp;factory=FArrayBoxFactory())</argsstring>
        <name>define</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>bxs</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nvar</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngrow</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1MFInfo" kindref="compound">MFInfo</ref> &amp;</type>
          <declname>info</declname>
          <defval><ref refid="structamrex_1_1MFInfo" kindref="compound">MFInfo</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &gt; &amp;</type>
          <declname>factory</declname>
          <defval><ref refid="namespaceamrex_1abda821661019fb0a77eb3a9706dc7330" kindref="member">FArrayBoxFactory</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="114" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="550" bodyend="559"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1ab92b4725094cc3ffaf0b9969a0edc934" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiFab::define</definition>
        <argsstring>(const BoxArray &amp;bxs, const DistributionMapping &amp;dm, int nvar, const IntVect &amp;ngrow, const MFInfo &amp;info=MFInfo(), const FabFactory&lt; FArrayBox &gt; &amp;factory=FArrayBoxFactory())</argsstring>
        <name>define</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>bxs</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nvar</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ngrow</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1MFInfo" kindref="compound">MFInfo</ref> &amp;</type>
          <declname>info</declname>
          <defval><ref refid="structamrex_1_1MFInfo" kindref="compound">MFInfo</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &gt; &amp;</type>
          <declname>factory</declname>
          <defval><ref refid="namespaceamrex_1abda821661019fb0a77eb3a9706dc7330" kindref="member">FArrayBoxFactory</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="126" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="562" bodyend="571"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1af008350cc46bb35e93244deae918a1e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
        <definition>MultiFab &amp; amrex::MultiFab::operator=</definition>
        <argsstring>(Real r)</argsstring>
        <name>operator=</name>
        <param>
          <type>Real</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="138" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="543" bodyend="547"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a540eb1714a5eece782de2a4afdd62c8e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::MultiFab::min</definition>
        <argsstring>(int comp, int nghost=0, bool local=false) const</argsstring>
        <name>min</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Returns the minimum value contained in component <computeroutput>comp</computeroutput> of the <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>The parameter <computeroutput>nghost</computeroutput> determines the number of boundary cells to search for the minimum. The default is to search only the valid regions of the FArrayBoxes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="148" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="697" bodyend="777"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a5ab77282de25bb040248778d41327903" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::MultiFab::min</definition>
        <argsstring>(const Box &amp;region, int comp, int nghost=0, bool local=false) const</argsstring>
        <name>min</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>region</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Identical to <ref refid="classamrex_1_1MultiFab_1a540eb1714a5eece782de2a4afdd62c8e" kindref="member">min()</ref> function, but confines its search to intersection of <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> b and the <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="155" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="780" bodyend="823"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1abb92462276ca55cd70f16507118f63ad" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::MultiFab::max</definition>
        <argsstring>(int comp, int nghost=0, bool local=false) const</argsstring>
        <name>max</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Returns the maximum value contained in component <computeroutput>comp</computeroutput> of the <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>The parameter <computeroutput>nghost</computeroutput> determines the number of boundary cells to search for the maximum. The default is to search only the valid regions of the FArrayBoxes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="167" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="826" bodyend="906"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a65d87ad5270fcaeb5786e5fdebe07347" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::MultiFab::max</definition>
        <argsstring>(const Box &amp;region, int comp, int nghost=0, bool local=false) const</argsstring>
        <name>max</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>region</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Identical to the previous <computeroutput><ref refid="classamrex_1_1MultiFab_1abb92462276ca55cd70f16507118f63ad" kindref="member">max()</ref></computeroutput> function, but confines its search to intersection of <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> b and the <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="174" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="909" bodyend="950"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a2c8965900aefbe0681bf72cb489b7027" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::MultiFab::norm0</definition>
        <argsstring>(int comp=0, int nghost=0, bool local=false, bool ignore_covered=false) const</argsstring>
        <name>norm0</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>ignore_covered</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Returns the maximum <emphasis>absolute</emphasis> value contained in component comp of the <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="182" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="1007" bodyend="1010"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a9d57175907c89a969b9b5392631e65cf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::MultiFab::norminf</definition>
        <argsstring>(int comp=0, int nghost=0, bool local=false, bool ignore_covered=false) const</argsstring>
        <name>norminf</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>ignore_covered</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="183" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" bodystart="183" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a6f5159e97350762eba3263f11ba3e653" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::MultiFab::norm0</definition>
        <argsstring>(const iMultiFab &amp;mask, int comp=0, int nghost=0, bool local=false) const</argsstring>
        <name>norm0</name>
        <param>
          <type>const <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="187" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="1001" bodyend="1004"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1abc7329288ae6f73f8fd7eda95e49b8ba" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::MultiFab::norminf</definition>
        <argsstring>(const iMultiFab &amp;mask, int comp=0, int nghost=0, bool local=false) const</argsstring>
        <name>norminf</name>
        <param>
          <type>const <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="188" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" bodystart="188" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a4a93902e69dd534d7a84cfbdc1acf32e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::MultiFab::norm0</definition>
        <argsstring>(int comp, int ncomp, IntVect const &amp;nghost, bool local=false, bool ignore_covered=false) const</argsstring>
        <name>norm0</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>ignore_covered</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="192" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="1013" bodyend="1016"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a727b71bae4005883ea88221157184346" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt;</type>
        <definition>Vector&lt; Real &gt; amrex::MultiFab::norm0</definition>
        <argsstring>(const Vector&lt; int &gt; &amp;comps, int nghost=0, bool local=false, bool ignore_covered=false) const</argsstring>
        <name>norm0</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>comps</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>ignore_covered</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Returns the maximum <emphasis>absolute</emphasis> values contained in each component of <computeroutput>comps</computeroutput> of the <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. <computeroutput>nghost</computeroutput> ghost cells are used. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="201" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="1019" bodyend="1034"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a92b462cb3d7c55a7d3277aaa9e3e0ff3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt;</type>
        <definition>Vector&lt;Real&gt; amrex::MultiFab::norminf</definition>
        <argsstring>(const Vector&lt; int &gt; &amp;comps, int nghost=0, bool local=false, bool ignore_covered=false) const</argsstring>
        <name>norminf</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>comps</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>ignore_covered</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="202" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" bodystart="202" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a5879f0308ed537286037a041e32fd810" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::MultiFab::norm1</definition>
        <argsstring>(int comp, const Periodicity &amp;period, bool ignore_covered=false) const</argsstring>
        <name>norm1</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>ignore_covered</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Returns the L1 norm of component <computeroutput>comp</computeroutput> over the <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>No ghost cells are used. This version has no double counting for nodal data. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="211" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="1105" bodyend="1124"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1afcdc4aaf73896a44ad364520af9a7398" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::MultiFab::norm1</definition>
        <argsstring>(int comp=0, int ngrow=0, bool local=false) const</argsstring>
        <name>norm1</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngrow</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Returns the L1 norm of component <computeroutput>comp</computeroutput> over the <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. <computeroutput>ngrow</computeroutput> ghost cells are used. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="216" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="1127" bodyend="1162"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1ae4ba8fc4756c0621e3872055ffce31b0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt;</type>
        <definition>Vector&lt; Real &gt; amrex::MultiFab::norm1</definition>
        <argsstring>(const Vector&lt; int &gt; &amp;comps, int ngrow=0, bool local=false) const</argsstring>
        <name>norm1</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>comps</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngrow</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Returns the L1 norm of each component of &quot;comps&quot; over the <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. ngrow ghost cells are used. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="221" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="1165" bodyend="1182"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1aa0b6bb4fb2ee206356cd613ed8458b8f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::MultiFab::norm2</definition>
        <argsstring>(int comp=0) const</argsstring>
        <name>norm2</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Returns the L2 norm of component <computeroutput>comp</computeroutput> over the <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. No ghost cells are used. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="226" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="1037" bodyend="1044"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a0982c02422dcb603d1c5129d744d6611" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::MultiFab::norm2</definition>
        <argsstring>(int comp, const Periodicity &amp;period) const</argsstring>
        <name>norm2</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
        </param>
        <briefdescription>
<para>Returns the L2 norm of component <computeroutput>comp</computeroutput> over the <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. No ghost cells are used. This version has no double counting for nodal data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="231" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="1047" bodyend="1086"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a933d1dd75c4441bf922f8c5baa931be4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt;</type>
        <definition>Vector&lt; Real &gt; amrex::MultiFab::norm2</definition>
        <argsstring>(const Vector&lt; int &gt; &amp;comps) const</argsstring>
        <name>norm2</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>comps</declname>
        </param>
        <briefdescription>
<para>Returns the L2 norm of each component of &quot;comps&quot; over the <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. No ghost cells are used. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="236" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="1089" bodyend="1102"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a62669a27ec4a577f0bef72dc2a1243aa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::MultiFab::sum</definition>
        <argsstring>(int comp=0, bool local=false) const</argsstring>
        <name>sum</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Returns the sum of component &quot;comp&quot; over the <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> <ndash/> no ghost cells are included. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="240" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="1185" bodyend="1188"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1afe7c47dff8cf8e0fb550d0e78c7b5375" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::MultiFab::sum_unique</definition>
        <argsstring>(int comp=0, bool local=false, const Periodicity &amp;period=Periodicity::NonPeriodic()) const</argsstring>
        <name>sum_unique</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <briefdescription>
<para><ref refid="structamrex_1_1Same" kindref="compound">Same</ref> as sum with <computeroutput>local</computeroutput> =false, but for non-cell-centered data, this skips non-unique points that are owned by multiple boxes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="248" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="1191" bodyend="1241"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1aafbc29a68d3c0c000fee414f76f7b79c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiFab::plus</definition>
        <argsstring>(Real val, int comp, int num_comp, int nghost=0)</argsstring>
        <name>plus</name>
        <param>
          <type>Real</type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Adds the scalar value <computeroutput>val</computeroutput> to the value of each cell in the specified subregion of the <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>The subregion consists of the <computeroutput>num_comp</computeroutput> components starting at component <computeroutput>comp</computeroutput>. The value of nghost specifies the number of cells in the boundary region of each <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> in the subregion that should be modified. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="260" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="1256" bodyend="1264"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a9d8ec2a7197f373ce88a43a2adaf1da0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiFab::plus</definition>
        <argsstring>(Real val, const Box &amp;region, int comp, int num_comp, int nghost=0)</argsstring>
        <name>plus</name>
        <param>
          <type>Real</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>region</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Identical to the previous version of <ref refid="classamrex_1_1MultiFab_1aafbc29a68d3c0c000fee414f76f7b79c" kindref="member">plus()</ref>, with the restriction that the subregion is further constrained to the intersection with <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> region. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="269" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="1267" bodyend="1274"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a0b410a02ca211c74033d77fac9b8a40b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiFab::plus</definition>
        <argsstring>(Real val, int nghost)</argsstring>
        <name>plus</name>
        <param>
          <type>Real</type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
<para>Adds the scalar value val to the value of each cell in the valid region of each component of the <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. The value of nghost specifies the number of cells in the boundary region that should be modified. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="280" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="405" bodyend="408"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a38506771a271ef8a5d4b6c3065815566" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiFab::plus</definition>
        <argsstring>(Real val, const Box &amp;region, int nghost)</argsstring>
        <name>plus</name>
        <param>
          <type>Real</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>region</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
<para>Adds the scalar value val to the value of each cell in the valid region of each component of the <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>, that also intersects the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> region. The value of nghost specifies the number of cells in the boundary region of each <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> in the subregion that should be modified. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="289" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="411" bodyend="414"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1aa9158374809b83cfd40a8092d4e63bdd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiFab::mult</definition>
        <argsstring>(Real val, int comp, int num_comp, int nghost=0)</argsstring>
        <name>mult</name>
        <param>
          <type>Real</type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Scales the value of each cell in the specified subregion of the <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> by the scalar val (a[i] &lt;- a[i]*val). The subregion consists of the num_comp components starting at component comp. The value of nghost specifies the number of cells in the boundary region of each <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> in the subregion that should be modified. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="300" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="1283" bodyend="1290"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a75e0a3256784cedf410454d5bd9674e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiFab::mult</definition>
        <argsstring>(Real val, const Box &amp;region, int comp, int num_comp, int nghost=0)</argsstring>
        <name>mult</name>
        <param>
          <type>Real</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>region</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Identical to the previous version of <ref refid="classamrex_1_1MultiFab_1aa9158374809b83cfd40a8092d4e63bdd" kindref="member">mult()</ref>, with the restriction that the subregion is further constrained to the intersection with <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> region. The value of nghost specifies the number of cells in the boundary region of each <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> in the subregion that should be modified. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="311" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="1293" bodyend="1300"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a3f3d92f9f07cf43431b03744b50edbdb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiFab::mult</definition>
        <argsstring>(Real val, int nghost=0)</argsstring>
        <name>mult</name>
        <param>
          <type>Real</type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Scales the value of each cell in the valid region of each component of the <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> by the scalar val (a[i] &lt;- a[i]*val). The value of nghost specifies the number of cells in the boundary region that should be modified. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="322" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="417" bodyend="420"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1aa872fb55fa5e6dc2008584d6d6e927b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiFab::mult</definition>
        <argsstring>(Real val, const Box &amp;region, int nghost=0)</argsstring>
        <name>mult</name>
        <param>
          <type>Real</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>region</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Scales the value of each cell in the valid region of each component of the <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> by the scalar val (a[i] &lt;- a[i]*val), that also intersects the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> region. The value of nghost specifies the number of cells in the boundary region of each <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> in the subregion that should be modified. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="331" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="423" bodyend="426"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a1151850ade9c29c2c657b173ad4a29c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiFab::invert</definition>
        <argsstring>(Real numerator, int comp, int num_comp, int nghost=0)</argsstring>
        <name>invert</name>
        <param>
          <type>Real</type>
          <declname>numerator</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Replaces the value of each cell in the specified subregion of the <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> with its reciprocal multiplied by the value of numerator. The subregion consists of the num_comp components starting at component comp. The value of nghost specifies the number of cells in the boundary region of each <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> in the subregion that should be modified. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="342" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="1303" bodyend="1310"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a773e797a62924f1a23e4774c11b97f6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiFab::invert</definition>
        <argsstring>(Real numerator, const Box &amp;region, int comp, int num_comp, int nghost=0)</argsstring>
        <name>invert</name>
        <param>
          <type>Real</type>
          <declname>numerator</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>region</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Identical to the previous version of <ref refid="classamrex_1_1MultiFab_1a1151850ade9c29c2c657b173ad4a29c3" kindref="member">invert()</ref>, with the restriction that the subregion is further constrained to the intersection with <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> region. The value of nghost specifies the number of cells in the boundary region of each <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> in the subregion that should be modified. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="353" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="1313" bodyend="1320"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1ad7883de5b1bd515c4714e434e2a98547" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiFab::invert</definition>
        <argsstring>(Real numerator, int nghost)</argsstring>
        <name>invert</name>
        <param>
          <type>Real</type>
          <declname>numerator</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
<para>Replaces the value of each cell in the specified subregion of the <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> with its reciprocal multiplied by the value of numerator. The value of nghost specifies the number of cells in the boundary region that should be modified. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="364" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="429" bodyend="432"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1abc88cd9b7b451baaea2d53b97d20368a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiFab::invert</definition>
        <argsstring>(Real numerator, const Box &amp;region, int nghost)</argsstring>
        <name>invert</name>
        <param>
          <type>Real</type>
          <declname>numerator</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>region</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
<para>Replaces the value of each cell in the specified subregion of the <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>, that also intersects the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> region, with its reciprocal multiplied by the value of numerator. The value of nghost specifies the number of cells in the boundary region of each <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> in the subregion that should be modified. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="373" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="435" bodyend="438"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1acaf881689685c3fa82ed65829f6be4c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiFab::negate</definition>
        <argsstring>(int comp, int num_comp, int nghost=0)</argsstring>
        <name>negate</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Negates the value of each cell in the specified subregion of the <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. The subregion consists of the num_comp components starting at component comp. The value of nghost specifies the number of cells in the boundary region of each <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> in the subregion that should be modified. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="383" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="1323" bodyend="1329"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1ad7cd1360a57300fc2e5eb5afdf6ff1dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiFab::negate</definition>
        <argsstring>(const Box &amp;region, int comp, int num_comp, int nghost=0)</argsstring>
        <name>negate</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>region</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Identical to the previous version of <ref refid="classamrex_1_1MultiFab_1acaf881689685c3fa82ed65829f6be4c3" kindref="member">negate()</ref>, with the restriction that the subregion is further constrained to the intersection with <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> region. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="391" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="1332" bodyend="1338"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a9939b447c0dc1a130c6952d2b376f8ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiFab::negate</definition>
        <argsstring>(int nghost=0)</argsstring>
        <name>negate</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Negates the value of each cell in the valid region of the <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. The value of nghost specifies the number of cells in the boundary region that should be modified. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="400" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="441" bodyend="444"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1ae4ff818a86f791cca374edbe34bb6830" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiFab::negate</definition>
        <argsstring>(const Box &amp;region, int nghost=0)</argsstring>
        <name>negate</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>region</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Negates the value of each cell in the valid region of the <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> that also intersects the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> region. The value of nghost specifies the number of cells in the boundary region that should be modified. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="407" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="447" bodyend="450"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1ab351d9250414508cf086635f54e2e2ce" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>IntVect amrex::MultiFab::minIndex</definition>
        <argsstring>(int comp, int nghost=0) const</argsstring>
        <name>minIndex</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="410" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="985" bodyend="990"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a642f844c834d6fb714e3e0fc6eb75e56" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>IntVect amrex::MultiFab::maxIndex</definition>
        <argsstring>(int comp, int nghost=0) const</argsstring>
        <name>maxIndex</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="413" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="993" bodyend="998"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a6679e5d7843de95ca2245f599715b4f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiFab::plus</definition>
        <argsstring>(const MultiFab &amp;mf, int strt_comp, int num_comp, int nghost)</argsstring>
        <name>plus</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>strt_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
<para>This function adds the values of the cells in mf to the corresponding cells of this <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. mf is required to have the same <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> or &quot;valid region&quot; as this <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. The addition is done only to num_comp components, starting with component number strt_comp. The parameter nghost specifies the number of boundary cells that will be modified. If nghost == 0, only the valid region of each <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> will be modified. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="424" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="1277" bodyend="1280"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a1bc09d7836dcd4500472fa853a8fcd22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiFab::minus</definition>
        <argsstring>(const MultiFab &amp;mf, int strt_comp, int num_comp, int nghost)</argsstring>
        <name>minus</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>strt_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
<para>This function subtracts the values of the cells in mf from the corresponding cells of this <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. mf is required to have the same <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> or &quot;valid region&quot; as this <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. The subtraction is done only to num_comp components, starting with component number strt_comp. The parameter nghost specifies the number of boundary cells that will be modified. If nghost == 0, only the valid region of each <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> will be modified. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="437" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="1244" bodyend="1247"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1aca202d20f39f94aabb5ffd1581a535f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiFab::divide</definition>
        <argsstring>(const MultiFab &amp;mf, int strt_comp, int num_comp, int nghost)</argsstring>
        <name>divide</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>strt_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
<para>This function divides the values of the cells in mf from the corresponding cells of this <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. mf is required to have the same <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> or &quot;valid region&quot; as this <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. The division is done only to num_comp components, starting with component number strt_comp. The parameter nghost specifies the number of boundary cells that will be modified. If nghost == 0, only the valid region of each <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> will be modified. Note, nothing is done to protect against divide by zero. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="451" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="1250" bodyend="1253"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a4b718093de8d413ed21f372b9f65761f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::MultiFab::contains_nan</definition>
        <argsstring>(bool local=false) const</argsstring>
        <name>contains_nan</name>
        <param>
          <type>bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Are there any NaNs in the MF? This may return false, even if the MF contains NaNs, if the machine doesn&apos;t support the appropriate NaN testing functions. </para>
        </briefdescription>
        <detaileddescription>
<para>This version checks all components and grow cells. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="648" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="636" bodyend="639"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a77d980f51c794347641c653d5f88aefd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::MultiFab::contains_nan</definition>
        <argsstring>(int scomp, int ncomp, int ngrow=0, bool local=false) const</argsstring>
        <name>contains_nan</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngrow</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="649" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="587" bodyend="590"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1aed2689ad22160cb7a93e6b26aabd2972" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::MultiFab::contains_nan</definition>
        <argsstring>(int scomp, int ncomp, const IntVect &amp;ngrow, bool local=false) const</argsstring>
        <name>contains_nan</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ngrow</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="650" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="593" bodyend="633"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a95abf28111fc5c1a4bfe5f24bf7a6d05" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::MultiFab::contains_inf</definition>
        <argsstring>(bool local=false) const</argsstring>
        <name>contains_inf</name>
        <param>
          <type>bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Are there any Infs in the MF? This may return false, even if the MF contains Infs, if the machine doesn&apos;t support the appropriate Inf testing functions. This version checks all components and grow cells. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="657" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="691" bodyend="694"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a47a5806c8cffcf0f40ba72a7af2e8ac7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::MultiFab::contains_inf</definition>
        <argsstring>(int scomp, int ncomp, int ngrow=0, bool local=false) const</argsstring>
        <name>contains_inf</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngrow</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="658" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="685" bodyend="688"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a08e85daea7a8ba20067cd15af3725cd6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::MultiFab::contains_inf</definition>
        <argsstring>(int scomp, int ncomp, const IntVect &amp;ngrow, bool local=false) const</argsstring>
        <name>contains_inf</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ngrow</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="659" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="642" bodyend="682"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1afbd6dab928640c74eb1d7a28e8f36afa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &gt;</type>
        <definition>std::unique_ptr&lt; MultiFab &gt; amrex::MultiFab::OverlapMask</definition>
        <argsstring>(const Periodicity &amp;period=Periodicity::NonPeriodic()) const</argsstring>
        <name>OverlapMask</name>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <briefdescription>
<para>Return a mask indicating how many duplicates are in each point. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="664" column="22" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="1341" bodyend="1404"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a3c8c9bf8723fcfac9b8d410485e7ed4a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &gt;</type>
        <definition>std::unique_ptr&lt; iMultiFab &gt; amrex::MultiFab::OwnerMask</definition>
        <argsstring>(const Periodicity &amp;period=Periodicity::NonPeriodic()) const</argsstring>
        <name>OwnerMask</name>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <briefdescription>
<para>Owner is the grid with the lowest grid number containing the data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="666" column="22" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="1407" bodyend="1410"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a7e5a1ca37cf868e20311541187b08216" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiFab::AverageSync</definition>
        <argsstring>(const Periodicity &amp;period=Periodicity::NonPeriodic())</argsstring>
        <name>AverageSync</name>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <briefdescription>
<para>Sync up nodal data via averaging. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="669" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="1413" bodyend="1421"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1ad80a338735a5addaa47a0726cb24c8c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiFab::WeightedSync</definition>
        <argsstring>(const MultiFab &amp;wgt, const Periodicity &amp;period=Periodicity::NonPeriodic())</argsstring>
        <name>WeightedSync</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>wgt</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <briefdescription>
<para>Sync up nodal data with weights. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="671" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="1424" bodyend="1441"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1afc2840698e1cec5a44ebeb9d34783327" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiFab::OverrideSync</definition>
        <argsstring>(const iMultiFab &amp;msk, const Periodicity &amp;period=Periodicity::NonPeriodic())</argsstring>
        <name>OverrideSync</name>
        <param>
          <type>const <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &amp;</type>
          <declname>msk</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <briefdescription>
<para>Sync up nodal data with owners overriding non-owners. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="673" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="1444" bodyend="1447"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a5397e3c5e4cbb69279db604d3f1f2a60" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::MultiFab::Dot</definition>
        <argsstring>(const MultiFab &amp;x, int xcomp, const MultiFab &amp;y, int ycomp, int numcomp, int nghost, bool local=false)</argsstring>
        <name>Dot</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>xcomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ycomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Returns the dot product of two MultiFabs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="458" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="37" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a87437456f64f8610e6d34d17929fdb4f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::MultiFab::Dot</definition>
        <argsstring>(const MultiFab &amp;x, int xcomp, int numcomp, int nghost, bool local=false)</argsstring>
        <name>Dot</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>xcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Returns the dot product of a <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> with itself. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="465" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="45" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a115acdf454f3e0732ee54de9d5ff2057" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::MultiFab::Dot</definition>
        <argsstring>(const iMultiFab &amp;mask, const MultiFab &amp;x, int xcomp, const MultiFab &amp;y, int ycomp, int numcomp, int nghost, bool local=false)</argsstring>
        <name>Dot</name>
        <param>
          <type>const <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>xcomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ycomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="468" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="91" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a4a819ab01c7558b8982acb35eaf0f861" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiFab::Add</definition>
        <argsstring>(MultiFab &amp;dst, const MultiFab &amp;src, int srccomp, int dstcomp, int numcomp, int nghost)</argsstring>
        <name>Add</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dstcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
<para>Add src to dst including nghost ghost cells. The two MultiFabs MUST have the same underlying <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="476" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="151" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1adda7ad2b1b845b959488fd19acdd335b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiFab::Add</definition>
        <argsstring>(MultiFab &amp;dst, const MultiFab &amp;src, int srccomp, int dstcomp, int numcomp, const IntVect &amp;nghost)</argsstring>
        <name>Add</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dstcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="483" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="158" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1ab70ce65ff46ae21b8cc4e0584fe26ffa" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiFab::Copy</definition>
        <argsstring>(MultiFab &amp;dst, const MultiFab &amp;src, int srccomp, int dstcomp, int numcomp, int nghost)</argsstring>
        <name>Copy</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dstcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
<para>Copy from src to dst including nghost ghost cells. The two MultiFabs MUST have the same underlying <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. The copy is local. The parallel copy function is in FabArray.H. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="494" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="171" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1af5fd05a65f284f6e96a1deba5ef423bb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiFab::Copy</definition>
        <argsstring>(MultiFab &amp;dst, const MultiFab &amp;src, int srccomp, int dstcomp, int numcomp, const IntVect &amp;nghost)</argsstring>
        <name>Copy</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dstcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="501" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="178" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a2e29e28afce0aa520da5cd068cb5e96b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiFab::Swap</definition>
        <argsstring>(MultiFab &amp;dst, MultiFab &amp;src, int srccomp, int dstcomp, int numcomp, int nghost)</argsstring>
        <name>Swap</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dstcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
<para>Swap from src to dst including nghost ghost cells. The two MultiFabs MUST have the same underlying <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. The swap is local. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="513" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="191" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1ac259813cd54d52b5c20cad7c0f24c246" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiFab::Swap</definition>
        <argsstring>(MultiFab &amp;dst, MultiFab &amp;src, int srccomp, int dstcomp, int numcomp, const IntVect &amp;nghost)</argsstring>
        <name>Swap</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dstcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="520" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="198" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a5f37af40303a10e8d54e15c1931a5b8e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiFab::Subtract</definition>
        <argsstring>(MultiFab &amp;dst, const MultiFab &amp;src, int srccomp, int dstcomp, int numcomp, int nghost)</argsstring>
        <name>Subtract</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dstcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
<para>Subtract src from dst including nghost ghost cells. The two MultiFabs MUST have the same underlying <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="531" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="263" bodyend="267"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a4f2c04ea9d0f7a551bc2263b9a63d324" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiFab::Subtract</definition>
        <argsstring>(MultiFab &amp;dst, const MultiFab &amp;src, int srccomp, int dstcomp, int numcomp, const IntVect &amp;nghost)</argsstring>
        <name>Subtract</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dstcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="538" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="270" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a62db3405e4e92a2a5bd5d3d9d19698ba" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiFab::Multiply</definition>
        <argsstring>(MultiFab &amp;dst, const MultiFab &amp;src, int srccomp, int dstcomp, int numcomp, int nghost)</argsstring>
        <name>Multiply</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dstcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
<para>Multiply dst by src including nghost ghost cells. The two MultiFabs MUST have the same underlying <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="548" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="283" bodyend="287"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a1782d5eefcdae9512c4d9ece50a2253b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiFab::Multiply</definition>
        <argsstring>(MultiFab &amp;dst, const MultiFab &amp;src, int srccomp, int dstcomp, int numcomp, const IntVect &amp;nghost)</argsstring>
        <name>Multiply</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dstcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="555" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="290" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1aa87b51ae98f171c3624b5f6cbdfffac0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiFab::Divide</definition>
        <argsstring>(MultiFab &amp;dst, const MultiFab &amp;src, int srccomp, int dstcomp, int numcomp, int nghost)</argsstring>
        <name>Divide</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dstcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
<para>Divide dst by src including nghost ghost cells. The two MultiFabs MUST have the same underlying <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="565" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="303" bodyend="307"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1ac5e5a2510a046eb1e6567c06c71a55ad" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiFab::Divide</definition>
        <argsstring>(MultiFab &amp;dst, const MultiFab &amp;src, int srccomp, int dstcomp, int numcomp, const IntVect &amp;nghost)</argsstring>
        <name>Divide</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dstcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="572" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="310" bodyend="320"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a505eb471a78f4e0f8791b10cbb1bbd75" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiFab::Saxpy</definition>
        <argsstring>(MultiFab &amp;dst, Real a, const MultiFab &amp;src, int srccomp, int dstcomp, int numcomp, int nghost)</argsstring>
        <name>Saxpy</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dstcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
<para>dst += a*src </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="581" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="323" bodyend="327"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1aa06c264011c21bb5a97070ae7cf250d3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiFab::Xpay</definition>
        <argsstring>(MultiFab &amp;dst, Real a, const MultiFab &amp;src, int srccomp, int dstcomp, int numcomp, int nghost)</argsstring>
        <name>Xpay</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dstcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
<para>dst = src + a*dst </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="594" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="330" bodyend="334"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a0486c02587ea11cc9a30e9da8d7cf957" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiFab::LinComb</definition>
        <argsstring>(MultiFab &amp;dst, Real a, const MultiFab &amp;x, int xcomp, Real b, const MultiFab &amp;y, int ycomp, int dstcomp, int numcomp, int nghost)</argsstring>
        <name>LinComb</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>xcomp</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ycomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dstcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
<para>dst = a*x + b*y </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="607" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="337" bodyend="343"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a71038d97e0e66d46a0a45388b7614ce1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiFab::AddProduct</definition>
        <argsstring>(MultiFab &amp;dst, const MultiFab &amp;src1, int comp1, const MultiFab &amp;src2, int comp2, int dstcomp, int numcomp, int nghost)</argsstring>
        <name>AddProduct</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>src1</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp1</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>src2</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp2</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dstcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
<para>dst += src1*src2 </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="623" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="346" bodyend="352"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1ad85e43bc90758c5976c72acd8cfdb033" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiFab::AddProduct</definition>
        <argsstring>(MultiFab &amp;dst, const MultiFab &amp;src1, int comp1, const MultiFab &amp;src2, int comp2, int dstcomp, int numcomp, const IntVect &amp;nghost)</argsstring>
        <name>AddProduct</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>src1</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp1</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>src2</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp2</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dstcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="632" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="355" bodyend="402"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a7d869f54f3d6f4e3ede7eb0103954a9e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiFab::Initialize</definition>
        <argsstring>()</argsstring>
        <name>Initialize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="677" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="453" bodyend="466"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1ae7a5398061b1bffdd1679a3a78f8b741" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiFab::Finalize</definition>
        <argsstring>()</argsstring>
        <name>Finalize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="678" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="469" bodyend="472"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classamrex_1_1MultiFab_1aa4f9b9a2a37baa29e7767a80f6856dcd" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiFab::initVal</definition>
        <argsstring>()</argsstring>
        <name>initVal</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="686" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="574" bodyend="584"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A collection (stored as an array) of <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> objects. </para>
    </briefdescription>
    <detaileddescription>
<para>This class is useful for storing floating point data on a domain defined by a union of rectangular regions embedded in a uniform index space. <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> class extends the function of the underlying <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> class just as the <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> class extends the function of <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab&lt;Real&gt;</ref>. Additional member functions are defined for I/O and simple arithmetic operations on these aggregate objects.</para>
<para>This class does NOT provide a copy constructor or assignment operator. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>amrex::MultiFab</label>
        <link refid="classamrex_1_1MultiFab"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>amrex::FabArray&lt; FArrayBox &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>amrex::FabArrayBase</label>
        <link refid="classamrex_1_1FabArrayBase"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="51">
        <label>amrex::BaseFab&lt; Real &gt;</label>
        <link refid="classamrex_1_1BaseFab"/>
        <childnode refid="52" relation="public-inheritance">
        </childnode>
      </node>
      <node id="32">
        <label>amrex::FabArrayBase::CacheStats</label>
        <link refid="structamrex_1_1FabArrayBase_1_1CacheStats"/>
        <childnode refid="33" relation="usage">
          <edgelabel>name</edgelabel>
        </childnode>
      </node>
      <node id="39">
        <label>amrex::FabArrayBase::FabArrayStats</label>
        <link refid="structamrex_1_1FabArrayBase_1_1FabArrayStats"/>
      </node>
      <node id="54">
        <label>amrex::ArenaInfo</label>
        <link refid="structamrex_1_1ArenaInfo"/>
      </node>
      <node id="17">
        <label>amrex::BATindexType</label>
        <link refid="structamrex_1_1BATindexType"/>
        <childnode refid="15" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
      </node>
      <node id="57">
        <label>std::unique_ptr&lt; amrex::FBData&lt; FArrayBox &gt; &gt;</label>
      </node>
      <node id="40">
        <label>std::map&lt; amrex::FabArrayBase::BDKey, int &gt;</label>
        <childnode refid="20" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
      </node>
      <node id="19">
        <label>amrex::BATindexType_coarsenRatio</label>
        <link refid="structamrex_1_1BATindexType__coarsenRatio"/>
        <childnode refid="9" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>K</label>
      </node>
      <node id="18">
        <label>amrex::BATnull</label>
        <link refid="structamrex_1_1BATnull"/>
      </node>
      <node id="9">
        <label>amrex::IntVect</label>
        <link refid="classamrex_1_1IntVect"/>
        <childnode refid="9" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>T</label>
      </node>
      <node id="58">
        <label>std::unique_ptr&lt; amrex::FabArray&lt; FArrayBox &gt; &gt;</label>
      </node>
      <node id="56">
        <label>Real</label>
      </node>
      <node id="26">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="6" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="61">
        <label>amrex::MultiArray4&lt; value_type &gt;</label>
        <link refid="structamrex_1_1MultiArray4"/>
      </node>
      <node id="52">
        <label>amrex::DataAllocator</label>
        <link refid="structamrex_1_1DataAllocator"/>
        <childnode refid="53" relation="usage">
          <edgelabel>m_arena</edgelabel>
        </childnode>
      </node>
      <node id="23">
        <label>std::unordered_map&lt; IntVect, std::vector&lt; int &gt;, IntVect::shift_hasher &gt;</label>
        <childnode refid="9" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="24" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="47">
        <label>amrex::MultiArray4&lt; value_type const &gt;</label>
        <link refid="structamrex_1_1MultiArray4"/>
      </node>
      <node id="4">
        <label>std::map&lt; K, T &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="53">
        <label>amrex::Arena</label>
        <link refid="classamrex_1_1Arena"/>
        <childnode refid="54" relation="usage">
          <edgelabel>arena_info</edgelabel>
        </childnode>
      </node>
      <node id="30">
        <label>amrex::Vector&lt; int &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="26" relation="public-inheritance">
        </childnode>
      </node>
      <node id="37">
        <label>std::map&lt; std::string, amrex::FabArrayBase::meminfo &gt;</label>
        <childnode refid="38" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
        <childnode refid="33" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
      </node>
      <node id="14">
        <label>amrex::Orientation</label>
        <link refid="classamrex_1_1Orientation"/>
      </node>
      <node id="22">
        <label>amrex::BARef</label>
        <link refid="structamrex_1_1BARef"/>
        <childnode refid="9" relation="usage">
          <edgelabel>crsn</edgelabel>
        </childnode>
        <childnode refid="23" relation="usage">
          <edgelabel>hash</edgelabel>
        </childnode>
        <childnode refid="25" relation="usage">
          <edgelabel>m_abox</edgelabel>
        </childnode>
        <childnode refid="27" relation="usage">
          <edgelabel>bbox</edgelabel>
        </childnode>
      </node>
      <node id="34">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="11">
        <label>amrex::BATransformer</label>
        <link refid="structamrex_1_1BATransformer"/>
        <childnode refid="12" relation="usage">
          <edgelabel>m_op</edgelabel>
        </childnode>
      </node>
      <node id="16">
        <label>amrex::BATcoarsenRatio</label>
        <link refid="structamrex_1_1BATcoarsenRatio"/>
        <childnode refid="9" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
        </childnode>
      </node>
      <node id="60">
        <label>amrex::FabArray&lt; FAB &gt;::ShMem</label>
        <link refid="structamrex_1_1FabArray_1_1ShMem"/>
      </node>
      <node id="12">
        <label>amrex::BATransformer::BATOp</label>
        <link refid="unionamrex_1_1BATransformer_1_1BATOp"/>
        <childnode refid="13" relation="usage">
          <edgelabel>m_bndryReg</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>m_coarsenRatio</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>m_indexType</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>m_null</edgelabel>
        </childnode>
        <childnode refid="19" relation="usage">
          <edgelabel>m_indexType_coarsenRatio</edgelabel>
        </childnode>
      </node>
      <node id="49">
        <label>std::vector&lt; FArrayBox * &gt;</label>
        <childnode refid="50" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="41">
        <label>std::multimap&lt; K, T &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="43">
        <label>amrex::BoxArray</label>
        <link refid="classamrex_1_1BoxArray"/>
        <childnode refid="44" relation="usage">
          <edgelabel>m_ref</edgelabel>
        </childnode>
        <childnode refid="45" relation="usage">
          <edgelabel>m_simplified_list</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>m_bat</edgelabel>
        </childnode>
      </node>
      <node id="42">
        <label>std::vector&lt; std::string &gt;</label>
        <childnode refid="33" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="27">
        <label>amrex::Box</label>
        <link refid="classamrex_1_1Box"/>
        <childnode refid="9" relation="usage">
          <edgelabel>bigend</edgelabel>
          <edgelabel>smallend</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>btype</edgelabel>
        </childnode>
      </node>
      <node id="48">
        <label>std::unique_ptr&lt; amrex::PCData&lt; FArrayBox &gt; &gt;</label>
      </node>
      <node id="44">
        <label>std::shared_ptr&lt; amrex::BARef &gt;</label>
      </node>
      <node id="28">
        <label>amrex::DistributionMapping::RefID</label>
        <link refid="structamrex_1_1DistributionMapping_1_1RefID"/>
        <childnode refid="29" relation="usage">
          <edgelabel>data</edgelabel>
        </childnode>
      </node>
      <node id="36">
        <label>std::shared_ptr&lt; amrex::DistributionMapping::Ref &gt;</label>
      </node>
      <node id="13">
        <label>amrex::BATbndryReg</label>
        <link refid="structamrex_1_1BATbndryReg"/>
        <childnode refid="9" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
          <edgelabel>m_doihi</edgelabel>
          <edgelabel>m_doilo</edgelabel>
          <edgelabel>m_hishft</edgelabel>
          <edgelabel>m_loshft</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>m_face</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>amrex::FabArrayBase::ParForInfo</label>
        <link refid="structamrex_1_1FabArrayBase_1_1ParForInfo"/>
        <childnode refid="9" relation="usage">
          <edgelabel>m_ng</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>m_boxes</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>m_bat</edgelabel>
        </childnode>
      </node>
      <node id="15">
        <label>amrex::IndexType</label>
        <link refid="classamrex_1_1IndexType"/>
      </node>
      <node id="29">
        <label>amrex::DistributionMapping::Ref</label>
        <link refid="structamrex_1_1DistributionMapping_1_1Ref"/>
        <childnode refid="30" relation="usage">
          <edgelabel>m_index_array</edgelabel>
          <edgelabel>m_pmap</edgelabel>
        </childnode>
        <childnode refid="31" relation="usage">
          <edgelabel>m_ownership</edgelabel>
        </childnode>
      </node>
      <node id="59">
        <label>amrex::Vector&lt; std::string &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="26" relation="public-inheritance">
        </childnode>
      </node>
      <node id="55">
        <label>amrex::FABio</label>
        <link refid="classamrex_1_1FABio"/>
      </node>
      <node id="38">
        <label>amrex::FabArrayBase::meminfo</label>
        <link refid="structamrex_1_1FabArrayBase_1_1meminfo"/>
      </node>
      <node id="35">
        <label>amrex::DistributionMapping</label>
        <link refid="classamrex_1_1DistributionMapping"/>
        <childnode refid="36" relation="usage">
          <edgelabel>m_ref</edgelabel>
        </childnode>
      </node>
      <node id="20">
        <label>amrex::FabArrayBase::BDKey</label>
        <link refid="structamrex_1_1FabArrayBase_1_1BDKey"/>
        <childnode refid="21" relation="usage">
          <edgelabel>m_ba_id</edgelabel>
        </childnode>
        <childnode refid="28" relation="usage">
          <edgelabel>m_dm_id</edgelabel>
        </childnode>
      </node>
      <node id="31">
        <label>std::vector&lt; bool &gt;</label>
      </node>
      <node id="46">
        <label>std::unique_ptr&lt; amrex::FabFactory&lt; FArrayBox &gt; &gt;</label>
      </node>
      <node id="1">
        <label>amrex::MultiFab</label>
        <link refid="classamrex_1_1MultiFab"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="45">
        <label>std::shared_ptr&lt; amrex::BoxList &gt;</label>
      </node>
      <node id="10">
        <label>amrex::BoxIndexer</label>
        <link refid="structamrex_1_1BoxIndexer"/>
      </node>
      <node id="50">
        <label>amrex::FArrayBox</label>
        <link refid="classamrex_1_1FArrayBox"/>
        <childnode refid="51" relation="public-inheritance">
        </childnode>
        <childnode refid="55" relation="usage">
          <edgelabel>fabio</edgelabel>
        </childnode>
        <childnode refid="56" relation="usage">
          <edgelabel>initval</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>amrex::FabArray&lt; FArrayBox &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="46" relation="usage">
          <edgelabel>m_factory</edgelabel>
        </childnode>
        <childnode refid="47" relation="usage">
          <edgelabel>m_const_arrays</edgelabel>
        </childnode>
        <childnode refid="48" relation="usage">
          <edgelabel>pcd</edgelabel>
        </childnode>
        <childnode refid="49" relation="usage">
          <edgelabel>m_fabs_v</edgelabel>
        </childnode>
        <childnode refid="57" relation="usage">
          <edgelabel>fbd</edgelabel>
        </childnode>
        <childnode refid="52" relation="usage">
          <edgelabel>m_dallocator</edgelabel>
        </childnode>
        <childnode refid="58" relation="usage">
          <edgelabel>os_temp</edgelabel>
        </childnode>
        <childnode refid="59" relation="usage">
          <edgelabel>m_tags</edgelabel>
        </childnode>
        <childnode refid="60" relation="usage">
          <edgelabel>shmem</edgelabel>
        </childnode>
        <childnode refid="61" relation="usage">
          <edgelabel>m_arrays</edgelabel>
        </childnode>
      </node>
      <node id="21">
        <label>amrex::BoxArray::RefID</label>
        <link refid="structamrex_1_1BoxArray_1_1RefID"/>
        <childnode refid="22" relation="usage">
          <edgelabel>data</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>std::multimap&lt; amrex::FabArrayBase::BDKey, amrex::FabArrayBase::ParForInfo * &gt;</label>
        <childnode refid="8" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
        <childnode refid="20" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
      </node>
      <node id="25">
        <label>amrex::Vector&lt; amrex::Box &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="26" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>amrex::FabArrayBase</label>
        <link refid="classamrex_1_1FabArrayBase"/>
        <childnode refid="4" relation="usage">
          <edgelabel>m_TheTileArrayCache</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>m_TheParForCache</edgelabel>
        </childnode>
        <childnode refid="32" relation="usage">
          <edgelabel>m_CFinfo_stats</edgelabel>
          <edgelabel>m_CPC_stats</edgelabel>
          <edgelabel>m_FBC_stats</edgelabel>
          <edgelabel>m_FPinfo_stats</edgelabel>
          <edgelabel>m_TAC_stats</edgelabel>
        </childnode>
        <childnode refid="35" relation="usage">
          <edgelabel>distributionMap</edgelabel>
        </childnode>
        <childnode refid="37" relation="usage">
          <edgelabel>m_mem_usage</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>comm_tile_size</edgelabel>
          <edgelabel>mfiter_tile_size</edgelabel>
          <edgelabel>n_filled</edgelabel>
          <edgelabel>n_grow</edgelabel>
        </childnode>
        <childnode refid="39" relation="usage">
          <edgelabel>m_FA_stats</edgelabel>
        </childnode>
        <childnode refid="40" relation="usage">
          <edgelabel>m_BD_count</edgelabel>
        </childnode>
        <childnode refid="30" relation="usage">
          <edgelabel>indexArray</edgelabel>
        </childnode>
        <childnode refid="20" relation="usage">
          <edgelabel>m_bdkey</edgelabel>
        </childnode>
        <childnode refid="41" relation="usage">
          <edgelabel>m_TheCPCache</edgelabel>
          <edgelabel>m_TheCrseFineCache</edgelabel>
          <edgelabel>m_TheFBCache</edgelabel>
          <edgelabel>m_TheFillPatchCache</edgelabel>
          <edgelabel>m_ThePolarBCache</edgelabel>
          <edgelabel>m_TheRB180Cache</edgelabel>
          <edgelabel>m_TheRB90Cache</edgelabel>
        </childnode>
        <childnode refid="31" relation="usage">
          <edgelabel>ownership</edgelabel>
        </childnode>
        <childnode refid="42" relation="usage">
          <edgelabel>m_region_tag</edgelabel>
        </childnode>
        <childnode refid="43" relation="usage">
          <edgelabel>boxarray</edgelabel>
        </childnode>
      </node>
      <node id="24">
        <label>std::vector&lt; int &gt;</label>
      </node>
      <node id="33">
        <label>std::string</label>
        <childnode refid="34" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="35" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" bodystart="38" bodyend="687"/>
    <listofallmembers>
      <member refid="classamrex_1_1FabArray_1a0966955f0937e0119cb942c5968ddb15" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>abs</name></member>
      <member refid="classamrex_1_1FabArray_1a3c57732914fe734955ae11ab8561f3b4" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>abs</name></member>
      <member refid="classamrex_1_1MultiFab_1a4a819ab01c7558b8982acb35eaf0f861" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>Add</name></member>
      <member refid="classamrex_1_1MultiFab_1adda7ad2b1b845b959488fd19acdd335b" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>Add</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cffa10289ce78187f199681fabf1c9956399" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>ADD</name></member>
      <member refid="classamrex_1_1MultiFab_1a71038d97e0e66d46a0a45388b7614ce1" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>AddProduct</name></member>
      <member refid="classamrex_1_1MultiFab_1ad85e43bc90758c5976c72acd8cfdb033" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>AddProduct</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a294641949d2f4dd2161ba42a6b10d570" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>addThisBD</name></member>
      <member refid="classamrex_1_1FabArray_1ab7135858e136a96334d492724c02f2f1" prot="private" virt="non-virtual"><scope>amrex::MultiFab</scope><name>AllocFabs</name></member>
      <member refid="classamrex_1_1FabArray_1acfab6e1a9aaaffd0c875021c5f10c0bb" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>arena</name></member>
      <member refid="classamrex_1_1FabArray_1a6484b86e240ddcddbe0d68e9408e1d94" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>array</name></member>
      <member refid="classamrex_1_1FabArray_1a7d3d77aaf852452dd793e107eb784925" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>array</name></member>
      <member refid="classamrex_1_1FabArray_1ac907b6c39f6d2ea0ab87ad3e74286c83" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>array</name></member>
      <member refid="classamrex_1_1FabArray_1abbd458e11bca4e99e5409e864467fea0" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>array</name></member>
      <member refid="classamrex_1_1FabArray_1a1f012a06273cbacc44f65f9fbf22b65b" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>array</name></member>
      <member refid="classamrex_1_1FabArray_1ada70f3e79e1fc98346262f5c4e202b56" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>array</name></member>
      <member refid="classamrex_1_1FabArray_1a26817d3c7daad0d94c38f599dfb48aaf" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>array</name></member>
      <member refid="classamrex_1_1FabArray_1af577de2923ead0696295f5a3960af026" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>array</name></member>
      <member refid="classamrex_1_1FabArray_1a968d143683b63220ddbded86cf5010a0" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>arrays</name></member>
      <member refid="classamrex_1_1FabArray_1a980019a53308f95d935ad936288ef3c1" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>arrays</name></member>
      <member refid="classamrex_1_1FabArray_1ac8cc160bbc8e86e227c77ac768740eeb" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>atLocalIdx</name></member>
      <member refid="classamrex_1_1FabArray_1ad78e2ef302657d35d53cfe6a494d6f12" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>atLocalIdx</name></member>
      <member refid="classamrex_1_1MultiFab_1a7e5a1ca37cf868e20311541187b08216" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>AverageSync</name></member>
      <member refid="classamrex_1_1FabArrayBase_1acc3c1d759fbd867cf7d9c806e56c30c7" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>box</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a4bb7e999eee8c04f07573269b54e39d0" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>boxArray</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ae63b22ccabe6c5af01dd0779c60740c8" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>boxarray</name></member>
      <member refid="classamrex_1_1FabArray_1ad37c52d123770b902efbb42a7ba56578" prot="private" virt="non-virtual"><scope>amrex::MultiFab</scope><name>build_arrays</name></member>
      <member refid="classamrex_1_1FabArray_1a4f4a269de9e494ef89075265e5b8ecb2" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>BuildMask</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a3bb1453b2bf26b145d0553dcaf8332be" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>buildTileArray</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ad8ef26468982ff9ba6e2fbc5eb8073bb" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>bytesOfMapOfCopyComTagContainers</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ab93444c8298b6446b699b33cf6c9247b" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>CFinfoCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ae15d8b6b473748103771433c507773ad" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>CFinfoCacheIter</name></member>
      <member refid="classamrex_1_1FabArray_1a7544c03f72d87f3f49ea0683848dc8aa" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>clear</name></member>
      <member refid="classamrex_1_1FabArray_1a3d078863cd6f3c8fc6ee8929573be274" prot="private" virt="non-virtual"><scope>amrex::MultiFab</scope><name>clear_arrays</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a1033b7779ec8b48b594b158fbabe13b4" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>clearThisBD</name></member>
      <member refid="classamrex_1_1FabArray_1a202d8ada102cc6fc40749039c0e1f3a7" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>CMD_local_setVal_gpu</name></member>
      <member refid="classamrex_1_1FabArray_1a2064856b8d0efe0ae3e92d91a72f3274" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>CMD_remote_setVal_gpu</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ab114448634e4d64e8584321d24ba3990" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>comm_tile_size</name></member>
      <member refid="classamrex_1_1FabArray_1a0af1d5ec31ed2b73f391952c5d45660a" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>const_array</name></member>
      <member refid="classamrex_1_1FabArray_1a69cbd579804bcf2d56900787806a3361" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>const_array</name></member>
      <member refid="classamrex_1_1FabArray_1acf86ed0530ed660096a54e699b402940" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>const_array</name></member>
      <member refid="classamrex_1_1FabArray_1ab9b3285ee8d8f8d97703a9e997bbd8ec" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>const_array</name></member>
      <member refid="classamrex_1_1FabArray_1ae2c5db543d1317f228503a98b47ed796" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>const_arrays</name></member>
      <member refid="classamrex_1_1MultiFab_1a95abf28111fc5c1a4bfe5f24bf7a6d05" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>contains_inf</name></member>
      <member refid="classamrex_1_1MultiFab_1a47a5806c8cffcf0f40ba72a7af2e8ac7" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>contains_inf</name></member>
      <member refid="classamrex_1_1MultiFab_1a08e85daea7a8ba20067cd15af3725cd6" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>contains_inf</name></member>
      <member refid="classamrex_1_1MultiFab_1a4b718093de8d413ed21f372b9f65761f" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>contains_nan</name></member>
      <member refid="classamrex_1_1MultiFab_1a77d980f51c794347641c653d5f88aefd" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>contains_nan</name></member>
      <member refid="classamrex_1_1MultiFab_1aed2689ad22160cb7a93e6b26aabd2972" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>contains_nan</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cffa30d7d89f4f6df2117a0c88fcec1a65cb" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>COPY</name></member>
      <member refid="classamrex_1_1FabArray_1a6b28e002648520d4d0349bf94ab3a576" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>copy</name></member>
      <member refid="classamrex_1_1FabArray_1a960ecb1ed695a7e13cbc7c3cff3f934a" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>copy</name></member>
      <member refid="classamrex_1_1FabArray_1a0194c55a13a8695b863eec146146335c" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>copy</name></member>
      <member refid="classamrex_1_1FabArray_1a097eb48c84133dcf0c0cb0fa40ca5f50" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>copy</name></member>
      <member refid="classamrex_1_1MultiFab_1ab70ce65ff46ae21b8cc4e0584fe26ffa" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>Copy</name></member>
      <member refid="classamrex_1_1MultiFab_1af5fd05a65f284f6e96a1deba5ef423bb" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>Copy</name></member>
      <member refid="classamrex_1_1MultiFab_1a1124d24928511321f4381ebd60b0c15b" prot="private" virt="non-virtual"><scope>amrex::MultiFab</scope><name>CopyComTagsContainer</name></member>
      <member refid="classamrex_1_1FabArray_1a9d247d17dd40dc29f57f87556b50b62a" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>copyTo</name></member>
      <member refid="classamrex_1_1FabArray_1adb1c4e9d6b9a2f607e18cc7426bbcef6" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>copyTo</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ab76531d8f4022eaa58de8ba56796e5de" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>CPCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a9b1e2db87b23393e6a9a51718fa451b1" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>CPCacheIter</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cff" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>CpOp</name></member>
      <member refid="classamrex_1_1MultiFab_1a08cbe2b2bf9887d4971bd9270c3aa734" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>define</name></member>
      <member refid="classamrex_1_1MultiFab_1ab92b4725094cc3ffaf0b9969a0edc934" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>define</name></member>
      <member refid="classamrex_1_1FabArray_1a4b2db0304bc84a002692917c83bc1626" prot="public" virt="non-virtual" ambiguityscope="FabArray&lt; FArrayBox &gt;::"><scope>amrex::MultiFab</scope><name>define</name></member>
      <member refid="classamrex_1_1FabArray_1ae978e4109861cb21bbb90d389fee4a01" prot="public" virt="non-virtual" ambiguityscope="FabArray&lt; FArrayBox &gt;::"><scope>amrex::MultiFab</scope><name>define</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a79b45950358798ae16a0dc928b8ee0ba" prot="public" virt="non-virtual" ambiguityscope="amrex::FabArrayBase::"><scope>amrex::MultiFab</scope><name>define</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ad5c3a8098f8bb8aec61ed6b213340169" prot="public" virt="non-virtual" ambiguityscope="amrex::FabArrayBase::"><scope>amrex::MultiFab</scope><name>define</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a2099ffa4c81398ed273722ce2ff7b6f3" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>define_fb_metadata</name></member>
      <member refid="classamrex_1_1FabArray_1a8a547f660eb49f5b25df2a1eddcd7eef" prot="protected" virt="non-virtual"><scope>amrex::MultiFab</scope><name>define_function_called</name></member>
      <member refid="classamrex_1_1FabArray_1a8c74ba9f034d3ca5e94e21eeef3be455" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>defined</name></member>
      <member refid="classamrex_1_1FabArray_1a27dbf4d9c26df790485a219856f9d2e5" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>defined</name></member>
      <member refid="classamrex_1_1FabArrayBase_1adcb92e864340876da67df2fc64d8bdd7" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>distributionMap</name></member>
      <member refid="classamrex_1_1FabArrayBase_1abd59469241abaab18e1c2db8b7ceb4ed" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>DistributionMap</name></member>
      <member refid="classamrex_1_1MultiFab_1aca202d20f39f94aabb5ffd1581a535f2" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>divide</name></member>
      <member refid="classamrex_1_1MultiFab_1aa87b51ae98f171c3624b5f6cbdfffac0" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>Divide</name></member>
      <member refid="classamrex_1_1MultiFab_1ac5e5a2510a046eb1e6567c06c71a55ad" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>Divide</name></member>
      <member refid="classamrex_1_1MultiFab_1a5397e3c5e4cbb69279db604d3f1f2a60" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>Dot</name></member>
      <member refid="classamrex_1_1MultiFab_1a87437456f64f8610e6d34d17929fdb4f" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>Dot</name></member>
      <member refid="classamrex_1_1MultiFab_1a115acdf454f3e0732ee54de9d5ff2057" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>Dot</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ab96a1c213fe6e5f402c4e006608564f5" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>empty</name></member>
      <member refid="classamrex_1_1FabArray_1adb282b42c0eb97cbb55037bc7bdea04a" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>EnforcePeriodicity</name></member>
      <member refid="classamrex_1_1FabArray_1aecf0e342dcbe19b9bb23e73c326155ff" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>EnforcePeriodicity</name></member>
      <member refid="classamrex_1_1FabArray_1a076781df7b9077c51fecd6a62172ed74" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>EnforcePeriodicity</name></member>
      <member refid="classamrex_1_1FabArray_1a4ea567a25f13cd931b2b1e9433eeda5e" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>fab_type</name></member>
      <member refid="classamrex_1_1FabArray_1a8ab865aabcf79bbf6a6f529cfd8da96a" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>FabArray</name></member>
      <member refid="classamrex_1_1FabArray_1a657ae8bca91f3f4f77ed6592af1f50c4" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>FabArray</name></member>
      <member refid="classamrex_1_1FabArray_1a7ab314f12326cda647aa1fe94644653e" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>FabArray</name></member>
      <member refid="classamrex_1_1FabArray_1a2797eff487b1b16ec6cb075cfdd2fb1d" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>FabArray</name></member>
      <member refid="classamrex_1_1FabArray_1a4e5969fd37c641e0b9bb849f812c1199" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>FabArray</name></member>
      <member refid="classamrex_1_1FabArray_1a24c8625dbbdf687a2f44a071b97badeb" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>FabArray</name></member>
      <member refid="classamrex_1_1FabArray_1a2f8ab656cb0ef985199be4e578ec91b5" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>FabArray</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a16240683aaab59d05d3659c64723890f" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>FabArrayBase</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a2626dd8a948d7ef6dcb5ea286709ad6e" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>FabArrayBase</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ab81793c2f32c7430eed823483c6c41a4" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>FabArrayBase</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a474c8b827c1db51691c9e98263508d31" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>FabArrayBase</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aa8a53e00ad4f706959f791ca7fdaf087" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>FabArrayBase</name></member>
      <member refid="classamrex_1_1FabArrayBase_1adce0fffa78b25dbbfa1f82701e579425" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>fabbox</name></member>
      <member refid="classamrex_1_1FabArray_1ad9691d1c35c1ed43c824db2401cfafba" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>fabPtr</name></member>
      <member refid="classamrex_1_1FabArray_1af389f3c3b3cdc88a85bfcf5d30148acc" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>fabPtr</name></member>
      <member refid="classamrex_1_1FabArray_1a8d3bc775d510dacd5b2f4e03854795f2" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>fabPtr</name></member>
      <member refid="classamrex_1_1FabArray_1a3ac14bd473ccfd86adaf7418017b2f33" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>fabPtr</name></member>
      <member refid="classamrex_1_1FabArray_1a362cb84f113b8019a6f8b03129d1cf48" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>Factory</name></member>
      <member refid="classamrex_1_1FabArray_1a5fbf15f2a4abd1397a6474713b122824" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>FB_local_copy_cpu</name></member>
      <member refid="classamrex_1_1FabArray_1a60891bcadc0382dfc1aaf4df8ad34771" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>FB_local_copy_gpu</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a9e9131d2e52b3140088bed29299df5e5" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>FBCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a41abb738518224cedd8cfe16206382ba" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>FBCacheIter</name></member>
      <member refid="classamrex_1_1FabArray_1a4bec341c204bf002ce9ea2d636e94f56" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>fbd</name></member>
      <member refid="classamrex_1_1FabArray_1a0ea9d56bb5358f023c121e3631afadd7" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>FBEP_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a9b108f48e43d0b56e3113d2264fdc910" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>FBEP_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a3991ba7fcd5f937da838387b027ce7ef" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>FillBoundary</name></member>
      <member refid="classamrex_1_1FabArray_1a73c4ba8aa5ed4620734ba6bbc09bfa6b" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>FillBoundary</name></member>
      <member refid="classamrex_1_1FabArray_1a169e9888b603a9c1b97d1876f2e843e2" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>FillBoundary</name></member>
      <member refid="classamrex_1_1FabArray_1a7c3bcb50994c05df7dbfcd3d63a41249" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>FillBoundary</name></member>
      <member refid="classamrex_1_1FabArray_1ae0a03b23f179e0c50e162387e35ea00b" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>FillBoundary</name></member>
      <member refid="classamrex_1_1FabArray_1a59c47cdc663d31e529ec89d3a10c2969" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>FillBoundary</name></member>
      <member refid="classamrex_1_1FabArray_1af36dee00f70339ae9a3e126bbbc5d56e" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>FillBoundary_finish</name></member>
      <member refid="classamrex_1_1FabArray_1af36dee00f70339ae9a3e126bbbc5d56e" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>FillBoundary_finish</name></member>
      <member refid="classamrex_1_1FabArray_1a72d6ae94d21e9c7e846bf634520719c6" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>FillBoundary_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a1ae3789788ab4f527e7aec42991b5265" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>FillBoundary_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a5e540e836f433cd1d5c5dcb581b2075e" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>FillBoundary_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a7c8a47c0924b8c0e06200e38c5eb9a23" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>FillBoundary_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1aa2fe5d6e1efcb3230f3ca23599f2fb47" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>FillBoundary_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a76f3e8ecacb352ca12c35e6b3fa46b10" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>FillBoundary_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a31ac8478feaa72ab3960bb08c69b082b" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>FillBoundary_test</name></member>
      <member refid="classamrex_1_1FabArray_1a84ce4d97367dcb2da8be8bddfac2ef4e" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>FillBoundaryAndSync</name></member>
      <member refid="classamrex_1_1FabArray_1a6a2ee6a93d9d13d4f4a1f864f3c767cb" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>FillBoundaryAndSync</name></member>
      <member refid="classamrex_1_1FabArray_1a6cca07036c0a49c4ad881c9138a4041f" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>FillBoundaryAndSync_finish</name></member>
      <member refid="classamrex_1_1FabArray_1ab6a99354331bc87dda4960292d90de4d" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>FillBoundaryAndSync_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1abad0254090cd345d31ab5bb0cb7a82b6" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>FillBoundaryAndSync_nowait</name></member>
      <member refid="classamrex_1_1MultiFab_1ae7a5398061b1bffdd1679a3a78f8b741" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>Finalize</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a713c123f38e7c4666b28628d59c6e0c9" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>flushCFinfo</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a16c472ffe97ca76e2ffa59ffceec0931" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>flushCPC</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a6011806b7564dbb0849cc33d57e95a4f" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>flushCPCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ad0036a8cccab0b66956ebdb8fb07d16f" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>flushFB</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ac8219bfa75d50673c667ce09d6cb2d83" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>flushFBCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a793ba5ae5a1533bae6a98b901df96664" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>flushFPinfo</name></member>
      <member refid="classamrex_1_1FabArrayBase_1af1e359a059abb783d093f29cc1c84693" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>flushParForCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a38c437b445b30f872df4f5ed6232e9a1" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>flushParForInfo</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a11436d5c97b9158ac23058287feada66" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>flushPolarB</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a70b561d2ca803ef3488983323339bac6" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>flushPolarBCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ac71669e7574424826140208ef85fcc4a" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>flushRB180</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a44faf0f19d9f24cacd58d8396b2c1610" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>flushRB180Cache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ab092b4d04401abad6715b550b01dd5b4" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>flushRB90</name></member>
      <member refid="classamrex_1_1FabArrayBase_1abf133627f3fe188828f9cdf811dd8a86" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>flushRB90Cache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a03141dc770d42b5297105bb259b9c8e5" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>flushTileArray</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a653b5bd0ac05e183721ba30b5c5dbb55" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>flushTileArrayCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a13121d16e1be9ac4ea05a7df793a47fd" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>FPinfoCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1adee16eddda3b226990da74e087c9cfd9" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>FPinfoCacheIter</name></member>
      <member refid="classamrex_1_1FabArray_1a0776aa41d2309534c3d0792320eb6763" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>get</name></member>
      <member refid="classamrex_1_1FabArray_1ac9c35f9ba5d6042bc5fff01e5d5e295b" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>get</name></member>
      <member refid="classamrex_1_1FabArray_1a427dc42c638a674461f8b98f16875114" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>get</name></member>
      <member refid="classamrex_1_1FabArray_1a40ad454f948a86047a3c9887f18eb2b2" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>get</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aa0cb5039380dc0545d40ac5ac6589943" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>getBDKey</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aaeb133e861baa561ecdcb23aa91ea48a" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>getCPC</name></member>
      <member refid="classamrex_1_1FabArrayBase_1af08e453541172e394dd9c710f5fc132f" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>getFB</name></member>
      <member refid="classamrex_1_1FabArrayBase_1addc7d9a3237b58405473e60db76f4157" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>getParForInfo</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ae6417c14fa4f3f5efacf7ea324a1a3d6" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>getPolarB</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a304ba0bf4637208cfdd1a94098c55637" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>getRB180</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a1fa0d3a08ed46a79dd0fae8c8f9603af" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>getRB90</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a47294c772e3bc6de1c901df4c2aa2b10" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>getTileArray</name></member>
      <member refid="classamrex_1_1FabArray_1ac696f139b6cf56e02828264b09a48636" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>hasEBFabFactory</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a15c2b54df8386a9d38216410edce884c" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>indexArray</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a7a4ed8b70e3aa4c3ddd3a24fb1c0f3a0" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>IndexArray</name></member>
      <member refid="classamrex_1_1MultiFab_1a7d869f54f3d6f4e3ede7eb0103954a9e" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>Initialize</name></member>
      <member refid="classamrex_1_1MultiFab_1aa4f9b9a2a37baa29e7767a80f6856dcd" prot="private" virt="non-virtual"><scope>amrex::MultiFab</scope><name>initVal</name></member>
      <member refid="classamrex_1_1MultiFab_1a1151850ade9c29c2c657b173ad4a29c3" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>invert</name></member>
      <member refid="classamrex_1_1MultiFab_1a773e797a62924f1a23e4774c11b97f6f" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>invert</name></member>
      <member refid="classamrex_1_1MultiFab_1ad7883de5b1bd515c4714e434e2a98547" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>invert</name></member>
      <member refid="classamrex_1_1MultiFab_1abc88cd9b7b451baaea2d53b97d20368a" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>invert</name></member>
      <member refid="classamrex_1_1FabArray_1a6024801773f82956d6cdfcd47edc15ef" prot="public" virt="non-virtual" ambiguityscope="FabArray&lt; FArrayBox &gt;::"><scope>amrex::MultiFab</scope><name>invert</name></member>
      <member refid="classamrex_1_1FabArray_1a17da9b4e30ef5211cdc56747641a622a" prot="public" virt="non-virtual" ambiguityscope="FabArray&lt; FArrayBox &gt;::"><scope>amrex::MultiFab</scope><name>invert</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a60aa58517fd2a7d6976e114df171df25" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>is_cell_centered</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a641ffe22574cc57f3544687b3e23d174" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>is_nodal</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a90447f2e6d22e5e0e06a538fd37063d5" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>is_nodal</name></member>
      <member refid="classamrex_1_1FabArray_1acf745741e899a140f64afeefbb903f5c" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>isAllRegular</name></member>
      <member refid="classamrex_1_1FabArray_1af5d3da506729e946bd90678a06d09dc2" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>isDefined</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a5f85b5648838d8d7cf103fbbeaec76be" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>isFusingCandidate</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a6512ea611a6c04b5710334d9d9bfbb4e" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>isOwner</name></member>
      <member refid="classamrex_1_1FabArray_1a958d272c39f50f1157029d5a0c6ade1c" prot="private" virt="non-virtual"><scope>amrex::MultiFab</scope><name>Iterator</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a682fdf86619f6028fea2805d9693ae22" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>ixType</name></member>
      <member refid="classamrex_1_1MultiFab_1a0486c02587ea11cc9a30e9da8d7cf957" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>LinComb</name></member>
      <member refid="classamrex_1_1FabArray_1a424d30f07a7374d3620c454f8e3c5ae7" prot="public" virt="non-virtual" ambiguityscope="FabArray&lt; FArrayBox &gt;::"><scope>amrex::MultiFab</scope><name>LinComb</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aabf6dbff99d8524f9c9d082302afdd5e" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>local_size</name></member>
      <member refid="classamrex_1_1FabArray_1abd6dc24319471bcd6406fa9da2145197" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>LocalAdd</name></member>
      <member refid="classamrex_1_1FabArray_1a5086d98e3a63866d87afcd150a8170ef" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>LocalCopy</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aa848db21ec5426fab2c86d441cd0a314" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>localindex</name></member>
      <member refid="classamrex_1_1FabArray_1ab4bfa4857f5d074015204b6caa0cfcf7" prot="protected" virt="non-virtual"><scope>amrex::MultiFab</scope><name>m_arrays</name></member>
      <member refid="classamrex_1_1FabArrayBase_1af3d0b759e5fa01a885c95e93e0e9f7b1" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>m_BD_count</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a2865ec7ad6d6f09cf1a3a891b603144c" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>m_bdkey</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a92e87a53eaf353557dfcf6b875123a81" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>m_CFinfo_stats</name></member>
      <member refid="classamrex_1_1FabArray_1ac30f73f6b587c175fdc34bab68294613" prot="protected" virt="non-virtual"><scope>amrex::MultiFab</scope><name>m_const_arrays</name></member>
      <member refid="classamrex_1_1FabArrayBase_1acf463c256f5ac08e3c6c71666a682308" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>m_CPC_stats</name></member>
      <member refid="classamrex_1_1FabArray_1a6a2a60d3af361dde9463f2d586d0e358" prot="protected" virt="non-virtual"><scope>amrex::MultiFab</scope><name>m_dallocator</name></member>
      <member refid="classamrex_1_1FabArray_1a0deadb1f742a4e911d7ea64ea80c1292" prot="protected" virt="non-virtual"><scope>amrex::MultiFab</scope><name>m_dp_arrays</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aef73f8365f2afd099a2293d8f94c7b3e" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>m_FA_stats</name></member>
      <member refid="classamrex_1_1FabArray_1a7ecd52e23e86db0f9e8e99166900e63c" prot="protected" virt="non-virtual"><scope>amrex::MultiFab</scope><name>m_fabs_v</name></member>
      <member refid="classamrex_1_1FabArray_1a9172b400e374666d6100fa61ccc586db" prot="protected" virt="non-virtual"><scope>amrex::MultiFab</scope><name>m_factory</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a5f3f2c05af6fbc9a1e5c59e03133505d" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>m_FBC_stats</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a34cc63703ab4e2492a4444199def31d2" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>m_FPinfo_stats</name></member>
      <member refid="classamrex_1_1FabArray_1abbe02ae23186064d6bae686374657674" prot="protected" virt="non-virtual"><scope>amrex::MultiFab</scope><name>m_hp_arrays</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a1cba13cd9d7009299774b13eb2f49484" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>m_mem_usage</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ac8c10e1b5a28a55c6dc388f7df101a97" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>m_multi_ghost</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ad2c72c01911307129e1f6124db9cdf36" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>m_region_tag</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aa5ab85a3018faa2b983936fa4116cd4f" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>m_TAC_stats</name></member>
      <member refid="classamrex_1_1FabArray_1a5ea249e7b897909f9d01b4fed851d7af" prot="protected" virt="non-virtual"><scope>amrex::MultiFab</scope><name>m_tags</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aa2a265ca0b7ce27ee0f3d66c86fe929d" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>m_TheCPCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ab58a879dec4546737754f55dd8b600e2" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>m_TheCrseFineCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a6ec51851470b2e1ec57805bad7725268" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>m_TheFBCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1acdb408349f86d3e32c29e245a361ba0c" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>m_TheFillPatchCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a3ac3a9247a9551f551256c6a1043e002" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>m_TheParForCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a8bd69d649f9a0446dbc7ba981c58199a" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>m_ThePolarBCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a9549d43d5d9d74ddb7c541d9f3339848" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>m_TheRB180Cache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ac6817d7110b3389ad5ececd0da4e241a" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>m_TheRB90Cache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1afc113a32c271a6c406b525795a5d71e0" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>m_TheTileArrayCache</name></member>
      <member refid="classamrex_1_1MultiFab_1a26137d0a3c8a4a024bf811fbaac6208d" prot="private" virt="non-virtual"><scope>amrex::MultiFab</scope><name>MapOfCopyComTagContainers</name></member>
      <member refid="classamrex_1_1MultiFab_1abb92462276ca55cd70f16507118f63ad" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>max</name></member>
      <member refid="classamrex_1_1MultiFab_1a65d87ad5270fcaeb5786e5fdebe07347" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>max</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a9be61766811dc57b7c5126f7020cc6bc" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>MaxComp</name></member>
      <member refid="classamrex_1_1MultiFab_1a642f844c834d6fb714e3e0fc6eb75e56" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>maxIndex</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a0b167b63030177e95b45822b38732fec" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>mfiter_tile_size</name></member>
      <member refid="classamrex_1_1MultiFab_1a540eb1714a5eece782de2a4afdd62c8e" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>min</name></member>
      <member refid="classamrex_1_1MultiFab_1a5ab77282de25bb040248778d41327903" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>min</name></member>
      <member refid="classamrex_1_1MultiFab_1ab351d9250414508cf086635f54e2e2ce" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>minIndex</name></member>
      <member refid="classamrex_1_1MultiFab_1a1bc09d7836dcd4500472fa853a8fcd22" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>minus</name></member>
      <member refid="classamrex_1_1MultiFab_1aa9158374809b83cfd40a8092d4e63bdd" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>mult</name></member>
      <member refid="classamrex_1_1MultiFab_1a75e0a3256784cedf410454d5bd9674e8" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>mult</name></member>
      <member refid="classamrex_1_1MultiFab_1a3f3d92f9f07cf43431b03744b50edbdb" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>mult</name></member>
      <member refid="classamrex_1_1MultiFab_1aa872fb55fa5e6dc2008584d6d6e927b3" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>mult</name></member>
      <member refid="classamrex_1_1FabArray_1aabc2fcb2d3b6c12974d49d5aff23ef5d" prot="public" virt="non-virtual" ambiguityscope="FabArray&lt; FArrayBox &gt;::"><scope>amrex::MultiFab</scope><name>mult</name></member>
      <member refid="classamrex_1_1FabArray_1a179ad441a231e9d09ffebfbc7ad674fb" prot="public" virt="non-virtual" ambiguityscope="FabArray&lt; FArrayBox &gt;::"><scope>amrex::MultiFab</scope><name>mult</name></member>
      <member refid="classamrex_1_1MultiFab_1abcce72db937ae8e326d2cb14cb114e7d" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>MultiFab</name></member>
      <member refid="classamrex_1_1MultiFab_1a19ec88a3ec56e2af03e7d127f8edb79e" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>MultiFab</name></member>
      <member refid="classamrex_1_1MultiFab_1a89ca350582ac479d9278fa2e0ec1a9c2" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>MultiFab</name></member>
      <member refid="classamrex_1_1MultiFab_1a2c97960be1543778b979eb2a22c2b5d0" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>MultiFab</name></member>
      <member refid="classamrex_1_1MultiFab_1ab61f9da32d4aad58172e8871dc992e45" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>MultiFab</name></member>
      <member refid="classamrex_1_1MultiFab_1ae5d26ea953fbc273c65f7c489511f656" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>MultiFab</name></member>
      <member refid="classamrex_1_1MultiFab_1ad82dfbf92b93fa09d680fe6e3bec36e5" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>MultiFab</name></member>
      <member refid="classamrex_1_1MultiFab_1a62db3405e4e92a2a5bd5d3d9d19698ba" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>Multiply</name></member>
      <member refid="classamrex_1_1MultiFab_1a1782d5eefcdae9512c4d9ece50a2253b" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>Multiply</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a4ff6141edd1ba1d1940c45b98a619b04" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>n_comp</name></member>
      <member refid="classamrex_1_1FabArrayBase_1acb3699bf4d436f320a73a9c5239b81cd" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>n_filled</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aad48d978f6df9294ff3cbdb8978b8914" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>n_grow</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aec6647af0d0a9f2d760d502a8975d6f1" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>nComp</name></member>
      <member refid="classamrex_1_1MultiFab_1acaf881689685c3fa82ed65829f6be4c3" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>negate</name></member>
      <member refid="classamrex_1_1MultiFab_1ad7cd1360a57300fc2e5eb5afdf6ff1dc" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>negate</name></member>
      <member refid="classamrex_1_1MultiFab_1a9939b447c0dc1a130c6952d2b376f8ad" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>negate</name></member>
      <member refid="classamrex_1_1MultiFab_1ae4ff818a86f791cca374edbe34bb6830" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>negate</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a92cef599b0ae34401a5463ec6fddc606" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>nGrow</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a76a6089045a5d690f809bd0d2e7c51ab" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>nGrowFilled</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a0598988ee34f3885bd6d2a4787a8f427" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>nGrowVect</name></member>
      <member refid="classamrex_1_1MultiFab_1a2c8965900aefbe0681bf72cb489b7027" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>norm0</name></member>
      <member refid="classamrex_1_1MultiFab_1a6f5159e97350762eba3263f11ba3e653" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>norm0</name></member>
      <member refid="classamrex_1_1MultiFab_1a4a93902e69dd534d7a84cfbdc1acf32e" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>norm0</name></member>
      <member refid="classamrex_1_1MultiFab_1a727b71bae4005883ea88221157184346" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>norm0</name></member>
      <member refid="classamrex_1_1MultiFab_1a5879f0308ed537286037a041e32fd810" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>norm1</name></member>
      <member refid="classamrex_1_1MultiFab_1afcdc4aaf73896a44ad364520af9a7398" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>norm1</name></member>
      <member refid="classamrex_1_1MultiFab_1ae4ba8fc4756c0621e3872055ffce31b0" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>norm1</name></member>
      <member refid="classamrex_1_1MultiFab_1aa0b6bb4fb2ee206356cd613ed8458b8f" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>norm2</name></member>
      <member refid="classamrex_1_1MultiFab_1a0982c02422dcb603d1c5129d744d6611" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>norm2</name></member>
      <member refid="classamrex_1_1MultiFab_1a933d1dd75c4441bf922f8c5baa931be4" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>norm2</name></member>
      <member refid="classamrex_1_1MultiFab_1a9d57175907c89a969b9b5392631e65cf" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>norminf</name></member>
      <member refid="classamrex_1_1MultiFab_1abc7329288ae6f73f8fd7eda95e49b8ba" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>norminf</name></member>
      <member refid="classamrex_1_1MultiFab_1a92b462cb3d7c55a7d3277aaa9e3e0ff3" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>norminf</name></member>
      <member refid="classamrex_1_1FabArray_1a62a6ea18e68973543bf8b2a9bab89d8a" prot="public" virt="non-virtual" ambiguityscope="FabArray&lt; FArrayBox &gt;::"><scope>amrex::MultiFab</scope><name>norminf</name></member>
      <member refid="classamrex_1_1FabArray_1aea595d71e8f04b18bc48aaca29acfe77" prot="public" virt="non-virtual" ambiguityscope="FabArray&lt; FArrayBox &gt;::"><scope>amrex::MultiFab</scope><name>norminf</name></member>
      <member refid="classamrex_1_1FabArray_1a1d7f20697c473d1186b4b3c290f5eb1f" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>ok</name></member>
      <member refid="classamrex_1_1MultiFab_1aa2e6e3cf95934c1b6ee898d10a1845f0" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MultiFab_1a62b9fe978cd451f411245dc8a1e97b40" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MultiFab_1af008350cc46bb35e93244deae918a1e9" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>operator=</name></member>
      <member refid="classamrex_1_1FabArray_1abfb756a609a97e842adfcb212390b506" prot="public" virt="non-virtual" ambiguityscope="FabArray&lt; FArrayBox &gt;::"><scope>amrex::MultiFab</scope><name>operator=</name></member>
      <member refid="classamrex_1_1FabArray_1a0af3037790ff6d28e55abb56befa9217" prot="public" virt="non-virtual" ambiguityscope="FabArray&lt; FArrayBox &gt;::"><scope>amrex::MultiFab</scope><name>operator=</name></member>
      <member refid="classamrex_1_1FabArray_1a4216d9de507369835a657c156d8b8161" prot="public" virt="non-virtual" ambiguityscope="FabArray&lt; FArrayBox &gt;::"><scope>amrex::MultiFab</scope><name>operator=</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a24f7e6d0d4e8ee6aa8207710f51a603e" prot="public" virt="non-virtual" ambiguityscope="amrex::FabArrayBase::"><scope>amrex::MultiFab</scope><name>operator=</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a0b213cf522c93646cc152abb65ad97a4" prot="public" virt="non-virtual" ambiguityscope="amrex::FabArrayBase::"><scope>amrex::MultiFab</scope><name>operator=</name></member>
      <member refid="classamrex_1_1FabArray_1aea4482f17a37031cb4d666bb0d35bb75" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1FabArray_1a5ba62a9af2c4595f5cc07658922e54dd" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1FabArray_1a0cff697750da98028349785f52862dd9" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1FabArray_1a075244874da3e2433d57ca6fa8b96dc2" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1FabArray_1a11346c64d84d261c3766c76a0b09a032" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>os_temp</name></member>
      <member refid="classamrex_1_1MultiFab_1afbd6dab928640c74eb1d7a28e8f36afa" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>OverlapMask</name></member>
      <member refid="classamrex_1_1MultiFab_1afc2840698e1cec5a44ebeb9d34783327" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>OverrideSync</name></member>
      <member refid="classamrex_1_1FabArray_1a37eadd5f219d50c8f1c3422f2fa81eb2" prot="public" virt="non-virtual" ambiguityscope="FabArray&lt; FArrayBox &gt;::"><scope>amrex::MultiFab</scope><name>OverrideSync</name></member>
      <member refid="classamrex_1_1FabArray_1a4f7ee90203e2af36c474d9b2234c8cae" prot="public" virt="non-virtual" ambiguityscope="FabArray&lt; FArrayBox &gt;::"><scope>amrex::MultiFab</scope><name>OverrideSync</name></member>
      <member refid="classamrex_1_1FabArray_1adbc8db61cee190b8779c871001f78057" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>OverrideSync_finish</name></member>
      <member refid="classamrex_1_1FabArray_1a4528c1a098c945ff4f1cef3a812b1af5" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>OverrideSync_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a2f1b5bd6a26a0ed12733e9a6ce8b0eb9" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>OverrideSync_nowait</name></member>
      <member refid="classamrex_1_1MultiFab_1a3c8c9bf8723fcfac9b8d410485e7ed4a" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>OwnerMask</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a8e414f069d04091245f3e9e94a3aa237" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>OwnerShip</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ab4d5df57a6eaa1d785d131b059b43e18" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>ownership</name></member>
      <member refid="classamrex_1_1FabArray_1ad369c044980014877a2affbed7e266dd" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>pack_send_buffer_cpu</name></member>
      <member refid="classamrex_1_1FabArray_1abf79f429c979d93fb8a204aae9851054" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>pack_send_buffer_cpu</name></member>
      <member refid="classamrex_1_1FabArray_1a0ec0671737732f4a925a56eb1f138d16" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>pack_send_buffer_gpu</name></member>
      <member refid="classamrex_1_1FabArray_1a44c4542a9504ebedf9c0439ad4f2650b" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>pack_send_buffer_gpu</name></member>
      <member refid="classamrex_1_1FabArray_1a4e8ff0027c22d9451a6edff7272fb29a" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>ParallelAdd</name></member>
      <member refid="classamrex_1_1FabArray_1a8a59adcce54ed5ccf48f0849458cf123" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>ParallelAdd</name></member>
      <member refid="classamrex_1_1FabArray_1a8e9e4a76679324f247d20d57d11293f0" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>ParallelAdd</name></member>
      <member refid="classamrex_1_1FabArray_1a89a8e2abc36a485e63a1b7976f13baf2" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>ParallelAdd</name></member>
      <member refid="classamrex_1_1FabArray_1a221477c8979f6bf89267c68344a25539" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>ParallelAdd_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a636aaec49f36b37c484e25146572cf41" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>ParallelAdd_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a9d8a8750be27ca5839abbbe2f3794e5a" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>ParallelAdd_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a4b736a64c77081800aa312863d962048" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>ParallelAdd_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a0f2716c666d8cd0546009503e890f807" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>ParallelCopy</name></member>
      <member refid="classamrex_1_1FabArray_1ac31d070f29eef2523b0af2d858b3e56d" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>ParallelCopy</name></member>
      <member refid="classamrex_1_1FabArray_1a3d58cf8a0ddfeba8a8b52aa73fed2113" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>ParallelCopy</name></member>
      <member refid="classamrex_1_1FabArray_1ad8ec59ef48f01ecc242f4b1b6f39248f" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>ParallelCopy</name></member>
      <member refid="classamrex_1_1FabArray_1a324fc6d24d656da6a5365253b2c9437e" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>ParallelCopy_finish</name></member>
      <member refid="classamrex_1_1FabArray_1aebae9f774cd70cb8f12ec1c807e3d72b" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>ParallelCopy_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1af41fa096b33fbce8a896252ff39bbadb" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>ParallelCopy_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a6e55433b48ff77b9fcbfbc2c501e63c3" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>ParallelCopy_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1ab34d1096b2cf68e1b0319cdc7b74a35e" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>ParallelCopy_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a30c574173b6d62fd03e7b1dbf510492c" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>ParallelCopyToGhost</name></member>
      <member refid="classamrex_1_1FabArray_1a0144d56dd577bc7e46e1d422f487b1d9" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>ParallelCopyToGhost_finish</name></member>
      <member refid="classamrex_1_1FabArray_1a5f80b593666b704bc1646d8c6a2d5af2" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>ParallelCopyToGhost_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1af001e3fed315af1165f42213a1042c09" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>PC_local_cpu</name></member>
      <member refid="classamrex_1_1FabArray_1a6479ffc5e154a5b21d80e1b6dedb44cf" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>PC_local_gpu</name></member>
      <member refid="classamrex_1_1FabArray_1a4a22bada553ad3ff929d91be1b8bfc9f" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>pcd</name></member>
      <member refid="classamrex_1_1MultiFab_1aafbc29a68d3c0c000fee414f76f7b79c" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>plus</name></member>
      <member refid="classamrex_1_1MultiFab_1a9d8ec2a7197f373ce88a43a2adaf1da0" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>plus</name></member>
      <member refid="classamrex_1_1MultiFab_1a0b410a02ca211c74033d77fac9b8a40b" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>plus</name></member>
      <member refid="classamrex_1_1MultiFab_1a38506771a271ef8a5d4b6c3065815566" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>plus</name></member>
      <member refid="classamrex_1_1MultiFab_1a6679e5d7843de95ca2245f599715b4f9" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>plus</name></member>
      <member refid="classamrex_1_1FabArray_1a69e2f8d4b7a834951fe4428b89134455" prot="public" virt="non-virtual" ambiguityscope="FabArray&lt; FArrayBox &gt;::"><scope>amrex::MultiFab</scope><name>plus</name></member>
      <member refid="classamrex_1_1FabArray_1ad00c28754c2085f4ba386d2bb0f24f93" prot="public" virt="non-virtual" ambiguityscope="FabArray&lt; FArrayBox &gt;::"><scope>amrex::MultiFab</scope><name>plus</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aeefdcd1fc2b2d609017e01fa8862c931" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>PolarBCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ae3da0c50a11f56d59552e30b45b10741" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>PolarBCacheIter</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a8bf2b5f80cfa6a00fd92a2c10b16720c" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>popRegionTag</name></member>
      <member refid="classamrex_1_1FabArray_1a1ad78902f6ce66d7f4d0557de26ee971" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>prefetchToDevice</name></member>
      <member refid="classamrex_1_1FabArray_1ae803504d641d86a8ba9e4b58e81f136b" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>prefetchToHost</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a2a2878413402bf8cff44357bf4964a5d" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>printMemUsage</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a550a79531f98644ed6572f635f854cf7" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>pushRegionTag</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a6c6874f6a073ba5a8fe15d5fc7837a5d" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>pushRegionTag</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a9eae1384b7fc7342c235f99b503fad01" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>queryMemUsage</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ab671a167eb6b1779fa2df2a227931f82" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>queryMemUsageHWM</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a7245d3dc29d3e2aade3f28f9319fa76d" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>RB180Cache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aa058b98f7a208d8b6beec36c786cc0b9" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>RB180CacheIter</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aba31942c259bb854daca8574b393a17f" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>RB90Cache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a336a5ecfcff59f5dbb7fbba057e2de73" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>RB90CacheIter</name></member>
      <member refid="classamrex_1_1FabArray_1a59639f9d47c654200ffccda96ff78ae5" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>RecvLayoutMask</name></member>
      <member refid="classamrex_1_1FabArray_1a91d4e639cd2eca22c25e9625de833b3a" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>Redistribute</name></member>
      <member refid="classamrex_1_1FabArray_1a4782a3068c5950a1838e1018f8ff69f5" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>release</name></member>
      <member refid="classamrex_1_1FabArray_1a4750acee26c62d569535b66ec2957bca" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>release</name></member>
      <member refid="classamrex_1_1MultiFab_1a505eb471a78f4e0f8791b10cbb1bbd75" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>Saxpy</name></member>
      <member refid="classamrex_1_1FabArray_1ab3e18d4d369bda7337c541adad0c6cd3" prot="public" virt="non-virtual" ambiguityscope="FabArray&lt; FArrayBox &gt;::"><scope>amrex::MultiFab</scope><name>Saxpy</name></member>
      <member refid="classamrex_1_1FabArray_1a80a77e6c5521bb8b3ed838708e079432" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>setBndry</name></member>
      <member refid="classamrex_1_1FabArray_1a9deababbf136398c5902f84ad2ea4f2c" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>setBndry</name></member>
      <member refid="classamrex_1_1FabArray_1a499aee434c06201cadb658484dda3e37" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>setDomainBndry</name></member>
      <member refid="classamrex_1_1FabArray_1a24591060d4412dddb8298001e5f580c5" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>setDomainBndry</name></member>
      <member refid="classamrex_1_1FabArray_1a01622e62fc6b5438eb72a553287bdfe2" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>setFab</name></member>
      <member refid="classamrex_1_1FabArray_1abf543729d784adfcd6d1a989f4caee9c" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>setFab</name></member>
      <member refid="classamrex_1_1FabArray_1a0f8b639b019bb31429a51c718756cafd" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>setFab</name></member>
      <member refid="classamrex_1_1FabArray_1a01d769a51d15314e0f36925aa2182c9a" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>setFab</name></member>
      <member refid="classamrex_1_1FabArray_1a693754f4ec64472c486d1d4431d71d8c" prot="private" virt="non-virtual"><scope>amrex::MultiFab</scope><name>setFab_assert</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a7d9c921734d6199c74f9ce44f81eba81" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>setMultiGhost</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a2ad51584223d99ae31e86bf9a21c10b7" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>setNGrowFilled</name></member>
      <member refid="classamrex_1_1FabArray_1a9235d60131ff0d5f81450896420fe691" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>setVal</name></member>
      <member refid="classamrex_1_1FabArray_1a93e733b725f64c93f7a5fb2edf88086e" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>setVal</name></member>
      <member refid="classamrex_1_1FabArray_1a37c41983a3c0543717a0391f7e054929" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>setVal</name></member>
      <member refid="classamrex_1_1FabArray_1a32d132563b832c544c1ddd9a930789d1" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>setVal</name></member>
      <member refid="classamrex_1_1FabArray_1a2c2a565a4a3a422661b062ee2dd5f937" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>setVal</name></member>
      <member refid="classamrex_1_1FabArray_1a9b24249a457566178240d93e2379b791" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>setVal</name></member>
      <member refid="classamrex_1_1FabArray_1a4ebf94d4f789343209c4bf0a4567bb15" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>setVal</name></member>
      <member refid="classamrex_1_1FabArray_1af5dc7a3e98d5ebf9e3e7e42c8fe19b2e" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>setVal</name></member>
      <member refid="classamrex_1_1FabArray_1a9f979a4eaf8ec5080794e9a45e24cefd" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>setVal</name></member>
      <member refid="classamrex_1_1FabArray_1a2b78f7c0a869eecad1d281d26363cb35" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>setVal</name></member>
      <member refid="classamrex_1_1FabArray_1a551575e2734ddbb455ce7d7ebd53cd9f" prot="protected" virt="non-virtual"><scope>amrex::MultiFab</scope><name>SharedMemory</name></member>
      <member refid="classamrex_1_1FabArray_1a1c267db3c144871fd12170f3c81d6562" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>shift</name></member>
      <member refid="classamrex_1_1FabArray_1abc3985ed98ddaf530bde81076c0295de" prot="protected" virt="non-virtual"><scope>amrex::MultiFab</scope><name>shmem</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a713a78056e395c21e855dcc1ed56525c" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>size</name></member>
      <member refid="classamrex_1_1MultiFab_1a5f37af40303a10e8d54e15c1931a5b8e" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>Subtract</name></member>
      <member refid="classamrex_1_1MultiFab_1a4f2c04ea9d0f7a551bc2263b9a63d324" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>Subtract</name></member>
      <member refid="classamrex_1_1MultiFab_1a62669a27ec4a577f0bef72dc2a1243aa" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>sum</name></member>
      <member refid="classamrex_1_1FabArray_1a025b813208a188552aba514a69a3b480" prot="public" virt="non-virtual" ambiguityscope="FabArray&lt; FArrayBox &gt;::"><scope>amrex::MultiFab</scope><name>sum</name></member>
      <member refid="classamrex_1_1MultiFab_1afe7c47dff8cf8e0fb550d0e78c7b5375" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>sum_unique</name></member>
      <member refid="classamrex_1_1FabArray_1a3df70423b7ec841f351f1e2b1b9cd8d4" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>SumBoundary</name></member>
      <member refid="classamrex_1_1FabArray_1a8e4f13e3c2e640f401ef8a191feafe91" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>SumBoundary</name></member>
      <member refid="classamrex_1_1FabArray_1a836ec3561b05f2151a8b299a4bacbec7" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>SumBoundary</name></member>
      <member refid="classamrex_1_1FabArray_1a9ed00fc28603314ebf1fb318874b1f64" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>SumBoundary</name></member>
      <member refid="classamrex_1_1FabArray_1aa686cf52b54e0b077e30c6a5093304cb" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>SumBoundary_finish</name></member>
      <member refid="classamrex_1_1FabArray_1ad6c0ef1b3e74b61dbd4990b79686027a" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>SumBoundary_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1aa81e576487f7936bb94111a236308f68" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>SumBoundary_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a722163b7587e2755a9e7bb885c788571" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>SumBoundary_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a6ec9ed02407bad1f6399c0a1c1983749" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>SumBoundary_nowait</name></member>
      <member refid="classamrex_1_1MultiFab_1a2e29e28afce0aa520da5cd068cb5e96b" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>Swap</name></member>
      <member refid="classamrex_1_1MultiFab_1ac259813cd54d52b5c20cad7c0f24c246" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>Swap</name></member>
      <member refid="classamrex_1_1FabArrayBase_1acefd7d2a27952d4bac78ac9befcda8eb" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>TACache</name></member>
      <member refid="classamrex_1_1FabArray_1acb7546f9b065a866641075708c3484ae" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>tags</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a905802e4dcdc5377e09d455fc80f0400" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>TAMap</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a583784f4a6e46aacd6f953de8d6f4fb0" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>TheCFinfo</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ac2344224d72849f0e7fe1888d150a550" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>TheFPinfo</name></member>
      <member refid="classamrex_1_1FabArray_1a6251aaa8ffe703d3eb8a259393471a5a" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>unpack_recv_buffer_cpu</name></member>
      <member refid="classamrex_1_1FabArray_1ad3f362d93f85699c530e36d2f78193ff" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>unpack_recv_buffer_cpu</name></member>
      <member refid="classamrex_1_1FabArray_1a8c6dd4507f03d916f85476d2571a10c3" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>unpack_recv_buffer_gpu</name></member>
      <member refid="classamrex_1_1FabArray_1a34105be3fcf0be0cc074081b0667441f" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>unpack_recv_buffer_gpu</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a3918d10004ca8f4494fd9e6099bdabc3" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>updateBDKey</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a7022fe872e97df24058250928b3d84b6" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>updateMemUsage</name></member>
      <member refid="classamrex_1_1FabArray_1a10cae7bd6a702d1909a7801f53d990cd" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>value_type</name></member>
      <member refid="classamrex_1_1MultiFab_1ad80a338735a5addaa47a0726cb24c8c5" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>WeightedSync</name></member>
      <member refid="classamrex_1_1MultiFab_1aa06c264011c21bb5a97070ae7cf250d3" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>Xpay</name></member>
      <member refid="classamrex_1_1FabArray_1a742793255ff2aed0213773f989cc8394" prot="public" virt="non-virtual" ambiguityscope="FabArray&lt; FArrayBox &gt;::"><scope>amrex::MultiFab</scope><name>Xpay</name></member>
      <member refid="classamrex_1_1FabArray_1af9762647ad8ae52d39f2c51f51c06813" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>~FabArray</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a58a43e40ea0bcd02334490f1126c6d7f" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>~FabArrayBase</name></member>
      <member refid="classamrex_1_1MultiFab_1ae27094337c6cdcd4dd4a0e8dea9d1321" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>~MultiFab</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
