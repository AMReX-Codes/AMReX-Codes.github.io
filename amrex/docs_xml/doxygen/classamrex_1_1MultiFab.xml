<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classamrex_1_1MultiFab" kind="class" language="C++" prot="public">
    <compoundname>amrex::MultiFab</compoundname>
    <basecompoundref refid="classamrex_1_1FabArray" prot="public" virt="non-virtual">amrex::FabArray&lt; FArrayBox &gt;</basecompoundref>
    <includes refid="AMReX__MultiFab_8H" local="no">AMReX_MultiFab.H</includes>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classamrex_1_1MultiFab_1a0945ab26050100412261a7e5e51e65bc" prot="private" static="no">
        <type><ref refid="classamrex_1_1FabArrayBase_1a1bb6a09ada00b5b7a900d8fecbf92e3c" kindref="member">FabArrayBase::CopyComTagsContainer</ref></type>
        <definition>typedef FabArrayBase::CopyComTagsContainer amrex::MultiFab::CopyComTagsContainer</definition>
        <argsstring></argsstring>
        <name>CopyComTagsContainer</name>
        <briefdescription>
<para>Some useful typedefs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="667" column="48" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" bodystart="667" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1MultiFab_1a9abff4a4be6d566975e62a4682960b96" prot="private" static="no">
        <type><ref refid="classamrex_1_1FabArrayBase_1a70b58356e2e49c69d54eed3850a9c231" kindref="member">FabArrayBase::MapOfCopyComTagContainers</ref></type>
        <definition>typedef FabArrayBase::MapOfCopyComTagContainers amrex::MultiFab::MapOfCopyComTagContainers</definition>
        <argsstring></argsstring>
        <name>MapOfCopyComTagContainers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="668" column="53" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" bodystart="668" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1MultiFab_1abcce72db937ae8e326d2cb14cb114e7d" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::MultiFab::MultiFab</definition>
        <argsstring>() noexcept</argsstring>
        <name>MultiFab</name>
        <briefdescription>
<para>Constructs an empty <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. Data can be defined at a later time using the define member functions inherited from <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="45" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="591" bodyend="597"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1aa1755894827d2615b5a8ed4b7c88c6d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MultiFab::MultiFab</definition>
        <argsstring>(const BoxArray &amp;bs, const DistributionMapping &amp;dm, int ncomp, int ngrow, const MFInfo &amp;info=MFInfo(), const FabFactory&lt; FArrayBox &gt; &amp;factory=FArrayBoxFactory())</argsstring>
        <name>MultiFab</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>bs</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngrow</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1MFInfo" kindref="compound">MFInfo</ref> &amp;</type>
          <declname>info</declname>
          <defval><ref refid="structamrex_1_1MFInfo" kindref="compound">MFInfo</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &gt; &amp;</type>
          <declname>factory</declname>
          <defval><ref refid="namespaceamrex_1abda821661019fb0a77eb3a9706dc7330" kindref="member">FArrayBoxFactory</ref>()</defval>
        </param>
        <briefdescription>
<para>Constructs a <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bs</parametername>
</parameternamelist>
<parameterdescription>
<para>a valid region </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dm</parametername>
</parameternamelist>
<parameterdescription>
<para>a DistribuionMapping </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncomp</parametername>
</parameternamelist>
<parameterdescription>
<para>number of components </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ngrow</parametername>
</parameternamelist>
<parameterdescription>
<para>number of cells the region grows </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>info</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structamrex_1_1MFInfo" kindref="compound">MFInfo</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
The size of the <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> is given by the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> grown by ngrow, and the number of components is given by ncomp. If info is set to not allocating memory, then no FArrayBoxes are allocated at this time but can be defined later. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="60" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="599" bodyend="606"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a3492b44e82f5711a3eec0be435c6dc20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MultiFab::MultiFab</definition>
        <argsstring>(const BoxArray &amp;bs, const DistributionMapping &amp;dm, int ncomp, const IntVect &amp;ngrow, const MFInfo &amp;info=MFInfo(), const FabFactory&lt; FArrayBox &gt; &amp;factory=FArrayBoxFactory())</argsstring>
        <name>MultiFab</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>bs</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ngrow</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1MFInfo" kindref="compound">MFInfo</ref> &amp;</type>
          <declname>info</declname>
          <defval><ref refid="structamrex_1_1MFInfo" kindref="compound">MFInfo</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &gt; &amp;</type>
          <declname>factory</declname>
          <defval><ref refid="namespaceamrex_1abda821661019fb0a77eb3a9706dc7330" kindref="member">FArrayBoxFactory</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="72" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="608" bodyend="622"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1ab61f9da32d4aad58172e8871dc992e45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MultiFab::MultiFab</definition>
        <argsstring>(const MultiFab &amp;rhs, MakeType maketype, int scomp, int ncomp)</argsstring>
        <name>MultiFab</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a0a36c65d0681a832330b2812f16786a6" kindref="member">MakeType</ref></type>
          <declname>maketype</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
<para>Make an alias <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. maketype must be <ref refid="namespaceamrex_1a0a36c65d0681a832330b2812f16786a6a1477998364b5f02d6ce68e3da29be1ba" kindref="member">amrex::make_alias</ref>. scomp is the starting component of the alias and ncomp is the number of components in the new aliasing <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="90" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="624" bodyend="632"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a67396a85b1bfeb3a102f3926dd3e1632" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>amrex::MultiFab::~MultiFab</definition>
        <argsstring>() override</argsstring>
        <name>~MultiFab</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="92" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="643" bodyend="648"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1ae5d26ea953fbc273c65f7c489511f656" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::MultiFab::MultiFab</definition>
        <argsstring>(MultiFab &amp;&amp;rhs) noexcept</argsstring>
        <name>MultiFab</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="94" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="634" bodyend="641"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1aa2e6e3cf95934c1b6ee898d10a1845f0" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
        <definition>MultiFab&amp; amrex::MultiFab::operator=</definition>
        <argsstring>(MultiFab &amp;&amp;rhs) noexcept=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="95" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1ad82dfbf92b93fa09d680fe6e3bec36e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MultiFab::MultiFab</definition>
        <argsstring>(const MultiFab &amp;rhs)=delete</argsstring>
        <name>MultiFab</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="97" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a62b9fe978cd451f411245dc8a1e97b40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
        <definition>MultiFab&amp; amrex::MultiFab::operator=</definition>
        <argsstring>(const MultiFab &amp;rhs)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="98" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a0d8c379908b048cb742470011c502084" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::MultiFab::define</definition>
        <argsstring>(const BoxArray &amp;bxs, const DistributionMapping &amp;dm, int nvar, int ngrow, const MFInfo &amp;info=MFInfo(), const FabFactory&lt; FArrayBox &gt; &amp;factory=FArrayBoxFactory()) override</argsstring>
        <name>define</name>
        <reimplements refid="classamrex_1_1FabArray_1a4b2db0304bc84a002692917c83bc1626">define</reimplements>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>bxs</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nvar</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngrow</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1MFInfo" kindref="compound">MFInfo</ref> &amp;</type>
          <declname>info</declname>
          <defval><ref refid="structamrex_1_1MFInfo" kindref="compound">MFInfo</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &gt; &amp;</type>
          <declname>factory</declname>
          <defval><ref refid="namespaceamrex_1abda821661019fb0a77eb3a9706dc7330" kindref="member">FArrayBoxFactory</ref>()</defval>
        </param>
        <briefdescription>
<para>Define this <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> identically to that performed by the constructor having an analogous function signature. This is only valid if this <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> was defined using the default constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="100" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="657" bodyend="666"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a051387c994b547b900dadc07c4141352" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::MultiFab::define</definition>
        <argsstring>(const BoxArray &amp;bxs, const DistributionMapping &amp;dm, int nvar, const IntVect &amp;ngrow, const MFInfo &amp;info=MFInfo(), const FabFactory&lt; FArrayBox &gt; &amp;factory=FArrayBoxFactory()) override</argsstring>
        <name>define</name>
        <reimplements refid="classamrex_1_1FabArray_1ae978e4109861cb21bbb90d389fee4a01">define</reimplements>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>bxs</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nvar</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ngrow</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1MFInfo" kindref="compound">MFInfo</ref> &amp;</type>
          <declname>info</declname>
          <defval><ref refid="structamrex_1_1MFInfo" kindref="compound">MFInfo</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &gt; &amp;</type>
          <declname>factory</declname>
          <defval><ref refid="namespaceamrex_1abda821661019fb0a77eb3a9706dc7330" kindref="member">FArrayBoxFactory</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="112" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="669" bodyend="678"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a189388cbdd6612ec9e0666687cf22ea8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiFab::operator=</definition>
        <argsstring>(Real r)</argsstring>
        <name>operator=</name>
        <param>
          <type>Real</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="124" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="651" bodyend="654"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a540eb1714a5eece782de2a4afdd62c8e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::MultiFab::min</definition>
        <argsstring>(int comp, int nghost=0, bool local=false) const</argsstring>
        <name>min</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Returns the minimum value contained in component comp of the <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. The parameter nghost determines the number of boundary cells to search for the minimum. The default is to search only the valid regions of the FArrayBoxes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="132" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="773" bodyend="815"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a565b25628a1896a4dec554509d6b6e18" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::MultiFab::min</definition>
        <argsstring>(const Box &amp;b, int comp, int nghost=0, bool local=false) const</argsstring>
        <name>min</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Identical to <ref refid="classamrex_1_1MultiFab_1a540eb1714a5eece782de2a4afdd62c8e" kindref="member">min()</ref> function, but confines its search to intersection of <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> b and the <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="139" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="818" bodyend="839"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1abb92462276ca55cd70f16507118f63ad" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::MultiFab::max</definition>
        <argsstring>(int comp, int nghost=0, bool local=false) const</argsstring>
        <name>max</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Returns the maximum value contained in component comp of the <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. The parameter nghost determines the number of boundary cells to search for the maximum. The default is to search only the valid regions of the FArrayBoxes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="149" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="842" bodyend="884"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1ad26e4c97b949bcafacf6c8173d632f5f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::MultiFab::max</definition>
        <argsstring>(const Box &amp;b, int comp, int nghost=0, bool local=false) const</argsstring>
        <name>max</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Identical to the previous <ref refid="classamrex_1_1MultiFab_1abb92462276ca55cd70f16507118f63ad" kindref="member">max()</ref> function, but confines its search to intersection of <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> b and the <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="156" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="887" bodyend="907"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a2c8965900aefbe0681bf72cb489b7027" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::MultiFab::norm0</definition>
        <argsstring>(int comp=0, int nghost=0, bool local=false, bool ignore_covered=false) const</argsstring>
        <name>norm0</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>ignore_covered</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Returns the maximum <emphasis>absolute</emphasis> value contained in component comp of the <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="164" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="978" bodyend="1020"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a9d57175907c89a969b9b5392631e65cf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::MultiFab::norminf</definition>
        <argsstring>(int comp=0, int nghost=0, bool local=false, bool ignore_covered=false) const</argsstring>
        <name>norminf</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>ignore_covered</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="165" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" bodystart="165" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a6f5159e97350762eba3263f11ba3e653" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::MultiFab::norm0</definition>
        <argsstring>(const iMultiFab &amp;mask, int comp=0, int nghost=0, bool local=false) const</argsstring>
        <name>norm0</name>
        <param>
          <type>const <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="169" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="958" bodyend="975"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1abc7329288ae6f73f8fd7eda95e49b8ba" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::MultiFab::norminf</definition>
        <argsstring>(const iMultiFab &amp;mask, int comp=0, int nghost=0, bool local=false) const</argsstring>
        <name>norminf</name>
        <param>
          <type>const <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="170" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" bodystart="170" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a727b71bae4005883ea88221157184346" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt;</type>
        <definition>Vector&lt; Real &gt; amrex::MultiFab::norm0</definition>
        <argsstring>(const Vector&lt; int &gt; &amp;comps, int nghost=0, bool local=false, bool ignore_covered=false) const</argsstring>
        <name>norm0</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>comps</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>ignore_covered</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Returns the maximum <emphasis>absolute</emphasis> values contained in each component of &quot;comps&quot; of the <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. No ghost cells are used. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="178" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="1023" bodyend="1037"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a92b462cb3d7c55a7d3277aaa9e3e0ff3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt;</type>
        <definition>Vector&lt;Real&gt; amrex::MultiFab::norminf</definition>
        <argsstring>(const Vector&lt; int &gt; &amp;comps, int nghost=0, bool local=false, bool ignore_covered=false) const</argsstring>
        <name>norminf</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>comps</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>ignore_covered</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="179" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" bodystart="179" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a5879f0308ed537286037a041e32fd810" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::MultiFab::norm1</definition>
        <argsstring>(int comp, const Periodicity &amp;period, bool ignore_covered=false) const</argsstring>
        <name>norm1</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>ignore_covered</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Returns the L1 norm of component &quot;comp&quot; over the <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. No ghost cells are used. This version has no double counting for nodal data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="187" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="1088" bodyend="1106"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1afcdc4aaf73896a44ad364520af9a7398" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::MultiFab::norm1</definition>
        <argsstring>(int comp=0, int ngrow=0, bool local=false) const</argsstring>
        <name>norm1</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngrow</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Returns the L1 norm of component &quot;comp&quot; over the <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. ngrow ghost cells are used. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="192" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="1109" bodyend="1126"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1ae4ba8fc4756c0621e3872055ffce31b0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt;</type>
        <definition>Vector&lt; Real &gt; amrex::MultiFab::norm1</definition>
        <argsstring>(const Vector&lt; int &gt; &amp;comps, int ngrow=0, bool local=false) const</argsstring>
        <name>norm1</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>comps</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngrow</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Returns the L1 norm of each component of &quot;comps&quot; over the <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. ngrow ghost cells are used. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="197" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="1129" bodyend="1145"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1aa0b6bb4fb2ee206356cd613ed8458b8f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::MultiFab::norm2</definition>
        <argsstring>(int comp=0) const</argsstring>
        <name>norm2</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Returns the L2 norm of component &quot;comp&quot; over the <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. No ghost cells are used. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="202" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="1040" bodyend="1047"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a0982c02422dcb603d1c5129d744d6611" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::MultiFab::norm2</definition>
        <argsstring>(int comp, const Periodicity &amp;period) const</argsstring>
        <name>norm2</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
        </param>
        <briefdescription>
<para>Returns the L2 norm of component &quot;comp&quot; over the <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. No ghost cells are used. This version has no double counting for nodal data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="207" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="1050" bodyend="1069"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a933d1dd75c4441bf922f8c5baa931be4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt;</type>
        <definition>Vector&lt; Real &gt; amrex::MultiFab::norm2</definition>
        <argsstring>(const Vector&lt; int &gt; &amp;comps) const</argsstring>
        <name>norm2</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>comps</declname>
        </param>
        <briefdescription>
<para>Returns the L2 norm of each component of &quot;comps&quot; over the <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. No ghost cells are used. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="212" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="1072" bodyend="1085"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a62669a27ec4a577f0bef72dc2a1243aa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::MultiFab::sum</definition>
        <argsstring>(int comp=0, bool local=false) const</argsstring>
        <name>sum</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Returns the sum of component &quot;comp&quot; over the <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> <ndash/> no ghost cells are included. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="216" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="1148" bodyend="1166"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1aafbc29a68d3c0c000fee414f76f7b79c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiFab::plus</definition>
        <argsstring>(Real val, int comp, int num_comp, int nghost=0)</argsstring>
        <name>plus</name>
        <param>
          <type>Real</type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Adds the scalar value val to the value of each cell in the specified subregion of the <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. The subregion consists of the num_comp components starting at component comp. The value of nghost specifies the number of cells in the boundary region of each <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> in the subregion that should be modified. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="225" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="1181" bodyend="1189"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a9d8ec2a7197f373ce88a43a2adaf1da0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiFab::plus</definition>
        <argsstring>(Real val, const Box &amp;region, int comp, int num_comp, int nghost=0)</argsstring>
        <name>plus</name>
        <param>
          <type>Real</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>region</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Identical to the previous version of <ref refid="classamrex_1_1MultiFab_1aafbc29a68d3c0c000fee414f76f7b79c" kindref="member">plus()</ref>, with the restriction that the subregion is further constrained to the intersection with <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> region. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="234" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="1192" bodyend="1199"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a0b410a02ca211c74033d77fac9b8a40b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiFab::plus</definition>
        <argsstring>(Real val, int nghost)</argsstring>
        <name>plus</name>
        <param>
          <type>Real</type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
<para>Adds the scalar value val to the value of each cell in the valid region of each component of the <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. The value of nghost specifies the number of cells in the boundary region that should be modified. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="245" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="522" bodyend="525"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a38506771a271ef8a5d4b6c3065815566" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiFab::plus</definition>
        <argsstring>(Real val, const Box &amp;region, int nghost)</argsstring>
        <name>plus</name>
        <param>
          <type>Real</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>region</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
<para>Adds the scalar value val to the value of each cell in the valid region of each component of the <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>, that also intersects the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> region. The value of nghost specifies the number of cells in the boundary region of each <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> in the subregion that should be modified. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="254" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="528" bodyend="531"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1aa9158374809b83cfd40a8092d4e63bdd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiFab::mult</definition>
        <argsstring>(Real val, int comp, int num_comp, int nghost=0)</argsstring>
        <name>mult</name>
        <param>
          <type>Real</type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Scales the value of each cell in the specified subregion of the <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> by the scalar val (a[i] &lt;- a[i]*val). The subregion consists of the num_comp components starting at component comp. The value of nghost specifies the number of cells in the boundary region of each <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> in the subregion that should be modified. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="265" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="1208" bodyend="1215"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a75e0a3256784cedf410454d5bd9674e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiFab::mult</definition>
        <argsstring>(Real val, const Box &amp;region, int comp, int num_comp, int nghost=0)</argsstring>
        <name>mult</name>
        <param>
          <type>Real</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>region</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Identical to the previous version of <ref refid="classamrex_1_1MultiFab_1aa9158374809b83cfd40a8092d4e63bdd" kindref="member">mult()</ref>, with the restriction that the subregion is further constrained to the intersection with <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> region. The value of nghost specifies the number of cells in the boundary region of each <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> in the subregion that should be modified. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="276" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="1218" bodyend="1225"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a3f3d92f9f07cf43431b03744b50edbdb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiFab::mult</definition>
        <argsstring>(Real val, int nghost=0)</argsstring>
        <name>mult</name>
        <param>
          <type>Real</type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Scales the value of each cell in the valid region of each component of the <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> by the scalar val (a[i] &lt;- a[i]*val). The value of nghost specifies the number of cells in the boundary region that should be modified. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="287" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="534" bodyend="537"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1aa872fb55fa5e6dc2008584d6d6e927b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiFab::mult</definition>
        <argsstring>(Real val, const Box &amp;region, int nghost=0)</argsstring>
        <name>mult</name>
        <param>
          <type>Real</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>region</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Scales the value of each cell in the valid region of each component of the <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> by the scalar val (a[i] &lt;- a[i]*val), that also intersects the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> region. The value of nghost specifies the number of cells in the boundary region of each <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> in the subregion that should be modified. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="296" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="540" bodyend="543"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a1151850ade9c29c2c657b173ad4a29c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiFab::invert</definition>
        <argsstring>(Real numerator, int comp, int num_comp, int nghost=0)</argsstring>
        <name>invert</name>
        <param>
          <type>Real</type>
          <declname>numerator</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Replaces the value of each cell in the specified subregion of the <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> with its reciprocal multiplied by the value of numerator. The subregion consists of the num_comp components starting at component comp. The value of nghost specifies the number of cells in the boundary region of each <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> in the subregion that should be modified. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="307" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="1228" bodyend="1235"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a773e797a62924f1a23e4774c11b97f6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiFab::invert</definition>
        <argsstring>(Real numerator, const Box &amp;region, int comp, int num_comp, int nghost=0)</argsstring>
        <name>invert</name>
        <param>
          <type>Real</type>
          <declname>numerator</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>region</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Identical to the previous version of <ref refid="classamrex_1_1MultiFab_1a1151850ade9c29c2c657b173ad4a29c3" kindref="member">invert()</ref>, with the restriction that the subregion is further constrained to the intersection with <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> region. The value of nghost specifies the number of cells in the boundary region of each <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> in the subregion that should be modified. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="318" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="1238" bodyend="1245"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1ad7883de5b1bd515c4714e434e2a98547" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiFab::invert</definition>
        <argsstring>(Real numerator, int nghost)</argsstring>
        <name>invert</name>
        <param>
          <type>Real</type>
          <declname>numerator</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
<para>Replaces the value of each cell in the specified subregion of the <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> with its reciprocal multiplied by the value of numerator. The value of nghost specifies the number of cells in the boundary region that should be modified. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="329" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="546" bodyend="549"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1abc88cd9b7b451baaea2d53b97d20368a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiFab::invert</definition>
        <argsstring>(Real numerator, const Box &amp;region, int nghost)</argsstring>
        <name>invert</name>
        <param>
          <type>Real</type>
          <declname>numerator</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>region</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
<para>Replaces the value of each cell in the specified subregion of the <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>, that also intersects the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> region, with its reciprocal multiplied by the value of numerator. The value of nghost specifies the number of cells in the boundary region of each <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> in the subregion that should be modified. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="338" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="552" bodyend="555"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1acaf881689685c3fa82ed65829f6be4c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiFab::negate</definition>
        <argsstring>(int comp, int num_comp, int nghost=0)</argsstring>
        <name>negate</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Negates the value of each cell in the specified subregion of the <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. The subregion consists of the num_comp components starting at component comp. The value of nghost specifies the number of cells in the boundary region of each <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> in the subregion that should be modified. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="348" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="1248" bodyend="1254"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1ad7cd1360a57300fc2e5eb5afdf6ff1dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiFab::negate</definition>
        <argsstring>(const Box &amp;region, int comp, int num_comp, int nghost=0)</argsstring>
        <name>negate</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>region</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Identical to the previous version of <ref refid="classamrex_1_1MultiFab_1acaf881689685c3fa82ed65829f6be4c3" kindref="member">negate()</ref>, with the restriction that the subregion is further constrained to the intersection with <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> region. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="356" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="1257" bodyend="1263"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a9939b447c0dc1a130c6952d2b376f8ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiFab::negate</definition>
        <argsstring>(int nghost=0)</argsstring>
        <name>negate</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Negates the value of each cell in the valid region of the <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. The value of nghost specifies the number of cells in the boundary region that should be modified. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="365" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="558" bodyend="561"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1ae4ff818a86f791cca374edbe34bb6830" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiFab::negate</definition>
        <argsstring>(const Box &amp;region, int nghost=0)</argsstring>
        <name>negate</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>region</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Negates the value of each cell in the valid region of the <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> that also intersects the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> region. The value of nghost specifies the number of cells in the boundary region that should be modified. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="372" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="564" bodyend="567"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1ab351d9250414508cf086635f54e2e2ce" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>IntVect amrex::MultiFab::minIndex</definition>
        <argsstring>(int comp, int nghost=0) const</argsstring>
        <name>minIndex</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="375" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="942" bodyend="947"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a642f844c834d6fb714e3e0fc6eb75e56" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>IntVect amrex::MultiFab::maxIndex</definition>
        <argsstring>(int comp, int nghost=0) const</argsstring>
        <name>maxIndex</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="378" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="950" bodyend="955"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a6679e5d7843de95ca2245f599715b4f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiFab::plus</definition>
        <argsstring>(const MultiFab &amp;mf, int strt_comp, int num_comp, int nghost)</argsstring>
        <name>plus</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>strt_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
<para>This function adds the values of the cells in mf to the corresponding cells of this <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. mf is required to have the same <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> or &quot;valid region&quot; as this <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. The addition is done only to num_comp components, starting with component number strt_comp. The parameter nghost specifies the number of boundary cells that will be modified. If nghost == 0, only the valid region of each <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> will be modified. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="389" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="1202" bodyend="1205"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a1bc09d7836dcd4500472fa853a8fcd22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiFab::minus</definition>
        <argsstring>(const MultiFab &amp;mf, int strt_comp, int num_comp, int nghost)</argsstring>
        <name>minus</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>strt_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
<para>This function subtracts the values of the cells in mf from the corresponding cells of this <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. mf is required to have the same <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> or &quot;valid region&quot; as this <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. The subtraction is done only to num_comp components, starting with component number strt_comp. The parameter nghost specifies the number of boundary cells that will be modified. If nghost == 0, only the valid region of each <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> will be modified. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="402" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="1169" bodyend="1172"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1aca202d20f39f94aabb5ffd1581a535f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiFab::divide</definition>
        <argsstring>(const MultiFab &amp;mf, int strt_comp, int num_comp, int nghost)</argsstring>
        <name>divide</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>strt_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
<para>This function divides the values of the cells in mf from the corresponding cells of this <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. mf is required to have the same <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> or &quot;valid region&quot; as this <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. The division is done only to num_comp components, starting with component number strt_comp. The parameter nghost specifies the number of boundary cells that will be modified. If nghost == 0, only the valid region of each <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> will be modified. Note, nothing is done to protect against divide by zero. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="416" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="1175" bodyend="1178"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a4b718093de8d413ed21f372b9f65761f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::MultiFab::contains_nan</definition>
        <argsstring>(bool local=false) const</argsstring>
        <name>contains_nan</name>
        <param>
          <type>bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Are there any NaNs in the MF? This may return false, even if the MF contains NaNs, if the machine doesn&apos;t support the appropriate NaN testing functions. </para>
        </briefdescription>
        <detaileddescription>
<para>This version checks all components and grow cells. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="633" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="731" bodyend="734"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a77d980f51c794347641c653d5f88aefd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::MultiFab::contains_nan</definition>
        <argsstring>(int scomp, int ncomp, int ngrow=0, bool local=false) const</argsstring>
        <name>contains_nan</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngrow</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="634" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="694" bodyend="700"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1aed2689ad22160cb7a93e6b26aabd2972" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::MultiFab::contains_nan</definition>
        <argsstring>(int scomp, int ncomp, const IntVect &amp;ngrow, bool local=false) const</argsstring>
        <name>contains_nan</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ngrow</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="635" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="703" bodyend="728"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a95abf28111fc5c1a4bfe5f24bf7a6d05" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::MultiFab::contains_inf</definition>
        <argsstring>(bool local=false) const</argsstring>
        <name>contains_inf</name>
        <param>
          <type>bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Are there any Infs in the MF? This may return false, even if the MF contains Infs, if the machine doesn&apos;t support the appropriate Inf testing functions. This version checks all components and grow cells. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="642" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="767" bodyend="770"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a47a5806c8cffcf0f40ba72a7af2e8ac7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::MultiFab::contains_inf</definition>
        <argsstring>(int scomp, int ncomp, int ngrow=0, bool local=false) const</argsstring>
        <name>contains_inf</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngrow</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="643" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="761" bodyend="764"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a08e85daea7a8ba20067cd15af3725cd6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::MultiFab::contains_inf</definition>
        <argsstring>(int scomp, int ncomp, const IntVect &amp;ngrow, bool local=false) const</argsstring>
        <name>contains_inf</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ngrow</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="644" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="737" bodyend="758"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1afbd6dab928640c74eb1d7a28e8f36afa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &gt;</type>
        <definition>std::unique_ptr&lt; MultiFab &gt; amrex::MultiFab::OverlapMask</definition>
        <argsstring>(const Periodicity &amp;period=Periodicity::NonPeriodic()) const</argsstring>
        <name>OverlapMask</name>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <briefdescription>
<para>Return a mask indicating how many duplicates are in each point. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="649" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="1266" bodyend="1325"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a3c8c9bf8723fcfac9b8d410485e7ed4a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &gt;</type>
        <definition>std::unique_ptr&lt; iMultiFab &gt; amrex::MultiFab::OwnerMask</definition>
        <argsstring>(const Periodicity &amp;period=Periodicity::NonPeriodic()) const</argsstring>
        <name>OwnerMask</name>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <briefdescription>
<para>Owner is the grid with the lowest grid number containing the data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="651" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="1328" bodyend="1331"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a7e5a1ca37cf868e20311541187b08216" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiFab::AverageSync</definition>
        <argsstring>(const Periodicity &amp;period=Periodicity::NonPeriodic())</argsstring>
        <name>AverageSync</name>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <briefdescription>
<para>Sync up nodal data via averaging. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="654" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="1334" bodyend="1342"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1ad80a338735a5addaa47a0726cb24c8c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiFab::WeightedSync</definition>
        <argsstring>(const MultiFab &amp;wgt, const Periodicity &amp;period=Periodicity::NonPeriodic())</argsstring>
        <name>WeightedSync</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>wgt</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <briefdescription>
<para>Sync up nodal data with weights. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="656" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="1345" bodyend="1362"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1aec134620b7dfd17d0b8a540e9a96f41c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiFab::OverrideSync</definition>
        <argsstring>(const Periodicity &amp;period=Periodicity::NonPeriodic())</argsstring>
        <name>OverrideSync</name>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <briefdescription>
<para>Sync up nodal data with owners overriding non-owners. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="658" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="1365" bodyend="1370"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1afc2840698e1cec5a44ebeb9d34783327" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiFab::OverrideSync</definition>
        <argsstring>(const iMultiFab &amp;msk, const Periodicity &amp;period=Periodicity::NonPeriodic())</argsstring>
        <name>OverrideSync</name>
        <param>
          <type>const <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &amp;</type>
          <declname>msk</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="659" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="1373" bodyend="1376"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a891a75562cd2f21525d54eb493ae0e2c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::MultiFab::Dot</definition>
        <argsstring>(const MultiFab &amp;x, int xcomp, const MultiFab &amp;y, int ycomp, int num_comp, int nghost, bool local=false)</argsstring>
        <name>Dot</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>xcomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ycomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Returns the dot product of two MultiFabs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="423" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="36" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1ae12d3c689432b9485ffba3b6ce5c7dc7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::MultiFab::Dot</definition>
        <argsstring>(const MultiFab &amp;x, int xcomp, int num_comp, int nghost, bool local=false)</argsstring>
        <name>Dot</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>xcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Returns the dot product of a <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> with itself. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="430" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="83" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a4530e478f0e9c128719e7649e26af997" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::MultiFab::Dot</definition>
        <argsstring>(const iMultiFab &amp;mask, const MultiFab &amp;x, int xcomp, const MultiFab &amp;y, int ycomp, int num_comp, int nghost, bool local=false)</argsstring>
        <name>Dot</name>
        <param>
          <type>const <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>xcomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ycomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="433" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="106" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a4a819ab01c7558b8982acb35eaf0f861" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiFab::Add</definition>
        <argsstring>(MultiFab &amp;dst, const MultiFab &amp;src, int srccomp, int dstcomp, int numcomp, int nghost)</argsstring>
        <name>Add</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dstcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
<para>Add src to dst including nghost ghost cells. The two MultiFabs MUST have the same underlying <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="441" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="139" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1adda7ad2b1b845b959488fd19acdd335b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiFab::Add</definition>
        <argsstring>(MultiFab &amp;dst, const MultiFab &amp;src, int srccomp, int dstcomp, int numcomp, const IntVect &amp;nghost)</argsstring>
        <name>Add</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dstcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="448" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="146" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1ab70ce65ff46ae21b8cc4e0584fe26ffa" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiFab::Copy</definition>
        <argsstring>(MultiFab &amp;dst, const MultiFab &amp;src, int srccomp, int dstcomp, int numcomp, int nghost)</argsstring>
        <name>Copy</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dstcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
<para>Copy from src to dst including nghost ghost cells. The two MultiFabs MUST have the same underlying <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. The copy is local. The parallel copy function is in FabArray.H. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="459" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="159" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1af5fd05a65f284f6e96a1deba5ef423bb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiFab::Copy</definition>
        <argsstring>(MultiFab &amp;dst, const MultiFab &amp;src, int srccomp, int dstcomp, int numcomp, const IntVect &amp;nghost)</argsstring>
        <name>Copy</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dstcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="466" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="166" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a2e29e28afce0aa520da5cd068cb5e96b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiFab::Swap</definition>
        <argsstring>(MultiFab &amp;dst, MultiFab &amp;src, int srccomp, int dstcomp, int numcomp, int nghost)</argsstring>
        <name>Swap</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dstcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
<para>Swap from src to dst including nghost ghost cells. The two MultiFabs MUST have the same underlying <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. The swap is local. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="478" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="179" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1ac259813cd54d52b5c20cad7c0f24c246" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiFab::Swap</definition>
        <argsstring>(MultiFab &amp;dst, MultiFab &amp;src, int srccomp, int dstcomp, int numcomp, const IntVect &amp;nghost)</argsstring>
        <name>Swap</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dstcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="485" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="186" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a5f37af40303a10e8d54e15c1931a5b8e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiFab::Subtract</definition>
        <argsstring>(MultiFab &amp;dst, const MultiFab &amp;src, int srccomp, int dstcomp, int numcomp, int nghost)</argsstring>
        <name>Subtract</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dstcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
<para>Subtract src from dst including nghost ghost cells. The two MultiFabs MUST have the same underlying <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="496" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="249" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a4f2c04ea9d0f7a551bc2263b9a63d324" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiFab::Subtract</definition>
        <argsstring>(MultiFab &amp;dst, const MultiFab &amp;src, int srccomp, int dstcomp, int numcomp, const IntVect &amp;nghost)</argsstring>
        <name>Subtract</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dstcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="503" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="256" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a62db3405e4e92a2a5bd5d3d9d19698ba" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiFab::Multiply</definition>
        <argsstring>(MultiFab &amp;dst, const MultiFab &amp;src, int srccomp, int dstcomp, int numcomp, int nghost)</argsstring>
        <name>Multiply</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dstcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
<para>Multiply dst by src including nghost ghost cells. The two MultiFabs MUST have the same underlying <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="513" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="269" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a1782d5eefcdae9512c4d9ece50a2253b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiFab::Multiply</definition>
        <argsstring>(MultiFab &amp;dst, const MultiFab &amp;src, int srccomp, int dstcomp, int numcomp, const IntVect &amp;nghost)</argsstring>
        <name>Multiply</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dstcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="520" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="276" bodyend="286"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1aa87b51ae98f171c3624b5f6cbdfffac0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiFab::Divide</definition>
        <argsstring>(MultiFab &amp;dst, const MultiFab &amp;src, int srccomp, int dstcomp, int numcomp, int nghost)</argsstring>
        <name>Divide</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dstcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
<para>Divide dst by src including nghost ghost cells. The two MultiFabs MUST have the same underlying <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="530" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="289" bodyend="293"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1ac5e5a2510a046eb1e6567c06c71a55ad" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiFab::Divide</definition>
        <argsstring>(MultiFab &amp;dst, const MultiFab &amp;src, int srccomp, int dstcomp, int numcomp, const IntVect &amp;nghost)</argsstring>
        <name>Divide</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dstcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="537" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="296" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a505eb471a78f4e0f8791b10cbb1bbd75" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiFab::Saxpy</definition>
        <argsstring>(MultiFab &amp;dst, Real a, const MultiFab &amp;src, int srccomp, int dstcomp, int numcomp, int nghost)</argsstring>
        <name>Saxpy</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dstcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
<para>dst += a*src </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="546" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="309" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a4f39387844b0d4393e9cffd9b8fb3cc0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiFab::Saxpy</definition>
        <argsstring>(MultiFab &amp;dst, Real a, const MultiFab &amp;src, int srccomp, int dstcomp, int numcomp, const IntVect &amp;nghost)</argsstring>
        <name>Saxpy</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dstcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="554" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="316" bodyend="355"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1aa06c264011c21bb5a97070ae7cf250d3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiFab::Xpay</definition>
        <argsstring>(MultiFab &amp;dst, Real a, const MultiFab &amp;src, int srccomp, int dstcomp, int numcomp, int nghost)</argsstring>
        <name>Xpay</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dstcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
<para>dst = src + a*dst </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="565" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="358" bodyend="362"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a6057618ee794a63cc24ba0d95007e609" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiFab::Xpay</definition>
        <argsstring>(MultiFab &amp;dst, Real a, const MultiFab &amp;src, int srccomp, int dstcomp, int numcomp, const IntVect &amp;nghost)</argsstring>
        <name>Xpay</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dstcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="573" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="365" bodyend="404"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a0486c02587ea11cc9a30e9da8d7cf957" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiFab::LinComb</definition>
        <argsstring>(MultiFab &amp;dst, Real a, const MultiFab &amp;x, int xcomp, Real b, const MultiFab &amp;y, int ycomp, int dstcomp, int numcomp, int nghost)</argsstring>
        <name>LinComb</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>xcomp</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ycomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dstcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
<para>dst = a*x + b*y </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="583" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="407" bodyend="413"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1ab858dc7ae13d97eea108b007d547488f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiFab::LinComb</definition>
        <argsstring>(MultiFab &amp;dst, Real a, const MultiFab &amp;x, int xcomp, Real b, const MultiFab &amp;y, int ycomp, int dstcomp, int numcomp, const IntVect &amp;nghost)</argsstring>
        <name>LinComb</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>xcomp</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ycomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dstcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="594" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="416" bodyend="462"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a71038d97e0e66d46a0a45388b7614ce1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiFab::AddProduct</definition>
        <argsstring>(MultiFab &amp;dst, const MultiFab &amp;src1, int comp1, const MultiFab &amp;src2, int comp2, int dstcomp, int numcomp, int nghost)</argsstring>
        <name>AddProduct</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>src1</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp1</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>src2</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp2</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dstcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
<para>dst += src1*src2 </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="608" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="465" bodyend="471"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1ad85e43bc90758c5976c72acd8cfdb033" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiFab::AddProduct</definition>
        <argsstring>(MultiFab &amp;dst, const MultiFab &amp;src1, int comp1, const MultiFab &amp;src2, int comp2, int dstcomp, int numcomp, const IntVect &amp;nghost)</argsstring>
        <name>AddProduct</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>src1</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp1</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>src2</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp2</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dstcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="617" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="474" bodyend="519"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1a7d869f54f3d6f4e3ede7eb0103954a9e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiFab::Initialize</definition>
        <argsstring>()</argsstring>
        <name>Initialize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="661" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="570" bodyend="583"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MultiFab_1ae7a5398061b1bffdd1679a3a78f8b741" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiFab::Finalize</definition>
        <argsstring>()</argsstring>
        <name>Finalize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="662" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="586" bodyend="589"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classamrex_1_1MultiFab_1aa4f9b9a2a37baa29e7767a80f6856dcd" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiFab::initVal</definition>
        <argsstring>()</argsstring>
        <name>initVal</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="670" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="681" bodyend="691"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A collection (stored as an array) of <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> objects. This class is useful for storing floating point data on a domain defined by a union of rectangular regions embedded in a uniform index space. <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> class extends the function of the underlying <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> class just as the <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> class extends the function of <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab&lt;Real&gt;</ref>. Additional member functions are defined for I/O and simple arithmetic operations on these aggregate objects. This class does NOT provide a copy constructor or assignment operator. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>amrex::MultiFab</label>
        <link refid="classamrex_1_1MultiFab"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>amrex::FabArray&lt; FArrayBox &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="8">
        <label>amrex::ArenaInfo</label>
        <link refid="structamrex_1_1ArenaInfo"/>
      </node>
      <node id="12">
        <label>amrex::MultiArray4&lt; value_type &gt;</label>
        <link refid="structamrex_1_1MultiArray4"/>
        <childnode refid="13" relation="usage">
          <edgelabel>hp</edgelabel>
          <edgelabel>dp</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>amrex::DataAllocator</label>
        <link refid="structamrex_1_1DataAllocator"/>
        <childnode refid="7" relation="usage">
          <edgelabel>m_arena</edgelabel>
        </childnode>
      </node>
      <node id="10">
        <label>std::vector&lt; std::string, std::allocator&lt; std::string &gt; &gt;</label>
      </node>
      <node id="3">
        <label>amrex::MultiArray4&lt; value_type const &gt;</label>
        <link refid="structamrex_1_1MultiArray4"/>
        <childnode refid="4" relation="usage">
          <edgelabel>hp</edgelabel>
          <edgelabel>dp</edgelabel>
        </childnode>
      </node>
      <node id="13">
        <label>amrex::Array4&lt; value_type &gt;</label>
        <link refid="structamrex_1_1Array4"/>
        <childnode refid="5" relation="usage">
          <edgelabel>begin</edgelabel>
          <edgelabel>end</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>amrex::Arena</label>
        <link refid="classamrex_1_1Arena"/>
        <childnode refid="8" relation="usage">
          <edgelabel>arena_info</edgelabel>
        </childnode>
      </node>
      <node id="11">
        <label>amrex::FabArray&lt; FAB &gt;::ShMem</label>
        <link refid="structamrex_1_1FabArray_1_1ShMem"/>
      </node>
      <node id="5">
        <label>amrex::Dim3</label>
        <link refid="structamrex_1_1Dim3"/>
      </node>
      <node id="4">
        <label>amrex::Array4&lt; value_type const &gt;</label>
        <link refid="structamrex_1_1Array4"/>
        <childnode refid="5" relation="usage">
          <edgelabel>begin</edgelabel>
          <edgelabel>end</edgelabel>
        </childnode>
      </node>
      <node id="9">
        <label>amrex::Vector&lt; std::string &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="10" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>amrex::MultiFab</label>
        <link refid="classamrex_1_1MultiFab"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>amrex::FabArray&lt; FArrayBox &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="3" relation="usage">
          <edgelabel>m_const_arrays</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>m_dallocator</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>m_tags</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>shmem</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>m_arrays</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="37" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" bodystart="34" bodyend="671"/>
    <listofallmembers>
      <member refid="classamrex_1_1FabArray_1a3f6af498b285e95985a51f95c48a6379" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>abs</name></member>
      <member refid="classamrex_1_1FabArray_1a7a069464ee13b5497c41bb501f4fdf30" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>abs</name></member>
      <member refid="classamrex_1_1MultiFab_1a4a819ab01c7558b8982acb35eaf0f861" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>Add</name></member>
      <member refid="classamrex_1_1MultiFab_1adda7ad2b1b845b959488fd19acdd335b" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>Add</name></member>
      <member refid="classamrex_1_1MultiFab_1a71038d97e0e66d46a0a45388b7614ce1" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>AddProduct</name></member>
      <member refid="classamrex_1_1MultiFab_1ad85e43bc90758c5976c72acd8cfdb033" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>AddProduct</name></member>
      <member refid="classamrex_1_1FabArray_1ab7135858e136a96334d492724c02f2f1" prot="private" virt="non-virtual"><scope>amrex::MultiFab</scope><name>AllocFabs</name></member>
      <member refid="classamrex_1_1FabArray_1acfab6e1a9aaaffd0c875021c5f10c0bb" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>arena</name></member>
      <member refid="classamrex_1_1FabArray_1a6484b86e240ddcddbe0d68e9408e1d94" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>array</name></member>
      <member refid="classamrex_1_1FabArray_1a7d3d77aaf852452dd793e107eb784925" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>array</name></member>
      <member refid="classamrex_1_1FabArray_1ac907b6c39f6d2ea0ab87ad3e74286c83" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>array</name></member>
      <member refid="classamrex_1_1FabArray_1abbd458e11bca4e99e5409e864467fea0" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>array</name></member>
      <member refid="classamrex_1_1FabArray_1a1f012a06273cbacc44f65f9fbf22b65b" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>array</name></member>
      <member refid="classamrex_1_1FabArray_1ada70f3e79e1fc98346262f5c4e202b56" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>array</name></member>
      <member refid="classamrex_1_1FabArray_1a26817d3c7daad0d94c38f599dfb48aaf" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>array</name></member>
      <member refid="classamrex_1_1FabArray_1af577de2923ead0696295f5a3960af026" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>array</name></member>
      <member refid="classamrex_1_1FabArray_1a968d143683b63220ddbded86cf5010a0" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>arrays</name></member>
      <member refid="classamrex_1_1FabArray_1a980019a53308f95d935ad936288ef3c1" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>arrays</name></member>
      <member refid="classamrex_1_1FabArray_1ac8cc160bbc8e86e227c77ac768740eeb" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>atLocalIdx</name></member>
      <member refid="classamrex_1_1FabArray_1ad78e2ef302657d35d53cfe6a494d6f12" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>atLocalIdx</name></member>
      <member refid="classamrex_1_1MultiFab_1a7e5a1ca37cf868e20311541187b08216" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>AverageSync</name></member>
      <member refid="classamrex_1_1FabArray_1ad37c52d123770b902efbb42a7ba56578" prot="private" virt="non-virtual"><scope>amrex::MultiFab</scope><name>build_arrays</name></member>
      <member refid="classamrex_1_1FabArray_1a4f4a269de9e494ef89075265e5b8ecb2" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>BuildMask</name></member>
      <member refid="classamrex_1_1FabArray_1a7544c03f72d87f3f49ea0683848dc8aa" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>clear</name></member>
      <member refid="classamrex_1_1FabArray_1a202d8ada102cc6fc40749039c0e1f3a7" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>CMD_local_setVal_gpu</name></member>
      <member refid="classamrex_1_1FabArray_1a2064856b8d0efe0ae3e92d91a72f3274" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>CMD_remote_setVal_gpu</name></member>
      <member refid="classamrex_1_1FabArray_1a0af1d5ec31ed2b73f391952c5d45660a" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>const_array</name></member>
      <member refid="classamrex_1_1FabArray_1a69cbd579804bcf2d56900787806a3361" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>const_array</name></member>
      <member refid="classamrex_1_1FabArray_1acf86ed0530ed660096a54e699b402940" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>const_array</name></member>
      <member refid="classamrex_1_1FabArray_1ab9b3285ee8d8f8d97703a9e997bbd8ec" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>const_array</name></member>
      <member refid="classamrex_1_1FabArray_1ae2c5db543d1317f228503a98b47ed796" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>const_arrays</name></member>
      <member refid="classamrex_1_1MultiFab_1a95abf28111fc5c1a4bfe5f24bf7a6d05" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>contains_inf</name></member>
      <member refid="classamrex_1_1MultiFab_1a47a5806c8cffcf0f40ba72a7af2e8ac7" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>contains_inf</name></member>
      <member refid="classamrex_1_1MultiFab_1a08e85daea7a8ba20067cd15af3725cd6" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>contains_inf</name></member>
      <member refid="classamrex_1_1MultiFab_1a4b718093de8d413ed21f372b9f65761f" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>contains_nan</name></member>
      <member refid="classamrex_1_1MultiFab_1a77d980f51c794347641c653d5f88aefd" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>contains_nan</name></member>
      <member refid="classamrex_1_1MultiFab_1aed2689ad22160cb7a93e6b26aabd2972" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>contains_nan</name></member>
      <member refid="classamrex_1_1FabArray_1ad5437f2b6689074e7e4e2abc25662daa" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>copy</name></member>
      <member refid="classamrex_1_1FabArray_1a960ecb1ed695a7e13cbc7c3cff3f934a" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>copy</name></member>
      <member refid="classamrex_1_1FabArray_1a0194c55a13a8695b863eec146146335c" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>copy</name></member>
      <member refid="classamrex_1_1FabArray_1a097eb48c84133dcf0c0cb0fa40ca5f50" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>copy</name></member>
      <member refid="classamrex_1_1MultiFab_1ab70ce65ff46ae21b8cc4e0584fe26ffa" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>Copy</name></member>
      <member refid="classamrex_1_1MultiFab_1af5fd05a65f284f6e96a1deba5ef423bb" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>Copy</name></member>
      <member refid="classamrex_1_1MultiFab_1a0945ab26050100412261a7e5e51e65bc" prot="private" virt="non-virtual"><scope>amrex::MultiFab</scope><name>CopyComTagsContainer</name></member>
      <member refid="classamrex_1_1FabArray_1a9d247d17dd40dc29f57f87556b50b62a" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>copyTo</name></member>
      <member refid="classamrex_1_1FabArray_1aa19dd0482e00be1e43cd9c37d60aa0b2" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>copyTo</name></member>
      <member refid="classamrex_1_1FabArray_1a307d4ba571507f21248861f1755fcb7c" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>copyTo</name></member>
      <member refid="classamrex_1_1FabArray_1a81b037f6ed7b60e5dc95d11512468187" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>copyTo</name></member>
      <member refid="classamrex_1_1MultiFab_1a0d8c379908b048cb742470011c502084" prot="public" virt="virtual"><scope>amrex::MultiFab</scope><name>define</name></member>
      <member refid="classamrex_1_1MultiFab_1a051387c994b547b900dadc07c4141352" prot="public" virt="virtual"><scope>amrex::MultiFab</scope><name>define</name></member>
      <member refid="classamrex_1_1FabArray_1a8a547f660eb49f5b25df2a1eddcd7eef" prot="protected" virt="non-virtual"><scope>amrex::MultiFab</scope><name>define_function_called</name></member>
      <member refid="classamrex_1_1FabArray_1a53470efa9a430b70e65faf9025f485dc" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>defined</name></member>
      <member refid="classamrex_1_1FabArray_1a27dbf4d9c26df790485a219856f9d2e5" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>defined</name></member>
      <member refid="classamrex_1_1MultiFab_1aca202d20f39f94aabb5ffd1581a535f2" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>divide</name></member>
      <member refid="classamrex_1_1MultiFab_1aa87b51ae98f171c3624b5f6cbdfffac0" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>Divide</name></member>
      <member refid="classamrex_1_1MultiFab_1ac5e5a2510a046eb1e6567c06c71a55ad" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>Divide</name></member>
      <member refid="classamrex_1_1MultiFab_1a891a75562cd2f21525d54eb493ae0e2c" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>Dot</name></member>
      <member refid="classamrex_1_1MultiFab_1ae12d3c689432b9485ffba3b6ce5c7dc7" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>Dot</name></member>
      <member refid="classamrex_1_1MultiFab_1a4530e478f0e9c128719e7649e26af997" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>Dot</name></member>
      <member refid="classamrex_1_1FabArray_1adb282b42c0eb97cbb55037bc7bdea04a" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>EnforcePeriodicity</name></member>
      <member refid="classamrex_1_1FabArray_1aecf0e342dcbe19b9bb23e73c326155ff" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>EnforcePeriodicity</name></member>
      <member refid="classamrex_1_1FabArray_1a076781df7b9077c51fecd6a62172ed74" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>EnforcePeriodicity</name></member>
      <member refid="classamrex_1_1FabArray_1aed34744a8326118324307052aef407d9" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>FabArray</name></member>
      <member refid="classamrex_1_1FabArray_1a7ab314f12326cda647aa1fe94644653e" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>FabArray</name></member>
      <member refid="classamrex_1_1FabArray_1a2797eff487b1b16ec6cb075cfdd2fb1d" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>FabArray</name></member>
      <member refid="classamrex_1_1FabArray_1a4e5969fd37c641e0b9bb849f812c1199" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>FabArray</name></member>
      <member refid="classamrex_1_1FabArray_1a24c8625dbbdf687a2f44a071b97badeb" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>FabArray</name></member>
      <member refid="classamrex_1_1FabArray_1a2f8ab656cb0ef985199be4e578ec91b5" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>FabArray</name></member>
      <member refid="classamrex_1_1FabArray_1ad9691d1c35c1ed43c824db2401cfafba" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>fabPtr</name></member>
      <member refid="classamrex_1_1FabArray_1af389f3c3b3cdc88a85bfcf5d30148acc" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>fabPtr</name></member>
      <member refid="classamrex_1_1FabArray_1a8d3bc775d510dacd5b2f4e03854795f2" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>fabPtr</name></member>
      <member refid="classamrex_1_1FabArray_1a3ac14bd473ccfd86adaf7418017b2f33" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>fabPtr</name></member>
      <member refid="classamrex_1_1FabArray_1a362cb84f113b8019a6f8b03129d1cf48" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>Factory</name></member>
      <member refid="classamrex_1_1FabArray_1a5fbf15f2a4abd1397a6474713b122824" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>FB_local_copy_cpu</name></member>
      <member refid="classamrex_1_1FabArray_1a60891bcadc0382dfc1aaf4df8ad34771" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>FB_local_copy_gpu</name></member>
      <member refid="classamrex_1_1FabArray_1a4bec341c204bf002ce9ea2d636e94f56" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>fbd</name></member>
      <member refid="classamrex_1_1FabArray_1a2eb7f1c8a1ad0b253f6b4dc3445b5ac6" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>FBEP_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a0e0073142d1598838048317216fa6d12" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>FBEP_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1ae2a65f54013f600fa7dab70c171f098f" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>FillBoundary</name></member>
      <member refid="classamrex_1_1FabArray_1ad83cd23ca9de6bc255fab20b0e3349e0" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>FillBoundary</name></member>
      <member refid="classamrex_1_1FabArray_1a1ed9770416d4f7f30e3ff2e194d028f0" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>FillBoundary</name></member>
      <member refid="classamrex_1_1FabArray_1a63f39e8a1dbd16c2a12f1f9c09f8e86d" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>FillBoundary</name></member>
      <member refid="classamrex_1_1FabArray_1a653f81fb7647cbb92e4996116f5f2b98" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>FillBoundary</name></member>
      <member refid="classamrex_1_1FabArray_1a7819663deb9f09aba2dfb7c2d97b8008" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>FillBoundary</name></member>
      <member refid="classamrex_1_1FabArray_1a6ab6171d0c8b5e44260c328d0582621b" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>FillBoundary_finish</name></member>
      <member refid="classamrex_1_1FabArray_1a6ab6171d0c8b5e44260c328d0582621b" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>FillBoundary_finish</name></member>
      <member refid="classamrex_1_1FabArray_1ac2d0be5fcc4f1d0ca3bc90326479e6a4" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>FillBoundary_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a42e0c1a45de59b4b0b3aa9179045c2da" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>FillBoundary_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a5953b66baae9e84da1bfe301aeb0f584" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>FillBoundary_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a35b5ac9091040a386f3c6e80ee598edb" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>FillBoundary_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a9cee2171946118a9d537329dc11b73ba" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>FillBoundary_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a31ac8478feaa72ab3960bb08c69b082b" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>FillBoundary_test</name></member>
      <member refid="classamrex_1_1MultiFab_1ae7a5398061b1bffdd1679a3a78f8b741" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>Finalize</name></member>
      <member refid="classamrex_1_1FabArray_1a0776aa41d2309534c3d0792320eb6763" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>get</name></member>
      <member refid="classamrex_1_1FabArray_1ac9c35f9ba5d6042bc5fff01e5d5e295b" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>get</name></member>
      <member refid="classamrex_1_1FabArray_1a427dc42c638a674461f8b98f16875114" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>get</name></member>
      <member refid="classamrex_1_1FabArray_1a40ad454f948a86047a3c9887f18eb2b2" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>get</name></member>
      <member refid="classamrex_1_1FabArray_1ac696f139b6cf56e02828264b09a48636" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>hasEBFabFactory</name></member>
      <member refid="classamrex_1_1MultiFab_1a7d869f54f3d6f4e3ede7eb0103954a9e" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>Initialize</name></member>
      <member refid="classamrex_1_1MultiFab_1aa4f9b9a2a37baa29e7767a80f6856dcd" prot="private" virt="non-virtual"><scope>amrex::MultiFab</scope><name>initVal</name></member>
      <member refid="classamrex_1_1MultiFab_1a1151850ade9c29c2c657b173ad4a29c3" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>invert</name></member>
      <member refid="classamrex_1_1MultiFab_1a773e797a62924f1a23e4774c11b97f6f" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>invert</name></member>
      <member refid="classamrex_1_1MultiFab_1ad7883de5b1bd515c4714e434e2a98547" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>invert</name></member>
      <member refid="classamrex_1_1MultiFab_1abc88cd9b7b451baaea2d53b97d20368a" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>invert</name></member>
      <member refid="classamrex_1_1FabArray_1a6024801773f82956d6cdfcd47edc15ef" prot="public" virt="non-virtual" ambiguityscope="FabArray&lt; FArrayBox &gt;::"><scope>amrex::MultiFab</scope><name>invert</name></member>
      <member refid="classamrex_1_1FabArray_1a17da9b4e30ef5211cdc56747641a622a" prot="public" virt="non-virtual" ambiguityscope="FabArray&lt; FArrayBox &gt;::"><scope>amrex::MultiFab</scope><name>invert</name></member>
      <member refid="classamrex_1_1FabArray_1acf745741e899a140f64afeefbb903f5c" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>isAllRegular</name></member>
      <member refid="classamrex_1_1FabArray_1a70fa91146151690cba92e359609650dc" prot="private" virt="non-virtual"><scope>amrex::MultiFab</scope><name>Iterator</name></member>
      <member refid="classamrex_1_1MultiFab_1a0486c02587ea11cc9a30e9da8d7cf957" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>LinComb</name></member>
      <member refid="classamrex_1_1MultiFab_1ab858dc7ae13d97eea108b007d547488f" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>LinComb</name></member>
      <member refid="classamrex_1_1FabArray_1ab4bfa4857f5d074015204b6caa0cfcf7" prot="protected" virt="non-virtual"><scope>amrex::MultiFab</scope><name>m_arrays</name></member>
      <member refid="classamrex_1_1FabArray_1ac30f73f6b587c175fdc34bab68294613" prot="protected" virt="non-virtual"><scope>amrex::MultiFab</scope><name>m_const_arrays</name></member>
      <member refid="classamrex_1_1FabArray_1a6a2a60d3af361dde9463f2d586d0e358" prot="protected" virt="non-virtual"><scope>amrex::MultiFab</scope><name>m_dallocator</name></member>
      <member refid="classamrex_1_1FabArray_1a0deadb1f742a4e911d7ea64ea80c1292" prot="protected" virt="non-virtual"><scope>amrex::MultiFab</scope><name>m_dp_arrays</name></member>
      <member refid="classamrex_1_1FabArray_1a7ecd52e23e86db0f9e8e99166900e63c" prot="protected" virt="non-virtual"><scope>amrex::MultiFab</scope><name>m_fabs_v</name></member>
      <member refid="classamrex_1_1FabArray_1a9172b400e374666d6100fa61ccc586db" prot="protected" virt="non-virtual"><scope>amrex::MultiFab</scope><name>m_factory</name></member>
      <member refid="classamrex_1_1FabArray_1abbe02ae23186064d6bae686374657674" prot="protected" virt="non-virtual"><scope>amrex::MultiFab</scope><name>m_hp_arrays</name></member>
      <member refid="classamrex_1_1FabArray_1a5ea249e7b897909f9d01b4fed851d7af" prot="protected" virt="non-virtual"><scope>amrex::MultiFab</scope><name>m_tags</name></member>
      <member refid="classamrex_1_1MultiFab_1a9abff4a4be6d566975e62a4682960b96" prot="private" virt="non-virtual"><scope>amrex::MultiFab</scope><name>MapOfCopyComTagContainers</name></member>
      <member refid="classamrex_1_1MultiFab_1abb92462276ca55cd70f16507118f63ad" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>max</name></member>
      <member refid="classamrex_1_1MultiFab_1ad26e4c97b949bcafacf6c8173d632f5f" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>max</name></member>
      <member refid="classamrex_1_1MultiFab_1a642f844c834d6fb714e3e0fc6eb75e56" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>maxIndex</name></member>
      <member refid="classamrex_1_1MultiFab_1a540eb1714a5eece782de2a4afdd62c8e" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>min</name></member>
      <member refid="classamrex_1_1MultiFab_1a565b25628a1896a4dec554509d6b6e18" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>min</name></member>
      <member refid="classamrex_1_1MultiFab_1ab351d9250414508cf086635f54e2e2ce" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>minIndex</name></member>
      <member refid="classamrex_1_1MultiFab_1a1bc09d7836dcd4500472fa853a8fcd22" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>minus</name></member>
      <member refid="classamrex_1_1MultiFab_1aa9158374809b83cfd40a8092d4e63bdd" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>mult</name></member>
      <member refid="classamrex_1_1MultiFab_1a75e0a3256784cedf410454d5bd9674e8" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>mult</name></member>
      <member refid="classamrex_1_1MultiFab_1a3f3d92f9f07cf43431b03744b50edbdb" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>mult</name></member>
      <member refid="classamrex_1_1MultiFab_1aa872fb55fa5e6dc2008584d6d6e927b3" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>mult</name></member>
      <member refid="classamrex_1_1FabArray_1aabc2fcb2d3b6c12974d49d5aff23ef5d" prot="public" virt="non-virtual" ambiguityscope="FabArray&lt; FArrayBox &gt;::"><scope>amrex::MultiFab</scope><name>mult</name></member>
      <member refid="classamrex_1_1FabArray_1a179ad441a231e9d09ffebfbc7ad674fb" prot="public" virt="non-virtual" ambiguityscope="FabArray&lt; FArrayBox &gt;::"><scope>amrex::MultiFab</scope><name>mult</name></member>
      <member refid="classamrex_1_1MultiFab_1abcce72db937ae8e326d2cb14cb114e7d" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>MultiFab</name></member>
      <member refid="classamrex_1_1MultiFab_1aa1755894827d2615b5a8ed4b7c88c6d4" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>MultiFab</name></member>
      <member refid="classamrex_1_1MultiFab_1a3492b44e82f5711a3eec0be435c6dc20" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>MultiFab</name></member>
      <member refid="classamrex_1_1MultiFab_1ab61f9da32d4aad58172e8871dc992e45" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>MultiFab</name></member>
      <member refid="classamrex_1_1MultiFab_1ae5d26ea953fbc273c65f7c489511f656" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>MultiFab</name></member>
      <member refid="classamrex_1_1MultiFab_1ad82dfbf92b93fa09d680fe6e3bec36e5" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>MultiFab</name></member>
      <member refid="classamrex_1_1MultiFab_1a62db3405e4e92a2a5bd5d3d9d19698ba" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>Multiply</name></member>
      <member refid="classamrex_1_1MultiFab_1a1782d5eefcdae9512c4d9ece50a2253b" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>Multiply</name></member>
      <member refid="classamrex_1_1MultiFab_1acaf881689685c3fa82ed65829f6be4c3" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>negate</name></member>
      <member refid="classamrex_1_1MultiFab_1ad7cd1360a57300fc2e5eb5afdf6ff1dc" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>negate</name></member>
      <member refid="classamrex_1_1MultiFab_1a9939b447c0dc1a130c6952d2b376f8ad" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>negate</name></member>
      <member refid="classamrex_1_1MultiFab_1ae4ff818a86f791cca374edbe34bb6830" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>negate</name></member>
      <member refid="classamrex_1_1MultiFab_1a2c8965900aefbe0681bf72cb489b7027" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>norm0</name></member>
      <member refid="classamrex_1_1MultiFab_1a6f5159e97350762eba3263f11ba3e653" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>norm0</name></member>
      <member refid="classamrex_1_1MultiFab_1a727b71bae4005883ea88221157184346" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>norm0</name></member>
      <member refid="classamrex_1_1MultiFab_1a5879f0308ed537286037a041e32fd810" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>norm1</name></member>
      <member refid="classamrex_1_1MultiFab_1afcdc4aaf73896a44ad364520af9a7398" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>norm1</name></member>
      <member refid="classamrex_1_1MultiFab_1ae4ba8fc4756c0621e3872055ffce31b0" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>norm1</name></member>
      <member refid="classamrex_1_1MultiFab_1aa0b6bb4fb2ee206356cd613ed8458b8f" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>norm2</name></member>
      <member refid="classamrex_1_1MultiFab_1a0982c02422dcb603d1c5129d744d6611" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>norm2</name></member>
      <member refid="classamrex_1_1MultiFab_1a933d1dd75c4441bf922f8c5baa931be4" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>norm2</name></member>
      <member refid="classamrex_1_1MultiFab_1a9d57175907c89a969b9b5392631e65cf" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>norminf</name></member>
      <member refid="classamrex_1_1MultiFab_1abc7329288ae6f73f8fd7eda95e49b8ba" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>norminf</name></member>
      <member refid="classamrex_1_1MultiFab_1a92b462cb3d7c55a7d3277aaa9e3e0ff3" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>norminf</name></member>
      <member refid="classamrex_1_1FabArray_1a1d7f20697c473d1186b4b3c290f5eb1f" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>ok</name></member>
      <member refid="classamrex_1_1MultiFab_1aa2e6e3cf95934c1b6ee898d10a1845f0" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MultiFab_1a62b9fe978cd451f411245dc8a1e97b40" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MultiFab_1a189388cbdd6612ec9e0666687cf22ea8" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>operator=</name></member>
      <member refid="classamrex_1_1FabArray_1abfb756a609a97e842adfcb212390b506" prot="public" virt="non-virtual" ambiguityscope="FabArray&lt; FArrayBox &gt;::"><scope>amrex::MultiFab</scope><name>operator=</name></member>
      <member refid="classamrex_1_1FabArray_1a0af3037790ff6d28e55abb56befa9217" prot="public" virt="non-virtual" ambiguityscope="FabArray&lt; FArrayBox &gt;::"><scope>amrex::MultiFab</scope><name>operator=</name></member>
      <member refid="classamrex_1_1FabArray_1a25c18cdc7e890e0876df9a72a1278bf6" prot="public" virt="non-virtual" ambiguityscope="FabArray&lt; FArrayBox &gt;::"><scope>amrex::MultiFab</scope><name>operator=</name></member>
      <member refid="classamrex_1_1FabArray_1aea4482f17a37031cb4d666bb0d35bb75" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1FabArray_1a5ba62a9af2c4595f5cc07658922e54dd" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1FabArray_1a0cff697750da98028349785f52862dd9" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1FabArray_1a075244874da3e2433d57ca6fa8b96dc2" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1MultiFab_1afbd6dab928640c74eb1d7a28e8f36afa" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>OverlapMask</name></member>
      <member refid="classamrex_1_1MultiFab_1aec134620b7dfd17d0b8a540e9a96f41c" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>OverrideSync</name></member>
      <member refid="classamrex_1_1MultiFab_1afc2840698e1cec5a44ebeb9d34783327" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>OverrideSync</name></member>
      <member refid="classamrex_1_1MultiFab_1a3c8c9bf8723fcfac9b8d410485e7ed4a" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>OwnerMask</name></member>
      <member refid="classamrex_1_1FabArray_1a345e1546f8ae1dcca4a44a140abe8483" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>pack_send_buffer_cpu</name></member>
      <member refid="classamrex_1_1FabArray_1a7904811e2a83af68b16bd6c6bd9bce6a" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>pack_send_buffer_gpu</name></member>
      <member refid="classamrex_1_1FabArray_1ae4b12e5942706dac23a5bef3d4781740" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>ParallelAdd</name></member>
      <member refid="classamrex_1_1FabArray_1a8a59adcce54ed5ccf48f0849458cf123" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>ParallelAdd</name></member>
      <member refid="classamrex_1_1FabArray_1a8e9e4a76679324f247d20d57d11293f0" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>ParallelAdd</name></member>
      <member refid="classamrex_1_1FabArray_1a89a8e2abc36a485e63a1b7976f13baf2" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>ParallelAdd</name></member>
      <member refid="classamrex_1_1FabArray_1abde39eb49207b481b280b1386e828abb" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>ParallelAdd_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a636aaec49f36b37c484e25146572cf41" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>ParallelAdd_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a9d8a8750be27ca5839abbbe2f3794e5a" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>ParallelAdd_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a4b736a64c77081800aa312863d962048" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>ParallelAdd_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a4d5c152276e1e70438c9d7072cb7c6f0" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>ParallelCopy</name></member>
      <member refid="classamrex_1_1FabArray_1ac31d070f29eef2523b0af2d858b3e56d" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>ParallelCopy</name></member>
      <member refid="classamrex_1_1FabArray_1a3d58cf8a0ddfeba8a8b52aa73fed2113" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>ParallelCopy</name></member>
      <member refid="classamrex_1_1FabArray_1a1dfd3c30997fd9821219a8e39571a4bc" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>ParallelCopy</name></member>
      <member refid="classamrex_1_1FabArray_1a066e3ab046b92e144075c8f9df4aaf04" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>ParallelCopy_finish</name></member>
      <member refid="classamrex_1_1FabArray_1a27a082106b94896a38832117858407b9" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>ParallelCopy_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1af41fa096b33fbce8a896252ff39bbadb" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>ParallelCopy_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a6e55433b48ff77b9fcbfbc2c501e63c3" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>ParallelCopy_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a78457b34f328569ed1bc6065baff53c0" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>ParallelCopy_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1af001e3fed315af1165f42213a1042c09" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>PC_local_cpu</name></member>
      <member refid="classamrex_1_1FabArray_1a6479ffc5e154a5b21d80e1b6dedb44cf" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>PC_local_gpu</name></member>
      <member refid="classamrex_1_1FabArray_1a4a22bada553ad3ff929d91be1b8bfc9f" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>pcd</name></member>
      <member refid="classamrex_1_1MultiFab_1aafbc29a68d3c0c000fee414f76f7b79c" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>plus</name></member>
      <member refid="classamrex_1_1MultiFab_1a9d8ec2a7197f373ce88a43a2adaf1da0" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>plus</name></member>
      <member refid="classamrex_1_1MultiFab_1a0b410a02ca211c74033d77fac9b8a40b" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>plus</name></member>
      <member refid="classamrex_1_1MultiFab_1a38506771a271ef8a5d4b6c3065815566" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>plus</name></member>
      <member refid="classamrex_1_1MultiFab_1a6679e5d7843de95ca2245f599715b4f9" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>plus</name></member>
      <member refid="classamrex_1_1FabArray_1a69e2f8d4b7a834951fe4428b89134455" prot="public" virt="non-virtual" ambiguityscope="FabArray&lt; FArrayBox &gt;::"><scope>amrex::MultiFab</scope><name>plus</name></member>
      <member refid="classamrex_1_1FabArray_1ad00c28754c2085f4ba386d2bb0f24f93" prot="public" virt="non-virtual" ambiguityscope="FabArray&lt; FArrayBox &gt;::"><scope>amrex::MultiFab</scope><name>plus</name></member>
      <member refid="classamrex_1_1FabArray_1a1ad78902f6ce66d7f4d0557de26ee971" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>prefetchToDevice</name></member>
      <member refid="classamrex_1_1FabArray_1ae803504d641d86a8ba9e4b58e81f136b" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>prefetchToHost</name></member>
      <member refid="classamrex_1_1FabArray_1a59639f9d47c654200ffccda96ff78ae5" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>RecvLayoutMask</name></member>
      <member refid="classamrex_1_1FabArray_1a9b59622d2c87150475a4c2e290909421" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>Redistribute</name></member>
      <member refid="classamrex_1_1FabArray_1a4782a3068c5950a1838e1018f8ff69f5" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>release</name></member>
      <member refid="classamrex_1_1FabArray_1a4750acee26c62d569535b66ec2957bca" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>release</name></member>
      <member refid="classamrex_1_1MultiFab_1a505eb471a78f4e0f8791b10cbb1bbd75" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>Saxpy</name></member>
      <member refid="classamrex_1_1MultiFab_1a4f39387844b0d4393e9cffd9b8fb3cc0" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>Saxpy</name></member>
      <member refid="classamrex_1_1FabArray_1a80a77e6c5521bb8b3ed838708e079432" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>setBndry</name></member>
      <member refid="classamrex_1_1FabArray_1a9deababbf136398c5902f84ad2ea4f2c" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>setBndry</name></member>
      <member refid="classamrex_1_1FabArray_1a499aee434c06201cadb658484dda3e37" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>setDomainBndry</name></member>
      <member refid="classamrex_1_1FabArray_1a24591060d4412dddb8298001e5f580c5" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>setDomainBndry</name></member>
      <member refid="classamrex_1_1FabArray_1af68b446a1fcbac3b613ed9404ccb67d1" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>setFab</name></member>
      <member refid="classamrex_1_1FabArray_1a7fe02e7cced6aadd20cee89b41afef8e" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>setFab</name></member>
      <member refid="classamrex_1_1FabArray_1a0f8b639b019bb31429a51c718756cafd" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>setFab</name></member>
      <member refid="classamrex_1_1FabArray_1a01d769a51d15314e0f36925aa2182c9a" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>setFab</name></member>
      <member refid="classamrex_1_1FabArray_1a693754f4ec64472c486d1d4431d71d8c" prot="private" virt="non-virtual"><scope>amrex::MultiFab</scope><name>setFab_assert</name></member>
      <member refid="classamrex_1_1FabArray_1a9235d60131ff0d5f81450896420fe691" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>setVal</name></member>
      <member refid="classamrex_1_1FabArray_1a3da4950419b2d1486fc639b4dc9c7f50" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>setVal</name></member>
      <member refid="classamrex_1_1FabArray_1af5d4163748028384eed706a0505e26e1" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>setVal</name></member>
      <member refid="classamrex_1_1FabArray_1aea9f29ddbd06aa7e6ed2fc4adab0105d" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>setVal</name></member>
      <member refid="classamrex_1_1FabArray_1ae069b54a641daf3261a19fb4a7a69d39" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>setVal</name></member>
      <member refid="classamrex_1_1FabArray_1a9b24249a457566178240d93e2379b791" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>setVal</name></member>
      <member refid="classamrex_1_1FabArray_1a4ebf94d4f789343209c4bf0a4567bb15" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>setVal</name></member>
      <member refid="classamrex_1_1FabArray_1af5dc7a3e98d5ebf9e3e7e42c8fe19b2e" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>setVal</name></member>
      <member refid="classamrex_1_1FabArray_1a9f979a4eaf8ec5080794e9a45e24cefd" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>setVal</name></member>
      <member refid="classamrex_1_1FabArray_1aaad9347944887bc14f15277d45585d84" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>setVal</name></member>
      <member refid="classamrex_1_1FabArray_1a551575e2734ddbb455ce7d7ebd53cd9f" prot="protected" virt="non-virtual"><scope>amrex::MultiFab</scope><name>SharedMemory</name></member>
      <member refid="classamrex_1_1FabArray_1a1c267db3c144871fd12170f3c81d6562" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>shift</name></member>
      <member refid="classamrex_1_1FabArray_1abc3985ed98ddaf530bde81076c0295de" prot="protected" virt="non-virtual"><scope>amrex::MultiFab</scope><name>shmem</name></member>
      <member refid="classamrex_1_1MultiFab_1a5f37af40303a10e8d54e15c1931a5b8e" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>Subtract</name></member>
      <member refid="classamrex_1_1MultiFab_1a4f2c04ea9d0f7a551bc2263b9a63d324" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>Subtract</name></member>
      <member refid="classamrex_1_1MultiFab_1a62669a27ec4a577f0bef72dc2a1243aa" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>sum</name></member>
      <member refid="classamrex_1_1FabArray_1a3df70423b7ec841f351f1e2b1b9cd8d4" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>SumBoundary</name></member>
      <member refid="classamrex_1_1FabArray_1a8e4f13e3c2e640f401ef8a191feafe91" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>SumBoundary</name></member>
      <member refid="classamrex_1_1FabArray_1ad168d755fd708b5bcf609d710f82d7ef" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>SumBoundary</name></member>
      <member refid="classamrex_1_1FabArray_1a7a12071c06052c811914cd1150c957c6" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>SumBoundary</name></member>
      <member refid="classamrex_1_1FabArray_1aa686cf52b54e0b077e30c6a5093304cb" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>SumBoundary_finish</name></member>
      <member refid="classamrex_1_1FabArray_1ad6c0ef1b3e74b61dbd4990b79686027a" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>SumBoundary_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1aa81e576487f7936bb94111a236308f68" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>SumBoundary_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1af3c167fcabb7385ac46d377690f0f929" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>SumBoundary_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a511810a6f50163d3637292625166f2c9" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>SumBoundary_nowait</name></member>
      <member refid="classamrex_1_1MultiFab_1a2e29e28afce0aa520da5cd068cb5e96b" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>Swap</name></member>
      <member refid="classamrex_1_1MultiFab_1ac259813cd54d52b5c20cad7c0f24c246" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>Swap</name></member>
      <member refid="classamrex_1_1FabArray_1acb7546f9b065a866641075708c3484ae" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>tags</name></member>
      <member refid="classamrex_1_1FabArray_1add9c8df1fdfd199b240988bfd3a43d87" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>unpack_recv_buffer_cpu</name></member>
      <member refid="classamrex_1_1FabArray_1adb64751b92238db7f01db95d9ef45ed9" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>unpack_recv_buffer_gpu</name></member>
      <member refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>value_type</name></member>
      <member refid="classamrex_1_1MultiFab_1ad80a338735a5addaa47a0726cb24c8c5" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>WeightedSync</name></member>
      <member refid="classamrex_1_1MultiFab_1aa06c264011c21bb5a97070ae7cf250d3" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>Xpay</name></member>
      <member refid="classamrex_1_1MultiFab_1a6057618ee794a63cc24ba0d95007e609" prot="public" virt="non-virtual"><scope>amrex::MultiFab</scope><name>Xpay</name></member>
      <member refid="classamrex_1_1FabArray_1af9762647ad8ae52d39f2c51f51c06813" prot="public" virt="virtual"><scope>amrex::MultiFab</scope><name>~FabArray</name></member>
      <member refid="classamrex_1_1MultiFab_1a67396a85b1bfeb3a102f3926dd3e1632" prot="public" virt="virtual"><scope>amrex::MultiFab</scope><name>~MultiFab</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
