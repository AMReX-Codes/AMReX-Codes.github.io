<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classamrex_1_1VisMF" kind="class" language="C++" prot="public">
    <compoundname>amrex::VisMF</compoundname>
    <includes refid="AMReX__VisMF_8H" local="no">AMReX_VisMF.H</includes>
    <innerclass refid="structamrex_1_1VisMF_1_1aligner" prot="public">amrex::VisMF::aligner</innerclass>
    <innerclass refid="structamrex_1_1VisMF_1_1FabOnDisk" prot="public">amrex::VisMF::FabOnDisk</innerclass>
    <innerclass refid="structamrex_1_1VisMF_1_1FabReadLink" prot="public">amrex::VisMF::FabReadLink</innerclass>
    <innerclass refid="structamrex_1_1VisMF_1_1Header" prot="public">amrex::VisMF::Header</innerclass>
    <innerclass refid="structamrex_1_1VisMF_1_1PersistentIFStream" prot="public">amrex::VisMF::PersistentIFStream</innerclass>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classamrex_1_1VisMF_1a257a59151037552c3e665c3ea3a5786f" prot="public" static="no">
        <name>@3</name>
        <enumvalue id="classamrex_1_1VisMF_1a257a59151037552c3e665c3ea3a5786fac67ac04832d2bbe370aa12c6ca513e85" prot="public">
          <name>IO_Buffer_Size</name>
          <initializer>= 262144 * 8</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>We try to do I/O with buffers of this size. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="46" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" bodystart="46" bodyend="46"/>
      </memberdef>
      <memberdef kind="enum" id="classamrex_1_1VisMF_1aa50a3ce471ac0bdf8f78134f0004e156" prot="public" static="no">
        <name>How</name>
        <enumvalue id="classamrex_1_1VisMF_1aa50a3ce471ac0bdf8f78134f0004e156a93fcd009ee92168a4e419161fc19635b" prot="public">
          <name>OneFilePerCPU</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classamrex_1_1VisMF_1aa50a3ce471ac0bdf8f78134f0004e156a167fa24b841257fa58af35b658f5d6c1" prot="public">
          <name>NFiles</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>How we write out <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray&lt;FArrayBox&gt;</ref>s. These are deprecated, we always use NFiles. For OneFilePerCPU, set NFiles to NProcs. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="60" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" bodystart="60" bodyend="60"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1VisMF_1ad0a5e71e7eafe2b4f3f23ea91a56f4b0" prot="public" static="no">
        <type>char</type>
        <definition>typedef char amrex::VisMF::Setbuf_Char_Type</definition>
        <argsstring></argsstring>
        <name>Setbuf_Char_Type</name>
        <briefdescription>
<para>The type of a char buffer required by [p]setbuf(). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="51" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1VisMF_1a0027a67a36ec8d1b6eca3e2377c9c050" prot="public" static="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1VisMF_1ad0a5e71e7eafe2b4f3f23ea91a56f4b0" kindref="member">Setbuf_Char_Type</ref> &gt;</type>
        <definition>typedef Vector&lt;Setbuf_Char_Type&gt; amrex::VisMF::IO_Buffer</definition>
        <argsstring></argsstring>
        <name>IO_Buffer</name>
        <briefdescription>
<para>A simple character buffer for setbuf() usage. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="54" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" bodystart="54" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1VisMF_1a3e29beee8db471f8b5cca2c5ab03e1c8" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string amrex::VisMF::m_fafabname</definition>
        <argsstring></argsstring>
        <name>m_fafabname</name>
        <briefdescription>
<para>Name of the <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray&lt;FArrayBox&gt;</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="380" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" bodystart="380" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1VisMF_1a8b04406fcfdbec77eba187d3ceb9b2dc" prot="private" static="no" mutable="no">
        <type><ref refid="structamrex_1_1VisMF_1_1Header" kindref="compound">Header</ref></type>
        <definition>Header amrex::VisMF::m_hdr</definition>
        <argsstring></argsstring>
        <name>m_hdr</name>
        <briefdescription>
<para>The <ref refid="classamrex_1_1VisMF" kindref="compound">VisMF</ref> header as read from disk. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="382" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" bodystart="382" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1VisMF_1a6e7c0f5fc1401ba1497916e015b8591c" prot="private" static="no" mutable="yes">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> * &gt; &gt;</type>
        <definition>Vector&lt; Vector&lt;FArrayBox*&gt; &gt; amrex::VisMF::m_pa</definition>
        <argsstring></argsstring>
        <name>m_pa</name>
        <briefdescription>
<para>We manage the FABs individually. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="384" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" bodystart="384" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classamrex_1_1VisMF_1accf2e64d0fa423eb3c82df8c1189e908" prot="private" static="yes" mutable="no">
        <type>std::map&lt; std::string, <ref refid="structamrex_1_1VisMF_1_1PersistentIFStream" kindref="compound">VisMF::PersistentIFStream</ref> &gt;</type>
        <definition>std::map&lt; std::string, VisMF::PersistentIFStream &gt; amrex::VisMF::persistentIFStreams</definition>
        <argsstring></argsstring>
        <name>persistentIFStreams</name>
        <briefdescription>
<para>Persistent streams. These open on demand and should be closed when not needed with CloseAllStreams. ~VisMF also closes them. [filename, pifs]. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="390" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" bodystart="390" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1VisMF_1ade6a45cdc3be4fb324ccd3a863788aae" prot="private" static="yes" mutable="no">
        <type>int</type>
        <definition>int amrex::VisMF::nOutFiles</definition>
        <argsstring></argsstring>
        <name>nOutFiles</name>
        <briefdescription>
<para>The number of files to write for a <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray&lt;FArrayBox&gt;</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="392" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" bodystart="392" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1VisMF_1abfbb2ed9c1aa1c00786e7ae2218f0b0f" prot="private" static="yes" mutable="no">
        <type>int</type>
        <definition>int amrex::VisMF::nMFFileInStreams</definition>
        <argsstring></argsstring>
        <name>nMFFileInStreams</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="393" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" bodystart="393" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1VisMF_1a84c10ec9a471ea24a3208e1798cb7bec" prot="private" static="yes" mutable="no">
        <type>int</type>
        <definition>int amrex::VisMF::nAsyncWrites</definition>
        <argsstring></argsstring>
        <name>nAsyncWrites</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="394" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" bodystart="394" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1VisMF_1a335f428493f0a627d25a05bb44f9fda4" prot="private" static="yes" mutable="no">
        <type>std::queue&lt; std::future&lt; <ref refid="structamrex_1_1WriteAsyncStatus" kindref="compound">WriteAsyncStatus</ref> &gt; &gt;</type>
        <definition>std::queue&lt; std::future&lt; WriteAsyncStatus &gt; &gt; amrex::VisMF::future_list</definition>
        <argsstring></argsstring>
        <name>future_list</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="396" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" bodystart="396" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1VisMF_1a4ee12165f32372e900a0f0967a344708" prot="private" static="yes" mutable="no">
        <type>int</type>
        <definition>int amrex::VisMF::verbose</definition>
        <argsstring></argsstring>
        <name>verbose</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="398" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" bodystart="398" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1VisMF_1a7f4058d4117af92e70d889263657e9f8" prot="private" static="yes" mutable="no">
        <type><ref refid="structamrex_1_1VisMF_1_1Header_1aa4469030a55d4e3be552189f7d06b54d" kindref="member">VisMF::Header::Version</ref></type>
        <definition>VisMF::Header::Version amrex::VisMF::currentVersion</definition>
        <argsstring></argsstring>
        <name>currentVersion</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="399" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" bodystart="399" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1VisMF_1a51fdeeea196eac049978076bf6671720" prot="private" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool amrex::VisMF::groupSets</definition>
        <argsstring></argsstring>
        <name>groupSets</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="400" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" bodystart="400" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1VisMF_1a0ab15576cd65ae5152ba609b54b24550" prot="private" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool amrex::VisMF::setBuf</definition>
        <argsstring></argsstring>
        <name>setBuf</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="401" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" bodystart="401" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1VisMF_1a7127d8495966b5d5506d3cff6c536a12" prot="private" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool amrex::VisMF::useSingleRead</definition>
        <argsstring></argsstring>
        <name>useSingleRead</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="402" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" bodystart="402" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1VisMF_1a0706ea7e89d0d5b2d9a60acacc8f38f0" prot="private" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool amrex::VisMF::useSingleWrite</definition>
        <argsstring></argsstring>
        <name>useSingleWrite</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="403" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" bodystart="403" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1VisMF_1a174cc2335d85746e4c0c05c71c0a816b" prot="private" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool amrex::VisMF::checkFilePositions</definition>
        <argsstring></argsstring>
        <name>checkFilePositions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="404" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" bodystart="404" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1VisMF_1a806512ed6337ff31d9eb6f63f94ce792" prot="private" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool amrex::VisMF::usePersistentIFStreams</definition>
        <argsstring></argsstring>
        <name>usePersistentIFStreams</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="405" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" bodystart="405" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1VisMF_1a0c9e87f4c459196a9f1ce7870ccbf9cb" prot="private" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool amrex::VisMF::useSynchronousReads</definition>
        <argsstring></argsstring>
        <name>useSynchronousReads</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="406" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" bodystart="406" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1VisMF_1a9149ec039a2136083c03aabdaa275672" prot="private" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool amrex::VisMF::useDynamicSetSelection</definition>
        <argsstring></argsstring>
        <name>useDynamicSetSelection</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="407" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" bodystart="407" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1VisMF_1ad6b2c32f84c4e530a473eab6ffd666f2" prot="private" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool amrex::VisMF::allowSparseWrites</definition>
        <argsstring></argsstring>
        <name>allowSparseWrites</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="408" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" bodystart="408" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1VisMF_1a1f60977c11c2c87df32b47debd813b9e" prot="private" static="yes" mutable="no">
        <type>Long</type>
        <definition>Long amrex::VisMF::ioBufferSize</definition>
        <argsstring></argsstring>
        <name>ioBufferSize</name>
        <briefdescription>
<para>-<mdash/> the settable buffer size </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="410" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" bodystart="410" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1VisMF_1a6677c063597457901ddf807b87d57bd4" prot="private" static="yes" mutable="no">
        <type>int</type>
        <definition>int amrex::VisMF::asyncTag</definition>
        <argsstring></argsstring>
        <name>asyncTag</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="413" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" bodystart="413" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1VisMF_1a1b6dd0de445fcd0617eb9388bcf04f98" prot="private" static="yes" mutable="no">
        <type>int</type>
        <definition>int amrex::VisMF::current_comm</definition>
        <argsstring></argsstring>
        <name>current_comm</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="414" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" bodystart="414" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1VisMF_1a4febd1c34e12759d7acb412d1cf62495" prot="private" static="yes" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref> &gt;</type>
        <definition>Vector&lt; MPI_Comm &gt; amrex::VisMF::async_comm</definition>
        <argsstring></argsstring>
        <name>async_comm</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="415" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" bodystart="415" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1VisMF_1ae372e9dede4ddc3c4c271118812e9b39" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::VisMF::VisMF</definition>
        <argsstring>(const std::string &amp;fafab_name)</argsstring>
        <name>VisMF</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>fafab_name</declname>
        </param>
        <briefdescription>
<para>Construct by reading in the on-disk <ref refid="classamrex_1_1VisMF" kindref="compound">VisMF</ref> of the specified name. The FABs in the on-disk <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> are read on demand unless the entire <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> is requested. The name here is the name of the <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> not the name of the on-disk files. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="67" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.cpp" bodystart="1436" bodyend="1460"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1VisMF_1adae69cdb339309e76cfb37486e60ffe4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::VisMF::~VisMF</definition>
        <argsstring>()</argsstring>
        <name>~VisMF</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="68" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.cpp" bodystart="1463" bodyend="1465"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1VisMF_1a9ff17055f76eb10b376600710788b922" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::VisMF::nComp</definition>
        <argsstring>() const </argsstring>
        <name>nComp</name>
        <briefdescription>
<para>The number of components in the on-disk <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray&lt;FArrayBox&gt;</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="162" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.cpp" bodystart="508" bodyend="511"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1VisMF_1a4d2dd5d09383bc182c919795f859b1e6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::VisMF::nGrow</definition>
        <argsstring>() const </argsstring>
        <name>nGrow</name>
        <briefdescription>
<para>The grow factor of the on-disk <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray&lt;FArrayBox&gt;</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="164" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.cpp" bodystart="514" bodyend="517"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1VisMF_1a1428bfdbc4dae39af42809e49c030e3c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>IntVect amrex::VisMF::nGrowVect</definition>
        <argsstring>() const </argsstring>
        <name>nGrowVect</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="165" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.cpp" bodystart="520" bodyend="523"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1VisMF_1a5518f2e8bea78f8bb0727733ea5756d0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::VisMF::size</definition>
        <argsstring>() const </argsstring>
        <name>size</name>
        <briefdescription>
<para><heading level="1">of FABs in the <ref refid="classamrex_1_1VisMF" kindref="compound">VisMF</ref>. Equal to # of Boxes in the BoxArray.</heading>
</para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="167" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.cpp" bodystart="526" bodyend="529"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1VisMF_1a3a35f387db57fae60e7261b295566c80" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const BoxArray &amp;</type>
        <definition>const BoxArray &amp; amrex::VisMF::boxArray</definition>
        <argsstring>() const </argsstring>
        <name>boxArray</name>
        <briefdescription>
<para>The BoxArray of the on-disk <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray&lt;FArrayBox&gt;</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="169" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.cpp" bodystart="532" bodyend="535"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1VisMF_1a2eb86f607b90d7ea8b982b47f4bad739" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::VisMF::min</definition>
        <argsstring>(int fabIndex, int nComp) const </argsstring>
        <name>min</name>
        <param>
          <type>int</type>
          <declname>fabIndex</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nComp</declname>
        </param>
        <briefdescription>
<para>The min of the FAB (in valid region) at specified index and component. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="171" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.cpp" bodystart="538" bodyend="548"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1VisMF_1afae01007e39347487d204df8e5109369" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::VisMF::min</definition>
        <argsstring>(int nComp) const </argsstring>
        <name>min</name>
        <param>
          <type>int</type>
          <declname>nComp</declname>
        </param>
        <briefdescription>
<para>The min of the <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> (in valid region) at specified component. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="173" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.cpp" bodystart="551" bodyend="560"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1VisMF_1a329f164401dc05aadc7b91a1fc511d63" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::VisMF::max</definition>
        <argsstring>(int fabIndex, int nComp) const </argsstring>
        <name>max</name>
        <param>
          <type>int</type>
          <declname>fabIndex</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nComp</declname>
        </param>
        <briefdescription>
<para>The max of the FAB (in valid region) at specified index and component. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="175" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.cpp" bodystart="563" bodyend="573"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1VisMF_1ac3942bb15a9cbd1884e65831c04cc140" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::VisMF::max</definition>
        <argsstring>(int nComp) const </argsstring>
        <name>max</name>
        <param>
          <type>int</type>
          <declname>nComp</declname>
        </param>
        <briefdescription>
<para>The max of the <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> (in valid region) at specified component. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="177" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.cpp" bodystart="576" bodyend="585"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1VisMF_1ab451fc52fbdab6eea6f561513a514e88" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
        <definition>const FArrayBox &amp; amrex::VisMF::GetFab</definition>
        <argsstring>(int fabIndex, int compIndex) const </argsstring>
        <name>GetFab</name>
        <param>
          <type>int</type>
          <declname>fabIndex</declname>
        </param>
        <param>
          <type>int</type>
          <declname>compIndex</declname>
        </param>
        <briefdescription>
<para>The FAB at the specified index and component. Reads it from disk if necessary. This reads only the specified component. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="184" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.cpp" bodystart="588" bodyend="595"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1VisMF_1a77474efc5c2215f02ded00aa816ee02e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::VisMF::clear</definition>
        <argsstring>(int fabIndex, int compIndex)</argsstring>
        <name>clear</name>
        <param>
          <type>int</type>
          <declname>fabIndex</declname>
        </param>
        <param>
          <type>int</type>
          <declname>compIndex</declname>
        </param>
        <briefdescription>
<para>Delete()s the FAB at the specified index and component. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="187" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.cpp" bodystart="598" bodyend="603"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1VisMF_1a483f483c43527c21fd7f8d0a301600a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::VisMF::clear</definition>
        <argsstring>(int fabIndex)</argsstring>
        <name>clear</name>
        <param>
          <type>int</type>
          <declname>fabIndex</declname>
        </param>
        <briefdescription>
<para>Delete()s the FAB at the specified index (all components). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="190" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.cpp" bodystart="2146" bodyend="2151"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1VisMF_1ab3c166ef170fe72fdda5fab9cd9176e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::VisMF::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
<para>Delete()s all the FABs. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="192" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.cpp" bodystart="2154" bodyend="2161"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1VisMF_1af49a2c7b6fd6fdf8f80c84004317f002" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> *</type>
        <definition>FArrayBox * amrex::VisMF::readFAB</definition>
        <argsstring>(int fabIndex, const std::string &amp;fafabName)</argsstring>
        <name>readFAB</name>
        <param>
          <type>int</type>
          <declname>fabIndex</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>fafabName</declname>
        </param>
        <briefdescription>
<para>Read the entire fab (all components). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="278" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.cpp" bodystart="622" bodyend="626"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1VisMF_1ab52310c888c038df7804f8d7b292f5bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> *</type>
        <definition>FArrayBox * amrex::VisMF::readFAB</definition>
        <argsstring>(int fabIndex, int icomp)</argsstring>
        <name>readFAB</name>
        <param>
          <type>int</type>
          <declname>fabIndex</declname>
        </param>
        <param>
          <type>int</type>
          <declname>icomp</declname>
        </param>
        <briefdescription>
<para>Read the specified fab component. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="280" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.cpp" bodystart="629" bodyend="633"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classamrex_1_1VisMF_1a1f7ef6b7304a0ff3dd4df629cef4971e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ifstream *</type>
        <definition>std::ifstream * amrex::VisMF::OpenStream</definition>
        <argsstring>(const std::string &amp;fileName)</argsstring>
        <name>OpenStream</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>fileName</declname>
        </param>
        <briefdescription>
<para>Open the stream if it is not already open Close the stream if not persistent or forced Close all open streams. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="155" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.cpp" bodystart="2194" bodyend="2212"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1VisMF_1a9f63d703f45cf3be27c339a38d893796" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::VisMF::CloseStream</definition>
        <argsstring>(const std::string &amp;fileName, bool forceClose=false)</argsstring>
        <name>CloseStream</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>fileName</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>forceClose</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="156" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.cpp" bodystart="2215" bodyend="2229"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1VisMF_1a6a1a78975e5decf1c7aae4555a240628" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::VisMF::DeleteStream</definition>
        <argsstring>(const std::string &amp;fileName)</argsstring>
        <name>DeleteStream</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>fileName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="157" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.cpp" bodystart="2232" bodyend="2240"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1VisMF_1a3eb747b7ba5f46a315650c84c1162418" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::VisMF::CloseAllStreams</definition>
        <argsstring>()</argsstring>
        <name>CloseAllStreams</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="158" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.cpp" bodystart="2243" bodyend="2245"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1VisMF_1af7f852d2d1e0656e85e58dcf5ba364b1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::VisMF::NoFabHeader</definition>
        <argsstring>(const VisMF::Header &amp;hdr)</argsstring>
        <name>NoFabHeader</name>
        <param>
          <type>const <ref refid="structamrex_1_1VisMF_1_1Header" kindref="compound">VisMF::Header</ref> &amp;</type>
          <declname>hdr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="159" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.cpp" bodystart="2164" bodyend="2172"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1VisMF_1a527bd21764fd10a8fb440b897e30c12a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Long</type>
        <definition>Long amrex::VisMF::Write</definition>
        <argsstring>(const FabArray&lt; FArrayBox &gt; &amp;fafab, const std::string &amp;name, VisMF::How how=NFiles, bool set_ghost=false)</argsstring>
        <name>Write</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &gt; &amp;</type>
          <declname>fafab</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1VisMF_1aa50a3ce471ac0bdf8f78134f0004e156" kindref="member">VisMF::How</ref></type>
          <declname>how</declname>
          <defval><ref refid="classamrex_1_1VisMF_1aa50a3ce471ac0bdf8f78134f0004e156a167fa24b841257fa58af35b658f5d6c1" kindref="member">NFiles</ref></defval>
        </param>
        <param>
          <type>bool</type>
          <declname>set_ghost</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Write a <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray&lt;FArrayBox&gt;</ref> to disk in a &quot;smart&quot; way. Returns the total number of bytes written on this processor. If set_ghost is true, sets the ghost cells in the <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray&lt;FArrayBox&gt;</ref> to one-half the average of the min and max over the valid region of each contained FAB. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="200" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.cpp" bodystart="1010" bodyend="1201"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1VisMF_1add80572f2657d610d4ffd75957e1acb1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::VisMF::AsyncWrite</definition>
        <argsstring>(const FabArray&lt; FArrayBox &gt; &amp;mf, const std::string &amp;mf_name)</argsstring>
        <name>AsyncWrite</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &gt; &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>mf_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="205" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.cpp" bodystart="2249" bodyend="2256"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1VisMF_1a70d68be6ac6de3d3d857138f981db50f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::VisMF::AsyncWrite</definition>
        <argsstring>(FabArray&lt; FArrayBox &gt; &amp;&amp;mf, const std::string &amp;mf_name)</argsstring>
        <name>AsyncWrite</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &gt; &amp;&amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>mf_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="206" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.cpp" bodystart="2259" bodyend="2266"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1VisMF_1a23fa1165af6c17714836f4e08c465b3f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::array&lt; int, 3 &gt;</type>
        <definition>std::array&lt; int, 3 &gt; amrex::VisMF::StaticWriteInfo</definition>
        <argsstring>(const int &amp;rank)</argsstring>
        <name>StaticWriteInfo</name>
        <param>
          <type>const int &amp;</type>
          <declname>rank</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="213" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.cpp" bodystart="2491" bodyend="2513"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1VisMF_1a56c6bc2db6bcc4a6b2d91d2e783d23c6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::future&lt; <ref refid="structamrex_1_1WriteAsyncStatus" kindref="compound">WriteAsyncStatus</ref> &gt;</type>
        <definition>std::future&lt; WriteAsyncStatus &gt; amrex::VisMF::WriteAsync_file</definition>
        <argsstring>(const FabArray&lt; FArrayBox &gt; &amp;mf, const std::string &amp;mf_name)</argsstring>
        <name>WriteAsync_file</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &gt; &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>mf_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="217" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.cpp" bodystart="2516" bodyend="2797"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1VisMF_1a7af82fb230fcdc9e837c260802a2d8ba" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::VisMF::WriteAsyncMultiFab</definition>
        <argsstring>(const FabArray&lt; FArrayBox &gt; &amp;mf, const std::string &amp;mf_name)</argsstring>
        <name>WriteAsyncMultiFab</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &gt; &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>mf_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="221" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.cpp" bodystart="2800" bodyend="3112"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1VisMF_1a452f96de7229a9fbdecff805a86df7b5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::VisMF::WriteAsyncPlotfile</definition>
        <argsstring>(const Vector&lt; const MultiFab * &gt; &amp;mf, const Vector&lt; std::string &gt; &amp;mf_names, int nlevels, bool strip_ghost_cells, int hdr_proc)</argsstring>
        <name>WriteAsyncPlotfile</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> * &gt; &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>mf_names</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nlevels</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>strip_ghost_cells</declname>
        </param>
        <param>
          <type>int</type>
          <declname>hdr_proc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="225" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.cpp" bodystart="3115" bodyend="3564"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1VisMF_1a18f41ccae821e24e006e28f55d1ea8dd" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Func</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Params</declname>
            <defname>Params</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::VisMF::asyncAddWrite</definition>
        <argsstring>(Func &amp;&amp;f, Params &amp;&amp;...args)</argsstring>
        <name>asyncAddWrite</name>
        <param>
          <type>Func &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>Params &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="232" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" bodystart="433" bodyend="442"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1VisMF_1a80b05d379ce6f96729eabd61d33d85a4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structamrex_1_1WriteAsyncStatus" kindref="compound">WriteAsyncStatus</ref></type>
        <definition>WriteAsyncStatus amrex::VisMF::asyncWaitOne</definition>
        <argsstring>()</argsstring>
        <name>asyncWaitOne</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="234" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.cpp" bodystart="3567" bodyend="3579"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1VisMF_1a43866f0e887315ffbeb06e8ccc2e3843" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structamrex_1_1WriteAsyncStatus" kindref="compound">WriteAsyncStatus</ref></type>
        <definition>WriteAsyncStatus amrex::VisMF::asyncWaitAll</definition>
        <argsstring>()</argsstring>
        <name>asyncWaitAll</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="235" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.cpp" bodystart="3593" bodyend="3608"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1VisMF_1a057e823f401a3c3c20722f9967bb8ce7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structamrex_1_1WriteAsyncStatus" kindref="compound">WriteAsyncStatus</ref></type>
        <definition>WriteAsyncStatus amrex::VisMF::asyncWaitUntilFree</definition>
        <argsstring>()</argsstring>
        <name>asyncWaitUntilFree</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="236" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.cpp" bodystart="3582" bodyend="3590"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1VisMF_1a8807abfd4ec1e3790a765096f2d6b724" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Long</type>
        <definition>Long amrex::VisMF::WriteOnlyHeader</definition>
        <argsstring>(const FabArray&lt; FArrayBox &gt; &amp;mf, const std::string &amp;mf_name, VisMF::How how=NFiles)</argsstring>
        <name>WriteOnlyHeader</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &gt; &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>mf_name</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1VisMF_1aa50a3ce471ac0bdf8f78134f0004e156" kindref="member">VisMF::How</ref></type>
          <declname>how</declname>
          <defval><ref refid="classamrex_1_1VisMF_1aa50a3ce471ac0bdf8f78134f0004e156a167fa24b841257fa58af35b658f5d6c1" kindref="member">NFiles</ref></defval>
        </param>
        <briefdescription>
<para>Write only the header-file corresponding to <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray&lt;FArrayBox&gt;</ref> to disk without the corresponding FAB data. This writes BoxArray information (which might still be needed by data post-processing tools such as yt) when the FAB data is not needed. Returns the total number of bytes written on this processor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="245" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.cpp" bodystart="1205" bodyend="1235"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1VisMF_1ad4a180abf07b6a7129d8fd4f6ee0d798" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::VisMF::RemoveFiles</definition>
        <argsstring>(const std::string &amp;name, bool verbose=false)</argsstring>
        <name>RemoveFiles</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>verbose</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>this will remove nfiles associated with name and the header </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="249" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.cpp" bodystart="1405" bodyend="1433"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1VisMF_1a584871b7013d4d9e46d16eb6d53803ed" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::VisMF::Read</definition>
        <argsstring>(FabArray&lt; FArrayBox &gt; &amp;fafab, const std::string &amp;name, const char *faHeader=nullptr, int coordinatorProc=ParallelDescriptor::IOProcessorNumber(), int allow_empty_mf=0)</argsstring>
        <name>Read</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &gt; &amp;</type>
          <declname>fafab</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>faHeader</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>int</type>
          <declname>coordinatorProc</declname>
          <defval><ref refid="namespaceamrex_1_1ParallelDescriptor_1ab734a5d614e753d28d03865ee6e4039a" kindref="member">ParallelDescriptor::IOProcessorNumber</ref>()</defval>
        </param>
        <param>
          <type>int</type>
          <declname>allow_empty_mf</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Read a <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray&lt;FArrayBox&gt;</ref> from disk written using <ref refid="classamrex_1_1VisMF_1a527bd21764fd10a8fb440b897e30c12a" kindref="member">VisMF::Write()</ref>. If the <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray&lt;FArrayBox&gt;</ref> fafab has been fully defined, the BoxArray on the disk must match the BoxArray in fafab. If it is constructed with the default constructor, the BoxArray on the disk will be used and a new <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> will be made. A pre-read <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> header can be passed in to avoid a read and broadcast. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="260" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.cpp" bodystart="1555" bodyend="2012"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1VisMF_1ab895515b73ef0cdc6d0e06c7590f3e76" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::VisMF::Exist</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>Exist</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Does <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> exist? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="267" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.cpp" bodystart="2016" bodyend="2027"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1VisMF_1abdcbffdd50b28342be875ac0da817056" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::VisMF::ReadFAHeader</definition>
        <argsstring>(const std::string &amp;fafabName, Vector&lt; char &gt; &amp;header)</argsstring>
        <name>ReadFAHeader</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>fafabName</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; char &gt; &amp;</type>
          <declname>header</declname>
        </param>
        <briefdescription>
<para>Read only the header of a <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>, header will be resized here. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="270" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.cpp" bodystart="2030" bodyend="2037"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1VisMF_1ae12f838572701049902254dfb46eb650" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::VisMF::Check</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>Check</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Check if the multifab is ok, false is returned if not ok. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="274" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.cpp" bodystart="2041" bodyend="2142"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1VisMF_1a1b41ff82637f2e2f4dd33f27a0d62ad1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Long</type>
        <definition>Long amrex::VisMF::FileOffset</definition>
        <argsstring>(std::ostream &amp;os)</argsstring>
        <name>FileOffset</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <briefdescription>
<para>The file offset of the passed ostream. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="276" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.cpp" bodystart="606" bodyend="619"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1VisMF_1a73b516dcb8729a411f75eaa5d7fc1b54" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::VisMF::GetNOutFiles</definition>
        <argsstring>()</argsstring>
        <name>GetNOutFiles</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="282" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.cpp" bodystart="183" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1VisMF_1aeea445c6cb42961bb091d40ee7545607" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::VisMF::SetNOutFiles</definition>
        <argsstring>(int newoutfiles, MPI_Comm comm=ParallelDescriptor::Communicator())</argsstring>
        <name>SetNOutFiles</name>
        <param>
          <type>int</type>
          <declname>newoutfiles</declname>
        </param>
        <param>
          <type><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref></type>
          <declname>comm</declname>
          <defval><ref refid="namespaceamrex_1_1ParallelDescriptor_1a0f53686fc6a6b7dca69c230fd1336e44" kindref="member">ParallelDescriptor::Communicator</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="283" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.cpp" bodystart="130" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1VisMF_1a738d789073dd1072ac3a0c640429574c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int amrex::VisMF::GetMFFileInStreams</definition>
        <argsstring>()</argsstring>
        <name>GetMFFileInStreams</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="285" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" bodystart="285" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1VisMF_1abda03b733e4f5e0b9f005f764f1a5b65" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::VisMF::SetMFFileInStreams</definition>
        <argsstring>(int nstreams, MPI_Comm comm=ParallelDescriptor::Communicator())</argsstring>
        <name>SetMFFileInStreams</name>
        <param>
          <type>int</type>
          <declname>nstreams</declname>
        </param>
        <param>
          <type><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref></type>
          <declname>comm</declname>
          <defval><ref refid="namespaceamrex_1_1ParallelDescriptor_1a0f53686fc6a6b7dca69c230fd1336e44" kindref="member">ParallelDescriptor::Communicator</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="286" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.cpp" bodystart="177" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1VisMF_1a51041736815ed12616b075d56e53fd2f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int amrex::VisMF::GetVerbose</definition>
        <argsstring>()</argsstring>
        <name>GetVerbose</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="288" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" bodystart="288" bodyend="288"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1VisMF_1a998f1813f57b8415140b26966fd0f86c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::VisMF::SetVerbose</definition>
        <argsstring>(int v)</argsstring>
        <name>SetVerbose</name>
        <param>
          <type>int</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="289" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" bodystart="289" bodyend="289"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1VisMF_1a5be9ce5dc3ed0083f7959e63528de583" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structamrex_1_1VisMF_1_1Header_1aa4469030a55d4e3be552189f7d06b54d" kindref="member">VisMF::Header::Version</ref></type>
        <definition>static VisMF::Header::Version amrex::VisMF::GetHeaderVersion</definition>
        <argsstring>()</argsstring>
        <name>GetHeaderVersion</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="291" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" bodystart="291" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1VisMF_1a2ce0e613077c3ec9c4c687628154c5ce" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::VisMF::SetHeaderVersion</definition>
        <argsstring>(VisMF::Header::Version version)</argsstring>
        <name>SetHeaderVersion</name>
        <param>
          <type><ref refid="structamrex_1_1VisMF_1_1Header_1aa4469030a55d4e3be552189f7d06b54d" kindref="member">VisMF::Header::Version</ref></type>
          <declname>version</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="292" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" bodystart="292" bodyend="293"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1VisMF_1a8645f0e85a9ccda7b565b6fbabb5bac3" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool amrex::VisMF::GetGroupSets</definition>
        <argsstring>()</argsstring>
        <name>GetGroupSets</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="295" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" bodystart="295" bodyend="295"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1VisMF_1a0e5c0555decdea8a4d09c7eabff1a07d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::VisMF::SetGroupSets</definition>
        <argsstring>(bool groupsets)</argsstring>
        <name>SetGroupSets</name>
        <param>
          <type>bool</type>
          <declname>groupsets</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="296" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" bodystart="296" bodyend="296"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1VisMF_1a260347a951d2b4a4669cb4dc79956450" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool amrex::VisMF::GetSetBuf</definition>
        <argsstring>()</argsstring>
        <name>GetSetBuf</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="298" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" bodystart="298" bodyend="298"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1VisMF_1af73ff9fbd9a91c471bfbe750de045fb9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::VisMF::SetSetBuf</definition>
        <argsstring>(bool setbuf)</argsstring>
        <name>SetSetBuf</name>
        <param>
          <type>bool</type>
          <declname>setbuf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="299" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" bodystart="299" bodyend="299"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1VisMF_1aca85185856423d34e7e15041139aee01" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool amrex::VisMF::GetUseSingleRead</definition>
        <argsstring>()</argsstring>
        <name>GetUseSingleRead</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="301" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" bodystart="301" bodyend="301"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1VisMF_1a6142ed0a2ebee84b7961a5f429a3f4de" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::VisMF::SetUseSingleRead</definition>
        <argsstring>(bool usesingleread)</argsstring>
        <name>SetUseSingleRead</name>
        <param>
          <type>bool</type>
          <declname>usesingleread</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="302" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" bodystart="302" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1VisMF_1aead41678a66e4c5a4f315404d3ffed10" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool amrex::VisMF::GetUseSingleWrite</definition>
        <argsstring>()</argsstring>
        <name>GetUseSingleWrite</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="304" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" bodystart="304" bodyend="304"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1VisMF_1a2a642eb132677ff8e2cda24a665def96" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::VisMF::SetUseSingleWrite</definition>
        <argsstring>(bool usesinglewrite)</argsstring>
        <name>SetUseSingleWrite</name>
        <param>
          <type>bool</type>
          <declname>usesinglewrite</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="305" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" bodystart="305" bodyend="305"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1VisMF_1a67cbe97a6341b35ab4036a8b0ca59f3c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool amrex::VisMF::GetCheckFilePositions</definition>
        <argsstring>()</argsstring>
        <name>GetCheckFilePositions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="307" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" bodystart="307" bodyend="307"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1VisMF_1a5fa42d848c0d0dc397ddf05fd16c5e16" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::VisMF::SetCheckFilePositions</definition>
        <argsstring>(bool cfp)</argsstring>
        <name>SetCheckFilePositions</name>
        <param>
          <type>bool</type>
          <declname>cfp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="308" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" bodystart="308" bodyend="308"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1VisMF_1a92c8f7a70093675fe29a9b3cfbe8e10f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool amrex::VisMF::GetUsePersistentIFStreams</definition>
        <argsstring>()</argsstring>
        <name>GetUsePersistentIFStreams</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="310" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" bodystart="310" bodyend="310"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1VisMF_1ae3d6b0ee4099108fc70fff4deb69b738" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::VisMF::SetUsePersistentIFStreams</definition>
        <argsstring>(bool usepifs)</argsstring>
        <name>SetUsePersistentIFStreams</name>
        <param>
          <type>bool</type>
          <declname>usepifs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="311" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" bodystart="311" bodyend="311"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1VisMF_1a7310b7f7d63449b1b38bcb8afdac7db8" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool amrex::VisMF::GetUseSynchronousReads</definition>
        <argsstring>()</argsstring>
        <name>GetUseSynchronousReads</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="313" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" bodystart="313" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1VisMF_1a97d811af2fd976d508e3f0cb4460c0fb" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::VisMF::SetUseSynchronousReads</definition>
        <argsstring>(bool usepsr)</argsstring>
        <name>SetUseSynchronousReads</name>
        <param>
          <type>bool</type>
          <declname>usepsr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="314" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" bodystart="314" bodyend="314"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1VisMF_1a20746ef0d6ef7d8491c815e2a954d13c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool amrex::VisMF::GetUseDynamicSetSelection</definition>
        <argsstring>()</argsstring>
        <name>GetUseDynamicSetSelection</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="316" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" bodystart="316" bodyend="316"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1VisMF_1ae5edd64d22f48b760a17f2e1c7369df6" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::VisMF::SetUseDynamicSetSelection</definition>
        <argsstring>(bool usedss)</argsstring>
        <name>SetUseDynamicSetSelection</name>
        <param>
          <type>bool</type>
          <declname>usedss</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="317" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" bodystart="317" bodyend="317"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1VisMF_1ab282227d4bfb63e964c0e404f5175af5" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Long</type>
        <definition>static Long amrex::VisMF::GetIOBufferSize</definition>
        <argsstring>()</argsstring>
        <name>GetIOBufferSize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="319" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" bodystart="319" bodyend="319"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1VisMF_1ae58b8cefb7f917ce5a819a08d2386d70" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::VisMF::SetIOBufferSize</definition>
        <argsstring>(Long iobuffersize)</argsstring>
        <name>SetIOBufferSize</name>
        <param>
          <type>Long</type>
          <declname>iobuffersize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="320" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" bodystart="320" bodyend="323"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1VisMF_1aca0f6fbf4458284d275ca2f0625c2303" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::VisMF::Initialize</definition>
        <argsstring>()</argsstring>
        <name>Initialize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="325" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.cpp" bodystart="65" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1VisMF_1aae19503ef83149be04e9d97f1c6bd6a3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::VisMF::Finalize</definition>
        <argsstring>()</argsstring>
        <name>Finalize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="326" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.cpp" bodystart="111" bodyend="127"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classamrex_1_1VisMF_1a25b8309e5f56a1269ddafb6f1f7852fc" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::VisMF::VisMF</definition>
        <argsstring>(const VisMF &amp;)</argsstring>
        <name>VisMF</name>
        <param>
          <type>const <ref refid="classamrex_1_1VisMF" kindref="compound">VisMF</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="332" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1VisMF_1a5d27212879138a4ea1e4264fa3fc9192" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1VisMF" kindref="compound">VisMF</ref> &amp;</type>
        <definition>VisMF&amp; amrex::VisMF::operator=</definition>
        <argsstring>(const VisMF &amp;)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classamrex_1_1VisMF" kindref="compound">VisMF</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="333" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classamrex_1_1VisMF_1a4918ae26fa1215758fd8aa7387c02b13" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structamrex_1_1VisMF_1_1FabOnDisk" kindref="compound">FabOnDisk</ref></type>
        <definition>VisMF::FabOnDisk amrex::VisMF::Write</definition>
        <argsstring>(const FArrayBox &amp;fab, const std::string &amp;filename, std::ostream &amp;os, Long &amp;bytes)</argsstring>
        <name>Write</name>
        <param>
          <type>const <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>fab</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>Long &amp;</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="335" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.cpp" bodystart="688" bodyend="703"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1VisMF_1a1da6ab2f7999738ec807b98d6af43e49" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Long</type>
        <definition>Long amrex::VisMF::WriteHeaderDoit</definition>
        <argsstring>(const std::string &amp;fafab_name, VisMF::Header const &amp;hdr)</argsstring>
        <name>WriteHeaderDoit</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>fafab_name</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1VisMF_1_1Header" kindref="compound">VisMF::Header</ref> const &amp;</type>
          <declname>hdr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="340" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.cpp" bodystart="953" bodyend="982"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1VisMF_1add3fb6556f6006594d5589b40d99beec" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Long</type>
        <definition>Long amrex::VisMF::WriteHeader</definition>
        <argsstring>(const std::string &amp;fafab_name, VisMF::Header &amp;hdr, int procToWrite=ParallelDescriptor::IOProcessorNumber(), MPI_Comm comm=ParallelDescriptor::Communicator())</argsstring>
        <name>WriteHeader</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>fafab_name</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1VisMF_1_1Header" kindref="compound">VisMF::Header</ref> &amp;</type>
          <declname>hdr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>procToWrite</declname>
          <defval><ref refid="namespaceamrex_1_1ParallelDescriptor_1ab734a5d614e753d28d03865ee6e4039a" kindref="member">ParallelDescriptor::IOProcessorNumber</ref>()</defval>
        </param>
        <param>
          <type><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref></type>
          <declname>comm</declname>
          <defval><ref refid="namespaceamrex_1_1ParallelDescriptor_1a0f53686fc6a6b7dca69c230fd1336e44" kindref="member">ParallelDescriptor::Communicator</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="343" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.cpp" bodystart="985" bodyend="1006"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1VisMF_1a3f74b018e90a133b54a5d1cde07580c7" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::VisMF::FindOffsets</definition>
        <argsstring>(const FabArray&lt; FArrayBox &gt; &amp;fafab, const std::string &amp;fafab_name, VisMF::Header &amp;hdr, VisMF::Header::Version whichVersion, NFilesIter &amp;nfi, MPI_Comm comm=ParallelDescriptor::Communicator())</argsstring>
        <name>FindOffsets</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &gt; &amp;</type>
          <declname>fafab</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>fafab_name</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1VisMF_1_1Header" kindref="compound">VisMF::Header</ref> &amp;</type>
          <declname>hdr</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1VisMF_1_1Header_1aa4469030a55d4e3be552189f7d06b54d" kindref="member">VisMF::Header::Version</ref></type>
          <declname>whichVersion</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1NFilesIter" kindref="compound">NFilesIter</ref> &amp;</type>
          <declname>nfi</declname>
        </param>
        <param>
          <type><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref></type>
          <declname>comm</declname>
          <defval><ref refid="namespaceamrex_1_1ParallelDescriptor_1a0f53686fc6a6b7dca69c230fd1336e44" kindref="member">ParallelDescriptor::Communicator</ref>()</defval>
        </param>
        <briefdescription>
<para>fileNumbers must be passed in for dynamic set selection [proc] </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="349" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.cpp" bodystart="1239" bodyend="1401"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1VisMF_1a3b548af5417b0614cd9795f054976559" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> *</type>
        <definition>FArrayBox * amrex::VisMF::readFAB</definition>
        <argsstring>(int fabIndex, const std::string &amp;fafab_name, const Header &amp;hdr, int whichComp=-1)</argsstring>
        <name>readFAB</name>
        <param>
          <type>int</type>
          <declname>fabIndex</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>fafab_name</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1VisMF_1_1Header" kindref="compound">Header</ref> &amp;</type>
          <declname>hdr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>whichComp</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
<para>Make a new FAB from a fab in a <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray&lt;FArrayBox&gt;</ref> on disk. The returned *FAB will have either one component filled from fafab[fabIndex][whichComp] or fafab[fabIndex].<ref refid="classamrex_1_1VisMF_1a9ff17055f76eb10b376600710788b922" kindref="member">nComp()</ref> components. whichComp == -1 means reads the whole FAB. Otherwise read just that component. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="362" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.cpp" bodystart="1469" bodyend="1520"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1VisMF_1ae9070f5fb2e6e4ade413965b97e12707" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::VisMF::readFAB</definition>
        <argsstring>(FabArray&lt; FArrayBox &gt; &amp;fafab, int fabIndex, const std::string &amp;fafab_name, const Header &amp;hdr)</argsstring>
        <name>readFAB</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &gt; &amp;</type>
          <declname>fafab</declname>
        </param>
        <param>
          <type>int</type>
          <declname>fabIndex</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>fafab_name</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1VisMF_1_1Header" kindref="compound">Header</ref> &amp;</type>
          <declname>hdr</declname>
        </param>
        <briefdescription>
<para>Read the whole FAB into fafab[fabIndex]. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="367" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.cpp" bodystart="1524" bodyend="1551"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1VisMF_1a87ed18b9e628d872b53b55a5b3fed710" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string amrex::VisMF::DirName</definition>
        <argsstring>(const std::string &amp;filename)</argsstring>
        <name>DirName</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="372" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.cpp" bodystart="654" bodyend="685"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1VisMF_1acdc54dfd982d910dafbe21e9c0459bf1" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string amrex::VisMF::BaseName</definition>
        <argsstring>(const std::string &amp;filename)</argsstring>
        <name>BaseName</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="374" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.cpp" bodystart="636" bodyend="651"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1VisMF_1a6852a33350e11c361c62d0743fb90c43" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::VisMF::AsyncWriteDoit</definition>
        <argsstring>(const FabArray&lt; FArrayBox &gt; &amp;mf, const std::string &amp;mf_name, bool is_rvalue)</argsstring>
        <name>AsyncWriteDoit</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &gt; &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>mf_name</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_rvalue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="376" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.cpp" bodystart="2269" bodyend="2488"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>File I/O for <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray&lt;FArrayBox&gt;</ref>. Wrapper class for reading/writing <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray&lt;FArrayBox&gt;</ref> objects to disk in various &quot;smart&quot; ways. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="6642">
        <label>amrex::VisMF</label>
        <link refid="classamrex_1_1VisMF"/>
        <childnode refid="6643" relation="usage">
          <edgelabel>m_pa</edgelabel>
        </childnode>
        <childnode refid="6645" relation="usage">
          <edgelabel>async_comm</edgelabel>
        </childnode>
        <childnode refid="6647" relation="usage">
          <edgelabel>m_fafabname</edgelabel>
        </childnode>
        <childnode refid="6648" relation="usage">
          <edgelabel>m_hdr</edgelabel>
        </childnode>
      </node>
      <node id="6656">
        <label>std::vector&lt; Long, std::allocator&lt; Long &gt; &gt;</label>
      </node>
      <node id="6651">
        <label>amrex::IntVect</label>
        <link refid="classamrex_1_1IntVect"/>
        <childnode refid="6651" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
      </node>
      <node id="6659">
        <label>amrex::Vector&lt; amrex::VisMF::FabOnDisk &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="6660" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6660">
        <label>std::vector&lt; amrex::VisMF::FabOnDisk, std::allocator&lt; amrex::VisMF::FabOnDisk &gt; &gt;</label>
      </node>
      <node id="6653">
        <label>amrex::Vector&lt; int &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="6654" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6647">
        <label>string</label>
      </node>
      <node id="6645">
        <label>amrex::Vector&lt; MPI_Comm &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="6646" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6650">
        <label>std::vector&lt; Real, std::allocator&lt; Real &gt; &gt;</label>
      </node>
      <node id="6643">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::FArrayBox * &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="6644" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6644">
        <label>std::vector&lt; amrex::Vector&lt; amrex::FArrayBox * &gt;, std::allocator&lt; amrex::Vector&lt; amrex::FArrayBox * &gt; &gt; &gt;</label>
      </node>
      <node id="6658">
        <label>std::vector&lt; amrex::Vector&lt; Real &gt;, std::allocator&lt; amrex::Vector&lt; Real &gt; &gt; &gt;</label>
      </node>
      <node id="6654">
        <label>std::vector&lt; int, std::allocator&lt; int &gt; &gt;</label>
      </node>
      <node id="6652">
        <label>amrex::RealDescriptor</label>
        <link refid="classamrex_1_1RealDescriptor"/>
        <childnode refid="6653" relation="usage">
          <edgelabel>ord</edgelabel>
        </childnode>
        <childnode refid="6655" relation="usage">
          <edgelabel>fr</edgelabel>
        </childnode>
      </node>
      <node id="6655">
        <label>amrex::Vector&lt; Long &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="6656" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6649">
        <label>amrex::Vector&lt; Real &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="6650" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6646">
        <label>std::vector&lt; MPI_Comm, std::allocator&lt; MPI_Comm &gt; &gt;</label>
      </node>
      <node id="6648">
        <label>amrex::VisMF::Header</label>
        <link refid="structamrex_1_1VisMF_1_1Header"/>
        <childnode refid="6649" relation="usage">
          <edgelabel>m_famin</edgelabel>
          <edgelabel>m_famax</edgelabel>
        </childnode>
        <childnode refid="6651" relation="usage">
          <edgelabel>m_ngrow</edgelabel>
        </childnode>
        <childnode refid="6652" relation="usage">
          <edgelabel>m_writtenRD</edgelabel>
        </childnode>
        <childnode refid="6657" relation="usage">
          <edgelabel>m_min</edgelabel>
          <edgelabel>m_max</edgelabel>
        </childnode>
        <childnode refid="6659" relation="usage">
          <edgelabel>m_fod</edgelabel>
        </childnode>
      </node>
      <node id="6657">
        <label>amrex::Vector&lt; amrex::Vector&lt; Real &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="6658" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" line="41" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.H" bodystart="40" bodyend="416"/>
    <listofallmembers>
      <member refid="classamrex_1_1VisMF_1ad6b2c32f84c4e530a473eab6ffd666f2" prot="private" virt="non-virtual"><scope>amrex::VisMF</scope><name>allowSparseWrites</name></member>
      <member refid="classamrex_1_1VisMF_1a4febd1c34e12759d7acb412d1cf62495" prot="private" virt="non-virtual"><scope>amrex::VisMF</scope><name>async_comm</name></member>
      <member refid="classamrex_1_1VisMF_1a18f41ccae821e24e006e28f55d1ea8dd" prot="public" virt="non-virtual"><scope>amrex::VisMF</scope><name>asyncAddWrite</name></member>
      <member refid="classamrex_1_1VisMF_1a6677c063597457901ddf807b87d57bd4" prot="private" virt="non-virtual"><scope>amrex::VisMF</scope><name>asyncTag</name></member>
      <member refid="classamrex_1_1VisMF_1a43866f0e887315ffbeb06e8ccc2e3843" prot="public" virt="non-virtual"><scope>amrex::VisMF</scope><name>asyncWaitAll</name></member>
      <member refid="classamrex_1_1VisMF_1a80b05d379ce6f96729eabd61d33d85a4" prot="public" virt="non-virtual"><scope>amrex::VisMF</scope><name>asyncWaitOne</name></member>
      <member refid="classamrex_1_1VisMF_1a057e823f401a3c3c20722f9967bb8ce7" prot="public" virt="non-virtual"><scope>amrex::VisMF</scope><name>asyncWaitUntilFree</name></member>
      <member refid="classamrex_1_1VisMF_1add80572f2657d610d4ffd75957e1acb1" prot="public" virt="non-virtual"><scope>amrex::VisMF</scope><name>AsyncWrite</name></member>
      <member refid="classamrex_1_1VisMF_1a70d68be6ac6de3d3d857138f981db50f" prot="public" virt="non-virtual"><scope>amrex::VisMF</scope><name>AsyncWrite</name></member>
      <member refid="classamrex_1_1VisMF_1a6852a33350e11c361c62d0743fb90c43" prot="private" virt="non-virtual"><scope>amrex::VisMF</scope><name>AsyncWriteDoit</name></member>
      <member refid="classamrex_1_1VisMF_1acdc54dfd982d910dafbe21e9c0459bf1" prot="private" virt="non-virtual"><scope>amrex::VisMF</scope><name>BaseName</name></member>
      <member refid="classamrex_1_1VisMF_1a3a35f387db57fae60e7261b295566c80" prot="public" virt="non-virtual"><scope>amrex::VisMF</scope><name>boxArray</name></member>
      <member refid="classamrex_1_1VisMF_1ae12f838572701049902254dfb46eb650" prot="public" virt="non-virtual"><scope>amrex::VisMF</scope><name>Check</name></member>
      <member refid="classamrex_1_1VisMF_1a174cc2335d85746e4c0c05c71c0a816b" prot="private" virt="non-virtual"><scope>amrex::VisMF</scope><name>checkFilePositions</name></member>
      <member refid="classamrex_1_1VisMF_1a77474efc5c2215f02ded00aa816ee02e" prot="public" virt="non-virtual"><scope>amrex::VisMF</scope><name>clear</name></member>
      <member refid="classamrex_1_1VisMF_1a483f483c43527c21fd7f8d0a301600a8" prot="public" virt="non-virtual"><scope>amrex::VisMF</scope><name>clear</name></member>
      <member refid="classamrex_1_1VisMF_1ab3c166ef170fe72fdda5fab9cd9176e0" prot="public" virt="non-virtual"><scope>amrex::VisMF</scope><name>clear</name></member>
      <member refid="classamrex_1_1VisMF_1a3eb747b7ba5f46a315650c84c1162418" prot="public" virt="non-virtual"><scope>amrex::VisMF</scope><name>CloseAllStreams</name></member>
      <member refid="classamrex_1_1VisMF_1a9f63d703f45cf3be27c339a38d893796" prot="public" virt="non-virtual"><scope>amrex::VisMF</scope><name>CloseStream</name></member>
      <member refid="classamrex_1_1VisMF_1a1b6dd0de445fcd0617eb9388bcf04f98" prot="private" virt="non-virtual"><scope>amrex::VisMF</scope><name>current_comm</name></member>
      <member refid="classamrex_1_1VisMF_1a7f4058d4117af92e70d889263657e9f8" prot="private" virt="non-virtual"><scope>amrex::VisMF</scope><name>currentVersion</name></member>
      <member refid="classamrex_1_1VisMF_1a6a1a78975e5decf1c7aae4555a240628" prot="public" virt="non-virtual"><scope>amrex::VisMF</scope><name>DeleteStream</name></member>
      <member refid="classamrex_1_1VisMF_1a87ed18b9e628d872b53b55a5b3fed710" prot="private" virt="non-virtual"><scope>amrex::VisMF</scope><name>DirName</name></member>
      <member refid="classamrex_1_1VisMF_1ab895515b73ef0cdc6d0e06c7590f3e76" prot="public" virt="non-virtual"><scope>amrex::VisMF</scope><name>Exist</name></member>
      <member refid="classamrex_1_1VisMF_1a1b41ff82637f2e2f4dd33f27a0d62ad1" prot="public" virt="non-virtual"><scope>amrex::VisMF</scope><name>FileOffset</name></member>
      <member refid="classamrex_1_1VisMF_1aae19503ef83149be04e9d97f1c6bd6a3" prot="public" virt="non-virtual"><scope>amrex::VisMF</scope><name>Finalize</name></member>
      <member refid="classamrex_1_1VisMF_1a3f74b018e90a133b54a5d1cde07580c7" prot="private" virt="non-virtual"><scope>amrex::VisMF</scope><name>FindOffsets</name></member>
      <member refid="classamrex_1_1VisMF_1a335f428493f0a627d25a05bb44f9fda4" prot="private" virt="non-virtual"><scope>amrex::VisMF</scope><name>future_list</name></member>
      <member refid="classamrex_1_1VisMF_1a67cbe97a6341b35ab4036a8b0ca59f3c" prot="public" virt="non-virtual"><scope>amrex::VisMF</scope><name>GetCheckFilePositions</name></member>
      <member refid="classamrex_1_1VisMF_1ab451fc52fbdab6eea6f561513a514e88" prot="public" virt="non-virtual"><scope>amrex::VisMF</scope><name>GetFab</name></member>
      <member refid="classamrex_1_1VisMF_1a8645f0e85a9ccda7b565b6fbabb5bac3" prot="public" virt="non-virtual"><scope>amrex::VisMF</scope><name>GetGroupSets</name></member>
      <member refid="classamrex_1_1VisMF_1a5be9ce5dc3ed0083f7959e63528de583" prot="public" virt="non-virtual"><scope>amrex::VisMF</scope><name>GetHeaderVersion</name></member>
      <member refid="classamrex_1_1VisMF_1ab282227d4bfb63e964c0e404f5175af5" prot="public" virt="non-virtual"><scope>amrex::VisMF</scope><name>GetIOBufferSize</name></member>
      <member refid="classamrex_1_1VisMF_1a738d789073dd1072ac3a0c640429574c" prot="public" virt="non-virtual"><scope>amrex::VisMF</scope><name>GetMFFileInStreams</name></member>
      <member refid="classamrex_1_1VisMF_1a73b516dcb8729a411f75eaa5d7fc1b54" prot="public" virt="non-virtual"><scope>amrex::VisMF</scope><name>GetNOutFiles</name></member>
      <member refid="classamrex_1_1VisMF_1a260347a951d2b4a4669cb4dc79956450" prot="public" virt="non-virtual"><scope>amrex::VisMF</scope><name>GetSetBuf</name></member>
      <member refid="classamrex_1_1VisMF_1a20746ef0d6ef7d8491c815e2a954d13c" prot="public" virt="non-virtual"><scope>amrex::VisMF</scope><name>GetUseDynamicSetSelection</name></member>
      <member refid="classamrex_1_1VisMF_1a92c8f7a70093675fe29a9b3cfbe8e10f" prot="public" virt="non-virtual"><scope>amrex::VisMF</scope><name>GetUsePersistentIFStreams</name></member>
      <member refid="classamrex_1_1VisMF_1aca85185856423d34e7e15041139aee01" prot="public" virt="non-virtual"><scope>amrex::VisMF</scope><name>GetUseSingleRead</name></member>
      <member refid="classamrex_1_1VisMF_1aead41678a66e4c5a4f315404d3ffed10" prot="public" virt="non-virtual"><scope>amrex::VisMF</scope><name>GetUseSingleWrite</name></member>
      <member refid="classamrex_1_1VisMF_1a7310b7f7d63449b1b38bcb8afdac7db8" prot="public" virt="non-virtual"><scope>amrex::VisMF</scope><name>GetUseSynchronousReads</name></member>
      <member refid="classamrex_1_1VisMF_1a51041736815ed12616b075d56e53fd2f" prot="public" virt="non-virtual"><scope>amrex::VisMF</scope><name>GetVerbose</name></member>
      <member refid="classamrex_1_1VisMF_1a51fdeeea196eac049978076bf6671720" prot="private" virt="non-virtual"><scope>amrex::VisMF</scope><name>groupSets</name></member>
      <member refid="classamrex_1_1VisMF_1aa50a3ce471ac0bdf8f78134f0004e156" prot="public" virt="non-virtual"><scope>amrex::VisMF</scope><name>How</name></member>
      <member refid="classamrex_1_1VisMF_1aca0f6fbf4458284d275ca2f0625c2303" prot="public" virt="non-virtual"><scope>amrex::VisMF</scope><name>Initialize</name></member>
      <member refid="classamrex_1_1VisMF_1a0027a67a36ec8d1b6eca3e2377c9c050" prot="public" virt="non-virtual"><scope>amrex::VisMF</scope><name>IO_Buffer</name></member>
      <member refid="classamrex_1_1VisMF_1a257a59151037552c3e665c3ea3a5786fac67ac04832d2bbe370aa12c6ca513e85" prot="public" virt="non-virtual"><scope>amrex::VisMF</scope><name>IO_Buffer_Size</name></member>
      <member refid="classamrex_1_1VisMF_1a1f60977c11c2c87df32b47debd813b9e" prot="private" virt="non-virtual"><scope>amrex::VisMF</scope><name>ioBufferSize</name></member>
      <member refid="classamrex_1_1VisMF_1a3e29beee8db471f8b5cca2c5ab03e1c8" prot="private" virt="non-virtual"><scope>amrex::VisMF</scope><name>m_fafabname</name></member>
      <member refid="classamrex_1_1VisMF_1a8b04406fcfdbec77eba187d3ceb9b2dc" prot="private" virt="non-virtual"><scope>amrex::VisMF</scope><name>m_hdr</name></member>
      <member refid="classamrex_1_1VisMF_1a6e7c0f5fc1401ba1497916e015b8591c" prot="private" virt="non-virtual"><scope>amrex::VisMF</scope><name>m_pa</name></member>
      <member refid="classamrex_1_1VisMF_1a329f164401dc05aadc7b91a1fc511d63" prot="public" virt="non-virtual"><scope>amrex::VisMF</scope><name>max</name></member>
      <member refid="classamrex_1_1VisMF_1ac3942bb15a9cbd1884e65831c04cc140" prot="public" virt="non-virtual"><scope>amrex::VisMF</scope><name>max</name></member>
      <member refid="classamrex_1_1VisMF_1a2eb86f607b90d7ea8b982b47f4bad739" prot="public" virt="non-virtual"><scope>amrex::VisMF</scope><name>min</name></member>
      <member refid="classamrex_1_1VisMF_1afae01007e39347487d204df8e5109369" prot="public" virt="non-virtual"><scope>amrex::VisMF</scope><name>min</name></member>
      <member refid="classamrex_1_1VisMF_1a84c10ec9a471ea24a3208e1798cb7bec" prot="private" virt="non-virtual"><scope>amrex::VisMF</scope><name>nAsyncWrites</name></member>
      <member refid="classamrex_1_1VisMF_1a9ff17055f76eb10b376600710788b922" prot="public" virt="non-virtual"><scope>amrex::VisMF</scope><name>nComp</name></member>
      <member refid="classamrex_1_1VisMF_1aa50a3ce471ac0bdf8f78134f0004e156a167fa24b841257fa58af35b658f5d6c1" prot="public" virt="non-virtual"><scope>amrex::VisMF</scope><name>NFiles</name></member>
      <member refid="classamrex_1_1VisMF_1a4d2dd5d09383bc182c919795f859b1e6" prot="public" virt="non-virtual"><scope>amrex::VisMF</scope><name>nGrow</name></member>
      <member refid="classamrex_1_1VisMF_1a1428bfdbc4dae39af42809e49c030e3c" prot="public" virt="non-virtual"><scope>amrex::VisMF</scope><name>nGrowVect</name></member>
      <member refid="classamrex_1_1VisMF_1abfbb2ed9c1aa1c00786e7ae2218f0b0f" prot="private" virt="non-virtual"><scope>amrex::VisMF</scope><name>nMFFileInStreams</name></member>
      <member refid="classamrex_1_1VisMF_1af7f852d2d1e0656e85e58dcf5ba364b1" prot="public" virt="non-virtual"><scope>amrex::VisMF</scope><name>NoFabHeader</name></member>
      <member refid="classamrex_1_1VisMF_1ade6a45cdc3be4fb324ccd3a863788aae" prot="private" virt="non-virtual"><scope>amrex::VisMF</scope><name>nOutFiles</name></member>
      <member refid="classamrex_1_1VisMF_1aa50a3ce471ac0bdf8f78134f0004e156a93fcd009ee92168a4e419161fc19635b" prot="public" virt="non-virtual"><scope>amrex::VisMF</scope><name>OneFilePerCPU</name></member>
      <member refid="classamrex_1_1VisMF_1a1f7ef6b7304a0ff3dd4df629cef4971e" prot="public" virt="non-virtual"><scope>amrex::VisMF</scope><name>OpenStream</name></member>
      <member refid="classamrex_1_1VisMF_1a5d27212879138a4ea1e4264fa3fc9192" prot="private" virt="non-virtual"><scope>amrex::VisMF</scope><name>operator=</name></member>
      <member refid="classamrex_1_1VisMF_1accf2e64d0fa423eb3c82df8c1189e908" prot="private" virt="non-virtual"><scope>amrex::VisMF</scope><name>persistentIFStreams</name></member>
      <member refid="classamrex_1_1VisMF_1a584871b7013d4d9e46d16eb6d53803ed" prot="public" virt="non-virtual"><scope>amrex::VisMF</scope><name>Read</name></member>
      <member refid="classamrex_1_1VisMF_1af49a2c7b6fd6fdf8f80c84004317f002" prot="public" virt="non-virtual"><scope>amrex::VisMF</scope><name>readFAB</name></member>
      <member refid="classamrex_1_1VisMF_1ab52310c888c038df7804f8d7b292f5bb" prot="public" virt="non-virtual"><scope>amrex::VisMF</scope><name>readFAB</name></member>
      <member refid="classamrex_1_1VisMF_1a3b548af5417b0614cd9795f054976559" prot="private" virt="non-virtual"><scope>amrex::VisMF</scope><name>readFAB</name></member>
      <member refid="classamrex_1_1VisMF_1ae9070f5fb2e6e4ade413965b97e12707" prot="private" virt="non-virtual"><scope>amrex::VisMF</scope><name>readFAB</name></member>
      <member refid="classamrex_1_1VisMF_1abdcbffdd50b28342be875ac0da817056" prot="public" virt="non-virtual"><scope>amrex::VisMF</scope><name>ReadFAHeader</name></member>
      <member refid="classamrex_1_1VisMF_1ad4a180abf07b6a7129d8fd4f6ee0d798" prot="public" virt="non-virtual"><scope>amrex::VisMF</scope><name>RemoveFiles</name></member>
      <member refid="classamrex_1_1VisMF_1a0ab15576cd65ae5152ba609b54b24550" prot="private" virt="non-virtual"><scope>amrex::VisMF</scope><name>setBuf</name></member>
      <member refid="classamrex_1_1VisMF_1ad0a5e71e7eafe2b4f3f23ea91a56f4b0" prot="public" virt="non-virtual"><scope>amrex::VisMF</scope><name>Setbuf_Char_Type</name></member>
      <member refid="classamrex_1_1VisMF_1a5fa42d848c0d0dc397ddf05fd16c5e16" prot="public" virt="non-virtual"><scope>amrex::VisMF</scope><name>SetCheckFilePositions</name></member>
      <member refid="classamrex_1_1VisMF_1a0e5c0555decdea8a4d09c7eabff1a07d" prot="public" virt="non-virtual"><scope>amrex::VisMF</scope><name>SetGroupSets</name></member>
      <member refid="classamrex_1_1VisMF_1a2ce0e613077c3ec9c4c687628154c5ce" prot="public" virt="non-virtual"><scope>amrex::VisMF</scope><name>SetHeaderVersion</name></member>
      <member refid="classamrex_1_1VisMF_1ae58b8cefb7f917ce5a819a08d2386d70" prot="public" virt="non-virtual"><scope>amrex::VisMF</scope><name>SetIOBufferSize</name></member>
      <member refid="classamrex_1_1VisMF_1abda03b733e4f5e0b9f005f764f1a5b65" prot="public" virt="non-virtual"><scope>amrex::VisMF</scope><name>SetMFFileInStreams</name></member>
      <member refid="classamrex_1_1VisMF_1aeea445c6cb42961bb091d40ee7545607" prot="public" virt="non-virtual"><scope>amrex::VisMF</scope><name>SetNOutFiles</name></member>
      <member refid="classamrex_1_1VisMF_1af73ff9fbd9a91c471bfbe750de045fb9" prot="public" virt="non-virtual"><scope>amrex::VisMF</scope><name>SetSetBuf</name></member>
      <member refid="classamrex_1_1VisMF_1ae5edd64d22f48b760a17f2e1c7369df6" prot="public" virt="non-virtual"><scope>amrex::VisMF</scope><name>SetUseDynamicSetSelection</name></member>
      <member refid="classamrex_1_1VisMF_1ae3d6b0ee4099108fc70fff4deb69b738" prot="public" virt="non-virtual"><scope>amrex::VisMF</scope><name>SetUsePersistentIFStreams</name></member>
      <member refid="classamrex_1_1VisMF_1a6142ed0a2ebee84b7961a5f429a3f4de" prot="public" virt="non-virtual"><scope>amrex::VisMF</scope><name>SetUseSingleRead</name></member>
      <member refid="classamrex_1_1VisMF_1a2a642eb132677ff8e2cda24a665def96" prot="public" virt="non-virtual"><scope>amrex::VisMF</scope><name>SetUseSingleWrite</name></member>
      <member refid="classamrex_1_1VisMF_1a97d811af2fd976d508e3f0cb4460c0fb" prot="public" virt="non-virtual"><scope>amrex::VisMF</scope><name>SetUseSynchronousReads</name></member>
      <member refid="classamrex_1_1VisMF_1a998f1813f57b8415140b26966fd0f86c" prot="public" virt="non-virtual"><scope>amrex::VisMF</scope><name>SetVerbose</name></member>
      <member refid="classamrex_1_1VisMF_1a5518f2e8bea78f8bb0727733ea5756d0" prot="public" virt="non-virtual"><scope>amrex::VisMF</scope><name>size</name></member>
      <member refid="classamrex_1_1VisMF_1a23fa1165af6c17714836f4e08c465b3f" prot="public" virt="non-virtual"><scope>amrex::VisMF</scope><name>StaticWriteInfo</name></member>
      <member refid="classamrex_1_1VisMF_1a9149ec039a2136083c03aabdaa275672" prot="private" virt="non-virtual"><scope>amrex::VisMF</scope><name>useDynamicSetSelection</name></member>
      <member refid="classamrex_1_1VisMF_1a806512ed6337ff31d9eb6f63f94ce792" prot="private" virt="non-virtual"><scope>amrex::VisMF</scope><name>usePersistentIFStreams</name></member>
      <member refid="classamrex_1_1VisMF_1a7127d8495966b5d5506d3cff6c536a12" prot="private" virt="non-virtual"><scope>amrex::VisMF</scope><name>useSingleRead</name></member>
      <member refid="classamrex_1_1VisMF_1a0706ea7e89d0d5b2d9a60acacc8f38f0" prot="private" virt="non-virtual"><scope>amrex::VisMF</scope><name>useSingleWrite</name></member>
      <member refid="classamrex_1_1VisMF_1a0c9e87f4c459196a9f1ce7870ccbf9cb" prot="private" virt="non-virtual"><scope>amrex::VisMF</scope><name>useSynchronousReads</name></member>
      <member refid="classamrex_1_1VisMF_1a4ee12165f32372e900a0f0967a344708" prot="private" virt="non-virtual"><scope>amrex::VisMF</scope><name>verbose</name></member>
      <member refid="classamrex_1_1VisMF_1ae372e9dede4ddc3c4c271118812e9b39" prot="public" virt="non-virtual"><scope>amrex::VisMF</scope><name>VisMF</name></member>
      <member refid="classamrex_1_1VisMF_1a25b8309e5f56a1269ddafb6f1f7852fc" prot="private" virt="non-virtual"><scope>amrex::VisMF</scope><name>VisMF</name></member>
      <member refid="classamrex_1_1VisMF_1a527bd21764fd10a8fb440b897e30c12a" prot="public" virt="non-virtual"><scope>amrex::VisMF</scope><name>Write</name></member>
      <member refid="classamrex_1_1VisMF_1a4918ae26fa1215758fd8aa7387c02b13" prot="private" virt="non-virtual"><scope>amrex::VisMF</scope><name>Write</name></member>
      <member refid="classamrex_1_1VisMF_1a56c6bc2db6bcc4a6b2d91d2e783d23c6" prot="public" virt="non-virtual"><scope>amrex::VisMF</scope><name>WriteAsync_file</name></member>
      <member refid="classamrex_1_1VisMF_1a7af82fb230fcdc9e837c260802a2d8ba" prot="public" virt="non-virtual"><scope>amrex::VisMF</scope><name>WriteAsyncMultiFab</name></member>
      <member refid="classamrex_1_1VisMF_1a452f96de7229a9fbdecff805a86df7b5" prot="public" virt="non-virtual"><scope>amrex::VisMF</scope><name>WriteAsyncPlotfile</name></member>
      <member refid="classamrex_1_1VisMF_1add3fb6556f6006594d5589b40d99beec" prot="private" virt="non-virtual"><scope>amrex::VisMF</scope><name>WriteHeader</name></member>
      <member refid="classamrex_1_1VisMF_1a1da6ab2f7999738ec807b98d6af43e49" prot="private" virt="non-virtual"><scope>amrex::VisMF</scope><name>WriteHeaderDoit</name></member>
      <member refid="classamrex_1_1VisMF_1a8807abfd4ec1e3790a765096f2d6b724" prot="public" virt="non-virtual"><scope>amrex::VisMF</scope><name>WriteOnlyHeader</name></member>
      <member refid="classamrex_1_1VisMF_1adae69cdb339309e76cfb37486e60ffe4" prot="public" virt="non-virtual"><scope>amrex::VisMF</scope><name>~VisMF</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
