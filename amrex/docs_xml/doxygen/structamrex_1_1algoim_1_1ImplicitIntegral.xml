<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="structamrex_1_1algoim_1_1ImplicitIntegral" kind="struct" language="C++" prot="public">
    <compoundname>amrex::algoim::ImplicitIntegral</compoundname>
    <includes refid="AMReX__algoim__K_8H" local="no">AMReX_algoim_K.H</includes>
    <templateparamlist>
      <param>
        <type>int</type>
        <declname>M</declname>
        <defname>M</defname>
      </param>
      <param>
        <type>int</type>
        <declname>N</declname>
        <defname>N</defname>
      </param>
      <param>
        <type>typename Phi</type>
      </param>
      <param>
        <type>typename <ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref></type>
      </param>
      <param>
        <type>bool</type>
        <declname>S</declname>
        <defname>S</defname>
      </param>
    </templateparamlist>
    <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structamrex_1_1algoim_1_1ImplicitIntegral_1a149f5f335aa384fea60572300241de10" prot="public" static="no" mutable="no">
        <type>const Phi *</type>
        <definition>const Phi* amrex::algoim::ImplicitIntegral&lt; M, N, Phi, F, S &gt;::phi</definition>
        <argsstring></argsstring>
        <name>phi</name>
        <qualifiedname>amrex::algoim::ImplicitIntegral::phi</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_algoim_K.H" line="256" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_algoim_K.H" bodystart="256" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structamrex_1_1algoim_1_1ImplicitIntegral_1a0e7a8b9c74fc7b5929496e081dff2e8a" prot="public" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> *</type>
        <definition>F* amrex::algoim::ImplicitIntegral&lt; M, N, Phi, F, S &gt;::f</definition>
        <argsstring></argsstring>
        <name>f</name>
        <qualifiedname>amrex::algoim::ImplicitIntegral::f</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_algoim_K.H" line="257" column="7" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_algoim_K.H" bodystart="257" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structamrex_1_1algoim_1_1ImplicitIntegral_1aa83b553298a2020fb6ebd7c21e236689" prot="public" static="no" mutable="no">
        <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; bool, N &gt;</type>
        <definition>GpuArray&lt;bool,N&gt; amrex::algoim::ImplicitIntegral&lt; M, N, Phi, F, S &gt;::free</definition>
        <argsstring></argsstring>
        <name>free</name>
        <qualifiedname>amrex::algoim::ImplicitIntegral::free</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_algoim_K.H" line="258" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_algoim_K.H" bodystart="258" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structamrex_1_1algoim_1_1ImplicitIntegral_1ad7a1d13d438479b184c871b0dec86a66" prot="public" static="no" mutable="no">
        <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; <ref refid="structamrex_1_1algoim_1_1PsiCode" kindref="compound">PsiCode</ref>&lt; N &gt;, 1&lt;&lt;(N - 1)&gt;</type>
        <definition>GpuArray&lt;PsiCode&lt;N&gt;,1 &lt;&lt; (N - 1)&gt; amrex::algoim::ImplicitIntegral&lt; M, N, Phi, F, S &gt;::psi</definition>
        <argsstring></argsstring>
        <name>psi</name>
        <qualifiedname>amrex::algoim::ImplicitIntegral::psi</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_algoim_K.H" line="259" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_algoim_K.H" bodystart="259" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structamrex_1_1algoim_1_1ImplicitIntegral_1a9352b5694ad95664dce6d6214668eb05" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int amrex::algoim::ImplicitIntegral&lt; M, N, Phi, F, S &gt;::psiCount</definition>
        <argsstring></argsstring>
        <name>psiCount</name>
        <qualifiedname>amrex::algoim::ImplicitIntegral::psiCount</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_algoim_K.H" line="260" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_algoim_K.H" bodystart="260" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structamrex_1_1algoim_1_1ImplicitIntegral_1a0e3b87a075c020bc4e0347b49b41a638" prot="public" static="no" mutable="no">
        <type><ref refid="structamrex_1_1algoim_1_1BoundingBox" kindref="compound">BoundingBox</ref>&lt; N &gt;</type>
        <definition>BoundingBox&lt;N&gt; amrex::algoim::ImplicitIntegral&lt; M, N, Phi, F, S &gt;::xrange</definition>
        <argsstring></argsstring>
        <name>xrange</name>
        <qualifiedname>amrex::algoim::ImplicitIntegral::xrange</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_algoim_K.H" line="261" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_algoim_K.H" bodystart="261" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structamrex_1_1algoim_1_1ImplicitIntegral_1a4a5d0a66ecd91a77f268b082f6f7470c" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int amrex::algoim::ImplicitIntegral&lt; M, N, Phi, F, S &gt;::e0</definition>
        <argsstring></argsstring>
        <name>e0</name>
        <qualifiedname>amrex::algoim::ImplicitIntegral::e0</qualifiedname>
        <initializer>= -1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_algoim_K.H" line="262" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_algoim_K.H" bodystart="262" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structamrex_1_1algoim_1_1ImplicitIntegral_1aa84aea4f19fd97919030c7bc2b2bce52" prot="public" static="no" mutable="no">
        <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; <ref refid="structamrex_1_1algoim_1_1Interval" kindref="compound">Interval</ref>, N &gt;</type>
        <definition>GpuArray&lt;Interval,N&gt; amrex::algoim::ImplicitIntegral&lt; M, N, Phi, F, S &gt;::xint</definition>
        <argsstring></argsstring>
        <name>xint</name>
        <qualifiedname>amrex::algoim::ImplicitIntegral::xint</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_algoim_K.H" line="263" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_algoim_K.H" bodystart="263" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="structamrex_1_1algoim_1_1ImplicitIntegral_1a07854fea58e09b2b7f36b91fcd1dccf1" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr int</type>
        <definition>constexpr int amrex::algoim::ImplicitIntegral&lt; M, N, Phi, F, S &gt;::p</definition>
        <argsstring></argsstring>
        <name>p</name>
        <qualifiedname>amrex::algoim::ImplicitIntegral::p</qualifiedname>
        <initializer>= 4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_algoim_K.H" line="264" column="26" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_algoim_K.H" bodystart="264" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="structamrex_1_1algoim_1_1ImplicitIntegral_1a4180473d6c56a9b0ef42e36dc879604d" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ bool</type>
        <definition>__host__ __device__ bool amrex::algoim::ImplicitIntegral&lt; M, N, Phi, F, S &gt;::prune</definition>
        <argsstring>() noexcept</argsstring>
        <name>prune</name>
        <qualifiedname>amrex::algoim::ImplicitIntegral::prune</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_algoim_K.H" line="273" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_algoim_K.H" bodystart="273" bodyend="309"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1algoim_1_1ImplicitIntegral_1a938bffe03fe5924b754636271767d793" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ void</type>
        <definition>__host__ __device__ void amrex::algoim::ImplicitIntegral&lt; M, N, Phi, F, S &gt;::tensorProductIntegral</definition>
        <argsstring>() noexcept</argsstring>
        <name>tensorProductIntegral</name>
        <qualifiedname>amrex::algoim::ImplicitIntegral::tensorProductIntegral</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_algoim_K.H" line="314" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_algoim_K.H" bodystart="314" bodyend="352"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1algoim_1_1ImplicitIntegral_1a971d1557e44ee58cbad9c8823c080897" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ void</type>
        <definition>__host__ __device__ void amrex::algoim::ImplicitIntegral&lt; M, N, Phi, F, S &gt;::evalIntegrand</definition>
        <argsstring>(GpuArray&lt; Real, N &gt; x, Real w) const noexcept</argsstring>
        <name>evalIntegrand</name>
        <qualifiedname>amrex::algoim::ImplicitIntegral::evalIntegrand</qualifiedname>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, N &gt;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>w</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_algoim_K.H" line="359" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_algoim_K.H" bodystart="359" bodyend="469"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1algoim_1_1ImplicitIntegral_1a298e8a82f1aef3317ffb0c8d5f0f1172" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>K</declname>
            <defname>K</defname>
            <defval>M</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; K==1, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>__host__ __device__</type>
        <definition>__host__ __device__ amrex::algoim::ImplicitIntegral&lt; M, N, Phi, F, S &gt;::ImplicitIntegral</definition>
        <argsstring>(const Phi &amp;phi_, F &amp;f_, const GpuArray&lt; bool, N &gt; &amp;free_, const GpuArray&lt; PsiCode&lt; N &gt;, 1&lt;&lt;(N-1)&gt; &amp;psi_, int psiCount_) noexcept</argsstring>
        <name>ImplicitIntegral</name>
        <qualifiedname>amrex::algoim::ImplicitIntegral::ImplicitIntegral</qualifiedname>
        <param>
          <type>const Phi &amp;</type>
          <declname>phi_</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> &amp;</type>
          <declname>f_</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; bool, N &gt; &amp;</type>
          <declname>free_</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_algoim_K.H" line="475" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_algoim_K.H" bodystart="475" bodyend="489"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1algoim_1_1ImplicitIntegral_1a298e8a82f1aef3317ffb0c8d5f0f1172" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>K</declname>
            <defname>K</defname>
            <defval>M</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt;(K &gt;1), int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>__host__ __device__</type>
        <definition>__host__ __device__ amrex::algoim::ImplicitIntegral&lt; M, N, Phi, F, S &gt;::ImplicitIntegral</definition>
        <argsstring>(const Phi &amp;phi_, F &amp;f_, const GpuArray&lt; bool, N &gt; &amp;free_, const GpuArray&lt; PsiCode&lt; N &gt;, 1&lt;&lt;(N-1)&gt; &amp;psi_, int psiCount_) noexcept</argsstring>
        <name>ImplicitIntegral</name>
        <qualifiedname>amrex::algoim::ImplicitIntegral::ImplicitIntegral</qualifiedname>
        <param>
          <type>const Phi &amp;</type>
          <declname>phi_</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> &amp;</type>
          <declname>f_</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; bool, N &gt; &amp;</type>
          <declname>free_</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_algoim_K.H" line="495" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_algoim_K.H" bodystart="495" bodyend="575"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="3">
        <label>amrex::GpuArray&lt; amrex::algoim::Interval, N &gt;</label>
        <link refid="structamrex_1_1GpuArray"/>
        <childnode refid="4" relation="usage">
          <edgelabel>arr</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>amrex::GpuArray&lt; bool, N &gt;</label>
        <link refid="structamrex_1_1GpuArray"/>
      </node>
      <node id="1">
        <label>amrex::algoim::ImplicitIntegral&lt; M, N, Phi, F, S &gt;</label>
        <link refid="structamrex_1_1algoim_1_1ImplicitIntegral"/>
        <childnode refid="2" relation="usage">
          <edgelabel>free</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>xint</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>amrex::algoim::Interval</label>
        <link refid="structamrex_1_1algoim_1_1Interval"/>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_algoim_K.H" line="254" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_algoim_K.H" bodystart="255" bodyend="576"/>
    <listofallmembers>
      <member refid="structamrex_1_1algoim_1_1ImplicitIntegral_1a4a5d0a66ecd91a77f268b082f6f7470c" prot="public" virt="non-virtual"><scope>amrex::algoim::ImplicitIntegral</scope><name>e0</name></member>
      <member refid="structamrex_1_1algoim_1_1ImplicitIntegral_1a971d1557e44ee58cbad9c8823c080897" prot="public" virt="non-virtual"><scope>amrex::algoim::ImplicitIntegral</scope><name>evalIntegrand</name></member>
      <member refid="structamrex_1_1algoim_1_1ImplicitIntegral_1a0e7a8b9c74fc7b5929496e081dff2e8a" prot="public" virt="non-virtual"><scope>amrex::algoim::ImplicitIntegral</scope><name>f</name></member>
      <member refid="structamrex_1_1algoim_1_1ImplicitIntegral_1aa83b553298a2020fb6ebd7c21e236689" prot="public" virt="non-virtual"><scope>amrex::algoim::ImplicitIntegral</scope><name>free</name></member>
      <member refid="structamrex_1_1algoim_1_1ImplicitIntegral_1a298e8a82f1aef3317ffb0c8d5f0f1172" prot="public" virt="non-virtual"><scope>amrex::algoim::ImplicitIntegral</scope><name>ImplicitIntegral</name></member>
      <member refid="structamrex_1_1algoim_1_1ImplicitIntegral_1a298e8a82f1aef3317ffb0c8d5f0f1172" prot="public" virt="non-virtual"><scope>amrex::algoim::ImplicitIntegral</scope><name>ImplicitIntegral</name></member>
      <member refid="structamrex_1_1algoim_1_1ImplicitIntegral_1a07854fea58e09b2b7f36b91fcd1dccf1" prot="public" virt="non-virtual"><scope>amrex::algoim::ImplicitIntegral</scope><name>p</name></member>
      <member refid="structamrex_1_1algoim_1_1ImplicitIntegral_1a149f5f335aa384fea60572300241de10" prot="public" virt="non-virtual"><scope>amrex::algoim::ImplicitIntegral</scope><name>phi</name></member>
      <member refid="structamrex_1_1algoim_1_1ImplicitIntegral_1a4180473d6c56a9b0ef42e36dc879604d" prot="public" virt="non-virtual"><scope>amrex::algoim::ImplicitIntegral</scope><name>prune</name></member>
      <member refid="structamrex_1_1algoim_1_1ImplicitIntegral_1ad7a1d13d438479b184c871b0dec86a66" prot="public" virt="non-virtual"><scope>amrex::algoim::ImplicitIntegral</scope><name>psi</name></member>
      <member refid="structamrex_1_1algoim_1_1ImplicitIntegral_1a9352b5694ad95664dce6d6214668eb05" prot="public" virt="non-virtual"><scope>amrex::algoim::ImplicitIntegral</scope><name>psiCount</name></member>
      <member refid="structamrex_1_1algoim_1_1ImplicitIntegral_1a938bffe03fe5924b754636271767d793" prot="public" virt="non-virtual"><scope>amrex::algoim::ImplicitIntegral</scope><name>tensorProductIntegral</name></member>
      <member refid="structamrex_1_1algoim_1_1ImplicitIntegral_1aa84aea4f19fd97919030c7bc2b2bce52" prot="public" virt="non-virtual"><scope>amrex::algoim::ImplicitIntegral</scope><name>xint</name></member>
      <member refid="structamrex_1_1algoim_1_1ImplicitIntegral_1a0e3b87a075c020bc4e0347b49b41a638" prot="public" virt="non-virtual"><scope>amrex::algoim::ImplicitIntegral</scope><name>xrange</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
