<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classamrex_1_1Box" kind="class" language="C++" prot="public">
    <compoundname>amrex::Box</compoundname>
    <includes refid="AMReX__Box_8H" local="no">AMReX_Box.H</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classamrex_1_1Box_1af5c898c7b3635a504124819032a025fe" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class BoxCommHelper</definition>
        <argsstring></argsstring>
        <name>BoxCommHelper</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="39" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1Box_1adccd37eeac931837d637545e8eba842e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="AMReX__ccse-mpi_8H_1affc17fe964f9f670fb06e09d6134b4ff" kindref="member">MPI_Datatype</ref></type>
        <definition>MPI_Datatype ParallelDescriptor::Mpi_typemap</definition>
        <argsstring>()</argsstring>
        <name>ParallelDescriptor::Mpi_typemap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="38" column="1"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1Box_1afc31b87ed841fb33cc7a5403621abbc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> friend <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE friend AMREX_FORCE_INLINE Dim3 lbound</definition>
        <argsstring>(Box const &amp;box) noexcept</argsstring>
        <name>lbound</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="700" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="1467" bodyend="1476"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1Box_1a031934b6cad9ff387f032bffd6b0dfbb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> friend <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE friend AMREX_FORCE_INLINE Dim3 ubound</definition>
        <argsstring>(Box const &amp;box) noexcept</argsstring>
        <name>ubound</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="701" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="1480" bodyend="1489"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1Box_1a4ae0ca89c9687ad9c1b2e267624a0d71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> friend <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE friend AMREX_FORCE_INLINE Dim3 begin</definition>
        <argsstring>(Box const &amp;box) noexcept</argsstring>
        <name>begin</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="702" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="1493" bodyend="1502"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1Box_1a9b0690c68518d63f9bcfba723610fb91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> friend <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE friend AMREX_FORCE_INLINE Dim3 end</definition>
        <argsstring>(Box const &amp;box) noexcept</argsstring>
        <name>end</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="703" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="1506" bodyend="1515"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1Box_1a3ef34ad1300996b2a366a00d116ca4d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> friend <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE friend AMREX_FORCE_INLINE Dim3 length</definition>
        <argsstring>(Box const &amp;box) noexcept</argsstring>
        <name>length</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="704" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="1519" bodyend="1531"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1Box_1af6132d21295f22c35eae8362d4331585" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> friend <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE friend AMREX_FORCE_INLINE Dim3 max_lbound</definition>
        <argsstring>(Box const &amp;, Box const &amp;) noexcept</argsstring>
        <name>max_lbound</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <defname>b1</defname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <defname>b2</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="705" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="1536" bodyend="1550"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1Box_1a97bd90cd8224ba2d6051426676ac7521" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> friend <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE friend AMREX_FORCE_INLINE Dim3 max_lbound</definition>
        <argsstring>(Box const &amp;, Dim3 const &amp;) noexcept</argsstring>
        <name>max_lbound</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <defname>b1</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <defname>lo</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="706" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="1554" bodyend="1568"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1Box_1aee1778576c9838c081d03faa8f2d4b02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> friend <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE friend AMREX_FORCE_INLINE Dim3 min_ubound</definition>
        <argsstring>(Box const &amp;, Box const &amp;) noexcept</argsstring>
        <name>min_ubound</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <defname>b1</defname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <defname>b2</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="707" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="1573" bodyend="1587"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1Box_1a490c302952ef6aed95e3cd734dd51c5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> friend <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE friend AMREX_FORCE_INLINE Dim3 min_ubound</definition>
        <argsstring>(Box const &amp;, Dim3 const &amp;) noexcept</argsstring>
        <name>min_ubound</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <defname>b1</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <defname>hi</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="708" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="1591" bodyend="1605"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1Box_1aae812272d2d019bfe7d3c5f049f79a0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> friend <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE friend AMREX_FORCE_INLINE Box minBox</definition>
        <argsstring>(Box const &amp;, Box const &amp;, IndexType) noexcept</argsstring>
        <name>minBox</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <defname>b1</defname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <defname>b2</defname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref></type>
          <defname>typ</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="709" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="1609" bodyend="1630"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1Box_1a76606b6a8d3f64f887303eddf2025e28" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>IntVect amrex::Box::smallend</definition>
        <argsstring></argsstring>
        <name>smallend</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="712" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="712" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1Box_1af0f4c5e74fbdddc5f71ceade8ccc05b7" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>IntVect amrex::Box::bigend</definition>
        <argsstring></argsstring>
        <name>bigend</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="713" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="713" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1Box_1a30cb1cd364f96e320bb711365df849e1" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref></type>
        <definition>IndexType amrex::Box::btype</definition>
        <argsstring></argsstring>
        <name>btype</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="714" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="714" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1Box_1aa8aee75df8495f44ccf6d975fe1fec74" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> constexpr</type>
        <definition>AMREX_GPU_HOST_DEVICE constexpr amrex::Box::Box</definition>
        <argsstring>() noexcept</argsstring>
        <name>Box</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="48" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="48" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a02933619cbbe9a6c1ecca2d20d32bf26" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> constexpr</type>
        <definition>AMREX_GPU_HOST_DEVICE constexpr amrex::Box::Box</definition>
        <argsstring>(const IntVect &amp;small, const IntVect &amp;big) noexcept</argsstring>
        <name>Box</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>small</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>big</declname>
        </param>
        <briefdescription>
<para>Construct cell-centered type <ref refid="classamrex_1_1Box" kindref="compound">Box</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="56" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="56" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1abc1d1fa55b928cdbc590a29950240ec3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE amrex::Box::Box</definition>
        <argsstring>(const IntVect &amp;small, const int *vec_len) noexcept</argsstring>
        <name>Box</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>small</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>vec_len</declname>
        </param>
        <briefdescription>
<para>Construct box with specified lengths. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="63" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="63" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1af6ebc047b0220e22c4b83d8634716303" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE amrex::Box::Box</definition>
        <argsstring>(const IntVect &amp;small, const IntVect &amp;big, const IntVect &amp;typ) noexcept</argsstring>
        <name>Box</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>small</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>big</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>typ</declname>
        </param>
        <briefdescription>
<para>Construct <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> with given type. small and big are expected to be consistent with given type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="75" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="75" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a41c7435df1d63dcc9db7555ab8f0f405" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE amrex::Box::Box</definition>
        <argsstring>(const IntVect &amp;small, const IntVect &amp;big, IndexType t) noexcept</argsstring>
        <name>Box</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>small</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>big</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Construct dimension specific Boxes. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="85" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="85" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a70b5efe9b9fd950695344ef3ab899524" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE amrex::Box::Box</definition>
        <argsstring>(Array4&lt; T &gt; const &amp;a) noexcept</argsstring>
        <name>Box</name>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="93" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="93" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a04e076a4688ca383aeaccfcb0bceef60" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE const IntVect&amp; amrex::Box::smallEnd</definition>
        <argsstring>() const &amp;noexcept</argsstring>
        <name>smallEnd</name>
        <briefdescription>
<para>Get the smallend of the box. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="102" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="102" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1ade1c1c0b3691c1fb0b174f01c6e44684" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
        <definition>const IntVect&amp; amrex::Box::smallEnd</definition>
        <argsstring>()&amp;&amp;=delete</argsstring>
        <name>smallEnd</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="103" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a71033afdc717e21489fe903cc688aff8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> int</type>
        <definition>AMREX_GPU_HOST_DEVICE int amrex::Box::smallEnd</definition>
        <argsstring>(int dir) const &amp;noexcept</argsstring>
        <name>smallEnd</name>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Returns the coordinate of the low end in the given direction. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="107" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="107" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1aa2ebf79e721706ee01738c9bb1cc13e7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE const IntVect&amp; amrex::Box::bigEnd</definition>
        <argsstring>() const &amp;noexcept</argsstring>
        <name>bigEnd</name>
        <briefdescription>
<para>Get the bigend. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="111" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="111" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1aad5f3bf1b91e4a0d69d6869f5012b1a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
        <definition>const IntVect&amp; amrex::Box::bigEnd</definition>
        <argsstring>()&amp;&amp;=delete</argsstring>
        <name>bigEnd</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="112" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1adc4d8d7839da0e965d8a563e80abad3e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> int</type>
        <definition>AMREX_GPU_HOST_DEVICE int amrex::Box::bigEnd</definition>
        <argsstring>(int dir) const noexcept</argsstring>
        <name>bigEnd</name>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Returns the coordinate of the high end in the given direction. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="116" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="116" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a23dbfc6bba6b19b28a0d893bb760494c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE IndexType amrex::Box::ixType</definition>
        <argsstring>() const noexcept</argsstring>
        <name>ixType</name>
        <briefdescription>
<para>Returns the indexing type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="120" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="120" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a5bdfff3b6976d487ffe2212a92ffb229" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE IntVect amrex::Box::type</definition>
        <argsstring>() const noexcept</argsstring>
        <name>type</name>
        <briefdescription>
<para>Returns the indexing type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="124" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="124" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1acb525bf88ecde35d0f9060c40ee6e363" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1IndexType_1a4bbe4fdc07aa019c3a4a6839cdafccce" kindref="member">IndexType::CellIndex</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE IndexType::CellIndex amrex::Box::type</definition>
        <argsstring>(int dir) const noexcept</argsstring>
        <name>type</name>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Returns the indexing type in the specified direction. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="128" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="128" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a14c1e4a7eebae64a3e3724fc9c747e1c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE IntVect amrex::Box::size</definition>
        <argsstring>() const noexcept</argsstring>
        <name>size</name>
        <briefdescription>
<para>Return the length of the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="132" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="132" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a6a6733882a425dd6a062cce99c224421" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE IntVect amrex::Box::length</definition>
        <argsstring>() const noexcept</argsstring>
        <name>length</name>
        <briefdescription>
<para>Return the length of the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="141" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="141" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1ad911de50d0c756f2ee1b00d99448b2a9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> int</type>
        <definition>AMREX_GPU_HOST_DEVICE int amrex::Box::length</definition>
        <argsstring>(int dir) const noexcept</argsstring>
        <name>length</name>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Return the length of the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> in given direction. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="150" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="150" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a6f147c0c62906bc0c8cc3f89378de9e2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="namespaceamrex_1a317082290117984ef29e149750e2c7a8" kindref="member">GpuArray</ref>&lt; int, 3 &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE GpuArray&lt;int,3&gt; amrex::Box::length3d</definition>
        <argsstring>() const noexcept</argsstring>
        <name>length3d</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="153" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="153" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1aee44ffec910e1bf6fd904694171bb675" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="namespaceamrex_1a317082290117984ef29e149750e2c7a8" kindref="member">GpuArray</ref>&lt; int, 3 &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE GpuArray&lt;int,3&gt; amrex::Box::loVect3d</definition>
        <argsstring>() const noexcept</argsstring>
        <name>loVect3d</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="164" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="164" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a969a6f205285e27a5145abdd4d7d0f95" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="namespaceamrex_1a317082290117984ef29e149750e2c7a8" kindref="member">GpuArray</ref>&lt; int, 3 &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE GpuArray&lt;int,3&gt; amrex::Box::hiVect3d</definition>
        <argsstring>() const noexcept</argsstring>
        <name>hiVect3d</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="175" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="175" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a8a029c1d95918fd6e6fe0afb141ed415" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> const int *</type>
        <definition>AMREX_GPU_HOST_DEVICE const int* amrex::Box::loVect</definition>
        <argsstring>() const &amp;noexcept</argsstring>
        <name>loVect</name>
        <briefdescription>
<para>Returns a constant pointer the array of low end coordinates. Useful for calls to FORTRAN. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="187" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="187" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1ad69c0f3432a2fb8366038b84e579ea23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> const int *</type>
        <definition>AMREX_GPU_HOST_DEVICE const int* amrex::Box::loVect</definition>
        <argsstring>()&amp;&amp;=delete</argsstring>
        <name>loVect</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="189" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a8d84792ed854e04c97770960290f6f5c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> const int *</type>
        <definition>AMREX_GPU_HOST_DEVICE const int* amrex::Box::hiVect</definition>
        <argsstring>() const &amp;noexcept</argsstring>
        <name>hiVect</name>
        <briefdescription>
<para>Returns a constant pointer the array of high end coordinates. Useful for calls to FORTRAN. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="192" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="192" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a61a33b8b8393690b194bc060b9c89823" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> const int *</type>
        <definition>AMREX_GPU_HOST_DEVICE const int* amrex::Box::hiVect</definition>
        <argsstring>()&amp;&amp;=delete</argsstring>
        <name>hiVect</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="194" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a067d4d3de49fd5a8dfb6d1a9358637e0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> int</type>
        <definition>AMREX_GPU_HOST_DEVICE int amrex::Box::operator[]</definition>
        <argsstring>(Orientation face) const noexcept</argsstring>
        <name>operator[]</name>
        <param>
          <type><ref refid="classamrex_1_1Orientation" kindref="compound">Orientation</ref></type>
          <declname>face</declname>
        </param>
        <briefdescription>
<para>Returns the coordinate normal to given face. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="198" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="198" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a53681fd196cec64f7fad1aef796737d4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE bool amrex::Box::isEmpty</definition>
        <argsstring>() const noexcept</argsstring>
        <name>isEmpty</name>
        <briefdescription>
<para>Checks if it is an empty box. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="205" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="205" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a615de7e44f8ba7f007be244af31b5a97" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE bool amrex::Box::ok</definition>
        <argsstring>() const noexcept</argsstring>
        <name>ok</name>
        <briefdescription>
<para>Checks if it is a proper <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> (including a valid type). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="209" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="209" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a0b71343932dcc55cb16d1b2b95973114" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE bool amrex::Box::contains</definition>
        <argsstring>(const IntVect &amp;p) const noexcept</argsstring>
        <name>contains</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Returns true if argument is contained within <ref refid="classamrex_1_1Box" kindref="compound">Box</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="213" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="213" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a4e31c9d90ee74df3a4e33c09aa7d791d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE bool amrex::Box::contains</definition>
        <argsstring>(const Box &amp;b) const noexcept</argsstring>
        <name>contains</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Returns true if argument is contained within <ref refid="classamrex_1_1Box" kindref="compound">Box</ref>. It is an error if the Boxes have different types. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="219" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="219" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a25bd41fa47e070b9753bfa8bd9a01f06" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE bool amrex::Box::strictly_contains</definition>
        <argsstring>(const IntVect &amp;p) const noexcept</argsstring>
        <name>strictly_contains</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Returns true if argument is strictly contained within <ref refid="classamrex_1_1Box" kindref="compound">Box</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="227" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="227" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a4584981a7d03b4d3fc6fbb8a9621d16c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE bool amrex::Box::strictly_contains</definition>
        <argsstring>(const Box &amp;b) const noexcept</argsstring>
        <name>strictly_contains</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Returns true if argument is strictly contained within <ref refid="classamrex_1_1Box" kindref="compound">Box</ref>. It is an error if the Boxes have different types. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="234" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="234" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1ab057f9bc2a3ef4df689ce28784a72718" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE bool amrex::Box::intersects</definition>
        <argsstring>(const Box &amp;b) const noexcept</argsstring>
        <name>intersects</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Returns true if Boxes have non-null intersections. It is an error if the Boxes have different types. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="244" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="244" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a225f6b397e246c834230768152000ab9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE bool amrex::Box::sameSize</definition>
        <argsstring>(const Box &amp;b) const noexcept</argsstring>
        <name>sameSize</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Returns true is Boxes same size, ie translates of each other,. It is an error if they have different types. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="251" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="251" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a441e67ce90d98317b391c069edf5f910" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE bool amrex::Box::sameType</definition>
        <argsstring>(const Box &amp;b) const noexcept</argsstring>
        <name>sameType</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Returns true if Boxes have same type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="260" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="260" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1ad068873799c158f309e1a3e667c1aa0f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE bool amrex::Box::operator==</definition>
        <argsstring>(const Box &amp;b) const noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Returns true if Boxes are identical (including type). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="264" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="264" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1ad802c8f8bdb41ebaab8a2190f9c83c42" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE bool amrex::Box::operator!=</definition>
        <argsstring>(const Box &amp;b) const noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Returns true if Boxes differ (including type). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="268" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="268" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a050822c0756d001fc47c0c52a8a6d352" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE bool amrex::Box::operator&lt;</definition>
        <argsstring>(const Box &amp;rhs) const noexcept</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="271" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="271" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a1a2d2a88523f582ffd69c6b8653eec5b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE bool amrex::Box::operator&lt;=</definition>
        <argsstring>(const Box &amp;rhs) const noexcept</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="279" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="279" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1af82b10c11fbd7d77e22371f78963d07f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE bool amrex::Box::operator&gt;</definition>
        <argsstring>(const Box &amp;rhs) const noexcept</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="283" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="283" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a36ff44d80242e76fd2657898d55a56e4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE bool amrex::Box::operator&gt;=</definition>
        <argsstring>(const Box &amp;rhs) const noexcept</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="287" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="287" bodyend="289"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a62e60d27acbb5b50cf826534b87510f4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE bool amrex::Box::cellCentered</definition>
        <argsstring>() const noexcept</argsstring>
        <name>cellCentered</name>
        <briefdescription>
<para>Returns true if <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> is cell-centered in all indexing directions. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="293" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="293" bodyend="293"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a3d8fc04f3fa3fb6bb0721aea64cbb373" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> long</type>
        <definition>AMREX_GPU_HOST_DEVICE long amrex::Box::numPts</definition>
        <argsstring>() const noexcept</argsstring>
        <name>numPts</name>
        <briefdescription>
<para>Returns the number of points contained in the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref>, else abort()s if the number cannot be represented in a long. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="300" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="300" bodyend="305"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a9e84312721b00d6e0880ed592cc59ac4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> double</type>
        <definition>AMREX_GPU_HOST_DEVICE double amrex::Box::d_numPts</definition>
        <argsstring>() const noexcept</argsstring>
        <name>d_numPts</name>
        <briefdescription>
<para>Returns the number of points contained in the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref>. This is intended for use only in diagnostic messages. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="312" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="312" bodyend="315"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a7c74889ea67b29832b91f9fd5fc05758" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> long</type>
        <definition>AMREX_GPU_HOST_DEVICE long amrex::Box::volume</definition>
        <argsstring>() const noexcept</argsstring>
        <name>volume</name>
        <briefdescription>
<para>Return the volume, in indexing space, of region enclosed by this <ref refid="classamrex_1_1Box" kindref="compound">Box</ref>. This is identical to <ref refid="classamrex_1_1Box_1a3d8fc04f3fa3fb6bb0721aea64cbb373" kindref="member">numPts()</ref> for CELL centered <ref refid="classamrex_1_1Box" kindref="compound">Box</ref>; otherwise, <ref refid="classamrex_1_1Box_1a3d8fc04f3fa3fb6bb0721aea64cbb373" kindref="member">numPts()</ref> &gt; <ref refid="classamrex_1_1Box_1a7c74889ea67b29832b91f9fd5fc05758" kindref="member">volume()</ref>. <ref refid="namespaceamrex_1aea69993eec3c9ca497cd0e47522b2ec6" kindref="member">Abort()</ref>s if the number cannot be represented in a long. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="324" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="324" bodyend="328"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1ae6e14e48e772090cdeabaf106a537c86" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> int</type>
        <definition>AMREX_GPU_HOST_DEVICE int amrex::Box::longside</definition>
        <argsstring>(int &amp;dir) const noexcept</argsstring>
        <name>longside</name>
        <param>
          <type>int &amp;</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Returns length of longest side. dir is modified to give direction with longest side: 0...SPACEDIM-1. Ignores type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="335" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="335" bodyend="347"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a7b71510567ba3f78fa38bc7035f81151" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> int</type>
        <definition>AMREX_GPU_HOST_DEVICE int amrex::Box::longside</definition>
        <argsstring>() const noexcept</argsstring>
        <name>longside</name>
        <briefdescription>
<para>Returns length of longest side. Ignores type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="351" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="351" bodyend="354"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1ad3cd02e7f3a547acf75923b3a76ee4ea" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> int</type>
        <definition>AMREX_GPU_HOST_DEVICE int amrex::Box::shortside</definition>
        <argsstring>(int &amp;dir) const noexcept</argsstring>
        <name>shortside</name>
        <param>
          <type>int &amp;</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Returns length of shortest side. dir is modified to give direction with shortest side: 0...SPACEDIM-1. Ignores type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="361" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="361" bodyend="373"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a428561922f8f7e96e79b43f4ce80e2a2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> int</type>
        <definition>AMREX_GPU_HOST_DEVICE int amrex::Box::shortside</definition>
        <argsstring>() const noexcept</argsstring>
        <name>shortside</name>
        <briefdescription>
<para>Returns length of shortest side. Ignores type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="377" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="377" bodyend="380"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a943dc985e59edf4da5e8ce44fe2d26ce" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> long</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE long amrex::Box::index</definition>
        <argsstring>(const IntVect &amp;v) const noexcept</argsstring>
        <name>index</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Returns offset of point from smallend; i.e. index(smallend) -&gt; 0, bigend would return <ref refid="classamrex_1_1Box_1a3d8fc04f3fa3fb6bb0721aea64cbb373" kindref="member">numPts()</ref>-1. Is used in accessing <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="388" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="850" bodyend="860"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a03b08da24d92e4ec631621c70053732f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVect amrex::Box::atOffset</definition>
        <argsstring>(long offset) const noexcept</argsstring>
        <name>atOffset</name>
        <param>
          <type>long</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
<para>Given the offset, compute <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="392" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="865" bodyend="875"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a7038917f6e5f2b3bbbea3407df8dcefb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="namespaceamrex_1a317082290117984ef29e149750e2c7a8" kindref="member">GpuArray</ref>&lt; int, 3 &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE GpuArray&lt; int, 3 &gt; amrex::Box::atOffset3d</definition>
        <argsstring>(long offset) const noexcept</argsstring>
        <name>atOffset3d</name>
        <param>
          <type>long</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="395" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="880" bodyend="890"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a5922660f71dc5ac4118424bf2291f027" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE Box&amp; amrex::Box::setSmall</definition>
        <argsstring>(const IntVect &amp;sm) noexcept</argsstring>
        <name>setSmall</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>sm</declname>
        </param>
        <briefdescription>
<para>Redefine the small end of the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="399" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="399" bodyend="399"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1ae607fb311a04d7c30c7abe0ce5ab4586" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE Box&amp; amrex::Box::setSmall</definition>
        <argsstring>(int dir, int sm_index) noexcept</argsstring>
        <name>setSmall</name>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sm_index</declname>
        </param>
        <briefdescription>
<para>Redefine the small end of the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="403" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="403" bodyend="403"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1acb8c130ea6c22e18e4e239320eff1c05" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE Box&amp; amrex::Box::setBig</definition>
        <argsstring>(const IntVect &amp;bg) noexcept</argsstring>
        <name>setBig</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>bg</declname>
        </param>
        <briefdescription>
<para>Redefine the big end of the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="407" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="407" bodyend="407"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a0f80c81cd0d207a2411d82576d1fe733" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE Box&amp; amrex::Box::setBig</definition>
        <argsstring>(int dir, int bg_index) noexcept</argsstring>
        <name>setBig</name>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bg_index</declname>
        </param>
        <briefdescription>
<para>Redefine the big end of the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="411" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="411" bodyend="411"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1aee288fef5b1c6314b82132b17adf1d15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Box &amp; amrex::Box::setRange</definition>
        <argsstring>(int dir, int sm_index, int n_cells=1) noexcept</argsstring>
        <name>setRange</name>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sm_index</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n_cells</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Set the entire range in a given direction, starting at sm_index with length n_cells. NOTE: This will yield an illegal <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> if n_cells &lt;= 0. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="419" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="895" bodyend="902"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a498ed0e94f9ce975f45018cdb770b5de" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE Box&amp; amrex::Box::setType</definition>
        <argsstring>(const IndexType &amp;t) noexcept</argsstring>
        <name>setType</name>
        <param>
          <type>const <ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Set indexing type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="425" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="425" bodyend="425"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1abe35c4589dedd7df76bbcd5937d3b2e1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE Box&amp; amrex::Box::shift</definition>
        <argsstring>(int dir, int nzones) noexcept</argsstring>
        <name>shift</name>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nzones</declname>
        </param>
        <briefdescription>
<para>Shift this <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> nzones indexing positions in coordinate direction dir. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="429" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="429" bodyend="429"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1ab2cad65205f78eb96496261885e65784" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE Box&amp; amrex::Box::shift</definition>
        <argsstring>(const IntVect &amp;iv) noexcept</argsstring>
        <name>shift</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>iv</declname>
        </param>
        <briefdescription>
<para>Equivalent to b.shift(0,iv[0]).shift(1,iv[1]) .... </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="433" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="433" bodyend="433"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a123c1ab97d29fcab0f1f70feed878aa4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE Box &amp; amrex::Box::shiftHalf</definition>
        <argsstring>(int dir, int num_halfs) noexcept</argsstring>
        <name>shiftHalf</name>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_halfs</declname>
        </param>
        <briefdescription>
<para>This member shifts the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> by &quot;half&quot; indicies, thereby converting the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> from type CELL to NODE and visa-versa. b.shiftHalf(0,1) shifts b to the right by 1/2 cells. b.shiftHalf(1,-3) shifts b in the -j direction by 3/2 cells. NOTE: If num_halfs is EVEN the shift is num_halfs/2 full zones and hence will not change the type. This is: b.shifthalf(4) == b.shift(2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="445" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="1017" bodyend="1034"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a8b7e3caae6d1a7a175640d56976ad9fc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE Box &amp; amrex::Box::shiftHalf</definition>
        <argsstring>(const IntVect &amp;iv) noexcept</argsstring>
        <name>shiftHalf</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>iv</declname>
        </param>
        <briefdescription>
<para>Equivalent to b.shiftHalf(0,iv[0]).shiftHalf(1,iv[1]) ... </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="449" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="1039" bodyend="1044"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a5499f2bb3ff92ef3951332fa6b390b73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Box &amp; amrex::Box::convert</definition>
        <argsstring>(IndexType typ) noexcept</argsstring>
        <name>convert</name>
        <param>
          <type><ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref></type>
          <declname>typ</declname>
        </param>
        <briefdescription>
<para>Convert the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> from the current type into the argument type. This may change the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> coordinates: type CELL -&gt; NODE : increase coordinate by one on high end type NODE -&gt; CELL : reduce coordinate by one on high end other type mappings make no change. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="459" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="778" bodyend="789"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1ad3398576f122371f9037f959bffc4113" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Box &amp; amrex::Box::convert</definition>
        <argsstring>(const IntVect &amp;typ) noexcept</argsstring>
        <name>convert</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>typ</declname>
        </param>
        <briefdescription>
<para>Convert the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> from the current type into the argument type. This may change the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> coordinates: type CELL -&gt; NODE : increase coordinate by one on high end type NODE -&gt; CELL : reduce coordinate by one on high end other type mappings make no change. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="469" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="766" bodyend="773"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a03f85bbf6bb509deb7614715d02856d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Box &amp; amrex::Box::surroundingNodes</definition>
        <argsstring>() noexcept</argsstring>
        <name>surroundingNodes</name>
        <briefdescription>
<para>Convert to NODE type in all directions. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="473" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="810" bodyend="817"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a13102ca00b84729331e3344729baa84b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Box &amp; amrex::Box::surroundingNodes</definition>
        <argsstring>(int dir) noexcept</argsstring>
        <name>surroundingNodes</name>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Convert to NODE type in given direction. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="477" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="794" bodyend="805"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1ae17168bdeb2aab35fdffc69ac0e21bce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Box &amp; amrex::Box::enclosedCells</definition>
        <argsstring>() noexcept</argsstring>
        <name>enclosedCells</name>
        <briefdescription>
<para>Convert to CELL type in all directions. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="481" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="838" bodyend="845"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a3a2fa1570beab3cd64d2d7c8f7902458" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Box &amp; amrex::Box::enclosedCells</definition>
        <argsstring>(int dir) noexcept</argsstring>
        <name>enclosedCells</name>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Convert to CELL type in given direction. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="485" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="822" bodyend="833"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a92348b39ebfce7d1145fbff73fd1fe9c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE Box amrex::Box::operator&amp;</definition>
        <argsstring>(const Box &amp;rhs) const noexcept</argsstring>
        <name>operator&amp;</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Return <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> that is intersection of this <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> and argument. The Boxes MUST be of same type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="492" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="492" bodyend="492"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a40afcdbddc1830e7c766360053eddf4d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE Box&amp; amrex::Box::operator&amp;=</definition>
        <argsstring>(const Box &amp;rhs) noexcept</argsstring>
        <name>operator&amp;=</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Intersect this <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> with its argument. The Boxes MUST be of the same type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="496" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="496" bodyend="502"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a698cc360dd03ab84f3ed67a0f13b3706" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Box::linearOut</definition>
        <argsstring>(void *a_buffer) const noexcept</argsstring>
        <name>linearOut</name>
        <param>
          <type>void *</type>
          <declname>a_buffer</declname>
        </param>
        <briefdescription>
<para>for serialization </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="512" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="906" bodyend="915"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1ad46a8b5fd7dcbe4a0026080eedd667d5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Box::linearIn</definition>
        <argsstring>(void *a_buffer) noexcept</argsstring>
        <name>linearIn</name>
        <param>
          <type>void *</type>
          <declname>a_buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="513" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="919" bodyend="930"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a17adc8dab1cd6ad93795fb9270a40d12" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE Box&amp; amrex::Box::minBox</definition>
        <argsstring>(const Box &amp;b) noexcept</argsstring>
        <name>minBox</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Modify <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> to that of the minimum <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> containing both the original <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> and the argument. Both Boxes must have identical type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="521" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="521" bodyend="527"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a327bb4598dab3c63b894d5c4b51252f8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE Box&amp; amrex::Box::operator+=</definition>
        <argsstring>(const IntVect &amp;v) noexcept</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Shift <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> (relative) by given <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="531" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="531" bodyend="531"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a9ccd828912f9f1817979049905365aeb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE Box amrex::Box::operator+</definition>
        <argsstring>(const IntVect &amp;v) const noexcept</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Shift <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> (relative) by given <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="535" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="535" bodyend="535"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1acf3ec57947d6ab6516b1c1952323ad1d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE Box&amp; amrex::Box::operator-=</definition>
        <argsstring>(const IntVect &amp;v) noexcept</argsstring>
        <name>operator-=</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Shift <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> (relative) by given <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="539" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="539" bodyend="539"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a2af14c8b3f317a0557debca98cd38ab7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE Box amrex::Box::operator-</definition>
        <argsstring>(const IntVect &amp;v) const noexcept</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Shift <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> (relative) by given <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="543" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="543" bodyend="543"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1af3a6ade5162dd1ba7ef55798d03a335c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE Box amrex::Box::chop</definition>
        <argsstring>(int dir, int chop_pnt) noexcept</argsstring>
        <name>chop</name>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>int</type>
          <declname>chop_pnt</declname>
        </param>
        <briefdescription>
<para>Chop the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> at the chop_pnt in the dir direction returns one <ref refid="classamrex_1_1Box" kindref="compound">Box</ref>, modifies the object <ref refid="classamrex_1_1Box" kindref="compound">Box</ref>. The union of the two is the original <ref refid="classamrex_1_1Box" kindref="compound">Box</ref>. The modified <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> is the low end, the returned <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> is the high end. If type(dir) = CELL, the Boxes are disjoint with the chop_pnt included in the high end (new <ref refid="classamrex_1_1Box" kindref="compound">Box</ref>). It is an ERROR if chop_pnt is the low end of the orig <ref refid="classamrex_1_1Box" kindref="compound">Box</ref>. If type(dir) = NODE, the chop_pnt is included in both Boxes but is the only point in common. It is also an error if the chop_pnt is an end node of the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="558" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="981" bodyend="1012"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1ab6232053a39e1b010d0d9a1b269f53ff" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE Box&amp; amrex::Box::grow</definition>
        <argsstring>(int i) noexcept</argsstring>
        <name>grow</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="565" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="565" bodyend="565"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a3fdb04dde4cd055d23b119517ac8cfda" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE Box&amp; amrex::Box::grow</definition>
        <argsstring>(const IntVect &amp;v) noexcept</argsstring>
        <name>grow</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Grow <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> in each direction by specified amount. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="569" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="569" bodyend="569"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a38e44eeb68005684e19129e9afba625d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE Box&amp; amrex::Box::grow</definition>
        <argsstring>(int idir, int n_cell) noexcept</argsstring>
        <name>grow</name>
        <param>
          <type>int</type>
          <declname>idir</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n_cell</declname>
        </param>
        <briefdescription>
<para>Grow the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> on the low and high end by n_cell cells in direction idir. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="576" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="576" bodyend="576"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1aecfc9a9a6b201c8f72e613d95e037c82" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE Box&amp; amrex::Box::growLo</definition>
        <argsstring>(int idir, int n_cell=1) noexcept</argsstring>
        <name>growLo</name>
        <param>
          <type>int</type>
          <declname>idir</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n_cell</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Grow the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> on the low end by n_cell cells in direction idir. NOTE: n_cell negative shrinks the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> by that number of cells. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="583" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="583" bodyend="583"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a8df6b1c8d72fc01578219c1591d7418d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE Box&amp; amrex::Box::growHi</definition>
        <argsstring>(int idir, int n_cell=1) noexcept</argsstring>
        <name>growHi</name>
        <param>
          <type>int</type>
          <declname>idir</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n_cell</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Grow the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> on the high end by n_cell cells in direction idir. NOTE: n_cell negative shrinks the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> by that number of cells. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="591" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="591" bodyend="591"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a0c6fc5720fd230d1406111a95e55bc22" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE Box&amp; amrex::Box::grow</definition>
        <argsstring>(Orientation face, int n_cell=1) noexcept</argsstring>
        <name>grow</name>
        <param>
          <type><ref refid="classamrex_1_1Orientation" kindref="compound">Orientation</ref></type>
          <declname>face</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n_cell</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Grow in the direction of the given face. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="595" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="595" bodyend="602"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a96d3517d1204e98b9bd2fab3b99b4d95" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE Box&amp; amrex::Box::refine</definition>
        <argsstring>(int ref_ratio) noexcept</argsstring>
        <name>refine</name>
        <param>
          <type>int</type>
          <declname>ref_ratio</declname>
        </param>
        <briefdescription>
<para>Refine <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> by given (positive) refinement ratio. NOTE: if type(dir) = CELL centered: lo &lt;- lo*ratio and hi &lt;- (hi+1)*ratio - 1. NOTE: if type(dir) = NODE centered: lo &lt;- lo*ratio and hi &lt;- hi*ratio. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="612" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="612" bodyend="614"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a3b2f16add5c730b7da66cdb7fc8d85d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Box &amp; amrex::Box::refine</definition>
        <argsstring>(const IntVect &amp;ref_ratio) noexcept</argsstring>
        <name>refine</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ref_ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="624" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="720" bodyend="731"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a897f7f0ada1479ce3786259b6db62e9c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE Box&amp; amrex::Box::coarsen</definition>
        <argsstring>(int ref_ratio) noexcept</argsstring>
        <name>coarsen</name>
        <param>
          <type>int</type>
          <declname>ref_ratio</declname>
        </param>
        <briefdescription>
<para>Coarsen <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> by given (positive) refinement ratio. NOTE: if type(dir) = CELL centered: lo &lt;- lo/ratio and hi &lt;- hi/ratio. NOTE: if type(dir) = NODE centered: lo &lt;- lo/ratio and hi &lt;- hi/ratio + ((hiratio)==0 ? 0 : 1). That is, refinement of coarsened <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> must contain the original <ref refid="classamrex_1_1Box" kindref="compound">Box</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="636" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="636" bodyend="638"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a53d83ec5f84f2ce300c4f4d54a3dd020" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Box &amp; amrex::Box::coarsen</definition>
        <argsstring>(const IntVect &amp;ref_ratio) noexcept</argsstring>
        <name>coarsen</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ref_ratio</declname>
        </param>
        <briefdescription>
<para>Coarsen <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> by given (positive) refinement ratio. NOTE: if type(dir) = CELL centered: lo &lt;- lo/ratio and hi &lt;- hi/ratio. NOTE: if type(dir) = NODE centered: lo &lt;- lo/ratio and hi &lt;- hi/ratio + ((hiratio)==0 ? 0 : 1). That is, refinement of coarsened <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> must contain the original <ref refid="classamrex_1_1Box" kindref="compound">Box</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="650" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="736" bodyend="761"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1ae1d96674d204c3f81e931cbbd4d9c1aa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::Box::next</definition>
        <argsstring>(IntVect &amp;) const noexcept</argsstring>
        <name>next</name>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <defname>p</defname>
        </param>
        <briefdescription>
<para>Step through the rectangle. It is a runtime error to give a point not inside rectangle. Iteration may not be efficient. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="657" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="935" bodyend="955"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1afd87b7a11b5e3c17d51a21a4f9703a47" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE bool amrex::Box::isSquare</definition>
        <argsstring>() const noexcept</argsstring>
        <name>isSquare</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="670" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="960" bodyend="970"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a070f165f75c13a62698801be7dc96ae8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE bool amrex::Box::coarsenable</definition>
        <argsstring>(int refrat, int min_width=1) const noexcept</argsstring>
        <name>coarsenable</name>
        <param>
          <type>int</type>
          <declname>refrat</declname>
        </param>
        <param>
          <type>int</type>
          <declname>min_width</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="673" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="673" bodyend="675"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1aa415d612aa70bf4a6a2189a477732f3f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE bool amrex::Box::coarsenable</definition>
        <argsstring>(const IntVect &amp;refrat, int min_width=1) const noexcept</argsstring>
        <name>coarsenable</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>refrat</declname>
        </param>
        <param>
          <type>int</type>
          <declname>min_width</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="678" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="678" bodyend="688"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a3a0dbad72cb07371f6600d70ffb6d4cf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::Box::normalize</definition>
        <argsstring>() noexcept</argsstring>
        <name>normalize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="691" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="691" bodyend="698"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classamrex_1_1Box_1a06ad8e4380d13f4d033fc767a18b37ad" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>static size_t amrex::Box::linearSize</definition>
        <argsstring>() noexcept</argsstring>
        <name>linearSize</name>
        <briefdescription>
<para>for serialization </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="505" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="505" bodyend="509"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a706adbfbd33e0269b3c2688ba5b36959" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>static AMREX_GPU_HOST_DEVICE Box amrex::Box::TheUnitBox</definition>
        <argsstring>() noexcept</argsstring>
        <name>TheUnitBox</name>
        <briefdescription>
<para>This static member function returns a constant reference to an object of type <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> representing the unit box in AMREX_SPACEDIM-dimensional space. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="665" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="665" bodyend="667"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A Rectangular Domain on an Integer Lattice. </para>    </briefdescription>
    <detaileddescription>
<para>A <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> is an abstraction for defining discrete regions of SPACEDIM indexing space. Boxes have an <ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref>, which defines <ref refid="classamrex_1_1IndexType_1a4bbe4fdc07aa019c3a4a6839cdafcccea287ace89f7ffd266daab1798b3d48aa1" kindref="member">IndexType::CELL</ref> or <ref refid="classamrex_1_1IndexType_1a4bbe4fdc07aa019c3a4a6839cdafcccea410f04417a9413c9d3d862e84300eb05" kindref="member">IndexType::NODE</ref> based points for each direction and a low and high INTVECT which defines the lower and upper corners of the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref>. Boxes can exist in positive and negative indexing space.</para><para><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> is a dimension dependent class, so SPACEDIM must be defined as either 1, 2, or 3 when compiling. </para>    </detaileddescription>
    <collaborationgraph>
      <node id="770">
        <label>amrex::IntVect</label>
        <link refid="classamrex_1_1IntVect"/>
        <childnode refid="770" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
      </node>
      <node id="769">
        <label>amrex::Box</label>
        <link refid="classamrex_1_1Box"/>
        <childnode refid="770" relation="usage">
          <edgelabel>bigend</edgelabel>
          <edgelabel>smallend</edgelabel>
        </childnode>
        <childnode refid="771" relation="usage">
          <edgelabel>btype</edgelabel>
        </childnode>
      </node>
      <node id="771">
        <label>amrex::IndexType</label>
        <link refid="classamrex_1_1IndexType"/>
      </node>
    </collaborationgraph>
    <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="37" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="36" bodyend="715"/>
    <listofallmembers>
      <member refid="classamrex_1_1Box_1a03b08da24d92e4ec631621c70053732f" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>atOffset</name></member>
      <member refid="classamrex_1_1Box_1a7038917f6e5f2b3bbbea3407df8dcefb" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>atOffset3d</name></member>
      <member refid="classamrex_1_1Box_1a4ae0ca89c9687ad9c1b2e267624a0d71" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>begin</name></member>
      <member refid="classamrex_1_1Box_1aa2ebf79e721706ee01738c9bb1cc13e7" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>bigEnd</name></member>
      <member refid="classamrex_1_1Box_1aad5f3bf1b91e4a0d69d6869f5012b1a8" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>bigEnd</name></member>
      <member refid="classamrex_1_1Box_1adc4d8d7839da0e965d8a563e80abad3e" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>bigEnd</name></member>
      <member refid="classamrex_1_1Box_1af0f4c5e74fbdddc5f71ceade8ccc05b7" prot="private" virt="non-virtual"><scope>amrex::Box</scope><name>bigend</name></member>
      <member refid="classamrex_1_1Box_1aa8aee75df8495f44ccf6d975fe1fec74" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>Box</name></member>
      <member refid="classamrex_1_1Box_1a02933619cbbe9a6c1ecca2d20d32bf26" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>Box</name></member>
      <member refid="classamrex_1_1Box_1abc1d1fa55b928cdbc590a29950240ec3" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>Box</name></member>
      <member refid="classamrex_1_1Box_1af6ebc047b0220e22c4b83d8634716303" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>Box</name></member>
      <member refid="classamrex_1_1Box_1a41c7435df1d63dcc9db7555ab8f0f405" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>Box</name></member>
      <member refid="classamrex_1_1Box_1a70b5efe9b9fd950695344ef3ab899524" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>Box</name></member>
      <member refid="classamrex_1_1Box_1af5c898c7b3635a504124819032a025fe" prot="private" virt="non-virtual"><scope>amrex::Box</scope><name>BoxCommHelper</name></member>
      <member refid="classamrex_1_1Box_1a30cb1cd364f96e320bb711365df849e1" prot="private" virt="non-virtual"><scope>amrex::Box</scope><name>btype</name></member>
      <member refid="classamrex_1_1Box_1a62e60d27acbb5b50cf826534b87510f4" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>cellCentered</name></member>
      <member refid="classamrex_1_1Box_1af3a6ade5162dd1ba7ef55798d03a335c" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>chop</name></member>
      <member refid="classamrex_1_1Box_1a897f7f0ada1479ce3786259b6db62e9c" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>coarsen</name></member>
      <member refid="classamrex_1_1Box_1a53d83ec5f84f2ce300c4f4d54a3dd020" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>coarsen</name></member>
      <member refid="classamrex_1_1Box_1a070f165f75c13a62698801be7dc96ae8" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>coarsenable</name></member>
      <member refid="classamrex_1_1Box_1aa415d612aa70bf4a6a2189a477732f3f" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>coarsenable</name></member>
      <member refid="classamrex_1_1Box_1a0b71343932dcc55cb16d1b2b95973114" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>contains</name></member>
      <member refid="classamrex_1_1Box_1a4e31c9d90ee74df3a4e33c09aa7d791d" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>contains</name></member>
      <member refid="classamrex_1_1Box_1a5499f2bb3ff92ef3951332fa6b390b73" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>convert</name></member>
      <member refid="classamrex_1_1Box_1ad3398576f122371f9037f959bffc4113" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>convert</name></member>
      <member refid="classamrex_1_1Box_1a9e84312721b00d6e0880ed592cc59ac4" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>d_numPts</name></member>
      <member refid="classamrex_1_1Box_1ae17168bdeb2aab35fdffc69ac0e21bce" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>enclosedCells</name></member>
      <member refid="classamrex_1_1Box_1a3a2fa1570beab3cd64d2d7c8f7902458" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>enclosedCells</name></member>
      <member refid="classamrex_1_1Box_1a9b0690c68518d63f9bcfba723610fb91" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>end</name></member>
      <member refid="classamrex_1_1Box_1ab6232053a39e1b010d0d9a1b269f53ff" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>grow</name></member>
      <member refid="classamrex_1_1Box_1a3fdb04dde4cd055d23b119517ac8cfda" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>grow</name></member>
      <member refid="classamrex_1_1Box_1a38e44eeb68005684e19129e9afba625d" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>grow</name></member>
      <member refid="classamrex_1_1Box_1a0c6fc5720fd230d1406111a95e55bc22" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>grow</name></member>
      <member refid="classamrex_1_1Box_1a8df6b1c8d72fc01578219c1591d7418d" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>growHi</name></member>
      <member refid="classamrex_1_1Box_1aecfc9a9a6b201c8f72e613d95e037c82" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>growLo</name></member>
      <member refid="classamrex_1_1Box_1a8d84792ed854e04c97770960290f6f5c" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>hiVect</name></member>
      <member refid="classamrex_1_1Box_1a61a33b8b8393690b194bc060b9c89823" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>hiVect</name></member>
      <member refid="classamrex_1_1Box_1a969a6f205285e27a5145abdd4d7d0f95" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>hiVect3d</name></member>
      <member refid="classamrex_1_1Box_1a943dc985e59edf4da5e8ce44fe2d26ce" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>index</name></member>
      <member refid="classamrex_1_1Box_1ab057f9bc2a3ef4df689ce28784a72718" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>intersects</name></member>
      <member refid="classamrex_1_1Box_1a53681fd196cec64f7fad1aef796737d4" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>isEmpty</name></member>
      <member refid="classamrex_1_1Box_1afd87b7a11b5e3c17d51a21a4f9703a47" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>isSquare</name></member>
      <member refid="classamrex_1_1Box_1a23dbfc6bba6b19b28a0d893bb760494c" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>ixType</name></member>
      <member refid="classamrex_1_1Box_1afc31b87ed841fb33cc7a5403621abbc0" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>lbound</name></member>
      <member refid="classamrex_1_1Box_1a6a6733882a425dd6a062cce99c224421" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>length</name></member>
      <member refid="classamrex_1_1Box_1ad911de50d0c756f2ee1b00d99448b2a9" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>length</name></member>
      <member refid="classamrex_1_1Box_1a3ef34ad1300996b2a366a00d116ca4d2" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>length</name></member>
      <member refid="classamrex_1_1Box_1a6f147c0c62906bc0c8cc3f89378de9e2" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>length3d</name></member>
      <member refid="classamrex_1_1Box_1ad46a8b5fd7dcbe4a0026080eedd667d5" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>linearIn</name></member>
      <member refid="classamrex_1_1Box_1a698cc360dd03ab84f3ed67a0f13b3706" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>linearOut</name></member>
      <member refid="classamrex_1_1Box_1a06ad8e4380d13f4d033fc767a18b37ad" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>linearSize</name></member>
      <member refid="classamrex_1_1Box_1ae6e14e48e772090cdeabaf106a537c86" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>longside</name></member>
      <member refid="classamrex_1_1Box_1a7b71510567ba3f78fa38bc7035f81151" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>longside</name></member>
      <member refid="classamrex_1_1Box_1a8a029c1d95918fd6e6fe0afb141ed415" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>loVect</name></member>
      <member refid="classamrex_1_1Box_1ad69c0f3432a2fb8366038b84e579ea23" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>loVect</name></member>
      <member refid="classamrex_1_1Box_1aee44ffec910e1bf6fd904694171bb675" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>loVect3d</name></member>
      <member refid="classamrex_1_1Box_1af6132d21295f22c35eae8362d4331585" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>max_lbound</name></member>
      <member refid="classamrex_1_1Box_1a97bd90cd8224ba2d6051426676ac7521" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>max_lbound</name></member>
      <member refid="classamrex_1_1Box_1aee1778576c9838c081d03faa8f2d4b02" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>min_ubound</name></member>
      <member refid="classamrex_1_1Box_1a490c302952ef6aed95e3cd734dd51c5f" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>min_ubound</name></member>
      <member refid="classamrex_1_1Box_1a17adc8dab1cd6ad93795fb9270a40d12" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>minBox</name></member>
      <member refid="classamrex_1_1Box_1aae812272d2d019bfe7d3c5f049f79a0a" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>minBox</name></member>
      <member refid="classamrex_1_1Box_1ae1d96674d204c3f81e931cbbd4d9c1aa" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>next</name></member>
      <member refid="classamrex_1_1Box_1a3a0dbad72cb07371f6600d70ffb6d4cf" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>normalize</name></member>
      <member refid="classamrex_1_1Box_1a3d8fc04f3fa3fb6bb0721aea64cbb373" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>numPts</name></member>
      <member refid="classamrex_1_1Box_1a615de7e44f8ba7f007be244af31b5a97" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>ok</name></member>
      <member refid="classamrex_1_1Box_1ad802c8f8bdb41ebaab8a2190f9c83c42" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>operator!=</name></member>
      <member refid="classamrex_1_1Box_1a92348b39ebfce7d1145fbff73fd1fe9c" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>operator&amp;</name></member>
      <member refid="classamrex_1_1Box_1a40afcdbddc1830e7c766360053eddf4d" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>operator&amp;=</name></member>
      <member refid="classamrex_1_1Box_1a9ccd828912f9f1817979049905365aeb" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>operator+</name></member>
      <member refid="classamrex_1_1Box_1a327bb4598dab3c63b894d5c4b51252f8" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>operator+=</name></member>
      <member refid="classamrex_1_1Box_1a2af14c8b3f317a0557debca98cd38ab7" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>operator-</name></member>
      <member refid="classamrex_1_1Box_1acf3ec57947d6ab6516b1c1952323ad1d" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>operator-=</name></member>
      <member refid="classamrex_1_1Box_1a050822c0756d001fc47c0c52a8a6d352" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>operator&lt;</name></member>
      <member refid="classamrex_1_1Box_1a1a2d2a88523f582ffd69c6b8653eec5b" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>operator&lt;=</name></member>
      <member refid="classamrex_1_1Box_1ad068873799c158f309e1a3e667c1aa0f" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>operator==</name></member>
      <member refid="classamrex_1_1Box_1af82b10c11fbd7d77e22371f78963d07f" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>operator&gt;</name></member>
      <member refid="classamrex_1_1Box_1a36ff44d80242e76fd2657898d55a56e4" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>operator&gt;=</name></member>
      <member refid="classamrex_1_1Box_1a067d4d3de49fd5a8dfb6d1a9358637e0" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1Box_1adccd37eeac931837d637545e8eba842e" prot="private" virt="non-virtual"><scope>amrex::Box</scope><name>ParallelDescriptor::Mpi_typemap</name></member>
      <member refid="classamrex_1_1Box_1a96d3517d1204e98b9bd2fab3b99b4d95" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>refine</name></member>
      <member refid="classamrex_1_1Box_1a3b2f16add5c730b7da66cdb7fc8d85d3" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>refine</name></member>
      <member refid="classamrex_1_1Box_1a225f6b397e246c834230768152000ab9" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>sameSize</name></member>
      <member refid="classamrex_1_1Box_1a441e67ce90d98317b391c069edf5f910" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>sameType</name></member>
      <member refid="classamrex_1_1Box_1acb8c130ea6c22e18e4e239320eff1c05" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>setBig</name></member>
      <member refid="classamrex_1_1Box_1a0f80c81cd0d207a2411d82576d1fe733" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>setBig</name></member>
      <member refid="classamrex_1_1Box_1aee288fef5b1c6314b82132b17adf1d15" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>setRange</name></member>
      <member refid="classamrex_1_1Box_1a5922660f71dc5ac4118424bf2291f027" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>setSmall</name></member>
      <member refid="classamrex_1_1Box_1ae607fb311a04d7c30c7abe0ce5ab4586" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>setSmall</name></member>
      <member refid="classamrex_1_1Box_1a498ed0e94f9ce975f45018cdb770b5de" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>setType</name></member>
      <member refid="classamrex_1_1Box_1abe35c4589dedd7df76bbcd5937d3b2e1" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>shift</name></member>
      <member refid="classamrex_1_1Box_1ab2cad65205f78eb96496261885e65784" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>shift</name></member>
      <member refid="classamrex_1_1Box_1a123c1ab97d29fcab0f1f70feed878aa4" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>shiftHalf</name></member>
      <member refid="classamrex_1_1Box_1a8b7e3caae6d1a7a175640d56976ad9fc" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>shiftHalf</name></member>
      <member refid="classamrex_1_1Box_1ad3cd02e7f3a547acf75923b3a76ee4ea" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>shortside</name></member>
      <member refid="classamrex_1_1Box_1a428561922f8f7e96e79b43f4ce80e2a2" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>shortside</name></member>
      <member refid="classamrex_1_1Box_1a14c1e4a7eebae64a3e3724fc9c747e1c" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>size</name></member>
      <member refid="classamrex_1_1Box_1a04e076a4688ca383aeaccfcb0bceef60" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>smallEnd</name></member>
      <member refid="classamrex_1_1Box_1ade1c1c0b3691c1fb0b174f01c6e44684" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>smallEnd</name></member>
      <member refid="classamrex_1_1Box_1a71033afdc717e21489fe903cc688aff8" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>smallEnd</name></member>
      <member refid="classamrex_1_1Box_1a76606b6a8d3f64f887303eddf2025e28" prot="private" virt="non-virtual"><scope>amrex::Box</scope><name>smallend</name></member>
      <member refid="classamrex_1_1Box_1a25bd41fa47e070b9753bfa8bd9a01f06" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>strictly_contains</name></member>
      <member refid="classamrex_1_1Box_1a4584981a7d03b4d3fc6fbb8a9621d16c" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>strictly_contains</name></member>
      <member refid="classamrex_1_1Box_1a03f85bbf6bb509deb7614715d02856d6" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>surroundingNodes</name></member>
      <member refid="classamrex_1_1Box_1a13102ca00b84729331e3344729baa84b" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>surroundingNodes</name></member>
      <member refid="classamrex_1_1Box_1a706adbfbd33e0269b3c2688ba5b36959" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>TheUnitBox</name></member>
      <member refid="classamrex_1_1Box_1a5bdfff3b6976d487ffe2212a92ffb229" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>type</name></member>
      <member refid="classamrex_1_1Box_1acb525bf88ecde35d0f9060c40ee6e363" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>type</name></member>
      <member refid="classamrex_1_1Box_1a031934b6cad9ff387f032bffd6b0dfbb" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>ubound</name></member>
      <member refid="classamrex_1_1Box_1a7c74889ea67b29832b91f9fd5fc05758" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>volume</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
