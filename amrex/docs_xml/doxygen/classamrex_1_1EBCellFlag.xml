<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classamrex_1_1EBCellFlag" kind="class" language="C++" prot="public">
    <compoundname>amrex::EBCellFlag</compoundname>
    <includes refid="AMReX__EBCellFlag_8H" local="no">AMReX_EBCellFlag.H</includes>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classamrex_1_1EBCellFlag_1ab6a98c38286ed5ba0f71fc4a758ff845" prot="private" static="yes" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t amrex::EBCellFlag::one_lower_mask</definition>
        <argsstring></argsstring>
        <name>one_lower_mask</name>
        <initializer>=  0x1f</initializer>
        <briefdescription>
<para>masks for lowest 5 bits (i.e., bit number 0-4) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" line="186" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" bodystart="186" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1EBCellFlag_1a202cad7d2c40d09b3c3efbdfdf94115d" prot="private" static="yes" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t amrex::EBCellFlag::zero_lower_mask</definition>
        <argsstring></argsstring>
        <name>zero_lower_mask</name>
        <initializer>= ~0x1f</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" line="187" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" bodystart="187" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1EBCellFlag_1a3d96cabc11327fe2db480268931dcba4" prot="private" static="yes" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t amrex::EBCellFlag::one_type_mask</definition>
        <argsstring></argsstring>
        <name>one_type_mask</name>
        <initializer>=  0x3</initializer>
        <briefdescription>
<para>masks lowest 2 bits (i.e., bit number 0-1) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" line="190" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" bodystart="190" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1EBCellFlag_1ac8267e4520db8eab9e586ba8de116d2b" prot="private" static="yes" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t amrex::EBCellFlag::zero_type_mask</definition>
        <argsstring></argsstring>
        <name>zero_type_mask</name>
        <initializer>= ~0x3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" line="191" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" bodystart="191" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1EBCellFlag_1a4a42591e65666aa5935d1e56fc08ec4d" prot="private" static="yes" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t amrex::EBCellFlag::one_numvofs_mask</definition>
        <argsstring></argsstring>
        <name>one_numvofs_mask</name>
        <initializer>=  0x1c</initializer>
        <briefdescription>
<para>masks for bit number 2-4 </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" line="194" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" bodystart="194" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1EBCellFlag_1a684214fb8524798b231301cf52aeac95" prot="private" static="yes" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t amrex::EBCellFlag::zero_numvofs_mask</definition>
        <argsstring></argsstring>
        <name>zero_numvofs_mask</name>
        <initializer>= ~0x1c</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" line="195" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" bodystart="195" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1EBCellFlag_1a98e740b42531b93d0abef721579b39be" prot="private" static="yes" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t amrex::EBCellFlag::regular_bits</definition>
        <argsstring></argsstring>
        <name>regular_bits</name>
        <initializer>=  0x0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>these represent cell types note that single-valued means single-value cut cell </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" line="199" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" bodystart="199" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1EBCellFlag_1a54cf88910c4f2884f367348b554c6d92" prot="private" static="yes" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t amrex::EBCellFlag::single_vauled_bits</definition>
        <argsstring></argsstring>
        <name>single_vauled_bits</name>
        <initializer>=  0x1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" line="200" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" bodystart="200" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1EBCellFlag_1a8fe56028eeb58ef0718c19c6855f6bcb" prot="private" static="yes" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t amrex::EBCellFlag::multi_valued_bits</definition>
        <argsstring></argsstring>
        <name>multi_valued_bits</name>
        <initializer>=  0x2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" line="201" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" bodystart="201" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1EBCellFlag_1ae215f9034bbe23e831586bc395de5477" prot="private" static="yes" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t amrex::EBCellFlag::covered_bits</definition>
        <argsstring></argsstring>
        <name>covered_bits</name>
        <initializer>=  0x3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" line="202" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" bodystart="202" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1EBCellFlag_1a7ee55a07343cf958411c2400a2925a9a" prot="private" static="yes" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t amrex::EBCellFlag::single_vof_bits</definition>
        <argsstring></argsstring>
        <name>single_vof_bits</name>
        <initializer>=  0x4</initializer>
        <briefdescription>
<para>this represent single vof (regular is considered as single vof too) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" line="205" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" bodystart="205" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1EBCellFlag_1a9978159e62e9a5f1a9ba4a55019dc7dc" prot="private" static="yes" mutable="no">
        <type>constexpr int</type>
        <definition>constexpr int amrex::EBCellFlag::w_lower_mask</definition>
        <argsstring></argsstring>
        <name>w_lower_mask</name>
        <initializer>= 5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>There are 32 bits. The lowest 2 bits are used for cell type: regular, single-valued, multi-valued, and covered. The next 3 bits are for the number of vofs. The rest 27 bits are used for connectivity with neighbors. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" line="212" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" bodystart="212" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1EBCellFlag_1a68904d39b391c9345ebbb57ca42df263" prot="private" static="yes" mutable="no">
        <type>constexpr int</type>
        <definition>constexpr int amrex::EBCellFlag::w_type</definition>
        <argsstring></argsstring>
        <name>w_type</name>
        <initializer>= 2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" line="213" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" bodystart="213" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1EBCellFlag_1a0a1397794bc5591a597619e3632ad878" prot="private" static="yes" mutable="no">
        <type>constexpr int</type>
        <definition>constexpr int amrex::EBCellFlag::w_numvofs</definition>
        <argsstring></argsstring>
        <name>w_numvofs</name>
        <initializer>= 3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" line="214" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" bodystart="214" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1EBCellFlag_1a25435966072b5955673109be97617f89" prot="private" static="yes" mutable="no">
        <type>constexpr int</type>
        <definition>constexpr int amrex::EBCellFlag::pos_numvofs</definition>
        <argsstring></argsstring>
        <name>pos_numvofs</name>
        <initializer>= 2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" line="215" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" bodystart="215" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1EBCellFlag_1a92f709a077a386fa2d23fb8b3639fe06" prot="private" static="yes" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t amrex::EBCellFlag::default_value</definition>
        <argsstring></argsstring>
        <name>default_value</name>
        <initializer>= 0x7fc004</initializer>
        <briefdescription>
<para>regular connected with all neighbors </para>        </briefdescription>
        <detaileddescription>
<para>zero out &quot;3d&quot; neighbors </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" line="233" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" bodystart="233" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1EBCellFlag_1a41bd6408895885d67358df6a58cdc867" prot="private" static="yes" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t amrex::EBCellFlag::covered_value</definition>
        <argsstring></argsstring>
        <name>covered_value</name>
        <initializer>= 0x40003</initializer>
        <briefdescription>
<para>zero out all neighbors </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" line="236" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" bodystart="236" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1EBCellFlag_1ab630a116c4a01a64f68d4a8a1592360f" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t amrex::EBCellFlag::flag</definition>
        <argsstring></argsstring>
        <name>flag</name>
        <initializer>= <ref refid="classamrex_1_1EBCellFlag_1a92f709a077a386fa2d23fb8b3639fe06" kindref="member">default_value</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" line="238" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" bodystart="238" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1EBCellFlag_1ae7bae7a5720591aa4eb876f50aa12f52" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE amrex::EBCellFlag::EBCellFlag</definition>
        <argsstring>() noexcept</argsstring>
        <name>EBCellFlag</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" line="18" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" bodystart="18" bodyend="18"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBCellFlag_1a66fa73119cce97e1593b4d83f5f3b8ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::EBCellFlag::EBCellFlag</definition>
        <argsstring>(const EBCellFlag &amp;rhs) noexcept=default</argsstring>
        <name>EBCellFlag</name>
        <param>
          <type>const <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" line="20" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBCellFlag_1aefd558308247cb666288af8810d249b7" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> constexpr</type>
        <definition>AMREX_GPU_HOST_DEVICE constexpr amrex::EBCellFlag::EBCellFlag</definition>
        <argsstring>(uint32_t i) noexcept</argsstring>
        <name>EBCellFlag</name>
        <param>
          <type>uint32_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" line="23" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" bodystart="23" bodyend="23"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBCellFlag_1ae4b21b658d54ac6dcef6276c580baf9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> &amp;</type>
        <definition>EBCellFlag&amp; amrex::EBCellFlag::operator=</definition>
        <argsstring>(const EBCellFlag &amp;rhs) noexcept=default</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" line="25" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBCellFlag_1a21f4dd6b3b12e4842c77780716116826" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE EBCellFlag&amp; amrex::EBCellFlag::operator=</definition>
        <argsstring>(uint32_t i) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type>uint32_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" line="28" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" bodystart="28" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBCellFlag_1ae4fbeeb036f82398a0aa386bf976af6c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE EBCellFlag&amp; amrex::EBCellFlag::operator+=</definition>
        <argsstring>(const EBCellFlag &amp;)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" line="31" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" bodystart="31" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBCellFlag_1a415368e4a55ec46befc98b59361a4237" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::EBCellFlag::setRegular</definition>
        <argsstring>() noexcept</argsstring>
        <name>setRegular</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>&lt; clean lower bits </para>        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" line="37" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" bodystart="37" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBCellFlag_1a5e64cb7ffa62b91cb2800ccea20aca3d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::EBCellFlag::setCovered</definition>
        <argsstring>() noexcept</argsstring>
        <name>setCovered</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" line="44" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" bodystart="44" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBCellFlag_1ace9da28b2b2d5ddcc0ac50ed1efc84a1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::EBCellFlag::setSingleValued</definition>
        <argsstring>() noexcept</argsstring>
        <name>setSingleValued</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" line="50" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" bodystart="50" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBCellFlag_1a7f74f489036a678a56c421c828b393b6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::EBCellFlag::setMultiValued</definition>
        <argsstring>(int n) noexcept</argsstring>
        <name>setMultiValued</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" line="57" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" bodystart="57" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBCellFlag_1a510752620cbd0db055bba865c8dd926f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE bool amrex::EBCellFlag::operator==</definition>
        <argsstring>(const EBCellFlag &amp;a_input) const noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> &amp;</type>
          <declname>a_input</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" line="65" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" bodystart="65" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBCellFlag_1a53f51a0228b512f902afab3b8dfe1132" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE bool amrex::EBCellFlag::operator!=</definition>
        <argsstring>(const EBCellFlag &amp;a_input) const noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> &amp;</type>
          <declname>a_input</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" line="71" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" bodystart="71" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBCellFlag_1a84a126f074a69bb0d306d0a44a775b23" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> int</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE int amrex::EBCellFlag::getNumVoFs</definition>
        <argsstring>() const noexcept</argsstring>
        <name>getNumVoFs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" line="77" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" bodystart="77" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBCellFlag_1aeb00fbb304865247e733dea6fcf63b3b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE bool amrex::EBCellFlag::isRegular</definition>
        <argsstring>() const noexcept</argsstring>
        <name>isRegular</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" line="83" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" bodystart="83" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBCellFlag_1a5c007e4008f2729cadb8e493a97d0869" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE bool amrex::EBCellFlag::isSingleValued</definition>
        <argsstring>() const noexcept</argsstring>
        <name>isSingleValued</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" line="88" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" bodystart="88" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBCellFlag_1a74bbae059aac3f50256897505cf6e3c1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE bool amrex::EBCellFlag::isMultiValued</definition>
        <argsstring>() const noexcept</argsstring>
        <name>isMultiValued</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" line="93" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" bodystart="93" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBCellFlag_1afedf970f9d3a534e69ddae19be7cd5f2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE bool amrex::EBCellFlag::isCovered</definition>
        <argsstring>() const noexcept</argsstring>
        <name>isCovered</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" line="98" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" bodystart="98" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBCellFlag_1a990e3b28e1b6925413bf2d4e111367bf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE bool amrex::EBCellFlag::isConnected</definition>
        <argsstring>(const IntVect &amp;iv) const noexcept</argsstring>
        <name>isConnected</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>iv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" line="103" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" bodystart="103" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBCellFlag_1a5855d564fc1d17b8545b82e8cae9615d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE bool amrex::EBCellFlag::isConnected</definition>
        <argsstring>(int i, int j, int k) const noexcept</argsstring>
        <name>isConnected</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <param>
          <type>int</type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" line="111" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" bodystart="111" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBCellFlag_1ae426d9c757d8cd7be4fe958aeb17fda5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE bool amrex::EBCellFlag::isDisconnected</definition>
        <argsstring>(const IntVect &amp;iv) const noexcept</argsstring>
        <name>isDisconnected</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>iv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" line="117" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" bodystart="117" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBCellFlag_1aa6ba5c828c1fe0ba50f1f3673400db8e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE bool amrex::EBCellFlag::isDisconnected</definition>
        <argsstring>(int i, int j, int k) const noexcept</argsstring>
        <name>isDisconnected</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <param>
          <type>int</type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" line="125" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" bodystart="125" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBCellFlag_1a3e740def3688ae4182b55c2eef7773ac" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::EBCellFlag::setDisconnected</definition>
        <argsstring>() noexcept</argsstring>
        <name>setDisconnected</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" line="131" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" bodystart="131" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBCellFlag_1aa3821fae6937052466356487d1bc25a3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::EBCellFlag::setDisconnected</definition>
        <argsstring>(const IntVect &amp;iv) noexcept</argsstring>
        <name>setDisconnected</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>iv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" line="136" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" bodystart="136" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBCellFlag_1ab7c742b707476ca618348efa1197f935" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::EBCellFlag::setDisconnected</definition>
        <argsstring>(int i, int j, int k) noexcept</argsstring>
        <name>setDisconnected</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <param>
          <type>int</type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" line="144" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" bodystart="144" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBCellFlag_1a1b691f1b39fa514056250ecdd9902098" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::EBCellFlag::setConnected</definition>
        <argsstring>() noexcept</argsstring>
        <name>setConnected</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" line="150" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" bodystart="150" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBCellFlag_1a024616425bcecbfc85fa2d13135f04f8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::EBCellFlag::setConnected</definition>
        <argsstring>(const IntVect &amp;iv) noexcept</argsstring>
        <name>setConnected</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>iv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" line="155" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" bodystart="155" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBCellFlag_1a21debda402eb169cb267a0830cd97fae" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::EBCellFlag::setConnected</definition>
        <argsstring>(int i, int j, int k) noexcept</argsstring>
        <name>setConnected</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <param>
          <type>int</type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" line="163" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" bodystart="163" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBCellFlag_1a2ac27c1212ab78008512511cddce89b8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> uint32_t</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE uint32_t amrex::EBCellFlag::getValue</definition>
        <argsstring>() const noexcept</argsstring>
        <name>getValue</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" line="169" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" bodystart="169" bodyend="172"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classamrex_1_1EBCellFlag_1a0a87d851a5baf7aff802e242fb83eabb" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> static <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> constexpr <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE static AMREX_FORCE_INLINE constexpr EBCellFlag amrex::EBCellFlag::TheDefaultCell</definition>
        <argsstring>()</argsstring>
        <name>TheDefaultCell</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" line="175" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" bodystart="175" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBCellFlag_1a0092cab5ca530cdca5f8d8fa0b7028a2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> static <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> constexpr <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE static AMREX_FORCE_INLINE constexpr EBCellFlag amrex::EBCellFlag::TheCoveredCell</definition>
        <argsstring>()</argsstring>
        <name>TheCoveredCell</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" line="181" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" bodystart="181" bodyend="181"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" line="14" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" bodystart="13" bodyend="239"/>
    <listofallmembers>
      <member refid="classamrex_1_1EBCellFlag_1ae215f9034bbe23e831586bc395de5477" prot="private" virt="non-virtual"><scope>amrex::EBCellFlag</scope><name>covered_bits</name></member>
      <member refid="classamrex_1_1EBCellFlag_1a41bd6408895885d67358df6a58cdc867" prot="private" virt="non-virtual"><scope>amrex::EBCellFlag</scope><name>covered_value</name></member>
      <member refid="classamrex_1_1EBCellFlag_1a92f709a077a386fa2d23fb8b3639fe06" prot="private" virt="non-virtual"><scope>amrex::EBCellFlag</scope><name>default_value</name></member>
      <member refid="classamrex_1_1EBCellFlag_1ae7bae7a5720591aa4eb876f50aa12f52" prot="public" virt="non-virtual"><scope>amrex::EBCellFlag</scope><name>EBCellFlag</name></member>
      <member refid="classamrex_1_1EBCellFlag_1a66fa73119cce97e1593b4d83f5f3b8ca" prot="public" virt="non-virtual"><scope>amrex::EBCellFlag</scope><name>EBCellFlag</name></member>
      <member refid="classamrex_1_1EBCellFlag_1aefd558308247cb666288af8810d249b7" prot="public" virt="non-virtual"><scope>amrex::EBCellFlag</scope><name>EBCellFlag</name></member>
      <member refid="classamrex_1_1EBCellFlag_1ab630a116c4a01a64f68d4a8a1592360f" prot="private" virt="non-virtual"><scope>amrex::EBCellFlag</scope><name>flag</name></member>
      <member refid="classamrex_1_1EBCellFlag_1a84a126f074a69bb0d306d0a44a775b23" prot="public" virt="non-virtual"><scope>amrex::EBCellFlag</scope><name>getNumVoFs</name></member>
      <member refid="classamrex_1_1EBCellFlag_1a2ac27c1212ab78008512511cddce89b8" prot="public" virt="non-virtual"><scope>amrex::EBCellFlag</scope><name>getValue</name></member>
      <member refid="classamrex_1_1EBCellFlag_1a990e3b28e1b6925413bf2d4e111367bf" prot="public" virt="non-virtual"><scope>amrex::EBCellFlag</scope><name>isConnected</name></member>
      <member refid="classamrex_1_1EBCellFlag_1a5855d564fc1d17b8545b82e8cae9615d" prot="public" virt="non-virtual"><scope>amrex::EBCellFlag</scope><name>isConnected</name></member>
      <member refid="classamrex_1_1EBCellFlag_1afedf970f9d3a534e69ddae19be7cd5f2" prot="public" virt="non-virtual"><scope>amrex::EBCellFlag</scope><name>isCovered</name></member>
      <member refid="classamrex_1_1EBCellFlag_1ae426d9c757d8cd7be4fe958aeb17fda5" prot="public" virt="non-virtual"><scope>amrex::EBCellFlag</scope><name>isDisconnected</name></member>
      <member refid="classamrex_1_1EBCellFlag_1aa6ba5c828c1fe0ba50f1f3673400db8e" prot="public" virt="non-virtual"><scope>amrex::EBCellFlag</scope><name>isDisconnected</name></member>
      <member refid="classamrex_1_1EBCellFlag_1a74bbae059aac3f50256897505cf6e3c1" prot="public" virt="non-virtual"><scope>amrex::EBCellFlag</scope><name>isMultiValued</name></member>
      <member refid="classamrex_1_1EBCellFlag_1aeb00fbb304865247e733dea6fcf63b3b" prot="public" virt="non-virtual"><scope>amrex::EBCellFlag</scope><name>isRegular</name></member>
      <member refid="classamrex_1_1EBCellFlag_1a5c007e4008f2729cadb8e493a97d0869" prot="public" virt="non-virtual"><scope>amrex::EBCellFlag</scope><name>isSingleValued</name></member>
      <member refid="classamrex_1_1EBCellFlag_1a8fe56028eeb58ef0718c19c6855f6bcb" prot="private" virt="non-virtual"><scope>amrex::EBCellFlag</scope><name>multi_valued_bits</name></member>
      <member refid="classamrex_1_1EBCellFlag_1ab6a98c38286ed5ba0f71fc4a758ff845" prot="private" virt="non-virtual"><scope>amrex::EBCellFlag</scope><name>one_lower_mask</name></member>
      <member refid="classamrex_1_1EBCellFlag_1a4a42591e65666aa5935d1e56fc08ec4d" prot="private" virt="non-virtual"><scope>amrex::EBCellFlag</scope><name>one_numvofs_mask</name></member>
      <member refid="classamrex_1_1EBCellFlag_1a3d96cabc11327fe2db480268931dcba4" prot="private" virt="non-virtual"><scope>amrex::EBCellFlag</scope><name>one_type_mask</name></member>
      <member refid="classamrex_1_1EBCellFlag_1a53f51a0228b512f902afab3b8dfe1132" prot="public" virt="non-virtual"><scope>amrex::EBCellFlag</scope><name>operator!=</name></member>
      <member refid="classamrex_1_1EBCellFlag_1ae4fbeeb036f82398a0aa386bf976af6c" prot="public" virt="non-virtual"><scope>amrex::EBCellFlag</scope><name>operator+=</name></member>
      <member refid="classamrex_1_1EBCellFlag_1ae4b21b658d54ac6dcef6276c580baf9a" prot="public" virt="non-virtual"><scope>amrex::EBCellFlag</scope><name>operator=</name></member>
      <member refid="classamrex_1_1EBCellFlag_1a21f4dd6b3b12e4842c77780716116826" prot="public" virt="non-virtual"><scope>amrex::EBCellFlag</scope><name>operator=</name></member>
      <member refid="classamrex_1_1EBCellFlag_1a510752620cbd0db055bba865c8dd926f" prot="public" virt="non-virtual"><scope>amrex::EBCellFlag</scope><name>operator==</name></member>
      <member refid="classamrex_1_1EBCellFlag_1a25435966072b5955673109be97617f89" prot="private" virt="non-virtual"><scope>amrex::EBCellFlag</scope><name>pos_numvofs</name></member>
      <member refid="classamrex_1_1EBCellFlag_1a98e740b42531b93d0abef721579b39be" prot="private" virt="non-virtual"><scope>amrex::EBCellFlag</scope><name>regular_bits</name></member>
      <member refid="classamrex_1_1EBCellFlag_1a1b691f1b39fa514056250ecdd9902098" prot="public" virt="non-virtual"><scope>amrex::EBCellFlag</scope><name>setConnected</name></member>
      <member refid="classamrex_1_1EBCellFlag_1a024616425bcecbfc85fa2d13135f04f8" prot="public" virt="non-virtual"><scope>amrex::EBCellFlag</scope><name>setConnected</name></member>
      <member refid="classamrex_1_1EBCellFlag_1a21debda402eb169cb267a0830cd97fae" prot="public" virt="non-virtual"><scope>amrex::EBCellFlag</scope><name>setConnected</name></member>
      <member refid="classamrex_1_1EBCellFlag_1a5e64cb7ffa62b91cb2800ccea20aca3d" prot="public" virt="non-virtual"><scope>amrex::EBCellFlag</scope><name>setCovered</name></member>
      <member refid="classamrex_1_1EBCellFlag_1a3e740def3688ae4182b55c2eef7773ac" prot="public" virt="non-virtual"><scope>amrex::EBCellFlag</scope><name>setDisconnected</name></member>
      <member refid="classamrex_1_1EBCellFlag_1aa3821fae6937052466356487d1bc25a3" prot="public" virt="non-virtual"><scope>amrex::EBCellFlag</scope><name>setDisconnected</name></member>
      <member refid="classamrex_1_1EBCellFlag_1ab7c742b707476ca618348efa1197f935" prot="public" virt="non-virtual"><scope>amrex::EBCellFlag</scope><name>setDisconnected</name></member>
      <member refid="classamrex_1_1EBCellFlag_1a7f74f489036a678a56c421c828b393b6" prot="public" virt="non-virtual"><scope>amrex::EBCellFlag</scope><name>setMultiValued</name></member>
      <member refid="classamrex_1_1EBCellFlag_1a415368e4a55ec46befc98b59361a4237" prot="public" virt="non-virtual"><scope>amrex::EBCellFlag</scope><name>setRegular</name></member>
      <member refid="classamrex_1_1EBCellFlag_1ace9da28b2b2d5ddcc0ac50ed1efc84a1" prot="public" virt="non-virtual"><scope>amrex::EBCellFlag</scope><name>setSingleValued</name></member>
      <member refid="classamrex_1_1EBCellFlag_1a54cf88910c4f2884f367348b554c6d92" prot="private" virt="non-virtual"><scope>amrex::EBCellFlag</scope><name>single_vauled_bits</name></member>
      <member refid="classamrex_1_1EBCellFlag_1a7ee55a07343cf958411c2400a2925a9a" prot="private" virt="non-virtual"><scope>amrex::EBCellFlag</scope><name>single_vof_bits</name></member>
      <member refid="classamrex_1_1EBCellFlag_1a0092cab5ca530cdca5f8d8fa0b7028a2" prot="public" virt="non-virtual"><scope>amrex::EBCellFlag</scope><name>TheCoveredCell</name></member>
      <member refid="classamrex_1_1EBCellFlag_1a0a87d851a5baf7aff802e242fb83eabb" prot="public" virt="non-virtual"><scope>amrex::EBCellFlag</scope><name>TheDefaultCell</name></member>
      <member refid="classamrex_1_1EBCellFlag_1a9978159e62e9a5f1a9ba4a55019dc7dc" prot="private" virt="non-virtual"><scope>amrex::EBCellFlag</scope><name>w_lower_mask</name></member>
      <member refid="classamrex_1_1EBCellFlag_1a0a1397794bc5591a597619e3632ad878" prot="private" virt="non-virtual"><scope>amrex::EBCellFlag</scope><name>w_numvofs</name></member>
      <member refid="classamrex_1_1EBCellFlag_1a68904d39b391c9345ebbb57ca42df263" prot="private" virt="non-virtual"><scope>amrex::EBCellFlag</scope><name>w_type</name></member>
      <member refid="classamrex_1_1EBCellFlag_1a202cad7d2c40d09b3c3efbdfdf94115d" prot="private" virt="non-virtual"><scope>amrex::EBCellFlag</scope><name>zero_lower_mask</name></member>
      <member refid="classamrex_1_1EBCellFlag_1a684214fb8524798b231301cf52aeac95" prot="private" virt="non-virtual"><scope>amrex::EBCellFlag</scope><name>zero_numvofs_mask</name></member>
      <member refid="classamrex_1_1EBCellFlag_1ac8267e4520db8eab9e586ba8de116d2b" prot="private" virt="non-virtual"><scope>amrex::EBCellFlag</scope><name>zero_type_mask</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
