<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classamrex_1_1AMRErrorTag" kind="class" language="C++" prot="public">
    <compoundname>amrex::AMRErrorTag</compoundname>
    <includes refid="AMReX__ErrorList_8H" local="no">AMReX_ErrorList.H</includes>
    <innerclass refid="structamrex_1_1AMRErrorTag_1_1UserFunc" prot="public">amrex::AMRErrorTag::UserFunc</innerclass>
    <sectiondef kind="public-type">
      <memberdef kind="enum" id="classamrex_1_1AMRErrorTag_1addadf02bf9152fc1767831cd86b163d5" prot="public" static="no" strong="no">
        <type></type>
        <name>TEST</name>
        <qualifiedname>amrex::AMRErrorTag::TEST</qualifiedname>
        <enumvalue id="classamrex_1_1AMRErrorTag_1addadf02bf9152fc1767831cd86b163d5a7b0d9cc09c139a180df7015ea53e8690" prot="public">
          <name>GRAD</name>
          <initializer>=0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classamrex_1_1AMRErrorTag_1addadf02bf9152fc1767831cd86b163d5a163577f1cd5fa93feb5ba1d11ffd69fb" prot="public">
          <name>RELGRAD</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classamrex_1_1AMRErrorTag_1addadf02bf9152fc1767831cd86b163d5a24a93bfed92dca16735a42fb83bd244f" prot="public">
          <name>LESS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classamrex_1_1AMRErrorTag_1addadf02bf9152fc1767831cd86b163d5ae1d7bebf58c0f94e82726c03448ef942" prot="public">
          <name>GREATER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classamrex_1_1AMRErrorTag_1addadf02bf9152fc1767831cd86b163d5a0d08f661e48e89e5120b9c9006c4b090" prot="public">
          <name>VORT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classamrex_1_1AMRErrorTag_1addadf02bf9152fc1767831cd86b163d5adfb583e59961c24f25757b0750fb66f9" prot="public">
          <name>BOX</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classamrex_1_1AMRErrorTag_1addadf02bf9152fc1767831cd86b163d5a95c0a22b378e1d0ee1d0e63f951e51d4" prot="public">
          <name>USER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classamrex_1_1AMRErrorTag_1addadf02bf9152fc1767831cd86b163d5a48a3e391420e6f9ddcff0f7181e9b072" prot="public">
          <name>PARSER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_ErrorList.H" line="430" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_ErrorList.H" bodystart="430" bodyend="430"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classamrex_1_1AMRErrorTag_1a8f97d93ea970ab6a2deccc908df9a778" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt;</type>
        <definition>Vector&lt;Real&gt; amrex::AMRErrorTag::m_value</definition>
        <argsstring></argsstring>
        <name>m_value</name>
        <qualifiedname>amrex::AMRErrorTag::m_value</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_ErrorList.H" line="510" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_ErrorList.H" bodystart="510" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1AMRErrorTag_1aaf31df482ec4a1715c7364a12d4b0cc0" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1AMRErrorTag_1addadf02bf9152fc1767831cd86b163d5" kindref="member">TEST</ref></type>
        <definition>TEST amrex::AMRErrorTag::m_test</definition>
        <argsstring></argsstring>
        <name>m_test</name>
        <qualifiedname>amrex::AMRErrorTag::m_test</qualifiedname>
        <initializer>{<ref refid="classamrex_1_1AMRErrorTag_1addadf02bf9152fc1767831cd86b163d5adfb583e59961c24f25757b0750fb66f9" kindref="member">BOX</ref>}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_ErrorList.H" line="511" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_ErrorList.H" bodystart="511" bodyend="511"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1AMRErrorTag_1ab30d140ebc75fb6f346e8b519bc25f32" prot="protected" static="no" mutable="no">
        <type><ref refid="structamrex_1_1AMRErrorTag_1_1UserFunc" kindref="compound">UserFunc</ref> *</type>
        <definition>UserFunc* amrex::AMRErrorTag::m_userfunc</definition>
        <argsstring></argsstring>
        <name>m_userfunc</name>
        <qualifiedname>amrex::AMRErrorTag::m_userfunc</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_ErrorList.H" line="512" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_ErrorList.H" bodystart="512" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1AMRErrorTag_1a4a1fbc841e1562cc2e50d2059a37acf6" prot="protected" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1Parser" kindref="compound">Parser</ref> &gt;</type>
        <definition>std::unique_ptr&lt;Parser&gt; amrex::AMRErrorTag::m_parser</definition>
        <argsstring></argsstring>
        <name>m_parser</name>
        <qualifiedname>amrex::AMRErrorTag::m_parser</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_ErrorList.H" line="513" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_ErrorList.H" bodystart="513" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1AMRErrorTag_1a1ee35e49d09f31c5fe86e326be7c30a7" prot="protected" static="no" mutable="no">
        <type><ref refid="structamrex_1_1ParserExecutor" kindref="compound">ParserExecutor</ref>&lt; 4 &gt;</type>
        <definition>ParserExecutor&lt;4&gt; amrex::AMRErrorTag::m_parser_exe</definition>
        <argsstring></argsstring>
        <name>m_parser_exe</name>
        <qualifiedname>amrex::AMRErrorTag::m_parser_exe</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_ErrorList.H" line="514" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_ErrorList.H" bodystart="514" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1AMRErrorTag_1a943620be7e3ff54ee46cba11ffb6c736" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string amrex::AMRErrorTag::m_field</definition>
        <argsstring></argsstring>
        <name>m_field</name>
        <qualifiedname>amrex::AMRErrorTag::m_field</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_ErrorList.H" line="515" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_ErrorList.H" bodystart="515" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1AMRErrorTag_1a501d9971a3346526fae6093d6de95642" prot="protected" static="no" mutable="no">
        <type><ref refid="structamrex_1_1AMRErrorTagInfo" kindref="compound">AMRErrorTagInfo</ref></type>
        <definition>AMRErrorTagInfo amrex::AMRErrorTag::m_info</definition>
        <argsstring></argsstring>
        <name>m_info</name>
        <qualifiedname>amrex::AMRErrorTag::m_info</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_ErrorList.H" line="516" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_ErrorList.H" bodystart="516" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1AMRErrorTag_1ab3c2e7a6fa7e1fb6b00450e34add430d" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::AMRErrorTag::m_ngrow</definition>
        <argsstring></argsstring>
        <name>m_ngrow</name>
        <qualifiedname>amrex::AMRErrorTag::m_ngrow</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_ErrorList.H" line="517" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_ErrorList.H" bodystart="517" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1AMRErrorTag_1a6bdb6f405b8980271203a4dd7bbf66af" prot="public" static="no" const="no" explicit="yes" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::AMRErrorTag::AMRErrorTag</definition>
        <argsstring>(const AMRErrorTagInfo &amp;info=AMRErrorTagInfo()) noexcept</argsstring>
        <name>AMRErrorTag</name>
        <qualifiedname>amrex::AMRErrorTag::AMRErrorTag</qualifiedname>
        <param>
          <type>const <ref refid="structamrex_1_1AMRErrorTagInfo" kindref="compound">AMRErrorTagInfo</ref> &amp;</type>
          <declname>info</declname>
          <defval><ref refid="structamrex_1_1AMRErrorTagInfo" kindref="compound">AMRErrorTagInfo</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_ErrorList.H" line="450" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_ErrorList.H" bodystart="450" bodyend="451"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AMRErrorTag_1a47dd3a5e4699282c4d0507100d91b3da" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::AMRErrorTag::AMRErrorTag</definition>
        <argsstring>(amrex::Real value, AMRErrorTag::TEST test, std::string field, const AMRErrorTagInfo &amp;info=AMRErrorTagInfo()) noexcept</argsstring>
        <name>AMRErrorTag</name>
        <qualifiedname>amrex::AMRErrorTag::AMRErrorTag</qualifiedname>
        <param>
          <type>amrex::Real</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1AMRErrorTag_1addadf02bf9152fc1767831cd86b163d5" kindref="member">AMRErrorTag::TEST</ref></type>
          <declname>test</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>field</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1AMRErrorTagInfo" kindref="compound">AMRErrorTagInfo</ref> &amp;</type>
          <declname>info</declname>
          <defval><ref refid="structamrex_1_1AMRErrorTagInfo" kindref="compound">AMRErrorTagInfo</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_ErrorList.H" line="453" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_ErrorList.H" bodystart="453" bodyend="460"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AMRErrorTag_1a324f086df633a16e2277211771e9864d" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::AMRErrorTag::AMRErrorTag</definition>
        <argsstring>(amrex::Vector&lt; amrex::Real &gt; value, AMRErrorTag::TEST test, std::string field, const AMRErrorTagInfo &amp;info=AMRErrorTagInfo()) noexcept</argsstring>
        <name>AMRErrorTag</name>
        <qualifiedname>amrex::AMRErrorTag::AMRErrorTag</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">amrex::Vector</ref>&lt; amrex::Real &gt;</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1AMRErrorTag_1addadf02bf9152fc1767831cd86b163d5" kindref="member">AMRErrorTag::TEST</ref></type>
          <declname>test</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>field</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1AMRErrorTagInfo" kindref="compound">AMRErrorTagInfo</ref> &amp;</type>
          <declname>info</declname>
          <defval><ref refid="structamrex_1_1AMRErrorTagInfo" kindref="compound">AMRErrorTagInfo</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_ErrorList.H" line="462" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_ErrorList.H" bodystart="462" bodyend="478"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AMRErrorTag_1a26460c9eca93506a137032d65b357efe" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::AMRErrorTag::AMRErrorTag</definition>
        <argsstring>(AMRErrorTag::UserFunc *userfunc, std::string field, int ngrow, const AMRErrorTagInfo &amp;info=AMRErrorTagInfo()) noexcept</argsstring>
        <name>AMRErrorTag</name>
        <qualifiedname>amrex::AMRErrorTag::AMRErrorTag</qualifiedname>
        <param>
          <type><ref refid="structamrex_1_1AMRErrorTag_1_1UserFunc" kindref="compound">AMRErrorTag::UserFunc</ref> *</type>
          <declname>userfunc</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>field</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngrow</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1AMRErrorTagInfo" kindref="compound">AMRErrorTagInfo</ref> &amp;</type>
          <declname>info</declname>
          <defval><ref refid="structamrex_1_1AMRErrorTagInfo" kindref="compound">AMRErrorTagInfo</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_ErrorList.H" line="480" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_ErrorList.H" bodystart="480" bodyend="484"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AMRErrorTag_1ac4ccc6712e0d1714692144a99ab157d6" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::AMRErrorTag::AMRErrorTag</definition>
        <argsstring>(Parser parser, const AMRErrorTagInfo &amp;info=AMRErrorTagInfo())</argsstring>
        <name>AMRErrorTag</name>
        <qualifiedname>amrex::AMRErrorTag::AMRErrorTag</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1Parser" kindref="compound">Parser</ref></type>
          <declname>parser</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1AMRErrorTagInfo" kindref="compound">AMRErrorTagInfo</ref> &amp;</type>
          <declname>info</declname>
          <defval><ref refid="structamrex_1_1AMRErrorTagInfo" kindref="compound">AMRErrorTagInfo</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Construct <ref refid="classamrex_1_1AMRErrorTag" kindref="compound">AMRErrorTag</ref> from a <ref refid="classamrex_1_1Parser" kindref="compound">Parser</ref> that returns Real for given (x,y,z,t). This class&apos;s operator() can then be used to tag regions where the <ref refid="classamrex_1_1Parser" kindref="compound">Parser</ref>&apos;s return value is greater than 0. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_ErrorList.H" line="489" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_ErrorList.cpp" bodystart="217" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AMRErrorTag_1a3f9d380346d4509d37eb8bde92fa184f" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::AMRErrorTag::operator()</definition>
        <argsstring>(amrex::TagBoxArray &amp;tb, const amrex::MultiFab *mf, char clearval, char tagval, amrex::Real time, int level, const amrex::Geometry &amp;geom) const noexcept</argsstring>
        <name>operator()</name>
        <qualifiedname>amrex::AMRErrorTag::operator()</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1TagBoxArray" kindref="compound">amrex::TagBoxArray</ref> &amp;</type>
          <declname>tb</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">amrex::MultiFab</ref> *</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>char</type>
          <declname>clearval</declname>
        </param>
        <param>
          <type>char</type>
          <declname>tagval</declname>
        </param>
        <param>
          <type>amrex::Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>level</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">amrex::Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_ErrorList.H" line="492" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_ErrorList.cpp" bodystart="235" bodyend="544"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AMRErrorTag_1a2f6daf12771b72f61d675a618378fab6" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::AMRErrorTag::NGrow</definition>
        <argsstring>() const noexcept</argsstring>
        <name>NGrow</name>
        <qualifiedname>amrex::AMRErrorTag::NGrow</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_ErrorList.H" line="500" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_ErrorList.H" bodystart="500" bodyend="500"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AMRErrorTag_1ad17b18af26ea47ab8eb42dc899c45a57" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string &amp; amrex::AMRErrorTag::Field</definition>
        <argsstring>() const noexcept</argsstring>
        <name>Field</name>
        <qualifiedname>amrex::AMRErrorTag::Field</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_ErrorList.H" line="501" column="24" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_ErrorList.H" bodystart="501" bodyend="501"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AMRErrorTag_1a23408e1ece232bcb5aededa48a7c7955" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="structamrex_1_1AMRErrorTagInfo" kindref="compound">AMRErrorTagInfo</ref> &amp;</type>
        <definition>AMRErrorTagInfo &amp; amrex::AMRErrorTag::GetInfo</definition>
        <argsstring>() noexcept</argsstring>
        <name>GetInfo</name>
        <qualifiedname>amrex::AMRErrorTag::GetInfo</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_ErrorList.H" line="503" column="22" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_ErrorList.H" bodystart="503" bodyend="503"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AMRErrorTag_1ac855717f731c6338a1c595af1d7ad85a" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="structamrex_1_1AMRErrorTagInfo" kindref="compound">AMRErrorTagInfo</ref> const &amp;</type>
        <definition>AMRErrorTagInfo const  &amp; amrex::AMRErrorTag::GetInfo</definition>
        <argsstring>() const noexcept</argsstring>
        <name>GetInfo</name>
        <qualifiedname>amrex::AMRErrorTag::GetInfo</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_ErrorList.H" line="504" column="28" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_ErrorList.H" bodystart="504" bodyend="504"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AMRErrorTag_1ae91e33103b6e12dcf0a643a8904a74c1" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::AMRErrorTag::SetInfo</definition>
        <argsstring>(AMRErrorTagInfo const &amp;info) noexcept</argsstring>
        <name>SetInfo</name>
        <qualifiedname>amrex::AMRErrorTag::SetInfo</qualifiedname>
        <param>
          <type><ref refid="structamrex_1_1AMRErrorTagInfo" kindref="compound">AMRErrorTagInfo</ref> const &amp;</type>
          <declname>info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_ErrorList.H" line="505" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_ErrorList.H" bodystart="505" bodyend="505"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-func">
      <memberdef kind="function" id="classamrex_1_1AMRErrorTag_1a8e2bdc864ffe06bd8e43902689bb624a" prot="protected" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::AMRErrorTag::SetNGrow</definition>
        <argsstring>() const noexcept</argsstring>
        <name>SetNGrow</name>
        <qualifiedname>amrex::AMRErrorTag::SetNGrow</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_ErrorList.H" line="508" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_ErrorList.cpp" bodystart="225" bodyend="232"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="20">
        <label>amrex::ParserExecutor&lt; 4 &gt;</label>
        <link refid="structamrex_1_1ParserExecutor"/>
      </node>
      <node id="4">
        <label>T</label>
      </node>
      <node id="2">
        <label>amrex::Vector&lt; Real &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="14">
        <label>amrex::Vector&lt; char const * &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="15" relation="public-inheritance">
        </childnode>
      </node>
      <node id="18">
        <label>amrex::Vector&lt; std::string &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="19" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>amrex::AMRErrorTag</label>
        <link refid="classamrex_1_1AMRErrorTag"/>
        <childnode refid="2" relation="usage">
          <edgelabel>m_value</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>m_userfunc</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>m_parser</edgelabel>
        </childnode>
        <childnode refid="20" relation="usage">
          <edgelabel>m_parser_exe</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>m_field</edgelabel>
        </childnode>
        <childnode refid="21" relation="usage">
          <edgelabel>m_info</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>amrex::AMRErrorTag::UserFunc</label>
        <link refid="structamrex_1_1AMRErrorTag_1_1UserFunc"/>
      </node>
      <node id="21">
        <label>amrex::AMRErrorTagInfo</label>
        <link refid="structamrex_1_1AMRErrorTagInfo"/>
        <childnode refid="22" relation="usage">
          <edgelabel>m_max_time</edgelabel>
          <edgelabel>m_min_time</edgelabel>
        </childnode>
        <childnode refid="23" relation="usage">
          <edgelabel>m_realbox</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>amrex::Parser</label>
        <link refid="classamrex_1_1Parser"/>
        <childnode refid="8" relation="usage">
          <edgelabel>m_data</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>m_ufs</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>m_uf_ptrs</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>m_vars</edgelabel>
        </childnode>
      </node>
      <node id="9">
        <label>amrex::Parser::Data</label>
        <link refid="structamrex_1_1Parser_1_1Data"/>
        <childnode refid="10" relation="usage">
          <edgelabel>m_expression</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>m_parser</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>m_locals</edgelabel>
        </childnode>
      </node>
      <node id="22">
        <label>Real</label>
      </node>
      <node id="23">
        <label>amrex::RealBox</label>
        <link refid="classamrex_1_1RealBox"/>
        <childnode refid="22" relation="usage">
          <edgelabel>xhi</edgelabel>
          <edgelabel>xlo</edgelabel>
        </childnode>
      </node>
      <node id="12">
        <label>amrex::amrex_parser</label>
        <link refid="structamrex_1_1amrex__parser"/>
        <childnode refid="13" relation="usage">
          <edgelabel>ast</edgelabel>
        </childnode>
      </node>
      <node id="13">
        <label>amrex::parser_node</label>
        <link refid="structamrex_1_1parser__node"/>
        <childnode refid="13" relation="usage">
          <edgelabel>l</edgelabel>
          <edgelabel>padding2</edgelabel>
          <edgelabel>r</edgelabel>
        </childnode>
      </node>
      <node id="16">
        <label>std::map&lt; std::string, int &gt;</label>
        <childnode refid="10" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
      </node>
      <node id="17">
        <label>std::map&lt; std::string, std::pair&lt; void *, void * &gt; &gt;</label>
        <childnode refid="10" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>std::shared_ptr&lt; amrex::Parser::Data &gt;</label>
        <childnode refid="9" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="11">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="10">
        <label>std::string</label>
        <childnode refid="11" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="4" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="15">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="4" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="19">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="4" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>std::unique_ptr&lt; amrex::Parser &gt;</label>
        <childnode refid="7" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_ErrorList.H" line="426" column="3" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_ErrorList.H" bodystart="427" bodyend="518"/>
    <listofallmembers>
      <member refid="classamrex_1_1AMRErrorTag_1a6bdb6f405b8980271203a4dd7bbf66af" prot="public" virt="non-virtual"><scope>amrex::AMRErrorTag</scope><name>AMRErrorTag</name></member>
      <member refid="classamrex_1_1AMRErrorTag_1a47dd3a5e4699282c4d0507100d91b3da" prot="public" virt="non-virtual"><scope>amrex::AMRErrorTag</scope><name>AMRErrorTag</name></member>
      <member refid="classamrex_1_1AMRErrorTag_1a324f086df633a16e2277211771e9864d" prot="public" virt="non-virtual"><scope>amrex::AMRErrorTag</scope><name>AMRErrorTag</name></member>
      <member refid="classamrex_1_1AMRErrorTag_1a26460c9eca93506a137032d65b357efe" prot="public" virt="non-virtual"><scope>amrex::AMRErrorTag</scope><name>AMRErrorTag</name></member>
      <member refid="classamrex_1_1AMRErrorTag_1ac4ccc6712e0d1714692144a99ab157d6" prot="public" virt="non-virtual"><scope>amrex::AMRErrorTag</scope><name>AMRErrorTag</name></member>
      <member refid="classamrex_1_1AMRErrorTag_1addadf02bf9152fc1767831cd86b163d5adfb583e59961c24f25757b0750fb66f9" prot="public" virt="non-virtual"><scope>amrex::AMRErrorTag</scope><name>BOX</name></member>
      <member refid="classamrex_1_1AMRErrorTag_1ad17b18af26ea47ab8eb42dc899c45a57" prot="public" virt="non-virtual"><scope>amrex::AMRErrorTag</scope><name>Field</name></member>
      <member refid="classamrex_1_1AMRErrorTag_1a23408e1ece232bcb5aededa48a7c7955" prot="public" virt="non-virtual"><scope>amrex::AMRErrorTag</scope><name>GetInfo</name></member>
      <member refid="classamrex_1_1AMRErrorTag_1ac855717f731c6338a1c595af1d7ad85a" prot="public" virt="non-virtual"><scope>amrex::AMRErrorTag</scope><name>GetInfo</name></member>
      <member refid="classamrex_1_1AMRErrorTag_1addadf02bf9152fc1767831cd86b163d5a7b0d9cc09c139a180df7015ea53e8690" prot="public" virt="non-virtual"><scope>amrex::AMRErrorTag</scope><name>GRAD</name></member>
      <member refid="classamrex_1_1AMRErrorTag_1addadf02bf9152fc1767831cd86b163d5ae1d7bebf58c0f94e82726c03448ef942" prot="public" virt="non-virtual"><scope>amrex::AMRErrorTag</scope><name>GREATER</name></member>
      <member refid="classamrex_1_1AMRErrorTag_1addadf02bf9152fc1767831cd86b163d5a24a93bfed92dca16735a42fb83bd244f" prot="public" virt="non-virtual"><scope>amrex::AMRErrorTag</scope><name>LESS</name></member>
      <member refid="classamrex_1_1AMRErrorTag_1a943620be7e3ff54ee46cba11ffb6c736" prot="protected" virt="non-virtual"><scope>amrex::AMRErrorTag</scope><name>m_field</name></member>
      <member refid="classamrex_1_1AMRErrorTag_1a501d9971a3346526fae6093d6de95642" prot="protected" virt="non-virtual"><scope>amrex::AMRErrorTag</scope><name>m_info</name></member>
      <member refid="classamrex_1_1AMRErrorTag_1ab3c2e7a6fa7e1fb6b00450e34add430d" prot="protected" virt="non-virtual"><scope>amrex::AMRErrorTag</scope><name>m_ngrow</name></member>
      <member refid="classamrex_1_1AMRErrorTag_1a4a1fbc841e1562cc2e50d2059a37acf6" prot="protected" virt="non-virtual"><scope>amrex::AMRErrorTag</scope><name>m_parser</name></member>
      <member refid="classamrex_1_1AMRErrorTag_1a1ee35e49d09f31c5fe86e326be7c30a7" prot="protected" virt="non-virtual"><scope>amrex::AMRErrorTag</scope><name>m_parser_exe</name></member>
      <member refid="classamrex_1_1AMRErrorTag_1aaf31df482ec4a1715c7364a12d4b0cc0" prot="protected" virt="non-virtual"><scope>amrex::AMRErrorTag</scope><name>m_test</name></member>
      <member refid="classamrex_1_1AMRErrorTag_1ab30d140ebc75fb6f346e8b519bc25f32" prot="protected" virt="non-virtual"><scope>amrex::AMRErrorTag</scope><name>m_userfunc</name></member>
      <member refid="classamrex_1_1AMRErrorTag_1a8f97d93ea970ab6a2deccc908df9a778" prot="protected" virt="non-virtual"><scope>amrex::AMRErrorTag</scope><name>m_value</name></member>
      <member refid="classamrex_1_1AMRErrorTag_1a2f6daf12771b72f61d675a618378fab6" prot="public" virt="non-virtual"><scope>amrex::AMRErrorTag</scope><name>NGrow</name></member>
      <member refid="classamrex_1_1AMRErrorTag_1a3f9d380346d4509d37eb8bde92fa184f" prot="public" virt="non-virtual"><scope>amrex::AMRErrorTag</scope><name>operator()</name></member>
      <member refid="classamrex_1_1AMRErrorTag_1addadf02bf9152fc1767831cd86b163d5a48a3e391420e6f9ddcff0f7181e9b072" prot="public" virt="non-virtual"><scope>amrex::AMRErrorTag</scope><name>PARSER</name></member>
      <member refid="classamrex_1_1AMRErrorTag_1addadf02bf9152fc1767831cd86b163d5a163577f1cd5fa93feb5ba1d11ffd69fb" prot="public" virt="non-virtual"><scope>amrex::AMRErrorTag</scope><name>RELGRAD</name></member>
      <member refid="classamrex_1_1AMRErrorTag_1ae91e33103b6e12dcf0a643a8904a74c1" prot="public" virt="non-virtual"><scope>amrex::AMRErrorTag</scope><name>SetInfo</name></member>
      <member refid="classamrex_1_1AMRErrorTag_1a8e2bdc864ffe06bd8e43902689bb624a" prot="protected" virt="non-virtual"><scope>amrex::AMRErrorTag</scope><name>SetNGrow</name></member>
      <member refid="classamrex_1_1AMRErrorTag_1addadf02bf9152fc1767831cd86b163d5" prot="public" virt="non-virtual"><scope>amrex::AMRErrorTag</scope><name>TEST</name></member>
      <member refid="classamrex_1_1AMRErrorTag_1addadf02bf9152fc1767831cd86b163d5a95c0a22b378e1d0ee1d0e63f951e51d4" prot="public" virt="non-virtual"><scope>amrex::AMRErrorTag</scope><name>USER</name></member>
      <member refid="classamrex_1_1AMRErrorTag_1addadf02bf9152fc1767831cd86b163d5a0d08f661e48e89e5120b9c9006c4b090" prot="public" virt="non-virtual"><scope>amrex::AMRErrorTag</scope><name>VORT</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
