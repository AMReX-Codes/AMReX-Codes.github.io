<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classamrex_1_1BndryRegisterT" kind="class" language="C++" prot="public">
    <compoundname>amrex::BndryRegisterT</compoundname>
    <derivedcompoundref refid="classamrex_1_1BndryDataT" prot="public" virt="non-virtual">amrex::BndryDataT&lt; MF &gt;</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1FluxRegister" prot="public" virt="non-virtual">amrex::FluxRegister</derivedcompoundref>
    <includes refid="AMReX__BndryRegister_8H" local="no">AMReX_BndryRegister.H</includes>
    <templateparamlist>
      <param>
        <type>typename MF</type>
      </param>
    </templateparamlist>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classamrex_1_1BndryRegisterT_1ac60614a22752704216c93192f96a4f92" prot="public" static="no">
        <type>typename MF::value_type</type>
        <definition>using amrex::BndryRegisterT&lt; MF &gt;::value_type =  typename MF::value_type</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <qualifiedname>amrex::BndryRegisterT::value_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryRegister.H" line="44" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryRegister.H" bodystart="44" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classamrex_1_1BndryRegisterT_1a885dd729158b9a96cc833b5a291be3bf" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1FabSetT" kindref="compound">FabSetT</ref>&lt; MF &gt;</type>
        <definition>FabSetT&lt;MF&gt; amrex::BndryRegisterT&lt; MF &gt;::bndry[2 *AMREX_SPACEDIM]</definition>
        <argsstring>[2 *AMREX_SPACEDIM]</argsstring>
        <name>bndry</name>
        <qualifiedname>amrex::BndryRegisterT::bndry</qualifiedname>
        <briefdescription>
<para>The data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryRegister.H" line="125" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryRegister.H" bodystart="125" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1BndryRegisterT_1a3661eefa8a7bc8f810c39fdc6f8fb350" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref></type>
        <definition>BoxArray amrex::BndryRegisterT&lt; MF &gt;::grids</definition>
        <argsstring></argsstring>
        <name>grids</name>
        <qualifiedname>amrex::BndryRegisterT::grids</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryRegister.H" line="126" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryRegister.H" bodystart="126" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1BndryRegisterT_1af6ca1d67538728588356d5b07ef6742d" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::BndryRegisterT&lt; MF &gt;::BndryRegisterT</definition>
        <argsstring>() noexcept=default</argsstring>
        <name>BndryRegisterT</name>
        <qualifiedname>amrex::BndryRegisterT::BndryRegisterT</qualifiedname>
        <briefdescription>
<para>The default constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryRegister.H" line="47" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BndryRegisterT_1a669440b13ff12d665b4a732a77aa6658" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::BndryRegisterT&lt; MF &gt;::BndryRegisterT</definition>
        <argsstring>(const BoxArray &amp;grids_, const DistributionMapping &amp;dmap, int in_rad, int out_rad, int extent_rad, int ncomp)</argsstring>
        <name>BndryRegisterT</name>
        <qualifiedname>amrex::BndryRegisterT::BndryRegisterT</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>grids_</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dmap</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>in_rad</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>out_rad</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>extent_rad</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
<para>The constructor, given number of cells in/out, extent and number of components (assumes cell-centered boxes, and allocates cell-centered FABs) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryRegister.H" line="50" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryRegister.H" bodystart="130" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BndryRegisterT_1a2d267bc0d735366bae8c6843d4cc79e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::BndryRegisterT&lt; MF &gt;::~BndryRegisterT</definition>
        <argsstring>()=default</argsstring>
        <name>~BndryRegisterT</name>
        <qualifiedname>amrex::BndryRegisterT::~BndryRegisterT</qualifiedname>
        <briefdescription>
<para>The destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryRegister.H" line="55" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BndryRegisterT_1a2922ba0d4eff802a4460e33c950a1ad9" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::BndryRegisterT&lt; MF &gt;::BndryRegisterT</definition>
        <argsstring>(BndryRegisterT&lt; MF &gt; &amp;&amp;rhs) noexcept=default</argsstring>
        <name>BndryRegisterT</name>
        <qualifiedname>amrex::BndryRegisterT::BndryRegisterT</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1BndryRegisterT" kindref="compound">BndryRegisterT</ref>&lt; MF &gt; &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryRegister.H" line="57" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BndryRegisterT_1a13afc3531affff7230330514f2b0725a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::BndryRegisterT&lt; MF &gt;::BndryRegisterT</definition>
        <argsstring>(const BndryRegisterT&lt; MF &gt; &amp;src)=delete</argsstring>
        <name>BndryRegisterT</name>
        <qualifiedname>amrex::BndryRegisterT::BndryRegisterT</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1BndryRegisterT" kindref="compound">BndryRegisterT</ref>&lt; MF &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryRegister.H" line="59" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BndryRegisterT_1a7efdacff6fd618550d5a3e15c0764871" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BndryRegisterT" kindref="compound">BndryRegisterT</ref> &amp;</type>
        <definition>BndryRegisterT &amp; amrex::BndryRegisterT&lt; MF &gt;::operator=</definition>
        <argsstring>(const BndryRegisterT&lt; MF &gt; &amp;src)=delete</argsstring>
        <name>operator=</name>
        <qualifiedname>amrex::BndryRegisterT::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1BndryRegisterT" kindref="compound">BndryRegisterT</ref>&lt; MF &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryRegister.H" line="60" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BndryRegisterT_1aa188d45d82ca39e004cccfca57393095" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BndryRegisterT" kindref="compound">BndryRegisterT</ref> &amp;</type>
        <definition>BndryRegisterT &amp; amrex::BndryRegisterT&lt; MF &gt;::operator=</definition>
        <argsstring>(BndryRegisterT&lt; MF &gt; &amp;&amp;rhs)=delete</argsstring>
        <name>operator=</name>
        <qualifiedname>amrex::BndryRegisterT::operator=</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1BndryRegisterT" kindref="compound">BndryRegisterT</ref>&lt; MF &gt; &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryRegister.H" line="61" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BndryRegisterT_1a9f157b615e14c68633617c6e2031d027" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BndryRegisterT&lt; MF &gt;::define</definition>
        <argsstring>(const BoxArray &amp;grids_, const DistributionMapping &amp;dmap, int in_rad, int out_rad, int extent_rad, int ncomp)</argsstring>
        <name>define</name>
        <qualifiedname>amrex::BndryRegisterT::define</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>grids_</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dmap</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>in_rad</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>out_rad</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>extent_rad</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryRegister.H" line="63" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryRegister.H" bodystart="147" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BndryRegisterT_1aac2ef4b2b53e50f002404a507fa667c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BndryRegisterT&lt; MF &gt;::define</definition>
        <argsstring>(Orientation face, IndexType typ, int in_rad, int out_rad, int extent_rad, int ncomp, const DistributionMapping &amp;dm)</argsstring>
        <name>define</name>
        <qualifiedname>amrex::BndryRegisterT::define</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1Orientation" kindref="compound">Orientation</ref></type>
          <declname>face</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad35342b486ef07ba6108169268169296" kindref="member">IndexType</ref></type>
          <declname>typ</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>in_rad</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>out_rad</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>extent_rad</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <briefdescription>
<para>Build FABs along given face, specifying the <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryRegister.H" line="67" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryRegister.H" bodystart="171" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BndryRegisterT_1a691927d0b6e40f9923bacd565c590a91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BndryRegisterT&lt; MF &gt;::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <qualifiedname>amrex::BndryRegisterT::clear</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryRegister.H" line="71" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryRegister.H" bodystart="161" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BndryRegisterT_1aedfa13c401a3f3825bca5297f1e1e2be" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>const BoxArray &amp; amrex::BndryRegisterT&lt; MF &gt;::boxes</definition>
        <argsstring>() const noexcept</argsstring>
        <name>boxes</name>
        <qualifiedname>amrex::BndryRegisterT::boxes</qualifiedname>
        <briefdescription>
<para>Get box domain (as an array of boxes). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryRegister.H" line="74" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryRegister.H" bodystart="74" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BndryRegisterT_1a132f07148e07fdae3f891ab726e467fb" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::BndryRegisterT&lt; MF &gt;::size</definition>
        <argsstring>() const noexcept</argsstring>
        <name>size</name>
        <qualifiedname>amrex::BndryRegisterT::size</qualifiedname>
        <briefdescription>
<para>Return the number of grids in this domain. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryRegister.H" line="77" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryRegister.H" bodystart="77" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BndryRegisterT_1a71e6c7b2ca9302f8ac309ea49b8dbfb5" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1FabSetT" kindref="compound">FabSetT</ref>&lt; MF &gt; &amp;</type>
        <definition>const FabSetT&lt; MF &gt; &amp; amrex::BndryRegisterT&lt; MF &gt;::operator[]</definition>
        <argsstring>(Orientation face) const noexcept</argsstring>
        <name>operator[]</name>
        <qualifiedname>amrex::BndryRegisterT::operator[]</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1Orientation" kindref="compound">Orientation</ref></type>
          <declname>face</declname>
        </param>
        <briefdescription>
<para>Return const set of FABs bounding the domain grid boxes on a given orientation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryRegister.H" line="80" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryRegister.H" bodystart="80" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BndryRegisterT_1ad8882f7c1bc9de396771742ec5dc3db5" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1FabSetT" kindref="compound">FabSetT</ref>&lt; MF &gt; &amp;</type>
        <definition>FabSetT&lt; MF &gt; &amp; amrex::BndryRegisterT&lt; MF &gt;::operator[]</definition>
        <argsstring>(Orientation face) noexcept</argsstring>
        <name>operator[]</name>
        <qualifiedname>amrex::BndryRegisterT::operator[]</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1Orientation" kindref="compound">Orientation</ref></type>
          <declname>face</declname>
        </param>
        <briefdescription>
<para>Return set of FABs bounding the domain grid boxes on a given orientation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryRegister.H" line="83" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryRegister.H" bodystart="83" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BndryRegisterT_1a005714dcfffa4635a7261f525892ac37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BndryRegisterT&lt; MF &gt;::setVal</definition>
        <argsstring>(value_type v)</argsstring>
        <name>setVal</name>
        <qualifiedname>amrex::BndryRegisterT::setVal</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1BndryRegisterT_1ac60614a22752704216c93192f96a4f92" kindref="member">value_type</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Set all boundary FABs to given value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryRegister.H" line="86" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryRegister.H" bodystart="210" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BndryRegisterT_1a305048fb353b663f23b3562bc793d4d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BndryRegisterT" kindref="compound">BndryRegisterT</ref>&lt; MF &gt; &amp;</type>
        <definition>BndryRegisterT&lt; MF &gt; &amp; amrex::BndryRegisterT&lt; MF &gt;::operator+=</definition>
        <argsstring>(const BndryRegisterT&lt; MF &gt; &amp;rhs)</argsstring>
        <name>operator+=</name>
        <qualifiedname>amrex::BndryRegisterT::operator+=</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1BndryRegisterT" kindref="compound">BndryRegisterT</ref>&lt; MF &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>register += rhs </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryRegister.H" line="89" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryRegister.H" bodystart="220" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BndryRegisterT_1a5176cafd217bf9069ed83feba52d71c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BndryRegisterT" kindref="compound">BndryRegisterT</ref>&lt; MF &gt; &amp;</type>
        <definition>BndryRegisterT&lt; MF &gt; &amp; amrex::BndryRegisterT&lt; MF &gt;::plus</definition>
        <argsstring>(const BndryRegisterT&lt; MF &gt; &amp;rhs)</argsstring>
        <name>plus</name>
        <qualifiedname>amrex::BndryRegisterT::plus</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1BndryRegisterT" kindref="compound">BndryRegisterT</ref>&lt; MF &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryRegister.H" line="90" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryRegister.H" bodystart="244" bodyend="247"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BndryRegisterT_1a1c8fdfc61237f7b6a8d6c040d8daadf2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BndryRegisterT" kindref="compound">BndryRegisterT</ref>&lt; MF &gt; &amp;</type>
        <definition>BndryRegisterT&lt; MF &gt; &amp; amrex::BndryRegisterT&lt; MF &gt;::copyFrom</definition>
        <argsstring>(const MF &amp;src, int nghost, int src_comp, int dest_comp, int num_comp, const Periodicity &amp;period=Periodicity::NonPeriodic())</argsstring>
        <name>copyFrom</name>
        <qualifiedname>amrex::BndryRegisterT::copyFrom</qualifiedname>
        <param>
          <type>const MF &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dest_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <briefdescription>
<para>Fill the boundary FABs on intersection with given MF. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryRegister.H" line="93" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryRegister.H" bodystart="266" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BndryRegisterT_1a58d2309f0eb636417e763b5a1e74599c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BndryRegisterT" kindref="compound">BndryRegisterT</ref>&lt; MF &gt; &amp;</type>
        <definition>BndryRegisterT&lt; MF &gt; &amp; amrex::BndryRegisterT&lt; MF &gt;::plusFrom</definition>
        <argsstring>(const MF &amp;src, int nghost, int src_comp, int dest_comp, int num_comp, const Periodicity &amp;period=Periodicity::NonPeriodic())</argsstring>
        <name>plusFrom</name>
        <qualifiedname>amrex::BndryRegisterT::plusFrom</qualifiedname>
        <param>
          <type>const MF &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dest_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <briefdescription>
<para>Increment the boundary FABs on intersect with given MF. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryRegister.H" line="98" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryRegister.H" bodystart="283" bodyend="292"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BndryRegisterT_1ae8f5e1195457dc7f2204abbcaf2fe148" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BndryRegisterT" kindref="compound">BndryRegisterT</ref>&lt; MF &gt; &amp;</type>
        <definition>BndryRegisterT&lt; MF &gt; &amp; amrex::BndryRegisterT&lt; MF &gt;::linComb</definition>
        <argsstring>(value_type a, const MF &amp;mfa, int a_comp, value_type b, const MF &amp;mfb, int b_comp, int dest_comp, int num_comp, int n_ghost=0)</argsstring>
        <name>linComb</name>
        <qualifiedname>amrex::BndryRegisterT::linComb</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1BndryRegisterT_1ac60614a22752704216c93192f96a4f92" kindref="member">value_type</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type>const MF &amp;</type>
          <declname>mfa</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>a_comp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1BndryRegisterT_1ac60614a22752704216c93192f96a4f92" kindref="member">value_type</ref></type>
          <declname>b</declname>
        </param>
        <param>
          <type>const MF &amp;</type>
          <declname>mfb</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>b_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dest_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n_ghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Linear combination: this := a*mfa + b*mfb on intersection of MFs with the boundary FABs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryRegister.H" line="103" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryRegister.H" bodystart="251" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BndryRegisterT_1a31f3e491669d858c7c73e04d2ad6cb00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BndryRegisterT&lt; MF &gt;::setBoxes</definition>
        <argsstring>(const BoxArray &amp;grids)</argsstring>
        <name>setBoxes</name>
        <qualifiedname>amrex::BndryRegisterT::setBoxes</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>grids</declname>
        </param>
        <briefdescription>
<para>Set box domain, if not set previously. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryRegister.H" line="108" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryRegister.H" bodystart="193" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BndryRegisterT_1a5edc3e7632c3ce5994b8e464213ac5ba" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
        <definition>const DistributionMapping &amp; amrex::BndryRegisterT&lt; MF &gt;::DistributionMap</definition>
        <argsstring>() const noexcept</argsstring>
        <name>DistributionMap</name>
        <qualifiedname>amrex::BndryRegisterT::DistributionMap</qualifiedname>
        <briefdescription>
<para>Returns constant reference to associated <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryRegister.H" line="111" column="31" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryRegister.H" bodystart="111" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BndryRegisterT_1a18c2a8b193ac63488ae4d1ef4acad7b8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BndryRegisterT&lt; MF &gt;::write</definition>
        <argsstring>(const std::string &amp;name, std::ostream &amp;os) const</argsstring>
        <name>write</name>
        <qualifiedname>amrex::BndryRegisterT::write</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <briefdescription>
<para>Write (used for writing to checkpoint) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryRegister.H" line="114" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryRegister.H" bodystart="296" bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BndryRegisterT_1ad918f23e64a2d59ba453b09617e5ac15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BndryRegisterT&lt; MF &gt;::read</definition>
        <argsstring>(const std::string &amp;name, std::istream &amp;is)</argsstring>
        <name>read</name>
        <qualifiedname>amrex::BndryRegisterT::read</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <briefdescription>
<para>Read (used for reading from checkpoint) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryRegister.H" line="117" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryRegister.H" bodystart="322" bodyend="346"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classamrex_1_1BndryRegisterT_1a859e565c8590d0c8dbe88bede09a35d6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BndryRegisterT&lt; MF &gt;::Copy</definition>
        <argsstring>(BndryRegisterT&lt; MF &gt; &amp;dst, const BndryRegisterT&lt; MF &gt; &amp;src)</argsstring>
        <name>Copy</name>
        <qualifiedname>amrex::BndryRegisterT::Copy</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1BndryRegisterT" kindref="compound">BndryRegisterT</ref>&lt; MF &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BndryRegisterT" kindref="compound">BndryRegisterT</ref>&lt; MF &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>Local copy function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryRegister.H" line="120" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryRegister.H" bodystart="351" bodyend="357"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>A BndryRegister organizes FabSets bounding each grid in a <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. A FabSet is maintained for each boundary orientation, as well as the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> domain of definition. </para>
    </briefdescription>
    <detaileddescription>
<para>A BndryRegister object contains a list of FabSets bounding the grids in a <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. The FabSet FABs are at the same refinement level as the grids they bound, and are accessed and modified via a variety of member functions.</para>
<para>Non-default instantiation allocates a set of FABs, grown into and out of the bounding surfaces of each box in the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. The width of the layer (in/out), as well as the &quot;extent&quot; of a bounding FABs (the number of nodes beyond the box boundaries, parallel to the grid surface) are determined by constructor argument. All boxes and FABs in this context are assumed to be cell-centered.</para>
<para>A small number of linear mathematical operations are provided for BndryRegisters, as well as overloaded [] operators for access based on grid boundary orientation. The <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> domain of definition is accessible, but not resettable, </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>amrex::BndryDataT&lt; MF &gt;</label>
        <link refid="classamrex_1_1BndryDataT"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>amrex::BndryRegisterT&lt; MF &gt;</label>
        <link refid="classamrex_1_1BndryRegisterT"/>
      </node>
      <node id="5">
        <label>amrex::FluxRegister&lt; MultiFab &gt;</label>
        <link refid="classamrex_1_1FluxRegister"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>amrex::InterpBndryDataT&lt; MF &gt;</label>
        <link refid="classamrex_1_1InterpBndryDataT"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>amrex::MLMGBndryT&lt; MF &gt;</label>
        <link refid="classamrex_1_1MLMGBndryT"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="19">
        <label>amrex::BoxND&lt; AMREX_SPACEDIM &gt;</label>
        <link refid="classamrex_1_1BoxND"/>
      </node>
      <node id="7">
        <label>amrex::IndexTypeND&lt; AMREX_SPACEDIM &gt;</label>
        <link refid="classamrex_1_1IndexTypeND"/>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>amrex::IntVectND&lt; AMREX_SPACEDIM &gt;</label>
        <link refid="classamrex_1_1IntVectND"/>
      </node>
      <node id="18">
        <label>T</label>
      </node>
      <node id="16">
        <label>amrex::Vector&lt; amrex::BoxND &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="17" relation="public-inheritance">
        </childnode>
      </node>
      <node id="15">
        <label>amrex::BARef</label>
        <link refid="structamrex_1_1BARef"/>
        <childnode refid="16" relation="usage">
          <edgelabel>m_abox</edgelabel>
        </childnode>
        <childnode refid="19" relation="usage">
          <edgelabel>bbox</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>crsn</edgelabel>
        </childnode>
        <childnode refid="20" relation="usage">
          <edgelabel>hash</edgelabel>
        </childnode>
      </node>
      <node id="12">
        <label>amrex::BATbndryReg</label>
        <link refid="structamrex_1_1BATbndryReg"/>
        <childnode refid="13" relation="usage">
          <edgelabel>m_face</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
          <edgelabel>m_doihi</edgelabel>
          <edgelabel>m_doilo</edgelabel>
          <edgelabel>m_hishft</edgelabel>
          <edgelabel>m_loshft</edgelabel>
        </childnode>
      </node>
      <node id="9">
        <label>amrex::BATcoarsenRatio</label>
        <link refid="structamrex_1_1BATcoarsenRatio"/>
        <childnode refid="10" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>amrex::BATindexType</label>
        <link refid="structamrex_1_1BATindexType"/>
        <childnode refid="7" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
      </node>
      <node id="11">
        <label>amrex::BATindexType_coarsenRatio</label>
        <link refid="structamrex_1_1BATindexType__coarsenRatio"/>
        <childnode refid="7" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>amrex::BATnull</label>
        <link refid="structamrex_1_1BATnull"/>
      </node>
      <node id="3">
        <label>amrex::BATransformer</label>
        <link refid="structamrex_1_1BATransformer"/>
        <childnode refid="4" relation="usage">
          <edgelabel>m_op</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>amrex::BATransformer::BATOp</label>
        <link refid="unionamrex_1_1BATransformer_1_1BATOp"/>
        <childnode refid="5" relation="usage">
          <edgelabel>m_null</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>m_indexType</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>m_coarsenRatio</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>m_indexType_coarsenRatio</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>m_bndryReg</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>amrex::BndryRegisterT&lt; MF &gt;</label>
        <link refid="classamrex_1_1BndryRegisterT"/>
        <childnode refid="2" relation="usage">
          <edgelabel>grids</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>amrex::BoxArray</label>
        <link refid="classamrex_1_1BoxArray"/>
        <childnode refid="3" relation="usage">
          <edgelabel>m_bat</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>m_ref</edgelabel>
        </childnode>
        <childnode refid="23" relation="usage">
          <edgelabel>m_simplified_list</edgelabel>
        </childnode>
      </node>
      <node id="24">
        <label>amrex::BoxList</label>
        <link refid="classamrex_1_1BoxList"/>
        <childnode refid="16" relation="usage">
          <edgelabel>m_lbox</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>btype</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>amrex::CellIndexEnum</label>
        <link refid="structamrex_1_1CellIndexEnum"/>
      </node>
      <node id="21">
        <label>amrex::IntVectND&lt; dim &gt;</label>
        <link refid="classamrex_1_1IntVectND"/>
      </node>
      <node id="13">
        <label>amrex::Orientation</label>
        <link refid="classamrex_1_1Orientation"/>
      </node>
      <node id="14">
        <label>std::shared_ptr&lt; amrex::BARef &gt;</label>
        <childnode refid="15" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="23">
        <label>std::shared_ptr&lt; amrex::BoxList &gt;</label>
        <childnode refid="24" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="17">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="18" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="20">
        <label>std::unordered_map&lt; IntVect, std::vector&lt; int &gt;, IntVect::shift_hasher &gt;</label>
        <childnode refid="21" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="22" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="22">
        <label>std::vector&lt; int &gt;</label>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryRegister.H" line="40" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryRegister.H" bodystart="41" bodyend="127"/>
    <listofallmembers>
      <member refid="classamrex_1_1BndryRegisterT_1a885dd729158b9a96cc833b5a291be3bf" prot="protected" virt="non-virtual"><scope>amrex::BndryRegisterT</scope><name>bndry</name></member>
      <member refid="classamrex_1_1BndryRegisterT_1af6ca1d67538728588356d5b07ef6742d" prot="public" virt="non-virtual"><scope>amrex::BndryRegisterT</scope><name>BndryRegisterT</name></member>
      <member refid="classamrex_1_1BndryRegisterT_1a669440b13ff12d665b4a732a77aa6658" prot="public" virt="non-virtual"><scope>amrex::BndryRegisterT</scope><name>BndryRegisterT</name></member>
      <member refid="classamrex_1_1BndryRegisterT_1a2922ba0d4eff802a4460e33c950a1ad9" prot="public" virt="non-virtual"><scope>amrex::BndryRegisterT</scope><name>BndryRegisterT</name></member>
      <member refid="classamrex_1_1BndryRegisterT_1a13afc3531affff7230330514f2b0725a" prot="public" virt="non-virtual"><scope>amrex::BndryRegisterT</scope><name>BndryRegisterT</name></member>
      <member refid="classamrex_1_1BndryRegisterT_1aedfa13c401a3f3825bca5297f1e1e2be" prot="public" virt="non-virtual"><scope>amrex::BndryRegisterT</scope><name>boxes</name></member>
      <member refid="classamrex_1_1BndryRegisterT_1a691927d0b6e40f9923bacd565c590a91" prot="public" virt="non-virtual"><scope>amrex::BndryRegisterT</scope><name>clear</name></member>
      <member refid="classamrex_1_1BndryRegisterT_1a859e565c8590d0c8dbe88bede09a35d6" prot="public" virt="non-virtual"><scope>amrex::BndryRegisterT</scope><name>Copy</name></member>
      <member refid="classamrex_1_1BndryRegisterT_1a1c8fdfc61237f7b6a8d6c040d8daadf2" prot="public" virt="non-virtual"><scope>amrex::BndryRegisterT</scope><name>copyFrom</name></member>
      <member refid="classamrex_1_1BndryRegisterT_1a9f157b615e14c68633617c6e2031d027" prot="public" virt="non-virtual"><scope>amrex::BndryRegisterT</scope><name>define</name></member>
      <member refid="classamrex_1_1BndryRegisterT_1aac2ef4b2b53e50f002404a507fa667c6" prot="public" virt="non-virtual"><scope>amrex::BndryRegisterT</scope><name>define</name></member>
      <member refid="classamrex_1_1BndryRegisterT_1a5edc3e7632c3ce5994b8e464213ac5ba" prot="public" virt="non-virtual"><scope>amrex::BndryRegisterT</scope><name>DistributionMap</name></member>
      <member refid="classamrex_1_1BndryRegisterT_1a3661eefa8a7bc8f810c39fdc6f8fb350" prot="protected" virt="non-virtual"><scope>amrex::BndryRegisterT</scope><name>grids</name></member>
      <member refid="classamrex_1_1BndryRegisterT_1ae8f5e1195457dc7f2204abbcaf2fe148" prot="public" virt="non-virtual"><scope>amrex::BndryRegisterT</scope><name>linComb</name></member>
      <member refid="classamrex_1_1BndryRegisterT_1a305048fb353b663f23b3562bc793d4d9" prot="public" virt="non-virtual"><scope>amrex::BndryRegisterT</scope><name>operator+=</name></member>
      <member refid="classamrex_1_1BndryRegisterT_1a7efdacff6fd618550d5a3e15c0764871" prot="public" virt="non-virtual"><scope>amrex::BndryRegisterT</scope><name>operator=</name></member>
      <member refid="classamrex_1_1BndryRegisterT_1aa188d45d82ca39e004cccfca57393095" prot="public" virt="non-virtual"><scope>amrex::BndryRegisterT</scope><name>operator=</name></member>
      <member refid="classamrex_1_1BndryRegisterT_1a71e6c7b2ca9302f8ac309ea49b8dbfb5" prot="public" virt="non-virtual"><scope>amrex::BndryRegisterT</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1BndryRegisterT_1ad8882f7c1bc9de396771742ec5dc3db5" prot="public" virt="non-virtual"><scope>amrex::BndryRegisterT</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1BndryRegisterT_1a5176cafd217bf9069ed83feba52d71c2" prot="public" virt="non-virtual"><scope>amrex::BndryRegisterT</scope><name>plus</name></member>
      <member refid="classamrex_1_1BndryRegisterT_1a58d2309f0eb636417e763b5a1e74599c" prot="public" virt="non-virtual"><scope>amrex::BndryRegisterT</scope><name>plusFrom</name></member>
      <member refid="classamrex_1_1BndryRegisterT_1ad918f23e64a2d59ba453b09617e5ac15" prot="public" virt="non-virtual"><scope>amrex::BndryRegisterT</scope><name>read</name></member>
      <member refid="classamrex_1_1BndryRegisterT_1a31f3e491669d858c7c73e04d2ad6cb00" prot="public" virt="non-virtual"><scope>amrex::BndryRegisterT</scope><name>setBoxes</name></member>
      <member refid="classamrex_1_1BndryRegisterT_1a005714dcfffa4635a7261f525892ac37" prot="public" virt="non-virtual"><scope>amrex::BndryRegisterT</scope><name>setVal</name></member>
      <member refid="classamrex_1_1BndryRegisterT_1a132f07148e07fdae3f891ab726e467fb" prot="public" virt="non-virtual"><scope>amrex::BndryRegisterT</scope><name>size</name></member>
      <member refid="classamrex_1_1BndryRegisterT_1ac60614a22752704216c93192f96a4f92" prot="public" virt="non-virtual"><scope>amrex::BndryRegisterT</scope><name>value_type</name></member>
      <member refid="classamrex_1_1BndryRegisterT_1a18c2a8b193ac63488ae4d1ef4acad7b8" prot="public" virt="non-virtual"><scope>amrex::BndryRegisterT</scope><name>write</name></member>
      <member refid="classamrex_1_1BndryRegisterT_1a2d267bc0d735366bae8c6843d4cc79e3" prot="public" virt="non-virtual"><scope>amrex::BndryRegisterT</scope><name>~BndryRegisterT</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
