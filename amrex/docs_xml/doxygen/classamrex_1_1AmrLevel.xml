<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classamrex_1_1AmrLevel" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>amrex::AmrLevel</compoundname>
    <includes refid="AMReX__AmrLevel_8H" local="no">AMReX_AmrLevel.H</includes>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classamrex_1_1AmrLevel_1a83fa691ff414eb69f75eb6ae1f61b33a" prot="public" static="no">
        <name>TimeLevel</name>
        <enumvalue id="classamrex_1_1AmrLevel_1a83fa691ff414eb69f75eb6ae1f61b33aa42553bff8bf17dc01b76ff8e44f3d902" prot="public">
          <name>AmrOldTime</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classamrex_1_1AmrLevel_1a83fa691ff414eb69f75eb6ae1f61b33aabebff412ae8d5766104330cb143e91c9" prot="public">
          <name>AmrHalfTime</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classamrex_1_1AmrLevel_1a83fa691ff414eb69f75eb6ae1f61b33aa9e86be887aaeac42a556e1f493337472" prot="public">
          <name>AmrNewTime</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classamrex_1_1AmrLevel_1a83fa691ff414eb69f75eb6ae1f61b33aa26c31c2a7f0ffe418eca566dd60dcf9a" prot="public">
          <name>Amr1QtrTime</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classamrex_1_1AmrLevel_1a83fa691ff414eb69f75eb6ae1f61b33aae97e640066fc5c0776f300447bec0517" prot="public">
          <name>Amr3QtrTime</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classamrex_1_1AmrLevel_1a83fa691ff414eb69f75eb6ae1f61b33aaae1e38c840ac8908874d6775a2d8506d" prot="public">
          <name>AmrOtherTime</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>What time are we at? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="46" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="46" bodyend="51"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classamrex_1_1AmrLevel_1a1625024217a38ec9637cf3a428164c71" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class Amr</definition>
        <argsstring></argsstring>
        <name>Amr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="40" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1AmrLevel_1a39d92a4048c0af0c7b1737d5c4e0c334" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class FillPatchIterator</definition>
        <argsstring></argsstring>
        <name>FillPatchIterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="41" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1AmrLevel_1a872278b3cad59c0978412af0cd9ec0cf" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class FillPatchIteratorHelper</definition>
        <argsstring></argsstring>
        <name>FillPatchIteratorHelper</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="42" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="42" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classamrex_1_1AmrLevel_1a15535c7cc1f73df2cc3b0b720d8ab5a4" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::AmrLevel::level</definition>
        <argsstring></argsstring>
        <name>level</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="425" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="425" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1AmrLevel_1a571b97b176d8618fba71f56c8b44a7c8" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref></type>
        <definition>Geometry amrex::AmrLevel::geom</definition>
        <argsstring></argsstring>
        <name>geom</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="426" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="426" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1AmrLevel_1a5ffc98d138f381698b2a61fc6cb2ce01" prot="protected" static="no" mutable="no">
        <type>BoxArray</type>
        <definition>BoxArray amrex::AmrLevel::grids</definition>
        <argsstring></argsstring>
        <name>grids</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="427" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="427" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1AmrLevel_1ab0ab7555be82910d8100d7bc3aa55d1d" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref></type>
        <definition>DistributionMapping amrex::AmrLevel::dmap</definition>
        <argsstring></argsstring>
        <name>dmap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="428" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="428" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1AmrLevel_1aeb2c20016c60209d0bc5112f262957c2" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Amr" kindref="compound">Amr</ref> *</type>
        <definition>Amr* amrex::AmrLevel::parent</definition>
        <argsstring></argsstring>
        <name>parent</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="429" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="429" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1AmrLevel_1a7fc1ed7f6a21702c3af072650ed4de4a" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>IntVect amrex::AmrLevel::crse_ratio</definition>
        <argsstring></argsstring>
        <name>crse_ratio</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="430" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="430" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1AmrLevel_1a109f988dd098fdb2a6b854a742015397" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>IntVect amrex::AmrLevel::fine_ratio</definition>
        <argsstring></argsstring>
        <name>fine_ratio</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="431" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="431" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1AmrLevel_1ac00306c6990dffb14241578a8f4aa281" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1StateData" kindref="compound">StateData</ref> &gt;</type>
        <definition>Vector&lt;StateData&gt; amrex::AmrLevel::state</definition>
        <argsstring></argsstring>
        <name>state</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="434" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="434" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1AmrLevel_1aa11acf69e2d0372e204cfea5934658f6" prot="protected" static="no" mutable="no">
        <type>BoxArray</type>
        <definition>BoxArray amrex::AmrLevel::m_AreaNotToTag</definition>
        <argsstring></argsstring>
        <name>m_AreaNotToTag</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="436" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="436" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1AmrLevel_1a512443a06a9bee5a9c911326c65e1370" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>Box amrex::AmrLevel::m_AreaToTag</definition>
        <argsstring></argsstring>
        <name>m_AreaToTag</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="437" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="437" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1AmrLevel_1a9ef7971fd5d7dd152886c202feb7d806" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::AmrLevel::post_step_regrid</definition>
        <argsstring></argsstring>
        <name>post_step_regrid</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="439" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="439" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1AmrLevel_1a7a90e201ef6ef11f2c42fc9a0de76939" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::AmrLevel::levelDirectoryCreated</definition>
        <argsstring></argsstring>
        <name>levelDirectoryCreated</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="441" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="441" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1AmrLevel_1a948320fb29597814dca7906e314a2c13" prot="protected" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &gt; &gt;</type>
        <definition>std::unique_ptr&lt;FabFactory&lt;FArrayBox&gt; &gt; amrex::AmrLevel::m_factory</definition>
        <argsstring></argsstring>
        <name>m_factory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="443" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="443" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-static-attrib">
      <memberdef kind="variable" id="classamrex_1_1AmrLevel_1a792f148ee0bb20432a4acefa1c2cac9a" prot="protected" static="yes" mutable="no">
        <type><ref refid="classamrex_1_1DeriveList" kindref="compound">DeriveList</ref></type>
        <definition>DeriveList amrex::AmrLevel::derive_lst</definition>
        <argsstring></argsstring>
        <name>derive_lst</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="432" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="432" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1AmrLevel_1acb5f9e8c8d903d3a700d2cc11be500e5" prot="protected" static="yes" mutable="no">
        <type><ref refid="classamrex_1_1DescriptorList" kindref="compound">DescriptorList</ref></type>
        <definition>DescriptorList amrex::AmrLevel::desc_lst</definition>
        <argsstring></argsstring>
        <name>desc_lst</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="433" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="433" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1AmrLevel_1a7cf2da3e3135c31924af8e09fa0c8104" prot="private" static="no" mutable="yes">
        <type>BoxArray</type>
        <definition>BoxArray amrex::AmrLevel::edge_grids[AMREX_SPACEDIM]</definition>
        <argsstring>[AMREX_SPACEDIM]</argsstring>
        <name>edge_grids</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="447" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="447" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1AmrLevel_1a4672d7cd3c482aedb037347c1fddc0ff" prot="private" static="no" mutable="yes">
        <type>BoxArray</type>
        <definition>BoxArray amrex::AmrLevel::nodal_grids</definition>
        <argsstring></argsstring>
        <name>nodal_grids</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="448" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="448" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1af651bb170ec4a1a93a4eed118dead881" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>amrex::AmrLevel::~AmrLevel</definition>
        <argsstring>()</argsstring>
        <name>~AmrLevel</name>
        <briefdescription>
<para>The destructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="53" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="564" bodyend="567"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a7cec3a532b1d9bc6f36417ecb33b4287" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::AmrLevel::LevelDirectoryNames</definition>
        <argsstring>(const std::string &amp;dir, std::string &amp;LevelDir, std::string &amp;FullPath)</argsstring>
        <name>LevelDirectoryNames</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>std::string &amp;</type>
          <declname>LevelDir</declname>
        </param>
        <param>
          <type>std::string &amp;</type>
          <declname>FullPath</declname>
        </param>
        <briefdescription>
<para>Get the level directory names. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="55" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="2235" bodyend="2248"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a962f9d201153832198014fba04698410" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::AmrLevel::CreateLevelDirectory</definition>
        <argsstring>(const std::string &amp;dir)</argsstring>
        <name>CreateLevelDirectory</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Create the Level_ directory for checkpoint and plot files. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="59" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="2251" bodyend="2265"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a33b3a3f0806c790a05f39fae227042a0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::AmrLevel::SetLevelDirectoryCreated</definition>
        <argsstring>(bool ldc) noexcept</argsstring>
        <name>SetLevelDirectoryCreated</name>
        <param>
          <type>bool</type>
          <declname>ldc</declname>
        </param>
        <briefdescription>
<para>Set if the Level_ directory was created or to clear the value. CreateLevelDirectory sets levelDirectoryCreated = true. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="64" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="64" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1aafabc1e8a1b6e1b96230fbf6debe2465" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::string</type>
        <definition>virtual std::string amrex::AmrLevel::thePlotFileType</definition>
        <argsstring>() const</argsstring>
        <name>thePlotFileType</name>
        <briefdescription>
<para>A string written as the first item in <ref refid="classamrex_1_1AmrLevel_1aac3f74f8caafcc7b7cf0d3b33480e5d7" kindref="member">writePlotFile()</ref> at level zero. It is so we can distinguish between different types of plot files. This default &quot;HyperCLaw-V1.1&quot; is for VisIt software and some of our internal postprocessing routines. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="73" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="73" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1aac3f74f8caafcc7b7cf0d3b33480e5d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::AmrLevel::writePlotFile</definition>
        <argsstring>(const std::string &amp;dir, std::ostream &amp;os, VisMF::How how=VisMF::NFiles)</argsstring>
        <name>writePlotFile</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1VisMF_1aa50a3ce471ac0bdf8f78134f0004e156" kindref="member">VisMF::How</ref></type>
          <declname>how</declname>
          <defval><ref refid="classamrex_1_1VisMF_1aa50a3ce471ac0bdf8f78134f0004e156a167fa24b841257fa58af35b658f5d6c1" kindref="member">VisMF::NFiles</ref></defval>
        </param>
        <briefdescription>
<para>Write plot file stuff to specified directory. This is a pure virtual function and hence MUST be implemented by derived classes. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="83" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="144" bodyend="365"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a186555902c913a437e6676f5cec90ae8" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::AmrLevel::writePlotFilePre</definition>
        <argsstring>(const std::string &amp;dir, std::ostream &amp;os)</argsstring>
        <name>writePlotFilePre</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <briefdescription>
<para>Do pre-plotfile work to avoid synchronizations while writing the amr hierarchy. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="88" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="369" bodyend="372"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a3e2abd422506f2fb1ee6f55a47433f42" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::AmrLevel::writePlotFilePost</definition>
        <argsstring>(const std::string &amp;dir, std::ostream &amp;os)</argsstring>
        <name>writePlotFilePost</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <briefdescription>
<para>Do post-plotfile work to avoid synchronizations while writing the amr hierarchy. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="92" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="376" bodyend="379"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a82a5b2421ec382b24be0a33a27d82f59" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex::AmrLevel::writeSmallPlotFile</definition>
        <argsstring>(const std::string &amp;, std::ostream &amp;, VisMF::How=VisMF::NFiles)</argsstring>
        <name>writeSmallPlotFile</name>
        <param>
          <type>const std::string &amp;</type>
        </param>
        <param>
          <type>std::ostream &amp;</type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1VisMF_1aa50a3ce471ac0bdf8f78134f0004e156" kindref="member">VisMF::How</ref></type>
          <defval><ref refid="classamrex_1_1VisMF_1aa50a3ce471ac0bdf8f78134f0004e156a167fa24b841257fa58af35b658f5d6c1" kindref="member">VisMF::NFiles</ref></defval>
        </param>
        <briefdescription>
<para>Write small plot file stuff to specified directory. Unlike writePlotFile, this is NOT a pure virtual function so implementation by derived classes is optional. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="100" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="100" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a169bef0169afefe32db1d994d2600c69" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::AmrLevel::checkPoint</definition>
        <argsstring>(const std::string &amp;dir, std::ostream &amp;os, VisMF::How how=VisMF::NFiles, bool dump_old=true)</argsstring>
        <name>checkPoint</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1VisMF_1aa50a3ce471ac0bdf8f78134f0004e156" kindref="member">VisMF::How</ref></type>
          <declname>how</declname>
          <defval><ref refid="classamrex_1_1VisMF_1aa50a3ce471ac0bdf8f78134f0004e156a167fa24b841257fa58af35b658f5d6c1" kindref="member">VisMF::NFiles</ref></defval>
        </param>
        <param>
          <type>bool</type>
          <declname>dump_old</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Write current state to checkpoint file. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="104" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="502" bodyend="545"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1aa8953b789fe7af91082c2fefcced1a16" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::AmrLevel::checkPointPre</definition>
        <argsstring>(const std::string &amp;dir, std::ostream &amp;os)</argsstring>
        <name>checkPointPre</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <briefdescription>
<para>Do pre-checkpoint work to avoid synchronizations while writing the amr hierarchy. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="109" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="549" bodyend="553"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a91b3bc1707aa307c5eeb73d9e2bfdd80" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::AmrLevel::checkPointPost</definition>
        <argsstring>(const std::string &amp;dir, std::ostream &amp;os)</argsstring>
        <name>checkPointPost</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <briefdescription>
<para>Do post-checkpoint work to avoid synchronizations while writing the amr hierarchy. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="112" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="557" bodyend="561"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a05899e47b34be116fa7a9a40ecaa74ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::AmrLevel::restart</definition>
        <argsstring>(Amr &amp;papa, std::istream &amp;is, bool bReadSpecial=false)</argsstring>
        <name>restart</name>
        <param>
          <type><ref refid="classamrex_1_1Amr" kindref="compound">Amr</ref> &amp;</type>
          <declname>papa</declname>
        </param>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bReadSpecial</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Restart from a checkpoint file. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="115" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="383" bodyend="457"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a6560cdb555b4af1f6d5b525e1b25e4eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::AmrLevel::set_state_in_checkpoint</definition>
        <argsstring>(Vector&lt; int &gt; &amp;state_in_checkpoint)</argsstring>
        <name>set_state_in_checkpoint</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>state_in_checkpoint</declname>
        </param>
        <briefdescription>
<para>Old checkpoint may have different number of states than the new source code. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="120" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="460" bodyend="463"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a252f7123d2f0a98351bc7b39c32b3152" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void amrex::AmrLevel::computeInitialDt</definition>
        <argsstring>(int finest_level, int sub_cycle, Vector&lt; int &gt; &amp;n_cycle, const Vector&lt; IntVect &gt; &amp;ref_ratio, Vector&lt; Real &gt; &amp;dt_level, Real stop_time)=0</argsstring>
        <name>computeInitialDt</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>finest_level</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>sub_cycle</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>n_cycle</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &gt; &amp;</type>
          <declname>ref_ratio</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &amp;</type>
          <declname>dt_level</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>stop_time</declname>
        </param>
        <briefdescription>
<para>Compute the initial time step. This is a pure virtual function and hence MUST be implemented by derived classes. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="132" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a2ca2263f59a50956ec37ce72a4a02767" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void amrex::AmrLevel::computeNewDt</definition>
        <argsstring>(int finest_level, int sub_cycle, Vector&lt; int &gt; &amp;n_cycle, const Vector&lt; IntVect &gt; &amp;ref_ratio, Vector&lt; Real &gt; &amp;dt_min, Vector&lt; Real &gt; &amp;dt_level, Real stop_time, int post_regrid_flag)=0</argsstring>
        <name>computeNewDt</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>finest_level</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>sub_cycle</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>n_cycle</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &gt; &amp;</type>
          <declname>ref_ratio</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &amp;</type>
          <declname>dt_min</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &amp;</type>
          <declname>dt_level</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>stop_time</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>post_regrid_flag</declname>
        </param>
        <briefdescription>
<para>Compute the next time step. This is a pure virtual function and hence MUST be implemented by derived classes. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="142" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a96b6f33d22c9341b1cff894f17555f47" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>Real</type>
        <definition>virtual Real amrex::AmrLevel::advance</definition>
        <argsstring>(Real time, Real dt, int iteration, int ncycle)=0</argsstring>
        <name>advance</name>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dt</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>iteration</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncycle</declname>
        </param>
        <briefdescription>
<para>Do an integration step on this level. Returns maximum safe time step. This is a pure virtual function and hence MUST be implemented by derived classes. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="155" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1ada19927c13fa73b81f7edff40cf82b41" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void amrex::AmrLevel::post_timestep</definition>
        <argsstring>(int iteration)=0</argsstring>
        <name>post_timestep</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>iteration</declname>
        </param>
        <briefdescription>
<para>Contains operations to be done after a timestep. This is a pure virtual function and hence MUST be implemented by derived classes. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="165" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a6c4e273ed6a867d2da0dbf8ae325c82a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::AmrLevel::postCoarseTimeStep</definition>
        <argsstring>(Real time)</argsstring>
        <name>postCoarseTimeStep</name>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <briefdescription>
<para>Contains operations to be done only after a full coarse timestep. The default implementation does nothing. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="170" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="36" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1afc4f639ee0e05fd9a827db22694941a0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex::AmrLevel::post_restart</definition>
        <argsstring>()</argsstring>
        <name>post_restart</name>
        <briefdescription>
<para>Operations to be done after restart. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="174" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="174" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a0289a6cdc3349c2c0b778cc25901e364" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void amrex::AmrLevel::post_regrid</definition>
        <argsstring>(int lbase, int new_finest)=0</argsstring>
        <name>post_regrid</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lbase</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>new_finest</declname>
        </param>
        <briefdescription>
<para>Operations to be done after regridding This is a pure virtual function and hence MUST be implemented by derived classes. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="180" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1ac7f38ed4057c3c789e73567e1f455ccb" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void amrex::AmrLevel::post_init</definition>
        <argsstring>(Real stop_time)=0</argsstring>
        <name>post_init</name>
        <param>
          <type>Real</type>
          <declname>stop_time</declname>
        </param>
        <briefdescription>
<para>Operations to be done after initialization. This is a pure virtual function and hence MUST be implemented by derived classes. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="187" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a5d15ca0da28ca003355c6f45b5cb1cdd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>virtual int amrex::AmrLevel::okToContinue</definition>
        <argsstring>()</argsstring>
        <name>okToContinue</name>
        <briefdescription>
<para>Is it ok to continue the calculation? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="191" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="191" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1aa1a00039cf415f21002bec0bc15342ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::AmrLevel::okToRegrid</definition>
        <argsstring>()</argsstring>
        <name>okToRegrid</name>
        <briefdescription>
<para>Should I regrid with this level as base level? This test is only evaluated if regrid_int &gt; 0 and level_count &gt;= regrid_int as well. Defaults to true. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="197" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="1974" bodyend="1977"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a862d5c3479aee494a516f53ea70fea0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void amrex::AmrLevel::initData</definition>
        <argsstring>()=0</argsstring>
        <name>initData</name>
        <briefdescription>
<para>Init grid data at problem start-up. This is a pure virtual function and hence MUST be implemented by derived classes. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="203" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a5b311a4d4139cce9025d1c41d28586b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::AmrLevel::setTimeLevel</definition>
        <argsstring>(Real time, Real dt_old, Real dt_new)</argsstring>
        <name>setTimeLevel</name>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dt_old</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dt_new</declname>
        </param>
        <briefdescription>
<para>Set the time levels of state data. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="205" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="469" bodyend="477"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a6508a7e48f0d9da16e52fe4c79917ed3" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::AmrLevel::allocOldData</definition>
        <argsstring>()</argsstring>
        <name>allocOldData</name>
        <briefdescription>
<para>Alloc space for old time data. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="209" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="570" bodyend="576"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a56805171637298d888a0e5215bab4e82" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::AmrLevel::removeOldData</definition>
        <argsstring>()</argsstring>
        <name>removeOldData</name>
        <briefdescription>
<para>Delete old-time data. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="211" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="579" bodyend="585"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a1e14a83038675d42ed7065b0262bc2a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void amrex::AmrLevel::init</definition>
        <argsstring>(AmrLevel &amp;old)=0</argsstring>
        <name>init</name>
        <param>
          <type><ref refid="classamrex_1_1AmrLevel" kindref="compound">AmrLevel</ref> &amp;</type>
          <declname>old</declname>
        </param>
        <briefdescription>
<para>Init data on this level from another <ref refid="classamrex_1_1AmrLevel" kindref="compound">AmrLevel</ref> (during regrid). This is a pure virtual function and hence MUST be implemented by derived classes. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="217" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1ae6c24e645074589f76ff10eb4c37c8a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void amrex::AmrLevel::init</definition>
        <argsstring>()=0</argsstring>
        <name>init</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Init data on this level after regridding if old <ref refid="classamrex_1_1AmrLevel" kindref="compound">AmrLevel</ref> did not previously exist. This is a pure virtual function and hence MUST be implemented by derived classes. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="223" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a0aa73b17e9be18d811a21128c8c2f5f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::AmrLevel::reset</definition>
        <argsstring>()</argsstring>
        <name>reset</name>
        <briefdescription>
<para>Reset data to initial time by swapping new and old time data. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="225" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="588" bodyend="594"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a18159b17b5d40999e3f38474e53f23ff" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::AmrLevel::Level</definition>
        <argsstring>() const noexcept</argsstring>
        <name>Level</name>
        <briefdescription>
<para>Returns this <ref refid="classamrex_1_1AmrLevel" kindref="compound">AmrLevel</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="227" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="227" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a7dcb930627bd80227fb86468425bd2d0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const BoxArray &amp;</type>
        <definition>const BoxArray&amp; amrex::AmrLevel::boxArray</definition>
        <argsstring>() const noexcept</argsstring>
        <name>boxArray</name>
        <briefdescription>
<para>List of grids at this level. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="229" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="229" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1ad3cf13198c2fc19f4d692b5282b1ddc5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const BoxArray &amp;</type>
        <definition>const BoxArray &amp; amrex::AmrLevel::getEdgeBoxArray</definition>
        <argsstring>(int dir) const noexcept</argsstring>
        <name>getEdgeBoxArray</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="230" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="618" bodyend="626"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a5f0a9f5d2c0e0733ad3cbbda47912480" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const BoxArray &amp;</type>
        <definition>const BoxArray &amp; amrex::AmrLevel::getNodalBoxArray</definition>
        <argsstring>() const noexcept</argsstring>
        <name>getNodalBoxArray</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="231" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="629" bodyend="636"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a0d63aa23ccf6091e7af223a9b91569e9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
        <definition>const DistributionMapping&amp; amrex::AmrLevel::DistributionMap</definition>
        <argsstring>() const noexcept</argsstring>
        <name>DistributionMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="233" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="233" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a1a8e1ff322aee598d7b72877b272545e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &gt; &amp;</type>
        <definition>const FabFactory&lt;FArrayBox&gt;&amp; amrex::AmrLevel::Factory</definition>
        <argsstring>() const noexcept</argsstring>
        <name>Factory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="235" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="235" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1ae93e34dd07b1784fc7fe902331d232b2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::AmrLevel::numGrids</definition>
        <argsstring>() const noexcept</argsstring>
        <name>numGrids</name>
        <briefdescription>
<para>Number of grids at this level. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="237" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="237" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1aa9666a2babd9d59a595a2c3695f38f00" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::AmrLevel::numStates</definition>
        <argsstring>() const noexcept</argsstring>
        <name>numStates</name>
        <briefdescription>
<para>Number of states at this level. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="239" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="239" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1af81c3f65acdb48fa02f25a43b98baee7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
        <definition>const Box&amp; amrex::AmrLevel::Domain</definition>
        <argsstring>() const noexcept</argsstring>
        <name>Domain</name>
        <briefdescription>
<para>Returns the indices defining physical domain. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="241" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="241" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1ac66753a2ff2df956a5df08dd6cb9f81a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::AmrLevel::nStep</definition>
        <argsstring>() const noexcept</argsstring>
        <name>nStep</name>
        <briefdescription>
<para>Timestep n at this level. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="243" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="243" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1ad535ebc3896c9f8c1ea3e6530ffc070e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
        <definition>const Geometry&amp; amrex::AmrLevel::Geom</definition>
        <argsstring>() const noexcept</argsstring>
        <name>Geom</name>
        <briefdescription>
<para>Returns the geometry object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="245" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="245" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a3fb007c5f97c38ef4515b3a74d6873fa" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
        <definition>const IntVect&amp; amrex::AmrLevel::fineRatio</definition>
        <argsstring>() const noexcept</argsstring>
        <name>fineRatio</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="247" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="247" bodyend="247"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a0d87c01c6118a83ca5707b4d0ccd3bc0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Long</type>
        <definition>Long amrex::AmrLevel::countCells</definition>
        <argsstring>() const noexcept</argsstring>
        <name>countCells</name>
        <briefdescription>
<para>Returns number of cells on level. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="249" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="496" bodyend="499"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1afd13b08745699794f3a991500e901974" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const BoxArray &amp;</type>
        <definition>const BoxArray &amp; amrex::AmrLevel::getAreaNotToTag</definition>
        <argsstring>() noexcept</argsstring>
        <name>getAreaNotToTag</name>
        <briefdescription>
<para>Get the area not to tag. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="252" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="2149" bodyend="2152"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a804883955eae48bd6992fb770324a981" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
        <definition>const Box &amp; amrex::AmrLevel::getAreaToTag</definition>
        <argsstring>() noexcept</argsstring>
        <name>getAreaToTag</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="253" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="2154" bodyend="2157"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a7a6ce272412a601c03330e55de170ea8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::AmrLevel::constructAreaNotToTag</definition>
        <argsstring>()</argsstring>
        <name>constructAreaNotToTag</name>
        <briefdescription>
<para>Constuct the area not to tag. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="255" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="2164" bodyend="2198"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1aca274822a300bceaaa023cc330d441ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::AmrLevel::setAreaNotToTag</definition>
        <argsstring>(BoxArray &amp;ba) noexcept</argsstring>
        <name>setAreaNotToTag</name>
        <param>
          <type>BoxArray &amp;</type>
          <declname>ba</declname>
        </param>
        <briefdescription>
<para>Set the area not to tag. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="257" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="2159" bodyend="2162"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a75c6f30a5526b2d5dbbb24646f71dc8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void amrex::AmrLevel::errorEst</definition>
        <argsstring>(TagBoxArray &amp;tb, int clearval, int tagval, Real time, int n_error_buf=0, int ngrow=0)=0</argsstring>
        <name>errorEst</name>
        <param>
          <type><ref refid="classamrex_1_1TagBoxArray" kindref="compound">TagBoxArray</ref> &amp;</type>
          <declname>tb</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>clearval</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>tagval</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n_error_buf</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngrow</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Error estimation for regridding. This is a pure virtual function and hence MUST be implemented by derived classes. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="263" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1ac3c7ade82a9bc4d91ae21e8a7b359178" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::AmrLevel::FillCoarsePatch</definition>
        <argsstring>(MultiFab &amp;dest, int dcomp, Real time, int state_idx, int scomp, int ncomp, int nghost=0)</argsstring>
        <name>FillCoarsePatch</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>state_idx</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Interpolate from coarse level to the valid area in dest. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="270" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="1510" bodyend="1625"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a2f324e3977de1beef5d204c04be51f4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::AmrLevel::setPhysBoundaryValues</definition>
        <argsstring>(FArrayBox &amp;dest, int state_indx, Real time, int dest_comp, int src_comp, int num_comp)</argsstring>
        <name>setPhysBoundaryValues</name>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>state_indx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dest_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <briefdescription>
<para>Function to set physical boundary conditions. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="278" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="639" bodyend="654"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a2d67ff78f28ebc3850bda9ca476b7f9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &gt;</type>
        <definition>std::unique_ptr&lt; MultiFab &gt; amrex::AmrLevel::derive</definition>
        <argsstring>(const std::string &amp;name, Real time, int ngrow)</argsstring>
        <name>derive</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngrow</declname>
        </param>
        <briefdescription>
<para>Returns a <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> containing the derived data for this level. The user is responsible for deleting this pointer when done with it. If ngrow&gt;0 the <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> is built on the appropriately grown BoxArray. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="290" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="1628" bodyend="1782"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1aa57cb16059880124adbd17cba52c843d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::AmrLevel::derive</definition>
        <argsstring>(const std::string &amp;name, Real time, MultiFab &amp;mf, int dcomp)</argsstring>
        <name>derive</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <briefdescription>
<para>This version of <ref refid="classamrex_1_1AmrLevel_1a2d67ff78f28ebc3850bda9ca476b7f9c" kindref="member">derive()</ref> fills the dcomp&apos;th component of mf with the derived quantity. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="297" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="1785" bodyend="1932"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a9d26097cf45be9f3a69ea6a48e9bfabd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1StateData" kindref="compound">StateData</ref> &amp;</type>
        <definition>StateData&amp; amrex::AmrLevel::get_state_data</definition>
        <argsstring>(int state_indx) noexcept</argsstring>
        <name>get_state_data</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>state_indx</declname>
        </param>
        <briefdescription>
<para>State data object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="302" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="302" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a382aab120a9106f10ca000c930aa3bb4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
        <definition>MultiFab&amp; amrex::AmrLevel::get_old_data</definition>
        <argsstring>(int state_indx) noexcept</argsstring>
        <name>get_old_data</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>state_indx</declname>
        </param>
        <briefdescription>
<para>State data at old time. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="304" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="304" bodyend="304"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a699c7036091ffba601be980e985f12b2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
        <definition>const MultiFab&amp; amrex::AmrLevel::get_old_data</definition>
        <argsstring>(int state_indx) const noexcept</argsstring>
        <name>get_old_data</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>state_indx</declname>
        </param>
        <briefdescription>
<para>State data at old time. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="306" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="306" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1aaa28de2de47b2c2cb6fc60a0faa6f35b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
        <definition>MultiFab&amp; amrex::AmrLevel::get_new_data</definition>
        <argsstring>(int state_indx) noexcept</argsstring>
        <name>get_new_data</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>state_indx</declname>
        </param>
        <briefdescription>
<para>State data at new time. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="308" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="308" bodyend="308"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a0a3e47884145cbdb469ba13d9c93d80e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
        <definition>const MultiFab&amp; amrex::AmrLevel::get_new_data</definition>
        <argsstring>(int state_indx) const noexcept</argsstring>
        <name>get_new_data</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>state_indx</declname>
        </param>
        <briefdescription>
<para>State data at new time. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="310" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="310" bodyend="310"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a89ed82244401ebc45c450909562445d8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::AmrLevel::postStepRegrid</definition>
        <argsstring>() noexcept</argsstring>
        <name>postStepRegrid</name>
        <briefdescription>
<para>Returns whether or not we want a post-timestep regrid. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="316" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="316" bodyend="316"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a3740e0877382738d1cd8d382909ef855" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::AmrLevel::setPostStepRegrid</definition>
        <argsstring>(int new_val) noexcept</argsstring>
        <name>setPostStepRegrid</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>new_val</declname>
        </param>
        <briefdescription>
<para>Sets a new value for the post-timestep regrid trigger. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="318" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="318" bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a69fdf4e347142373696281d9269c6799" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::AmrLevel::UpdateDistributionMaps</definition>
        <argsstring>(DistributionMapping &amp;dmap)</argsstring>
        <name>UpdateDistributionMaps</name>
        <param>
          <type><ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dmap</declname>
        </param>
        <briefdescription>
<para>Update the distribution maps in <ref refid="classamrex_1_1StateData" kindref="compound">StateData</ref> based on the size of the map. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="321" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="1936" bodyend="1948"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a13fac03f8f84f602aea857521063b4b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
        <definition>Vector&lt; int &gt; amrex::AmrLevel::getBCArray</definition>
        <argsstring>(int State_Type, int gridno, int scomp, int ncomp)</argsstring>
        <name>getBCArray</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>State_Type</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>gridno</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
<para>Boundary condition access function. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="324" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="1953" bodyend="1971"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a5f84c93c82667982bbec8f9215b630af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
        <definition>MultiFab &amp; amrex::AmrLevel::get_data</definition>
        <argsstring>(int state_indx, Real time) noexcept</argsstring>
        <name>get_data</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>state_indx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <briefdescription>
<para>Get state data at specified index and time. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="329" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="597" bodyend="615"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1adea5b76b420f0a2ccd2852d66301d376" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::AmrLevel::set_preferred_boundary_values</definition>
        <argsstring>(MultiFab &amp;S, int state_index, int scomp, int dcomp, int ncomp, Real time) const</argsstring>
        <name>set_preferred_boundary_values</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>S</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>state_index</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <briefdescription>
<para>Hack to allow override of (non-fine-fine) fillpatched boundary data. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="331" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="49" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a2e78f3a4398272855b0a9ac3becaefd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::AmrLevel::manual_tags_placement</definition>
        <argsstring>(TagBoxArray &amp;tags, const Vector&lt; IntVect &gt; &amp;bf_lev)</argsstring>
        <name>manual_tags_placement</name>
        <param>
          <type><ref refid="classamrex_1_1TagBoxArray" kindref="compound">TagBoxArray</ref> &amp;</type>
          <declname>tags</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &gt; &amp;</type>
          <declname>bf_lev</declname>
        </param>
        <briefdescription>
<para>Called in grid_places after other tagging routines to modify the list of tagged points. Default implementation does nothing. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="341" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="64" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a8023d9fbf7106fe39977f43d1b07460e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::AmrLevel::setPlotVariables</definition>
        <argsstring>()</argsstring>
        <name>setPlotVariables</name>
        <briefdescription>
<para>Modify list of variables to be plotted. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="344" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="1980" bodyend="2035"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1adf299b915ff9411e6684762c72da84bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::AmrLevel::setSmallPlotVariables</definition>
        <argsstring>()</argsstring>
        <name>setSmallPlotVariables</name>
        <briefdescription>
<para>Modify list of variables to be plotted. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="346" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="2038" bodyend="2094"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a03b21d394e621b009b473c427b4769d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>Real</type>
        <definition>Real amrex::AmrLevel::estimateWork</definition>
        <argsstring>()</argsstring>
        <name>estimateWork</name>
        <briefdescription>
<para>Estimate the amount of work required to advance Just this level based on the number of cells. This estimate can be overwritten with different methods. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="352" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="2132" bodyend="2135"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a1c91cb169c86fd95b76b5742687ad949" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>virtual int amrex::AmrLevel::WorkEstType</definition>
        <argsstring>()</argsstring>
        <name>WorkEstType</name>
        <briefdescription>
<para>Which state data type is for work estimates? -1 means none. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="355" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="355" bodyend="355"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a58f60bcd444acf5b3acfe94db3981969" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1AmrLevel_1a83fa691ff414eb69f75eb6ae1f61b33a" kindref="member">TimeLevel</ref></type>
        <definition>AmrLevel::TimeLevel amrex::AmrLevel::which_time</definition>
        <argsstring>(int state_indx, Real time) const noexcept</argsstring>
        <name>which_time</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>state_indx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <briefdescription>
<para>Returns one the TimeLevel enums. Asserts that time is between AmrOldTime and AmrNewTime. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="361" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="2097" bodyend="2129"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a1de622e094b4e64e2491a82a3acefc1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool amrex::AmrLevel::writePlotNow</definition>
        <argsstring>()</argsstring>
        <name>writePlotNow</name>
        <briefdescription>
<para>Does the <ref refid="classamrex_1_1AmrLevel" kindref="compound">AmrLevel</ref> want <ref refid="classamrex_1_1Amr" kindref="compound">Amr</ref> to write a plotfile now? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="364" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="2138" bodyend="2141"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a2972b42fa723220283b8275fcd7a8be8" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool amrex::AmrLevel::writeSmallPlotNow</definition>
        <argsstring>()</argsstring>
        <name>writeSmallPlotNow</name>
        <briefdescription>
<para>Does the <ref refid="classamrex_1_1AmrLevel" kindref="compound">AmrLevel</ref> want <ref refid="classamrex_1_1Amr" kindref="compound">Amr</ref> to write a small plotfile now? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="367" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="2144" bodyend="2147"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1acaf1b5936e81691794578618126d813d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::AmrLevel::isStateVariable</definition>
        <argsstring>(const std::string &amp;name, int &amp;state_indx, int &amp;ncomp)</argsstring>
        <name>isStateVariable</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &amp;</type>
          <declname>state_indx</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &amp;</type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
<para>Is name a state variable? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="123" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="480" bodyend="493"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1ac96bd5573c5f63e798aa682a7d5756ae" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::AmrLevel::FlushFPICache</definition>
        <argsstring>()</argsstring>
        <name>FlushFPICache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="127" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a4092681e4db89552b5a53b0d1bb144fa" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1DescriptorList" kindref="compound">DescriptorList</ref> &amp;</type>
        <definition>static const DescriptorList&amp; amrex::AmrLevel::get_desc_lst</definition>
        <argsstring>() noexcept</argsstring>
        <name>get_desc_lst</name>
        <briefdescription>
<para>Returns list of Descriptors. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="312" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="312" bodyend="312"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a7ef50123ae8e520914847e15973b104a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1DeriveList" kindref="compound">DeriveList</ref> &amp;</type>
        <definition>DeriveList &amp; amrex::AmrLevel::get_derive_lst</definition>
        <argsstring>() noexcept</argsstring>
        <name>get_derive_lst</name>
        <briefdescription>
<para>Returns list of derived variables. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="314" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="58" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a55c1a2d0040ba28bf022fb293113a5f2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::AmrLevel::FillPatch</definition>
        <argsstring>(AmrLevel &amp;amrlevel, MultiFab &amp;leveldata, int boxGrow, Real time, int index, int scomp, int ncomp, int dcomp=0)</argsstring>
        <name>FillPatch</name>
        <param>
          <type><ref refid="classamrex_1_1AmrLevel" kindref="compound">AmrLevel</ref> &amp;</type>
          <declname>amrlevel</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>leveldata</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>boxGrow</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="374" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="2201" bodyend="2215"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1aa72cce79d9f341c7f9a11addfcaec95f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::AmrLevel::FillPatchAdd</definition>
        <argsstring>(AmrLevel &amp;amrlevel, MultiFab &amp;leveldata, int boxGrow, Real time, int index, int scomp, int ncomp, int dcomp=0)</argsstring>
        <name>FillPatchAdd</name>
        <param>
          <type><ref refid="classamrex_1_1AmrLevel" kindref="compound">AmrLevel</ref> &amp;</type>
          <declname>amrlevel</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>leveldata</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>boxGrow</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="383" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="2218" bodyend="2232"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1ae244321a30ba83806ce8204b7c437480" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::AmrLevel::AmrLevel</definition>
        <argsstring>() noexcept</argsstring>
        <name>AmrLevel</name>
        <briefdescription>
<para>The constructors <ndash/> for derived classes. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="407" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="68" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a61c4e9f6256e714a271a0b1286961c96" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::AmrLevel::AmrLevel</definition>
        <argsstring>(Amr &amp;papa, int lev, const Geometry &amp;level_geom, const BoxArray &amp;bl, const DistributionMapping &amp;dm, Real time)</argsstring>
        <name>AmrLevel</name>
        <param>
          <type><ref refid="classamrex_1_1Amr" kindref="compound">Amr</ref> &amp;</type>
          <declname>papa</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>level_geom</declname>
        </param>
        <param>
          <type>const BoxArray &amp;</type>
          <declname>bl</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="409" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="77" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1addb399ac982bc95a1cb0456447f13e0e" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::AmrLevel::AmrLevel</definition>
        <argsstring>(const AmrLevel &amp;)=delete</argsstring>
        <name>AmrLevel</name>
        <param>
          <type>const <ref refid="classamrex_1_1AmrLevel" kindref="compound">AmrLevel</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="416" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a43ed6508c5a9223cd52f13bb3fb315e7" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1AmrLevel" kindref="compound">AmrLevel</ref> &amp;</type>
        <definition>AmrLevel&amp; amrex::AmrLevel::operator=</definition>
        <argsstring>(const AmrLevel &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classamrex_1_1AmrLevel" kindref="compound">AmrLevel</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="417" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a954293930715e389153026f726dbd960" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::AmrLevel::finishConstructor</definition>
        <argsstring>()</argsstring>
        <name>finishConstructor</name>
        <briefdescription>
<para>Common code used by all constructors. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="420" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="466" bodyend="466"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Virtual base class for managing individual levels. <ref refid="classamrex_1_1AmrLevel" kindref="compound">AmrLevel</ref> functions both as a container for state data on a level and also manages the advancement of data in time. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="274">
        <label>amrex::LevelBld</label>
        <link refid="classamrex_1_1LevelBld"/>
      </node>
      <node id="249">
        <label>amrex::AmrLevel</label>
        <link refid="classamrex_1_1AmrLevel"/>
        <childnode refid="250" relation="usage">
          <edgelabel>derive_lst</edgelabel>
        </childnode>
        <childnode refid="251" relation="usage">
          <edgelabel>parent</edgelabel>
        </childnode>
        <childnode refid="277" relation="usage">
          <edgelabel>geom</edgelabel>
        </childnode>
        <childnode refid="283" relation="usage">
          <edgelabel>state</edgelabel>
        </childnode>
        <childnode refid="285" relation="usage">
          <edgelabel>desc_lst</edgelabel>
        </childnode>
        <childnode refid="288" relation="usage">
          <edgelabel>dmap</edgelabel>
        </childnode>
        <childnode refid="281" relation="usage">
          <edgelabel>fine_ratio</edgelabel>
          <edgelabel>crse_ratio</edgelabel>
        </childnode>
        <childnode refid="280" relation="usage">
          <edgelabel>m_AreaToTag</edgelabel>
        </childnode>
      </node>
      <node id="271">
        <label>std::vector&lt; std::unique_ptr&lt; std::fstream &gt;, std::allocator&lt; std::unique_ptr&lt; std::fstream &gt; &gt; &gt;</label>
      </node>
      <node id="250">
        <label>amrex::DeriveList</label>
        <link refid="classamrex_1_1DeriveList"/>
      </node>
      <node id="281">
        <label>amrex::IntVect</label>
        <link refid="classamrex_1_1IntVect"/>
        <childnode refid="281" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
      </node>
      <node id="267">
        <label>std::vector&lt; std::unique_ptr&lt; amrex::AmrLevel &gt;, std::allocator&lt; std::unique_ptr&lt; amrex::AmrLevel &gt; &gt; &gt;</label>
      </node>
      <node id="266">
        <label>amrex::Vector&lt; std::unique_ptr&lt; amrex::AmrLevel &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="267" relation="public-inheritance">
        </childnode>
      </node>
      <node id="257">
        <label>Real</label>
      </node>
      <node id="263">
        <label>std::vector&lt; amrex::Geometry, std::allocator&lt; amrex::Geometry &gt; &gt;</label>
      </node>
      <node id="252">
        <label>amrex::AmrCore</label>
        <link refid="classamrex_1_1AmrCore"/>
        <childnode refid="253" relation="public-inheritance">
        </childnode>
      </node>
      <node id="287">
        <label>std::vector&lt; std::unique_ptr&lt; amrex::StateDescriptor &gt;, std::allocator&lt; std::unique_ptr&lt; amrex::StateDescriptor &gt; &gt; &gt;</label>
      </node>
      <node id="269">
        <label>std::vector&lt; std::string, std::allocator&lt; std::string &gt; &gt;</label>
      </node>
      <node id="260">
        <label>amrex::Vector&lt; amrex::DistributionMapping &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="261" relation="public-inheritance">
        </childnode>
      </node>
      <node id="272">
        <label>amrex::Vector&lt; int &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="273" relation="public-inheritance">
        </childnode>
      </node>
      <node id="275">
        <label>string</label>
      </node>
      <node id="251">
        <label>amrex::Amr</label>
        <link refid="classamrex_1_1Amr"/>
        <childnode refid="252" relation="public-inheritance">
        </childnode>
        <childnode refid="258" relation="usage">
          <edgelabel>regrid_ba</edgelabel>
          <edgelabel>initial_ba</edgelabel>
        </childnode>
        <childnode refid="264" relation="usage">
          <edgelabel>dt_min</edgelabel>
          <edgelabel>dt_level</edgelabel>
        </childnode>
        <childnode refid="266" relation="usage">
          <edgelabel>amr_level</edgelabel>
        </childnode>
        <childnode refid="268" relation="usage">
          <edgelabel>datalogname</edgelabel>
        </childnode>
        <childnode refid="270" relation="usage">
          <edgelabel>datalog</edgelabel>
        </childnode>
        <childnode refid="272" relation="usage">
          <edgelabel>n_cycle</edgelabel>
          <edgelabel>level_count</edgelabel>
          <edgelabel>regrid_int</edgelabel>
          <edgelabel>level_steps</edgelabel>
        </childnode>
        <childnode refid="274" relation="usage">
          <edgelabel>levelbld</edgelabel>
        </childnode>
        <childnode refid="275" relation="usage">
          <edgelabel>small_plot_file_root</edgelabel>
          <edgelabel>initial_grids_file</edgelabel>
          <edgelabel>check_file_root</edgelabel>
          <edgelabel>regrid_grids_file</edgelabel>
          <edgelabel>subcycling_mode</edgelabel>
          <edgelabel>plot_file_root</edgelabel>
          <edgelabel>restart_chkfile</edgelabel>
          <edgelabel>probin_file</edgelabel>
          <edgelabel>restart_pltfile</edgelabel>
        </childnode>
        <childnode refid="276" relation="usage">
          <edgelabel>gridlog</edgelabel>
          <edgelabel>runlog</edgelabel>
          <edgelabel>runlog_terse</edgelabel>
        </childnode>
        <childnode refid="257" relation="usage">
          <edgelabel>check_per</edgelabel>
          <edgelabel>start_time</edgelabel>
          <edgelabel>small_plot_per</edgelabel>
          <edgelabel>plot_log_per</edgelabel>
          <edgelabel>cumtime</edgelabel>
          <edgelabel>plot_per</edgelabel>
          <edgelabel>small_plot_log_per</edgelabel>
          <edgelabel>loadbalance_max_fac</edgelabel>
        </childnode>
      </node>
      <node id="265">
        <label>std::vector&lt; Real, std::allocator&lt; Real &gt; &gt;</label>
      </node>
      <node id="261">
        <label>std::vector&lt; amrex::DistributionMapping, std::allocator&lt; amrex::DistributionMapping &gt; &gt;</label>
      </node>
      <node id="255">
        <label>amrex::Vector&lt; amrex::IntVect &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="256" relation="public-inheritance">
        </childnode>
      </node>
      <node id="270">
        <label>amrex::Vector&lt; std::unique_ptr&lt; std::fstream &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="271" relation="public-inheritance">
        </childnode>
      </node>
      <node id="273">
        <label>std::vector&lt; int, std::allocator&lt; int &gt; &gt;</label>
      </node>
      <node id="258">
        <label>amrex::Vector&lt; BoxArray &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="259" relation="public-inheritance">
        </childnode>
      </node>
      <node id="283">
        <label>amrex::Vector&lt; amrex::StateData &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="284" relation="public-inheritance">
        </childnode>
      </node>
      <node id="279">
        <label>amrex::RealBox</label>
        <link refid="classamrex_1_1RealBox"/>
        <childnode refid="257" relation="usage">
          <edgelabel>xhi</edgelabel>
          <edgelabel>xlo</edgelabel>
        </childnode>
      </node>
      <node id="280">
        <label>amrex::Box</label>
        <link refid="classamrex_1_1Box"/>
        <childnode refid="281" relation="usage">
          <edgelabel>bigend</edgelabel>
          <edgelabel>smallend</edgelabel>
        </childnode>
        <childnode refid="282" relation="usage">
          <edgelabel>btype</edgelabel>
        </childnode>
      </node>
      <node id="276">
        <label>ofstream</label>
      </node>
      <node id="284">
        <label>std::vector&lt; amrex::StateData, std::allocator&lt; amrex::StateData &gt; &gt;</label>
      </node>
      <node id="278">
        <label>amrex::CoordSys</label>
        <link refid="classamrex_1_1CoordSys"/>
        <childnode refid="257" relation="usage">
          <edgelabel>inv_dx</edgelabel>
          <edgelabel>offset</edgelabel>
          <edgelabel>dx</edgelabel>
        </childnode>
      </node>
      <node id="282">
        <label>amrex::IndexType</label>
        <link refid="classamrex_1_1IndexType"/>
      </node>
      <node id="286">
        <label>amrex::Vector&lt; std::unique_ptr&lt; amrex::StateDescriptor &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="287" relation="public-inheritance">
        </childnode>
      </node>
      <node id="254">
        <label>amrex::AmrInfo</label>
        <link refid="structamrex_1_1AmrInfo"/>
        <childnode refid="255" relation="usage">
          <edgelabel>blocking_factor</edgelabel>
          <edgelabel>n_error_buf</edgelabel>
          <edgelabel>max_grid_size</edgelabel>
          <edgelabel>ref_ratio</edgelabel>
        </childnode>
        <childnode refid="257" relation="usage">
          <edgelabel>grid_eff</edgelabel>
        </childnode>
      </node>
      <node id="268">
        <label>amrex::Vector&lt; std::string &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="269" relation="public-inheritance">
        </childnode>
      </node>
      <node id="285">
        <label>amrex::DescriptorList</label>
        <link refid="classamrex_1_1DescriptorList"/>
        <childnode refid="286" relation="usage">
          <edgelabel>desc</edgelabel>
        </childnode>
      </node>
      <node id="259">
        <label>std::vector&lt; BoxArray, std::allocator&lt; BoxArray &gt; &gt;</label>
      </node>
      <node id="288">
        <label>amrex::DistributionMapping</label>
        <link refid="classamrex_1_1DistributionMapping"/>
      </node>
      <node id="256">
        <label>std::vector&lt; amrex::IntVect, std::allocator&lt; amrex::IntVect &gt; &gt;</label>
      </node>
      <node id="264">
        <label>amrex::Vector&lt; Real &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="265" relation="public-inheritance">
        </childnode>
      </node>
      <node id="277">
        <label>amrex::Geometry</label>
        <link refid="classamrex_1_1Geometry"/>
        <childnode refid="278" relation="public-inheritance">
        </childnode>
        <childnode refid="279" relation="usage">
          <edgelabel>roundoff_domain</edgelabel>
          <edgelabel>prob_domain</edgelabel>
        </childnode>
        <childnode refid="280" relation="usage">
          <edgelabel>domain</edgelabel>
        </childnode>
      </node>
      <node id="262">
        <label>amrex::Vector&lt; amrex::Geometry &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="263" relation="public-inheritance">
        </childnode>
      </node>
      <node id="253">
        <label>amrex::AmrMesh</label>
        <link refid="classamrex_1_1AmrMesh"/>
        <childnode refid="254" relation="protected-inheritance">
        </childnode>
        <childnode refid="258" relation="usage">
          <edgelabel>grids</edgelabel>
        </childnode>
        <childnode refid="260" relation="usage">
          <edgelabel>dmap</edgelabel>
        </childnode>
        <childnode refid="262" relation="usage">
          <edgelabel>geom</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="39" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="38" bodyend="449"/>
    <listofallmembers>
      <member refid="classamrex_1_1AmrLevel_1a96b6f33d22c9341b1cff894f17555f47" prot="public" virt="pure-virtual"><scope>amrex::AmrLevel</scope><name>advance</name></member>
      <member refid="classamrex_1_1AmrLevel_1a6508a7e48f0d9da16e52fe4c79917ed3" prot="public" virt="virtual"><scope>amrex::AmrLevel</scope><name>allocOldData</name></member>
      <member refid="classamrex_1_1AmrLevel_1a1625024217a38ec9637cf3a428164c71" prot="private" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>Amr</name></member>
      <member refid="classamrex_1_1AmrLevel_1a83fa691ff414eb69f75eb6ae1f61b33aa26c31c2a7f0ffe418eca566dd60dcf9a" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>Amr1QtrTime</name></member>
      <member refid="classamrex_1_1AmrLevel_1a83fa691ff414eb69f75eb6ae1f61b33aae97e640066fc5c0776f300447bec0517" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>Amr3QtrTime</name></member>
      <member refid="classamrex_1_1AmrLevel_1a83fa691ff414eb69f75eb6ae1f61b33aabebff412ae8d5766104330cb143e91c9" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>AmrHalfTime</name></member>
      <member refid="classamrex_1_1AmrLevel_1ae244321a30ba83806ce8204b7c437480" prot="protected" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>AmrLevel</name></member>
      <member refid="classamrex_1_1AmrLevel_1a61c4e9f6256e714a271a0b1286961c96" prot="protected" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>AmrLevel</name></member>
      <member refid="classamrex_1_1AmrLevel_1addb399ac982bc95a1cb0456447f13e0e" prot="protected" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>AmrLevel</name></member>
      <member refid="classamrex_1_1AmrLevel_1a83fa691ff414eb69f75eb6ae1f61b33aa9e86be887aaeac42a556e1f493337472" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>AmrNewTime</name></member>
      <member refid="classamrex_1_1AmrLevel_1a83fa691ff414eb69f75eb6ae1f61b33aa42553bff8bf17dc01b76ff8e44f3d902" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>AmrOldTime</name></member>
      <member refid="classamrex_1_1AmrLevel_1a83fa691ff414eb69f75eb6ae1f61b33aaae1e38c840ac8908874d6775a2d8506d" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>AmrOtherTime</name></member>
      <member refid="classamrex_1_1AmrLevel_1a7dcb930627bd80227fb86468425bd2d0" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>boxArray</name></member>
      <member refid="classamrex_1_1AmrLevel_1a169bef0169afefe32db1d994d2600c69" prot="public" virt="virtual"><scope>amrex::AmrLevel</scope><name>checkPoint</name></member>
      <member refid="classamrex_1_1AmrLevel_1a91b3bc1707aa307c5eeb73d9e2bfdd80" prot="public" virt="virtual"><scope>amrex::AmrLevel</scope><name>checkPointPost</name></member>
      <member refid="classamrex_1_1AmrLevel_1aa8953b789fe7af91082c2fefcced1a16" prot="public" virt="virtual"><scope>amrex::AmrLevel</scope><name>checkPointPre</name></member>
      <member refid="classamrex_1_1AmrLevel_1a252f7123d2f0a98351bc7b39c32b3152" prot="public" virt="pure-virtual"><scope>amrex::AmrLevel</scope><name>computeInitialDt</name></member>
      <member refid="classamrex_1_1AmrLevel_1a2ca2263f59a50956ec37ce72a4a02767" prot="public" virt="pure-virtual"><scope>amrex::AmrLevel</scope><name>computeNewDt</name></member>
      <member refid="classamrex_1_1AmrLevel_1a7a6ce272412a601c03330e55de170ea8" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>constructAreaNotToTag</name></member>
      <member refid="classamrex_1_1AmrLevel_1a0d87c01c6118a83ca5707b4d0ccd3bc0" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>countCells</name></member>
      <member refid="classamrex_1_1AmrLevel_1a962f9d201153832198014fba04698410" prot="public" virt="virtual"><scope>amrex::AmrLevel</scope><name>CreateLevelDirectory</name></member>
      <member refid="classamrex_1_1AmrLevel_1a7fc1ed7f6a21702c3af072650ed4de4a" prot="protected" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>crse_ratio</name></member>
      <member refid="classamrex_1_1AmrLevel_1a2d67ff78f28ebc3850bda9ca476b7f9c" prot="public" virt="virtual"><scope>amrex::AmrLevel</scope><name>derive</name></member>
      <member refid="classamrex_1_1AmrLevel_1aa57cb16059880124adbd17cba52c843d" prot="public" virt="virtual"><scope>amrex::AmrLevel</scope><name>derive</name></member>
      <member refid="classamrex_1_1AmrLevel_1a792f148ee0bb20432a4acefa1c2cac9a" prot="protected" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>derive_lst</name></member>
      <member refid="classamrex_1_1AmrLevel_1acb5f9e8c8d903d3a700d2cc11be500e5" prot="protected" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>desc_lst</name></member>
      <member refid="classamrex_1_1AmrLevel_1a0d63aa23ccf6091e7af223a9b91569e9" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>DistributionMap</name></member>
      <member refid="classamrex_1_1AmrLevel_1ab0ab7555be82910d8100d7bc3aa55d1d" prot="protected" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>dmap</name></member>
      <member refid="classamrex_1_1AmrLevel_1af81c3f65acdb48fa02f25a43b98baee7" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>Domain</name></member>
      <member refid="classamrex_1_1AmrLevel_1a7cf2da3e3135c31924af8e09fa0c8104" prot="private" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>edge_grids</name></member>
      <member refid="classamrex_1_1AmrLevel_1a75c6f30a5526b2d5dbbb24646f71dc8b" prot="public" virt="pure-virtual"><scope>amrex::AmrLevel</scope><name>errorEst</name></member>
      <member refid="classamrex_1_1AmrLevel_1a03b21d394e621b009b473c427b4769d0" prot="public" virt="virtual"><scope>amrex::AmrLevel</scope><name>estimateWork</name></member>
      <member refid="classamrex_1_1AmrLevel_1a1a8e1ff322aee598d7b72877b272545e" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>Factory</name></member>
      <member refid="classamrex_1_1AmrLevel_1ac3c7ade82a9bc4d91ae21e8a7b359178" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>FillCoarsePatch</name></member>
      <member refid="classamrex_1_1AmrLevel_1a55c1a2d0040ba28bf022fb293113a5f2" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>FillPatch</name></member>
      <member refid="classamrex_1_1AmrLevel_1aa72cce79d9f341c7f9a11addfcaec95f" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>FillPatchAdd</name></member>
      <member refid="classamrex_1_1AmrLevel_1a39d92a4048c0af0c7b1737d5c4e0c334" prot="private" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>FillPatchIterator</name></member>
      <member refid="classamrex_1_1AmrLevel_1a872278b3cad59c0978412af0cd9ec0cf" prot="private" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>FillPatchIteratorHelper</name></member>
      <member refid="classamrex_1_1AmrLevel_1a109f988dd098fdb2a6b854a742015397" prot="protected" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>fine_ratio</name></member>
      <member refid="classamrex_1_1AmrLevel_1a3fb007c5f97c38ef4515b3a74d6873fa" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>fineRatio</name></member>
      <member refid="classamrex_1_1AmrLevel_1a954293930715e389153026f726dbd960" prot="protected" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>finishConstructor</name></member>
      <member refid="classamrex_1_1AmrLevel_1ac96bd5573c5f63e798aa682a7d5756ae" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>FlushFPICache</name></member>
      <member refid="classamrex_1_1AmrLevel_1ad535ebc3896c9f8c1ea3e6530ffc070e" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>Geom</name></member>
      <member refid="classamrex_1_1AmrLevel_1a571b97b176d8618fba71f56c8b44a7c8" prot="protected" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>geom</name></member>
      <member refid="classamrex_1_1AmrLevel_1a5f84c93c82667982bbec8f9215b630af" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>get_data</name></member>
      <member refid="classamrex_1_1AmrLevel_1a7ef50123ae8e520914847e15973b104a" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>get_derive_lst</name></member>
      <member refid="classamrex_1_1AmrLevel_1a4092681e4db89552b5a53b0d1bb144fa" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>get_desc_lst</name></member>
      <member refid="classamrex_1_1AmrLevel_1aaa28de2de47b2c2cb6fc60a0faa6f35b" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>get_new_data</name></member>
      <member refid="classamrex_1_1AmrLevel_1a0a3e47884145cbdb469ba13d9c93d80e" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>get_new_data</name></member>
      <member refid="classamrex_1_1AmrLevel_1a382aab120a9106f10ca000c930aa3bb4" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>get_old_data</name></member>
      <member refid="classamrex_1_1AmrLevel_1a699c7036091ffba601be980e985f12b2" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>get_old_data</name></member>
      <member refid="classamrex_1_1AmrLevel_1a9d26097cf45be9f3a69ea6a48e9bfabd" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>get_state_data</name></member>
      <member refid="classamrex_1_1AmrLevel_1afd13b08745699794f3a991500e901974" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>getAreaNotToTag</name></member>
      <member refid="classamrex_1_1AmrLevel_1a804883955eae48bd6992fb770324a981" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>getAreaToTag</name></member>
      <member refid="classamrex_1_1AmrLevel_1a13fac03f8f84f602aea857521063b4b0" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>getBCArray</name></member>
      <member refid="classamrex_1_1AmrLevel_1ad3cf13198c2fc19f4d692b5282b1ddc5" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>getEdgeBoxArray</name></member>
      <member refid="classamrex_1_1AmrLevel_1a5f0a9f5d2c0e0733ad3cbbda47912480" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>getNodalBoxArray</name></member>
      <member refid="classamrex_1_1AmrLevel_1a5ffc98d138f381698b2a61fc6cb2ce01" prot="protected" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>grids</name></member>
      <member refid="classamrex_1_1AmrLevel_1a1e14a83038675d42ed7065b0262bc2a7" prot="public" virt="pure-virtual"><scope>amrex::AmrLevel</scope><name>init</name></member>
      <member refid="classamrex_1_1AmrLevel_1ae6c24e645074589f76ff10eb4c37c8a1" prot="public" virt="pure-virtual"><scope>amrex::AmrLevel</scope><name>init</name></member>
      <member refid="classamrex_1_1AmrLevel_1a862d5c3479aee494a516f53ea70fea0b" prot="public" virt="pure-virtual"><scope>amrex::AmrLevel</scope><name>initData</name></member>
      <member refid="classamrex_1_1AmrLevel_1acaf1b5936e81691794578618126d813d" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>isStateVariable</name></member>
      <member refid="classamrex_1_1AmrLevel_1a15535c7cc1f73df2cc3b0b720d8ab5a4" prot="protected" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>level</name></member>
      <member refid="classamrex_1_1AmrLevel_1a18159b17b5d40999e3f38474e53f23ff" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>Level</name></member>
      <member refid="classamrex_1_1AmrLevel_1a7a90e201ef6ef11f2c42fc9a0de76939" prot="protected" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>levelDirectoryCreated</name></member>
      <member refid="classamrex_1_1AmrLevel_1a7cec3a532b1d9bc6f36417ecb33b4287" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>LevelDirectoryNames</name></member>
      <member refid="classamrex_1_1AmrLevel_1aa11acf69e2d0372e204cfea5934658f6" prot="protected" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>m_AreaNotToTag</name></member>
      <member refid="classamrex_1_1AmrLevel_1a512443a06a9bee5a9c911326c65e1370" prot="protected" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>m_AreaToTag</name></member>
      <member refid="classamrex_1_1AmrLevel_1a948320fb29597814dca7906e314a2c13" prot="protected" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>m_factory</name></member>
      <member refid="classamrex_1_1AmrLevel_1a2e78f3a4398272855b0a9ac3becaefd7" prot="public" virt="virtual"><scope>amrex::AmrLevel</scope><name>manual_tags_placement</name></member>
      <member refid="classamrex_1_1AmrLevel_1a4672d7cd3c482aedb037347c1fddc0ff" prot="private" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>nodal_grids</name></member>
      <member refid="classamrex_1_1AmrLevel_1ac66753a2ff2df956a5df08dd6cb9f81a" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>nStep</name></member>
      <member refid="classamrex_1_1AmrLevel_1ae93e34dd07b1784fc7fe902331d232b2" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>numGrids</name></member>
      <member refid="classamrex_1_1AmrLevel_1aa9666a2babd9d59a595a2c3695f38f00" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>numStates</name></member>
      <member refid="classamrex_1_1AmrLevel_1a5d15ca0da28ca003355c6f45b5cb1cdd" prot="public" virt="virtual"><scope>amrex::AmrLevel</scope><name>okToContinue</name></member>
      <member refid="classamrex_1_1AmrLevel_1aa1a00039cf415f21002bec0bc15342ac" prot="public" virt="virtual"><scope>amrex::AmrLevel</scope><name>okToRegrid</name></member>
      <member refid="classamrex_1_1AmrLevel_1a43ed6508c5a9223cd52f13bb3fb315e7" prot="protected" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>operator=</name></member>
      <member refid="classamrex_1_1AmrLevel_1aeb2c20016c60209d0bc5112f262957c2" prot="protected" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>parent</name></member>
      <member refid="classamrex_1_1AmrLevel_1ac7f38ed4057c3c789e73567e1f455ccb" prot="public" virt="pure-virtual"><scope>amrex::AmrLevel</scope><name>post_init</name></member>
      <member refid="classamrex_1_1AmrLevel_1a0289a6cdc3349c2c0b778cc25901e364" prot="public" virt="pure-virtual"><scope>amrex::AmrLevel</scope><name>post_regrid</name></member>
      <member refid="classamrex_1_1AmrLevel_1afc4f639ee0e05fd9a827db22694941a0" prot="public" virt="virtual"><scope>amrex::AmrLevel</scope><name>post_restart</name></member>
      <member refid="classamrex_1_1AmrLevel_1a9ef7971fd5d7dd152886c202feb7d806" prot="protected" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>post_step_regrid</name></member>
      <member refid="classamrex_1_1AmrLevel_1ada19927c13fa73b81f7edff40cf82b41" prot="public" virt="pure-virtual"><scope>amrex::AmrLevel</scope><name>post_timestep</name></member>
      <member refid="classamrex_1_1AmrLevel_1a6c4e273ed6a867d2da0dbf8ae325c82a" prot="public" virt="virtual"><scope>amrex::AmrLevel</scope><name>postCoarseTimeStep</name></member>
      <member refid="classamrex_1_1AmrLevel_1a89ed82244401ebc45c450909562445d8" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>postStepRegrid</name></member>
      <member refid="classamrex_1_1AmrLevel_1a56805171637298d888a0e5215bab4e82" prot="public" virt="virtual"><scope>amrex::AmrLevel</scope><name>removeOldData</name></member>
      <member refid="classamrex_1_1AmrLevel_1a0aa73b17e9be18d811a21128c8c2f5f9" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>reset</name></member>
      <member refid="classamrex_1_1AmrLevel_1a05899e47b34be116fa7a9a40ecaa74ca" prot="public" virt="virtual"><scope>amrex::AmrLevel</scope><name>restart</name></member>
      <member refid="classamrex_1_1AmrLevel_1adea5b76b420f0a2ccd2852d66301d376" prot="public" virt="virtual"><scope>amrex::AmrLevel</scope><name>set_preferred_boundary_values</name></member>
      <member refid="classamrex_1_1AmrLevel_1a6560cdb555b4af1f6d5b525e1b25e4eb" prot="public" virt="virtual"><scope>amrex::AmrLevel</scope><name>set_state_in_checkpoint</name></member>
      <member refid="classamrex_1_1AmrLevel_1aca274822a300bceaaa023cc330d441ba" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>setAreaNotToTag</name></member>
      <member refid="classamrex_1_1AmrLevel_1a33b3a3f0806c790a05f39fae227042a0" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>SetLevelDirectoryCreated</name></member>
      <member refid="classamrex_1_1AmrLevel_1a2f324e3977de1beef5d204c04be51f4a" prot="public" virt="virtual"><scope>amrex::AmrLevel</scope><name>setPhysBoundaryValues</name></member>
      <member refid="classamrex_1_1AmrLevel_1a8023d9fbf7106fe39977f43d1b07460e" prot="public" virt="virtual"><scope>amrex::AmrLevel</scope><name>setPlotVariables</name></member>
      <member refid="classamrex_1_1AmrLevel_1a3740e0877382738d1cd8d382909ef855" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>setPostStepRegrid</name></member>
      <member refid="classamrex_1_1AmrLevel_1adf299b915ff9411e6684762c72da84bc" prot="public" virt="virtual"><scope>amrex::AmrLevel</scope><name>setSmallPlotVariables</name></member>
      <member refid="classamrex_1_1AmrLevel_1a5b311a4d4139cce9025d1c41d28586b1" prot="public" virt="virtual"><scope>amrex::AmrLevel</scope><name>setTimeLevel</name></member>
      <member refid="classamrex_1_1AmrLevel_1ac00306c6990dffb14241578a8f4aa281" prot="protected" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>state</name></member>
      <member refid="classamrex_1_1AmrLevel_1aafabc1e8a1b6e1b96230fbf6debe2465" prot="public" virt="virtual"><scope>amrex::AmrLevel</scope><name>thePlotFileType</name></member>
      <member refid="classamrex_1_1AmrLevel_1a83fa691ff414eb69f75eb6ae1f61b33a" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>TimeLevel</name></member>
      <member refid="classamrex_1_1AmrLevel_1a69fdf4e347142373696281d9269c6799" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>UpdateDistributionMaps</name></member>
      <member refid="classamrex_1_1AmrLevel_1a58f60bcd444acf5b3acfe94db3981969" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>which_time</name></member>
      <member refid="classamrex_1_1AmrLevel_1a1c91cb169c86fd95b76b5742687ad949" prot="public" virt="virtual"><scope>amrex::AmrLevel</scope><name>WorkEstType</name></member>
      <member refid="classamrex_1_1AmrLevel_1aac3f74f8caafcc7b7cf0d3b33480e5d7" prot="public" virt="virtual"><scope>amrex::AmrLevel</scope><name>writePlotFile</name></member>
      <member refid="classamrex_1_1AmrLevel_1a3e2abd422506f2fb1ee6f55a47433f42" prot="public" virt="virtual"><scope>amrex::AmrLevel</scope><name>writePlotFilePost</name></member>
      <member refid="classamrex_1_1AmrLevel_1a186555902c913a437e6676f5cec90ae8" prot="public" virt="virtual"><scope>amrex::AmrLevel</scope><name>writePlotFilePre</name></member>
      <member refid="classamrex_1_1AmrLevel_1a1de622e094b4e64e2491a82a3acefc1d" prot="public" virt="virtual"><scope>amrex::AmrLevel</scope><name>writePlotNow</name></member>
      <member refid="classamrex_1_1AmrLevel_1a82a5b2421ec382b24be0a33a27d82f59" prot="public" virt="virtual"><scope>amrex::AmrLevel</scope><name>writeSmallPlotFile</name></member>
      <member refid="classamrex_1_1AmrLevel_1a2972b42fa723220283b8275fcd7a8be8" prot="public" virt="virtual"><scope>amrex::AmrLevel</scope><name>writeSmallPlotNow</name></member>
      <member refid="classamrex_1_1AmrLevel_1af651bb170ec4a1a93a4eed118dead881" prot="public" virt="virtual"><scope>amrex::AmrLevel</scope><name>~AmrLevel</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
