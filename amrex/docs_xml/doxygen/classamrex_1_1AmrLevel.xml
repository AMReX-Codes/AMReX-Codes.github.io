<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classamrex_1_1AmrLevel" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>amrex::AmrLevel</compoundname>
    <includes refid="AMReX__AmrLevel_8H" local="no">AMReX_AmrLevel.H</includes>
    <sectiondef kind="public-type">
      <memberdef kind="enum" id="classamrex_1_1AmrLevel_1a83fa691ff414eb69f75eb6ae1f61b33a" prot="public" static="no" strong="no">
        <type></type>
        <name>TimeLevel</name>
        <qualifiedname>amrex::AmrLevel::TimeLevel</qualifiedname>
        <enumvalue id="classamrex_1_1AmrLevel_1a83fa691ff414eb69f75eb6ae1f61b33aa42553bff8bf17dc01b76ff8e44f3d902" prot="public">
          <name>AmrOldTime</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classamrex_1_1AmrLevel_1a83fa691ff414eb69f75eb6ae1f61b33aabebff412ae8d5766104330cb143e91c9" prot="public">
          <name>AmrHalfTime</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classamrex_1_1AmrLevel_1a83fa691ff414eb69f75eb6ae1f61b33aa9e86be887aaeac42a556e1f493337472" prot="public">
          <name>AmrNewTime</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classamrex_1_1AmrLevel_1a83fa691ff414eb69f75eb6ae1f61b33aa26c31c2a7f0ffe418eca566dd60dcf9a" prot="public">
          <name>Amr1QtrTime</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classamrex_1_1AmrLevel_1a83fa691ff414eb69f75eb6ae1f61b33aae97e640066fc5c0776f300447bec0517" prot="public">
          <name>Amr3QtrTime</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classamrex_1_1AmrLevel_1a83fa691ff414eb69f75eb6ae1f61b33aaae1e38c840ac8908874d6775a2d8506d" prot="public">
          <name>AmrOtherTime</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>What time are we at? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="45" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="45" bodyend="50"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="friend">
      <memberdef kind="friend" id="classamrex_1_1AmrLevel_1a1625024217a38ec9637cf3a428164c71" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class Amr</definition>
        <argsstring></argsstring>
        <name>Amr</name>
        <qualifiedname>amrex::AmrLevel::Amr</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1Amr" kindref="compound">Amr</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="39" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1AmrLevel_1a39d92a4048c0af0c7b1737d5c4e0c334" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class FillPatchIterator</definition>
        <argsstring></argsstring>
        <name>FillPatchIterator</name>
        <qualifiedname>amrex::AmrLevel::FillPatchIterator</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1FillPatchIterator" kindref="compound">FillPatchIterator</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="40" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1AmrLevel_1a872278b3cad59c0978412af0cd9ec0cf" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class FillPatchIteratorHelper</definition>
        <argsstring></argsstring>
        <name>FillPatchIteratorHelper</name>
        <qualifiedname>amrex::AmrLevel::FillPatchIteratorHelper</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1FillPatchIteratorHelper" kindref="compound">FillPatchIteratorHelper</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="41" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="41" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classamrex_1_1AmrLevel_1a15535c7cc1f73df2cc3b0b720d8ab5a4" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::AmrLevel::level</definition>
        <argsstring></argsstring>
        <name>level</name>
        <qualifiedname>amrex::AmrLevel::level</qualifiedname>
        <initializer>{-1}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="476" column="27" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="476" bodyend="476"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1AmrLevel_1a571b97b176d8618fba71f56c8b44a7c8" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref></type>
        <definition>Geometry amrex::AmrLevel::geom</definition>
        <argsstring></argsstring>
        <name>geom</name>
        <qualifiedname>amrex::AmrLevel::geom</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="477" column="27" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="477" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1AmrLevel_1a5ffc98d138f381698b2a61fc6cb2ce01" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref></type>
        <definition>BoxArray amrex::AmrLevel::grids</definition>
        <argsstring></argsstring>
        <name>grids</name>
        <qualifiedname>amrex::AmrLevel::grids</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="478" column="27" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="478" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1AmrLevel_1ab0ab7555be82910d8100d7bc3aa55d1d" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref></type>
        <definition>DistributionMapping amrex::AmrLevel::dmap</definition>
        <argsstring></argsstring>
        <name>dmap</name>
        <qualifiedname>amrex::AmrLevel::dmap</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="479" column="27" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="479" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1AmrLevel_1aeb2c20016c60209d0bc5112f262957c2" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Amr" kindref="compound">Amr</ref> *</type>
        <definition>Amr* amrex::AmrLevel::parent</definition>
        <argsstring></argsstring>
        <name>parent</name>
        <qualifiedname>amrex::AmrLevel::parent</qualifiedname>
        <initializer>{nullptr}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="480" column="26" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="480" bodyend="480"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1AmrLevel_1a7fc1ed7f6a21702c3af072650ed4de4a" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref></type>
        <definition>IntVect amrex::AmrLevel::crse_ratio</definition>
        <argsstring></argsstring>
        <name>crse_ratio</name>
        <qualifiedname>amrex::AmrLevel::crse_ratio</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="481" column="27" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="481" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1AmrLevel_1a109f988dd098fdb2a6b854a742015397" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref></type>
        <definition>IntVect amrex::AmrLevel::fine_ratio</definition>
        <argsstring></argsstring>
        <name>fine_ratio</name>
        <qualifiedname>amrex::AmrLevel::fine_ratio</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="482" column="27" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="482" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1AmrLevel_1ac00306c6990dffb14241578a8f4aa281" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1StateData" kindref="compound">StateData</ref> &gt;</type>
        <definition>Vector&lt;StateData&gt; amrex::AmrLevel::state</definition>
        <argsstring></argsstring>
        <name>state</name>
        <qualifiedname>amrex::AmrLevel::state</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="485" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="485" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1AmrLevel_1aa11acf69e2d0372e204cfea5934658f6" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref></type>
        <definition>BoxArray amrex::AmrLevel::m_AreaNotToTag</definition>
        <argsstring></argsstring>
        <name>m_AreaNotToTag</name>
        <qualifiedname>amrex::AmrLevel::m_AreaNotToTag</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="487" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="487" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1AmrLevel_1a512443a06a9bee5a9c911326c65e1370" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref></type>
        <definition>Box amrex::AmrLevel::m_AreaToTag</definition>
        <argsstring></argsstring>
        <name>m_AreaToTag</name>
        <qualifiedname>amrex::AmrLevel::m_AreaToTag</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="488" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="488" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1AmrLevel_1a9ef7971fd5d7dd152886c202feb7d806" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::AmrLevel::post_step_regrid</definition>
        <argsstring></argsstring>
        <name>post_step_regrid</name>
        <qualifiedname>amrex::AmrLevel::post_step_regrid</qualifiedname>
        <initializer>{0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="490" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="490" bodyend="490"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1AmrLevel_1a7a90e201ef6ef11f2c42fc9a0de76939" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::AmrLevel::levelDirectoryCreated</definition>
        <argsstring></argsstring>
        <name>levelDirectoryCreated</name>
        <qualifiedname>amrex::AmrLevel::levelDirectoryCreated</qualifiedname>
        <initializer>{false}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="492" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="492" bodyend="492"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1AmrLevel_1a948320fb29597814dca7906e314a2c13" prot="protected" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &gt; &gt;</type>
        <definition>std::unique_ptr&lt;FabFactory&lt;FArrayBox&gt; &gt; amrex::AmrLevel::m_factory</definition>
        <argsstring></argsstring>
        <name>m_factory</name>
        <qualifiedname>amrex::AmrLevel::m_factory</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="494" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="494" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1AmrLevel_1a28bc1fbc65e6522419abb88ac1fa8706" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::unique_ptr&lt; <ref refid="classamrex_1_1FillPatcher" kindref="compound">FillPatcher</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &gt; &gt; &gt;</type>
        <definition>Vector&lt;std::unique_ptr&lt;FillPatcher&lt;MultiFab&gt; &gt; &gt; amrex::AmrLevel::m_fillpatcher</definition>
        <argsstring></argsstring>
        <name>m_fillpatcher</name>
        <qualifiedname>amrex::AmrLevel::m_fillpatcher</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="496" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="496" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-static-attrib">
      <memberdef kind="variable" id="classamrex_1_1AmrLevel_1a792f148ee0bb20432a4acefa1c2cac9a" prot="protected" static="yes" mutable="no">
        <type><ref refid="classamrex_1_1DeriveList" kindref="compound">DeriveList</ref></type>
        <definition>DeriveList amrex::AmrLevel::derive_lst</definition>
        <argsstring></argsstring>
        <name>derive_lst</name>
        <qualifiedname>amrex::AmrLevel::derive_lst</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="483" column="27" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="483" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1AmrLevel_1acb5f9e8c8d903d3a700d2cc11be500e5" prot="protected" static="yes" mutable="no">
        <type><ref refid="classamrex_1_1DescriptorList" kindref="compound">DescriptorList</ref></type>
        <definition>DescriptorList amrex::AmrLevel::desc_lst</definition>
        <argsstring></argsstring>
        <name>desc_lst</name>
        <qualifiedname>amrex::AmrLevel::desc_lst</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="484" column="27" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="484" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1AmrLevel_1a7cf2da3e3135c31924af8e09fa0c8104" prot="private" static="no" mutable="yes">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref></type>
        <definition>BoxArray amrex::AmrLevel::edge_grids[AMREX_SPACEDIM]</definition>
        <argsstring>[AMREX_SPACEDIM]</argsstring>
        <name>edge_grids</name>
        <qualifiedname>amrex::AmrLevel::edge_grids</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="508" column="27" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="508" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1AmrLevel_1a4672d7cd3c482aedb037347c1fddc0ff" prot="private" static="no" mutable="yes">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref></type>
        <definition>BoxArray amrex::AmrLevel::nodal_grids</definition>
        <argsstring></argsstring>
        <name>nodal_grids</name>
        <qualifiedname>amrex::AmrLevel::nodal_grids</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="509" column="27" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="509" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1af651bb170ec4a1a93a4eed118dead881" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>amrex::AmrLevel::~AmrLevel</definition>
        <argsstring>()</argsstring>
        <name>~AmrLevel</name>
        <qualifiedname>amrex::AmrLevel::~AmrLevel</qualifiedname>
        <briefdescription>
<para>The destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="52" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="572" bodyend="575"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1addb399ac982bc95a1cb0456447f13e0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::AmrLevel::AmrLevel</definition>
        <argsstring>(const AmrLevel &amp;)=delete</argsstring>
        <name>AmrLevel</name>
        <qualifiedname>amrex::AmrLevel::AmrLevel</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1AmrLevel" kindref="compound">AmrLevel</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="54" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1ab329e55cd5e52a04db311b580716eaf9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::AmrLevel::AmrLevel</definition>
        <argsstring>(AmrLevel &amp;&amp;)=delete</argsstring>
        <name>AmrLevel</name>
        <qualifiedname>amrex::AmrLevel::AmrLevel</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1AmrLevel" kindref="compound">AmrLevel</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="55" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a8d0c8744882f35a1dd987853210e17d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1AmrLevel" kindref="compound">AmrLevel</ref> &amp;</type>
        <definition>AmrLevel &amp; amrex::AmrLevel::operator=</definition>
        <argsstring>(const AmrLevel &amp;)=delete</argsstring>
        <name>operator=</name>
        <qualifiedname>amrex::AmrLevel::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1AmrLevel" kindref="compound">AmrLevel</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="56" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1aef296fb061850519eb90996674e389af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1AmrLevel" kindref="compound">AmrLevel</ref> &amp;</type>
        <definition>AmrLevel &amp; amrex::AmrLevel::operator=</definition>
        <argsstring>(AmrLevel &amp;&amp;)=delete</argsstring>
        <name>operator=</name>
        <qualifiedname>amrex::AmrLevel::operator=</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1AmrLevel" kindref="compound">AmrLevel</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="57" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a2c60baf6b91ceb8f41054f1ccd1b4e5e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::AmrLevel::LevelDirectoryNames</definition>
        <argsstring>(const std::string &amp;dir, std::string &amp;LevelDir, std::string &amp;FullPath) const</argsstring>
        <name>LevelDirectoryNames</name>
        <qualifiedname>amrex::AmrLevel::LevelDirectoryNames</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>std::string &amp;</type>
          <declname>LevelDir</declname>
        </param>
        <param>
          <type>std::string &amp;</type>
          <declname>FullPath</declname>
        </param>
        <briefdescription>
<para>Get the level directory names. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="60" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="2223" bodyend="2236"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a962f9d201153832198014fba04698410" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::AmrLevel::CreateLevelDirectory</definition>
        <argsstring>(const std::string &amp;dir)</argsstring>
        <name>CreateLevelDirectory</name>
        <qualifiedname>amrex::AmrLevel::CreateLevelDirectory</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Create the Level_ directory for checkpoint and plot files. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="64" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="2239" bodyend="2253"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a33b3a3f0806c790a05f39fae227042a0" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::AmrLevel::SetLevelDirectoryCreated</definition>
        <argsstring>(bool ldc) noexcept</argsstring>
        <name>SetLevelDirectoryCreated</name>
        <qualifiedname>amrex::AmrLevel::SetLevelDirectoryCreated</qualifiedname>
        <param>
          <type>bool</type>
          <declname>ldc</declname>
        </param>
        <briefdescription>
<para>Set if the Level_ directory was created or to clear the value. CreateLevelDirectory sets levelDirectoryCreated = true. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="69" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="69" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1aafabc1e8a1b6e1b96230fbf6debe2465" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::string</type>
        <definition>virtual std::string amrex::AmrLevel::thePlotFileType</definition>
        <argsstring>() const</argsstring>
        <name>thePlotFileType</name>
        <qualifiedname>amrex::AmrLevel::thePlotFileType</qualifiedname>
        <briefdescription>
<para>A string written as the first item in <ref refid="classamrex_1_1AmrLevel_1aac3f74f8caafcc7b7cf0d3b33480e5d7" kindref="member">writePlotFile()</ref> at level zero. It is so we can distinguish between different types of plot files. This default &quot;HyperCLaw-V1.1&quot; is for VisIt software and some of our internal postprocessing routines. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="78" column="25" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="78" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1aac3f74f8caafcc7b7cf0d3b33480e5d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::AmrLevel::writePlotFile</definition>
        <argsstring>(const std::string &amp;dir, std::ostream &amp;os, VisMF::How how=VisMF::NFiles)</argsstring>
        <name>writePlotFile</name>
        <qualifiedname>amrex::AmrLevel::writePlotFile</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1VisMF_1aa50a3ce471ac0bdf8f78134f0004e156" kindref="member">VisMF::How</ref></type>
          <declname>how</declname>
          <defval><ref refid="classamrex_1_1VisMF_1aa50a3ce471ac0bdf8f78134f0004e156a167fa24b841257fa58af35b658f5d6c1" kindref="member">VisMF::NFiles</ref></defval>
        </param>
        <briefdescription>
<para>Write plot file stuff to specified directory. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="86" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="134" bodyend="368"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a186555902c913a437e6676f5cec90ae8" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::AmrLevel::writePlotFilePre</definition>
        <argsstring>(const std::string &amp;dir, std::ostream &amp;os)</argsstring>
        <name>writePlotFilePre</name>
        <qualifiedname>amrex::AmrLevel::writePlotFilePre</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <briefdescription>
<para>Do pre-plotfile work to avoid synchronizations while writing the amr hierarchy. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="91" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="372" bodyend="375"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a3e2abd422506f2fb1ee6f55a47433f42" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::AmrLevel::writePlotFilePost</definition>
        <argsstring>(const std::string &amp;dir, std::ostream &amp;os)</argsstring>
        <name>writePlotFilePost</name>
        <qualifiedname>amrex::AmrLevel::writePlotFilePost</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <briefdescription>
<para>Do post-plotfile work to avoid synchronizations while writing the amr hierarchy. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="95" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="379" bodyend="382"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a82a5b2421ec382b24be0a33a27d82f59" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex::AmrLevel::writeSmallPlotFile</definition>
        <argsstring>(const std::string &amp;, std::ostream &amp;, VisMF::How=VisMF::NFiles)</argsstring>
        <name>writeSmallPlotFile</name>
        <qualifiedname>amrex::AmrLevel::writeSmallPlotFile</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
        </param>
        <param>
          <type>std::ostream &amp;</type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1VisMF_1aa50a3ce471ac0bdf8f78134f0004e156" kindref="member">VisMF::How</ref></type>
          <defval><ref refid="classamrex_1_1VisMF_1aa50a3ce471ac0bdf8f78134f0004e156a167fa24b841257fa58af35b658f5d6c1" kindref="member">VisMF::NFiles</ref></defval>
        </param>
        <briefdescription>
<para>Write small plot file stuff to specified directory. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="101" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="101" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a169bef0169afefe32db1d994d2600c69" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::AmrLevel::checkPoint</definition>
        <argsstring>(const std::string &amp;dir, std::ostream &amp;os, VisMF::How how=VisMF::NFiles, bool dump_old=true)</argsstring>
        <name>checkPoint</name>
        <qualifiedname>amrex::AmrLevel::checkPoint</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1VisMF_1aa50a3ce471ac0bdf8f78134f0004e156" kindref="member">VisMF::How</ref></type>
          <declname>how</declname>
          <defval><ref refid="classamrex_1_1VisMF_1aa50a3ce471ac0bdf8f78134f0004e156a167fa24b841257fa58af35b658f5d6c1" kindref="member">VisMF::NFiles</ref></defval>
        </param>
        <param>
          <type>bool</type>
          <declname>dump_old</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Write current state to checkpoint file. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="105" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="510" bodyend="553"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1aa8953b789fe7af91082c2fefcced1a16" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::AmrLevel::checkPointPre</definition>
        <argsstring>(const std::string &amp;dir, std::ostream &amp;os)</argsstring>
        <name>checkPointPre</name>
        <qualifiedname>amrex::AmrLevel::checkPointPre</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <briefdescription>
<para>Do pre-checkpoint work to avoid synchronizations while writing the amr hierarchy. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="110" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="557" bodyend="561"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a91b3bc1707aa307c5eeb73d9e2bfdd80" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::AmrLevel::checkPointPost</definition>
        <argsstring>(const std::string &amp;dir, std::ostream &amp;os)</argsstring>
        <name>checkPointPost</name>
        <qualifiedname>amrex::AmrLevel::checkPointPost</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <briefdescription>
<para>Do post-checkpoint work to avoid synchronizations while writing the amr hierarchy. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="113" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="565" bodyend="569"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a05899e47b34be116fa7a9a40ecaa74ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::AmrLevel::restart</definition>
        <argsstring>(Amr &amp;papa, std::istream &amp;is, bool bReadSpecial=false)</argsstring>
        <name>restart</name>
        <qualifiedname>amrex::AmrLevel::restart</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1Amr" kindref="compound">Amr</ref> &amp;</type>
          <declname>papa</declname>
        </param>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bReadSpecial</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Restart from a checkpoint file. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="116" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="386" bodyend="464"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a6560cdb555b4af1f6d5b525e1b25e4eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::AmrLevel::set_state_in_checkpoint</definition>
        <argsstring>(Vector&lt; int &gt; &amp;state_in_checkpoint)</argsstring>
        <name>set_state_in_checkpoint</name>
        <qualifiedname>amrex::AmrLevel::set_state_in_checkpoint</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>state_in_checkpoint</declname>
        </param>
        <briefdescription>
<para>Old checkpoint may have different number of states than the new source code. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="121" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="467" bodyend="470"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a252f7123d2f0a98351bc7b39c32b3152" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void amrex::AmrLevel::computeInitialDt</definition>
        <argsstring>(int finest_level, int sub_cycle, Vector&lt; int &gt; &amp;n_cycle, const Vector&lt; IntVect &gt; &amp;ref_ratio, Vector&lt; Real &gt; &amp;dt_level, Real stop_time)=0</argsstring>
        <name>computeInitialDt</name>
        <qualifiedname>amrex::AmrLevel::computeInitialDt</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>finest_level</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>sub_cycle</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>n_cycle</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &gt; &amp;</type>
          <declname>ref_ratio</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &amp;</type>
          <declname>dt_level</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>stop_time</declname>
        </param>
        <briefdescription>
<para>Compute the initial time step. This is a pure virtual function and hence MUST be implemented by derived classes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="133" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a2ca2263f59a50956ec37ce72a4a02767" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void amrex::AmrLevel::computeNewDt</definition>
        <argsstring>(int finest_level, int sub_cycle, Vector&lt; int &gt; &amp;n_cycle, const Vector&lt; IntVect &gt; &amp;ref_ratio, Vector&lt; Real &gt; &amp;dt_min, Vector&lt; Real &gt; &amp;dt_level, Real stop_time, int post_regrid_flag)=0</argsstring>
        <name>computeNewDt</name>
        <qualifiedname>amrex::AmrLevel::computeNewDt</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>finest_level</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>sub_cycle</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>n_cycle</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &gt; &amp;</type>
          <declname>ref_ratio</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &amp;</type>
          <declname>dt_min</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &amp;</type>
          <declname>dt_level</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>stop_time</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>post_regrid_flag</declname>
        </param>
        <briefdescription>
<para>Compute the next time step. This is a pure virtual function and hence MUST be implemented by derived classes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="143" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a96b6f33d22c9341b1cff894f17555f47" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>Real</type>
        <definition>virtual Real amrex::AmrLevel::advance</definition>
        <argsstring>(Real time, Real dt, int iteration, int ncycle)=0</argsstring>
        <name>advance</name>
        <qualifiedname>amrex::AmrLevel::advance</qualifiedname>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dt</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>iteration</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncycle</declname>
        </param>
        <briefdescription>
<para>Do an integration step on this level. Returns maximum safe time step. This is a pure virtual function and hence MUST be implemented by derived classes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="156" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a6dc31baa80c3f278350ad20a64577155" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::AmrLevel::post_timestep</definition>
        <argsstring>(int iteration)</argsstring>
        <name>post_timestep</name>
        <qualifiedname>amrex::AmrLevel::post_timestep</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>iteration</declname>
        </param>
        <briefdescription>
<para>Contains operations to be done after a timestep. If this function is overridden, don&apos;t forget to reset <ref refid="classamrex_1_1FillPatcher" kindref="compound">FillPatcher</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="165" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="35" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a6c4e273ed6a867d2da0dbf8ae325c82a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::AmrLevel::postCoarseTimeStep</definition>
        <argsstring>(Real time)</argsstring>
        <name>postCoarseTimeStep</name>
        <qualifiedname>amrex::AmrLevel::postCoarseTimeStep</qualifiedname>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <briefdescription>
<para>Contains operations to be done only after a full coarse timestep. The default implementation does nothing. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="170" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="43" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1afc4f639ee0e05fd9a827db22694941a0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex::AmrLevel::post_restart</definition>
        <argsstring>()</argsstring>
        <name>post_restart</name>
        <qualifiedname>amrex::AmrLevel::post_restart</qualifiedname>
        <briefdescription>
<para>Operations to be done after restart. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="174" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="174" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a0289a6cdc3349c2c0b778cc25901e364" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void amrex::AmrLevel::post_regrid</definition>
        <argsstring>(int lbase, int new_finest)=0</argsstring>
        <name>post_regrid</name>
        <qualifiedname>amrex::AmrLevel::post_regrid</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lbase</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>new_finest</declname>
        </param>
        <briefdescription>
<para>Operations to be done after regridding This is a pure virtual function and hence MUST be implemented by derived classes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="180" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1ac7f38ed4057c3c789e73567e1f455ccb" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void amrex::AmrLevel::post_init</definition>
        <argsstring>(Real stop_time)=0</argsstring>
        <name>post_init</name>
        <qualifiedname>amrex::AmrLevel::post_init</qualifiedname>
        <param>
          <type>Real</type>
          <declname>stop_time</declname>
        </param>
        <briefdescription>
<para>Operations to be done after initialization. This is a pure virtual function and hence MUST be implemented by derived classes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="187" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a5d15ca0da28ca003355c6f45b5cb1cdd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>virtual int amrex::AmrLevel::okToContinue</definition>
        <argsstring>()</argsstring>
        <name>okToContinue</name>
        <qualifiedname>amrex::AmrLevel::okToContinue</qualifiedname>
        <briefdescription>
<para>Is it ok to continue the calculation? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="191" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="191" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1aa1a00039cf415f21002bec0bc15342ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::AmrLevel::okToRegrid</definition>
        <argsstring>()</argsstring>
        <name>okToRegrid</name>
        <qualifiedname>amrex::AmrLevel::okToRegrid</qualifiedname>
        <briefdescription>
<para>Should I regrid with this level as base level? This test is only evaluated if regrid_int &gt; 0 and level_count &gt;= regrid_int as well. Defaults to true. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="197" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="1891" bodyend="1894"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a862d5c3479aee494a516f53ea70fea0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void amrex::AmrLevel::initData</definition>
        <argsstring>()=0</argsstring>
        <name>initData</name>
        <qualifiedname>amrex::AmrLevel::initData</qualifiedname>
        <briefdescription>
<para>Init grid data at problem start-up. This is a pure virtual function and hence MUST be implemented by derived classes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="203" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a5b311a4d4139cce9025d1c41d28586b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::AmrLevel::setTimeLevel</definition>
        <argsstring>(Real time, Real dt_old, Real dt_new)</argsstring>
        <name>setTimeLevel</name>
        <qualifiedname>amrex::AmrLevel::setTimeLevel</qualifiedname>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dt_old</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dt_new</declname>
        </param>
        <briefdescription>
<para>Set the time levels of state data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="205" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="476" bodyend="484"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a6508a7e48f0d9da16e52fe4c79917ed3" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::AmrLevel::allocOldData</definition>
        <argsstring>()</argsstring>
        <name>allocOldData</name>
        <qualifiedname>amrex::AmrLevel::allocOldData</qualifiedname>
        <briefdescription>
<para>Alloc space for old time data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="209" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="578" bodyend="584"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a56805171637298d888a0e5215bab4e82" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::AmrLevel::removeOldData</definition>
        <argsstring>()</argsstring>
        <name>removeOldData</name>
        <qualifiedname>amrex::AmrLevel::removeOldData</qualifiedname>
        <briefdescription>
<para>Delete old-time data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="211" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="587" bodyend="593"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a1e14a83038675d42ed7065b0262bc2a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void amrex::AmrLevel::init</definition>
        <argsstring>(AmrLevel &amp;old)=0</argsstring>
        <name>init</name>
        <qualifiedname>amrex::AmrLevel::init</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1AmrLevel" kindref="compound">AmrLevel</ref> &amp;</type>
          <declname>old</declname>
        </param>
        <briefdescription>
<para>Init data on this level from another <ref refid="classamrex_1_1AmrLevel" kindref="compound">AmrLevel</ref> (during regrid). This is a pure virtual function and hence MUST be implemented by derived classes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="217" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1ae6c24e645074589f76ff10eb4c37c8a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void amrex::AmrLevel::init</definition>
        <argsstring>()=0</argsstring>
        <name>init</name>
        <qualifiedname>amrex::AmrLevel::init</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Init data on this level after regridding if old <ref refid="classamrex_1_1AmrLevel" kindref="compound">AmrLevel</ref> did not previously exist. This is a pure virtual function and hence MUST be implemented by derived classes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="223" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a0aa73b17e9be18d811a21128c8c2f5f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::AmrLevel::reset</definition>
        <argsstring>()</argsstring>
        <name>reset</name>
        <qualifiedname>amrex::AmrLevel::reset</qualifiedname>
        <briefdescription>
<para>Reset data to initial time by swapping new and old time data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="225" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="596" bodyend="602"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a18159b17b5d40999e3f38474e53f23ff" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::AmrLevel::Level</definition>
        <argsstring>() const noexcept</argsstring>
        <name>Level</name>
        <qualifiedname>amrex::AmrLevel::Level</qualifiedname>
        <briefdescription>
<para>Returns this <ref refid="classamrex_1_1AmrLevel" kindref="compound">AmrLevel</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="227" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="227" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a2e5195db636cd719645d0d51228b4c7f" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>const BoxArray &amp; amrex::AmrLevel::boxArray</definition>
        <argsstring>() const noexcept</argsstring>
        <name>boxArray</name>
        <qualifiedname>amrex::AmrLevel::boxArray</qualifiedname>
        <briefdescription>
<para>List of grids at this level. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="229" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="229" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1ad3cf13198c2fc19f4d692b5282b1ddc5" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>const BoxArray &amp; amrex::AmrLevel::getEdgeBoxArray</definition>
        <argsstring>(int dir) const noexcept</argsstring>
        <name>getEdgeBoxArray</name>
        <qualifiedname>amrex::AmrLevel::getEdgeBoxArray</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="230" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="626" bodyend="634"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a5f0a9f5d2c0e0733ad3cbbda47912480" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>const BoxArray &amp; amrex::AmrLevel::getNodalBoxArray</definition>
        <argsstring>() const noexcept</argsstring>
        <name>getNodalBoxArray</name>
        <qualifiedname>amrex::AmrLevel::getNodalBoxArray</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="231" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="637" bodyend="644"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a6bf0f798f6082b4aa8e2a645b263e1b8" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
        <definition>const DistributionMapping &amp; amrex::AmrLevel::DistributionMap</definition>
        <argsstring>() const noexcept</argsstring>
        <name>DistributionMap</name>
        <qualifiedname>amrex::AmrLevel::DistributionMap</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="233" column="31" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="233" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a4c093377c3b774a542342a040b27afe4" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &gt; &amp;</type>
        <definition>const FabFactory&lt; FArrayBox &gt; &amp; amrex::AmrLevel::Factory</definition>
        <argsstring>() const noexcept</argsstring>
        <name>Factory</name>
        <qualifiedname>amrex::AmrLevel::Factory</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="235" column="22" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="235" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1ae93e34dd07b1784fc7fe902331d232b2" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::AmrLevel::numGrids</definition>
        <argsstring>() const noexcept</argsstring>
        <name>numGrids</name>
        <qualifiedname>amrex::AmrLevel::numGrids</qualifiedname>
        <briefdescription>
<para>Number of grids at this level. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="245" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="245" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1aa9666a2babd9d59a595a2c3695f38f00" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::AmrLevel::numStates</definition>
        <argsstring>() const noexcept</argsstring>
        <name>numStates</name>
        <qualifiedname>amrex::AmrLevel::numStates</qualifiedname>
        <briefdescription>
<para>Number of states at this level. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="247" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="247" bodyend="247"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a6e8711584978e650966877a53becf391" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
        <definition>const Box &amp; amrex::AmrLevel::Domain</definition>
        <argsstring>() const noexcept</argsstring>
        <name>Domain</name>
        <qualifiedname>amrex::AmrLevel::Domain</qualifiedname>
        <briefdescription>
<para>Returns the indices defining physical domain. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="249" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="249" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1ac66753a2ff2df956a5df08dd6cb9f81a" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::AmrLevel::nStep</definition>
        <argsstring>() const noexcept</argsstring>
        <name>nStep</name>
        <qualifiedname>amrex::AmrLevel::nStep</qualifiedname>
        <briefdescription>
<para>Timestep n at this level. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="251" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="251" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a22d1ec64be93cec74c015299438c7a7a" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
        <definition>const Geometry &amp; amrex::AmrLevel::Geom</definition>
        <argsstring>() const noexcept</argsstring>
        <name>Geom</name>
        <qualifiedname>amrex::AmrLevel::Geom</qualifiedname>
        <briefdescription>
<para>Returns the geometry object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="253" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="253" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a3c94cb9318ca878ae41529469753c91a" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &amp;</type>
        <definition>const IntVect &amp; amrex::AmrLevel::fineRatio</definition>
        <argsstring>() const noexcept</argsstring>
        <name>fineRatio</name>
        <qualifiedname>amrex::AmrLevel::fineRatio</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="255" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="255" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a0d87c01c6118a83ca5707b4d0ccd3bc0" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>Long</type>
        <definition>Long amrex::AmrLevel::countCells</definition>
        <argsstring>() const noexcept</argsstring>
        <name>countCells</name>
        <qualifiedname>amrex::AmrLevel::countCells</qualifiedname>
        <briefdescription>
<para>Returns number of cells on level. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="257" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="504" bodyend="507"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1afd13b08745699794f3a991500e901974" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>const BoxArray &amp; amrex::AmrLevel::getAreaNotToTag</definition>
        <argsstring>() noexcept</argsstring>
        <name>getAreaNotToTag</name>
        <qualifiedname>amrex::AmrLevel::getAreaNotToTag</qualifiedname>
        <briefdescription>
<para>Get the area not to tag. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="260" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="2070" bodyend="2073"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a804883955eae48bd6992fb770324a981" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
        <definition>const Box &amp; amrex::AmrLevel::getAreaToTag</definition>
        <argsstring>() noexcept</argsstring>
        <name>getAreaToTag</name>
        <qualifiedname>amrex::AmrLevel::getAreaToTag</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="261" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="2075" bodyend="2078"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a7a6ce272412a601c03330e55de170ea8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::AmrLevel::constructAreaNotToTag</definition>
        <argsstring>()</argsstring>
        <name>constructAreaNotToTag</name>
        <qualifiedname>amrex::AmrLevel::constructAreaNotToTag</qualifiedname>
        <briefdescription>
<para>Construct the area not to tag. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="263" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="2085" bodyend="2119"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1aca274822a300bceaaa023cc330d441ba" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::AmrLevel::setAreaNotToTag</definition>
        <argsstring>(BoxArray &amp;ba) noexcept</argsstring>
        <name>setAreaNotToTag</name>
        <qualifiedname>amrex::AmrLevel::setAreaNotToTag</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>ba</declname>
        </param>
        <briefdescription>
<para>Set the area not to tag. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="265" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="2080" bodyend="2083"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1af4f83f6e16dfb5c60f985370541062fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::AmrLevel::resetFillPatcher</definition>
        <argsstring>()</argsstring>
        <name>resetFillPatcher</name>
        <qualifiedname>amrex::AmrLevel::resetFillPatcher</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="267" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="2122" bodyend="2127"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a75c6f30a5526b2d5dbbb24646f71dc8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void amrex::AmrLevel::errorEst</definition>
        <argsstring>(TagBoxArray &amp;tb, int clearval, int tagval, Real time, int n_error_buf=0, int ngrow=0)=0</argsstring>
        <name>errorEst</name>
        <qualifiedname>amrex::AmrLevel::errorEst</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1TagBoxArray" kindref="compound">TagBoxArray</ref> &amp;</type>
          <declname>tb</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>clearval</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>tagval</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n_error_buf</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngrow</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Error estimation for regridding. This is a pure virtual function and hence MUST be implemented by derived classes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="273" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a9ebdb49d2d66ac577de280ed9ed0fd28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::AmrLevel::FillCoarsePatch</definition>
        <argsstring>(MultiFab &amp;mf, int dcomp, Real time, int state_idx, int scomp, int ncomp, int nghost=0)</argsstring>
        <name>FillCoarsePatch</name>
        <qualifiedname>amrex::AmrLevel::FillCoarsePatch</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>state_idx</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Interpolate from coarse level to the valid area in mf. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="280" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="1519" bodyend="1612"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a2f324e3977de1beef5d204c04be51f4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::AmrLevel::setPhysBoundaryValues</definition>
        <argsstring>(FArrayBox &amp;dest, int state_indx, Real time, int dest_comp, int src_comp, int num_comp)</argsstring>
        <name>setPhysBoundaryValues</name>
        <qualifiedname>amrex::AmrLevel::setPhysBoundaryValues</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>state_indx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dest_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <briefdescription>
<para>Function to set physical boundary conditions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="288" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="647" bodyend="662"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a2d67ff78f28ebc3850bda9ca476b7f9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &gt;</type>
        <definition>std::unique_ptr&lt; MultiFab &gt; amrex::AmrLevel::derive</definition>
        <argsstring>(const std::string &amp;name, Real time, int ngrow)</argsstring>
        <name>derive</name>
        <qualifiedname>amrex::AmrLevel::derive</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngrow</declname>
        </param>
        <briefdescription>
<para>Returns a <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> containing the derived data for this level. The user is responsible for deleting this pointer when done with it. If ngrow&gt;0 the <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> is built on the appropriately grown <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="300" column="29" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="1615" bodyend="1733"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1aa57cb16059880124adbd17cba52c843d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::AmrLevel::derive</definition>
        <argsstring>(const std::string &amp;name, Real time, MultiFab &amp;mf, int dcomp)</argsstring>
        <name>derive</name>
        <qualifiedname>amrex::AmrLevel::derive</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <briefdescription>
<para>This version of <ref refid="classamrex_1_1AmrLevel_1a2d67ff78f28ebc3850bda9ca476b7f9c" kindref="member">derive()</ref> fills the dcomp&apos;th component of mf with the derived quantity. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="307" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="1736" bodyend="1848"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a5f18e43274c0087dc14e92966e44ddfd" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1StateData" kindref="compound">StateData</ref> &amp;</type>
        <definition>StateData &amp; amrex::AmrLevel::get_state_data</definition>
        <argsstring>(int state_indx) noexcept</argsstring>
        <name>get_state_data</name>
        <qualifiedname>amrex::AmrLevel::get_state_data</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>state_indx</declname>
        </param>
        <briefdescription>
<para>State data object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="312" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="312" bodyend="312"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1aee268fcdbee61d28239fbc1c3ceabdd8" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
        <definition>MultiFab &amp; amrex::AmrLevel::get_old_data</definition>
        <argsstring>(int state_indx) noexcept</argsstring>
        <name>get_old_data</name>
        <qualifiedname>amrex::AmrLevel::get_old_data</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>state_indx</declname>
        </param>
        <briefdescription>
<para>State data at old time. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="314" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="314" bodyend="314"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a2fcaec76700e17cb5d6e4c8ad21a0f8f" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
        <definition>const MultiFab &amp; amrex::AmrLevel::get_old_data</definition>
        <argsstring>(int state_indx) const noexcept</argsstring>
        <name>get_old_data</name>
        <qualifiedname>amrex::AmrLevel::get_old_data</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>state_indx</declname>
        </param>
        <briefdescription>
<para>State data at old time. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="316" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="316" bodyend="316"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1aec6f43bc6e1a2b0fd9532d07a965bbc0" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
        <definition>MultiFab &amp; amrex::AmrLevel::get_new_data</definition>
        <argsstring>(int state_indx) noexcept</argsstring>
        <name>get_new_data</name>
        <qualifiedname>amrex::AmrLevel::get_new_data</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>state_indx</declname>
        </param>
        <briefdescription>
<para>State data at new time. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="318" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="318" bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1ac2f2f12e361cd752f1813ae537584d89" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
        <definition>const MultiFab &amp; amrex::AmrLevel::get_new_data</definition>
        <argsstring>(int state_indx) const noexcept</argsstring>
        <name>get_new_data</name>
        <qualifiedname>amrex::AmrLevel::get_new_data</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>state_indx</declname>
        </param>
        <briefdescription>
<para>State data at new time. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="320" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="320" bodyend="320"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1ae5ca0552f0073d959717f3dc4a375478" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::AmrLevel::postStepRegrid</definition>
        <argsstring>() const noexcept</argsstring>
        <name>postStepRegrid</name>
        <qualifiedname>amrex::AmrLevel::postStepRegrid</qualifiedname>
        <briefdescription>
<para>Returns whether or not we want a post-timestep regrid. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="326" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="326" bodyend="326"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a3740e0877382738d1cd8d382909ef855" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::AmrLevel::setPostStepRegrid</definition>
        <argsstring>(int new_val) noexcept</argsstring>
        <name>setPostStepRegrid</name>
        <qualifiedname>amrex::AmrLevel::setPostStepRegrid</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>new_val</declname>
        </param>
        <briefdescription>
<para>Sets a new value for the post-timestep regrid trigger. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="328" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="328" bodyend="328"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a69fdf4e347142373696281d9269c6799" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::AmrLevel::UpdateDistributionMaps</definition>
        <argsstring>(DistributionMapping &amp;dmap)</argsstring>
        <name>UpdateDistributionMaps</name>
        <qualifiedname>amrex::AmrLevel::UpdateDistributionMaps</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dmap</declname>
        </param>
        <briefdescription>
<para>Update the distribution maps in <ref refid="classamrex_1_1StateData" kindref="compound">StateData</ref> based on the size of the map. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="331" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="1852" bodyend="1864"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a4bb1f80ca05ed54727d81042c79e880b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
        <definition>Vector&lt; int &gt; amrex::AmrLevel::getBCArray</definition>
        <argsstring>(int State_Type, int gridno, int strt_comp, int ncomp)</argsstring>
        <name>getBCArray</name>
        <qualifiedname>amrex::AmrLevel::getBCArray</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>State_Type</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>gridno</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>strt_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
<para>Boundary condition access function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="334" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="1869" bodyend="1888"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a5f84c93c82667982bbec8f9215b630af" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
        <definition>MultiFab &amp; amrex::AmrLevel::get_data</definition>
        <argsstring>(int state_indx, Real time) noexcept</argsstring>
        <name>get_data</name>
        <qualifiedname>amrex::AmrLevel::get_data</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>state_indx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <briefdescription>
<para>Get state data at specified index and time. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="339" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="605" bodyend="623"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1adea5b76b420f0a2ccd2852d66301d376" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::AmrLevel::set_preferred_boundary_values</definition>
        <argsstring>(MultiFab &amp;S, int state_index, int scomp, int dcomp, int ncomp, Real time) const</argsstring>
        <name>set_preferred_boundary_values</name>
        <qualifiedname>amrex::AmrLevel::set_preferred_boundary_values</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>S</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>state_index</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <briefdescription>
<para>Hack to allow override of (non-fine-fine) fillpatched boundary data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="341" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="48" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a2e78f3a4398272855b0a9ac3becaefd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::AmrLevel::manual_tags_placement</definition>
        <argsstring>(TagBoxArray &amp;tags, const Vector&lt; IntVect &gt; &amp;bf_lev)</argsstring>
        <name>manual_tags_placement</name>
        <qualifiedname>amrex::AmrLevel::manual_tags_placement</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1TagBoxArray" kindref="compound">TagBoxArray</ref> &amp;</type>
          <declname>tags</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &gt; &amp;</type>
          <declname>bf_lev</declname>
        </param>
        <briefdescription>
<para>Called in grid_places after other tagging routines to modify the list of tagged points. Default implementation does nothing. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="351" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="63" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a8023d9fbf7106fe39977f43d1b07460e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::AmrLevel::setPlotVariables</definition>
        <argsstring>()</argsstring>
        <name>setPlotVariables</name>
        <qualifiedname>amrex::AmrLevel::setPlotVariables</qualifiedname>
        <briefdescription>
<para>Modify list of variables to be plotted. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="354" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="1897" bodyend="1954"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1adf299b915ff9411e6684762c72da84bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::AmrLevel::setSmallPlotVariables</definition>
        <argsstring>()</argsstring>
        <name>setSmallPlotVariables</name>
        <qualifiedname>amrex::AmrLevel::setSmallPlotVariables</qualifiedname>
        <briefdescription>
<para>Modify list of variables to be plotted. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="356" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="1957" bodyend="2015"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a03b21d394e621b009b473c427b4769d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>Real</type>
        <definition>Real amrex::AmrLevel::estimateWork</definition>
        <argsstring>()</argsstring>
        <name>estimateWork</name>
        <qualifiedname>amrex::AmrLevel::estimateWork</qualifiedname>
        <briefdescription>
<para>Estimate the amount of work required to advance Just this level based on the number of cells. This estimate can be overwritten with different methods. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="362" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="2053" bodyend="2056"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a1c91cb169c86fd95b76b5742687ad949" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>virtual int amrex::AmrLevel::WorkEstType</definition>
        <argsstring>()</argsstring>
        <name>WorkEstType</name>
        <qualifiedname>amrex::AmrLevel::WorkEstType</qualifiedname>
        <briefdescription>
<para>Which state data type is for work estimates? -1 means none. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="365" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="365" bodyend="365"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a58f60bcd444acf5b3acfe94db3981969" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1AmrLevel_1a83fa691ff414eb69f75eb6ae1f61b33a" kindref="member">TimeLevel</ref></type>
        <definition>AmrLevel::TimeLevel amrex::AmrLevel::which_time</definition>
        <argsstring>(int state_indx, Real time) const noexcept</argsstring>
        <name>which_time</name>
        <qualifiedname>amrex::AmrLevel::which_time</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>state_indx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <briefdescription>
<para>Returns one the TimeLevel enums. Asserts that time is between AmrOldTime and AmrNewTime. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="371" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="2018" bodyend="2050"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a1de622e094b4e64e2491a82a3acefc1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool amrex::AmrLevel::writePlotNow</definition>
        <argsstring>()</argsstring>
        <name>writePlotNow</name>
        <qualifiedname>amrex::AmrLevel::writePlotNow</qualifiedname>
        <briefdescription>
<para>Does the <ref refid="classamrex_1_1AmrLevel" kindref="compound">AmrLevel</ref> want <ref refid="classamrex_1_1Amr" kindref="compound">Amr</ref> to write a plotfile now? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="374" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="2059" bodyend="2062"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a2972b42fa723220283b8275fcd7a8be8" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool amrex::AmrLevel::writeSmallPlotNow</definition>
        <argsstring>()</argsstring>
        <name>writeSmallPlotNow</name>
        <qualifiedname>amrex::AmrLevel::writeSmallPlotNow</qualifiedname>
        <briefdescription>
<para>Does the <ref refid="classamrex_1_1AmrLevel" kindref="compound">AmrLevel</ref> want <ref refid="classamrex_1_1Amr" kindref="compound">Amr</ref> to write a small plotfile now? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="377" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="2065" bodyend="2068"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1af7dbabf3cd9767f5e38dc96157986618" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::AmrLevel::FillPatcherFill</definition>
        <argsstring>(amrex::MultiFab &amp;mf, int dcomp, int ncomp, int nghost, amrex::Real time, int state_index, int scomp)</argsstring>
        <name>FillPatcherFill</name>
        <qualifiedname>amrex::AmrLevel::FillPatcherFill</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">amrex::MultiFab</ref> &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>amrex::Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>state_index</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <briefdescription>
<para>Fill with <ref refid="classamrex_1_1FillPatcher" kindref="compound">FillPatcher</ref> on level &gt; 0 and <ref refid="classamrex_1_1AmrLevel_1a55c1a2d0040ba28bf022fb293113a5f2" kindref="member">AmrLevel::FillPatch</ref> on level 0. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mf</parametername>
</parameternamelist>
<parameterdescription>
<para>destination <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dcomp</parametername>
</parameternamelist>
<parameterdescription>
<para>starting component for the destination </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncomp</parametername>
</parameternamelist>
<parameterdescription>
<para>number of component to fill </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nghost</parametername>
</parameternamelist>
<parameterdescription>
<para>number of ghost cells to fill </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>time</parametername>
</parameternamelist>
<parameterdescription>
<para>time </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>state_index</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classamrex_1_1StateData" kindref="compound">StateData</ref> index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scomp</parametername>
</parameternamelist>
<parameterdescription>
<para>starting component in the <ref refid="classamrex_1_1StateData" kindref="compound">StateData</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="395" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="2130" bodyend="2184"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a95aea02fe7abbf3d1e5cd58ee5ff7d41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref></type>
          </param>
          <param>
            <type>typename P</type>
            <defval><ref refid="structamrex_1_1RungeKutta_1_1PostStageNoOp" kindref="compound">RungeKutta::PostStageNoOp</ref></defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::AmrLevel::RK</definition>
        <argsstring>(int order, int state_type, Real time, Real dt, int iteration, int ncycle, F &amp;&amp;f, P &amp;&amp;p=RungeKutta::PostStageNoOp())</argsstring>
        <name>RK</name>
        <qualifiedname>amrex::AmrLevel::RK</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>order</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>state_type</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dt</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>iteration</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncycle</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>P &amp;&amp;</type>
          <declname>p</declname>
          <defval><ref refid="structamrex_1_1RungeKutta_1_1PostStageNoOp" kindref="compound">RungeKutta::PostStageNoOp</ref>()</defval>
        </param>
        <briefdescription>
<para>Evolve one step with Runge-Kutta (2, 3, or 4) </para>
        </briefdescription>
        <detaileddescription>
<para>To use RK, the <ref refid="classamrex_1_1StateData" kindref="compound">StateData</ref> must have all the ghost cells needed. See namespace <ref refid="namespaceamrex_1_1RungeKutta" kindref="compound">RungeKutta</ref> for expected function signatures of the callable parameters.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>order</parametername>
</parameternamelist>
<parameterdescription>
<para>order of RK </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>state_type</parametername>
</parameternamelist>
<parameterdescription>
<para>index of <ref refid="classamrex_1_1StateData" kindref="compound">StateData</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>time</parametername>
</parameternamelist>
<parameterdescription>
<para>time at the beginning of the step. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dt</parametername>
</parameternamelist>
<parameterdescription>
<para>time step </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iteration</parametername>
</parameternamelist>
<parameterdescription>
<para>iteration number on fine level during a coarse time step. For an AMR simulation with subcycling and a refinement ratio of 2, the number is either 1 or 2, denoting the first and second substep, respectively. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncycle</parametername>
</parameternamelist>
<parameterdescription>
<para>number of subcyling steps. It&apos;s usually 2 or 4. Without subcycling, this will be 1. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>computing right-hand side for evolving the <ref refid="classamrex_1_1StateData" kindref="compound">StateData</ref>. One can also register data for flux registers in this. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>optionally post-processing RK stage results </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="438" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="613" bodyend="657"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1acaf1b5936e81691794578618126d813d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::AmrLevel::isStateVariable</definition>
        <argsstring>(const std::string &amp;name, int &amp;state_indx, int &amp;ncomp)</argsstring>
        <name>isStateVariable</name>
        <qualifiedname>amrex::AmrLevel::isStateVariable</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &amp;</type>
          <declname>state_indx</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &amp;</type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
<para>Is name a state variable? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="124" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="487" bodyend="501"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1ac96bd5573c5f63e798aa682a7d5756ae" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::AmrLevel::FlushFPICache</definition>
        <argsstring>()</argsstring>
        <name>FlushFPICache</name>
        <qualifiedname>amrex::AmrLevel::FlushFPICache</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="128" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1ae4860b29be69f52af9b1723ff75ae7e2" prot="public" static="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1DescriptorList" kindref="compound">DescriptorList</ref> &amp;</type>
        <definition>static const DescriptorList &amp; amrex::AmrLevel::get_desc_lst</definition>
        <argsstring>() noexcept</argsstring>
        <name>get_desc_lst</name>
        <qualifiedname>amrex::AmrLevel::get_desc_lst</qualifiedname>
        <briefdescription>
<para>Returns list of Descriptors. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="322" column="33" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="322" bodyend="322"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a7ef50123ae8e520914847e15973b104a" prot="public" static="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1DeriveList" kindref="compound">DeriveList</ref> &amp;</type>
        <definition>DeriveList &amp; amrex::AmrLevel::get_derive_lst</definition>
        <argsstring>() noexcept</argsstring>
        <name>get_derive_lst</name>
        <qualifiedname>amrex::AmrLevel::get_derive_lst</qualifiedname>
        <briefdescription>
<para>Returns list of derived variables. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="324" column="23" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="57" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a55c1a2d0040ba28bf022fb293113a5f2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::AmrLevel::FillPatch</definition>
        <argsstring>(AmrLevel &amp;amrlevel, MultiFab &amp;leveldata, int boxGrow, Real time, int index, int scomp, int ncomp, int dcomp=0)</argsstring>
        <name>FillPatch</name>
        <qualifiedname>amrex::AmrLevel::FillPatch</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1AmrLevel" kindref="compound">AmrLevel</ref> &amp;</type>
          <declname>amrlevel</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>leveldata</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>boxGrow</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="398" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="2187" bodyend="2202"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1aa72cce79d9f341c7f9a11addfcaec95f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::AmrLevel::FillPatchAdd</definition>
        <argsstring>(AmrLevel &amp;amrlevel, MultiFab &amp;leveldata, int boxGrow, Real time, int index, int scomp, int ncomp, int dcomp=0)</argsstring>
        <name>FillPatchAdd</name>
        <qualifiedname>amrex::AmrLevel::FillPatchAdd</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1AmrLevel" kindref="compound">AmrLevel</ref> &amp;</type>
          <declname>amrlevel</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>leveldata</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>boxGrow</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="407" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="2205" bodyend="2220"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a2447047c1010b47ee4f3b0de3d5811ee" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref></type>
        <definition>IntVect amrex::AmrLevel::ProperBlockingFactor</definition>
        <argsstring>(AmrLevel const &amp;amr_level, int boxGrow, IndexType const &amp;boxType, StateDescriptor const &amp;desc, int SComp)</argsstring>
        <name>ProperBlockingFactor</name>
        <qualifiedname>amrex::AmrLevel::ProperBlockingFactor</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1AmrLevel" kindref="compound">AmrLevel</ref> const &amp;</type>
          <declname>amr_level</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>boxGrow</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad35342b486ef07ba6108169268169296" kindref="member">IndexType</ref> const &amp;</type>
          <declname>boxType</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1StateDescriptor" kindref="compound">StateDescriptor</ref> const &amp;</type>
          <declname>desc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>SComp</declname>
        </param>
        <briefdescription>
<para>Recommendation of a proper blocking factor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="455" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="2276" bodyend="2292"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-func">
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1ae244321a30ba83806ce8204b7c437480" prot="protected" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::AmrLevel::AmrLevel</definition>
        <argsstring>() noexcept</argsstring>
        <name>AmrLevel</name>
        <qualifiedname>amrex::AmrLevel::AmrLevel</qualifiedname>
        <briefdescription>
<para>The constructors <ndash/> for derived classes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="461" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="461" bodyend="461"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1abff2e9f744631b186366976b2004a39f" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::AmrLevel::AmrLevel</definition>
        <argsstring>(Amr &amp;papa, int lev, const Geometry &amp;level_geom, const BoxArray &amp;ba, const DistributionMapping &amp;dm, Real time)</argsstring>
        <name>AmrLevel</name>
        <qualifiedname>amrex::AmrLevel::AmrLevel</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1Amr" kindref="compound">Amr</ref> &amp;</type>
          <declname>papa</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>level_geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="463" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="67" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a954293930715e389153026f726dbd960" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::AmrLevel::finishConstructor</definition>
        <argsstring>()</argsstring>
        <name>finishConstructor</name>
        <qualifiedname>amrex::AmrLevel::finishConstructor</qualifiedname>
        <briefdescription>
<para>Common code used by all constructors. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="471" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="473" bodyend="473"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1ab3d554a4e9e4b98aae59f88ebba1e288" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>order</declname>
            <defname>order</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::AmrLevel::storeRKCoarseData</definition>
        <argsstring>(int state_type, Real time, Real dt, MultiFab const &amp;S_old, Array&lt; MultiFab, order &gt; const &amp;rkk)</argsstring>
        <name>storeRKCoarseData</name>
        <qualifiedname>amrex::AmrLevel::storeRKCoarseData</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>state_type</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dt</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> const &amp;</type>
          <declname>S_old</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>, order &gt; const &amp;</type>
          <declname>rkk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="501" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="660" bodyend="678"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrLevel_1a262e295c3b6e661f434303f502c9d442" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::AmrLevel::FillRKPatch</definition>
        <argsstring>(int state_index, MultiFab &amp;S, Real time, int stage, int iteration, int ncycle)</argsstring>
        <name>FillRKPatch</name>
        <qualifiedname>amrex::AmrLevel::FillRKPatch</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>state_index</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>S</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>stage</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>iteration</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncycle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="505" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="2256" bodyend="2273"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Virtual base class for managing individual levels. <ref refid="classamrex_1_1AmrLevel" kindref="compound">AmrLevel</ref> functions both as a container for state data on a level and also manages the advancement of data in time. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="7">
        <label>amrex::BoxND&lt; AMREX_SPACEDIM &gt;</label>
        <link refid="classamrex_1_1BoxND"/>
      </node>
      <node id="78">
        <label>amrex::FabFactory&lt; amrex::FArrayBox &gt;</label>
        <link refid="classamrex_1_1FabFactory"/>
      </node>
      <node id="6">
        <label>amrex::GpuArray&lt; ParticleReal, AMREX_SPACEDIM &gt;</label>
        <link refid="structamrex_1_1GpuArray"/>
      </node>
      <node id="13">
        <label>amrex::IndexTypeND&lt; AMREX_SPACEDIM &gt;</label>
        <link refid="classamrex_1_1IndexTypeND"/>
        <childnode refid="14" relation="public-inheritance">
        </childnode>
      </node>
      <node id="16">
        <label>amrex::IntVectND&lt; AMREX_SPACEDIM &gt;</label>
        <link refid="classamrex_1_1IntVectND"/>
      </node>
      <node id="24">
        <label>T</label>
      </node>
      <node id="52">
        <label>amrex::Vector&lt; Real &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="53" relation="public-inheritance">
        </childnode>
      </node>
      <node id="46">
        <label>amrex::Vector&lt; amrex::BoxArray &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="47" relation="public-inheritance">
        </childnode>
      </node>
      <node id="22">
        <label>amrex::Vector&lt; amrex::BoxND &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="23" relation="public-inheritance">
        </childnode>
      </node>
      <node id="44">
        <label>amrex::Vector&lt; amrex::DistributionMapping &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="45" relation="public-inheritance">
        </childnode>
      </node>
      <node id="42">
        <label>amrex::Vector&lt; amrex::Geometry &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="43" relation="public-inheritance">
        </childnode>
      </node>
      <node id="40">
        <label>amrex::Vector&lt; amrex::IntVectND &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="41" relation="public-inheritance">
        </childnode>
      </node>
      <node id="75">
        <label>amrex::Vector&lt; amrex::StateData &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="76" relation="public-inheritance">
        </childnode>
      </node>
      <node id="33">
        <label>amrex::Vector&lt; int &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="34" relation="public-inheritance">
        </childnode>
      </node>
      <node id="61">
        <label>amrex::Vector&lt; std::string &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="62" relation="public-inheritance">
        </childnode>
      </node>
      <node id="50">
        <label>amrex::Vector&lt; std::unique_ptr&lt; amrex::AmrLevel &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="51" relation="public-inheritance">
        </childnode>
      </node>
      <node id="79">
        <label>amrex::Vector&lt; std::unique_ptr&lt; amrex::FillPatcher&lt; amrex::MultiFab &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="80" relation="public-inheritance">
        </childnode>
      </node>
      <node id="73">
        <label>amrex::Vector&lt; std::unique_ptr&lt; amrex::StateDescriptor &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="74" relation="public-inheritance">
        </childnode>
      </node>
      <node id="59">
        <label>amrex::Vector&lt; std::unique_ptr&lt; std::fstream &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="60" relation="public-inheritance">
        </childnode>
      </node>
      <node id="36">
        <label>amrex::Amr</label>
        <link refid="classamrex_1_1Amr"/>
        <childnode refid="37" relation="public-inheritance">
        </childnode>
        <childnode refid="48" relation="usage">
          <edgelabel>check_file_root</edgelabel>
          <edgelabel>initial_grids_file</edgelabel>
          <edgelabel>plot_file_root</edgelabel>
          <edgelabel>probin_file</edgelabel>
          <edgelabel>regrid_grids_file</edgelabel>
          <edgelabel>restart_chkfile</edgelabel>
          <edgelabel>restart_pltfile</edgelabel>
          <edgelabel>small_plot_file_root</edgelabel>
          <edgelabel>subcycling_mode</edgelabel>
        </childnode>
        <childnode refid="50" relation="usage">
          <edgelabel>amr_level</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>check_per</edgelabel>
          <edgelabel>cumtime</edgelabel>
          <edgelabel>loadbalance_max_fac</edgelabel>
          <edgelabel>plot_log_per</edgelabel>
          <edgelabel>plot_per</edgelabel>
          <edgelabel>small_plot_log_per</edgelabel>
          <edgelabel>small_plot_per</edgelabel>
          <edgelabel>start_time</edgelabel>
        </childnode>
        <childnode refid="52" relation="usage">
          <edgelabel>dt_level</edgelabel>
          <edgelabel>dt_min</edgelabel>
        </childnode>
        <childnode refid="33" relation="usage">
          <edgelabel>level_count</edgelabel>
          <edgelabel>level_steps</edgelabel>
          <edgelabel>n_cycle</edgelabel>
          <edgelabel>regrid_int</edgelabel>
        </childnode>
        <childnode refid="54" relation="usage">
          <edgelabel>gridlog</edgelabel>
          <edgelabel>runlog</edgelabel>
          <edgelabel>runlog_terse</edgelabel>
        </childnode>
        <childnode refid="59" relation="usage">
          <edgelabel>datalog</edgelabel>
        </childnode>
        <childnode refid="61" relation="usage">
          <edgelabel>datalogname</edgelabel>
        </childnode>
        <childnode refid="63" relation="usage">
          <edgelabel>levelbld</edgelabel>
        </childnode>
        <childnode refid="64" relation="usage">
          <edgelabel>derive_plot_vars</edgelabel>
          <edgelabel>derive_small_plot_vars</edgelabel>
          <edgelabel>state_plot_vars</edgelabel>
          <edgelabel>state_small_plot_vars</edgelabel>
        </childnode>
        <childnode refid="46" relation="usage">
          <edgelabel>initial_ba</edgelabel>
          <edgelabel>regrid_ba</edgelabel>
        </childnode>
        <childnode refid="65" relation="usage">
          <edgelabel>intersect_hix</edgelabel>
          <edgelabel>intersect_hiy</edgelabel>
          <edgelabel>intersect_hiz</edgelabel>
          <edgelabel>intersect_lox</edgelabel>
          <edgelabel>intersect_loy</edgelabel>
          <edgelabel>intersect_loz</edgelabel>
        </childnode>
      </node>
      <node id="37">
        <label>amrex::AmrCore</label>
        <link refid="classamrex_1_1AmrCore"/>
        <childnode refid="38" relation="public-inheritance">
        </childnode>
      </node>
      <node id="39">
        <label>amrex::AmrInfo</label>
        <link refid="structamrex_1_1AmrInfo"/>
        <childnode refid="40" relation="usage">
          <edgelabel>blocking_factor</edgelabel>
          <edgelabel>max_grid_size</edgelabel>
          <edgelabel>n_error_buf</edgelabel>
          <edgelabel>ref_ratio</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>grid_eff</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>refine_grid_layout_dims</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>amrex::AmrLevel</label>
        <link refid="classamrex_1_1AmrLevel"/>
        <childnode refid="2" relation="usage">
          <edgelabel>geom</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>edge_grids</edgelabel>
          <edgelabel>grids</edgelabel>
          <edgelabel>m_AreaNotToTag</edgelabel>
          <edgelabel>nodal_grids</edgelabel>
        </childnode>
        <childnode refid="30" relation="usage">
          <edgelabel>dmap</edgelabel>
        </childnode>
        <childnode refid="36" relation="usage">
          <edgelabel>parent</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>crse_ratio</edgelabel>
          <edgelabel>fine_ratio</edgelabel>
        </childnode>
        <childnode refid="66" relation="usage">
          <edgelabel>derive_lst</edgelabel>
        </childnode>
        <childnode refid="72" relation="usage">
          <edgelabel>desc_lst</edgelabel>
        </childnode>
        <childnode refid="75" relation="usage">
          <edgelabel>state</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>m_AreaToTag</edgelabel>
        </childnode>
        <childnode refid="77" relation="usage">
          <edgelabel>m_factory</edgelabel>
        </childnode>
        <childnode refid="79" relation="usage">
          <edgelabel>m_fillpatcher</edgelabel>
        </childnode>
      </node>
      <node id="38">
        <label>amrex::AmrMesh</label>
        <link refid="classamrex_1_1AmrMesh"/>
        <childnode refid="39" relation="protected-inheritance">
        </childnode>
        <childnode refid="42" relation="usage">
          <edgelabel>geom</edgelabel>
        </childnode>
        <childnode refid="44" relation="usage">
          <edgelabel>dmap</edgelabel>
        </childnode>
        <childnode refid="46" relation="usage">
          <edgelabel>grids</edgelabel>
        </childnode>
      </node>
      <node id="21">
        <label>amrex::BARef</label>
        <link refid="structamrex_1_1BARef"/>
        <childnode refid="22" relation="usage">
          <edgelabel>m_abox</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>bbox</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>crsn</edgelabel>
        </childnode>
        <childnode refid="25" relation="usage">
          <edgelabel>hash</edgelabel>
        </childnode>
      </node>
      <node id="18">
        <label>amrex::BATbndryReg</label>
        <link refid="structamrex_1_1BATbndryReg"/>
        <childnode refid="19" relation="usage">
          <edgelabel>m_face</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
          <edgelabel>m_doihi</edgelabel>
          <edgelabel>m_doilo</edgelabel>
          <edgelabel>m_hishft</edgelabel>
          <edgelabel>m_loshft</edgelabel>
        </childnode>
      </node>
      <node id="15">
        <label>amrex::BATcoarsenRatio</label>
        <link refid="structamrex_1_1BATcoarsenRatio"/>
        <childnode refid="16" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
        </childnode>
      </node>
      <node id="12">
        <label>amrex::BATindexType</label>
        <link refid="structamrex_1_1BATindexType"/>
        <childnode refid="13" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
      </node>
      <node id="17">
        <label>amrex::BATindexType_coarsenRatio</label>
        <link refid="structamrex_1_1BATindexType__coarsenRatio"/>
        <childnode refid="13" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
        </childnode>
      </node>
      <node id="11">
        <label>amrex::BATnull</label>
        <link refid="structamrex_1_1BATnull"/>
      </node>
      <node id="9">
        <label>amrex::BATransformer</label>
        <link refid="structamrex_1_1BATransformer"/>
        <childnode refid="10" relation="usage">
          <edgelabel>m_op</edgelabel>
        </childnode>
      </node>
      <node id="10">
        <label>amrex::BATransformer::BATOp</label>
        <link refid="unionamrex_1_1BATransformer_1_1BATOp"/>
        <childnode refid="11" relation="usage">
          <edgelabel>m_null</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>m_indexType</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>m_coarsenRatio</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>m_indexType_coarsenRatio</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>m_bndryReg</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>amrex::BoxArray</label>
        <link refid="classamrex_1_1BoxArray"/>
        <childnode refid="9" relation="usage">
          <edgelabel>m_bat</edgelabel>
        </childnode>
        <childnode refid="20" relation="usage">
          <edgelabel>m_ref</edgelabel>
        </childnode>
        <childnode refid="28" relation="usage">
          <edgelabel>m_simplified_list</edgelabel>
        </childnode>
      </node>
      <node id="29">
        <label>amrex::BoxList</label>
        <link refid="classamrex_1_1BoxList"/>
        <childnode refid="22" relation="usage">
          <edgelabel>m_lbox</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>btype</edgelabel>
        </childnode>
      </node>
      <node id="14">
        <label>amrex::CellIndexEnum</label>
        <link refid="structamrex_1_1CellIndexEnum"/>
      </node>
      <node id="3">
        <label>amrex::CoordSys</label>
        <link refid="classamrex_1_1CoordSys"/>
        <childnode refid="4" relation="usage">
          <edgelabel>dx</edgelabel>
          <edgelabel>inv_dx</edgelabel>
          <edgelabel>offset</edgelabel>
        </childnode>
      </node>
      <node id="66">
        <label>amrex::DeriveList</label>
        <link refid="classamrex_1_1DeriveList"/>
        <childnode refid="67" relation="usage">
          <edgelabel>lst</edgelabel>
        </childnode>
      </node>
      <node id="68">
        <label>amrex::DeriveRec</label>
        <link refid="classamrex_1_1DeriveRec"/>
        <childnode refid="48" relation="usage">
          <edgelabel>derive_name</edgelabel>
        </childnode>
        <childnode refid="61" relation="usage">
          <edgelabel>variable_names</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>der_type</edgelabel>
        </childnode>
        <childnode refid="69" relation="usage">
          <edgelabel>mapper</edgelabel>
        </childnode>
        <childnode refid="71" relation="usage">
          <edgelabel>rng</edgelabel>
        </childnode>
      </node>
      <node id="71">
        <label>amrex::DeriveRec::StateRange</label>
        <link refid="structamrex_1_1DeriveRec_1_1StateRange"/>
        <childnode refid="71" relation="usage">
          <edgelabel>next</edgelabel>
        </childnode>
      </node>
      <node id="72">
        <label>amrex::DescriptorList</label>
        <link refid="classamrex_1_1DescriptorList"/>
        <childnode refid="73" relation="usage">
          <edgelabel>desc</edgelabel>
        </childnode>
      </node>
      <node id="30">
        <label>amrex::DistributionMapping</label>
        <link refid="classamrex_1_1DistributionMapping"/>
        <childnode refid="31" relation="usage">
          <edgelabel>m_ref</edgelabel>
        </childnode>
      </node>
      <node id="32">
        <label>amrex::DistributionMapping::Ref</label>
        <link refid="structamrex_1_1DistributionMapping_1_1Ref"/>
        <childnode refid="33" relation="usage">
          <edgelabel>m_index_array</edgelabel>
          <edgelabel>m_pmap</edgelabel>
        </childnode>
        <childnode refid="35" relation="usage">
          <edgelabel>m_ownership</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>amrex::Geometry</label>
        <link refid="classamrex_1_1Geometry"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>prob_domain</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>roundoff_hi</edgelabel>
          <edgelabel>roundoff_lo</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>domain</edgelabel>
        </childnode>
      </node>
      <node id="26">
        <label>amrex::IntVectND&lt; dim &gt;</label>
        <link refid="classamrex_1_1IntVectND"/>
      </node>
      <node id="70">
        <label>amrex::InterpBase</label>
        <link refid="classamrex_1_1InterpBase"/>
      </node>
      <node id="69">
        <label>amrex::Interpolater</label>
        <link refid="classamrex_1_1Interpolater"/>
        <childnode refid="70" relation="public-inheritance">
        </childnode>
      </node>
      <node id="63">
        <label>amrex::LevelBld</label>
        <link refid="classamrex_1_1LevelBld"/>
      </node>
      <node id="19">
        <label>amrex::Orientation</label>
        <link refid="classamrex_1_1Orientation"/>
      </node>
      <node id="4">
        <label>Real</label>
      </node>
      <node id="5">
        <label>amrex::RealBox</label>
        <link refid="classamrex_1_1RealBox"/>
        <childnode refid="4" relation="usage">
          <edgelabel>xhi</edgelabel>
          <edgelabel>xlo</edgelabel>
        </childnode>
      </node>
      <node id="67">
        <label>std::list&lt; amrex::DeriveRec &gt;</label>
        <childnode refid="68" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="64">
        <label>std::list&lt; std::string &gt;</label>
        <childnode refid="48" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="65">
        <label>std::multimap&lt; std::pair&lt; int, int &gt;, double &gt;</label>
      </node>
      <node id="20">
        <label>std::shared_ptr&lt; amrex::BARef &gt;</label>
        <childnode refid="21" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="28">
        <label>std::shared_ptr&lt; amrex::BoxList &gt;</label>
        <childnode refid="29" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="31">
        <label>std::shared_ptr&lt; amrex::DistributionMapping::Ref &gt;</label>
        <childnode refid="32" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="57">
        <label>std::basic_ios&lt; Char &gt;</label>
        <childnode refid="58" relation="public-inheritance">
        </childnode>
      </node>
      <node id="55">
        <label>std::basic_ofstream&lt; Char &gt;</label>
        <childnode refid="56" relation="public-inheritance">
        </childnode>
      </node>
      <node id="56">
        <label>std::basic_ostream&lt; Char &gt;</label>
        <childnode refid="57" relation="public-inheritance">
        </childnode>
      </node>
      <node id="49">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="58">
        <label>std::ios_base</label>
      </node>
      <node id="54">
        <label>std::ofstream</label>
        <childnode refid="55" relation="public-inheritance">
        </childnode>
      </node>
      <node id="48">
        <label>std::string</label>
        <childnode refid="49" relation="public-inheritance">
        </childnode>
      </node>
      <node id="53">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="24" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="47">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="24" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="23">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="24" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="45">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="24" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="43">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="24" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="41">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="24" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="76">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="24" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="34">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="24" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="62">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="24" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="51">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="24" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="80">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="24" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="74">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="24" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="60">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="24" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="77">
        <label>std::unique_ptr&lt; amrex::FabFactory&lt; amrex::FArrayBox &gt; &gt;</label>
        <childnode refid="78" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="25">
        <label>std::unordered_map&lt; IntVect, std::vector&lt; int &gt;, IntVect::shift_hasher &gt;</label>
        <childnode refid="26" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="27" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="35">
        <label>std::vector&lt; bool &gt;</label>
      </node>
      <node id="27">
        <label>std::vector&lt; int &gt;</label>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" line="37" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.H" bodystart="38" bodyend="510"/>
    <listofallmembers>
      <member refid="classamrex_1_1AmrLevel_1a96b6f33d22c9341b1cff894f17555f47" prot="public" virt="pure-virtual"><scope>amrex::AmrLevel</scope><name>advance</name></member>
      <member refid="classamrex_1_1AmrLevel_1a6508a7e48f0d9da16e52fe4c79917ed3" prot="public" virt="virtual"><scope>amrex::AmrLevel</scope><name>allocOldData</name></member>
      <member refid="classamrex_1_1AmrLevel_1a1625024217a38ec9637cf3a428164c71" prot="private" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>Amr</name></member>
      <member refid="classamrex_1_1AmrLevel_1a83fa691ff414eb69f75eb6ae1f61b33aa26c31c2a7f0ffe418eca566dd60dcf9a" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>Amr1QtrTime</name></member>
      <member refid="classamrex_1_1AmrLevel_1a83fa691ff414eb69f75eb6ae1f61b33aae97e640066fc5c0776f300447bec0517" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>Amr3QtrTime</name></member>
      <member refid="classamrex_1_1AmrLevel_1a83fa691ff414eb69f75eb6ae1f61b33aabebff412ae8d5766104330cb143e91c9" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>AmrHalfTime</name></member>
      <member refid="classamrex_1_1AmrLevel_1addb399ac982bc95a1cb0456447f13e0e" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>AmrLevel</name></member>
      <member refid="classamrex_1_1AmrLevel_1ab329e55cd5e52a04db311b580716eaf9" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>AmrLevel</name></member>
      <member refid="classamrex_1_1AmrLevel_1ae244321a30ba83806ce8204b7c437480" prot="protected" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>AmrLevel</name></member>
      <member refid="classamrex_1_1AmrLevel_1abff2e9f744631b186366976b2004a39f" prot="protected" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>AmrLevel</name></member>
      <member refid="classamrex_1_1AmrLevel_1a83fa691ff414eb69f75eb6ae1f61b33aa9e86be887aaeac42a556e1f493337472" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>AmrNewTime</name></member>
      <member refid="classamrex_1_1AmrLevel_1a83fa691ff414eb69f75eb6ae1f61b33aa42553bff8bf17dc01b76ff8e44f3d902" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>AmrOldTime</name></member>
      <member refid="classamrex_1_1AmrLevel_1a83fa691ff414eb69f75eb6ae1f61b33aaae1e38c840ac8908874d6775a2d8506d" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>AmrOtherTime</name></member>
      <member refid="classamrex_1_1AmrLevel_1a2e5195db636cd719645d0d51228b4c7f" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>boxArray</name></member>
      <member refid="classamrex_1_1AmrLevel_1a169bef0169afefe32db1d994d2600c69" prot="public" virt="virtual"><scope>amrex::AmrLevel</scope><name>checkPoint</name></member>
      <member refid="classamrex_1_1AmrLevel_1a91b3bc1707aa307c5eeb73d9e2bfdd80" prot="public" virt="virtual"><scope>amrex::AmrLevel</scope><name>checkPointPost</name></member>
      <member refid="classamrex_1_1AmrLevel_1aa8953b789fe7af91082c2fefcced1a16" prot="public" virt="virtual"><scope>amrex::AmrLevel</scope><name>checkPointPre</name></member>
      <member refid="classamrex_1_1AmrLevel_1a252f7123d2f0a98351bc7b39c32b3152" prot="public" virt="pure-virtual"><scope>amrex::AmrLevel</scope><name>computeInitialDt</name></member>
      <member refid="classamrex_1_1AmrLevel_1a2ca2263f59a50956ec37ce72a4a02767" prot="public" virt="pure-virtual"><scope>amrex::AmrLevel</scope><name>computeNewDt</name></member>
      <member refid="classamrex_1_1AmrLevel_1a7a6ce272412a601c03330e55de170ea8" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>constructAreaNotToTag</name></member>
      <member refid="classamrex_1_1AmrLevel_1a0d87c01c6118a83ca5707b4d0ccd3bc0" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>countCells</name></member>
      <member refid="classamrex_1_1AmrLevel_1a962f9d201153832198014fba04698410" prot="public" virt="virtual"><scope>amrex::AmrLevel</scope><name>CreateLevelDirectory</name></member>
      <member refid="classamrex_1_1AmrLevel_1a7fc1ed7f6a21702c3af072650ed4de4a" prot="protected" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>crse_ratio</name></member>
      <member refid="classamrex_1_1AmrLevel_1a2d67ff78f28ebc3850bda9ca476b7f9c" prot="public" virt="virtual"><scope>amrex::AmrLevel</scope><name>derive</name></member>
      <member refid="classamrex_1_1AmrLevel_1aa57cb16059880124adbd17cba52c843d" prot="public" virt="virtual"><scope>amrex::AmrLevel</scope><name>derive</name></member>
      <member refid="classamrex_1_1AmrLevel_1a792f148ee0bb20432a4acefa1c2cac9a" prot="protected" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>derive_lst</name></member>
      <member refid="classamrex_1_1AmrLevel_1acb5f9e8c8d903d3a700d2cc11be500e5" prot="protected" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>desc_lst</name></member>
      <member refid="classamrex_1_1AmrLevel_1a6bf0f798f6082b4aa8e2a645b263e1b8" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>DistributionMap</name></member>
      <member refid="classamrex_1_1AmrLevel_1ab0ab7555be82910d8100d7bc3aa55d1d" prot="protected" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>dmap</name></member>
      <member refid="classamrex_1_1AmrLevel_1a6e8711584978e650966877a53becf391" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>Domain</name></member>
      <member refid="classamrex_1_1AmrLevel_1a7cf2da3e3135c31924af8e09fa0c8104" prot="private" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>edge_grids</name></member>
      <member refid="classamrex_1_1AmrLevel_1a75c6f30a5526b2d5dbbb24646f71dc8b" prot="public" virt="pure-virtual"><scope>amrex::AmrLevel</scope><name>errorEst</name></member>
      <member refid="classamrex_1_1AmrLevel_1a03b21d394e621b009b473c427b4769d0" prot="public" virt="virtual"><scope>amrex::AmrLevel</scope><name>estimateWork</name></member>
      <member refid="classamrex_1_1AmrLevel_1a4c093377c3b774a542342a040b27afe4" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>Factory</name></member>
      <member refid="classamrex_1_1AmrLevel_1a9ebdb49d2d66ac577de280ed9ed0fd28" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>FillCoarsePatch</name></member>
      <member refid="classamrex_1_1AmrLevel_1a55c1a2d0040ba28bf022fb293113a5f2" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>FillPatch</name></member>
      <member refid="classamrex_1_1AmrLevel_1aa72cce79d9f341c7f9a11addfcaec95f" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>FillPatchAdd</name></member>
      <member refid="classamrex_1_1AmrLevel_1af7dbabf3cd9767f5e38dc96157986618" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>FillPatcherFill</name></member>
      <member refid="classamrex_1_1AmrLevel_1a39d92a4048c0af0c7b1737d5c4e0c334" prot="private" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>FillPatchIterator</name></member>
      <member refid="classamrex_1_1AmrLevel_1a872278b3cad59c0978412af0cd9ec0cf" prot="private" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>FillPatchIteratorHelper</name></member>
      <member refid="classamrex_1_1AmrLevel_1a262e295c3b6e661f434303f502c9d442" prot="private" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>FillRKPatch</name></member>
      <member refid="classamrex_1_1AmrLevel_1a109f988dd098fdb2a6b854a742015397" prot="protected" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>fine_ratio</name></member>
      <member refid="classamrex_1_1AmrLevel_1a3c94cb9318ca878ae41529469753c91a" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>fineRatio</name></member>
      <member refid="classamrex_1_1AmrLevel_1a954293930715e389153026f726dbd960" prot="protected" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>finishConstructor</name></member>
      <member refid="classamrex_1_1AmrLevel_1ac96bd5573c5f63e798aa682a7d5756ae" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>FlushFPICache</name></member>
      <member refid="classamrex_1_1AmrLevel_1a22d1ec64be93cec74c015299438c7a7a" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>Geom</name></member>
      <member refid="classamrex_1_1AmrLevel_1a571b97b176d8618fba71f56c8b44a7c8" prot="protected" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>geom</name></member>
      <member refid="classamrex_1_1AmrLevel_1a5f84c93c82667982bbec8f9215b630af" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>get_data</name></member>
      <member refid="classamrex_1_1AmrLevel_1a7ef50123ae8e520914847e15973b104a" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>get_derive_lst</name></member>
      <member refid="classamrex_1_1AmrLevel_1ae4860b29be69f52af9b1723ff75ae7e2" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>get_desc_lst</name></member>
      <member refid="classamrex_1_1AmrLevel_1aec6f43bc6e1a2b0fd9532d07a965bbc0" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>get_new_data</name></member>
      <member refid="classamrex_1_1AmrLevel_1ac2f2f12e361cd752f1813ae537584d89" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>get_new_data</name></member>
      <member refid="classamrex_1_1AmrLevel_1aee268fcdbee61d28239fbc1c3ceabdd8" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>get_old_data</name></member>
      <member refid="classamrex_1_1AmrLevel_1a2fcaec76700e17cb5d6e4c8ad21a0f8f" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>get_old_data</name></member>
      <member refid="classamrex_1_1AmrLevel_1a5f18e43274c0087dc14e92966e44ddfd" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>get_state_data</name></member>
      <member refid="classamrex_1_1AmrLevel_1afd13b08745699794f3a991500e901974" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>getAreaNotToTag</name></member>
      <member refid="classamrex_1_1AmrLevel_1a804883955eae48bd6992fb770324a981" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>getAreaToTag</name></member>
      <member refid="classamrex_1_1AmrLevel_1a4bb1f80ca05ed54727d81042c79e880b" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>getBCArray</name></member>
      <member refid="classamrex_1_1AmrLevel_1ad3cf13198c2fc19f4d692b5282b1ddc5" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>getEdgeBoxArray</name></member>
      <member refid="classamrex_1_1AmrLevel_1a5f0a9f5d2c0e0733ad3cbbda47912480" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>getNodalBoxArray</name></member>
      <member refid="classamrex_1_1AmrLevel_1a5ffc98d138f381698b2a61fc6cb2ce01" prot="protected" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>grids</name></member>
      <member refid="classamrex_1_1AmrLevel_1a1e14a83038675d42ed7065b0262bc2a7" prot="public" virt="pure-virtual"><scope>amrex::AmrLevel</scope><name>init</name></member>
      <member refid="classamrex_1_1AmrLevel_1ae6c24e645074589f76ff10eb4c37c8a1" prot="public" virt="pure-virtual"><scope>amrex::AmrLevel</scope><name>init</name></member>
      <member refid="classamrex_1_1AmrLevel_1a862d5c3479aee494a516f53ea70fea0b" prot="public" virt="pure-virtual"><scope>amrex::AmrLevel</scope><name>initData</name></member>
      <member refid="classamrex_1_1AmrLevel_1acaf1b5936e81691794578618126d813d" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>isStateVariable</name></member>
      <member refid="classamrex_1_1AmrLevel_1a18159b17b5d40999e3f38474e53f23ff" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>Level</name></member>
      <member refid="classamrex_1_1AmrLevel_1a15535c7cc1f73df2cc3b0b720d8ab5a4" prot="protected" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>level</name></member>
      <member refid="classamrex_1_1AmrLevel_1a7a90e201ef6ef11f2c42fc9a0de76939" prot="protected" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>levelDirectoryCreated</name></member>
      <member refid="classamrex_1_1AmrLevel_1a2c60baf6b91ceb8f41054f1ccd1b4e5e" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>LevelDirectoryNames</name></member>
      <member refid="classamrex_1_1AmrLevel_1aa11acf69e2d0372e204cfea5934658f6" prot="protected" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>m_AreaNotToTag</name></member>
      <member refid="classamrex_1_1AmrLevel_1a512443a06a9bee5a9c911326c65e1370" prot="protected" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>m_AreaToTag</name></member>
      <member refid="classamrex_1_1AmrLevel_1a948320fb29597814dca7906e314a2c13" prot="protected" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>m_factory</name></member>
      <member refid="classamrex_1_1AmrLevel_1a28bc1fbc65e6522419abb88ac1fa8706" prot="protected" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>m_fillpatcher</name></member>
      <member refid="classamrex_1_1AmrLevel_1a2e78f3a4398272855b0a9ac3becaefd7" prot="public" virt="virtual"><scope>amrex::AmrLevel</scope><name>manual_tags_placement</name></member>
      <member refid="classamrex_1_1AmrLevel_1a4672d7cd3c482aedb037347c1fddc0ff" prot="private" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>nodal_grids</name></member>
      <member refid="classamrex_1_1AmrLevel_1ac66753a2ff2df956a5df08dd6cb9f81a" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>nStep</name></member>
      <member refid="classamrex_1_1AmrLevel_1ae93e34dd07b1784fc7fe902331d232b2" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>numGrids</name></member>
      <member refid="classamrex_1_1AmrLevel_1aa9666a2babd9d59a595a2c3695f38f00" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>numStates</name></member>
      <member refid="classamrex_1_1AmrLevel_1a5d15ca0da28ca003355c6f45b5cb1cdd" prot="public" virt="virtual"><scope>amrex::AmrLevel</scope><name>okToContinue</name></member>
      <member refid="classamrex_1_1AmrLevel_1aa1a00039cf415f21002bec0bc15342ac" prot="public" virt="virtual"><scope>amrex::AmrLevel</scope><name>okToRegrid</name></member>
      <member refid="classamrex_1_1AmrLevel_1a8d0c8744882f35a1dd987853210e17d0" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>operator=</name></member>
      <member refid="classamrex_1_1AmrLevel_1aef296fb061850519eb90996674e389af" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>operator=</name></member>
      <member refid="classamrex_1_1AmrLevel_1aeb2c20016c60209d0bc5112f262957c2" prot="protected" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>parent</name></member>
      <member refid="classamrex_1_1AmrLevel_1ac7f38ed4057c3c789e73567e1f455ccb" prot="public" virt="pure-virtual"><scope>amrex::AmrLevel</scope><name>post_init</name></member>
      <member refid="classamrex_1_1AmrLevel_1a0289a6cdc3349c2c0b778cc25901e364" prot="public" virt="pure-virtual"><scope>amrex::AmrLevel</scope><name>post_regrid</name></member>
      <member refid="classamrex_1_1AmrLevel_1afc4f639ee0e05fd9a827db22694941a0" prot="public" virt="virtual"><scope>amrex::AmrLevel</scope><name>post_restart</name></member>
      <member refid="classamrex_1_1AmrLevel_1a9ef7971fd5d7dd152886c202feb7d806" prot="protected" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>post_step_regrid</name></member>
      <member refid="classamrex_1_1AmrLevel_1a6dc31baa80c3f278350ad20a64577155" prot="public" virt="virtual"><scope>amrex::AmrLevel</scope><name>post_timestep</name></member>
      <member refid="classamrex_1_1AmrLevel_1a6c4e273ed6a867d2da0dbf8ae325c82a" prot="public" virt="virtual"><scope>amrex::AmrLevel</scope><name>postCoarseTimeStep</name></member>
      <member refid="classamrex_1_1AmrLevel_1ae5ca0552f0073d959717f3dc4a375478" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>postStepRegrid</name></member>
      <member refid="classamrex_1_1AmrLevel_1a2447047c1010b47ee4f3b0de3d5811ee" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>ProperBlockingFactor</name></member>
      <member refid="classamrex_1_1AmrLevel_1a56805171637298d888a0e5215bab4e82" prot="public" virt="virtual"><scope>amrex::AmrLevel</scope><name>removeOldData</name></member>
      <member refid="classamrex_1_1AmrLevel_1a0aa73b17e9be18d811a21128c8c2f5f9" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>reset</name></member>
      <member refid="classamrex_1_1AmrLevel_1af4f83f6e16dfb5c60f985370541062fa" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>resetFillPatcher</name></member>
      <member refid="classamrex_1_1AmrLevel_1a05899e47b34be116fa7a9a40ecaa74ca" prot="public" virt="virtual"><scope>amrex::AmrLevel</scope><name>restart</name></member>
      <member refid="classamrex_1_1AmrLevel_1a95aea02fe7abbf3d1e5cd58ee5ff7d41" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>RK</name></member>
      <member refid="classamrex_1_1AmrLevel_1adea5b76b420f0a2ccd2852d66301d376" prot="public" virt="virtual"><scope>amrex::AmrLevel</scope><name>set_preferred_boundary_values</name></member>
      <member refid="classamrex_1_1AmrLevel_1a6560cdb555b4af1f6d5b525e1b25e4eb" prot="public" virt="virtual"><scope>amrex::AmrLevel</scope><name>set_state_in_checkpoint</name></member>
      <member refid="classamrex_1_1AmrLevel_1aca274822a300bceaaa023cc330d441ba" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>setAreaNotToTag</name></member>
      <member refid="classamrex_1_1AmrLevel_1a33b3a3f0806c790a05f39fae227042a0" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>SetLevelDirectoryCreated</name></member>
      <member refid="classamrex_1_1AmrLevel_1a2f324e3977de1beef5d204c04be51f4a" prot="public" virt="virtual"><scope>amrex::AmrLevel</scope><name>setPhysBoundaryValues</name></member>
      <member refid="classamrex_1_1AmrLevel_1a8023d9fbf7106fe39977f43d1b07460e" prot="public" virt="virtual"><scope>amrex::AmrLevel</scope><name>setPlotVariables</name></member>
      <member refid="classamrex_1_1AmrLevel_1a3740e0877382738d1cd8d382909ef855" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>setPostStepRegrid</name></member>
      <member refid="classamrex_1_1AmrLevel_1adf299b915ff9411e6684762c72da84bc" prot="public" virt="virtual"><scope>amrex::AmrLevel</scope><name>setSmallPlotVariables</name></member>
      <member refid="classamrex_1_1AmrLevel_1a5b311a4d4139cce9025d1c41d28586b1" prot="public" virt="virtual"><scope>amrex::AmrLevel</scope><name>setTimeLevel</name></member>
      <member refid="classamrex_1_1AmrLevel_1ac00306c6990dffb14241578a8f4aa281" prot="protected" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>state</name></member>
      <member refid="classamrex_1_1AmrLevel_1ab3d554a4e9e4b98aae59f88ebba1e288" prot="private" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>storeRKCoarseData</name></member>
      <member refid="classamrex_1_1AmrLevel_1aafabc1e8a1b6e1b96230fbf6debe2465" prot="public" virt="virtual"><scope>amrex::AmrLevel</scope><name>thePlotFileType</name></member>
      <member refid="classamrex_1_1AmrLevel_1a83fa691ff414eb69f75eb6ae1f61b33a" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>TimeLevel</name></member>
      <member refid="classamrex_1_1AmrLevel_1a69fdf4e347142373696281d9269c6799" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>UpdateDistributionMaps</name></member>
      <member refid="classamrex_1_1AmrLevel_1a58f60bcd444acf5b3acfe94db3981969" prot="public" virt="non-virtual"><scope>amrex::AmrLevel</scope><name>which_time</name></member>
      <member refid="classamrex_1_1AmrLevel_1a1c91cb169c86fd95b76b5742687ad949" prot="public" virt="virtual"><scope>amrex::AmrLevel</scope><name>WorkEstType</name></member>
      <member refid="classamrex_1_1AmrLevel_1aac3f74f8caafcc7b7cf0d3b33480e5d7" prot="public" virt="virtual"><scope>amrex::AmrLevel</scope><name>writePlotFile</name></member>
      <member refid="classamrex_1_1AmrLevel_1a3e2abd422506f2fb1ee6f55a47433f42" prot="public" virt="virtual"><scope>amrex::AmrLevel</scope><name>writePlotFilePost</name></member>
      <member refid="classamrex_1_1AmrLevel_1a186555902c913a437e6676f5cec90ae8" prot="public" virt="virtual"><scope>amrex::AmrLevel</scope><name>writePlotFilePre</name></member>
      <member refid="classamrex_1_1AmrLevel_1a1de622e094b4e64e2491a82a3acefc1d" prot="public" virt="virtual"><scope>amrex::AmrLevel</scope><name>writePlotNow</name></member>
      <member refid="classamrex_1_1AmrLevel_1a82a5b2421ec382b24be0a33a27d82f59" prot="public" virt="virtual"><scope>amrex::AmrLevel</scope><name>writeSmallPlotFile</name></member>
      <member refid="classamrex_1_1AmrLevel_1a2972b42fa723220283b8275fcd7a8be8" prot="public" virt="virtual"><scope>amrex::AmrLevel</scope><name>writeSmallPlotNow</name></member>
      <member refid="classamrex_1_1AmrLevel_1af651bb170ec4a1a93a4eed118dead881" prot="public" virt="virtual"><scope>amrex::AmrLevel</scope><name>~AmrLevel</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
