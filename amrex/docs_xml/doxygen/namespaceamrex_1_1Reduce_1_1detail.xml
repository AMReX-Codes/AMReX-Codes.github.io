<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="namespaceamrex_1_1Reduce_1_1detail" kind="namespace" language="C++">
    <compoundname>amrex::Reduce::detail</compoundname>
    <innerclass refid="structamrex_1_1Reduce_1_1detail_1_1iterate__box" prot="private">amrex::Reduce::detail::iterate_box</innerclass>
    <innerclass refid="structamrex_1_1Reduce_1_1detail_1_1iterate__box__comp" prot="private">amrex::Reduce::detail::iterate_box_comp</innerclass>
    <sectiondef kind="func">
      <memberdef kind="function" id="namespaceamrex_1_1Reduce_1_1detail_1a0f0a988c3cb2a6264bff640de9655097" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename P</type>
          </param>
        </templateparamlist>
        <type>__device__ void</type>
        <definition>__device__ void amrex::Reduce::detail::for_each_parallel</definition>
        <argsstring>(T &amp;d, T const &amp;s)</argsstring>
        <name>for_each_parallel</name>
        <qualifiedname>amrex::Reduce::detail::for_each_parallel</qualifiedname>
        <param>
          <type>T &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Reduce.H" line="38" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Reduce.H" bodystart="38" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Reduce_1_1detail_1a22868fad1bcc762c58db7e786b599966" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename P</type>
          </param>
          <param>
            <type>typename P1</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Ps</declname>
            <defname>Ps</defname>
          </param>
        </templateparamlist>
        <type>__device__ void</type>
        <definition>__device__ void amrex::Reduce::detail::for_each_parallel</definition>
        <argsstring>(T &amp;d, T const &amp;s)</argsstring>
        <name>for_each_parallel</name>
        <qualifiedname>amrex::Reduce::detail::for_each_parallel</qualifiedname>
        <param>
          <type>T &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Reduce.H" line="45" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Reduce.H" bodystart="45" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Reduce_1_1detail_1a2afdb99ecedce3adcd8c55f5151b8694" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename P</type>
          </param>
        </templateparamlist>
        <type>__host__ __device__ void</type>
        <definition>__host__ __device__ void amrex::Reduce::detail::for_each_local</definition>
        <argsstring>(T &amp;d, T const &amp;s)</argsstring>
        <name>for_each_local</name>
        <qualifiedname>amrex::Reduce::detail::for_each_local</qualifiedname>
        <param>
          <type>T &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Reduce.H" line="55" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Reduce.H" bodystart="55" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Reduce_1_1detail_1a60408b435e35dde1e125e77939b9ebb5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename P</type>
          </param>
          <param>
            <type>typename P1</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Ps</declname>
            <defname>Ps</defname>
          </param>
        </templateparamlist>
        <type>__host__ __device__ void</type>
        <definition>__host__ __device__ void amrex::Reduce::detail::for_each_local</definition>
        <argsstring>(T &amp;d, T const &amp;s)</argsstring>
        <name>for_each_local</name>
        <qualifiedname>amrex::Reduce::detail::for_each_local</qualifiedname>
        <param>
          <type>T &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Reduce.H" line="62" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Reduce.H" bodystart="62" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Reduce_1_1detail_1a10c95f9a9c676b9cf7116eac65065444" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename P</type>
          </param>
        </templateparamlist>
        <type>__host__ __device__ constexpr void</type>
        <definition>__host__ __device__ constexpr void amrex::Reduce::detail::for_each_init</definition>
        <argsstring>(T &amp;t)</argsstring>
        <name>for_each_init</name>
        <qualifiedname>amrex::Reduce::detail::for_each_init</qualifiedname>
        <param>
          <type>T &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Reduce.H" line="70" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Reduce.H" bodystart="70" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Reduce_1_1detail_1a4bc66d3b444df3c1c27641078ba6ff1c" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename P</type>
          </param>
          <param>
            <type>typename P1</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Ps</declname>
            <defname>Ps</defname>
          </param>
        </templateparamlist>
        <type>__host__ __device__ constexpr void</type>
        <definition>__host__ __device__ constexpr void amrex::Reduce::detail::for_each_init</definition>
        <argsstring>(T &amp;t)</argsstring>
        <name>for_each_init</name>
        <qualifiedname>amrex::Reduce::detail::for_each_init</qualifiedname>
        <param>
          <type>T &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Reduce.H" line="77" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Reduce.H" bodystart="77" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Reduce_1_1detail_1a571f477028aa30d18b40b8f24f937e5a" prot="private" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>__device__ auto</type>
        <definition>__device__ auto amrex::Reduce::detail::call_f</definition>
        <argsstring>(F const &amp;f, int i, int j, int k, IndexType) noexcept -&gt; decltype(f(0, 0, 0))</argsstring>
        <name>call_f</name>
        <qualifiedname>amrex::Reduce::detail::call_f</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <param>
          <type>int</type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a7e095993c9b3f5a4c2abddd839d800e2" kindref="member">IndexType</ref></type>
          <defname>t</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Reduce.H" line="321" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Reduce.H" bodystart="321" bodyend="325"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Reduce_1_1detail_1aa873799c17be8869dc644fb5a3ae7149" prot="private" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename I</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Ps</declname>
            <defname>Ps</defname>
          </param>
          <param>
            <type>std::enable_if_t&lt; std::is_same&lt; iterate_box, I &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>__device__ void</type>
        <definition>__device__ void amrex::Reduce::detail::mf_call_f</definition>
        <argsstring>(F const &amp;f, int ibox, int i, int j, int k, int, T &amp;r) noexcept</argsstring>
        <name>mf_call_f</name>
        <qualifiedname>amrex::Reduce::detail::mf_call_f</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ibox</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <param>
          <type>int</type>
          <declname>k</declname>
        </param>
        <param>
          <type>int</type>
          <defname>ncomp</defname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Reduce.H" line="344" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Reduce.H" bodystart="344" bodyend="348"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Reduce.H" line="17" column="1"/>
  </compounddef>
</doxygen>
