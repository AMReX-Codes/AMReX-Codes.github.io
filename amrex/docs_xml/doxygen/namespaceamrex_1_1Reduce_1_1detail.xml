<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespaceamrex_1_1Reduce_1_1detail" kind="namespace" language="C++">
    <compoundname>amrex::Reduce::detail</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceamrex_1_1Reduce_1_1detail_1a084c624b29326e43e50a5dbe65db8b50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename P</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1a4e626ebf06898d71a9e0790877f1694f" kindref="member">AMREX_GPU_DEVICE</ref> void</type>
        <definition>AMREX_GPU_DEVICE void amrex::Reduce::detail::for_each_parallel</definition>
        <argsstring>(T &amp;d, T const &amp;s)</argsstring>
        <name>for_each_parallel</name>
        <param>
          <type>T &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Reduce.H" line="32" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Reduce.H" bodystart="32" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Reduce_1_1detail_1ad1214261e6fd754f2e41e878533756a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename P</type>
          </param>
          <param>
            <type>typename P1</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Ps</declname>
            <defname>Ps</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1a4e626ebf06898d71a9e0790877f1694f" kindref="member">AMREX_GPU_DEVICE</ref> void</type>
        <definition>AMREX_GPU_DEVICE void amrex::Reduce::detail::for_each_parallel</definition>
        <argsstring>(T &amp;d, T const &amp;s)</argsstring>
        <name>for_each_parallel</name>
        <param>
          <type>T &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Reduce.H" line="39" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Reduce.H" bodystart="39" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Reduce_1_1detail_1ad02f83351a56bf7abc3fc3ae5807ebce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename P</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1a4e626ebf06898d71a9e0790877f1694f" kindref="member">AMREX_GPU_DEVICE</ref> void</type>
        <definition>AMREX_GPU_DEVICE void amrex::Reduce::detail::for_each_local</definition>
        <argsstring>(T &amp;d, T const &amp;s)</argsstring>
        <name>for_each_local</name>
        <param>
          <type>T &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Reduce.H" line="47" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Reduce.H" bodystart="47" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Reduce_1_1detail_1af7250b0d542b5bed0a2c068b4b43085c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename P</type>
          </param>
          <param>
            <type>typename P1</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Ps</declname>
            <defname>Ps</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1a4e626ebf06898d71a9e0790877f1694f" kindref="member">AMREX_GPU_DEVICE</ref> void</type>
        <definition>AMREX_GPU_DEVICE void amrex::Reduce::detail::for_each_local</definition>
        <argsstring>(T &amp;d, T const &amp;s)</argsstring>
        <name>for_each_local</name>
        <param>
          <type>T &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Reduce.H" line="54" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Reduce.H" bodystart="54" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Reduce_1_1detail_1aa49407a52dbde68233cb025e571b8e0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename P</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::Reduce::detail::for_each_init</definition>
        <argsstring>(T &amp;t)</argsstring>
        <name>for_each_init</name>
        <param>
          <type>T &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Reduce.H" line="61" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Reduce.H" bodystart="61" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Reduce_1_1detail_1a87cd8d506ca082d704c64124129d5eab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename P</type>
          </param>
          <param>
            <type>typename P1</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Ps</declname>
            <defname>Ps</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::Reduce::detail::for_each_init</definition>
        <argsstring>(T &amp;t)</argsstring>
        <name>for_each_init</name>
        <param>
          <type>T &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Reduce.H" line="67" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Reduce.H" bodystart="67" bodyend="71"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Reduce.H" line="12" column="1"/>
  </compounddef>
</doxygen>
