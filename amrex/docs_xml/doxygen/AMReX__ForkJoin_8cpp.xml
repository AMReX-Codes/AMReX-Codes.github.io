<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="AMReX__ForkJoin_8cpp" kind="file" language="C++">
    <compoundname>AMReX_ForkJoin.cpp</compoundname>
    <includes refid="AMReX__ForkJoin_8H" local="no">AMReX_ForkJoin.H</includes>
    <includes refid="AMReX__ParmParse_8H" local="no">AMReX_ParmParse.H</includes>
    <includes refid="AMReX__Print_8H" local="no">AMReX_Print.H</includes>
    <incdepgraph>
      <node id="19956">
        <label>list</label>
      </node>
      <node id="19935">
        <label>AMReX_GpuContainers.H</label>
        <link refid="AMReX__GpuContainers_8H"/>
        <childnode refid="19911" relation="include">
        </childnode>
        <childnode refid="19840" relation="include">
        </childnode>
        <childnode refid="19936" relation="include">
        </childnode>
        <childnode refid="19932" relation="include">
        </childnode>
      </node>
      <node id="19837">
        <label>AMReX_ParallelContext.H</label>
        <link refid="AMReX__ParallelContext_8H"/>
        <childnode refid="19838" relation="include">
        </childnode>
        <childnode refid="19839" relation="include">
        </childnode>
        <childnode refid="19840" relation="include">
        </childnode>
        <childnode refid="19846" relation="include">
        </childnode>
      </node>
      <node id="19934">
        <label>iomanip</label>
      </node>
      <node id="19850">
        <label>functional</label>
      </node>
      <node id="19901">
        <label>AMReX_BoxArray.H</label>
        <link refid="AMReX__BoxArray_8H"/>
        <childnode refid="19849" relation="include">
        </childnode>
        <childnode refid="19886" relation="include">
        </childnode>
        <childnode refid="19895" relation="include">
        </childnode>
        <childnode refid="19902" relation="include">
        </childnode>
        <childnode refid="19877" relation="include">
        </childnode>
        <childnode refid="19883" relation="include">
        </childnode>
        <childnode refid="19863" relation="include">
        </childnode>
        <childnode refid="19840" relation="include">
        </childnode>
      </node>
      <node id="19892">
        <label>AMReX_BoxIterator.H</label>
        <link refid="AMReX__BoxIterator_8H"/>
        <childnode refid="19873" relation="include">
        </childnode>
        <childnode refid="19843" relation="include">
        </childnode>
        <childnode refid="19856" relation="include">
        </childnode>
        <childnode refid="19861" relation="include">
        </childnode>
        <childnode refid="19868" relation="include">
        </childnode>
        <childnode refid="19870" relation="include">
        </childnode>
      </node>
      <node id="19875">
        <label>limits</label>
      </node>
      <node id="19891">
        <label>AMReX_BLProfiler.H</label>
        <link refid="AMReX__BLProfiler_8H"/>
        <childnode refid="19851" relation="include">
        </childnode>
        <childnode refid="19861" relation="include">
        </childnode>
      </node>
      <node id="19856">
        <label>AMReX_Box.H</label>
        <link refid="AMReX__Box_8H"/>
        <childnode refid="19857" relation="include">
        </childnode>
        <childnode refid="19858" relation="include">
        </childnode>
        <childnode refid="19869" relation="include">
        </childnode>
        <childnode refid="19846" relation="include">
        </childnode>
        <childnode refid="19870" relation="include">
        </childnode>
        <childnode refid="19877" relation="include">
        </childnode>
        <childnode refid="19878" relation="include">
        </childnode>
        <childnode refid="19868" relation="include">
        </childnode>
        <childnode refid="19863" relation="include">
        </childnode>
        <childnode refid="19879" relation="include">
        </childnode>
        <childnode refid="19840" relation="include">
        </childnode>
        <childnode refid="19845" relation="include">
        </childnode>
        <childnode refid="19867" relation="include">
        </childnode>
      </node>
      <node id="19862">
        <label>float.h</label>
      </node>
      <node id="19922">
        <label>AMReX_GpuUtility.H</label>
        <link refid="AMReX__GpuUtility_8H"/>
        <childnode refid="19845" relation="include">
        </childnode>
        <childnode refid="19867" relation="include">
        </childnode>
        <childnode refid="19919" relation="include">
        </childnode>
        <childnode refid="19859" relation="include">
        </childnode>
        <childnode refid="19861" relation="include">
        </childnode>
        <childnode refid="19863" relation="include">
        </childnode>
        <childnode refid="19879" relation="include">
        </childnode>
        <childnode refid="19849" relation="include">
        </childnode>
        <childnode refid="19874" relation="include">
        </childnode>
      </node>
      <node id="19854">
        <label>cstdint</label>
      </node>
      <node id="19947">
        <label>AMReX_FabArrayBase.H</label>
        <link refid="AMReX__FabArrayBase_8H"/>
        <childnode refid="19851" relation="include">
        </childnode>
        <childnode refid="19901" relation="include">
        </childnode>
        <childnode refid="19903" relation="include">
        </childnode>
        <childnode refid="19904" relation="include">
        </childnode>
        <childnode refid="19948" relation="include">
        </childnode>
        <childnode refid="19946" relation="include">
        </childnode>
        <childnode refid="19933" relation="include">
        </childnode>
        <childnode refid="19885" relation="include">
        </childnode>
        <childnode refid="19914" relation="include">
        </childnode>
      </node>
      <node id="19903">
        <label>AMReX_DistributionMapping.H</label>
        <link refid="AMReX__DistributionMapping_8H"/>
        <childnode refid="19895" relation="include">
        </childnode>
        <childnode refid="19875" relation="include">
        </childnode>
        <childnode refid="19838" relation="include">
        </childnode>
        <childnode refid="19886" relation="include">
        </childnode>
        <childnode refid="19849" relation="include">
        </childnode>
        <childnode refid="19844" relation="include">
        </childnode>
        <childnode refid="19863" relation="include">
        </childnode>
        <childnode refid="19840" relation="include">
        </childnode>
        <childnode refid="19856" relation="include">
        </childnode>
        <childnode refid="19861" relation="include">
        </childnode>
        <childnode refid="19904" relation="include">
        </childnode>
      </node>
      <node id="19923">
        <label>AMReX_Functional.H</label>
        <link refid="AMReX__Functional_8H"/>
        <childnode refid="19845" relation="include">
        </childnode>
      </node>
      <node id="19870">
        <label>AMReX_IntVect.H</label>
        <link refid="AMReX__IntVect_8H"/>
        <childnode refid="19871" relation="include">
        </childnode>
        <childnode refid="19846" relation="include">
        </childnode>
        <childnode refid="19868" relation="include">
        </childnode>
        <childnode refid="19863" relation="include">
        </childnode>
        <childnode refid="19840" relation="include">
        </childnode>
        <childnode refid="19860" relation="include">
        </childnode>
        <childnode refid="19843" relation="include">
        </childnode>
        <childnode refid="19859" relation="include">
        </childnode>
        <childnode refid="19845" relation="include">
        </childnode>
        <childnode refid="19857" relation="include">
        </childnode>
        <childnode refid="19873" relation="include">
        </childnode>
        <childnode refid="19874" relation="include">
        </childnode>
        <childnode refid="19875" relation="include">
        </childnode>
        <childnode refid="19876" relation="include">
        </childnode>
        <childnode refid="19841" relation="include">
        </childnode>
      </node>
      <node id="19844">
        <label>AMReX.H</label>
        <link refid="AMReX_8H"/>
        <childnode refid="19845" relation="include">
        </childnode>
        <childnode refid="19846" relation="include">
        </childnode>
        <childnode refid="19847" relation="include">
        </childnode>
        <childnode refid="19849" relation="include">
        </childnode>
        <childnode refid="19850" relation="include">
        </childnode>
        <childnode refid="19851" relation="include">
        </childnode>
        <childnode refid="19852" relation="include">
        </childnode>
        <childnode refid="19842" relation="include">
        </childnode>
        <childnode refid="19838" relation="include">
        </childnode>
      </node>
      <node id="19893">
        <label>AMReX_MakeType.H</label>
        <link refid="AMReX__MakeType_8H"/>
      </node>
      <node id="19928">
        <label>AMReX_GpuLaunchFunctsC.H</label>
        <link refid="AMReX__GpuLaunchFunctsC_8H"/>
      </node>
      <node id="19916">
        <label>AMReX_GpuError.H</label>
        <link refid="AMReX__GpuError_8H"/>
        <childnode refid="19894" relation="include">
        </childnode>
        <childnode refid="19851" relation="include">
        </childnode>
      </node>
      <node id="19840">
        <label>AMReX_Vector.H</label>
        <link refid="AMReX__Vector_8H"/>
        <childnode refid="19841" relation="include">
        </childnode>
        <childnode refid="19842" relation="include">
        </childnode>
        <childnode refid="19838" relation="include">
        </childnode>
        <childnode refid="19843" relation="include">
        </childnode>
      </node>
      <node id="19933">
        <label>AMReX_Print.H</label>
        <link refid="AMReX__Print_8H"/>
        <childnode refid="19866" relation="include">
        </childnode>
        <childnode refid="19839" relation="include">
        </childnode>
        <childnode refid="19934" relation="include">
        </childnode>
        <childnode refid="19844" relation="include">
        </childnode>
        <childnode refid="19837" relation="include">
        </childnode>
        <childnode refid="19904" relation="include">
        </childnode>
      </node>
      <node id="19874">
        <label>cmath</label>
      </node>
      <node id="19945">
        <label>cassert</label>
      </node>
      <node id="19848">
        <label>stdexcept</label>
      </node>
      <node id="19911">
        <label>numeric</label>
      </node>
      <node id="19924">
        <label>AMReX_Tuple.H</label>
        <link refid="AMReX__Tuple_8H"/>
        <childnode refid="19864" relation="include">
        </childnode>
        <childnode refid="19925" relation="include">
        </childnode>
        <childnode refid="19850" relation="include">
        </childnode>
        <childnode refid="19881" relation="include">
        </childnode>
        <childnode refid="19865" relation="include">
        </childnode>
        <childnode refid="19918" relation="include">
        </childnode>
        <childnode refid="19926" relation="include">
        </childnode>
        <childnode refid="19923" relation="include">
        </childnode>
        <childnode refid="19845" relation="include">
        </childnode>
      </node>
      <node id="19883">
        <label>AMReX_BoxList.H</label>
        <link refid="AMReX__BoxList_8H"/>
        <childnode refid="19857" relation="include">
        </childnode>
        <childnode refid="19870" relation="include">
        </childnode>
        <childnode refid="19877" relation="include">
        </childnode>
        <childnode refid="19856" relation="include">
        </childnode>
        <childnode refid="19863" relation="include">
        </childnode>
        <childnode refid="19840" relation="include">
        </childnode>
      </node>
      <node id="19880">
        <label>AMReX_BaseFab.H</label>
        <link refid="AMReX__BaseFab_8H"/>
        <childnode refid="19874" relation="include">
        </childnode>
        <childnode refid="19873" relation="include">
        </childnode>
        <childnode refid="19841" relation="include">
        </childnode>
        <childnode refid="19875" relation="include">
        </childnode>
        <childnode refid="19876" relation="include">
        </childnode>
        <childnode refid="19864" relation="include">
        </childnode>
        <childnode refid="19881" relation="include">
        </childnode>
        <childnode refid="19838" relation="include">
        </childnode>
        <childnode refid="19859" relation="include">
        </childnode>
        <childnode refid="19843" relation="include">
        </childnode>
        <childnode refid="19863" relation="include">
        </childnode>
        <childnode refid="19856" relation="include">
        </childnode>
        <childnode refid="19882" relation="include">
        </childnode>
        <childnode refid="19883" relation="include">
        </childnode>
        <childnode refid="19884" relation="include">
        </childnode>
        <childnode refid="19887" relation="include">
        </childnode>
        <childnode refid="19861" relation="include">
        </childnode>
        <childnode refid="19891" relation="include">
        </childnode>
        <childnode refid="19892" relation="include">
        </childnode>
        <childnode refid="19893" relation="include">
        </childnode>
        <childnode refid="19894" relation="include">
        </childnode>
        <childnode refid="19913" relation="include">
        </childnode>
        <childnode refid="19914" relation="include">
        </childnode>
      </node>
      <node id="19851">
        <label>string</label>
      </node>
      <node id="19882">
        <label>AMReX_Loop.H</label>
        <link refid="AMReX__Loop_8H"/>
        <childnode refid="19856" relation="include">
        </childnode>
      </node>
      <node id="19895">
        <label>map</label>
      </node>
      <node id="19853">
        <label>AMReX_MultiFab.H</label>
        <link refid="AMReX__MultiFab_8H"/>
        <childnode refid="19854" relation="include">
        </childnode>
        <childnode refid="19843" relation="include">
        </childnode>
        <childnode refid="19855" relation="include">
        </childnode>
        <childnode refid="19939" relation="include">
        </childnode>
        <childnode refid="19954" relation="include">
        </childnode>
        <childnode refid="19946" relation="include">
        </childnode>
      </node>
      <node id="19890">
        <label>unordered_set</label>
      </node>
      <node id="19951">
        <label>AMReX_FabArrayCommI.H</label>
        <link refid="AMReX__FabArrayCommI_8H"/>
        <childnode refid="19952" relation="include">
        </childnode>
        <childnode refid="19953" relation="include">
        </childnode>
      </node>
      <node id="19912">
        <label>AMReX_Random.H</label>
        <link refid="AMReX__Random_8H"/>
        <childnode refid="19845" relation="include">
        </childnode>
        <childnode refid="19904" relation="include">
        </childnode>
      </node>
      <node id="19926">
        <label>AMReX_IndexSequence.H</label>
        <link refid="AMReX__IndexSequence_8H"/>
        <childnode refid="19865" relation="include">
        </childnode>
      </node>
      <node id="19897">
        <label>cfloat</label>
      </node>
      <node id="19950">
        <label>AMReX_LayoutData.H</label>
        <link refid="AMReX__LayoutData_8H"/>
        <childnode refid="19947" relation="include">
        </childnode>
        <childnode refid="19949" relation="include">
        </childnode>
      </node>
      <node id="19913">
        <label>AMReX_Reduce.H</label>
        <link refid="AMReX__Reduce_8H"/>
        <childnode refid="19914" relation="include">
        </childnode>
        <childnode refid="19885" relation="include">
        </childnode>
      </node>
      <node id="19839">
        <label>fstream</label>
      </node>
      <node id="19941">
        <label>AMReX_Geometry.H</label>
        <link refid="AMReX__Geometry_8H"/>
        <childnode refid="19857" relation="include">
        </childnode>
        <childnode refid="19895" relation="include">
        </childnode>
        <childnode refid="19863" relation="include">
        </childnode>
        <childnode refid="19942" relation="include">
        </childnode>
        <childnode refid="19904" relation="include">
        </childnode>
        <childnode refid="19943" relation="include">
        </childnode>
        <childnode refid="19946" relation="include">
        </childnode>
      </node>
      <node id="19949">
        <label>AMReX_MFIter.H</label>
        <link refid="AMReX__MFIter_8H"/>
        <childnode refid="19838" relation="include">
        </childnode>
        <childnode refid="19885" relation="include">
        </childnode>
        <childnode refid="19947" relation="include">
        </childnode>
        <childnode refid="19870" relation="include">
        </childnode>
        <childnode refid="19855" relation="include">
        </childnode>
        <childnode refid="19943" relation="include">
        </childnode>
        <childnode refid="19914" relation="include">
        </childnode>
      </node>
      <node id="19869">
        <label>AMReX_ArrayLim.H</label>
        <link refid="AMReX__ArrayLim_8H"/>
        <childnode refid="19861" relation="include">
        </childnode>
      </node>
      <node id="19943">
        <label>AMReX_RealBox.H</label>
        <link refid="AMReX__RealBox_8H"/>
        <childnode refid="19857" relation="include">
        </childnode>
        <childnode refid="19864" relation="include">
        </childnode>
        <childnode refid="19863" relation="include">
        </childnode>
        <childnode refid="19840" relation="include">
        </childnode>
        <childnode refid="19861" relation="include">
        </childnode>
        <childnode refid="19856" relation="include">
        </childnode>
        <childnode refid="19944" relation="include">
        </childnode>
      </node>
      <node id="19863">
        <label>AMReX_Array.H</label>
        <link refid="AMReX__Array_8H"/>
        <childnode refid="19864" relation="include">
        </childnode>
        <childnode refid="19838" relation="include">
        </childnode>
        <childnode refid="19865" relation="include">
        </childnode>
        <childnode refid="19851" relation="include">
        </childnode>
        <childnode refid="19849" relation="include">
        </childnode>
        <childnode refid="19866" relation="include">
        </childnode>
        <childnode refid="19852" relation="include">
        </childnode>
        <childnode refid="19844" relation="include">
        </childnode>
        <childnode refid="19845" relation="include">
        </childnode>
        <childnode refid="19867" relation="include">
        </childnode>
        <childnode refid="19843" relation="include">
        </childnode>
        <childnode refid="19868" relation="include">
        </childnode>
        <childnode refid="19861" relation="include">
        </childnode>
      </node>
      <node id="19921">
        <label>AMReX_GpuReduce.H</label>
        <link refid="AMReX__GpuReduce_8H"/>
        <childnode refid="19845" relation="include">
        </childnode>
        <childnode refid="19867" relation="include">
        </childnode>
        <childnode refid="19922" relation="include">
        </childnode>
        <childnode refid="19923" relation="include">
        </childnode>
      </node>
      <node id="19868">
        <label>AMReX_SPACE.H</label>
        <link refid="AMReX__SPACE_8H"/>
      </node>
      <node id="19948">
        <label>AMReX_ParallelReduce.H</label>
        <link refid="AMReX__ParallelReduce_8H"/>
        <childnode refid="19844" relation="include">
        </childnode>
        <childnode refid="19904" relation="include">
        </childnode>
        <childnode refid="19933" relation="include">
        </childnode>
        <childnode refid="19840" relation="include">
        </childnode>
        <childnode refid="19881" relation="include">
        </childnode>
      </node>
      <node id="19859">
        <label>AMReX_Extension.H</label>
        <link refid="AMReX__Extension_8H"/>
      </node>
      <node id="19932">
        <label>AMReX_GpuAllocators.H</label>
        <link refid="AMReX__GpuAllocators_8H"/>
        <childnode refid="19895" relation="include">
        </childnode>
        <childnode refid="19838" relation="include">
        </childnode>
        <childnode refid="19875" relation="include">
        </childnode>
        <childnode refid="19933" relation="include">
        </childnode>
        <childnode refid="19885" relation="include">
        </childnode>
        <childnode refid="19919" relation="include">
        </childnode>
      </node>
      <node id="19915">
        <label>AMReX_GpuLaunch.H</label>
        <link refid="AMReX__GpuLaunch_8H"/>
        <childnode refid="19845" relation="include">
        </childnode>
        <childnode refid="19867" relation="include">
        </childnode>
        <childnode refid="19916" relation="include">
        </childnode>
        <childnode refid="19917" relation="include">
        </childnode>
        <childnode refid="19919" relation="include">
        </childnode>
        <childnode refid="19920" relation="include">
        </childnode>
        <childnode refid="19921" relation="include">
        </childnode>
        <childnode refid="19924" relation="include">
        </childnode>
        <childnode refid="19856" relation="include">
        </childnode>
        <childnode refid="19882" relation="include">
        </childnode>
        <childnode refid="19859" relation="include">
        </childnode>
        <childnode refid="19843" relation="include">
        </childnode>
        <childnode refid="19918" relation="include">
        </childnode>
        <childnode refid="19886" relation="include">
        </childnode>
        <childnode refid="19875" relation="include">
        </childnode>
        <childnode refid="19841" relation="include">
        </childnode>
        <childnode refid="19865" relation="include">
        </childnode>
        <childnode refid="19927" relation="include">
        </childnode>
        <childnode refid="19928" relation="include">
        </childnode>
      </node>
      <node id="19952">
        <label>AMReX_FBI.H</label>
        <link refid="AMReX__FBI_8H"/>
      </node>
      <node id="19898">
        <label>sys/types.h</label>
      </node>
      <node id="19946">
        <label>AMReX_Periodicity.H</label>
        <link refid="AMReX__Periodicity_8H"/>
        <childnode refid="19870" relation="include">
        </childnode>
        <childnode refid="19856" relation="include">
        </childnode>
        <childnode refid="19842" relation="include">
        </childnode>
      </node>
      <node id="19910">
        <label>typeinfo</label>
      </node>
      <node id="19852">
        <label>cstdio</label>
      </node>
      <node id="19918">
        <label>AMReX_TypeTraits.H</label>
        <link refid="AMReX__TypeTraits_8H"/>
        <childnode refid="19881" relation="include">
        </childnode>
        <childnode refid="19859" relation="include">
        </childnode>
      </node>
      <node id="19867">
        <label>AMReX_GpuControl.H</label>
        <link refid="AMReX__GpuControl_8H"/>
        <childnode refid="19845" relation="include">
        </childnode>
      </node>
      <node id="19925">
        <label>tuple</label>
      </node>
      <node id="19905">
        <label>AMReX_BLBackTrace.H</label>
        <link refid="AMReX__BLBackTrace_8H"/>
        <childnode refid="19906" relation="include">
        </childnode>
        <childnode refid="19851" relation="include">
        </childnode>
        <childnode refid="19865" relation="include">
        </childnode>
        <childnode refid="19866" relation="include">
        </childnode>
        <childnode refid="19852" relation="include">
        </childnode>
        <childnode refid="19873" relation="include">
        </childnode>
        <childnode refid="19907" relation="include">
        </childnode>
        <childnode refid="19908" relation="include">
        </childnode>
        <childnode refid="19909" relation="include">
        </childnode>
      </node>
      <node id="19899">
        <label>unistd.h</label>
      </node>
      <node id="19953">
        <label>AMReX_PCI.H</label>
        <link refid="AMReX__PCI_8H"/>
      </node>
      <node id="19906">
        <label>stack</label>
      </node>
      <node id="19842">
        <label>vector</label>
      </node>
      <node id="19938">
        <label>AMReX_FabFactory.H</label>
        <link refid="AMReX__FabFactory_8H"/>
        <childnode refid="19856" relation="include">
        </childnode>
        <childnode refid="19933" relation="include">
        </childnode>
        <childnode refid="19893" relation="include">
        </childnode>
        <childnode refid="19840" relation="include">
        </childnode>
        <childnode refid="19885" relation="include">
        </childnode>
      </node>
      <node id="19843">
        <label>AMReX_BLassert.H</label>
        <link refid="AMReX__BLassert_8H"/>
        <childnode refid="19844" relation="include">
        </childnode>
      </node>
      <node id="19845">
        <label>AMReX_GpuQualifiers.H</label>
        <link refid="AMReX__GpuQualifiers_8H"/>
      </node>
      <node id="19865">
        <label>utility</label>
      </node>
      <node id="19835">
        <label>/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ForkJoin.cpp</label>
        <link refid="AMReX_ForkJoin.cpp"/>
        <childnode refid="19836" relation="include">
        </childnode>
        <childnode refid="19955" relation="include">
        </childnode>
        <childnode refid="19933" relation="include">
        </childnode>
      </node>
      <node id="19864">
        <label>array</label>
      </node>
      <node id="19939">
        <label>AMReX_FabArray.H</label>
        <link refid="AMReX__FabArray_8H"/>
        <childnode refid="19849" relation="include">
        </childnode>
        <childnode refid="19930" relation="include">
        </childnode>
        <childnode refid="19875" relation="include">
        </childnode>
        <childnode refid="19895" relation="include">
        </childnode>
        <childnode refid="19865" relation="include">
        </childnode>
        <childnode refid="19842" relation="include">
        </childnode>
        <childnode refid="19841" relation="include">
        </childnode>
        <childnode refid="19888" relation="include">
        </childnode>
        <childnode refid="19851" relation="include">
        </childnode>
        <childnode refid="19843" relation="include">
        </childnode>
        <childnode refid="19863" relation="include">
        </childnode>
        <childnode refid="19840" relation="include">
        </childnode>
        <childnode refid="19856" relation="include">
        </childnode>
        <childnode refid="19844" relation="include">
        </childnode>
        <childnode refid="19901" relation="include">
        </childnode>
        <childnode refid="19940" relation="include">
        </childnode>
        <childnode refid="19938" relation="include">
        </childnode>
        <childnode refid="19903" relation="include">
        </childnode>
        <childnode refid="19941" relation="include">
        </childnode>
        <childnode refid="19904" relation="include">
        </childnode>
        <childnode refid="19894" relation="include">
        </childnode>
        <childnode refid="19846" relation="include">
        </childnode>
        <childnode refid="19891" relation="include">
        </childnode>
        <childnode refid="19946" relation="include">
        </childnode>
        <childnode refid="19933" relation="include">
        </childnode>
        <childnode refid="19947" relation="include">
        </childnode>
        <childnode refid="19949" relation="include">
        </childnode>
        <childnode refid="19893" relation="include">
        </childnode>
        <childnode refid="19918" relation="include">
        </childnode>
        <childnode refid="19950" relation="include">
        </childnode>
        <childnode refid="19880" relation="include">
        </childnode>
        <childnode refid="19914" relation="include">
        </childnode>
        <childnode refid="19951" relation="include">
        </childnode>
      </node>
      <node id="19855">
        <label>AMReX_FArrayBox.H</label>
        <link refid="AMReX__FArrayBox_8H"/>
        <childnode refid="19856" relation="include">
        </childnode>
        <childnode refid="19880" relation="include">
        </childnode>
        <childnode refid="19861" relation="include">
        </childnode>
        <childnode refid="19868" relation="include">
        </childnode>
        <childnode refid="19938" relation="include">
        </childnode>
        <childnode refid="19874" relation="include">
        </childnode>
      </node>
      <node id="19866">
        <label>sstream</label>
      </node>
      <node id="19954">
        <label>AMReX_FabArrayUtility.H</label>
        <link refid="AMReX__FabArrayUtility_8H"/>
        <childnode refid="19939" relation="include">
        </childnode>
        <childnode refid="19950" relation="include">
        </childnode>
        <childnode refid="19933" relation="include">
        </childnode>
        <childnode refid="19875" relation="include">
        </childnode>
      </node>
      <node id="19847">
        <label>AMReX_Exception.H</label>
        <link refid="AMReX__Exception_8H"/>
        <childnode refid="19848" relation="include">
        </childnode>
      </node>
      <node id="19858">
        <label>AMReX_Algorithm.H</label>
        <link refid="AMReX__Algorithm_8H"/>
        <childnode refid="19841" relation="include">
        </childnode>
        <childnode refid="19845" relation="include">
        </childnode>
        <childnode refid="19859" relation="include">
        </childnode>
        <childnode refid="19860" relation="include">
        </childnode>
      </node>
      <node id="19871">
        <label>AMReX_INT.H</label>
        <link refid="AMReX__INT_8H"/>
        <childnode refid="19872" relation="include">
        </childnode>
      </node>
      <node id="19917">
        <label>AMReX_GpuRange.H</label>
        <link refid="AMReX__GpuRange_8H"/>
        <childnode refid="19845" relation="include">
        </childnode>
        <childnode refid="19867" relation="include">
        </childnode>
        <childnode refid="19916" relation="include">
        </childnode>
        <childnode refid="19856" relation="include">
        </childnode>
        <childnode refid="19918" relation="include">
        </childnode>
      </node>
      <node id="19904">
        <label>AMReX_ParallelDescriptor.H</label>
        <link refid="AMReX__ParallelDescriptor_8H"/>
        <childnode refid="19846" relation="include">
        </childnode>
        <childnode refid="19837" relation="include">
        </childnode>
        <childnode refid="19905" relation="include">
        </childnode>
        <childnode refid="19891" relation="include">
        </childnode>
        <childnode refid="19843" relation="include">
        </childnode>
        <childnode refid="19861" relation="include">
        </childnode>
        <childnode refid="19863" relation="include">
        </childnode>
        <childnode refid="19840" relation="include">
        </childnode>
        <childnode refid="19856" relation="include">
        </childnode>
        <childnode refid="19849" relation="include">
        </childnode>
        <childnode refid="19842" relation="include">
        </childnode>
        <childnode refid="19851" relation="include">
        </childnode>
        <childnode refid="19910" relation="include">
        </childnode>
        <childnode refid="19841" relation="include">
        </childnode>
        <childnode refid="19850" relation="include">
        </childnode>
        <childnode refid="19875" relation="include">
        </childnode>
        <childnode refid="19911" relation="include">
        </childnode>
      </node>
      <node id="19894">
        <label>AMReX_Utility.H</label>
        <link refid="AMReX__Utility_8H"/>
        <childnode refid="19873" relation="include">
        </childnode>
        <childnode refid="19849" relation="include">
        </childnode>
        <childnode refid="19851" relation="include">
        </childnode>
        <childnode refid="19895" relation="include">
        </childnode>
        <childnode refid="19896" relation="include">
        </childnode>
        <childnode refid="19881" relation="include">
        </childnode>
        <childnode refid="19876" relation="include">
        </childnode>
        <childnode refid="19875" relation="include">
        </childnode>
        <childnode refid="19897" relation="include">
        </childnode>
        <childnode refid="19898" relation="include">
        </childnode>
        <childnode refid="19899" relation="include">
        </childnode>
        <childnode refid="19900" relation="include">
        </childnode>
        <childnode refid="19843" relation="include">
        </childnode>
        <childnode refid="19861" relation="include">
        </childnode>
        <childnode refid="19863" relation="include">
        </childnode>
        <childnode refid="19840" relation="include">
        </childnode>
        <childnode refid="19856" relation="include">
        </childnode>
        <childnode refid="19901" relation="include">
        </childnode>
        <childnode refid="19903" relation="include">
        </childnode>
        <childnode refid="19904" relation="include">
        </childnode>
        <childnode refid="19912" relation="include">
        </childnode>
      </node>
      <node id="19885">
        <label>AMReX_Arena.H</label>
        <link refid="AMReX__Arena_8H"/>
        <childnode refid="19843" relation="include">
        </childnode>
        <childnode refid="19886" relation="include">
        </childnode>
        <childnode refid="19873" relation="include">
        </childnode>
      </node>
      <node id="19878">
        <label>AMReX_Orientation.H</label>
        <link refid="AMReX__Orientation_8H"/>
        <childnode refid="19857" relation="include">
        </childnode>
        <childnode refid="19843" relation="include">
        </childnode>
        <childnode refid="19868" relation="include">
        </childnode>
        <childnode refid="19845" relation="include">
        </childnode>
      </node>
      <node id="19860">
        <label>AMReX_Dim3.H</label>
        <link refid="AMReX__Dim3_8H"/>
        <childnode refid="19849" relation="include">
        </childnode>
        <childnode refid="19861" relation="include">
        </childnode>
        <childnode refid="19863" relation="include">
        </childnode>
      </node>
      <node id="19900">
        <label>sys/wait.h</label>
      </node>
      <node id="19857">
        <label>iosfwd</label>
      </node>
      <node id="19873">
        <label>cstdlib</label>
      </node>
      <node id="19909">
        <label>cfenv</label>
      </node>
      <node id="19849">
        <label>iostream</label>
      </node>
      <node id="19877">
        <label>AMReX_IndexType.H</label>
        <link refid="AMReX__IndexType_8H"/>
        <childnode refid="19857" relation="include">
        </childnode>
        <childnode refid="19846" relation="include">
        </childnode>
        <childnode refid="19870" relation="include">
        </childnode>
        <childnode refid="19868" relation="include">
        </childnode>
      </node>
      <node id="19879">
        <label>AMReX_Array4.H</label>
        <link refid="AMReX__Array4_8H"/>
        <childnode refid="19870" relation="include">
        </childnode>
      </node>
      <node id="19886">
        <label>cstddef</label>
      </node>
      <node id="19902">
        <label>unordered_map</label>
      </node>
      <node id="19940">
        <label>AMReX_BoxDomain.H</label>
        <link refid="AMReX__BoxDomain_8H"/>
        <childnode refid="19857" relation="include">
        </childnode>
        <childnode refid="19877" relation="include">
        </childnode>
        <childnode refid="19856" relation="include">
        </childnode>
        <childnode refid="19870" relation="include">
        </childnode>
        <childnode refid="19883" relation="include">
        </childnode>
      </node>
      <node id="19936">
        <label>AMReX_PODVector.H</label>
        <link refid="AMReX__PODVector_8H"/>
        <childnode refid="19918" relation="include">
        </childnode>
        <childnode refid="19881" relation="include">
        </childnode>
        <childnode refid="19865" relation="include">
        </childnode>
        <childnode refid="19838" relation="include">
        </childnode>
        <childnode refid="19930" relation="include">
        </childnode>
      </node>
      <node id="19914">
        <label>AMReX_Gpu.H</label>
        <link refid="AMReX__Gpu_8H"/>
        <childnode refid="19845" relation="include">
        </childnode>
        <childnode refid="19867" relation="include">
        </childnode>
        <childnode refid="19915" relation="include">
        </childnode>
        <childnode refid="19916" relation="include">
        </childnode>
        <childnode refid="19922" relation="include">
        </childnode>
        <childnode refid="19919" relation="include">
        </childnode>
        <childnode refid="19929" relation="include">
        </childnode>
        <childnode refid="19931" relation="include">
        </childnode>
        <childnode refid="19920" relation="include">
        </childnode>
        <childnode refid="19917" relation="include">
        </childnode>
        <childnode refid="19921" relation="include">
        </childnode>
        <childnode refid="19932" relation="include">
        </childnode>
        <childnode refid="19935" relation="include">
        </childnode>
        <childnode refid="19937" relation="include">
        </childnode>
      </node>
      <node id="19876">
        <label>climits</label>
      </node>
      <node id="19937">
        <label>AMReX_CudaGraph.H</label>
        <link refid="AMReX__CudaGraph_8H"/>
      </node>
      <node id="19889">
        <label>mutex</label>
      </node>
      <node id="19896">
        <label>chrono</label>
      </node>
      <node id="19927">
        <label>AMReX_GpuLaunchMacrosC.H</label>
        <link refid="AMReX__GpuLaunchMacrosC_8H"/>
      </node>
      <node id="19908">
        <label>csignal</label>
      </node>
      <node id="19887">
        <label>AMReX_CArena.H</label>
        <link refid="AMReX__CArena_8H"/>
        <childnode refid="19886" relation="include">
        </childnode>
        <childnode refid="19888" relation="include">
        </childnode>
        <childnode refid="19842" relation="include">
        </childnode>
        <childnode refid="19889" relation="include">
        </childnode>
        <childnode refid="19890" relation="include">
        </childnode>
        <childnode refid="19850" relation="include">
        </childnode>
        <childnode refid="19885" relation="include">
        </childnode>
      </node>
      <node id="19881">
        <label>type_traits</label>
      </node>
      <node id="19888">
        <label>set</label>
      </node>
      <node id="19884">
        <label>AMReX_BArena.H</label>
        <link refid="AMReX__BArena_8H"/>
        <childnode refid="19885" relation="include">
        </childnode>
      </node>
      <node id="19846">
        <label>AMReX_ccse-mpi.H</label>
        <link refid="AMReX__ccse-mpi_8H"/>
      </node>
      <node id="19931">
        <label>AMReX_GpuElixir.H</label>
        <link refid="AMReX__GpuElixir_8H"/>
        <childnode refid="19885" relation="include">
        </childnode>
      </node>
      <node id="19955">
        <label>AMReX_ParmParse.H</label>
        <link refid="AMReX__ParmParse_8H"/>
        <childnode refid="19906" relation="include">
        </childnode>
        <childnode refid="19851" relation="include">
        </childnode>
        <childnode refid="19857" relation="include">
        </childnode>
        <childnode refid="19842" relation="include">
        </childnode>
        <childnode refid="19956" relation="include">
        </childnode>
        <childnode refid="19864" relation="include">
        </childnode>
        <childnode refid="19843" relation="include">
        </childnode>
      </node>
      <node id="19841">
        <label>algorithm</label>
      </node>
      <node id="19919">
        <label>AMReX_GpuDevice.H</label>
        <link refid="AMReX__GpuDevice_8H"/>
        <childnode refid="19873" relation="include">
        </childnode>
        <childnode refid="19838" relation="include">
        </childnode>
        <childnode refid="19864" relation="include">
        </childnode>
        <childnode refid="19844" relation="include">
        </childnode>
        <childnode refid="19894" relation="include">
        </childnode>
        <childnode refid="19916" relation="include">
        </childnode>
        <childnode refid="19867" relation="include">
        </childnode>
      </node>
      <node id="19907">
        <label>execinfo.h</label>
      </node>
      <node id="19930">
        <label>cstring</label>
      </node>
      <node id="19944">
        <label>AMReX_RealVect.H</label>
        <link refid="AMReX__RealVect_8H"/>
        <childnode refid="19886" relation="include">
        </childnode>
        <childnode refid="19873" relation="include">
        </childnode>
        <childnode refid="19930" relation="include">
        </childnode>
        <childnode refid="19849" relation="include">
        </childnode>
        <childnode refid="19874" relation="include">
        </childnode>
        <childnode refid="19856" relation="include">
        </childnode>
        <childnode refid="19861" relation="include">
        </childnode>
        <childnode refid="19868" relation="include">
        </childnode>
        <childnode refid="19842" relation="include">
        </childnode>
        <childnode refid="19945" relation="include">
        </childnode>
        <childnode refid="19870" relation="include">
        </childnode>
      </node>
      <node id="19942">
        <label>AMReX_CoordSys.H</label>
        <link refid="AMReX__CoordSys_8H"/>
        <childnode refid="19875" relation="include">
        </childnode>
        <childnode refid="19844" relation="include">
        </childnode>
        <childnode refid="19861" relation="include">
        </childnode>
        <childnode refid="19863" relation="include">
        </childnode>
        <childnode refid="19840" relation="include">
        </childnode>
        <childnode refid="19856" relation="include">
        </childnode>
      </node>
      <node id="19838">
        <label>memory</label>
      </node>
      <node id="19836">
        <label>AMReX_ForkJoin.H</label>
        <link refid="AMReX__ForkJoin_8H"/>
        <childnode refid="19837" relation="include">
        </childnode>
        <childnode refid="19853" relation="include">
        </childnode>
      </node>
      <node id="19929">
        <label>AMReX_GpuAsyncArray.H</label>
        <link refid="AMReX__GpuAsyncArray_8H"/>
        <childnode refid="19886" relation="include">
        </childnode>
        <childnode refid="19930" relation="include">
        </childnode>
        <childnode refid="19873" relation="include">
        </childnode>
        <childnode refid="19838" relation="include">
        </childnode>
        <childnode refid="19885" relation="include">
        </childnode>
        <childnode refid="19918" relation="include">
        </childnode>
        <childnode refid="19919" relation="include">
        </childnode>
      </node>
      <node id="19872">
        <label>inttypes.h</label>
      </node>
      <node id="19920">
        <label>AMReX_GpuMemory.H</label>
        <link refid="AMReX__GpuMemory_8H"/>
        <childnode refid="19845" relation="include">
        </childnode>
        <childnode refid="19867" relation="include">
        </childnode>
        <childnode refid="19919" relation="include">
        </childnode>
        <childnode refid="19918" relation="include">
        </childnode>
        <childnode refid="19885" relation="include">
        </childnode>
        <childnode refid="19873" relation="include">
        </childnode>
      </node>
      <node id="19861">
        <label>AMReX_REAL.H</label>
        <link refid="AMReX__REAL_8H"/>
        <childnode refid="19859" relation="include">
        </childnode>
        <childnode refid="19862" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespaceamrex">amrex</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;<ref refid="AMReX__ForkJoin_8H" kindref="compound">AMReX_ForkJoin.H</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="AMReX__ParmParse_8H" kindref="compound">AMReX_ParmParse.H</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="AMReX__Print_8H" kindref="compound">AMReX_Print.H</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceamrex" kindref="compound">amrex</ref>;</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>file_exists(std::string<sp/>file_path)<sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/>std::ifstream<sp/>ifs(file_path);</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ifs.good();</highlight></codeline>
<codeline lineno="12"><highlight class="normal">}</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="15"><highlight class="normal">std::string</highlight></codeline>
<codeline lineno="16"><highlight class="normal">str_join<sp/>(<ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;T&gt;</ref><sp/>xs,<sp/>std::string<sp/>sep)</highlight></codeline>
<codeline lineno="17"><highlight class="normal">{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ostringstream<sp/>ss;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>flag_first<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>xs.<ref refid="classamrex_1_1Vector_1a509fc6837193e6fd97249b0c072c7830" kindref="member">size</ref>();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!flag_first)<sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/>sep;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flag_first<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/>xs[i];</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ss.str();</highlight></codeline>
<codeline lineno="28"><highlight class="normal">}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;int&gt;</ref></highlight></codeline>
<codeline lineno="31"><highlight class="normal">get_frame_id_vec<sp/>()</highlight></codeline>
<codeline lineno="32"><highlight class="normal">{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<ref refid="namespaceamrex_1_1ParallelContext_1a9bffb84c7ffc09c79a7a48e953322be2" kindref="member">frames</ref><sp/>=<sp/><ref refid="namespaceamrex_1_1ParallelContext_1a9bffb84c7ffc09c79a7a48e953322be2" kindref="member">amrex::ParallelContext::frames</ref>;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;int&gt;</ref><sp/>result;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ignore<sp/>first<sp/>(global)<sp/>frame</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/><ref refid="namespaceamrex_1_1ParallelContext_1a9bffb84c7ffc09c79a7a48e953322be2" kindref="member">frames</ref>.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.push_back(<ref refid="namespaceamrex_1_1ParallelContext_1a9bffb84c7ffc09c79a7a48e953322be2" kindref="member">frames</ref>[i].MyID());</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="40"><highlight class="normal">}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal">}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceamrex" kindref="compound">amrex</ref><sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><ref refid="classamrex_1_1ForkJoin_1a0390a77315df9f09143645cbecf24515" kindref="member">ForkJoin::ForkJoin</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;int&gt;</ref><sp/>&amp;task_rank_n)</highlight></codeline>
<codeline lineno="47"><highlight class="normal">{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1ForkJoin_1af6b2818bec6a86128f3594b6684d4a42" kindref="member">init</ref>(task_rank_n);</highlight></codeline>
<codeline lineno="49"><highlight class="normal">}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><ref refid="classamrex_1_1ForkJoin_1a0390a77315df9f09143645cbecf24515" kindref="member">ForkJoin::ForkJoin</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;double&gt;</ref><sp/>&amp;task_rank_pct)</highlight></codeline>
<codeline lineno="52"><highlight class="normal">{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rank_n<sp/>=<sp/><ref refid="namespaceamrex_1_1ParallelContext_1aa7f481a6be5e8f2eefbe9448135a3843" kindref="member">ParallelContext::NProcsSub</ref>();<sp/></highlight><highlight class="comment">//<sp/>number<sp/>of<sp/>ranks<sp/>in<sp/>current<sp/>frame</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ntasks<sp/>=<sp/>task_rank_pct.<ref refid="classamrex_1_1Vector_1a509fc6837193e6fd97249b0c072c7830" kindref="member">size</ref>();</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;int&gt;</ref><sp/>task_rank_n(ntasks);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>prev<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>accum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ntasks;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>accum<sp/>+=<sp/>task_rank_pct[i];</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cur<sp/>=<sp/>std::round(rank_n<sp/>*<sp/>accum);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task_rank_n[i]<sp/>=<sp/>cur<sp/>-<sp/>prev;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev<sp/>=<sp/>cur;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1ForkJoin_1af6b2818bec6a86128f3594b6684d4a42" kindref="member">init</ref>(task_rank_n);</highlight></codeline>
<codeline lineno="66"><highlight class="normal">}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><ref refid="classamrex_1_1ForkJoin_1af6b2818bec6a86128f3594b6684d4a42" kindref="member">ForkJoin::init</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;int&gt;</ref><sp/>&amp;task_rank_n)</highlight></codeline>
<codeline lineno="70"><highlight class="normal">{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1ParmParse" kindref="compound">ParmParse</ref><sp/>pp(</highlight><highlight class="stringliteral">&quot;forkjoin&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>pp.query(</highlight><highlight class="stringliteral">&quot;verbose&quot;</highlight><highlight class="normal">,<sp/><ref refid="classamrex_1_1ForkJoin_1a943794e0f810e216579ad8156d11cd20" kindref="member">flag_verbose</ref>);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>task_n<sp/>=<sp/>task_rank_n.<ref refid="classamrex_1_1Vector_1a509fc6837193e6fd97249b0c072c7830" kindref="member">size</ref>();</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLassert_8H_1a1defc2bb8023a3e2599bfb2fc637cb43" kindref="member">AMREX_ALWAYS_ASSERT_WITH_MESSAGE</ref>(task_n<sp/>&gt;<sp/>0,</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;ForkJoin<sp/>must<sp/>have<sp/>at<sp/>least<sp/>1<sp/>task&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>min_task_rank_n<sp/>=<sp/>task_rank_n[0];</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>task_n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>min_task_rank_n<sp/>=<sp/><ref refid="namespaceamrex_1_1detail_1a05ef6e98eba987410d73df1617fa569da39de58104accdcd761fe01946da9a4a0" kindref="member">std::min</ref>(min_task_rank_n,<sp/>task_rank_n[i]);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLassert_8H_1a1defc2bb8023a3e2599bfb2fc637cb43" kindref="member">AMREX_ALWAYS_ASSERT_WITH_MESSAGE</ref>(min_task_rank_n<sp/>&gt;<sp/>0,</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;All<sp/>tasks<sp/>must<sp/>have<sp/>at<sp/>least<sp/>one<sp/>rank&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rank_n<sp/>=<sp/><ref refid="namespaceamrex_1_1ParallelContext_1aa7f481a6be5e8f2eefbe9448135a3843" kindref="member">ParallelContext::NProcsSub</ref>();<sp/></highlight><highlight class="comment">//<sp/>number<sp/>of<sp/>ranks<sp/>in<sp/>current<sp/>frame</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLassert_8H_1a1defc2bb8023a3e2599bfb2fc637cb43" kindref="member">AMREX_ALWAYS_ASSERT_WITH_MESSAGE</ref>(std::accumulate(task_rank_n.begin(),task_rank_n.end(),0)<sp/>==<sp/>rank_n,</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Sum<sp/>of<sp/>ranks<sp/>assigned<sp/>to<sp/>tasks<sp/>must<sp/>sum<sp/>to<sp/>parent<sp/>number<sp/>of<sp/>ranks&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>split<sp/>ranks<sp/>into<sp/>contiguous<sp/>chunks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>task<sp/>i<sp/>has<sp/>ranks<sp/>over<sp/>the<sp/>interval<sp/>[split_bounds[i],<sp/>split_bounds[i+1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1ForkJoin_1a696ffed713794753cb3d42f63eaad6ab" kindref="member">split_bounds</ref>.resize(task_n<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1ForkJoin_1a696ffed713794753cb3d42f63eaad6ab" kindref="member">split_bounds</ref>[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>task_n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1ForkJoin_1a696ffed713794753cb3d42f63eaad6ab" kindref="member">split_bounds</ref>[i<sp/>+<sp/>1]<sp/>=<sp/><ref refid="classamrex_1_1ForkJoin_1a696ffed713794753cb3d42f63eaad6ab" kindref="member">split_bounds</ref>[i]<sp/>+<sp/>task_rank_n[i];</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1ForkJoin_1a943794e0f810e216579ad8156d11cd20" kindref="member">flag_verbose</ref>)<sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Print" kindref="compound">amrex::Print</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Initialized<sp/>ForkJoin:\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>task_n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>glo_rank_lo<sp/>=<sp/><ref refid="namespaceamrex_1_1ParallelContext_1a766c71905985383fd282cace905237d4" kindref="member">ParallelContext::local_to_global_rank</ref>(<ref refid="classamrex_1_1ForkJoin_1a696ffed713794753cb3d42f63eaad6ab" kindref="member">split_bounds</ref>[i]);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>glo_rank_hi<sp/>=<sp/><ref refid="namespaceamrex_1_1ParallelContext_1a766c71905985383fd282cace905237d4" kindref="member">ParallelContext::local_to_global_rank</ref>(<ref refid="classamrex_1_1ForkJoin_1a696ffed713794753cb3d42f63eaad6ab" kindref="member">split_bounds</ref>[i+1]-1);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Print" kindref="compound">amrex::Print</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Task<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>has<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classamrex_1_1ForkJoin_1a698d77b52ac90108cb6f8a02c48b1662" kindref="member">NProcsTask</ref>(i)</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>Ranks:<sp/>[&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>glo_rank_lo<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>glo_rank_hi<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal">}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><ref refid="classamrex_1_1ForkJoin_1a66e56de654ced923e6885ebd79bd75f2" kindref="member">ForkJoin::reg_mf</ref><sp/>(<ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref><sp/>&amp;mf,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx,</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1ForkJoin_1a72de18d1d16fadce31b830834ffff282" kindref="member">Strategy</ref><sp/>strategy,<sp/><ref refid="classamrex_1_1ForkJoin_1a3acf0d91b32d1d08dbe32046028f1466" kindref="member">Intent</ref><sp/>intent,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>owner)</highlight></codeline>
<codeline lineno="109"><highlight class="normal">{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(idx<sp/>&gt;=<sp/><ref refid="classamrex_1_1ForkJoin_1a1223321add76c9d8eb7dc032c051012d" kindref="member">data</ref>[name].<ref refid="namespaceamrex_1_1Gpu_1_1range__detail_1ac0bbdd3b8f64770191201e431e16c723" kindref="member">size</ref>())<sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1ForkJoin_1a1223321add76c9d8eb7dc032c051012d" kindref="member">data</ref>[name].resize(idx<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLassert_8H_1a1defc2bb8023a3e2599bfb2fc637cb43" kindref="member">AMREX_ALWAYS_ASSERT_WITH_MESSAGE</ref>(<ref refid="classamrex_1_1ForkJoin_1a1223321add76c9d8eb7dc032c051012d" kindref="member">data</ref>[name][idx].empty(),</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Can<sp/>only<sp/>register<sp/>to<sp/>a<sp/>(name,<sp/>index)<sp/>pair<sp/>once&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref><sp/>ngrow<sp/>=<sp/>mf.<ref refid="classamrex_1_1FabArrayBase_1a0598988ee34f3885bd6d2a4787a8f427" kindref="member">nGrowVect</ref>();<sp/></highlight><highlight class="comment">//<sp/>default<sp/>use<sp/>original<sp/>MultiFab&apos;s<sp/>grow<sp/>cells</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>how<sp/>components<sp/>are<sp/>copied<sp/>to<sp/>tasks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>default<sp/>evenly<sp/>split<sp/>components<sp/>across<sp/>tasks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>comp_n<sp/>=<sp/>mf.<ref refid="classamrex_1_1FabArrayBase_1aec6647af0d0a9f2d760d502a8975d6f1" kindref="member">nComp</ref>();<sp/></highlight><highlight class="comment">//<sp/>number<sp/>of<sp/>components<sp/>in<sp/>original</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;ComponentSet&gt;</ref><sp/>comp_split;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>comp_split.resize(<ref refid="classamrex_1_1ForkJoin_1a4eaae5bd6eb7e83442d5db4529cf1443" kindref="member">NTasks</ref>());</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classamrex_1_1ForkJoin_1a4eaae5bd6eb7e83442d5db4529cf1443" kindref="member">NTasks</ref>();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strategy<sp/>==<sp/><ref refid="classamrex_1_1ForkJoin_1a72de18d1d16fadce31b830834ffff282aeefec303079ad17405c889e092e105b0" kindref="member">Strategy::split</ref>)<sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__BLassert_8H_1a1defc2bb8023a3e2599bfb2fc637cb43" kindref="member">AMREX_ALWAYS_ASSERT_WITH_MESSAGE</ref>(<ref refid="classamrex_1_1ForkJoin_1a4eaae5bd6eb7e83442d5db4529cf1443" kindref="member">NTasks</ref>()<sp/>&lt;=<sp/>comp_n,</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Number<sp/>of<sp/>tasks<sp/>cannot<sp/>be<sp/>larger<sp/>than<sp/>number<sp/>of<sp/>components!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>split<sp/>components<sp/>across<sp/>tasks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>comp_split[i].lo<sp/>=<sp/>comp_n<sp/>*<sp/><sp/>i<sp/><sp/><sp/><sp/>/<sp/><ref refid="classamrex_1_1ForkJoin_1a4eaae5bd6eb7e83442d5db4529cf1443" kindref="member">NTasks</ref>();</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>comp_split[i].hi<sp/>=<sp/>comp_n<sp/>*<sp/>(i+1)<sp/>/<sp/><ref refid="classamrex_1_1ForkJoin_1a4eaae5bd6eb7e83442d5db4529cf1443" kindref="member">NTasks</ref>();</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>all<sp/>components<sp/>to<sp/>task</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>comp_split[i].lo<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>comp_split[i].hi<sp/>=<sp/>comp_n;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1ForkJoin_1a1223321add76c9d8eb7dc032c051012d" kindref="member">data</ref>[name][idx]<sp/>=<sp/>MFFork(&amp;mf,<sp/>strategy,<sp/>intent,<sp/>owner,<sp/>ngrow,<sp/>std::move(comp_split));</highlight></codeline>
<codeline lineno="138"><highlight class="normal">}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><ref refid="classamrex_1_1ForkJoin_1a96e939e22bb7efb14a07a6f9260cce89" kindref="member">ForkJoin::modify_ngrow</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx,<sp/><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref><sp/>ngrow)</highlight></codeline>
<codeline lineno="142"><highlight class="normal">{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLassert_8H_1a1defc2bb8023a3e2599bfb2fc637cb43" kindref="member">AMREX_ALWAYS_ASSERT_WITH_MESSAGE</ref>(<ref refid="classamrex_1_1ForkJoin_1a1223321add76c9d8eb7dc032c051012d" kindref="member">data</ref>.count(name)<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/><ref refid="classamrex_1_1ForkJoin_1a1223321add76c9d8eb7dc032c051012d" kindref="member">data</ref>[name].size()<sp/>&gt;<sp/>idx,</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;(name,<sp/>index)<sp/>pair<sp/>doesn&apos;t<sp/>exist&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLassert_8H_1a1defc2bb8023a3e2599bfb2fc637cb43" kindref="member">AMREX_ALWAYS_ASSERT_WITH_MESSAGE</ref>(!<ref refid="classamrex_1_1ForkJoin_1ad9801acca834dcbc7ec55dd3c34f48aa" kindref="member">flag_invoked</ref>,</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Can<sp/>only<sp/>specify<sp/>grow<sp/>cells<sp/>before<sp/>first<sp/>forkjoin()<sp/>invocation&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>AMREX_SPACEDIM;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__BLassert_8H_1a1defc2bb8023a3e2599bfb2fc637cb43" kindref="member">AMREX_ALWAYS_ASSERT_WITH_MESSAGE</ref>(ngrow[i]<sp/>&gt;=<sp/>0,</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;ngrow[i]<sp/>must<sp/>be<sp/>non-negative&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1ForkJoin_1a1223321add76c9d8eb7dc032c051012d" kindref="member">data</ref>[name][idx].ngrow<sp/>=<sp/>ngrow;</highlight></codeline>
<codeline lineno="152"><highlight class="normal">}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><ref refid="classamrex_1_1ForkJoin_1acd674b9f0159c359a040afa7e3ba4fe8" kindref="member">ForkJoin::modify_split</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx,<sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;ComponentSet&gt;</ref><sp/>comp_split)</highlight></codeline>
<codeline lineno="156"><highlight class="normal">{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLassert_8H_1a1defc2bb8023a3e2599bfb2fc637cb43" kindref="member">AMREX_ALWAYS_ASSERT_WITH_MESSAGE</ref>(<ref refid="classamrex_1_1ForkJoin_1a1223321add76c9d8eb7dc032c051012d" kindref="member">data</ref>.count(name)<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/><ref refid="classamrex_1_1ForkJoin_1a1223321add76c9d8eb7dc032c051012d" kindref="member">data</ref>[name].size()<sp/>&gt;<sp/>idx,</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;(name,<sp/>index)<sp/>pair<sp/>doesn&apos;t<sp/>exist&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLassert_8H_1a1defc2bb8023a3e2599bfb2fc637cb43" kindref="member">AMREX_ALWAYS_ASSERT_WITH_MESSAGE</ref>(!<ref refid="classamrex_1_1ForkJoin_1ad9801acca834dcbc7ec55dd3c34f48aa" kindref="member">flag_invoked</ref>,</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Can<sp/>only<sp/>specify<sp/>custom<sp/>split<sp/>before<sp/>first<sp/>forkjoin()<sp/>invocation&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLassert_8H_1a1defc2bb8023a3e2599bfb2fc637cb43" kindref="member">AMREX_ALWAYS_ASSERT_WITH_MESSAGE</ref>(comp_split.<ref refid="classamrex_1_1Vector_1a509fc6837193e6fd97249b0c072c7830" kindref="member">size</ref>()<sp/>==<sp/><ref refid="classamrex_1_1ForkJoin_1a4eaae5bd6eb7e83442d5db4529cf1443" kindref="member">NTasks</ref>(),</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;comp_split<sp/>must<sp/>be<sp/>same<sp/>length<sp/>as<sp/>number<sp/>of<sp/>tasks&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classamrex_1_1ForkJoin_1a4eaae5bd6eb7e83442d5db4529cf1443" kindref="member">NTasks</ref>();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__BLassert_8H_1a1defc2bb8023a3e2599bfb2fc637cb43" kindref="member">AMREX_ALWAYS_ASSERT_WITH_MESSAGE</ref>(comp_split[i].hi<sp/>-<sp/>comp_split[i].lo<sp/>&gt;<sp/>0,</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;comp_split[i]<sp/>must<sp/>have<sp/>positive<sp/>number<sp/>of<sp/>components&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1ForkJoin_1a1223321add76c9d8eb7dc032c051012d" kindref="member">data</ref>[name][idx].comp_split<sp/>=<sp/>std::move(comp_split);</highlight></codeline>
<codeline lineno="168"><highlight class="normal">}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><ref refid="structamrex_1_1ForkJoin_1_1ComponentSet" kindref="compound">ForkJoin::ComponentSet</ref></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><ref refid="classamrex_1_1ForkJoin_1a491e6207589888fb8bdcfd3953d8a8f6" kindref="member">ForkJoin::ComponentBounds</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="172"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>mffork_vec<sp/>=<sp/><ref refid="classamrex_1_1ForkJoin_1a1223321add76c9d8eb7dc032c051012d" kindref="member">data</ref>.at(name);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLassert_8H_1a53ebc8b227de416f458800faa44c619e" kindref="member">BL_ASSERT</ref>(idx<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>idx<sp/>&lt;<sp/>mffork_vec.size());</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mffork_vec[idx].comp_split[<ref refid="classamrex_1_1ForkJoin_1ac7e00cc0d9436d4445b3e338b46dd003" kindref="member">task_me</ref>];</highlight></codeline>
<codeline lineno="176"><highlight class="normal">}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><ref refid="classamrex_1_1ForkJoin_1a76a2bb1b6fb5ffd97b28020531b6f3f6" kindref="member">ForkJoin::copy_data_to_tasks</ref><sp/>()</highlight></codeline>
<codeline lineno="180"><highlight class="normal">{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a548fbd9b2cd72a927f463003f4adb0b1" kindref="member">BL_PROFILE</ref>(</highlight><highlight class="stringliteral">&quot;ForkJoin::copy_data_to_tasks()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1ForkJoin_1a943794e0f810e216579ad8156d11cd20" kindref="member">flag_verbose</ref>)<sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Print" kindref="compound">amrex::Print</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Copying<sp/>data<sp/>into<sp/>fork-join<sp/>tasks<sp/>...\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;p<sp/>:<sp/><ref refid="classamrex_1_1ForkJoin_1a1223321add76c9d8eb7dc032c051012d" kindref="member">data</ref>)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>for<sp/>each<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;mf_name<sp/>=<sp/>p.first;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx<sp/>=<sp/>0;<sp/>idx<sp/>&lt;<sp/>p.second.size();<sp/>++idx)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>for<sp/>each<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;mff<sp/>=<sp/>p.second[idx];</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;orig<sp/>=<sp/>*mff.orig;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;ba<sp/>=<sp/>orig.boxArray();</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;comp_split<sp/>=<sp/>mff.comp_split;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;forked<sp/>=<sp/>mff.forked;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>forked.reserve(<ref refid="classamrex_1_1ForkJoin_1a4eaae5bd6eb7e83442d5db4529cf1443" kindref="member">NTasks</ref>());<sp/></highlight><highlight class="comment">//<sp/>does<sp/>nothing<sp/>if<sp/>forked<sp/>MFs<sp/>already<sp/>created</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classamrex_1_1ForkJoin_1a4eaae5bd6eb7e83442d5db4529cf1443" kindref="member">NTasks</ref>();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>this<sp/>task<sp/>needs<sp/>this<sp/>MF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mff.strategy<sp/>!=<sp/><ref refid="classamrex_1_1ForkJoin_1a72de18d1d16fadce31b830834ffff282add5c07036f2975ff4bce568b6511d3bc" kindref="member">Strategy::single</ref><sp/>||<sp/>i<sp/>==<sp/>mff.owner_task)<sp/>{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>task_comp_n<sp/>=<sp/>comp_split[i].hi<sp/>-<sp/>comp_split[i].lo;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>task&apos;s<sp/>MF<sp/>if<sp/>first<sp/>time<sp/>through</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(forked.size()<sp/>&lt;=<sp/>i)<sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1ForkJoin_1a943794e0f810e216579ad8156d11cd20" kindref="member">flag_verbose</ref>)<sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Print" kindref="compound">amrex::Print</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Creating<sp/>forked<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>mf_name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;[&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>idx<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]<sp/>for<sp/>task<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>(mff.strategy<sp/>==<sp/><ref refid="classamrex_1_1ForkJoin_1a72de18d1d16fadce31b830834ffff282aeefec303079ad17405c889e092e105b0" kindref="member">Strategy::split</ref><sp/>?<sp/></highlight><highlight class="stringliteral">&quot;<sp/>(split)&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;<sp/>(whole)&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>look<sp/>up<sp/>the<sp/>distribution<sp/>mapping<sp/>for<sp/>this<sp/>(box<sp/>array,<sp/>task)<sp/>pair</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref><sp/>&amp;dm<sp/>=<sp/><ref refid="classamrex_1_1ForkJoin_1ac35ec951548cc1e54dfc60b0d65df8e8" kindref="member">get_dm</ref>(ba,<sp/>i,<sp/>orig.DistributionMap());</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>forked.emplace_back(ba,<sp/>dm,<sp/>task_comp_n,<sp/>mff.ngrow);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1ForkJoin_1a943794e0f810e216579ad8156d11cd20" kindref="member">flag_verbose</ref>)<sp/>{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Print" kindref="compound">amrex::Print</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Forked<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>mf_name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;[&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>idx<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]<sp/>for<sp/>task<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>already<sp/>created&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__BLassert_8H_1aad6450907585a147153aef621fdc6007" kindref="member">AMREX_ASSERT</ref>(i<sp/>&lt;<sp/>forked.size());</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>data<sp/>if<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mff.intent<sp/>==<sp/><ref refid="classamrex_1_1ForkJoin_1a3acf0d91b32d1d08dbe32046028f1466a13b5bfe96f3e2fe411c9f66f4a582adf" kindref="member">Intent::in</ref><sp/>||<sp/>mff.intent<sp/>==<sp/><ref refid="classamrex_1_1ForkJoin_1a3acf0d91b32d1d08dbe32046028f1466a54c9ccb45f5ee60133cca31fca024432" kindref="member">Intent::inout</ref>)<sp/>{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1ForkJoin_1a943794e0f810e216579ad8156d11cd20" kindref="member">flag_verbose</ref>)<sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Print" kindref="compound">amrex::Print</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>Copying<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>mf_name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;[&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>idx<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]<sp/>components<sp/>[&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>comp_split[i].lo<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>comp_split[i].hi<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>into<sp/>to<sp/>task<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>parallel<sp/>copy<sp/>data<sp/>into<sp/>forked<sp/>MF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>forked[i].Redistribute(orig,<sp/>comp_split[i].lo,<sp/>0,<sp/>task_comp_n,<sp/>mff.ngrow);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>task<sp/>doesn&apos;t<sp/>use<sp/>the<sp/>MultiFab</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(forked.size()<sp/>&lt;=<sp/>i)<sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>first<sp/>time<sp/>through,<sp/>push<sp/>empty<sp/>placeholder<sp/>(not<sp/>used)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>forked.push_back(<ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>());</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__BLassert_8H_1aad6450907585a147153aef621fdc6007" kindref="member">AMREX_ASSERT</ref>(forked.size()<sp/>==<sp/><ref refid="classamrex_1_1ForkJoin_1a4eaae5bd6eb7e83442d5db4529cf1443" kindref="member">NTasks</ref>());</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="236"><highlight class="normal">}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>called<sp/>after<sp/>ParallelContext::unsplit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>parent<sp/>task<sp/>is<sp/>the<sp/>top<sp/>frame<sp/>in<sp/>ParallelContext&apos;s<sp/>stack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><ref refid="classamrex_1_1ForkJoin_1ad79ddeb1fdd7d6a72546c66728b3ccd8" kindref="member">ForkJoin::copy_data_from_tasks</ref><sp/>()</highlight></codeline>
<codeline lineno="242"><highlight class="normal">{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a548fbd9b2cd72a927f463003f4adb0b1" kindref="member">BL_PROFILE</ref>(</highlight><highlight class="stringliteral">&quot;ForkJoin::copy_data_from_tasks()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1ForkJoin_1a943794e0f810e216579ad8156d11cd20" kindref="member">flag_verbose</ref>)<sp/>{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Print" kindref="compound">amrex::Print</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Copying<sp/>data<sp/>out<sp/>of<sp/>fork-join<sp/>tasks<sp/>...\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;p<sp/>:<sp/>data)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>for<sp/>each<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;mf_name<sp/>=<sp/>p.first;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx<sp/>=<sp/>0;<sp/>idx<sp/>&lt;<sp/>p.second.size();<sp/>++idx)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>for<sp/>each<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;mff<sp/>=<sp/>p.second[idx];</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mff.intent<sp/>==<sp/><ref refid="classamrex_1_1ForkJoin_1a3acf0d91b32d1d08dbe32046028f1466ac68271a63ddbc431c307beb7d2918275" kindref="member">Intent::out</ref><sp/>||<sp/>mff.intent<sp/>==<sp/><ref refid="classamrex_1_1ForkJoin_1a3acf0d91b32d1d08dbe32046028f1466a54c9ccb45f5ee60133cca31fca024432" kindref="member">Intent::inout</ref>)<sp/>{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref><sp/>&amp;orig<sp/>=<sp/>*mff.orig;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;comp_split<sp/>=<sp/>mff.comp_split;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;MultiFab&gt;</ref><sp/>&amp;forked<sp/>=<sp/>mff.forked;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mff.strategy<sp/>==<sp/><ref refid="classamrex_1_1ForkJoin_1a72de18d1d16fadce31b830834ffff282aeefec303079ad17405c889e092e105b0" kindref="member">Strategy::split</ref>)<sp/>{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>gather<sp/>components<sp/>from<sp/>across<sp/>tasks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classamrex_1_1ForkJoin_1a4eaae5bd6eb7e83442d5db4529cf1443" kindref="member">NTasks</ref>();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1ForkJoin_1a943794e0f810e216579ad8156d11cd20" kindref="member">flag_verbose</ref>)<sp/>{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Print" kindref="compound">amrex::Print</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Copying<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>mf_name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;[&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>idx<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]<sp/>components<sp/>[&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>comp_split[i].lo<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>comp_split[i].hi<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>out<sp/>from<sp/>task<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>(unsplit)&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>task_comp_n<sp/>=<sp/>comp_split[i].hi<sp/>-<sp/>comp_split[i].lo;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__BLassert_8H_1aad6450907585a147153aef621fdc6007" kindref="member">AMREX_ASSERT</ref>(forked[i].nComp()<sp/>==<sp/>task_comp_n);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>orig.<ref refid="classamrex_1_1FabArray_1a9b59622d2c87150475a4c2e290909421" kindref="member">Redistribute</ref>(forked[i],<sp/>0,<sp/>comp_split[i].lo,<sp/>task_comp_n,<sp/>mff.ngrow);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//<sp/>mff.strategy<sp/>==<sp/>single<sp/>or<sp/>duplicate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>all<sp/>components<sp/>from<sp/>owner_task</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1ForkJoin_1a943794e0f810e216579ad8156d11cd20" kindref="member">flag_verbose</ref>)<sp/>{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Print" kindref="compound">amrex::Print</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Copying<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>mf_name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>out<sp/>from<sp/>task<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>mff.owner_task<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>(whole)&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__BLassert_8H_1aad6450907585a147153aef621fdc6007" kindref="member">AMREX_ASSERT</ref>(forked[mff.owner_task].nComp()<sp/>==<sp/>orig.<ref refid="classamrex_1_1FabArrayBase_1aec6647af0d0a9f2d760d502a8975d6f1" kindref="member">nComp</ref>());</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>orig.<ref refid="classamrex_1_1FabArray_1a9b59622d2c87150475a4c2e290909421" kindref="member">Redistribute</ref>(forked[mff.owner_task],<sp/>0,<sp/>0,<sp/>orig.<ref refid="classamrex_1_1FabArrayBase_1aec6647af0d0a9f2d760d502a8975d6f1" kindref="member">nComp</ref>(),<sp/>mff.ngrow);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="277"><highlight class="normal">}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="comment">//<sp/>multiple<sp/>MultiFabs<sp/>may<sp/>share<sp/>the<sp/>same<sp/>box<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="comment">//<sp/>only<sp/>compute<sp/>the<sp/>DM<sp/>once<sp/>per<sp/>unique<sp/>(box<sp/>array,<sp/>task)<sp/>pair<sp/>and<sp/>cache<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="comment">//<sp/>create<sp/>map<sp/>from<sp/>box<sp/>array<sp/>RefID<sp/>to<sp/>vector<sp/>of<sp/>DistributionMapping<sp/>indexed<sp/>by<sp/>task<sp/>ID</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref><sp/>&amp;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><ref refid="classamrex_1_1ForkJoin_1ac35ec951548cc1e54dfc60b0d65df8e8" kindref="member">ForkJoin::get_dm</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>&amp;<sp/>ba,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>task_idx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref>&amp;<sp/>dm_orig)</highlight></codeline>
<codeline lineno="284"><highlight class="normal">{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLassert_8H_1aad6450907585a147153aef621fdc6007" kindref="member">AMREX_ASSERT</ref>(task_idx<sp/>&lt;<sp/><ref refid="classamrex_1_1ForkJoin_1a4eaae5bd6eb7e83442d5db4529cf1443" kindref="member">NTasks</ref>());</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;dm_vec<sp/>=<sp/><ref refid="classamrex_1_1ForkJoin_1a710675d78fd400523b979d941930b56e" kindref="member">dms</ref>[ba.<ref refid="classamrex_1_1BoxArray_1a0c8df27bfc6981d3e50784b64026a249" kindref="member">getRefID</ref>()];</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dm_vec.size()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>new<sp/>entry</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dm_vec.resize(<ref refid="classamrex_1_1ForkJoin_1a4eaae5bd6eb7e83442d5db4529cf1443" kindref="member">NTasks</ref>());</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLassert_8H_1aad6450907585a147153aef621fdc6007" kindref="member">AMREX_ASSERT</ref>(dm_vec.size()<sp/>==<sp/><ref refid="classamrex_1_1ForkJoin_1a4eaae5bd6eb7e83442d5db4529cf1443" kindref="member">NTasks</ref>());</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dm_vec[task_idx]<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>DM<sp/>of<sp/>current<sp/>box<sp/>array<sp/>over<sp/>current<sp/>task&apos;s<sp/>ranks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rank_lo<sp/>=<sp/><ref refid="classamrex_1_1ForkJoin_1a696ffed713794753cb3d42f63eaad6ab" kindref="member">split_bounds</ref>[task_idx];<sp/><sp/></highlight><highlight class="comment">//<sp/>note<sp/>that<sp/>these<sp/>ranks<sp/>are<sp/>not<sp/>necessarily<sp/>global</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nprocs_task<sp/>=<sp/><ref refid="classamrex_1_1ForkJoin_1a698d77b52ac90108cb6f8a02c48b1662" kindref="member">NProcsTask</ref>(task_idx);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;int&gt;</ref><sp/>pmap<sp/>=<sp/>dm_orig.<ref refid="classamrex_1_1DistributionMapping_1ac1cd8ab03f5ec883f167f4e1148d29ee" kindref="member">ProcessorMap</ref>();<sp/></highlight><highlight class="comment">//<sp/>DistributionMapping<sp/>stores<sp/>global<sp/>ranks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>r<sp/>:<sp/>pmap)<sp/>{</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lr<sp/>=<sp/><ref refid="namespaceamrex_1_1ParallelContext_1aa0f73d99c17e1ccedb7f2e66a660f274" kindref="member">ParallelContext::global_to_local_rank</ref>(r);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lr<sp/>=<sp/>lr%nprocs_task<sp/>+<sp/>rank_lo;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/><ref refid="namespaceamrex_1_1ParallelContext_1a766c71905985383fd282cace905237d4" kindref="member">ParallelContext::local_to_global_rank</ref>(lr);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dm_vec[task_idx].reset(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref>(std::move(pmap)));</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1ForkJoin_1a943794e0f810e216579ad8156d11cd20" kindref="member">flag_verbose</ref>)<sp/>{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Print" kindref="compound">amrex::Print</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>Creating<sp/>DM<sp/>for<sp/>(box<sp/>array,<sp/>task<sp/>id)<sp/>=<sp/>(&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>ba.<ref refid="classamrex_1_1BoxArray_1a0c8df27bfc6981d3e50784b64026a249" kindref="member">getRefID</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>task_idx<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>amrex::Print()<sp/>&lt;&lt;<sp/>&quot;<sp/>xxxxx<sp/>get_dm<sp/>&quot;<sp/>&lt;&lt;<sp/>task_idx<sp/>&lt;&lt;<sp/>&quot;,<sp/>&quot;<sp/>&lt;&lt;<sp/>*dm_vec[task_idx]<sp/>&lt;&lt;<sp/>&quot;\n&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>DM<sp/>has<sp/>already<sp/>been<sp/>created</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1ForkJoin_1a943794e0f810e216579ad8156d11cd20" kindref="member">flag_verbose</ref>)<sp/>{</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Print" kindref="compound">amrex::Print</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>DM<sp/>for<sp/>(box<sp/>array,<sp/>task<sp/>id)<sp/>=<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>ba.<ref refid="classamrex_1_1BoxArray_1a0c8df27bfc6981d3e50784b64026a249" kindref="member">getRefID</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>task_idx</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>already<sp/>created&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLassert_8H_1aad6450907585a147153aef621fdc6007" kindref="member">AMREX_ASSERT</ref>(dm_vec[task_idx]<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*dm_vec[task_idx];</highlight></codeline>
<codeline lineno="325"><highlight class="normal">}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight><highlight class="comment">//<sp/>split<sp/>top<sp/>frame<sp/>of<sp/>stack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO:<sp/>write<sp/>version<sp/>that<sp/>takes<sp/>cached<sp/>comm<sp/>object<sp/>as<sp/>argument<sp/>in<sp/>case<sp/>of<sp/>repeated<sp/>identical<sp/>split<sp/>calls</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><ref refid="classamrex_1_1ForkJoin_1af28d2dad955c8aeeb067472559794d86" kindref="member">ForkJoin::split_tasks</ref><sp/>()</highlight></codeline>
<codeline lineno="331"><highlight class="normal">{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>myproc<sp/>=<sp/><ref refid="namespaceamrex_1_1ParallelContext_1a5f6737315bff6905419103b17acf3d06" kindref="member">ParallelContext::MyProcSub</ref>();</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1ForkJoin_1ac7e00cc0d9436d4445b3e338b46dd003" kindref="member">task_me</ref><sp/>=<sp/>0;<sp/><ref refid="classamrex_1_1ForkJoin_1ac7e00cc0d9436d4445b3e338b46dd003" kindref="member">task_me</ref><sp/>&lt;<sp/><ref refid="classamrex_1_1ForkJoin_1a4eaae5bd6eb7e83442d5db4529cf1443" kindref="member">NTasks</ref>();<sp/>++<ref refid="classamrex_1_1ForkJoin_1ac7e00cc0d9436d4445b3e338b46dd003" kindref="member">task_me</ref>)<sp/>{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lo<sp/>=<sp/><ref refid="classamrex_1_1ForkJoin_1a696ffed713794753cb3d42f63eaad6ab" kindref="member">split_bounds</ref>[<ref refid="classamrex_1_1ForkJoin_1ac7e00cc0d9436d4445b3e338b46dd003" kindref="member">task_me</ref>];</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hi<sp/>=<sp/><ref refid="classamrex_1_1ForkJoin_1a696ffed713794753cb3d42f63eaad6ab" kindref="member">split_bounds</ref>[<ref refid="classamrex_1_1ForkJoin_1ac7e00cc0d9436d4445b3e338b46dd003" kindref="member">task_me</ref><sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(myproc<sp/>&gt;=<sp/>lo<sp/>&amp;&amp;<sp/>myproc<sp/>&lt;<sp/>hi)<sp/>{</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLassert_8H_1aad6450907585a147153aef621fdc6007" kindref="member">AMREX_ASSERT</ref>(<ref refid="classamrex_1_1ForkJoin_1ac7e00cc0d9436d4445b3e338b46dd003" kindref="member">task_me</ref><sp/>&lt;<sp/><ref refid="classamrex_1_1ForkJoin_1a4eaae5bd6eb7e83442d5db4529cf1443" kindref="member">NTasks</ref>());</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>BL_USE_MPI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref><sp/>new_comm;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>MPI_Comm_split(<ref refid="namespaceamrex_1_1ParallelContext_1a3735bb2b55dab8f232227611c6d25bb8" kindref="member">ParallelContext::CommunicatorSub</ref>(),<sp/><ref refid="classamrex_1_1ForkJoin_1ac7e00cc0d9436d4445b3e338b46dd003" kindref="member">task_me</ref>,<sp/>myproc,<sp/>&amp;new_comm);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref><sp/>new_comm<sp/>=<sp/><ref refid="namespaceamrex_1_1ParallelContext_1a3735bb2b55dab8f232227611c6d25bb8" kindref="member">ParallelContext::CommunicatorSub</ref>();</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>new_comm;</highlight></codeline>
<codeline lineno="350"><highlight class="normal">}</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classamrex_1_1ForkJoin_1ad4b77ac1de1547c3903014ba22c0306b" kindref="member">ForkJoin::create_task_output_dir</ref><sp/>()</highlight></codeline>
<codeline lineno="353"><highlight class="normal">{</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1ForkJoin_1ac17370c5ba5f31bf037c5ca3992c3f66" kindref="member">task_output_dir</ref><sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>!<ref refid="namespaceamrex_1a51791a9a04ee140c71cee50d3615ed35" kindref="member">amrex::FileExists</ref>(<ref refid="classamrex_1_1ForkJoin_1ac17370c5ba5f31bf037c5ca3992c3f66" kindref="member">task_output_dir</ref>))<sp/>{</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1ForkJoin_1a943794e0f810e216579ad8156d11cd20" kindref="member">flag_verbose</ref>)<sp/>{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Print" kindref="compound">Print</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Creating<sp/>task_output_dir:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classamrex_1_1ForkJoin_1ac17370c5ba5f31bf037c5ca3992c3f66" kindref="member">task_output_dir</ref><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceamrex_1_1ParallelContext_1af766eba670e3bba30b2b8db7f20e8885" kindref="member">ParallelContext::IOProcessorSub</ref>())<sp/>{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a913fd7ccf7cab45bc7d8e2a09ddd2824" kindref="member">amrex::UtilCreateDirectory</ref>(<ref refid="classamrex_1_1ForkJoin_1ac17370c5ba5f31bf037c5ca3992c3f66" kindref="member">task_output_dir</ref>,<sp/>0755,<sp/><ref refid="classamrex_1_1ForkJoin_1a943794e0f810e216579ad8156d11cd20" kindref="member">flag_verbose</ref>);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="362"><highlight class="normal">}</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal">std::string</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><ref refid="classamrex_1_1ForkJoin_1aecdcd8a490ce68812e19ba6e6f17d320" kindref="member">ForkJoin::get_io_filename</ref><sp/>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>flag_unique)</highlight></codeline>
<codeline lineno="366"><highlight class="normal">{</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>result<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1ForkJoin_1ac17370c5ba5f31bf037c5ca3992c3f66" kindref="member">task_output_dir</ref><sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>build<sp/>base<sp/>filename</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>result_base<sp/>=<sp/><ref refid="classamrex_1_1ForkJoin_1ac17370c5ba5f31bf037c5ca3992c3f66" kindref="member">task_output_dir</ref>;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result_base<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;/T-&quot;</highlight><highlight class="normal"><sp/>+<sp/>str_join(get_frame_id_vec(),<sp/></highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result_base<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;.R-&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(<ref refid="namespaceamrex_1_1ParallelContext_1a5f6737315bff6905419103b17acf3d06" kindref="member">ParallelContext::MyProcSub</ref>());</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flag_unique)<sp/>{</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>concatenate<sp/>an<sp/>integer<sp/>to<sp/>the<sp/>end<sp/>to<sp/>make<sp/>unique</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>result_base<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.I-&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(i++)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.out&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(file_exists(result));</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>result_base<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.out&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="387"><highlight class="normal">}</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ForkJoin.cpp"/>
  </compounddef>
</doxygen>
