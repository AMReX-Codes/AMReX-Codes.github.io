<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classamrex_1_1MLTensorOp" kind="class" language="C++" prot="public">
    <compoundname>amrex::MLTensorOp</compoundname>
    <basecompoundref refid="classamrex_1_1MLABecLaplacianT" prot="public" virt="non-virtual">amrex::MLABecLaplacianT&lt; MultiFab &gt;</basecompoundref>
    <includes refid="AMReX__MLTensorOp_8H" local="no">AMReX_MLTensorOp.H</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classamrex_1_1MLTensorOp_1a15ebbe140a2faea1fccb3b4bb71ddb60" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::MLTensorOp::m_needs_update</definition>
        <argsstring></argsstring>
        <name>m_needs_update</name>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.H" line="94" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.H" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLTensorOp_1a0aebce2114e6c519b7648b87daceeb11" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::MLTensorOp::m_has_kappa</definition>
        <argsstring></argsstring>
        <name>m_has_kappa</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.H" line="96" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.H" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLTensorOp_1aa056265afa394abc77bb3fa40fcb96d9" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>, AMREX_SPACEDIM &gt; &gt; &gt;</type>
        <definition>Vector&lt;Vector&lt;Array&lt;MultiFab,AMREX_SPACEDIM&gt; &gt; &gt; amrex::MLTensorOp::m_kappa</definition>
        <argsstring></argsstring>
        <name>m_kappa</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.H" line="97" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.H" bodystart="97" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1MLTensorOp_1aec0e97a4db88c3f6c19526090d051853" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MLTensorOp::MLTensorOp</definition>
        <argsstring>()</argsstring>
        <name>MLTensorOp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.H" line="30" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.cpp" bodystart="12" bodyend="15"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLTensorOp_1af334ada457b300b2f6c0751555dddf4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MLTensorOp::MLTensorOp</definition>
        <argsstring>(const Vector&lt; Geometry &gt; &amp;a_geom, const Vector&lt; BoxArray &gt; &amp;a_grids, const Vector&lt; DistributionMapping &gt; &amp;a_dmap, const LPInfo &amp;a_info=LPInfo(), const Vector&lt; FabFactory&lt; FArrayBox &gt; const * &gt; &amp;a_factory={})</argsstring>
        <name>MLTensorOp</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>a_geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &gt; &amp;</type>
          <declname>a_grids</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt; &amp;</type>
          <declname>a_dmap</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1LPInfo" kindref="compound">LPInfo</ref> &amp;</type>
          <declname>a_info</declname>
          <defval><ref refid="structamrex_1_1LPInfo" kindref="compound">LPInfo</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &gt; const * &gt; &amp;</type>
          <declname>a_factory</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.H" line="31" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.cpp" bodystart="17" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLTensorOp_1ad97ed45bc2dd179fe8870687841f9071" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MLTensorOp::MLTensorOp</definition>
        <argsstring>(const Vector&lt; Geometry &gt; &amp;a_geom, const Vector&lt; BoxArray &gt; &amp;a_grids, const Vector&lt; DistributionMapping &gt; &amp;a_dmap, const Vector&lt; iMultiFab const * &gt; &amp;a_overset_mask, const LPInfo &amp;a_info=LPInfo(), const Vector&lt; FabFactory&lt; FArrayBox &gt; const * &gt; &amp;a_factory={})</argsstring>
        <name>MLTensorOp</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>a_geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &gt; &amp;</type>
          <declname>a_grids</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt; &amp;</type>
          <declname>a_dmap</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> const * &gt; &amp;</type>
          <declname>a_overset_mask</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1LPInfo" kindref="compound">LPInfo</ref> &amp;</type>
          <declname>a_info</declname>
          <defval><ref refid="structamrex_1_1LPInfo" kindref="compound">LPInfo</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &gt; const * &gt; &amp;</type>
          <declname>a_factory</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.H" line="36" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.cpp" bodystart="27" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLTensorOp_1aba85f264ee18002e4005820da491f9c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual amrex::MLTensorOp::~MLTensorOp</definition>
        <argsstring>()=default</argsstring>
        <name>~MLTensorOp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.H" line="42" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLTensorOp_1a6025988cdea4ad252498aa0e0af1de94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MLTensorOp::MLTensorOp</definition>
        <argsstring>(const MLTensorOp &amp;)=delete</argsstring>
        <name>MLTensorOp</name>
        <param>
          <type>const <ref refid="classamrex_1_1MLTensorOp" kindref="compound">MLTensorOp</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.H" line="44" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLTensorOp_1a2cf6f2e2ef6c4cceed3f3a67cf4e1201" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MLTensorOp::MLTensorOp</definition>
        <argsstring>(MLTensorOp &amp;&amp;)=delete</argsstring>
        <name>MLTensorOp</name>
        <param>
          <type><ref refid="classamrex_1_1MLTensorOp" kindref="compound">MLTensorOp</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.H" line="45" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLTensorOp_1a3879f323dc12422e979cd5c1db513481" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1MLTensorOp" kindref="compound">MLTensorOp</ref> &amp;</type>
        <definition>MLTensorOp&amp; amrex::MLTensorOp::operator=</definition>
        <argsstring>(const MLTensorOp &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classamrex_1_1MLTensorOp" kindref="compound">MLTensorOp</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.H" line="46" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLTensorOp_1a20b3da7c94a567c736a703979565eb7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1MLTensorOp" kindref="compound">MLTensorOp</ref> &amp;</type>
        <definition>MLTensorOp&amp; amrex::MLTensorOp::operator=</definition>
        <argsstring>(MLTensorOp &amp;&amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1MLTensorOp" kindref="compound">MLTensorOp</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.H" line="47" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLTensorOp_1a4aa37d8953aeb1df96051653df3769c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLTensorOp::define</definition>
        <argsstring>(const Vector&lt; Geometry &gt; &amp;a_geom, const Vector&lt; BoxArray &gt; &amp;a_grids, const Vector&lt; DistributionMapping &gt; &amp;a_dmap, const LPInfo &amp;a_info=LPInfo(), const Vector&lt; FabFactory&lt; FArrayBox &gt; const * &gt; &amp;a_factory={})</argsstring>
        <name>define</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>a_geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &gt; &amp;</type>
          <declname>a_grids</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt; &amp;</type>
          <declname>a_dmap</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1LPInfo" kindref="compound">LPInfo</ref> &amp;</type>
          <declname>a_info</declname>
          <defval><ref refid="structamrex_1_1LPInfo" kindref="compound">LPInfo</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &gt; const * &gt; &amp;</type>
          <declname>a_factory</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.H" line="49" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.cpp" bodystart="39" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLTensorOp_1a32da39624352ed60dc69765cd9fa3643" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLTensorOp::define</definition>
        <argsstring>(const Vector&lt; Geometry &gt; &amp;a_geom, const Vector&lt; BoxArray &gt; &amp;a_grids, const Vector&lt; DistributionMapping &gt; &amp;a_dmap, const Vector&lt; iMultiFab const * &gt; &amp;a_overset_mask, const LPInfo &amp;a_info=LPInfo(), const Vector&lt; FabFactory&lt; FArrayBox &gt; const * &gt; &amp;a_factory={})</argsstring>
        <name>define</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>a_geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &gt; &amp;</type>
          <declname>a_grids</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt; &amp;</type>
          <declname>a_dmap</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> const * &gt; &amp;</type>
          <declname>a_overset_mask</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1LPInfo" kindref="compound">LPInfo</ref> &amp;</type>
          <declname>a_info</declname>
          <defval><ref refid="structamrex_1_1LPInfo" kindref="compound">LPInfo</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &gt; const * &gt; &amp;</type>
          <declname>a_factory</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.H" line="55" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.cpp" bodystart="67" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLTensorOp_1af6d48bd951e581c0766cec582a9c85a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLTensorOp::setShearViscosity</definition>
        <argsstring>(int amrlev, const Array&lt; MultiFab const *, AMREX_SPACEDIM &gt; &amp;eta)</argsstring>
        <name>setShearViscosity</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> const *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>eta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.H" line="62" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.cpp" bodystart="96" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLTensorOp_1abae8fb16d0725b3c3c728079359e8d4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLTensorOp::setShearViscosity</definition>
        <argsstring>(int amrlev, Real eta)</argsstring>
        <name>setShearViscosity</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>eta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.H" line="63" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.cpp" bodystart="102" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLTensorOp_1a89529e15aedc1628aaa544645a9a8b39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLTensorOp::setBulkViscosity</definition>
        <argsstring>(int amrlev, const Array&lt; MultiFab const *, AMREX_SPACEDIM &gt; &amp;kappa)</argsstring>
        <name>setBulkViscosity</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> const *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>kappa</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.H" line="64" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.cpp" bodystart="108" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLTensorOp_1acbe31c08085ba7b2e1b6ae53e22b688c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLTensorOp::setBulkViscosity</definition>
        <argsstring>(int amrlev, Real kappa)</argsstring>
        <name>setBulkViscosity</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>kappa</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.H" line="65" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.cpp" bodystart="117" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLTensorOp_1afc580050d59cf53595c895acb8893034" prot="public" static="no" const="yes" explicit="no" inline="yes" final="yes" virt="virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>virtual int amrex::MLTensorOp::getNComp</definition>
        <argsstring>() const final override</argsstring>
        <name>getNComp</name>
        <reimplements refid="classamrex_1_1MLABecLaplacianT_1aee1fb79f4d35379e625bb798309d8d62">getNComp</reimplements>
        <briefdescription>
<para>Return number of components. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.H" line="67" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.H" bodystart="67" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLTensorOp_1aa6606a8be71e504fc8e8e7e61a9393ec" prot="public" static="no" const="yes" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool amrex::MLTensorOp::isCrossStencil</definition>
        <argsstring>() const final override</argsstring>
        <name>isCrossStencil</name>
        <reimplements refid="classamrex_1_1MLCellLinOpT_1a69fbf6add2bd954f6fb9a17f89adebf8">isCrossStencil</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.H" line="69" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.H" bodystart="69" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLTensorOp_1a7a79d02f26f61d67c0aed26d314b8a03" prot="public" static="no" const="yes" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool amrex::MLTensorOp::isTensorOp</definition>
        <argsstring>() const final override</argsstring>
        <name>isTensorOp</name>
        <reimplements refid="classamrex_1_1MLCellLinOpT_1aae0589f189ee2d39dadca3a308e3df9b">isTensorOp</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.H" line="70" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.H" bodystart="70" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLTensorOp_1a65030fea7dc90010188af0e7b33fb6ab" prot="public" static="no" const="yes" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool amrex::MLTensorOp::needsUpdate</definition>
        <argsstring>() const final override</argsstring>
        <name>needsUpdate</name>
        <reimplements refid="classamrex_1_1MLABecLaplacianT_1abbba61650d69e51d3612ced86f119cd4">needsUpdate</reimplements>
        <briefdescription>
<para>Does it need update if it&apos;s reused? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.H" line="72" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.H" bodystart="72" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLTensorOp_1a2974162f8c208ea9130dbe20a99a76e1" prot="public" static="no" const="no" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex::MLTensorOp::update</definition>
        <argsstring>() final override</argsstring>
        <name>update</name>
        <reimplements refid="classamrex_1_1MLABecLaplacianT_1af3a21bba5cafce9e1c1c75194f37ca93">update</reimplements>
        <briefdescription>
<para>Update for reuse. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.H" line="75" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.H" bodystart="75" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLTensorOp_1a7d6264e24870296cd61ca4ce20b118df" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLTensorOp::prepareForSolve</definition>
        <argsstring>() final override</argsstring>
        <name>prepareForSolve</name>
        <reimplements refid="classamrex_1_1MLABecLaplacianT_1a5c7e2382421d34818b66ccaba2e9ba95">prepareForSolve</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.H" line="79" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.cpp" bodystart="128" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLTensorOp_1abb68b7b79b8bb488979e6b25b05f6d82" prot="public" static="no" const="yes" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool amrex::MLTensorOp::isSingular</definition>
        <argsstring>(int) const final override</argsstring>
        <name>isSingular</name>
        <reimplements refid="classamrex_1_1MLABecLaplacianT_1a3d5588d2b0f206116d68dc214f4e7b5b">isSingular</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <briefdescription>
<para>Is it singular on given AMR level? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.H" line="80" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.H" bodystart="80" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLTensorOp_1a1ebac1979e56e1354afa11b556bf074a" prot="public" static="no" const="yes" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool amrex::MLTensorOp::isBottomSingular</definition>
        <argsstring>() const final override</argsstring>
        <name>isBottomSingular</name>
        <reimplements refid="classamrex_1_1MLABecLaplacianT_1a09fc5820c50b038c50ed37241a183baa">isBottomSingular</reimplements>
        <briefdescription>
<para>Is the bottom of MG singular? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.H" line="81" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.H" bodystart="81" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLTensorOp_1ab27ab49bb00008a08ebb46ae961492a9" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLTensorOp::apply</definition>
        <argsstring>(int amrlev, int mglev, MultiFab &amp;out, MultiFab &amp;in, BCMode bc_mode, StateMode s_mode, const MLMGBndry *bndry=nullptr) const final override</argsstring>
        <name>apply</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLCellLinOpT_1a5f24e3a713313778626619bfd96ebc96" kindref="member">BCMode</ref></type>
          <declname>bc_mode</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLCellLinOpT_1afaa558995ac0e6dace1b2539572250a7" kindref="member">StateMode</ref></type>
          <declname>s_mode</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a9214b7c07d9c296122f7418f73f798e9" kindref="member">MLMGBndry</ref> *</type>
          <declname>bndry</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.H" line="83" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.cpp" bodystart="200" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLTensorOp_1ab07ec8381bce1e90f83ecf92d6581547" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLTensorOp::compFlux</definition>
        <argsstring>(int amrlev, const Array&lt; MultiFab *, AMREX_SPACEDIM &gt; &amp;fluxes, MultiFab &amp;sol, Location loc) const override</argsstring>
        <name>compFlux</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>fluxes</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLABecLaplacianT_1aed1bdc13923f234ac4e4c6425210db69" kindref="member">Location</ref></type>
          <declname>loc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.H" line="86" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp_grad.cpp" bodystart="7" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLTensorOp_1a365317f94f2141fd23b7e865996bcb58" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLTensorOp::compVelGrad</definition>
        <argsstring>(int amrlev, const Array&lt; MultiFab *, AMREX_SPACEDIM &gt; &amp;fluxes, MultiFab &amp;sol, Location loc) const</argsstring>
        <name>compVelGrad</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>fluxes</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLABecLaplacianT_1aed1bdc13923f234ac4e4c6425210db69" kindref="member">Location</ref></type>
          <declname>loc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.H" line="89" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp_grad.cpp" bodystart="133" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLTensorOp_1afd1fbd89d6fdbe0014a9efeaf4e6ce06" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLTensorOp::applyBCTensor</definition>
        <argsstring>(int amrlev, int mglev, MultiFab &amp;vel, BCMode bc_mode, StateMode s_mode, const MLMGBndry *bndry) const</argsstring>
        <name>applyBCTensor</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLCellLinOpT_1a5f24e3a713313778626619bfd96ebc96" kindref="member">BCMode</ref></type>
          <declname>bc_mode</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLCellLinOpT_1afaa558995ac0e6dace1b2539572250a7" kindref="member">StateMode</ref></type>
          <declname>s_mode</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a9214b7c07d9c296122f7418f73f798e9" kindref="member">MLMGBndry</ref> *</type>
          <declname>bndry</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.H" line="103" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.cpp" bodystart="336" bodyend="447"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classamrex_1_1MLTensorOp_1aec6c60aa0be2285afbcb0ea8b13efe93" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLTensorOp::setBCoeffs</definition>
        <argsstring>(int amrlev, const Array&lt; MultiFab const *, AMREX_SPACEDIM &gt; &amp;beta)=delete</argsstring>
        <name>setBCoeffs</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> const *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>beta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.H" line="99" column="10"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>amrex::MLTensorOp</label>
        <link refid="classamrex_1_1MLTensorOp"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>amrex::MLCellABecLapT&lt; MF &gt;</label>
        <link refid="classamrex_1_1MLCellABecLapT"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>MLABecLaplacian</label>
        <link refid="classamrex_1_1MLABecLaplacianT"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>amrex::MLCellLinOpT&lt; MF &gt;</label>
        <link refid="classamrex_1_1MLCellLinOpT"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>amrex::MLLinOpT&lt; MF &gt;</label>
        <link refid="classamrex_1_1MLLinOpT"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>amrex::MLTensorOp</label>
        <link refid="classamrex_1_1MLTensorOp"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="32" relation="usage">
          <edgelabel>m_kappa</edgelabel>
        </childnode>
      </node>
      <node id="31">
        <label>amrex::Vector&lt; amrex::Vector&lt; Array&lt; MF, AMREX_SPACEDIM &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="28">
        <label>amrex::Vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::MLCellLinOpT::BndryCondLoc &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="13">
        <label>amrex::IntVect</label>
        <link refid="classamrex_1_1IntVect"/>
        <childnode refid="13" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>T</label>
      </node>
      <node id="11">
        <label>Real</label>
      </node>
      <node id="7">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="8" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>amrex::MLCellABecLapT&lt; MF &gt;</label>
        <link refid="classamrex_1_1MLCellABecLapT"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="29" relation="usage">
          <edgelabel>m_overset_mask</edgelabel>
        </childnode>
        <childnode refid="20" relation="usage">
          <edgelabel>m_lpinfo_arg</edgelabel>
        </childnode>
      </node>
      <node id="27">
        <label>amrex::Vector&lt; amrex::Vector&lt; RT &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="12">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::BoxArray &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="24">
        <label>amrex::Vector&lt; std::unique_ptr&lt; amrex::BndryRegisterT&lt; MF &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="14">
        <label>std::unique_ptr&lt; amrex::MLLinOpT::CommContainer &gt;</label>
      </node>
      <node id="25">
        <label>amrex::Vector&lt; std::unique_ptr&lt; amrex::MLMGBndryT&lt; MF &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="21">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::BndryRegisterT&lt; MF &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="15">
        <label>amrex::Vector&lt; int &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="30">
        <label>amrex::Vector&lt; amrex::Vector&lt; MF &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="22">
        <label>amrex::Vector&lt; amrex::YAFluxRegisterT&lt; MF &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::Geometry &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>amrex::RealVect</label>
        <link refid="classamrex_1_1RealVect"/>
        <childnode refid="10" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>vect</edgelabel>
        </childnode>
      </node>
      <node id="19">
        <label>amrex::Vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::FabFactory&lt; FAB &gt; &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="16">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::DistributionMapping &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>amrex::Vector&lt; std::unique_ptr&lt; MF &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="18">
        <label>amrex::Vector&lt; amrex::IntVect &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>MLABecLaplacian</label>
        <link refid="classamrex_1_1MLABecLaplacianT"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="30" relation="usage">
          <edgelabel>m_a_coeffs</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>m_is_singular</edgelabel>
        </childnode>
        <childnode refid="31" relation="usage">
          <edgelabel>m_b_coeffs</edgelabel>
        </childnode>
      </node>
      <node id="23">
        <label>amrex::Vector&lt; std::unique_ptr&lt; amrex::iMultiFab &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="17">
        <label>amrex::Vector&lt; Array&lt; BCType, AMREX_SPACEDIM &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>amrex::MLCellLinOpT&lt; MF &gt;</label>
        <link refid="classamrex_1_1MLCellLinOpT"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="21" relation="usage">
          <edgelabel>m_undrrelxr</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>m_robin_bcval</edgelabel>
        </childnode>
        <childnode refid="22" relation="usage">
          <edgelabel>m_fluxreg</edgelabel>
        </childnode>
        <childnode refid="23" relation="usage">
          <edgelabel>m_norm_fine_mask</edgelabel>
        </childnode>
        <childnode refid="24" relation="usage">
          <edgelabel>m_crse_cor_br</edgelabel>
          <edgelabel>m_crse_sol_br</edgelabel>
        </childnode>
        <childnode refid="25" relation="usage">
          <edgelabel>m_bndry_cor</edgelabel>
          <edgelabel>m_bndry_sol</edgelabel>
        </childnode>
        <childnode refid="26" relation="usage">
          <edgelabel>m_maskvals</edgelabel>
        </childnode>
        <childnode refid="27" relation="usage">
          <edgelabel>m_volinv</edgelabel>
        </childnode>
        <childnode refid="28" relation="usage">
          <edgelabel>m_bcondloc</edgelabel>
        </childnode>
      </node>
      <node id="20">
        <label>amrex::LPInfo</label>
        <link refid="structamrex_1_1LPInfo"/>
      </node>
      <node id="29">
        <label>amrex::Vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::iMultiFab &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>amrex::MLLinOpT&lt; MF &gt;</label>
        <link refid="classamrex_1_1MLLinOpT"/>
        <childnode refid="6" relation="usage">
          <edgelabel>levelbc_raii</edgelabel>
          <edgelabel>robin_a_raii</edgelabel>
          <edgelabel>robin_b_raii</edgelabel>
          <edgelabel>robin_f_raii</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>m_geom</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>m_coarse_bc_loc</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>m_grids</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>m_ixtype</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>m_raii_comm</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>m_amr_ref_ratio</edgelabel>
          <edgelabel>m_domain_covered</edgelabel>
          <edgelabel>m_num_mg_levels</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>m_dmap</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>m_hibc</edgelabel>
          <edgelabel>m_hibc_orig</edgelabel>
          <edgelabel>m_lobc</edgelabel>
          <edgelabel>m_lobc_orig</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>mg_coarsen_ratio_vec</edgelabel>
        </childnode>
        <childnode refid="19" relation="usage">
          <edgelabel>m_factory</edgelabel>
        </childnode>
        <childnode refid="20" relation="usage">
          <edgelabel>info</edgelabel>
        </childnode>
      </node>
      <node id="26">
        <label>amrex::Vector&lt; amrex::Vector&lt; Array&lt; amrex::MultiMask, 2 *AMREX_SPACEDIM &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="32">
        <label>amrex::Vector&lt; amrex::Vector&lt; Array&lt; amrex::MultiFab, AMREX_SPACEDIM &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.H" line="25" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.H" bodystart="27" bodyend="106"/>
    <listofallmembers>
      <member refid="classamrex_1_1MLCellABecLapT_1a2be65b6a2c0a68b5a8954d4be9ace8d7" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>addInhomogNeumannFlux</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a10ebb5d290f3579d4c3e69aa56cf6251" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>AMRRefRatio</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ae88bc615f7fa178e54ea32899aae6506" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>AMRRefRatio</name></member>
      <member refid="classamrex_1_1MLTensorOp_1ab27ab49bb00008a08ebb46ae961492a9" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>apply</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a8755fe1a7a09db77e7d810dd9dfdb107" prot="public" virt="virtual" ambiguityscope="amrex::MLABecLaplacianT::"><scope>amrex::MLTensorOp</scope><name>apply</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a251a2f1de9fea9f0d0230e04b19c078e" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>applyBC</name></member>
      <member refid="classamrex_1_1MLTensorOp_1afd1fbd89d6fdbe0014a9efeaf4e6ce06" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>applyBCTensor</name></member>
      <member refid="classamrex_1_1MLCellABecLapT_1ae96c2381214550fc17f99eeac401eeee" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>applyInhomogNeumannTerm</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a87bccd5330e4295f7108cf56c0a1cd20" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>applyMetricTerm</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1adf470c2b5166676692960bdae13495d1" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>applyMetricTermsCoeffs</name></member>
      <member refid="classamrex_1_1MLCellABecLapT_1a78233be19743ed1432077186937f51cc" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>applyOverset</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1a2bf9b621e5517b046e8ab5bef786666f" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>applyRobinBCTermsCoeffs</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a118fb8de26be373907091016e1207645" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>averageDownAndSync</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1aa88b116b953af82b50e0019a4dba6448" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>averageDownCoeffs</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1a778c59784e90a048fb24ab03d554929a" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>averageDownCoeffsSameAmrLevel</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1a8b48f0d915aee57dd60412b4962d64eb" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>averageDownCoeffsToCoarseAmrLevel</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a116deee661b635f1872ac7eded5f28a7" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>averageDownSolutionRHS</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a33f2c8cbf69e58cbe60e9be048181f5d" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>avgDownResAmr</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a08f1cfd6afc79121fce39e027f15cac5" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>avgDownResMG</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a5f24e3a713313778626619bfd96ebc96" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>BCMode</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a6ce4d3fd41e76507b017ff826a52c62e" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>BCTuple</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1a2ad4b24859222a5dc0a6e68b4f63f2d4" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>BCType</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a2859b0cddde955b30ccf90c0af86e897" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>BottomCommunicator</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a6b2ce3775a4c209860db63635f969640" prot="private" virt="virtual"><scope>amrex::MLTensorOp</scope><name>checkPoint</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a2ac85c71c7e15137bd62cbfd04cc52ed" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>Communicator</name></member>
      <member refid="classamrex_1_1MLLinOpT_1abb542d962e83dd7479852f83fd3575bf" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>compactify</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a3f7e812180f57035bfe85cb7d10b26e9" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>compactify</name></member>
      <member refid="classamrex_1_1MLTensorOp_1ab07ec8381bce1e90f83ecf92d6581547" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>compFlux</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1ae7f32e1b953ea4ef5643501e91560d32" prot="public" virt="virtual" ambiguityscope="amrex::MLABecLaplacianT::"><scope>amrex::MLTensorOp</scope><name>compFlux</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a2ed74b3dc4e3c46d2cd589cbb8301e94" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>compGrad</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1af28f1c33141158bd515093c3741d7124" prot="private" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>computeVolInv</name></member>
      <member refid="classamrex_1_1MLTensorOp_1a365317f94f2141fd23b7e865996bcb58" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>compVelGrad</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1a865959c23aac0d252c981082b8d3ca12" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>copyNSolveSolution</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a51480d2022ad9346d6eb11f3cbfd631a" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>correctionResidual</name></member>
      <member refid="classamrex_1_1MLTensorOp_1a4aa37d8953aeb1df96051653df3769c6" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>define</name></member>
      <member refid="classamrex_1_1MLTensorOp_1a32da39624352ed60dc69765cd9fa3643" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>define</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1ae8b21e3942ac3fc8e9e33e607327dad7" prot="public" virt="non-virtual" ambiguityscope="amrex::MLABecLaplacianT::"><scope>amrex::MLTensorOp</scope><name>define</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1a58d0279fc10cb8458e80b3aaab3a0c16" prot="public" virt="non-virtual" ambiguityscope="amrex::MLABecLaplacianT::"><scope>amrex::MLTensorOp</scope><name>define</name></member>
      <member refid="classamrex_1_1MLCellABecLapT_1aa597fe7d39f7a3049fefccff91ddb693" prot="public" virt="non-virtual" ambiguityscope="amrex::MLCellABecLapT::"><scope>amrex::MLTensorOp</scope><name>define</name></member>
      <member refid="classamrex_1_1MLCellABecLapT_1acdef494a31a555b648c2eae8cdd8cbb9" prot="public" virt="non-virtual" ambiguityscope="amrex::MLCellABecLapT::"><scope>amrex::MLTensorOp</scope><name>define</name></member>
      <member refid="classamrex_1_1MLLinOpT_1abe69b9ebe0a04b3da502ac8606871680" prot="public" virt="non-virtual" ambiguityscope="amrex::MLLinOpT::"><scope>amrex::MLTensorOp</scope><name>define</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1a73c64bfadff728bad13d0f0dcf406ca4" prot="private" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>define_ab_coeffs</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a95432ea80c81e30e58ffda678f2d926d" prot="private" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>defineAuxData</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a3b583520578b832e04ea2baf3ea48917" prot="private" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>defineBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a5aa9449241f9867021b4d5300284a76a" prot="private" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>defineGrids</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a33e77669d6f0da47f28959678db508e4" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>doAgglomeration</name></member>
      <member refid="classamrex_1_1MLLinOpT_1add56650e9ecd05e16a7f2f71bcbe7c9b" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>doConsolidation</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aa99dea32527b34287aa64542b5545256" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>doSemicoarsening</name></member>
      <member refid="classamrex_1_1MLLinOpT_1adb9b0f44a3e66fbefa2310385747427b" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>enforceSingularSolvable</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1a3bb997a55fd71a5bb98769faff3a40e2" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>FAB</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a3ca782a47b55ca765b4fd9eeda174d36" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>Factory</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1a8adf5cb6afb7ee229c60bf5ea78db952" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>Fapply</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1ab1c16c4f6189044844f051c3ea62ce42" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>FFlux</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1a152a02f12bbe76529b604167332e7ebe" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>FFlux</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1ac44f404584644c6cb3f7548de48206d0" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>fixSolvabilityByOffset</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1a1d6e6cdf31ccf48cc0baeffde500156d" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>Fsmooth</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a02b3d2ea4535daf60276e9014571f955" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>Geom</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a28402657d9216f6ef38835ab562ee58b" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>get_d0</name></member>
      <member refid="classamrex_1_1MLLinOpT_1adad8c3e9a304cc409d473b2d44aa4520" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>get_d1</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1a2c06a7a2501ed39df1b63581b776a24f" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>getACoeffs</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1aa6ef3a533780d1b8c1aaca39186bddb8" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>getAScalar</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1aa5f06fce48114aa579747598131c06bf" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>getBCoeffs</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1a6f90447f16436d1c7dbdf093b082940a" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>getBScalar</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a5e588d148e2672c3e82c8f40d5826671" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>getDefaultBottomSolver</name></member>
      <member refid="classamrex_1_1MLLinOpT_1af823f5b435d2f329595b333c82080e35" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>getEnforceSingularSolvable</name></member>
      <member refid="classamrex_1_1MLCellABecLapT_1a47c09599ba7bee546dfb637ac8962fa0" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>getFluxes</name></member>
      <member refid="classamrex_1_1MLCellABecLapT_1ad86670e0d6ce7f6cdc72e456fad67faf" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>getFluxes</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a4e2a07d995c0fc8d2dfe5be544501eea" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>getMaxOrder</name></member>
      <member refid="classamrex_1_1MLTensorOp_1afc580050d59cf53595c895acb8893034" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>getNComp</name></member>
      <member refid="classamrex_1_1MLLinOpT_1afe8257f1157b08104c622bedb11b0d00" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>getNGrow</name></member>
      <member refid="classamrex_1_1MLCellABecLapT_1a8ab63e064604cb872297d224250c4921" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>getOversetMask</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a08e68e2870cd7367dd09d2ef777261b3" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>getSolvabilityOffset</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a647cd4352c3719aa23545a8e0f88b562" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>hasBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a894d1f80e83452c32470d42e05947e13" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>hasHiddenDimension</name></member>
      <member refid="classamrex_1_1MLLinOpT_1afdb203f24caba5241fa95fad173cfae7" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>hasInhomogNeumannBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a40cc3ea13c4a150195a6198e33f1eac2" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>hasRobinBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ae6a081e88ffb4aafb123a7eb644ebd72" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>HiBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aa0c3b0c5a4e23b9248d18138229aec76" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>hiddenDirection</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ad0412f399e1e29e200a2451b371b0133" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>info</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1ac40a7cc1f424156f36d3d8b2f0254ae7" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>interpAssign</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a7a7909cddc98ec2abe949ee2f043e817" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>interpolation</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1ae4108ba43d2b66494dd56578879a29a9" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>interpolationAmr</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a56ed51708c4e70b4ec224f4d0c2f2ff9" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>isBottomActive</name></member>
      <member refid="classamrex_1_1MLTensorOp_1a1ebac1979e56e1354afa11b556bf074a" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>isBottomSingular</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a107c8a8b4f0b4d5209357ab3a8225671" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>isCellCentered</name></member>
      <member refid="classamrex_1_1MLTensorOp_1aa6606a8be71e504fc8e8e7e61a9393ec" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>isCrossStencil</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a1666fe3156e40b2fbd7a44166f70ce11" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>isMFIterSafe</name></member>
      <member refid="classamrex_1_1MLTensorOp_1abb68b7b79b8bb488979e6b25b05f6d82" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>isSingular</name></member>
      <member refid="classamrex_1_1MLTensorOp_1a7a79d02f26f61d67c0aed26d314b8a03" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>isTensorOp</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a3ac078eb634767e8e812746b8327a6b5" prot="private" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>levelbc_raii</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a60f337c8a71be69643d62c774a536dcd" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>LoBC</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1aed1bdc13923f234ac4e4c6425210db69" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>Location</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1acd74fe42cd460e0e8cc50fae5550233e" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_a_coeffs</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1a6238682285be8b4464de6531f73d5cd8" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_a_scalar</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a520a29dd5773acdba2c227d316e059a4" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_amr_ref_ratio</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1affcd897d0397c49df2bb9cdef4a51050" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_b_coeffs</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1a539516410949fb84f32bdf408fdd2e18" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_b_scalar</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a8ea2fb547b5b9b37d88880948073e00c" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_bcondloc</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1ac667791f6b37a42e55ef25267bc78fa9" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_bndry_cor</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a2b8a625f55f16b9c5b620a82021f17f4" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_bndry_sol</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aee13b9d32b909adb7903586bfa352855" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_bottom_comm</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a1a730552d4db500b99496712dec21038" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_coarse_bc_loc</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a1b5ecb2a824287420c4f6acf8540b2f6" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_coarse_data_crse_ratio</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a02f8f07d9d724566c7aea603ea1248a6" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_coarse_data_for_bc</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a3bf0a8559fbed2ec5297f97590e92cb0" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_coarse_data_for_bc_raii</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a892cce2e429f77cee7360f2859ceda4d" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_crse_cor_br</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1adf51879b81fbd24f9ccb7b9f0142d63b" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_crse_sol_br</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a52e548305943a2d3a1b1731eb5855b73" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_default_comm</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a67d38036b0d30275047637a1ab739ca6" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_dmap</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a452827d7dc1f2d84d701248f05e908af" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_do_agglomeration</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a0e1db3374227c3c6043734d42bbbc795" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_do_consolidation</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a3f65a4345945e648b7170635a33c9557" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_do_semicoarsening</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a1375eac46dcbfeb8155a251b904cc727" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_domain_bloc_hi</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a437d5bd996be47153207c90d286b336c" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_domain_bloc_lo</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aa83ed4b753b00606bcdff3573a6f0824" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_domain_covered</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a07a2cce97f1c77f36f8a241090543b8e" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_factory</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a22cdf5d6b191ab3c883b7167e9f94ebe" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_fluxreg</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aab42ad785f4263767af0a0e7306cdf8a" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_geom</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a4458bc19263fdcf39df3665681ce3aef" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_grids</name></member>
      <member refid="classamrex_1_1MLTensorOp_1a0aebce2114e6c519b7648b87daceeb11" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_has_kappa</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1ada8bf2b1964f2023282e23ac54a948f4" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_has_metric_term</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ad073f92f684b4d5ea20718fbc396ef40" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_hibc</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a2cf9f506d5cee3aeaaae8b9930e7866d" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_hibc_orig</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1aa0125d9d8e480d38f2b3798bff1f0616" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_is_singular</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a1144a9c3d743270ff29c8e9f582581c0" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_ixtype</name></member>
      <member refid="classamrex_1_1MLTensorOp_1aa056265afa394abc77bb3fa40fcb96d9" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_kappa</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a9f2e0c10c385f9bee16af5fed5f4e9c9" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_lobc</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a726dec103c10ea9c84e649b9c8200767" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_lobc_orig</name></member>
      <member refid="classamrex_1_1MLCellABecLapT_1a2a4ce226902dbe904fa45173845d4cac" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_lpinfo_arg</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a9c470f145301b98fe0938ac6241284eb" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_maskvals</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1a1d9a5429f6674a76b4137e4631578413" prot="private" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_ncomp</name></member>
      <member refid="classamrex_1_1MLLinOpT_1abc7eaafcc5804d269386c6bdbd13181d" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_needs_coarse_data_for_bc</name></member>
      <member refid="classamrex_1_1MLTensorOp_1a15ebbe140a2faea1fccb3b4bb71ddb60" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_needs_update</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1af29ed070015666e58d890685cb491900" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_norm_fine_mask</name></member>
      <member refid="classamrex_1_1MLLinOpT_1afe9761ce7b771e51e0b47d415779ce93" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_num_amr_levels</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a64262a62291404dab652353158886cce" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_num_mg_levels</name></member>
      <member refid="classamrex_1_1MLCellABecLapT_1aa1bc328cdef65e6dfab478914c2913d7" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_overset_mask</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aa96812cd049f02fe827fc1573fa0626e" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_parent</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a3e96c4035b1315b80c6301329695f86e" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_raii_comm</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a95a0dd3f6700b3da5b020a66ef726dff" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_robin_bcval</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1ab50c53ea7ff9c53bf37ac816e0663406" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_undrrelxr</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1ad73d9eed28e8d9d32cf54327e21c5225" prot="private" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_volinv</name></member>
      <member refid="classamrex_1_1MLLinOpT_1afb48e62b81e97ddffb92d7b7cea09c55" prot="protected" virt="virtual"><scope>amrex::MLTensorOp</scope><name>make</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a223df72e572182f58b611c220487fe20" prot="protected" virt="virtual"><scope>amrex::MLTensorOp</scope><name>make</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a54590ff0d7670660d6520c753f6fbbbb" prot="private" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>makeAgglomeratedDMap</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a457c82b4259eab9916ca4e5f4493b373" prot="protected" virt="virtual"><scope>amrex::MLTensorOp</scope><name>makeAlias</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a44952a0322f09ae53fe7e26669f85de1" prot="protected" virt="virtual"><scope>amrex::MLTensorOp</scope><name>makeCoarseAmr</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a9991da8ff85055f29349c9f5b8246c65" prot="protected" virt="virtual"><scope>amrex::MLTensorOp</scope><name>makeCoarseMG</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a6574c3f3a840f96723f9a10ccb2eeb69" prot="private" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>makeConsolidatedDMap</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a46477d4e418960292da4f442741541b6" prot="protected" virt="virtual"><scope>amrex::MLTensorOp</scope><name>makeFactory</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a1574dd8857314d9658c28c26adc6ce12" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>makeNGrids</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1a1e996b7a81a2e29451db53aaee6d8350" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>makeNLinOp</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ad05360dc7ba30a94505918519dea299c" prot="private" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>makeSubCommunicator</name></member>
      <member refid="classamrex_1_1MLLinOpT_1abddb56c317b794cc672b446046784d95" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>maxorder</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a958be92529c763a85a81c3fc03e1e5af" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>mg_box_min_width</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a4ab72cdcf8c7d1746bd1e03fac99d808" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>mg_coarsen_ratio</name></member>
      <member refid="classamrex_1_1MLLinOpT_1abf470fae49c59ccd4cbc058ebfdab2a2" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>mg_coarsen_ratio_vec</name></member>
      <member refid="classamrex_1_1MLLinOpT_1adb9b30d3eda7f6dd1d77740f58674c84" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>mg_domain_min_width</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1a4d3b6e53d94e23c488324af1aeb42a4c" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>MLABecLaplacianT</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1a5da9bda4d79f9a4c8c9bdb22a1e5ac39" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>MLABecLaplacianT</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1aa7ad343c8c81dc5dca6566f6ef5fa9ac" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>MLABecLaplacianT</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1afc885b7be043f3de2fa34de950743987" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>MLABecLaplacianT</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1acb5023f996e6910bb5bbd4dff90c2f05" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>MLABecLaplacianT</name></member>
      <member refid="classamrex_1_1MLCellABecLapT_1a37eddbe9290f0102dc09e24e022f038d" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>MLCellABecLapT</name></member>
      <member refid="classamrex_1_1MLCellABecLapT_1a241cb451732d5ad6ab42c46ad4e1f597" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>MLCellABecLapT</name></member>
      <member refid="classamrex_1_1MLCellABecLapT_1a5f871352ed5f3af819701d945c2de871" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>MLCellABecLapT</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1ab6bc4d82971ae75fc206df8d00d15ef6" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>MLCellLinOpT</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a54558ff60dc7b62ac803e8dd8a5c1816" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>MLCellLinOpT</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1ab75b6f4249c1408041b529732b179d32" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>MLCellLinOpT</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ab768833f0df0eb419284243a6940153e" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>MLLinOpT</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aae73abc3efc9dcc4b381ff020e043c68" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>MLLinOpT</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a709f5c12d16e1e5e191a1d56df622173" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>MLLinOpT</name></member>
      <member refid="classamrex_1_1MLTensorOp_1aec0e97a4db88c3f6c19526090d051853" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>MLTensorOp</name></member>
      <member refid="classamrex_1_1MLTensorOp_1af334ada457b300b2f6c0751555dddf4e" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>MLTensorOp</name></member>
      <member refid="classamrex_1_1MLTensorOp_1ad97ed45bc2dd179fe8870687841f9071" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>MLTensorOp</name></member>
      <member refid="classamrex_1_1MLTensorOp_1a6025988cdea4ad252498aa0e0af1de94" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>MLTensorOp</name></member>
      <member refid="classamrex_1_1MLTensorOp_1a2cf6f2e2ef6c4cceed3f3a67cf4e1201" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>MLTensorOp</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a2fb16a53d8b6d9dd08306f89a535c617" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>name</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a09c567773980f90aa59d90d3235ded9c" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>NAMRLevels</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a7e2d1058dd843b67192b1aa489e112b6" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>needsCoarseDataForBC</name></member>
      <member refid="classamrex_1_1MLTensorOp_1a65030fea7dc90010188af0e7b33fb6ab" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>needsUpdate</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ad1697410f7ce33223a511796bbf9273f" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>NMGLevels</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1a62659c2f31b51033074026cffd4954ff" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>normalize</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a6207e307cf8edda53498feebe2abb2e3" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>normInf</name></member>
      <member refid="classamrex_1_1MLTensorOp_1a3879f323dc12422e979cd5c1db513481" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLTensorOp_1a20b3da7c94a567c736a703979565eb7c" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1a3b0b77f4e5bca96926395f274fca20b1" prot="public" virt="non-virtual" ambiguityscope="amrex::MLABecLaplacianT::"><scope>amrex::MLTensorOp</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1a8c62b49fb295c000921dac7ad3a8a35e" prot="public" virt="non-virtual" ambiguityscope="amrex::MLABecLaplacianT::"><scope>amrex::MLTensorOp</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLCellABecLapT_1ab5b785aa902dc8bd312b0545966bb36a" prot="public" virt="non-virtual" ambiguityscope="amrex::MLCellABecLapT::"><scope>amrex::MLTensorOp</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLCellABecLapT_1a53ae18ac5de6900a4a30e6de3385e25b" prot="public" virt="non-virtual" ambiguityscope="amrex::MLCellABecLapT::"><scope>amrex::MLTensorOp</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1abcbc29c6deeba6419b5cd5a67b553cd6" prot="public" virt="non-virtual" ambiguityscope="amrex::MLCellLinOpT::"><scope>amrex::MLTensorOp</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a36d76fae0e448ac86582b957eb7b5174" prot="public" virt="non-virtual" ambiguityscope="amrex::MLCellLinOpT::"><scope>amrex::MLTensorOp</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aba8d3e06373e96ddac7da02928522796" prot="public" virt="non-virtual" ambiguityscope="amrex::MLLinOpT::"><scope>amrex::MLTensorOp</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a9399276c8cadba0d0e513200ab8758c9" prot="public" virt="non-virtual" ambiguityscope="amrex::MLLinOpT::"><scope>amrex::MLTensorOp</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a7766bf3ef48ac5508865ef5aa3ef49be" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>postSolve</name></member>
      <member refid="classamrex_1_1MLTensorOp_1a7d6264e24870296cd61ca4ce20b118df" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>prepareForSolve</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a65abf3895113354dbd34041b96dfb3ba" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>RealTuple</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a35158f8a8bd840468c4dedb08d6726ff" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>reflux</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a43fcad8e24531044114e9572beb28323" prot="protected" virt="virtual"><scope>amrex::MLTensorOp</scope><name>resizeMultiGrid</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1ab4713a678d7c2ac9e1a9c5b027f965c5" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>restriction</name></member>
      <member refid="classamrex_1_1MLLinOpT_1afdb609a7a4b9ea229e7b9cc89a8751f7" prot="private" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>robin_a_raii</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a90e6517d0ff6dee31c92101a9249de67" prot="private" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>robin_b_raii</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a451681732629cb75f6a4a9ba29799f44" prot="private" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>robin_f_raii</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1a5709a608f0c8d3f1bab91ff0ab584d2b" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>RT</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ad86c06dbaa4556184fb4dea08186e3c9" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>scaleRHS</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1a0f32ca25f6afb98cc7acbd3141465831" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>setACoeffs</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1a50f7b86e67777f1fe45ccb4f91c9296d" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>setACoeffs</name></member>
      <member refid="classamrex_1_1MLTensorOp_1aec6c60aa0be2285afbcb0ea8b13efe93" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>setBCoeffs</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1aa709ea8caddead35734c2c6aaba607d6" prot="public" virt="non-virtual" ambiguityscope="amrex::MLABecLaplacianT::"><scope>amrex::MLTensorOp</scope><name>setBCoeffs</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1a06fa308776f2f5601335602731480841" prot="public" virt="non-virtual" ambiguityscope="amrex::MLABecLaplacianT::"><scope>amrex::MLTensorOp</scope><name>setBCoeffs</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1a469db0370bad5402adefe34c6a56abde" prot="public" virt="non-virtual" ambiguityscope="amrex::MLABecLaplacianT::"><scope>amrex::MLTensorOp</scope><name>setBCoeffs</name></member>
      <member refid="classamrex_1_1MLTensorOp_1a89529e15aedc1628aaa544645a9a8b39" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>setBulkViscosity</name></member>
      <member refid="classamrex_1_1MLTensorOp_1acbe31c08085ba7b2e1b6ae53e22b688c" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>setBulkViscosity</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a1645f2059f3e9816fedfa8b45315d484" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>setCoarseFineBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ad832dbc5dd9ed90db2136815c1c1a190" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>setCoarseFineBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a51edb661205b9d4b77b5acab32d17cd2" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>setCoarseFineBCLocation</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a065b7216ffbd4136592b893066feabc9" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>setDomainBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a472da4d3c20cee50275d2790e18bf046" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>setDomainBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a7dd25019053e84389e2d9226fc5816ed" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>setDomainBCLoc</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a28dec45d870edf5fba713b18c53542cf" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>setEnforceSingularSolvable</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1afaf162a4471fc9b3a7121d9579fea518" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>setLevelBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1adc2c4cd3ccc03f6c0f958429b1d1f093" prot="public" virt="non-virtual" ambiguityscope="amrex::MLLinOpT::"><scope>amrex::MLTensorOp</scope><name>setLevelBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a2cea879bd6717f7b2f425b1c1aeff724" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>setMaxOrder</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1af60aa5f93df4defa5142afa10ede59ef" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>setScalars</name></member>
      <member refid="classamrex_1_1MLTensorOp_1af6d48bd951e581c0766cec582a9c85a3" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>setShearViscosity</name></member>
      <member refid="classamrex_1_1MLTensorOp_1abae8fb16d0725b3c3c728079359e8d4b" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>setShearViscosity</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a135bc97332faf6e4f7f864b45c2b0b69" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>setVerbose</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a04486888c630dc3e4a5258a0e174345c" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>smooth</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1ad6684ea6b055170aad353ee9a4dcc316" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>solutionResidual</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1afaa558995ac0e6dace1b2539572250a7" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>StateMode</name></member>
      <member refid="classamrex_1_1MLCellABecLapT_1ac7b687cd9603d112b33b92f2047f663f" prot="protected" virt="virtual"><scope>amrex::MLTensorOp</scope><name>supportInhomogNeumannBC</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1a9bb4a79296c4cd9e4af7b7394fbd91d3" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>supportNSolve</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1a2e39d4b7353c073d160251c3091d70ee" prot="protected" virt="virtual"><scope>amrex::MLTensorOp</scope><name>supportRobinBC</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a8681147e6aa6a83cba4451adda7b719c" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>unapplyMetricTerm</name></member>
      <member refid="classamrex_1_1MLLinOpT_1af5258bf128c18afbb9712ad7230dad8e" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>unimposeNeumannBC</name></member>
      <member refid="classamrex_1_1MLTensorOp_1a2974162f8c208ea9130dbe20a99a76e1" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>update</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1a33149b38d0c384a6ea3e324962847ef8" prot="private" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>update_singular_flags</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a6bb9614b2635f9935e7cb8816074a2ef" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>updateCorBC</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a28d4c00dc8448c2c8f10dc519a42ae0f" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>updateSolBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a685caf14f09300309d306d01150eae9a" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>verbose</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a7c044db51cc603481135fb0d75e43e90" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>xdoty</name></member>
      <member refid="classamrex_1_1MLABecLaplacianT_1a47837f968e3a94bac33ad1c6aee62d63" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>~MLABecLaplacianT</name></member>
      <member refid="classamrex_1_1MLCellABecLapT_1ad4713655e99b1cd1f480c36376be40f7" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>~MLCellABecLapT</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1aaa89b0307d84d1687ece7880403c5689" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>~MLCellLinOpT</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ac7718af80beb24d049ffad1239e31384" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>~MLLinOpT</name></member>
      <member refid="classamrex_1_1MLTensorOp_1aba85f264ee18002e4005820da491f9c2" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>~MLTensorOp</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
