<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classamrex_1_1MLTensorOp" kind="class" language="C++" prot="public">
    <compoundname>amrex::MLTensorOp</compoundname>
    <basecompoundref refid="classamrex_1_1MLABecLaplacian" prot="public" virt="non-virtual">amrex::MLABecLaplacian</basecompoundref>
    <includes refid="AMReX__MLTensorOp_8H" local="no">AMReX_MLTensorOp.H</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classamrex_1_1MLTensorOp_1a15ebbe140a2faea1fccb3b4bb71ddb60" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::MLTensorOp::m_needs_update</definition>
        <argsstring></argsstring>
        <name>m_needs_update</name>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.H" line="94" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.H" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLTensorOp_1a0aebce2114e6c519b7648b87daceeb11" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::MLTensorOp::m_has_kappa</definition>
        <argsstring></argsstring>
        <name>m_has_kappa</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.H" line="96" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.H" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLTensorOp_1aa056265afa394abc77bb3fa40fcb96d9" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>, AMREX_SPACEDIM &gt; &gt; &gt;</type>
        <definition>Vector&lt;Vector&lt;Array&lt;MultiFab,AMREX_SPACEDIM&gt; &gt; &gt; amrex::MLTensorOp::m_kappa</definition>
        <argsstring></argsstring>
        <name>m_kappa</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.H" line="97" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.H" bodystart="97" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1MLTensorOp_1aec0e97a4db88c3f6c19526090d051853" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MLTensorOp::MLTensorOp</definition>
        <argsstring>()</argsstring>
        <name>MLTensorOp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.H" line="30" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.cpp" bodystart="12" bodyend="15"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLTensorOp_1af334ada457b300b2f6c0751555dddf4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MLTensorOp::MLTensorOp</definition>
        <argsstring>(const Vector&lt; Geometry &gt; &amp;a_geom, const Vector&lt; BoxArray &gt; &amp;a_grids, const Vector&lt; DistributionMapping &gt; &amp;a_dmap, const LPInfo &amp;a_info=LPInfo(), const Vector&lt; FabFactory&lt; FArrayBox &gt; const * &gt; &amp;a_factory={})</argsstring>
        <name>MLTensorOp</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>a_geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &gt; &amp;</type>
          <declname>a_grids</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt; &amp;</type>
          <declname>a_dmap</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1LPInfo" kindref="compound">LPInfo</ref> &amp;</type>
          <declname>a_info</declname>
          <defval><ref refid="structamrex_1_1LPInfo" kindref="compound">LPInfo</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &gt; const * &gt; &amp;</type>
          <declname>a_factory</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.H" line="31" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.cpp" bodystart="17" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLTensorOp_1ad97ed45bc2dd179fe8870687841f9071" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MLTensorOp::MLTensorOp</definition>
        <argsstring>(const Vector&lt; Geometry &gt; &amp;a_geom, const Vector&lt; BoxArray &gt; &amp;a_grids, const Vector&lt; DistributionMapping &gt; &amp;a_dmap, const Vector&lt; iMultiFab const * &gt; &amp;a_overset_mask, const LPInfo &amp;a_info=LPInfo(), const Vector&lt; FabFactory&lt; FArrayBox &gt; const * &gt; &amp;a_factory={})</argsstring>
        <name>MLTensorOp</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>a_geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &gt; &amp;</type>
          <declname>a_grids</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt; &amp;</type>
          <declname>a_dmap</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> const * &gt; &amp;</type>
          <declname>a_overset_mask</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1LPInfo" kindref="compound">LPInfo</ref> &amp;</type>
          <declname>a_info</declname>
          <defval><ref refid="structamrex_1_1LPInfo" kindref="compound">LPInfo</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &gt; const * &gt; &amp;</type>
          <declname>a_factory</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.H" line="36" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.cpp" bodystart="27" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLTensorOp_1ab48223f6428f6da2f57b9912d9d9b423" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>amrex::MLTensorOp::~MLTensorOp</definition>
        <argsstring>()</argsstring>
        <name>~MLTensorOp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.H" line="42" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.cpp" bodystart="38" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLTensorOp_1a6025988cdea4ad252498aa0e0af1de94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MLTensorOp::MLTensorOp</definition>
        <argsstring>(const MLTensorOp &amp;)=delete</argsstring>
        <name>MLTensorOp</name>
        <param>
          <type>const <ref refid="classamrex_1_1MLTensorOp" kindref="compound">MLTensorOp</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.H" line="44" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLTensorOp_1a2cf6f2e2ef6c4cceed3f3a67cf4e1201" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MLTensorOp::MLTensorOp</definition>
        <argsstring>(MLTensorOp &amp;&amp;)=delete</argsstring>
        <name>MLTensorOp</name>
        <param>
          <type><ref refid="classamrex_1_1MLTensorOp" kindref="compound">MLTensorOp</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.H" line="45" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLTensorOp_1a3879f323dc12422e979cd5c1db513481" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1MLTensorOp" kindref="compound">MLTensorOp</ref> &amp;</type>
        <definition>MLTensorOp&amp; amrex::MLTensorOp::operator=</definition>
        <argsstring>(const MLTensorOp &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classamrex_1_1MLTensorOp" kindref="compound">MLTensorOp</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.H" line="46" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLTensorOp_1a20b3da7c94a567c736a703979565eb7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1MLTensorOp" kindref="compound">MLTensorOp</ref> &amp;</type>
        <definition>MLTensorOp&amp; amrex::MLTensorOp::operator=</definition>
        <argsstring>(MLTensorOp &amp;&amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1MLTensorOp" kindref="compound">MLTensorOp</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.H" line="47" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLTensorOp_1a4aa37d8953aeb1df96051653df3769c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLTensorOp::define</definition>
        <argsstring>(const Vector&lt; Geometry &gt; &amp;a_geom, const Vector&lt; BoxArray &gt; &amp;a_grids, const Vector&lt; DistributionMapping &gt; &amp;a_dmap, const LPInfo &amp;a_info=LPInfo(), const Vector&lt; FabFactory&lt; FArrayBox &gt; const * &gt; &amp;a_factory={})</argsstring>
        <name>define</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>a_geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &gt; &amp;</type>
          <declname>a_grids</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt; &amp;</type>
          <declname>a_dmap</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1LPInfo" kindref="compound">LPInfo</ref> &amp;</type>
          <declname>a_info</declname>
          <defval><ref refid="structamrex_1_1LPInfo" kindref="compound">LPInfo</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &gt; const * &gt; &amp;</type>
          <declname>a_factory</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.H" line="49" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.cpp" bodystart="42" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLTensorOp_1a32da39624352ed60dc69765cd9fa3643" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLTensorOp::define</definition>
        <argsstring>(const Vector&lt; Geometry &gt; &amp;a_geom, const Vector&lt; BoxArray &gt; &amp;a_grids, const Vector&lt; DistributionMapping &gt; &amp;a_dmap, const Vector&lt; iMultiFab const * &gt; &amp;a_overset_mask, const LPInfo &amp;a_info=LPInfo(), const Vector&lt; FabFactory&lt; FArrayBox &gt; const * &gt; &amp;a_factory={})</argsstring>
        <name>define</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>a_geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &gt; &amp;</type>
          <declname>a_grids</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt; &amp;</type>
          <declname>a_dmap</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> const * &gt; &amp;</type>
          <declname>a_overset_mask</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1LPInfo" kindref="compound">LPInfo</ref> &amp;</type>
          <declname>a_info</declname>
          <defval><ref refid="structamrex_1_1LPInfo" kindref="compound">LPInfo</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &gt; const * &gt; &amp;</type>
          <declname>a_factory</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.H" line="55" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.cpp" bodystart="69" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLTensorOp_1af6d48bd951e581c0766cec582a9c85a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLTensorOp::setShearViscosity</definition>
        <argsstring>(int amrlev, const Array&lt; MultiFab const *, AMREX_SPACEDIM &gt; &amp;eta)</argsstring>
        <name>setShearViscosity</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> const *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>eta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.H" line="62" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.cpp" bodystart="97" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLTensorOp_1abae8fb16d0725b3c3c728079359e8d4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLTensorOp::setShearViscosity</definition>
        <argsstring>(int amrlev, Real eta)</argsstring>
        <name>setShearViscosity</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>eta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.H" line="63" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.cpp" bodystart="103" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLTensorOp_1a89529e15aedc1628aaa544645a9a8b39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLTensorOp::setBulkViscosity</definition>
        <argsstring>(int amrlev, const Array&lt; MultiFab const *, AMREX_SPACEDIM &gt; &amp;kappa)</argsstring>
        <name>setBulkViscosity</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> const *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>kappa</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.H" line="64" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.cpp" bodystart="109" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLTensorOp_1acbe31c08085ba7b2e1b6ae53e22b688c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLTensorOp::setBulkViscosity</definition>
        <argsstring>(int amrlev, Real kappa)</argsstring>
        <name>setBulkViscosity</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>kappa</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.H" line="65" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.cpp" bodystart="118" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLTensorOp_1afc580050d59cf53595c895acb8893034" prot="public" static="no" const="yes" explicit="no" inline="yes" final="yes" virt="virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>virtual int amrex::MLTensorOp::getNComp</definition>
        <argsstring>() const final override</argsstring>
        <name>getNComp</name>
        <reimplements refid="classamrex_1_1MLABecLaplacian_1a315f85d5190597877f1c42a08a58ddd8">getNComp</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.H" line="67" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.H" bodystart="67" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLTensorOp_1aa6606a8be71e504fc8e8e7e61a9393ec" prot="public" static="no" const="yes" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool amrex::MLTensorOp::isCrossStencil</definition>
        <argsstring>() const final override</argsstring>
        <name>isCrossStencil</name>
        <reimplements refid="classamrex_1_1MLCellLinOp_1af6f760fa4c14171371737ac10d0e2c02">isCrossStencil</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.H" line="69" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.H" bodystart="69" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLTensorOp_1a7a79d02f26f61d67c0aed26d314b8a03" prot="public" static="no" const="yes" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool amrex::MLTensorOp::isTensorOp</definition>
        <argsstring>() const final override</argsstring>
        <name>isTensorOp</name>
        <reimplements refid="classamrex_1_1MLCellLinOp_1a0152cd38e35f6a41dc3da2814b910f2b">isTensorOp</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.H" line="70" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.H" bodystart="70" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLTensorOp_1a65030fea7dc90010188af0e7b33fb6ab" prot="public" static="no" const="yes" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool amrex::MLTensorOp::needsUpdate</definition>
        <argsstring>() const final override</argsstring>
        <name>needsUpdate</name>
        <reimplements refid="classamrex_1_1MLABecLaplacian_1acf27ddd13356c7c675ec2527d8e80223">needsUpdate</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.H" line="72" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.H" bodystart="72" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLTensorOp_1a2974162f8c208ea9130dbe20a99a76e1" prot="public" static="no" const="no" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex::MLTensorOp::update</definition>
        <argsstring>() final override</argsstring>
        <name>update</name>
        <reimplements refid="classamrex_1_1MLABecLaplacian_1a7e612906bd561e6b5db7ce47ea0e7d14">update</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.H" line="75" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.H" bodystart="75" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLTensorOp_1a7d6264e24870296cd61ca4ce20b118df" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLTensorOp::prepareForSolve</definition>
        <argsstring>() final override</argsstring>
        <name>prepareForSolve</name>
        <reimplements refid="classamrex_1_1MLABecLaplacian_1a627779ad059394a0bd2b3bede177e12a">prepareForSolve</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.H" line="79" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.cpp" bodystart="129" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLTensorOp_1abb68b7b79b8bb488979e6b25b05f6d82" prot="public" static="no" const="yes" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool amrex::MLTensorOp::isSingular</definition>
        <argsstring>(int) const final override</argsstring>
        <name>isSingular</name>
        <reimplements refid="classamrex_1_1MLABecLaplacian_1a4304750fa837f09df7c0d400b147fe2f">isSingular</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.H" line="80" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.H" bodystart="80" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLTensorOp_1a1ebac1979e56e1354afa11b556bf074a" prot="public" static="no" const="yes" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool amrex::MLTensorOp::isBottomSingular</definition>
        <argsstring>() const final override</argsstring>
        <name>isBottomSingular</name>
        <reimplements refid="classamrex_1_1MLABecLaplacian_1aa0ead02bedca70191f223b455654b49b">isBottomSingular</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.H" line="81" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.H" bodystart="81" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLTensorOp_1ab27ab49bb00008a08ebb46ae961492a9" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLTensorOp::apply</definition>
        <argsstring>(int amrlev, int mglev, MultiFab &amp;out, MultiFab &amp;in, BCMode bc_mode, StateMode s_mode, const MLMGBndry *bndry=nullptr) const final override</argsstring>
        <name>apply</name>
        <reimplements refid="classamrex_1_1MLCellLinOp_1a62ea55fae7824c00b3237cf57616dd1d">apply</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLLinOp_1a5aa01a1ef6b0b3a471f02f65ae4b4884" kindref="member">BCMode</ref></type>
          <declname>bc_mode</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLLinOp_1a1f2821b4a51da49d862dae1e757bb8c3" kindref="member">StateMode</ref></type>
          <declname>s_mode</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MLMGBndry" kindref="compound">MLMGBndry</ref> *</type>
          <declname>bndry</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.H" line="83" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.cpp" bodystart="201" bodyend="334"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLTensorOp_1ab07ec8381bce1e90f83ecf92d6581547" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLTensorOp::compFlux</definition>
        <argsstring>(int amrlev, const Array&lt; MultiFab *, AMREX_SPACEDIM &gt; &amp;fluxes, MultiFab &amp;sol, Location loc) const override</argsstring>
        <name>compFlux</name>
        <reimplements refid="classamrex_1_1MLCellLinOp_1acd6c78c0e6307234b1539ba81caadb9c">compFlux</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>fluxes</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLLinOp_1a07cd0a7c45d6542e33a5d97aefe5bab3" kindref="member">Location</ref></type>
          <declname>loc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.H" line="86" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp_grad.cpp" bodystart="7" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLTensorOp_1a365317f94f2141fd23b7e865996bcb58" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLTensorOp::compVelGrad</definition>
        <argsstring>(int amrlev, const Array&lt; MultiFab *, AMREX_SPACEDIM &gt; &amp;fluxes, MultiFab &amp;sol, Location loc) const</argsstring>
        <name>compVelGrad</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>fluxes</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLLinOp_1a07cd0a7c45d6542e33a5d97aefe5bab3" kindref="member">Location</ref></type>
          <declname>loc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.H" line="89" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp_grad.cpp" bodystart="133" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLTensorOp_1afd1fbd89d6fdbe0014a9efeaf4e6ce06" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLTensorOp::applyBCTensor</definition>
        <argsstring>(int amrlev, int mglev, MultiFab &amp;vel, BCMode bc_mode, StateMode s_mode, const MLMGBndry *bndry) const</argsstring>
        <name>applyBCTensor</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLLinOp_1a5aa01a1ef6b0b3a471f02f65ae4b4884" kindref="member">BCMode</ref></type>
          <declname>bc_mode</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLLinOp_1a1f2821b4a51da49d862dae1e757bb8c3" kindref="member">StateMode</ref></type>
          <declname>s_mode</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MLMGBndry" kindref="compound">MLMGBndry</ref> *</type>
          <declname>bndry</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.H" line="103" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.cpp" bodystart="337" bodyend="448"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classamrex_1_1MLTensorOp_1aec6c60aa0be2285afbcb0ea8b13efe93" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLTensorOp::setBCoeffs</definition>
        <argsstring>(int amrlev, const Array&lt; MultiFab const *, AMREX_SPACEDIM &gt; &amp;beta)=delete</argsstring>
        <name>setBCoeffs</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> const *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>beta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.H" line="99" column="10"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>amrex::MLTensorOp</label>
        <link refid="classamrex_1_1MLTensorOp"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>amrex::MLABecLaplacian</label>
        <link refid="classamrex_1_1MLABecLaplacian"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>amrex::MLLinOp</label>
        <link refid="classamrex_1_1MLLinOp"/>
      </node>
      <node id="3">
        <label>amrex::MLCellABecLap</label>
        <link refid="classamrex_1_1MLCellABecLap"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>amrex::MLCellLinOp</label>
        <link refid="classamrex_1_1MLCellLinOp"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="67">
        <label>amrex::BaseFab&lt; Real &gt;</label>
        <link refid="classamrex_1_1BaseFab"/>
        <childnode refid="68" relation="public-inheritance">
        </childnode>
        <childnode refid="41" relation="usage">
          <edgelabel>domain</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>dptr</edgelabel>
        </childnode>
      </node>
      <node id="75">
        <label>std::vector&lt; MPI_Status, std::allocator&lt; MPI_Status &gt; &gt;</label>
        <childnode refid="8" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>amrex::MLTensorOp</label>
        <link refid="classamrex_1_1MLTensorOp"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="114" relation="usage">
          <edgelabel>m_kappa</edgelabel>
        </childnode>
      </node>
      <node id="51">
        <label>amrex::BoxList</label>
        <link refid="classamrex_1_1BoxList"/>
        <childnode refid="39" relation="usage">
          <edgelabel>m_lbox</edgelabel>
        </childnode>
        <childnode refid="42" relation="usage">
          <edgelabel>btype</edgelabel>
        </childnode>
      </node>
      <node id="70">
        <label>amrex::ArenaInfo</label>
        <link refid="structamrex_1_1ArenaInfo"/>
      </node>
      <node id="57">
        <label>amrex::BATindexType</label>
        <link refid="structamrex_1_1BATindexType"/>
        <childnode refid="42" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
      </node>
      <node id="72">
        <label>std::unique_ptr&lt; amrex::FBData&lt; FArrayBox &gt; &gt;</label>
        <childnode refid="73" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="40">
        <label>std::vector&lt; amrex::Box, std::allocator&lt; amrex::Box &gt; &gt;</label>
        <childnode refid="8" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="107">
        <label>std::vector&lt; amrex::YAFluxRegisterT, std::allocator&lt; amrex::YAFluxRegisterT &gt; &gt;</label>
        <childnode refid="8" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="59">
        <label>amrex::BATindexType_coarsenRatio</label>
        <link refid="structamrex_1_1BATindexType__coarsenRatio"/>
        <childnode refid="15" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
        </childnode>
        <childnode refid="42" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
      </node>
      <node id="31">
        <label>K</label>
      </node>
      <node id="58">
        <label>amrex::BATnull</label>
        <link refid="structamrex_1_1BATnull"/>
      </node>
      <node id="15">
        <label>amrex::IntVect</label>
        <link refid="classamrex_1_1IntVect"/>
        <childnode refid="15" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>T</label>
      </node>
      <node id="28">
        <label>amrex::FabArrayBase::CommMetaData</label>
        <link refid="structamrex_1_1FabArrayBase_1_1CommMetaData"/>
        <childnode refid="29" relation="usage">
          <edgelabel>m_RcvTags</edgelabel>
          <edgelabel>m_SndTags</edgelabel>
        </childnode>
        <childnode refid="32" relation="usage">
          <edgelabel>m_LocTags</edgelabel>
        </childnode>
      </node>
      <node id="96">
        <label>amrex::Vector&lt; std::unique_ptr&lt; amrex::MultiFab &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="97" relation="public-inheritance">
        </childnode>
      </node>
      <node id="77">
        <label>std::unique_ptr&lt; amrex::FabArray&lt; FArrayBox &gt; &gt;</label>
        <childnode refid="17" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="19">
        <label>amrex::FabFactory&lt; FArrayBox &gt;</label>
        <link refid="classamrex_1_1FabFactory"/>
      </node>
      <node id="12">
        <label>Real</label>
      </node>
      <node id="33">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="8" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="63">
        <label>amrex::Vector&lt; MPI_Request &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="64" relation="public-inheritance">
        </childnode>
      </node>
      <node id="81">
        <label>amrex::MultiArray4&lt; value_type &gt;</label>
        <link refid="structamrex_1_1MultiArray4"/>
        <childnode refid="82" relation="usage">
          <edgelabel>hp</edgelabel>
          <edgelabel>dp</edgelabel>
        </childnode>
      </node>
      <node id="68">
        <label>amrex::DataAllocator</label>
        <link refid="structamrex_1_1DataAllocator"/>
        <childnode refid="69" relation="usage">
          <edgelabel>m_arena</edgelabel>
        </childnode>
      </node>
      <node id="37">
        <label>std::unordered_map&lt; IntVect, std::vector&lt; int &gt;, IntVect::shift_hasher &gt;</label>
        <childnode refid="15" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="38" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="99">
        <label>std::vector&lt; std::unique_ptr&lt; amrex::BndryRegisterT &gt;, std::allocator&lt; std::unique_ptr&lt; amrex::BndryRegisterT &gt; &gt; &gt;</label>
        <childnode refid="8" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="113">
        <label>std::vector&lt; amrex::Vector&lt; amrex::MultiFab &gt;, std::allocator&lt; amrex::Vector&lt; amrex::MultiFab &gt; &gt; &gt;</label>
        <childnode refid="8" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="86">
        <label>std::vector&lt; Array&lt; BCType, AMREX_SPACEDIM &gt;, std::allocator&lt; Array&lt; BCType, AMREX_SPACEDIM &gt; &gt; &gt;</label>
        <childnode refid="8" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="79">
        <label>std::vector&lt; std::string, std::allocator&lt; std::string &gt; &gt;</label>
        <childnode refid="8" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="20">
        <label>amrex::MultiArray4&lt; value_type const &gt;</label>
        <link refid="structamrex_1_1MultiArray4"/>
        <childnode refid="21" relation="usage">
          <edgelabel>hp</edgelabel>
          <edgelabel>dp</edgelabel>
        </childnode>
      </node>
      <node id="82">
        <label>amrex::Array4&lt; value_type &gt;</label>
        <link refid="structamrex_1_1Array4"/>
        <childnode refid="22" relation="usage">
          <edgelabel>begin</edgelabel>
          <edgelabel>end</edgelabel>
        </childnode>
      </node>
      <node id="13">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::BoxArray &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="14" relation="public-inheritance">
        </childnode>
      </node>
      <node id="14">
        <label>std::vector&lt; amrex::Vector&lt; amrex::BoxArray &gt;, std::allocator&lt; amrex::Vector&lt; amrex::BoxArray &gt; &gt; &gt;</label>
        <childnode refid="8" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>amrex::MLABecLaplacian</label>
        <link refid="classamrex_1_1MLABecLaplacian"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="112" relation="usage">
          <edgelabel>m_a_coeffs</edgelabel>
        </childnode>
        <childnode refid="45" relation="usage">
          <edgelabel>m_is_singular</edgelabel>
        </childnode>
        <childnode refid="114" relation="usage">
          <edgelabel>m_b_coeffs</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>m_a_scalar</edgelabel>
          <edgelabel>m_b_scalar</edgelabel>
        </childnode>
      </node>
      <node id="30">
        <label>std::map&lt; K, T &gt;</label>
        <childnode refid="31" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="69">
        <label>amrex::Arena</label>
        <link refid="classamrex_1_1Arena"/>
        <childnode refid="70" relation="usage">
          <edgelabel>arena_info</edgelabel>
        </childnode>
      </node>
      <node id="45">
        <label>amrex::Vector&lt; int &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="46" relation="public-inheritance">
        </childnode>
      </node>
      <node id="60">
        <label>amrex::Periodicity</label>
        <link refid="classamrex_1_1Periodicity"/>
        <childnode refid="15" relation="usage">
          <edgelabel>period</edgelabel>
        </childnode>
      </node>
      <node id="62">
        <label>std::vector&lt; char *, std::allocator&lt; char * &gt; &gt;</label>
        <childnode refid="8" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="73">
        <label>amrex::FBData&lt; FArrayBox &gt;</label>
        <link refid="structamrex_1_1FBData"/>
        <childnode refid="25" relation="usage">
          <edgelabel>recv_size</edgelabel>
        </childnode>
        <childnode refid="45" relation="usage">
          <edgelabel>recv_from</edgelabel>
        </childnode>
        <childnode refid="61" relation="usage">
          <edgelabel>recv_data</edgelabel>
          <edgelabel>send_data</edgelabel>
        </childnode>
        <childnode refid="74" relation="usage">
          <edgelabel>recv_stat</edgelabel>
        </childnode>
        <childnode refid="63" relation="usage">
          <edgelabel>send_reqs</edgelabel>
          <edgelabel>recv_reqs</edgelabel>
        </childnode>
        <childnode refid="76" relation="usage">
          <edgelabel>fb</edgelabel>
        </childnode>
      </node>
      <node id="94">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::BndryRegisterT &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="95" relation="public-inheritance">
        </childnode>
      </node>
      <node id="102">
        <label>amrex::Vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::MLCellLinOp::BndryCondLoc &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="103" relation="public-inheritance">
        </childnode>
      </node>
      <node id="55">
        <label>amrex::Orientation</label>
        <link refid="classamrex_1_1Orientation"/>
      </node>
      <node id="36">
        <label>amrex::BARef</label>
        <link refid="structamrex_1_1BARef"/>
        <childnode refid="15" relation="usage">
          <edgelabel>crsn</edgelabel>
        </childnode>
        <childnode refid="37" relation="usage">
          <edgelabel>hash</edgelabel>
        </childnode>
        <childnode refid="39" relation="usage">
          <edgelabel>m_abox</edgelabel>
        </childnode>
        <childnode refid="41" relation="usage">
          <edgelabel>bbox</edgelabel>
        </childnode>
      </node>
      <node id="103">
        <label>std::vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::MLCellLinOp::BndryCondLoc &gt; &gt;, std::allocator&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::MLCellLinOp::BndryCondLoc &gt; &gt; &gt; &gt;</label>
        <childnode refid="8" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="76">
        <label>amrex::FabArrayBase::FB</label>
        <link refid="structamrex_1_1FabArrayBase_1_1FB"/>
        <childnode refid="28" relation="public-inheritance">
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>m_ngrow</edgelabel>
          <edgelabel>m_crse_ratio</edgelabel>
        </childnode>
        <childnode refid="42" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
        <childnode refid="60" relation="usage">
          <edgelabel>m_period</edgelabel>
        </childnode>
      </node>
      <node id="61">
        <label>amrex::Vector&lt; char * &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="62" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>amrex::Vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::FabFactory&lt; amrex::FArrayBox &gt; &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="52">
        <label>amrex::BATransformer</label>
        <link refid="structamrex_1_1BATransformer"/>
        <childnode refid="53" relation="usage">
          <edgelabel>m_op</edgelabel>
        </childnode>
      </node>
      <node id="98">
        <label>amrex::Vector&lt; std::unique_ptr&lt; amrex::BndryRegisterT &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="99" relation="public-inheritance">
        </childnode>
      </node>
      <node id="89">
        <label>std::unique_ptr&lt; amrex::MLLinOp::CommContainer &gt;</label>
        <childnode refid="90" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="10">
        <label>std::vector&lt; amrex::Vector&lt; amrex::Geometry &gt;, std::allocator&lt; amrex::Vector&lt; amrex::Geometry &gt; &gt; &gt;</label>
        <childnode refid="8" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="56">
        <label>amrex::BATcoarsenRatio</label>
        <link refid="structamrex_1_1BATcoarsenRatio"/>
        <childnode refid="15" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
        </childnode>
      </node>
      <node id="80">
        <label>amrex::FabArray&lt; FAB &gt;::ShMem</label>
        <link refid="structamrex_1_1FabArray_1_1ShMem"/>
      </node>
      <node id="101">
        <label>std::vector&lt; amrex::Vector&lt; Real &gt;, std::allocator&lt; amrex::Vector&lt; Real &gt; &gt; &gt;</label>
        <childnode refid="8" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="53">
        <label>amrex::BATransformer::BATOp</label>
        <link refid="unionamrex_1_1BATransformer_1_1BATOp"/>
        <childnode refid="54" relation="usage">
          <edgelabel>m_bndryReg</edgelabel>
        </childnode>
        <childnode refid="56" relation="usage">
          <edgelabel>m_coarsenRatio</edgelabel>
        </childnode>
        <childnode refid="57" relation="usage">
          <edgelabel>m_indexType</edgelabel>
        </childnode>
        <childnode refid="58" relation="usage">
          <edgelabel>m_null</edgelabel>
        </childnode>
        <childnode refid="59" relation="usage">
          <edgelabel>m_indexType_coarsenRatio</edgelabel>
        </childnode>
      </node>
      <node id="65">
        <label>std::vector&lt; FArrayBox * &gt;</label>
        <childnode refid="66" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="27">
        <label>amrex::FabArrayBase::CPC</label>
        <link refid="structamrex_1_1FabArrayBase_1_1CPC"/>
        <childnode refid="28" relation="public-inheritance">
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>m_srcng</edgelabel>
          <edgelabel>m_dstng</edgelabel>
        </childnode>
        <childnode refid="34" relation="usage">
          <edgelabel>m_dstbdk</edgelabel>
          <edgelabel>m_srcbdk</edgelabel>
        </childnode>
        <childnode refid="48" relation="usage">
          <edgelabel>m_srcba</edgelabel>
          <edgelabel>m_dstba</edgelabel>
        </childnode>
        <childnode refid="60" relation="usage">
          <edgelabel>m_period</edgelabel>
        </childnode>
      </node>
      <node id="9">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::Geometry &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="10" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11">
        <label>amrex::RealVect</label>
        <link refid="classamrex_1_1RealVect"/>
        <childnode refid="11" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>vect</edgelabel>
        </childnode>
      </node>
      <node id="22">
        <label>amrex::Dim3</label>
        <link refid="structamrex_1_1Dim3"/>
      </node>
      <node id="83">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::DistributionMapping &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="84" relation="public-inheritance">
        </childnode>
      </node>
      <node id="115">
        <label>std::vector&lt; amrex::Vector&lt; Array&lt; amrex::MultiFab, AMREX_SPACEDIM &gt; &gt;, std::allocator&lt; amrex::Vector&lt; Array&lt; amrex::MultiFab, AMREX_SPACEDIM &gt; &gt; &gt; &gt;</label>
        <childnode refid="8" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="87">
        <label>amrex::Vector&lt; amrex::IntVect &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="88" relation="public-inheritance">
        </childnode>
      </node>
      <node id="97">
        <label>std::vector&lt; std::unique_ptr&lt; amrex::MultiFab &gt;, std::allocator&lt; std::unique_ptr&lt; amrex::MultiFab &gt; &gt; &gt;</label>
        <childnode refid="8" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="64">
        <label>std::vector&lt; MPI_Request, std::allocator&lt; MPI_Request &gt; &gt;</label>
        <childnode refid="8" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="46">
        <label>std::vector&lt; int, std::allocator&lt; int &gt; &gt;</label>
        <childnode refid="8" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="48">
        <label>amrex::BoxArray</label>
        <link refid="classamrex_1_1BoxArray"/>
        <childnode refid="49" relation="usage">
          <edgelabel>m_ref</edgelabel>
        </childnode>
        <childnode refid="50" relation="usage">
          <edgelabel>m_simplified_list</edgelabel>
        </childnode>
        <childnode refid="52" relation="usage">
          <edgelabel>m_bat</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>amrex::MLLinOp</label>
        <link refid="classamrex_1_1MLLinOp"/>
        <childnode refid="6" relation="usage">
          <edgelabel>m_factory</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>m_geom</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>m_coarse_bc_loc</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>m_grids</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>m_ixtype</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>m_coarse_data_for_bc</edgelabel>
        </childnode>
        <childnode refid="45" relation="usage">
          <edgelabel>m_domain_covered</edgelabel>
          <edgelabel>m_amr_ref_ratio</edgelabel>
          <edgelabel>m_num_mg_levels</edgelabel>
        </childnode>
        <childnode refid="83" relation="usage">
          <edgelabel>m_dmap</edgelabel>
        </childnode>
        <childnode refid="85" relation="usage">
          <edgelabel>m_hibc</edgelabel>
          <edgelabel>m_lobc_orig</edgelabel>
          <edgelabel>m_lobc</edgelabel>
          <edgelabel>m_hibc_orig</edgelabel>
        </childnode>
        <childnode refid="87" relation="usage">
          <edgelabel>mg_coarsen_ratio_vec</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>m_parent</edgelabel>
        </childnode>
        <childnode refid="89" relation="usage">
          <edgelabel>m_raii_comm</edgelabel>
        </childnode>
        <childnode refid="91" relation="usage">
          <edgelabel>info</edgelabel>
        </childnode>
      </node>
      <node id="112">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::MultiFab &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="113" relation="public-inheritance">
        </childnode>
      </node>
      <node id="21">
        <label>amrex::Array4&lt; value_type const &gt;</label>
        <link refid="structamrex_1_1Array4"/>
        <childnode refid="22" relation="usage">
          <edgelabel>begin</edgelabel>
          <edgelabel>end</edgelabel>
        </childnode>
      </node>
      <node id="105">
        <label>std::vector&lt; amrex::Vector&lt; Array&lt; amrex::MultiMask, 2 *AMREX_SPACEDIM &gt; &gt;, std::allocator&lt; amrex::Vector&lt; Array&lt; amrex::MultiMask, 2 *AMREX_SPACEDIM &gt; &gt; &gt; &gt;</label>
        <childnode refid="8" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="41">
        <label>amrex::Box</label>
        <link refid="classamrex_1_1Box"/>
        <childnode refid="15" relation="usage">
          <edgelabel>bigend</edgelabel>
          <edgelabel>smallend</edgelabel>
        </childnode>
        <childnode refid="42" relation="usage">
          <edgelabel>btype</edgelabel>
        </childnode>
      </node>
      <node id="92">
        <label>amrex::Vector&lt; std::unique_ptr&lt; amrex::iMultiFab &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="93" relation="public-inheritance">
        </childnode>
      </node>
      <node id="85">
        <label>amrex::Vector&lt; Array&lt; BCType, AMREX_SPACEDIM &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="86" relation="public-inheritance">
        </childnode>
      </node>
      <node id="23">
        <label>std::unique_ptr&lt; amrex::PCData&lt; FArrayBox &gt; &gt;</label>
        <childnode refid="24" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="49">
        <label>std::shared_ptr&lt; amrex::BARef &gt;</label>
        <childnode refid="36" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="43">
        <label>amrex::DistributionMapping::RefID</label>
        <link refid="structamrex_1_1DistributionMapping_1_1RefID"/>
        <childnode refid="44" relation="usage">
          <edgelabel>data</edgelabel>
        </childnode>
      </node>
      <node id="106">
        <label>amrex::Vector&lt; amrex::YAFluxRegisterT &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="107" relation="public-inheritance">
        </childnode>
      </node>
      <node id="74">
        <label>amrex::Vector&lt; MPI_Status &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="75" relation="public-inheritance">
        </childnode>
      </node>
      <node id="91">
        <label>amrex::LPInfo</label>
        <link refid="structamrex_1_1LPInfo"/>
      </node>
      <node id="54">
        <label>amrex::BATbndryReg</label>
        <link refid="structamrex_1_1BATbndryReg"/>
        <childnode refid="15" relation="usage">
          <edgelabel>m_doihi</edgelabel>
          <edgelabel>m_doilo</edgelabel>
          <edgelabel>m_hishft</edgelabel>
          <edgelabel>m_crse_ratio</edgelabel>
          <edgelabel>m_loshft</edgelabel>
        </childnode>
        <childnode refid="55" relation="usage">
          <edgelabel>m_face</edgelabel>
        </childnode>
        <childnode refid="42" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
      </node>
      <node id="29">
        <label>std::unique_ptr&lt; MapOfCopyComTagContainers &gt;</label>
        <childnode refid="30" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="90">
        <label>amrex::MLLinOp::CommContainer</label>
        <link refid="structamrex_1_1MLLinOp_1_1CommContainer"/>
      </node>
      <node id="109">
        <label>std::vector&lt; std::unique_ptr&lt; amrex::MLMGBndry &gt;, std::allocator&lt; std::unique_ptr&lt; amrex::MLMGBndry &gt; &gt; &gt;</label>
        <childnode refid="8" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>amrex::MLCellABecLap</label>
        <link refid="classamrex_1_1MLCellABecLap"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="110" relation="usage">
          <edgelabel>m_overset_mask</edgelabel>
        </childnode>
        <childnode refid="91" relation="usage">
          <edgelabel>m_lpinfo_arg</edgelabel>
        </childnode>
      </node>
      <node id="42">
        <label>amrex::IndexType</label>
        <link refid="classamrex_1_1IndexType"/>
      </node>
      <node id="44">
        <label>amrex::DistributionMapping::Ref</label>
        <link refid="structamrex_1_1DistributionMapping_1_1Ref"/>
        <childnode refid="45" relation="usage">
          <edgelabel>m_index_array</edgelabel>
          <edgelabel>m_pmap</edgelabel>
        </childnode>
        <childnode refid="47" relation="usage">
          <edgelabel>m_ownership</edgelabel>
        </childnode>
      </node>
      <node id="78">
        <label>amrex::Vector&lt; std::string &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="79" relation="public-inheritance">
        </childnode>
      </node>
      <node id="71">
        <label>amrex::FABio</label>
        <link refid="classamrex_1_1FABio"/>
      </node>
      <node id="110">
        <label>amrex::Vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::iMultiFab &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="111" relation="public-inheritance">
        </childnode>
      </node>
      <node id="34">
        <label>amrex::FabArrayBase::BDKey</label>
        <link refid="structamrex_1_1FabArrayBase_1_1BDKey"/>
        <childnode refid="35" relation="usage">
          <edgelabel>m_ba_id</edgelabel>
        </childnode>
        <childnode refid="43" relation="usage">
          <edgelabel>m_dm_id</edgelabel>
        </childnode>
      </node>
      <node id="88">
        <label>std::vector&lt; amrex::IntVect, std::allocator&lt; amrex::IntVect &gt; &gt;</label>
        <childnode refid="8" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="104">
        <label>amrex::Vector&lt; amrex::Vector&lt; Array&lt; amrex::MultiMask, 2 *AMREX_SPACEDIM &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="105" relation="public-inheritance">
        </childnode>
      </node>
      <node id="47">
        <label>std::vector&lt; bool &gt;</label>
      </node>
      <node id="18">
        <label>std::unique_ptr&lt; amrex::FabFactory&lt; FArrayBox &gt; &gt;</label>
        <childnode refid="19" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="16">
        <label>amrex::MultiFab</label>
        <link refid="classamrex_1_1MultiFab"/>
        <childnode refid="17" relation="public-inheritance">
        </childnode>
      </node>
      <node id="93">
        <label>std::vector&lt; std::unique_ptr&lt; amrex::iMultiFab &gt;, std::allocator&lt; std::unique_ptr&lt; amrex::iMultiFab &gt; &gt; &gt;</label>
        <childnode refid="8" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="50">
        <label>std::shared_ptr&lt; amrex::BoxList &gt;</label>
        <childnode refid="51" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>amrex::MLCellLinOp</label>
        <link refid="classamrex_1_1MLCellLinOp"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="92" relation="usage">
          <edgelabel>m_norm_fine_mask</edgelabel>
        </childnode>
        <childnode refid="94" relation="usage">
          <edgelabel>m_undrrelxr</edgelabel>
        </childnode>
        <childnode refid="96" relation="usage">
          <edgelabel>m_robin_bcval</edgelabel>
        </childnode>
        <childnode refid="98" relation="usage">
          <edgelabel>m_crse_sol_br</edgelabel>
          <edgelabel>m_crse_cor_br</edgelabel>
        </childnode>
        <childnode refid="100" relation="usage">
          <edgelabel>m_volinv</edgelabel>
        </childnode>
        <childnode refid="102" relation="usage">
          <edgelabel>m_bcondloc</edgelabel>
        </childnode>
        <childnode refid="104" relation="usage">
          <edgelabel>m_maskvals</edgelabel>
        </childnode>
        <childnode refid="106" relation="usage">
          <edgelabel>m_fluxreg</edgelabel>
        </childnode>
        <childnode refid="108" relation="usage">
          <edgelabel>m_bndry_sol</edgelabel>
          <edgelabel>m_bndry_cor</edgelabel>
        </childnode>
      </node>
      <node id="66">
        <label>amrex::FArrayBox</label>
        <link refid="classamrex_1_1FArrayBox"/>
        <childnode refid="67" relation="public-inheritance">
        </childnode>
        <childnode refid="71" relation="usage">
          <edgelabel>fabio</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>initval</edgelabel>
        </childnode>
      </node>
      <node id="17">
        <label>amrex::FabArray&lt; FArrayBox &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="18" relation="usage">
          <edgelabel>m_factory</edgelabel>
        </childnode>
        <childnode refid="20" relation="usage">
          <edgelabel>m_const_arrays</edgelabel>
        </childnode>
        <childnode refid="23" relation="usage">
          <edgelabel>pcd</edgelabel>
        </childnode>
        <childnode refid="65" relation="usage">
          <edgelabel>m_fabs_v</edgelabel>
        </childnode>
        <childnode refid="72" relation="usage">
          <edgelabel>fbd</edgelabel>
        </childnode>
        <childnode refid="68" relation="usage">
          <edgelabel>m_dallocator</edgelabel>
        </childnode>
        <childnode refid="77" relation="usage">
          <edgelabel>os_temp</edgelabel>
        </childnode>
        <childnode refid="78" relation="usage">
          <edgelabel>m_tags</edgelabel>
        </childnode>
        <childnode refid="80" relation="usage">
          <edgelabel>shmem</edgelabel>
        </childnode>
        <childnode refid="81" relation="usage">
          <edgelabel>m_arrays</edgelabel>
        </childnode>
      </node>
      <node id="25">
        <label>amrex::Vector&lt; std::size_t &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="26" relation="public-inheritance">
        </childnode>
      </node>
      <node id="35">
        <label>amrex::BoxArray::RefID</label>
        <link refid="structamrex_1_1BoxArray_1_1RefID"/>
        <childnode refid="36" relation="usage">
          <edgelabel>data</edgelabel>
        </childnode>
      </node>
      <node id="39">
        <label>amrex::Vector&lt; amrex::Box &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="40" relation="public-inheritance">
        </childnode>
      </node>
      <node id="24">
        <label>amrex::PCData&lt; FArrayBox &gt;</label>
        <link refid="structamrex_1_1PCData"/>
        <childnode refid="25" relation="usage">
          <edgelabel>recv_size</edgelabel>
        </childnode>
        <childnode refid="27" relation="usage">
          <edgelabel>cpc</edgelabel>
        </childnode>
        <childnode refid="45" relation="usage">
          <edgelabel>recv_from</edgelabel>
        </childnode>
        <childnode refid="61" relation="usage">
          <edgelabel>recv_data</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>src</edgelabel>
        </childnode>
        <childnode refid="63" relation="usage">
          <edgelabel>send_reqs</edgelabel>
          <edgelabel>recv_reqs</edgelabel>
        </childnode>
      </node>
      <node id="108">
        <label>amrex::Vector&lt; std::unique_ptr&lt; amrex::MLMGBndry &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="109" relation="public-inheritance">
        </childnode>
      </node>
      <node id="100">
        <label>amrex::Vector&lt; amrex::Vector&lt; Real &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="101" relation="public-inheritance">
        </childnode>
      </node>
      <node id="114">
        <label>amrex::Vector&lt; amrex::Vector&lt; Array&lt; amrex::MultiFab, AMREX_SPACEDIM &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="115" relation="public-inheritance">
        </childnode>
      </node>
      <node id="111">
        <label>std::vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::iMultiFab &gt; &gt;, std::allocator&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::iMultiFab &gt; &gt; &gt; &gt;</label>
        <childnode refid="8" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="26">
        <label>std::vector&lt; std::size_t, std::allocator&lt; std::size_t &gt; &gt;</label>
        <childnode refid="8" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="38">
        <label>std::vector&lt; int &gt;</label>
      </node>
      <node id="84">
        <label>std::vector&lt; amrex::Vector&lt; amrex::DistributionMapping &gt;, std::allocator&lt; amrex::Vector&lt; amrex::DistributionMapping &gt; &gt; &gt;</label>
        <childnode refid="8" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="95">
        <label>std::vector&lt; amrex::Vector&lt; amrex::BndryRegisterT &gt;, std::allocator&lt; amrex::Vector&lt; amrex::BndryRegisterT &gt; &gt; &gt;</label>
        <childnode refid="8" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="32">
        <label>std::unique_ptr&lt; CopyComTagsContainer &gt;</label>
        <childnode refid="33" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>std::vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::FabFactory&lt; amrex::FArrayBox &gt; &gt; &gt;, std::allocator&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::FabFactory&lt; amrex::FArrayBox &gt; &gt; &gt; &gt; &gt;</label>
        <childnode refid="8" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.H" line="27" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.H" bodystart="25" bodyend="106"/>
    <listofallmembers>
      <member refid="classamrex_1_1MLCellABecLap_1a8e19334555666cedb2a6a35a7bb3e885" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>addInhomogNeumannFlux</name></member>
      <member refid="classamrex_1_1MLLinOp_1a8effbacb86233a5334789092372a9bde" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>AMRRefRatio</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac80a224852d40e9dd01ef9e4d52cd1c9" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>AMRRefRatio</name></member>
      <member refid="classamrex_1_1MLLinOp_1a798b4eaeb4638b01352daba1ce7a5e44" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>AnyAdd</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a3efe1958435b3fde0ea3acb0f404f54e" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>AnyAverageDownAndSync</name></member>
      <member refid="classamrex_1_1MLLinOp_1a7053d4e8db13b9bc6aa1505228e42b82" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>AnyAverageDownSolutionRHS</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1af7c27ed28c0d3038c44e786416fcfa27" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>AnyAvgDownResAmr</name></member>
      <member refid="classamrex_1_1MLLinOp_1afbe1037430dd65ce6f5f90ff47fa3abf" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>AnyAvgDownResMG</name></member>
      <member refid="classamrex_1_1MLLinOp_1a0bcab258419204e22344e10166971f25" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>AnyCopy</name></member>
      <member refid="classamrex_1_1MLLinOp_1a0a60ca7809271135f39ea4294f3890ca" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>AnyCorrectionResidual</name></member>
      <member refid="classamrex_1_1MLLinOp_1aca0a26169b857efbc1bd1e424e787886" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>AnyGrowVect</name></member>
      <member refid="classamrex_1_1MLLinOp_1aebb9d5705330c057bdb1bd8800a6f430" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>AnyInterpAssignMG</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a9bc26851381c49d35f14bbcf2e0bbb75" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>AnyInterpolationAmr</name></member>
      <member refid="classamrex_1_1MLLinOp_1adbdf9aaf1ccc800c62487b24f336b502" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>AnyInterpolationMG</name></member>
      <member refid="classamrex_1_1MLLinOp_1ad40e38b311ffc4f58f39b1ada8619294" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>AnyMake</name></member>
      <member refid="classamrex_1_1MLLinOp_1a768ff0c44cdf30e07b0c9ddb0a30ffef" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>AnyMakeAlias</name></member>
      <member refid="classamrex_1_1MLLinOp_1a9f7fcc41c14f77079d509e5eb85cbfe9" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>AnyMakeCoarseAmr</name></member>
      <member refid="classamrex_1_1MLLinOp_1a4e8d808ba57a2331615f1e256cf85e4e" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>AnyMakeCoarseMG</name></member>
      <member refid="classamrex_1_1MLLinOp_1a47701945960629a5fab242da32add560" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>AnyNormInf</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1aaacf8a4f3f2c127b3ea2bb7035897b19" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>AnyNormInfMask</name></member>
      <member refid="classamrex_1_1MLLinOp_1acfd9e2b3acdcd9494d321c020b6ce98f" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>AnyParallelCopy</name></member>
      <member refid="classamrex_1_1MLLinOp_1a316bc42d433c2d77a6110ac5632324f6" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>AnyReflux</name></member>
      <member refid="classamrex_1_1MLLinOp_1ae135c931d3ceb31f1d21f06253e73658" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>AnyRestriction</name></member>
      <member refid="classamrex_1_1MLLinOp_1ad28403dda85895d123abdaf36365cf29" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>AnySetBndryToZero</name></member>
      <member refid="classamrex_1_1MLLinOp_1a8cd14b1829a52c3f9eedfc975274242d" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>AnySetToZero</name></member>
      <member refid="classamrex_1_1MLLinOp_1af6f520cd860d3be048f5bf04a219aa85" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>AnySmooth</name></member>
      <member refid="classamrex_1_1MLLinOp_1acd3c616a0a54d9367a924b3779108f8b" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>AnySolutionResidual</name></member>
      <member refid="classamrex_1_1MLTensorOp_1ab27ab49bb00008a08ebb46ae961492a9" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>apply</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1ae77f68c02a722cf55b176d17e2c49a90" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>applyBC</name></member>
      <member refid="classamrex_1_1MLTensorOp_1afd1fbd89d6fdbe0014a9efeaf4e6ce06" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>applyBCTensor</name></member>
      <member refid="classamrex_1_1MLCellABecLap_1a1776ab863b406f855c04737879f98523" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>applyInhomogNeumannTerm</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a3ecef53f14386209e60edf69cab15bb1" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>applyMetricTerm</name></member>
      <member refid="classamrex_1_1MLABecLaplacian_1a4c648c8c2131afb622bc29f4aed80f8a" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>applyMetricTermsCoeffs</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1aecf6e808caf5ecfbd519a464133f7b0b" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>applyMetricTermToMF</name></member>
      <member refid="classamrex_1_1MLCellABecLap_1a41b8fd47ae330f346ee7e5ff6b90ca62" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>applyOverset</name></member>
      <member refid="classamrex_1_1MLABecLaplacian_1ad7c506fd80192a8f76dcbac6c60f6935" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>applyRobinBCTermsCoeffs</name></member>
      <member refid="classamrex_1_1MLABecLaplacian_1a850f02af43a26190e332319b9ddb8942" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>averageDownCoeffs</name></member>
      <member refid="classamrex_1_1MLABecLaplacian_1a703ad22ae8672c91ab5c7f044530202a" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>averageDownCoeffsSameAmrLevel</name></member>
      <member refid="classamrex_1_1MLABecLaplacian_1a9f80d265602f986fc8e4a4255ff3a525" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>averageDownCoeffsToCoarseAmrLevel</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1adfefa1b34d6988c4bf97957616b61c8f" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>averageDownSolutionRHS</name></member>
      <member refid="classamrex_1_1MLLinOp_1a5aa01a1ef6b0b3a471f02f65ae4b4884" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>BCMode</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a622b7c2ecc46a6b476aba4fb470f3dcf" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>BCTuple</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac2e55c34bf6b5c0ed53d0ef6a4625a3f" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>BCType</name></member>
      <member refid="classamrex_1_1MLLinOp_1a77b33530b316399f5fb5314a846d9b7e" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>BottomCommunicator</name></member>
      <member refid="classamrex_1_1MLLinOp_1a91cf65a68d76e83272098df8829e0dca" prot="private" virt="virtual"><scope>amrex::MLTensorOp</scope><name>checkPoint</name></member>
      <member refid="classamrex_1_1MLLinOp_1a941ddfa6ec11cbd0a1c835007494b057" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>Communicator</name></member>
      <member refid="classamrex_1_1MLLinOp_1af37726771c106055867bf88ade1f65d7" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>compactify</name></member>
      <member refid="classamrex_1_1MLLinOp_1ae3dae2320c8c9e64274e8d41131187dc" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>compactify</name></member>
      <member refid="classamrex_1_1MLTensorOp_1ab07ec8381bce1e90f83ecf92d6581547" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>compFlux</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1aead98967987fb3826008fc69f3270247" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>compGrad</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1aec0d79cef7bae830d597fe71b5bcd56e" prot="private" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>computeVolInv</name></member>
      <member refid="classamrex_1_1MLTensorOp_1a365317f94f2141fd23b7e865996bcb58" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>compVelGrad</name></member>
      <member refid="classamrex_1_1MLABecLaplacian_1a6e2d3bd2582d97baffe5204f5867c2a3" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>copyNSolveSolution</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a3c1832912375e08e8bd38775b6b532b3" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>correctionResidual</name></member>
      <member refid="classamrex_1_1MLTensorOp_1a4aa37d8953aeb1df96051653df3769c6" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>define</name></member>
      <member refid="classamrex_1_1MLTensorOp_1a32da39624352ed60dc69765cd9fa3643" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>define</name></member>
      <member refid="classamrex_1_1MLABecLaplacian_1a904a4a756e93cdd3889445ef02df6839" prot="public" virt="non-virtual" ambiguityscope="amrex::MLABecLaplacian::"><scope>amrex::MLTensorOp</scope><name>define</name></member>
      <member refid="classamrex_1_1MLABecLaplacian_1a76f4c880211fb8e9c07dcf2d67c583e3" prot="public" virt="non-virtual" ambiguityscope="amrex::MLABecLaplacian::"><scope>amrex::MLTensorOp</scope><name>define</name></member>
      <member refid="classamrex_1_1MLLinOp_1aa0ba245918a01db26fdc8289b4e4ed29" prot="public" virt="non-virtual" ambiguityscope="amrex::MLLinOp::"><scope>amrex::MLTensorOp</scope><name>define</name></member>
      <member refid="classamrex_1_1MLABecLaplacian_1a283853eeb0e1f06102254ba76a76c7cc" prot="private" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>define_ab_coeffs</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a971e6a729527288cdcb774d19799cf18" prot="private" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>defineAuxData</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a51a99982e299f90449ae12473a15c7d2" prot="private" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>defineBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1a07740ce5e26ee8f463d6176b157fe06a" prot="private" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>defineGrids</name></member>
      <member refid="classamrex_1_1MLLinOp_1a355691d7877fb9a9aabc65db76d0f2b4" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>doAgglomeration</name></member>
      <member refid="classamrex_1_1MLLinOp_1a79f98e0cf06f695dbad6052c5d53e00b" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>doConsolidation</name></member>
      <member refid="classamrex_1_1MLLinOp_1ae920d0e3602dd26d57876b6d6a6843e4" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>doSemicoarsening</name></member>
      <member refid="classamrex_1_1MLLinOp_1a831ab67f9a58e0f452f52b176219c1a0" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>enforceSingularSolvable</name></member>
      <member refid="classamrex_1_1MLLinOp_1a0eb75c39ff8e715b524d79442b83a3fb" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>Factory</name></member>
      <member refid="classamrex_1_1MLABecLaplacian_1a4e48dde7f389a14c76aef25361384a12" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>Fapply</name></member>
      <member refid="classamrex_1_1MLABecLaplacian_1a6e3cc0a31d52d1bb18ebf5c43dac89eb" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>FFlux</name></member>
      <member refid="classamrex_1_1MLABecLaplacian_1a6af504f34d971e15df085a16446327d0" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>FFlux</name></member>
      <member refid="classamrex_1_1MLLinOp_1ad00407760d4927438c355ba115aaad4e" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>Finalize</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a8a9e84cdae16cefb1f4dac19ac06c793" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>fixSolvabilityByOffset</name></member>
      <member refid="classamrex_1_1MLABecLaplacian_1a32f30f88fc7763cc7c6f378e91761e6f" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>Fsmooth</name></member>
      <member refid="classamrex_1_1MLLinOp_1a7b1da16499dc7b95e807a28757e0c094" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>Geom</name></member>
      <member refid="classamrex_1_1MLLinOp_1aa429808b0b8d8a9efcf3380620f6263a" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>get_d0</name></member>
      <member refid="classamrex_1_1MLLinOp_1ad16cb6cbf7bcb78cc0d0af59611ae00a" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>get_d1</name></member>
      <member refid="classamrex_1_1MLABecLaplacian_1ae12be3a3c5d40ddfbe6545102d337467" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>getACoeffs</name></member>
      <member refid="classamrex_1_1MLABecLaplacian_1aeaca483e0d98821830a050a124c78df4" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>getAScalar</name></member>
      <member refid="classamrex_1_1MLABecLaplacian_1ace4be849d71ce58b8a9821f27258a167" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>getBCoeffs</name></member>
      <member refid="classamrex_1_1MLABecLaplacian_1ac70584251b5d47dd91ab030bfa1b871c" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>getBScalar</name></member>
      <member refid="classamrex_1_1MLLinOp_1a6d1ed393d8e089b8af021e80ead4267b" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>getDefaultBottomSolver</name></member>
      <member refid="classamrex_1_1MLLinOp_1a29c32b42500a25348ee5331f44ab94ba" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>getEnforceSingularSolvable</name></member>
      <member refid="classamrex_1_1MLCellABecLap_1add88d6133181d2515575e939e3bd0aa5" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>getFluxes</name></member>
      <member refid="classamrex_1_1MLCellABecLap_1a34cb682ceb72e31c45cadb89bc2e3a9f" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>getFluxes</name></member>
      <member refid="classamrex_1_1MLLinOp_1a1189e4016e7757083343a93649f102aa" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>getMaxOrder</name></member>
      <member refid="classamrex_1_1MLTensorOp_1afc580050d59cf53595c895acb8893034" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>getNComp</name></member>
      <member refid="classamrex_1_1MLLinOp_1aea3bbedd2e663d88f153e88ce06a59c3" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>getNGrow</name></member>
      <member refid="classamrex_1_1MLCellABecLap_1acb4d23e32365a814323cdd4787884420" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>getOversetMask</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a83f585ffe6e99a77143a4ae564b9f988" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>getSolvabilityOffset</name></member>
      <member refid="classamrex_1_1MLLinOp_1a6d7b1e0e21fd61d71bbe342df0f1a5d4" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>hasHiddenDimension</name></member>
      <member refid="classamrex_1_1MLLinOp_1a4910f22e3c63b572ef364cdf8177e392" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>hasInhomogNeumannBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1a4b2636d8115debeeefa38b4b34186ecc" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>hasRobinBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac313a2de49bd67c23fad23d5c4045e70" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>HiBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1af0793198f529f4474139fa9366b2e1aa" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>hiddenDirection</name></member>
      <member refid="classamrex_1_1MLLinOp_1a85fa2f104bbfeaa73d55d589906ecd45" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>info</name></member>
      <member refid="classamrex_1_1MLLinOp_1a48b2fe73722eee0a1d50b6e0b9558174" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>Initialize</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1afc69014267331541efe7c497b31118e4" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>interpAssign</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a0044458b3dd79241c2b74483b70cb7e7" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>interpolation</name></member>
      <member refid="classamrex_1_1MLLinOp_1aa1c6883eef4d4dc55d3a5fe5c921113a" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>isBottomActive</name></member>
      <member refid="classamrex_1_1MLTensorOp_1a1ebac1979e56e1354afa11b556bf074a" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>isBottomSingular</name></member>
      <member refid="classamrex_1_1MLLinOp_1aa42fd2dfa3b0133f2b20a99026549900" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>isCellCentered</name></member>
      <member refid="classamrex_1_1MLTensorOp_1aa6606a8be71e504fc8e8e7e61a9393ec" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>isCrossStencil</name></member>
      <member refid="classamrex_1_1MLLinOp_1af8de1257ddde2a40a49011ef34d68100" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>isMFIterSafe</name></member>
      <member refid="classamrex_1_1MLTensorOp_1abb68b7b79b8bb488979e6b25b05f6d82" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>isSingular</name></member>
      <member refid="classamrex_1_1MLTensorOp_1a7a79d02f26f61d67c0aed26d314b8a03" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>isTensorOp</name></member>
      <member refid="classamrex_1_1MLLinOp_1a7ef6c8434223ac6e052359cd4f27fbe6" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>LoBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1a07cd0a7c45d6542e33a5d97aefe5bab3" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>Location</name></member>
      <member refid="classamrex_1_1MLABecLaplacian_1a4f2dd2fecc4cbd8df8cdf264330b6cee" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_a_coeffs</name></member>
      <member refid="classamrex_1_1MLABecLaplacian_1a56c309c11b2dfa0ae7b4153cbf352329" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_a_scalar</name></member>
      <member refid="classamrex_1_1MLLinOp_1a42ca524eb4deca1132be683805d2d7ab" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_amr_ref_ratio</name></member>
      <member refid="classamrex_1_1MLABecLaplacian_1a690294478b3f4e211d738879fcc2d487" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_b_coeffs</name></member>
      <member refid="classamrex_1_1MLABecLaplacian_1a431b88eacbb25a6fc2704cca95790b1b" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_b_scalar</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a20a2d5349510243c481d2b6ce1992f5c" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_bcondloc</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a60785819fb0c997419c7ee7b007e4bb3" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_bndry_cor</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1ab8f93178ea3f02ba63da966de7796970" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_bndry_sol</name></member>
      <member refid="classamrex_1_1MLLinOp_1a06ea1608702e52d38c0eceaa180bad7e" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_bottom_comm</name></member>
      <member refid="classamrex_1_1MLLinOp_1abc7e6e6252f9ecc63c86dcbd99250e10" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_coarse_bc_loc</name></member>
      <member refid="classamrex_1_1MLLinOp_1a1ca01453776c12e634debdc6d09206c3" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_coarse_data_crse_ratio</name></member>
      <member refid="classamrex_1_1MLLinOp_1ad1382ee007387f65075acda2f46866f2" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_coarse_data_for_bc</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a871355473b2744ad7dd29d691e72e9ee" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_crse_cor_br</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1aae58b75937a141dc599d98b034be7f3c" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_crse_sol_br</name></member>
      <member refid="classamrex_1_1MLLinOp_1addb42fac68158f49c2508cf47d3b8d9d" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_default_comm</name></member>
      <member refid="classamrex_1_1MLLinOp_1a80552ba3fc7cdd6bb00739c66327ae2c" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_dmap</name></member>
      <member refid="classamrex_1_1MLLinOp_1a19bf5f2d76877e5f5777e5c44d290648" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_do_agglomeration</name></member>
      <member refid="classamrex_1_1MLLinOp_1a488b6dd5c1bfecef948b543bfa7e5154" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_do_consolidation</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac5eeb189073e311245243a3292b8377d" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_do_semicoarsening</name></member>
      <member refid="classamrex_1_1MLLinOp_1a700409c91ec909489e19c53e601de053" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_domain_bloc_hi</name></member>
      <member refid="classamrex_1_1MLLinOp_1a0fd156d093aacd959e78666105ed6328" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_domain_bloc_lo</name></member>
      <member refid="classamrex_1_1MLLinOp_1aaba23614888f937956554945e6a2a5a0" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_domain_covered</name></member>
      <member refid="classamrex_1_1MLLinOp_1aca26a5ef5d68cae3dcabea0a5d8c2493" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_factory</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1aeabff149eec600743faac7295cd509d2" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_fluxreg</name></member>
      <member refid="classamrex_1_1MLLinOp_1ab16551403ee1629e20ed6e6d9d4f680c" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_geom</name></member>
      <member refid="classamrex_1_1MLLinOp_1a3f9b0a7c3a91ca7e13664dbfe7115eed" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_grids</name></member>
      <member refid="classamrex_1_1MLTensorOp_1a0aebce2114e6c519b7648b87daceeb11" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_has_kappa</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a9d6cdade5abfabf340b180cba282c3c1" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_has_metric_term</name></member>
      <member refid="classamrex_1_1MLLinOp_1a619323b7ef2de7c06f7c480c9bcdf3d2" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_hibc</name></member>
      <member refid="classamrex_1_1MLLinOp_1a94066c5e255464485d5af0d1f174e1c2" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_hibc_orig</name></member>
      <member refid="classamrex_1_1MLABecLaplacian_1a225329bffa463bc382ff2bc473a21098" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_is_singular</name></member>
      <member refid="classamrex_1_1MLLinOp_1a1422f7b22ae204247f5cdf20ab70e741" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_ixtype</name></member>
      <member refid="classamrex_1_1MLTensorOp_1aa056265afa394abc77bb3fa40fcb96d9" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_kappa</name></member>
      <member refid="classamrex_1_1MLLinOp_1aac661e9e03991a16c7aca157ca2447b0" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_lobc</name></member>
      <member refid="classamrex_1_1MLLinOp_1aec9b82494ef69731d10e9b293b64fdd8" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_lobc_orig</name></member>
      <member refid="classamrex_1_1MLCellABecLap_1acb34071cea72aa5efd3a25700903e9c1" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_lpinfo_arg</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1af7504eedbd467f1237874cbc10dd6d39" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_maskvals</name></member>
      <member refid="classamrex_1_1MLABecLaplacian_1a0aadcd1e0c7015d491b5a3d04cbd1e1a" prot="private" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_ncomp</name></member>
      <member refid="classamrex_1_1MLLinOp_1aa53a765aea0ed0c4e7410d147380079f" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_needs_coarse_data_for_bc</name></member>
      <member refid="classamrex_1_1MLTensorOp_1a15ebbe140a2faea1fccb3b4bb71ddb60" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_needs_update</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a5be36924b389fe28a9d9e8c08d8dd728" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_norm_fine_mask</name></member>
      <member refid="classamrex_1_1MLLinOp_1ad6bbf49c1bdb88256721471b22b4b044" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_num_amr_levels</name></member>
      <member refid="classamrex_1_1MLLinOp_1ababf1d5df3da022563dc90ee2c81ad75" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_num_mg_levels</name></member>
      <member refid="classamrex_1_1MLCellABecLap_1aeee38af8d207ad6bc70087b4c6ec4215" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_overset_mask</name></member>
      <member refid="classamrex_1_1MLLinOp_1a614164d6c8e680ccb5ac8fb9cf1558ed" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_parent</name></member>
      <member refid="classamrex_1_1MLLinOp_1a2faeb23bc1e93e2b0cd693cb94a18d08" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_raii_comm</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a920175d896857c64b3544cd0f6c80288" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_robin_bcval</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a2ffd8d47358983d3c013b8012eeb1b8e" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_undrrelxr</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a4ea7cb30ede32f69a678fdb4af1180bb" prot="private" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>m_volinv</name></member>
      <member refid="classamrex_1_1MLLinOp_1af653a69980f01d30f178caede72b3843" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>make</name></member>
      <member refid="classamrex_1_1MLLinOp_1a8aebe104ce2f4892f32350c742d0ba36" prot="private" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>makeAgglomeratedDMap</name></member>
      <member refid="classamrex_1_1MLLinOp_1aafd84fa947e45627503861e5707201dd" prot="private" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>makeConsolidatedDMap</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac31926ba837b440475e0715a8fa4b87b" prot="protected" virt="virtual"><scope>amrex::MLTensorOp</scope><name>makeFactory</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a3bbfff6e733b7883fffacffb363569aa" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>makeNGrids</name></member>
      <member refid="classamrex_1_1MLABecLaplacian_1afe42320f6ba8574d18aefce6492ee6b5" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>makeNLinOp</name></member>
      <member refid="classamrex_1_1MLLinOp_1a0aa88871d9875a2436ed23ff882516e4" prot="private" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>makeSubCommunicator</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac516dba583aede117f89e339423f6114" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>maxorder</name></member>
      <member refid="classamrex_1_1MLLinOp_1a63aaab910ae5e9c6bd653804eb1c8148" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>MFNormInf</name></member>
      <member refid="classamrex_1_1MLLinOp_1ae871a991ef83c33044a22db383c76dcd" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>mg_box_min_width</name></member>
      <member refid="classamrex_1_1MLLinOp_1aaa5616982aef27c68c5ae5544092c7db" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>mg_coarsen_ratio</name></member>
      <member refid="classamrex_1_1MLLinOp_1a2023b3b3881d5aff49c7a3b995a03993" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>mg_coarsen_ratio_vec</name></member>
      <member refid="classamrex_1_1MLLinOp_1a3ea5c2611e98234737157e36bae6c343" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>mg_domain_min_width</name></member>
      <member refid="classamrex_1_1MLABecLaplacian_1abf3b9bd60c5bffecca969aae4b710744" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>MLABecLaplacian</name></member>
      <member refid="classamrex_1_1MLABecLaplacian_1a06525f5681201e46f5c5e5046cdd1029" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>MLABecLaplacian</name></member>
      <member refid="classamrex_1_1MLABecLaplacian_1ade5932cd295292c71b76c74c30c6cc94" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>MLABecLaplacian</name></member>
      <member refid="classamrex_1_1MLABecLaplacian_1aad8f38a834cb6fcdddc0912b64431300" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>MLABecLaplacian</name></member>
      <member refid="classamrex_1_1MLABecLaplacian_1a2b96df8bcb57809c6f292d39cf5713d3" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>MLABecLaplacian</name></member>
      <member refid="classamrex_1_1MLCellABecLap_1a4645fe35e39e5f36fe87938a48ea9641" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>MLCellABecLap</name></member>
      <member refid="classamrex_1_1MLCellABecLap_1aff6a0f1c81880c9e944e725098d73a7c" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>MLCellABecLap</name></member>
      <member refid="classamrex_1_1MLCellABecLap_1a13b727caa58ea6b165dcc414b6c14bae" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>MLCellABecLap</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1acc45e2dedbc266cc717ffc2239727486" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>MLCellLinOp</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1acba5508d208bbb531ce2fe45042b4f6f" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>MLCellLinOp</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a4bb69639aa4cb08113d6d8273fca03ae" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>MLCellLinOp</name></member>
      <member refid="classamrex_1_1MLLinOp_1a2a75b94dc22faffec8a686f91fbfc9c1" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>MLLinOp</name></member>
      <member refid="classamrex_1_1MLLinOp_1a7dd2c530e984f58e5a04cc415e9a539b" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>MLLinOp</name></member>
      <member refid="classamrex_1_1MLLinOp_1a69fbc0ca95c18b6e954c53abb41c885c" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>MLLinOp</name></member>
      <member refid="classamrex_1_1MLTensorOp_1aec0e97a4db88c3f6c19526090d051853" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>MLTensorOp</name></member>
      <member refid="classamrex_1_1MLTensorOp_1af334ada457b300b2f6c0751555dddf4e" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>MLTensorOp</name></member>
      <member refid="classamrex_1_1MLTensorOp_1ad97ed45bc2dd179fe8870687841f9071" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>MLTensorOp</name></member>
      <member refid="classamrex_1_1MLTensorOp_1a6025988cdea4ad252498aa0e0af1de94" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>MLTensorOp</name></member>
      <member refid="classamrex_1_1MLTensorOp_1a2cf6f2e2ef6c4cceed3f3a67cf4e1201" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>MLTensorOp</name></member>
      <member refid="classamrex_1_1MLLinOp_1ab0e25c7ee0f264b36146fa77ee2bf1c4" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>name</name></member>
      <member refid="classamrex_1_1MLLinOp_1adcfe0a91f9b85388c17eee6172f02975" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>NAMRLevels</name></member>
      <member refid="classamrex_1_1MLLinOp_1a0c150481b635dccaf83cfff3d38b11c7" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>needsCoarseDataForBC</name></member>
      <member refid="classamrex_1_1MLTensorOp_1a65030fea7dc90010188af0e7b33fb6ab" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>needsUpdate</name></member>
      <member refid="classamrex_1_1MLLinOp_1a257d196611ba0ab9d861dc5e0dc23502" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>NMGLevels</name></member>
      <member refid="classamrex_1_1MLABecLaplacian_1af3a38005298c98dec1874957bccc31a6" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>normalize</name></member>
      <member refid="classamrex_1_1MLTensorOp_1a3879f323dc12422e979cd5c1db513481" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLTensorOp_1a20b3da7c94a567c736a703979565eb7c" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLABecLaplacian_1a79b784fd330fd2b4d0c60b7494800802" prot="public" virt="non-virtual" ambiguityscope="amrex::MLABecLaplacian::"><scope>amrex::MLTensorOp</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLABecLaplacian_1acfd96476126334e014e13143f1289cf7" prot="public" virt="non-virtual" ambiguityscope="amrex::MLABecLaplacian::"><scope>amrex::MLTensorOp</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLCellABecLap_1a7fd4867774038467f97cfac185e235ac" prot="public" virt="non-virtual" ambiguityscope="amrex::MLCellABecLap::"><scope>amrex::MLTensorOp</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLCellABecLap_1ac72a224155e09fd10918b66384ccdb81" prot="public" virt="non-virtual" ambiguityscope="amrex::MLCellABecLap::"><scope>amrex::MLTensorOp</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a87fd042ed7a3004a39f75564f24264ca" prot="public" virt="non-virtual" ambiguityscope="amrex::MLCellLinOp::"><scope>amrex::MLTensorOp</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a4be43b4a29bd4f7092aa870804870ae2" prot="public" virt="non-virtual" ambiguityscope="amrex::MLCellLinOp::"><scope>amrex::MLTensorOp</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLLinOp_1ad163e1fa25935bce528783de5adb6b1a" prot="public" virt="non-virtual" ambiguityscope="amrex::MLLinOp::"><scope>amrex::MLTensorOp</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLLinOp_1aec2118e27e9938788a89f5dda28709f7" prot="public" virt="non-virtual" ambiguityscope="amrex::MLLinOp::"><scope>amrex::MLTensorOp</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLLinOp_1aea26a4fe6d5a15d23a347501c6be1c71" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>postSolve</name></member>
      <member refid="classamrex_1_1MLTensorOp_1a7d6264e24870296cd61ca4ce20b118df" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>prepareForSolve</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1ae233eeb511516448492f38fe53fa9cd9" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>RealTuple</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1afc76c452e2704200c3b596ba1c1cb1a2" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>reflux</name></member>
      <member refid="classamrex_1_1MLLinOp_1a62f7495893309fa4f4805bbea9b59b3b" prot="private" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>remapNeighborhoods</name></member>
      <member refid="classamrex_1_1MLLinOp_1ae80c21d0f29e6878cf478dfeef8dd4f2" prot="protected" virt="virtual"><scope>amrex::MLTensorOp</scope><name>resizeMultiGrid</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1aa95312f91d2baeeba018a231d162ad9a" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>restriction</name></member>
      <member refid="classamrex_1_1MLLinOp_1af32f494664d6666bdd94d92998f4b5f0" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>scaleRHS</name></member>
      <member refid="classamrex_1_1MLABecLaplacian_1a2dc08f7d45b41d0b9b88c7a96f95b23d" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>setACoeffs</name></member>
      <member refid="classamrex_1_1MLABecLaplacian_1a992fd553ade4720189014453615b28b6" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>setACoeffs</name></member>
      <member refid="classamrex_1_1MLTensorOp_1aec6c60aa0be2285afbcb0ea8b13efe93" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>setBCoeffs</name></member>
      <member refid="classamrex_1_1MLABecLaplacian_1a34c3b1b0d5cbc79985def0003fe8c53d" prot="public" virt="non-virtual" ambiguityscope="amrex::MLABecLaplacian::"><scope>amrex::MLTensorOp</scope><name>setBCoeffs</name></member>
      <member refid="classamrex_1_1MLABecLaplacian_1a7e78a84b10a437a183500c3134b25459" prot="public" virt="non-virtual" ambiguityscope="amrex::MLABecLaplacian::"><scope>amrex::MLTensorOp</scope><name>setBCoeffs</name></member>
      <member refid="classamrex_1_1MLTensorOp_1a89529e15aedc1628aaa544645a9a8b39" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>setBulkViscosity</name></member>
      <member refid="classamrex_1_1MLTensorOp_1acbe31c08085ba7b2e1b6ae53e22b688c" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>setBulkViscosity</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac161f1d53e925b82ba5defeb9b0efe70" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>setCoarseFineBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac0c0882eb6092218dc09c5d60555ffed" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>setCoarseFineBCLocation</name></member>
      <member refid="classamrex_1_1MLLinOp_1aa034da35bd05e1fb93b8d876a9840ce3" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>setDomainBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1a2402e6343df20087a51fb653a147987d" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>setDomainBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1aeb7f6e87ab86b49cc97a248b4240d600" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>setDomainBCLoc</name></member>
      <member refid="classamrex_1_1MLLinOp_1a8225491c35d71e1fb7edb6355f44ac5a" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>setEnforceSingularSolvable</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a17b29b5c93f25181f34313b42b795a9e" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>setLevelBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1a45b72169ccf285c17f439c4e990c0f58" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>setMaxOrder</name></member>
      <member refid="classamrex_1_1MLABecLaplacian_1a0c9623cbb85811d65268b7462e09764a" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>setScalars</name></member>
      <member refid="classamrex_1_1MLTensorOp_1af6d48bd951e581c0766cec582a9c85a3" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>setShearViscosity</name></member>
      <member refid="classamrex_1_1MLTensorOp_1abae8fb16d0725b3c3c728079359e8d4b" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>setShearViscosity</name></member>
      <member refid="classamrex_1_1MLLinOp_1a4d96a0475759eef80d096851fdedd411" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>setVerbose</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a240eadd9886e8df70f955fecb56bcdfe" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>smooth</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1ab18841d6aec78590a56eeaed61fe4345" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>solutionResidual</name></member>
      <member refid="classamrex_1_1MLLinOp_1a1f2821b4a51da49d862dae1e757bb8c3" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>StateMode</name></member>
      <member refid="classamrex_1_1MLCellABecLap_1ade6948bc20dfcd07ac886cee8b072c9b" prot="protected" virt="virtual"><scope>amrex::MLTensorOp</scope><name>supportInhomogNeumannBC</name></member>
      <member refid="classamrex_1_1MLABecLaplacian_1ab8725018ab20ba9130eccd4b9eb82e17" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>supportNSolve</name></member>
      <member refid="classamrex_1_1MLABecLaplacian_1a9d739e672638ca44112f3c6729ffc23e" prot="protected" virt="virtual"><scope>amrex::MLTensorOp</scope><name>supportRobinBC</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a4ee573102053163e673153f3334153fe" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>unapplyMetricTerm</name></member>
      <member refid="classamrex_1_1MLLinOp_1a806af8f6ea146fdf513e1cc82305c822" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>unimposeNeumannBC</name></member>
      <member refid="classamrex_1_1MLTensorOp_1a2974162f8c208ea9130dbe20a99a76e1" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>update</name></member>
      <member refid="classamrex_1_1MLABecLaplacian_1a3a3c0c555f4798abb65ca579b2526742" prot="private" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>update_singular_flags</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a73212ed387925f27b0ebeaed21e4a00a" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>updateCorBC</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1aec26fa3ea4e35bd1a02b8972fc392493" prot="public" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>updateSolBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1a0815357130e78962e01abdaba2b09c21" prot="protected" virt="non-virtual"><scope>amrex::MLTensorOp</scope><name>verbose</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a2d3d01dcb4fddb4f2df39484b6f58f97" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>xdoty</name></member>
      <member refid="classamrex_1_1MLABecLaplacian_1aa1a6fbbfa155e18723eae717876eb6f5" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>~MLABecLaplacian</name></member>
      <member refid="classamrex_1_1MLCellABecLap_1aaa11148ef1cc3386414a3b3d02f9a4b2" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>~MLCellABecLap</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a4d46c85e7e43e5231e19607a868d3d0f" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>~MLCellLinOp</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac6793724d6b5c98581d42d9233fda1bd" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>~MLLinOp</name></member>
      <member refid="classamrex_1_1MLTensorOp_1ab48223f6428f6da2f57b9912d9d9b423" prot="public" virt="virtual"><scope>amrex::MLTensorOp</scope><name>~MLTensorOp</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
