<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classamrex_1_1Gpu_1_1Elixir" kind="class" language="C++" prot="public">
    <compoundname>amrex::Gpu::Elixir</compoundname>
    <includes refid="AMReX__GpuElixir_8H" local="no">AMReX_GpuElixir.H</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1Gpu_1_1Elixir_1a87affdf01557cac536e54b52e606783d" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::pair&lt; void *, <ref refid="classamrex_1_1Arena" kindref="compound">Arena</ref> * &gt; &gt;</type>
        <definition>Vector&lt;std::pair&lt;void*,Arena*&gt; &gt; amrex::Gpu::Elixir::m_pa</definition>
        <argsstring></argsstring>
        <name>m_pa</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuElixir.H" line="48" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuElixir.H" bodystart="48" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1Gpu_1_1Elixir_1a9a11ead76662a1fb2d86201dea17a33f" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::Gpu::Elixir::Elixir</definition>
        <argsstring>() noexcept=default</argsstring>
        <name>Elixir</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuElixir.H" line="16" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Gpu_1_1Elixir_1a62d8be14e66b536bcadc7689658054db" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::Gpu::Elixir::Elixir</definition>
        <argsstring>(void *p, Arena *arena) noexcept</argsstring>
        <name>Elixir</name>
        <param>
          <type>void *</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Arena" kindref="compound">Arena</ref> *</type>
          <declname>arena</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuElixir.H" line="18" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuElixir.H" bodystart="18" bodyend="18"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Gpu_1_1Elixir_1afbafbee2ae0733e7b642416a6c0e1d95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::Gpu::Elixir::Elixir</definition>
        <argsstring>(Elixir const &amp;)=delete</argsstring>
        <name>Elixir</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1Elixir" kindref="compound">Elixir</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuElixir.H" line="20" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Gpu_1_1Elixir_1a9302f0721d3365d24883bb91e3845e9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1Gpu_1_1Elixir" kindref="compound">Elixir</ref> &amp;</type>
        <definition>Elixir&amp; amrex::Gpu::Elixir::operator=</definition>
        <argsstring>(Elixir const &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1Elixir" kindref="compound">Elixir</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuElixir.H" line="21" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Gpu_1_1Elixir_1a73116015261623afc75de5846c536d60" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::Gpu::Elixir::Elixir</definition>
        <argsstring>(Elixir &amp;&amp;rhs) noexcept</argsstring>
        <name>Elixir</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1Elixir" kindref="compound">Elixir</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuElixir.H" line="23" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuElixir.H" bodystart="23" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Gpu_1_1Elixir_1aae00416a34911aa8fb06363e668ea8b4" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1Gpu_1_1Elixir" kindref="compound">Elixir</ref> &amp;</type>
        <definition>Elixir&amp; amrex::Gpu::Elixir::operator=</definition>
        <argsstring>(Elixir &amp;&amp;rhs) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1Elixir" kindref="compound">Elixir</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuElixir.H" line="29" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuElixir.H" bodystart="29" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Gpu_1_1Elixir_1ac00b940669dee9267e5483a43a9b8b7e" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Gpu::Elixir::append</definition>
        <argsstring>(Elixir rhs) noexcept</argsstring>
        <name>append</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1Elixir" kindref="compound">Elixir</ref></type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuElixir.H" line="37" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuElixir.H" bodystart="37" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Gpu_1_1Elixir_1aaf8c50c534f3c06f0b7adf47ca0944f3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::Gpu::Elixir::~Elixir</definition>
        <argsstring>()</argsstring>
        <name>~Elixir</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuElixir.H" line="43" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuElixir.H" bodystart="43" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Gpu_1_1Elixir_1a6b4d08e1329afbce2ced6dd65acd9bec" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Gpu::Elixir::clear</definition>
        <argsstring>() noexcept</argsstring>
        <name>clear</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuElixir.H" line="45" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuElixir.cpp" bodystart="35" bodyend="75"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="4">
        <label>T</label>
      </node>
      <node id="3">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="4" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>amrex::Vector&lt; std::pair&lt; void *, amrex::Arena * &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>amrex::Gpu::Elixir</label>
        <link refid="classamrex_1_1Gpu_1_1Elixir"/>
        <childnode refid="2" relation="usage">
          <edgelabel>m_pa</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuElixir.H" line="12" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuElixir.H" bodystart="13" bodyend="49"/>
    <listofallmembers>
      <member refid="classamrex_1_1Gpu_1_1Elixir_1ac00b940669dee9267e5483a43a9b8b7e" prot="public" virt="non-virtual"><scope>amrex::Gpu::Elixir</scope><name>append</name></member>
      <member refid="classamrex_1_1Gpu_1_1Elixir_1a6b4d08e1329afbce2ced6dd65acd9bec" prot="public" virt="non-virtual"><scope>amrex::Gpu::Elixir</scope><name>clear</name></member>
      <member refid="classamrex_1_1Gpu_1_1Elixir_1a9a11ead76662a1fb2d86201dea17a33f" prot="public" virt="non-virtual"><scope>amrex::Gpu::Elixir</scope><name>Elixir</name></member>
      <member refid="classamrex_1_1Gpu_1_1Elixir_1a62d8be14e66b536bcadc7689658054db" prot="public" virt="non-virtual"><scope>amrex::Gpu::Elixir</scope><name>Elixir</name></member>
      <member refid="classamrex_1_1Gpu_1_1Elixir_1afbafbee2ae0733e7b642416a6c0e1d95" prot="public" virt="non-virtual"><scope>amrex::Gpu::Elixir</scope><name>Elixir</name></member>
      <member refid="classamrex_1_1Gpu_1_1Elixir_1a73116015261623afc75de5846c536d60" prot="public" virt="non-virtual"><scope>amrex::Gpu::Elixir</scope><name>Elixir</name></member>
      <member refid="classamrex_1_1Gpu_1_1Elixir_1a87affdf01557cac536e54b52e606783d" prot="private" virt="non-virtual"><scope>amrex::Gpu::Elixir</scope><name>m_pa</name></member>
      <member refid="classamrex_1_1Gpu_1_1Elixir_1a9302f0721d3365d24883bb91e3845e9d" prot="public" virt="non-virtual"><scope>amrex::Gpu::Elixir</scope><name>operator=</name></member>
      <member refid="classamrex_1_1Gpu_1_1Elixir_1aae00416a34911aa8fb06363e668ea8b4" prot="public" virt="non-virtual"><scope>amrex::Gpu::Elixir</scope><name>operator=</name></member>
      <member refid="classamrex_1_1Gpu_1_1Elixir_1aaf8c50c534f3c06f0b7adf47ca0944f3" prot="public" virt="non-virtual"><scope>amrex::Gpu::Elixir</scope><name>~Elixir</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
