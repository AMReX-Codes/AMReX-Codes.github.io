<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classamrex_1_1Arena" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>amrex::Arena</compoundname>
    <derivedcompoundref refid="classamrex_1_1BArena" prot="public" virt="non-virtual">amrex::BArena</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1CArena" prot="public" virt="non-virtual">amrex::CArena</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1DArena" prot="public" virt="non-virtual">amrex::DArena</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1EArena" prot="public" virt="non-virtual">amrex::EArena</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1PArena" prot="public" virt="non-virtual">amrex::PArena</derivedcompoundref>
    <includes refid="AMReX__Arena_8H" local="no">AMReX_Arena.H</includes>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classamrex_1_1Arena_1a4b2f3b31e81e52426aef615cb2aaa7b7" prot="public" static="yes" mutable="no">
        <type>const std::size_t</type>
        <definition>const std::size_t amrex::Arena::align_size</definition>
        <argsstring></argsstring>
        <name>align_size</name>
        <initializer>= 16</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.H" line="125" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.H" bodystart="125" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classamrex_1_1Arena_1aeb2158ba443c9b23ba0d12bcf38a66e1" prot="protected" static="no" mutable="no">
        <type><ref refid="structamrex_1_1ArenaInfo" kindref="compound">ArenaInfo</ref></type>
        <definition>ArenaInfo amrex::Arena::arena_info</definition>
        <argsstring></argsstring>
        <name>arena_info</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.H" line="134" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.H" bodystart="134" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1Arena_1a515142557e6b630fbad746e3c33776e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>amrex::Arena::~Arena</definition>
        <argsstring>()</argsstring>
        <name>~Arena</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.H" line="81" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.cpp" bodystart="53" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Arena_1a46ce2cd5cfc039cec64548b031fbde2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void *</type>
        <definition>virtual void* amrex::Arena::alloc</definition>
        <argsstring>(std::size_t sz)=0</argsstring>
        <name>alloc</name>
        <reimplementedby refid="classamrex_1_1BArena_1a87bb0b513c8ceae7ae87362130281ef3">alloc</reimplementedby>
        <reimplementedby refid="classamrex_1_1PArena_1ae6c5243a8d81444f3bc082ef76af855c">alloc</reimplementedby>
        <reimplementedby refid="classamrex_1_1DArena_1a9b04c2fb837c44de64f48cfe7b6e2bf4">alloc</reimplementedby>
        <reimplementedby refid="classamrex_1_1EArena_1ae53e285683e8de93b1946eb8822548ef">alloc</reimplementedby>
        <reimplementedby refid="classamrex_1_1CArena_1a1bc87d17826c27e1b3ec8c623554db04">alloc</reimplementedby>
        <param>
          <type>std::size_t</type>
          <declname>sz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allocate a dynamic memory arena <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sz</parametername>
</parameternamelist>
<parameterdescription>
<para>size of the memory request </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pointer to the allocated memory </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.H" line="87" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Arena_1a0c7e0730574c98febb6ddca2712cb515" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void amrex::Arena::free</definition>
        <argsstring>(void *pt)=0</argsstring>
        <name>free</name>
        <reimplementedby refid="classamrex_1_1BArena_1a0c28fb6078c851560f3d8972351f3b07">free</reimplementedby>
        <reimplementedby refid="classamrex_1_1PArena_1aefccf86e5fc2532fcb60f3f85be9b07a">free</reimplementedby>
        <reimplementedby refid="classamrex_1_1DArena_1a28829dd97d781ec36ae5ddb19d63c58a">free</reimplementedby>
        <reimplementedby refid="classamrex_1_1EArena_1aa74e35b693b08eabc6a4595eb6af86bb">free</reimplementedby>
        <reimplementedby refid="classamrex_1_1CArena_1a56528182c07ceb5d08fce7f674f62991">free</reimplementedby>
        <param>
          <type>void *</type>
          <declname>pt</declname>
        </param>
        <briefdescription>
<para>A pure virtual function for deleting the arena pointed to by pt. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.H" line="91" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Arena_1afa7c9e223346f671eb055b3ce8580e56" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool amrex::Arena::isDeviceAccessible</definition>
        <argsstring>() const</argsstring>
        <name>isDeviceAccessible</name>
        <reimplementedby refid="classamrex_1_1BArena_1adc538e1b83f0180cef20824d976f5964">isDeviceAccessible</reimplementedby>
        <reimplementedby refid="classamrex_1_1PArena_1a9592867fba4422ccf6ab8d201c762da6">isDeviceAccessible</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.H" line="94" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.cpp" bodystart="56" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Arena_1a40d897685d407918d2d6143b5301a525" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool amrex::Arena::isHostAccessible</definition>
        <argsstring>() const</argsstring>
        <name>isHostAccessible</name>
        <reimplementedby refid="classamrex_1_1BArena_1aec7c11de8ca3627c0dc8835b41504b21">isHostAccessible</reimplementedby>
        <reimplementedby refid="classamrex_1_1PArena_1a67ad0453e4900871dd98642143cf7e1d">isHostAccessible</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.H" line="95" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.cpp" bodystart="66" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Arena_1a7119489f4464f902d907f6dfe9716909" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool amrex::Arena::isManaged</definition>
        <argsstring>() const</argsstring>
        <name>isManaged</name>
        <reimplementedby refid="classamrex_1_1BArena_1af912a3f7a3822ab75b82d9dfb4dd8ad7">isManaged</reimplementedby>
        <reimplementedby refid="classamrex_1_1PArena_1a94166157bc045ebc6781c2f033edba01">isManaged</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.H" line="100" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.cpp" bodystart="78" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Arena_1aa45555e396ee74158b0c6f3331ce5536" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool amrex::Arena::isDevice</definition>
        <argsstring>() const</argsstring>
        <name>isDevice</name>
        <reimplementedby refid="classamrex_1_1BArena_1a8f04d0c847c95e5f796abe1e28fb12c8">isDevice</reimplementedby>
        <reimplementedby refid="classamrex_1_1PArena_1acc4daaba21bd8f98f4da5600820923d6">isDevice</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.H" line="101" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.cpp" bodystart="90" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Arena_1a336e271c5a07296e4c2866d194111784" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool amrex::Arena::isPinned</definition>
        <argsstring>() const</argsstring>
        <name>isPinned</name>
        <reimplementedby refid="classamrex_1_1BArena_1a7e9aaad3e6bf3a770551ffc0e6f9cf7f">isPinned</reimplementedby>
        <reimplementedby refid="classamrex_1_1PArena_1ad80388d71d970222ebe3979545ca0739">isPinned</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.H" line="102" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.cpp" bodystart="102" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Arena_1a1af72a36a13904de0715917915db1f6b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="structamrex_1_1ArenaInfo" kindref="compound">ArenaInfo</ref> &amp;</type>
        <definition>const ArenaInfo&amp; amrex::Arena::arenaInfo</definition>
        <argsstring>() const</argsstring>
        <name>arenaInfo</name>
        <briefdescription>
<para>Return the <ref refid="structamrex_1_1ArenaInfo" kindref="compound">ArenaInfo</ref> object for querying. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.H" line="130" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.H" bodystart="130" bodyend="130"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classamrex_1_1Arena_1a253c417e0bd2863509c75d6250468a4e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t amrex::Arena::align</definition>
        <argsstring>(std::size_t sz)</argsstring>
        <name>align</name>
        <param>
          <type>std::size_t</type>
          <declname>sz</declname>
        </param>
        <briefdescription>
<para>Given a minimum required arena size of sz bytes, this returns the next largest arena size that will align to align_size bytes. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.H" line="108" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.cpp" bodystart="113" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Arena_1a9f40990a545f4d280e905117fc6a0786" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Arena::Initialize</definition>
        <argsstring>()</argsstring>
        <name>Initialize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.H" line="110" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.cpp" bodystart="207" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Arena_1a506a68384da30629323d0839f13812c2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Arena::PrintUsage</definition>
        <argsstring>()</argsstring>
        <name>PrintUsage</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.H" line="111" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.cpp" bodystart="309" bodyend="362"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Arena_1a06dd6197d2081d7dd4c1bed308edd387" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Arena::Finalize</definition>
        <argsstring>()</argsstring>
        <name>Finalize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.H" line="112" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.cpp" bodystart="365" bodyend="394"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classamrex_1_1Arena_1afc721e195430f79b2d1b287c490ef0fb" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * amrex::Arena::allocate_system</definition>
        <argsstring>(std::size_t nbytes)</argsstring>
        <name>allocate_system</name>
        <param>
          <type>std::size_t</type>
          <declname>nbytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.H" line="136" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.cpp" bodystart="119" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Arena_1ac07ba8cda253cddee3cab1168ac65694" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Arena::deallocate_system</definition>
        <argsstring>(void *p, std::size_t nbytes)</argsstring>
        <name>deallocate_system</name>
        <param>
          <type>void *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>nbytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.H" line="137" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.cpp" bodystart="178" bodyend="204"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A virtual base class for objects that manage their own dynamic memory allocation. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="463">
        <label>amrex::EArena</label>
        <link refid="classamrex_1_1EArena"/>
        <childnode refid="459" relation="public-inheritance">
        </childnode>
      </node>
      <node id="459">
        <label>amrex::Arena</label>
        <link refid="classamrex_1_1Arena"/>
      </node>
      <node id="460">
        <label>amrex::BArena</label>
        <link refid="classamrex_1_1BArena"/>
        <childnode refid="459" relation="public-inheritance">
        </childnode>
      </node>
      <node id="464">
        <label>amrex::PArena</label>
        <link refid="classamrex_1_1PArena"/>
        <childnode refid="459" relation="public-inheritance">
        </childnode>
      </node>
      <node id="461">
        <label>amrex::CArena</label>
        <link refid="classamrex_1_1CArena"/>
        <childnode refid="459" relation="public-inheritance">
        </childnode>
      </node>
      <node id="462">
        <label>amrex::DArena</label>
        <link refid="classamrex_1_1DArena"/>
        <childnode refid="459" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="466">
        <label>amrex::ArenaInfo</label>
        <link refid="structamrex_1_1ArenaInfo"/>
      </node>
      <node id="465">
        <label>amrex::Arena</label>
        <link refid="classamrex_1_1Arena"/>
        <childnode refid="466" relation="usage">
          <edgelabel>arena_info</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.H" line="78" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.H" bodystart="77" bodyend="138"/>
    <listofallmembers>
      <member refid="classamrex_1_1Arena_1a253c417e0bd2863509c75d6250468a4e" prot="public" virt="non-virtual"><scope>amrex::Arena</scope><name>align</name></member>
      <member refid="classamrex_1_1Arena_1a4b2f3b31e81e52426aef615cb2aaa7b7" prot="public" virt="non-virtual"><scope>amrex::Arena</scope><name>align_size</name></member>
      <member refid="classamrex_1_1Arena_1a46ce2cd5cfc039cec64548b031fbde2e" prot="public" virt="pure-virtual"><scope>amrex::Arena</scope><name>alloc</name></member>
      <member refid="classamrex_1_1Arena_1afc721e195430f79b2d1b287c490ef0fb" prot="protected" virt="non-virtual"><scope>amrex::Arena</scope><name>allocate_system</name></member>
      <member refid="classamrex_1_1Arena_1aeb2158ba443c9b23ba0d12bcf38a66e1" prot="protected" virt="non-virtual"><scope>amrex::Arena</scope><name>arena_info</name></member>
      <member refid="classamrex_1_1Arena_1a1af72a36a13904de0715917915db1f6b" prot="public" virt="non-virtual"><scope>amrex::Arena</scope><name>arenaInfo</name></member>
      <member refid="classamrex_1_1Arena_1ac07ba8cda253cddee3cab1168ac65694" prot="protected" virt="non-virtual"><scope>amrex::Arena</scope><name>deallocate_system</name></member>
      <member refid="classamrex_1_1Arena_1a06dd6197d2081d7dd4c1bed308edd387" prot="public" virt="non-virtual"><scope>amrex::Arena</scope><name>Finalize</name></member>
      <member refid="classamrex_1_1Arena_1a0c7e0730574c98febb6ddca2712cb515" prot="public" virt="pure-virtual"><scope>amrex::Arena</scope><name>free</name></member>
      <member refid="classamrex_1_1Arena_1a9f40990a545f4d280e905117fc6a0786" prot="public" virt="non-virtual"><scope>amrex::Arena</scope><name>Initialize</name></member>
      <member refid="classamrex_1_1Arena_1aa45555e396ee74158b0c6f3331ce5536" prot="public" virt="virtual"><scope>amrex::Arena</scope><name>isDevice</name></member>
      <member refid="classamrex_1_1Arena_1afa7c9e223346f671eb055b3ce8580e56" prot="public" virt="virtual"><scope>amrex::Arena</scope><name>isDeviceAccessible</name></member>
      <member refid="classamrex_1_1Arena_1a40d897685d407918d2d6143b5301a525" prot="public" virt="virtual"><scope>amrex::Arena</scope><name>isHostAccessible</name></member>
      <member refid="classamrex_1_1Arena_1a7119489f4464f902d907f6dfe9716909" prot="public" virt="virtual"><scope>amrex::Arena</scope><name>isManaged</name></member>
      <member refid="classamrex_1_1Arena_1a336e271c5a07296e4c2866d194111784" prot="public" virt="virtual"><scope>amrex::Arena</scope><name>isPinned</name></member>
      <member refid="classamrex_1_1Arena_1a506a68384da30629323d0839f13812c2" prot="public" virt="non-virtual"><scope>amrex::Arena</scope><name>PrintUsage</name></member>
      <member refid="classamrex_1_1Arena_1a515142557e6b630fbad746e3c33776e5" prot="public" virt="virtual"><scope>amrex::Arena</scope><name>~Arena</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
