<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classamrex_1_1Arena" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>amrex::Arena</compoundname>
    <derivedcompoundref refid="classamrex_1_1BArena" prot="public" virt="non-virtual">amrex::BArena</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1CArena" prot="public" virt="non-virtual">amrex::CArena</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1PArena" prot="public" virt="non-virtual">amrex::PArena</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1detail_1_1SingleChunkArena" prot="public" virt="non-virtual">amrex::detail::SingleChunkArena</derivedcompoundref>
    <includes refid="AMReX__Arena_8H" local="no">AMReX_Arena.H</includes>
    <innerclass refid="structamrex_1_1Arena_1_1ArenaProfiler" prot="protected">amrex::Arena::ArenaProfiler</innerclass>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classamrex_1_1Arena_1a4b2f3b31e81e52426aef615cb2aaa7b7" prot="public" static="yes" mutable="no">
        <type>const std::size_t</type>
        <definition>const std::size_t amrex::Arena::align_size</definition>
        <argsstring></argsstring>
        <name>align_size</name>
        <initializer>= 16</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.H" line="206" column="30" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.H" bodystart="206" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classamrex_1_1Arena_1aeb2158ba443c9b23ba0d12bcf38a66e1" prot="protected" static="no" mutable="no">
        <type><ref refid="structamrex_1_1ArenaInfo" kindref="compound">ArenaInfo</ref></type>
        <definition>ArenaInfo amrex::Arena::arena_info</definition>
        <argsstring></argsstring>
        <name>arena_info</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.H" line="215" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.H" bodystart="215" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1Arena_1ad136b691382e7a7d8fba158837416b98" prot="protected" static="no" mutable="no">
        <type>struct <ref refid="structamrex_1_1Arena_1_1ArenaProfiler" kindref="compound">amrex::Arena::ArenaProfiler</ref></type>
        <definition>struct amrex::Arena::ArenaProfiler amrex::Arena::m_profiler</definition>
        <argsstring></argsstring>
        <name>m_profiler</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.H" line="242" column="16"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1Arena_1a327e7541e6291ce735c03392b21931b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual amrex::Arena::~Arena</definition>
        <argsstring>()=default</argsstring>
        <name>~Arena</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.H" line="103" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Arena_1a2e2407d56d1710a0029928c776b27682" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::Arena::Arena</definition>
        <argsstring>() noexcept=default</argsstring>
        <name>Arena</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.H" line="104" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Arena_1a57de8f5ef86cceadc9f1c00bc7ea7790" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::Arena::Arena</definition>
        <argsstring>(const Arena &amp;rhs)=delete</argsstring>
        <name>Arena</name>
        <param>
          <type>const <ref refid="classamrex_1_1Arena" kindref="compound">Arena</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.H" line="106" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Arena_1a3e2c87e60ea734fe6be6e49d124d5a76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::Arena::Arena</definition>
        <argsstring>(Arena &amp;&amp;rhs)=delete</argsstring>
        <name>Arena</name>
        <param>
          <type><ref refid="classamrex_1_1Arena" kindref="compound">Arena</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.H" line="107" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Arena_1ab5c2f212500abb488cf4d14245c29aee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1Arena" kindref="compound">Arena</ref> &amp;</type>
        <definition>Arena&amp; amrex::Arena::operator=</definition>
        <argsstring>(const Arena &amp;rhs)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classamrex_1_1Arena" kindref="compound">Arena</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.H" line="108" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Arena_1a36dd09d6200de89dd8bb25b1cd223cb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1Arena" kindref="compound">Arena</ref> &amp;</type>
        <definition>Arena&amp; amrex::Arena::operator=</definition>
        <argsstring>(Arena &amp;&amp;rhs)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1Arena" kindref="compound">Arena</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.H" line="109" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Arena_1a46ce2cd5cfc039cec64548b031fbde2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void *</type>
        <definition>virtual void* amrex::Arena::alloc</definition>
        <argsstring>(std::size_t sz)=0</argsstring>
        <name>alloc</name>
        <reimplementedby refid="classamrex_1_1CArena_1a8d55773acd31606b385f0a524587bd1d">alloc</reimplementedby>
        <reimplementedby refid="classamrex_1_1PArena_1a221d8a8dd30da0cd6500d91d6c48742f">alloc</reimplementedby>
        <reimplementedby refid="classamrex_1_1BArena_1ac5b992935b798555e12f3ed280420c5b">alloc</reimplementedby>
        <reimplementedby refid="classamrex_1_1detail_1_1SingleChunkArena_1a1a40bc13e5fda7545591fa3b7cc50a04">alloc</reimplementedby>
        <param>
          <type>std::size_t</type>
          <declname>sz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allocate a dynamic memory arena <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sz</parametername>
</parameternamelist>
<parameterdescription>
<para>size of the memory request </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pointer to the allocated memory </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.H" line="116" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Arena_1aabdec69d9448201fc6c85635ea6f18b7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>std::pair&lt; void *, std::size_t &gt;</type>
        <definition>virtual std::pair&lt;void*,std::size_t&gt; amrex::Arena::alloc_in_place</definition>
        <argsstring>(void *, std::size_t, std::size_t szmax)</argsstring>
        <name>alloc_in_place</name>
        <reimplementedby refid="classamrex_1_1CArena_1a61c3deadcb0c3c69b91ecec373b086ee">alloc_in_place</reimplementedby>
        <param>
          <type>void *</type>
        </param>
        <param>
          <type>std::size_t</type>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>szmax</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Try to allocate in-place by extending the capacity of given pointer. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.H" line="122" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.H" bodystart="122" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Arena_1a1fec80ed73e43de305a5e232e0b551a6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void *</type>
        <definition>virtual void* amrex::Arena::shrink_in_place</definition>
        <argsstring>(void *, std::size_t sz)</argsstring>
        <name>shrink_in_place</name>
        <reimplementedby refid="classamrex_1_1CArena_1a39b6596c9fb986503f9e782ff67ecd40">shrink_in_place</reimplementedby>
        <param>
          <type>void *</type>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>sz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Try to shrink in-place </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.H" line="132" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.H" bodystart="132" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Arena_1a0c7e0730574c98febb6ddca2712cb515" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void amrex::Arena::free</definition>
        <argsstring>(void *pt)=0</argsstring>
        <name>free</name>
        <reimplementedby refid="classamrex_1_1PArena_1a6ac9509d9d473110db4f19a62d958b3b">free</reimplementedby>
        <reimplementedby refid="classamrex_1_1BArena_1a423a57e61bf30c0dd08c5b03042306ff">free</reimplementedby>
        <reimplementedby refid="classamrex_1_1detail_1_1SingleChunkArena_1abd7291506933a08740bb9b2abbc5ef98">free</reimplementedby>
        <reimplementedby refid="classamrex_1_1CArena_1a92c318e660a559a2c8d4dc75ba2bc658">free</reimplementedby>
        <param>
          <type>void *</type>
          <declname>pt</declname>
        </param>
        <briefdescription>
<para>A pure virtual function for deleting the arena pointed to by pt. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.H" line="140" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Arena_1ae58dbb9ab6bb4e8d980b384b0d8804e5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>std::size_t</type>
        <definition>virtual std::size_t amrex::Arena::freeUnused</definition>
        <argsstring>()</argsstring>
        <name>freeUnused</name>
        <reimplementedby refid="classamrex_1_1CArena_1a7e9429cce47c95ae5f8d8d379ffe6184">freeUnused</reimplementedby>
        <briefdescription>
<para>Free unused memory back to the system. Return value is the amount memory freed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.H" line="146" column="25" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.H" bodystart="146" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Arena_1afa7c9e223346f671eb055b3ce8580e56" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool amrex::Arena::isDeviceAccessible</definition>
        <argsstring>() const</argsstring>
        <name>isDeviceAccessible</name>
        <reimplementedby refid="classamrex_1_1BArena_1ad0656effeaa29bac32c44198b8922f0f">isDeviceAccessible</reimplementedby>
        <reimplementedby refid="classamrex_1_1PArena_1a97ff3b21f09c80a942c96176b5507b46">isDeviceAccessible</reimplementedby>
        <reimplementedby refid="classamrex_1_1detail_1_1SingleChunkArena_1a7f18c58c24d1b6966057125c4758a2a4">isDeviceAccessible</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.H" line="149" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.cpp" bodystart="57" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Arena_1a40d897685d407918d2d6143b5301a525" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool amrex::Arena::isHostAccessible</definition>
        <argsstring>() const</argsstring>
        <name>isHostAccessible</name>
        <reimplementedby refid="classamrex_1_1BArena_1a84fc546372485495fe7eca80c08764e6">isHostAccessible</reimplementedby>
        <reimplementedby refid="classamrex_1_1PArena_1ac052582015bfe8bc0e29565fb901f238">isHostAccessible</reimplementedby>
        <reimplementedby refid="classamrex_1_1detail_1_1SingleChunkArena_1a1c7a6c7a2a82e1c705442baa09e84560">isHostAccessible</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.H" line="150" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.cpp" bodystart="67" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Arena_1a7119489f4464f902d907f6dfe9716909" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool amrex::Arena::isManaged</definition>
        <argsstring>() const</argsstring>
        <name>isManaged</name>
        <reimplementedby refid="classamrex_1_1BArena_1a56c8b6538282b4a56466b9053065b3e0">isManaged</reimplementedby>
        <reimplementedby refid="classamrex_1_1PArena_1a5bc7b26bd1f96e5d87de04034e23a4bb">isManaged</reimplementedby>
        <reimplementedby refid="classamrex_1_1detail_1_1SingleChunkArena_1ae6b2985298ea93f8412c8a21da3443ec">isManaged</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.H" line="155" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.cpp" bodystart="79" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Arena_1aa45555e396ee74158b0c6f3331ce5536" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool amrex::Arena::isDevice</definition>
        <argsstring>() const</argsstring>
        <name>isDevice</name>
        <reimplementedby refid="classamrex_1_1BArena_1abf63d084f8e220d01d53b543f7f93bc6">isDevice</reimplementedby>
        <reimplementedby refid="classamrex_1_1PArena_1afed5d46f95e13e00cb4c268007d0a8ed">isDevice</reimplementedby>
        <reimplementedby refid="classamrex_1_1detail_1_1SingleChunkArena_1acdc9d343c34ebda8c4c0a78e0e6924d1">isDevice</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.H" line="156" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.cpp" bodystart="91" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Arena_1a336e271c5a07296e4c2866d194111784" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool amrex::Arena::isPinned</definition>
        <argsstring>() const</argsstring>
        <name>isPinned</name>
        <reimplementedby refid="classamrex_1_1BArena_1a4089e5008457c5f04ee4acfc430b3f37">isPinned</reimplementedby>
        <reimplementedby refid="classamrex_1_1PArena_1a8edd3549a2cf5e689d5078e5f355b8a1">isPinned</reimplementedby>
        <reimplementedby refid="classamrex_1_1detail_1_1SingleChunkArena_1a08324a9f9d1c2b9e7d81b3ef8e8d4ad5">isPinned</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.H" line="157" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.cpp" bodystart="103" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Arena_1abd6b026129f35157aa2b3945a37bdbd3" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool amrex::Arena::hasFreeDeviceMemory</definition>
        <argsstring>(std::size_t sz)</argsstring>
        <name>hasFreeDeviceMemory</name>
        <reimplementedby refid="classamrex_1_1CArena_1ac778bcf5399be4884d6a2cf35cc5c9f3">hasFreeDeviceMemory</reimplementedby>
        <param>
          <type>std::size_t</type>
          <declname>sz</declname>
        </param>
        <briefdescription>
<para>Does the device have enough free memory for allocating this much memory? For CPU builds, this always return true. This is not a const function because it may attempt to release memory back to the system. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.H" line="165" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.cpp" bodystart="114" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Arena_1a99982885760cd861e6e860dea40ea64f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Arena::registerForProfiling</definition>
        <argsstring>(const std::string &amp;memory_name)</argsstring>
        <name>registerForProfiling</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>memory_name</declname>
        </param>
        <briefdescription>
<para>Add this <ref refid="classamrex_1_1Arena" kindref="compound">Arena</ref> to the list of Arenas that are profiled by <ref refid="classamrex_1_1TinyProfiler" kindref="compound">TinyProfiler</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>memory_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of this arena in the <ref refid="classamrex_1_1TinyProfiler" kindref="compound">TinyProfiler</ref> output. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.H" line="171" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.cpp" bodystart="120" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Arena_1a76f2f99b3aa712fe5da7b00610c07385" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Arena::deregisterFromProfiling</definition>
        <argsstring>()</argsstring>
        <name>deregisterFromProfiling</name>
        <briefdescription>
<para>Remove this <ref refid="classamrex_1_1Arena" kindref="compound">Arena</ref> from the list of Arenas that are profiled by <ref refid="classamrex_1_1TinyProfiler" kindref="compound">TinyProfiler</ref>. This is equivalent to destructing and re-constructing the <ref refid="classamrex_1_1Arena" kindref="compound">Arena</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.H" line="177" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.cpp" bodystart="130" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Arena_1a45cb8a8f57250c6858412296275c8dbb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool amrex::Arena::isStreamOrderedArena</definition>
        <argsstring>() const</argsstring>
        <name>isStreamOrderedArena</name>
        <reimplementedby refid="classamrex_1_1PArena_1a608c3335c824b9524c374173358bf25a">isStreamOrderedArena</reimplementedby>
        <briefdescription>
<para>Is this GPU stream ordered memory allocator? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.H" line="181" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.H" bodystart="181" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Arena_1a1af72a36a13904de0715917915db1f6b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="structamrex_1_1ArenaInfo" kindref="compound">ArenaInfo</ref> &amp;</type>
        <definition>const ArenaInfo&amp; amrex::Arena::arenaInfo</definition>
        <argsstring>() const</argsstring>
        <name>arenaInfo</name>
        <briefdescription>
<para>Return the <ref refid="structamrex_1_1ArenaInfo" kindref="compound">ArenaInfo</ref> object for querying. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.H" line="211" column="22" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.H" bodystart="211" bodyend="211"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classamrex_1_1Arena_1a253c417e0bd2863509c75d6250468a4e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t amrex::Arena::align</definition>
        <argsstring>(std::size_t sz)</argsstring>
        <name>align</name>
        <param>
          <type>std::size_t</type>
          <declname>sz</declname>
        </param>
        <briefdescription>
<para>Given a minimum required arena size of sz bytes, this returns the next largest arena size that will align to align_size bytes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.H" line="188" column="24" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.cpp" bodystart="143" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Arena_1a9f40990a545f4d280e905117fc6a0786" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Arena::Initialize</definition>
        <argsstring>()</argsstring>
        <name>Initialize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.H" line="190" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.cpp" bodystart="283" bodyend="429"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Arena_1a506a68384da30629323d0839f13812c2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Arena::PrintUsage</definition>
        <argsstring>()</argsstring>
        <name>PrintUsage</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.H" line="191" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.cpp" bodystart="432" bodyend="492"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Arena_1aa1cfbcfa1c41ac7e45bf469e93db7402" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Arena::PrintUsageToFiles</definition>
        <argsstring>(std::string const &amp;filename, std::string const &amp;message)</argsstring>
        <name>PrintUsageToFiles</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>message</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.H" line="192" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.cpp" bodystart="495" bodyend="546"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Arena_1a06dd6197d2081d7dd4c1bed308edd387" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Arena::Finalize</definition>
        <argsstring>()</argsstring>
        <name>Finalize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.H" line="193" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.cpp" bodystart="549" bodyend="606"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classamrex_1_1Arena_1a881f97d5676c4784f52d6f4c702da696" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>std::size_t</type>
        <definition>virtual std::size_t amrex::Arena::freeUnused_protected</definition>
        <argsstring>()</argsstring>
        <name>freeUnused_protected</name>
        <reimplementedby refid="classamrex_1_1CArena_1a496e3022b2c758f0f8cde7b20f954066">freeUnused_protected</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.H" line="217" column="25" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.H" bodystart="217" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Arena_1afc721e195430f79b2d1b287c490ef0fb" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * amrex::Arena::allocate_system</definition>
        <argsstring>(std::size_t nbytes)</argsstring>
        <name>allocate_system</name>
        <param>
          <type>std::size_t</type>
          <declname>nbytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.H" line="218" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.cpp" bodystart="149" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Arena_1ac07ba8cda253cddee3cab1168ac65694" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Arena::deallocate_system</definition>
        <argsstring>(void *p, std::size_t nbytes)</argsstring>
        <name>deallocate_system</name>
        <param>
          <type>void *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>nbytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.H" line="219" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.cpp" bodystart="232" bodyend="258"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A virtual base class for objects that manage their own dynamic memory allocation. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>amrex::Arena</label>
        <link refid="classamrex_1_1Arena"/>
      </node>
      <node id="5">
        <label>amrex::detail::SingleChunkArena</label>
        <link refid="classamrex_1_1detail_1_1SingleChunkArena"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>amrex::BArena</label>
        <link refid="classamrex_1_1BArena"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>amrex::PArena</label>
        <link refid="classamrex_1_1PArena"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>amrex::CArena</label>
        <link refid="classamrex_1_1CArena"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="9">
        <label>amrex::ArenaInfo</label>
        <link refid="structamrex_1_1ArenaInfo"/>
      </node>
      <node id="1">
        <label>amrex::Arena</label>
        <link refid="classamrex_1_1Arena"/>
        <childnode refid="2" relation="usage">
          <edgelabel>m_profiler</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>arena_info</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="2">
        <label>amrex::Arena::ArenaProfiler</label>
        <link refid="structamrex_1_1Arena_1_1ArenaProfiler"/>
        <childnode refid="3" relation="usage">
          <edgelabel>m_currently_allocated</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>m_arena_profiler_mutex</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>m_profiling_stats</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>std::unordered_map&lt; void *, std::pair&lt; amrex::MemStat *, std::size_t &gt; &gt;</label>
      </node>
      <node id="4">
        <label>std::mutex</label>
      </node>
      <node id="6">
        <label>amrex::MemStat</label>
        <link refid="structamrex_1_1MemStat"/>
      </node>
      <node id="7">
        <label>std::string</label>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>std::map&lt; std::string, amrex::MemStat &gt;</label>
        <childnode refid="6" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.H" line="99" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.H" bodystart="100" bodyend="243"/>
    <listofallmembers>
      <member refid="classamrex_1_1Arena_1a253c417e0bd2863509c75d6250468a4e" prot="public" virt="non-virtual"><scope>amrex::Arena</scope><name>align</name></member>
      <member refid="classamrex_1_1Arena_1a4b2f3b31e81e52426aef615cb2aaa7b7" prot="public" virt="non-virtual"><scope>amrex::Arena</scope><name>align_size</name></member>
      <member refid="classamrex_1_1Arena_1a46ce2cd5cfc039cec64548b031fbde2e" prot="public" virt="pure-virtual"><scope>amrex::Arena</scope><name>alloc</name></member>
      <member refid="classamrex_1_1Arena_1aabdec69d9448201fc6c85635ea6f18b7" prot="public" virt="virtual"><scope>amrex::Arena</scope><name>alloc_in_place</name></member>
      <member refid="classamrex_1_1Arena_1afc721e195430f79b2d1b287c490ef0fb" prot="protected" virt="non-virtual"><scope>amrex::Arena</scope><name>allocate_system</name></member>
      <member refid="classamrex_1_1Arena_1a2e2407d56d1710a0029928c776b27682" prot="public" virt="non-virtual"><scope>amrex::Arena</scope><name>Arena</name></member>
      <member refid="classamrex_1_1Arena_1a57de8f5ef86cceadc9f1c00bc7ea7790" prot="public" virt="non-virtual"><scope>amrex::Arena</scope><name>Arena</name></member>
      <member refid="classamrex_1_1Arena_1a3e2c87e60ea734fe6be6e49d124d5a76" prot="public" virt="non-virtual"><scope>amrex::Arena</scope><name>Arena</name></member>
      <member refid="classamrex_1_1Arena_1aeb2158ba443c9b23ba0d12bcf38a66e1" prot="protected" virt="non-virtual"><scope>amrex::Arena</scope><name>arena_info</name></member>
      <member refid="classamrex_1_1Arena_1a1af72a36a13904de0715917915db1f6b" prot="public" virt="non-virtual"><scope>amrex::Arena</scope><name>arenaInfo</name></member>
      <member refid="classamrex_1_1Arena_1ac07ba8cda253cddee3cab1168ac65694" prot="protected" virt="non-virtual"><scope>amrex::Arena</scope><name>deallocate_system</name></member>
      <member refid="classamrex_1_1Arena_1a76f2f99b3aa712fe5da7b00610c07385" prot="public" virt="non-virtual"><scope>amrex::Arena</scope><name>deregisterFromProfiling</name></member>
      <member refid="classamrex_1_1Arena_1a06dd6197d2081d7dd4c1bed308edd387" prot="public" virt="non-virtual"><scope>amrex::Arena</scope><name>Finalize</name></member>
      <member refid="classamrex_1_1Arena_1a0c7e0730574c98febb6ddca2712cb515" prot="public" virt="pure-virtual"><scope>amrex::Arena</scope><name>free</name></member>
      <member refid="classamrex_1_1Arena_1ae58dbb9ab6bb4e8d980b384b0d8804e5" prot="public" virt="virtual"><scope>amrex::Arena</scope><name>freeUnused</name></member>
      <member refid="classamrex_1_1Arena_1a881f97d5676c4784f52d6f4c702da696" prot="protected" virt="virtual"><scope>amrex::Arena</scope><name>freeUnused_protected</name></member>
      <member refid="classamrex_1_1Arena_1abd6b026129f35157aa2b3945a37bdbd3" prot="public" virt="virtual"><scope>amrex::Arena</scope><name>hasFreeDeviceMemory</name></member>
      <member refid="classamrex_1_1Arena_1a9f40990a545f4d280e905117fc6a0786" prot="public" virt="non-virtual"><scope>amrex::Arena</scope><name>Initialize</name></member>
      <member refid="classamrex_1_1Arena_1aa45555e396ee74158b0c6f3331ce5536" prot="public" virt="virtual"><scope>amrex::Arena</scope><name>isDevice</name></member>
      <member refid="classamrex_1_1Arena_1afa7c9e223346f671eb055b3ce8580e56" prot="public" virt="virtual"><scope>amrex::Arena</scope><name>isDeviceAccessible</name></member>
      <member refid="classamrex_1_1Arena_1a40d897685d407918d2d6143b5301a525" prot="public" virt="virtual"><scope>amrex::Arena</scope><name>isHostAccessible</name></member>
      <member refid="classamrex_1_1Arena_1a7119489f4464f902d907f6dfe9716909" prot="public" virt="virtual"><scope>amrex::Arena</scope><name>isManaged</name></member>
      <member refid="classamrex_1_1Arena_1a336e271c5a07296e4c2866d194111784" prot="public" virt="virtual"><scope>amrex::Arena</scope><name>isPinned</name></member>
      <member refid="classamrex_1_1Arena_1a45cb8a8f57250c6858412296275c8dbb" prot="public" virt="virtual"><scope>amrex::Arena</scope><name>isStreamOrderedArena</name></member>
      <member refid="classamrex_1_1Arena_1ad136b691382e7a7d8fba158837416b98" prot="protected" virt="non-virtual"><scope>amrex::Arena</scope><name>m_profiler</name></member>
      <member refid="classamrex_1_1Arena_1ab5c2f212500abb488cf4d14245c29aee" prot="public" virt="non-virtual"><scope>amrex::Arena</scope><name>operator=</name></member>
      <member refid="classamrex_1_1Arena_1a36dd09d6200de89dd8bb25b1cd223cb5" prot="public" virt="non-virtual"><scope>amrex::Arena</scope><name>operator=</name></member>
      <member refid="classamrex_1_1Arena_1a506a68384da30629323d0839f13812c2" prot="public" virt="non-virtual"><scope>amrex::Arena</scope><name>PrintUsage</name></member>
      <member refid="classamrex_1_1Arena_1aa1cfbcfa1c41ac7e45bf469e93db7402" prot="public" virt="non-virtual"><scope>amrex::Arena</scope><name>PrintUsageToFiles</name></member>
      <member refid="classamrex_1_1Arena_1a99982885760cd861e6e860dea40ea64f" prot="public" virt="non-virtual"><scope>amrex::Arena</scope><name>registerForProfiling</name></member>
      <member refid="classamrex_1_1Arena_1a1fec80ed73e43de305a5e232e0b551a6" prot="public" virt="virtual"><scope>amrex::Arena</scope><name>shrink_in_place</name></member>
      <member refid="classamrex_1_1Arena_1a327e7541e6291ce735c03392b21931b6" prot="public" virt="virtual"><scope>amrex::Arena</scope><name>~Arena</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
