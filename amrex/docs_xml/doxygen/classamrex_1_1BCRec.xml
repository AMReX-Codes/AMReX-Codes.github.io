<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classamrex_1_1BCRec" kind="class" language="C++" prot="public">
    <compoundname>amrex::BCRec</compoundname>
    <includes refid="AMReX__BCRec_8H" local="no">AMReX_BCRec.H</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1BCRec_1adb5fc84ac2f9e43e15f6cc05ed2216f5" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::BCRec::bc[2 *AMREX_SPACEDIM]</definition>
        <argsstring>[2 *AMREX_SPACEDIM]</argsstring>
        <name>bc</name>
        <briefdescription>
<para>Array of integer values describing boundary conditions. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BCRec.H" line="135" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BCRec.H" bodystart="135" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1BCRec_1a7b88c4e0a73fd48c11cd4a549c1670a2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE amrex::BCRec::BCRec</definition>
        <argsstring>() noexcept</argsstring>
        <name>BCRec</name>
        <briefdescription>
<para>The default constructor, which does NOT set valid boundary types. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BCRec.H" line="24" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BCRec.H" bodystart="24" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BCRec_1aa5257e844dbc3d0b0b444cc570f01771" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE amrex::BCRec::BCRec</definition>
        <argsstring>(AMREX_D_DECL(int loX, int loY, int loZ), AMREX_D_DECL(int hiX, int hiY, int hiZ)) noexcept</argsstring>
        <name>BCRec</name>
        <param>
          <type><ref refid="namespaceamrex_1a8de829410ed15dbc56e4dafc9bc6ea69a68b0c60ae4f5670ee8d0ad5dda84d0fd" kindref="member">AMREX_D_DECL</ref>(<ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> loX, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> loY, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> loZ)</type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a8de829410ed15dbc56e4dafc9bc6ea69a68b0c60ae4f5670ee8d0ad5dda84d0fd" kindref="member">AMREX_D_DECL</ref>(<ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> hiX, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> hiY, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> hiZ)</type>
        </param>
        <briefdescription>
<para>The constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BCRec.H" line="32" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BCRec.H" bodystart="32" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BCRec_1ae1576e0b559f11a37341daf6c66ab4ba" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE amrex::BCRec::BCRec</definition>
        <argsstring>(const int *a_lo, const int *a_hi) noexcept</argsstring>
        <name>BCRec</name>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
          <declname>a_lo</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
          <declname>a_hi</declname>
        </param>
        <briefdescription>
<para>Another constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BCRec.H" line="41" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BCRec.H" bodystart="41" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BCRec_1ad2a7c418c7fb23e464b9cc5a8761f741" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE amrex::BCRec::BCRec</definition>
        <argsstring>(const Box &amp;bx, const Box &amp;domain, const BCRec &amp;bc_domain) noexcept</argsstring>
        <name>BCRec</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>domain</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> &amp;</type>
          <declname>bc_domain</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BCRec.H" line="50" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BCRec.H" bodystart="50" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BCRec_1a7b9f9505622e2fa14b13aebd7f417d8f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::BCRec::setLo</definition>
        <argsstring>(int dir, int bc_val) noexcept</argsstring>
        <name>setLo</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>bc_val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BCRec.H" line="70" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BCRec.H" bodystart="70" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BCRec_1a0d3a7e55c3bd28f808e3d130879f762e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::BCRec::setHi</definition>
        <argsstring>(int dir, int bc_val) noexcept</argsstring>
        <name>setHi</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>bc_val</declname>
        </param>
        <briefdescription>
<para>Explicitly set hi bndry value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BCRec.H" line="75" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BCRec.H" bodystart="75" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BCRec_1a3a8e11f7ca6df497a8fa29179b7f85fa" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE const int* amrex::BCRec::vect</definition>
        <argsstring>() const &amp;noexcept</argsstring>
        <name>vect</name>
        <briefdescription>
<para>Return bndry values (used in calls to FORTRAN). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BCRec.H" line="80" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BCRec.H" bodystart="80" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BCRec_1adfdfaa53c102691ab684e97bcb51e188" prot="public" static="no" const="no" explicit="no" inline="no" refqual="rvalue" virt="non-virtual">
        <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
        <definition>const int* amrex::BCRec::vect</definition>
        <argsstring>() &amp;&amp;=delete</argsstring>
        <name>vect</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BCRec.H" line="81" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BCRec_1ac52da52fb6620c12950356fb0ac0aaf7" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE const int* amrex::BCRec::data</definition>
        <argsstring>() const &amp;noexcept</argsstring>
        <name>data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BCRec.H" line="84" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BCRec.H" bodystart="84" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BCRec_1a273ad3699cd14ecb14a4bb02e8345bc9" prot="public" static="no" const="no" explicit="no" inline="no" refqual="rvalue" virt="non-virtual">
        <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
        <definition>const int* amrex::BCRec::data</definition>
        <argsstring>() &amp;&amp;=delete</argsstring>
        <name>data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BCRec.H" line="85" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BCRec_1ae0818ccc6f8443bdaa7abee52a6b4678" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE const int* amrex::BCRec::lo</definition>
        <argsstring>() const &amp;noexcept</argsstring>
        <name>lo</name>
        <briefdescription>
<para>Return low-end boundary data. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BCRec.H" line="91" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BCRec.H" bodystart="91" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BCRec_1a28f03096d6b1b7373a48b7079ae94e67" prot="public" static="no" const="no" explicit="no" inline="no" refqual="rvalue" virt="non-virtual">
        <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
        <definition>const int* amrex::BCRec::lo</definition>
        <argsstring>() &amp;&amp;=delete</argsstring>
        <name>lo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BCRec.H" line="92" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BCRec_1a102dea5bc859f0879efd400c515b2ebc" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE const int* amrex::BCRec::hi</definition>
        <argsstring>() const &amp;noexcept</argsstring>
        <name>hi</name>
        <briefdescription>
<para>Return high-end boundary data. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BCRec.H" line="97" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BCRec.H" bodystart="97" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BCRec_1a23fa6708f4738b051d9622fdef773112" prot="public" static="no" const="no" explicit="no" inline="no" refqual="rvalue" virt="non-virtual">
        <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
        <definition>const int* amrex::BCRec::hi</definition>
        <argsstring>() &amp;&amp;=delete</argsstring>
        <name>hi</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BCRec.H" line="98" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BCRec_1ac75d317389a2ae2a793dd69194557a50" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE int amrex::BCRec::lo</definition>
        <argsstring>(int dir) const noexcept</argsstring>
        <name>lo</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Return low-end boundary data in direction &lt;dir&gt;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BCRec.H" line="103" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BCRec.H" bodystart="103" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BCRec_1aeb4617ca6fae4cb3d2840611d77f1f59" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE int amrex::BCRec::hi</definition>
        <argsstring>(int dir) const noexcept</argsstring>
        <name>hi</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Return high-end boundary data in direction &lt;dir&gt;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BCRec.H" line="108" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BCRec.H" bodystart="108" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BCRec_1a8b138bbeeb2436431a73d8c605e4a15d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE bool amrex::BCRec::operator==</definition>
        <argsstring>(const BCRec &amp;rhs) const noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Equal test. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BCRec.H" line="113" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BCRec.H" bodystart="113" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BCRec_1a7dbcd8a4547e0ba1341506dddf491538" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE bool amrex::BCRec::operator!=</definition>
        <argsstring>(const BCRec &amp;rhs) const noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Not equal test. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BCRec.H" line="125" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BCRec.H" bodystart="125" bodyend="125"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classamrex_1_1BCRec_1a685becdfc4b358ad1776be6a0c02fe16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;, const BCRec &amp;)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <defname>os</defname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> &amp;</type>
          <defname>b</defname>
        </param>
        <briefdescription>
<para>ASCII write to ostream. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BCRec.H" line="129" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BCRec.cpp" bodystart="36" bodyend="46"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Boundary Condition Records. Necessary information and functions for computing boundary conditions. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BCRec.H" line="18" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BCRec.H" bodystart="17" bodyend="136"/>
    <listofallmembers>
      <member refid="classamrex_1_1BCRec_1adb5fc84ac2f9e43e15f6cc05ed2216f5" prot="private" virt="non-virtual"><scope>amrex::BCRec</scope><name>bc</name></member>
      <member refid="classamrex_1_1BCRec_1a7b88c4e0a73fd48c11cd4a549c1670a2" prot="public" virt="non-virtual"><scope>amrex::BCRec</scope><name>BCRec</name></member>
      <member refid="classamrex_1_1BCRec_1aa5257e844dbc3d0b0b444cc570f01771" prot="public" virt="non-virtual"><scope>amrex::BCRec</scope><name>BCRec</name></member>
      <member refid="classamrex_1_1BCRec_1ae1576e0b559f11a37341daf6c66ab4ba" prot="public" virt="non-virtual"><scope>amrex::BCRec</scope><name>BCRec</name></member>
      <member refid="classamrex_1_1BCRec_1ad2a7c418c7fb23e464b9cc5a8761f741" prot="public" virt="non-virtual"><scope>amrex::BCRec</scope><name>BCRec</name></member>
      <member refid="classamrex_1_1BCRec_1ac52da52fb6620c12950356fb0ac0aaf7" prot="public" virt="non-virtual"><scope>amrex::BCRec</scope><name>data</name></member>
      <member refid="classamrex_1_1BCRec_1a273ad3699cd14ecb14a4bb02e8345bc9" prot="public" virt="non-virtual"><scope>amrex::BCRec</scope><name>data</name></member>
      <member refid="classamrex_1_1BCRec_1a102dea5bc859f0879efd400c515b2ebc" prot="public" virt="non-virtual"><scope>amrex::BCRec</scope><name>hi</name></member>
      <member refid="classamrex_1_1BCRec_1a23fa6708f4738b051d9622fdef773112" prot="public" virt="non-virtual"><scope>amrex::BCRec</scope><name>hi</name></member>
      <member refid="classamrex_1_1BCRec_1aeb4617ca6fae4cb3d2840611d77f1f59" prot="public" virt="non-virtual"><scope>amrex::BCRec</scope><name>hi</name></member>
      <member refid="classamrex_1_1BCRec_1ae0818ccc6f8443bdaa7abee52a6b4678" prot="public" virt="non-virtual"><scope>amrex::BCRec</scope><name>lo</name></member>
      <member refid="classamrex_1_1BCRec_1a28f03096d6b1b7373a48b7079ae94e67" prot="public" virt="non-virtual"><scope>amrex::BCRec</scope><name>lo</name></member>
      <member refid="classamrex_1_1BCRec_1ac75d317389a2ae2a793dd69194557a50" prot="public" virt="non-virtual"><scope>amrex::BCRec</scope><name>lo</name></member>
      <member refid="classamrex_1_1BCRec_1a7dbcd8a4547e0ba1341506dddf491538" prot="public" virt="non-virtual"><scope>amrex::BCRec</scope><name>operator!=</name></member>
      <member refid="classamrex_1_1BCRec_1a685becdfc4b358ad1776be6a0c02fe16" prot="public" virt="non-virtual"><scope>amrex::BCRec</scope><name>operator&lt;&lt;</name></member>
      <member refid="classamrex_1_1BCRec_1a8b138bbeeb2436431a73d8c605e4a15d" prot="public" virt="non-virtual"><scope>amrex::BCRec</scope><name>operator==</name></member>
      <member refid="classamrex_1_1BCRec_1a0d3a7e55c3bd28f808e3d130879f762e" prot="public" virt="non-virtual"><scope>amrex::BCRec</scope><name>setHi</name></member>
      <member refid="classamrex_1_1BCRec_1a7b9f9505622e2fa14b13aebd7f417d8f" prot="public" virt="non-virtual"><scope>amrex::BCRec</scope><name>setLo</name></member>
      <member refid="classamrex_1_1BCRec_1a3a8e11f7ca6df497a8fa29179b7f85fa" prot="public" virt="non-virtual"><scope>amrex::BCRec</scope><name>vect</name></member>
      <member refid="classamrex_1_1BCRec_1adfdfaa53c102691ab684e97bcb51e188" prot="public" virt="non-virtual"><scope>amrex::BCRec</scope><name>vect</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
