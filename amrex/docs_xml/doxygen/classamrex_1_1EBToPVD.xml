<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classamrex_1_1EBToPVD" kind="class" language="C++" prot="public">
    <compoundname>amrex::EBToPVD</compoundname>
    <includes refid="AMReX__EBToPVD_8H" local="no">AMReX_EBToPVD.H</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1EBToPVD_1a37d083bd92c41f07f8e14c4ace3496e5" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::array&lt; Real, 3 &gt; &gt;</type>
        <definition>std::vector&lt;std::array&lt;Real,3&gt; &gt; amrex::EBToPVD::m_points</definition>
        <argsstring></argsstring>
        <name>m_points</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBToPVD.H" line="52" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBToPVD.H" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1EBToPVD_1aaa06cb6a74aa4b0f59ba1a5108665870" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::array&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, 7 &gt; &gt;</type>
        <definition>std::vector&lt;std::array&lt;int,7&gt; &gt; amrex::EBToPVD::m_connectivity</definition>
        <argsstring></argsstring>
        <name>m_connectivity</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBToPVD.H" line="53" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBToPVD.H" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1EBToPVD_1a3da49389826f1bbe7fcc5082d1e641a7" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::EBToPVD::m_grid</definition>
        <argsstring></argsstring>
        <name>m_grid</name>
        <initializer>{0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBToPVD.H" line="54" column="8" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBToPVD.H" bodystart="54" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1EBToPVD_1aee45f02c64e45397af7d92d3557e26e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::EBToPVD::EBToPVD</definition>
        <argsstring>()=default</argsstring>
        <name>EBToPVD</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBToPVD.H" line="17" column="4"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBToPVD_1ad8094e8ba844bca4f39cecff49aa5b86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EBToPVD::EBToPolygon</definition>
        <argsstring>(const Real *problo, const Real *dx, const Box &amp;bx, Array4&lt; EBCellFlag const &gt; const &amp;flag, Array4&lt; Real const &gt; const &amp;bcent, Array4&lt; Real const &gt; const &amp;apx, Array4&lt; Real const &gt; const &amp;apy, Array4&lt; Real const &gt; const &amp;apz)</argsstring>
        <name>EBToPolygon</name>
        <param>
          <type>const Real *</type>
          <declname>problo</declname>
        </param>
        <param>
          <type>const Real *</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> const &gt; const &amp;</type>
          <declname>flag</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcent</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBToPVD.H" line="19" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBToPVD.cpp" bodystart="27" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBToPVD_1a9795643b31358ac5f35c30f291d15adf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EBToPVD::WriteEBVTP</definition>
        <argsstring>(int myID) const</argsstring>
        <name>WriteEBVTP</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>myID</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBToPVD.H" line="24" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBToPVD.cpp" bodystart="187" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBToPVD_1a98aef451a26944bbc183885f613370e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EBToPVD::EBGridCoverage</definition>
        <argsstring>(int myID, const Real *problo, const Real *dx, const Box &amp;bx, Array4&lt; EBCellFlag const &gt; const &amp;flag)</argsstring>
        <name>EBGridCoverage</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>myID</declname>
        </param>
        <param>
          <type>const Real *</type>
          <declname>problo</declname>
        </param>
        <param>
          <type>const Real *</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> const &gt; const &amp;</type>
          <declname>flag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBToPVD.H" line="27" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBToPVD.cpp" bodystart="422" bodyend="493"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classamrex_1_1EBToPVD_1aa55d2d01fac1d3f0d6d489ec74f0698a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EBToPVD::WritePVTP</definition>
        <argsstring>(int nProcs)</argsstring>
        <name>WritePVTP</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nProcs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBToPVD.H" line="25" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBToPVD.cpp" bodystart="214" bodyend="239"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classamrex_1_1EBToPVD_1a275e5bd2322a1d3aace66481364de23a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EBToPVD::reorder_polygon</definition>
        <argsstring>(const std::vector&lt; std::array&lt; Real, 3 &gt;&gt; &amp;lpoints, std::array&lt; int, 7 &gt; &amp;lconnect, const std::array&lt; Real, 3 &gt; &amp;lnormal)</argsstring>
        <name>reorder_polygon</name>
        <param>
          <type>const std::vector&lt; std::array&lt; Real, 3 &gt;&gt; &amp;</type>
          <declname>lpoints</declname>
        </param>
        <param>
          <type>std::array&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, 7 &gt; &amp;</type>
          <declname>lconnect</declname>
        </param>
        <param>
          <type>const std::array&lt; Real, 3 &gt; &amp;</type>
          <declname>lnormal</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBToPVD.H" line="31" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBToPVD.cpp" bodystart="240" bodyend="315"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBToPVD_1af56069dd01a4a44b7f471f70f051887b" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EBToPVD::print_points</definition>
        <argsstring>(std::ofstream &amp;myfile) const</argsstring>
        <name>print_points</name>
        <param>
          <type>std::ofstream &amp;</type>
          <declname>myfile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBToPVD.H" line="48" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBToPVD.cpp" bodystart="384" bodyend="396"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBToPVD_1a4fc94184dd7d26f8ccb2fccdd8367474" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EBToPVD::print_connectivity</definition>
        <argsstring>(std::ofstream &amp;myfile) const</argsstring>
        <name>print_connectivity</name>
        <param>
          <type>std::ofstream &amp;</type>
          <declname>myfile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBToPVD.H" line="49" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBToPVD.cpp" bodystart="398" bodyend="420"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBToPVD_1a692701cba27f352589066c9024d388a7" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EBToPVD::print_grids</definition>
        <argsstring>(std::ofstream &amp;myfile) const</argsstring>
        <name>print_grids</name>
        <param>
          <type>std::ofstream &amp;</type>
          <declname>myfile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBToPVD.H" line="50" column="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classamrex_1_1EBToPVD_1a8e98228d4e26f46aaad5dca2c60d21b2" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EBToPVD::calc_hesse</definition>
        <argsstring>(Real &amp;distance, std::array&lt; Real, 3 &gt; &amp;n0, Real &amp;p, const std::array&lt; Real, 3 &gt; &amp;normal, const std::array&lt; Real, 3 &gt; &amp;centroid)</argsstring>
        <name>calc_hesse</name>
        <param>
          <type>Real &amp;</type>
          <declname>distance</declname>
        </param>
        <param>
          <type>std::array&lt; Real, 3 &gt; &amp;</type>
          <declname>n0</declname>
        </param>
        <param>
          <type>Real &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const std::array&lt; Real, 3 &gt; &amp;</type>
          <declname>normal</declname>
        </param>
        <param>
          <type>const std::array&lt; Real, 3 &gt; &amp;</type>
          <declname>centroid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBToPVD.H" line="35" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBToPVD.cpp" bodystart="317" bodyend="335"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBToPVD_1a2f2cc7f01b96bcdd7c3f7d3ecffeee20" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EBToPVD::calc_alpha</definition>
        <argsstring>(std::array&lt; Real, 12 &gt; &amp;alpha, const std::array&lt; Real, 3 &gt; &amp;n0, Real p, const std::array&lt; std::array&lt; Real, 3 &gt;, 8 &gt; &amp;vertex, const Real *dx)</argsstring>
        <name>calc_alpha</name>
        <param>
          <type>std::array&lt; Real, 12 &gt; &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const std::array&lt; Real, 3 &gt; &amp;</type>
          <declname>n0</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const std::array&lt; std::array&lt; Real, 3 &gt;, 8 &gt; &amp;</type>
          <declname>vertex</declname>
        </param>
        <param>
          <type>const Real *</type>
          <declname>dx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBToPVD.H" line="39" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBToPVD.cpp" bodystart="337" bodyend="368"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBToPVD_1ae6256aa448020ec87249a19972bc3b63" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EBToPVD::calc_intersects</definition>
        <argsstring>(int &amp;int_count, std::array&lt; bool, 12 &gt; &amp;intersects_flags, const std::array&lt; Real, 12 &gt; &amp;alpha)</argsstring>
        <name>calc_intersects</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &amp;</type>
          <declname>int_count</declname>
        </param>
        <param>
          <type>std::array&lt; bool, 12 &gt; &amp;</type>
          <declname>intersects_flags</declname>
        </param>
        <param>
          <type>const std::array&lt; Real, 12 &gt; &amp;</type>
          <declname>alpha</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBToPVD.H" line="45" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBToPVD.cpp" bodystart="370" bodyend="382"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>amrex::EBToPVD</label>
        <link refid="classamrex_1_1EBToPVD"/>
        <childnode refid="2" relation="usage">
          <edgelabel>m_connectivity</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>m_points</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>Real</label>
      </node>
      <node id="3">
        <label>std::array&lt; int, 7 &gt;</label>
      </node>
      <node id="4">
        <label>std::vector&lt; std::array&lt; Real, 3 &gt; &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>std::array&lt; Real, 3 &gt;</label>
        <childnode refid="6" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>std::vector&lt; std::array&lt; int, 7 &gt; &gt;</label>
        <childnode refid="3" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBToPVD.H" line="14" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBToPVD.H" bodystart="14" bodyend="56"/>
    <listofallmembers>
      <member refid="classamrex_1_1EBToPVD_1a2f2cc7f01b96bcdd7c3f7d3ecffeee20" prot="private" virt="non-virtual"><scope>amrex::EBToPVD</scope><name>calc_alpha</name></member>
      <member refid="classamrex_1_1EBToPVD_1a8e98228d4e26f46aaad5dca2c60d21b2" prot="private" virt="non-virtual"><scope>amrex::EBToPVD</scope><name>calc_hesse</name></member>
      <member refid="classamrex_1_1EBToPVD_1ae6256aa448020ec87249a19972bc3b63" prot="private" virt="non-virtual"><scope>amrex::EBToPVD</scope><name>calc_intersects</name></member>
      <member refid="classamrex_1_1EBToPVD_1a98aef451a26944bbc183885f613370e3" prot="public" virt="non-virtual"><scope>amrex::EBToPVD</scope><name>EBGridCoverage</name></member>
      <member refid="classamrex_1_1EBToPVD_1ad8094e8ba844bca4f39cecff49aa5b86" prot="public" virt="non-virtual"><scope>amrex::EBToPVD</scope><name>EBToPolygon</name></member>
      <member refid="classamrex_1_1EBToPVD_1aee45f02c64e45397af7d92d3557e26e6" prot="public" virt="non-virtual"><scope>amrex::EBToPVD</scope><name>EBToPVD</name></member>
      <member refid="classamrex_1_1EBToPVD_1aaa06cb6a74aa4b0f59ba1a5108665870" prot="private" virt="non-virtual"><scope>amrex::EBToPVD</scope><name>m_connectivity</name></member>
      <member refid="classamrex_1_1EBToPVD_1a3da49389826f1bbe7fcc5082d1e641a7" prot="private" virt="non-virtual"><scope>amrex::EBToPVD</scope><name>m_grid</name></member>
      <member refid="classamrex_1_1EBToPVD_1a37d083bd92c41f07f8e14c4ace3496e5" prot="private" virt="non-virtual"><scope>amrex::EBToPVD</scope><name>m_points</name></member>
      <member refid="classamrex_1_1EBToPVD_1a4fc94184dd7d26f8ccb2fccdd8367474" prot="private" virt="non-virtual"><scope>amrex::EBToPVD</scope><name>print_connectivity</name></member>
      <member refid="classamrex_1_1EBToPVD_1a692701cba27f352589066c9024d388a7" prot="private" virt="non-virtual"><scope>amrex::EBToPVD</scope><name>print_grids</name></member>
      <member refid="classamrex_1_1EBToPVD_1af56069dd01a4a44b7f471f70f051887b" prot="private" virt="non-virtual"><scope>amrex::EBToPVD</scope><name>print_points</name></member>
      <member refid="classamrex_1_1EBToPVD_1a275e5bd2322a1d3aace66481364de23a" prot="private" virt="non-virtual"><scope>amrex::EBToPVD</scope><name>reorder_polygon</name></member>
      <member refid="classamrex_1_1EBToPVD_1a9795643b31358ac5f35c30f291d15adf" prot="public" virt="non-virtual"><scope>amrex::EBToPVD</scope><name>WriteEBVTP</name></member>
      <member refid="classamrex_1_1EBToPVD_1aa55d2d01fac1d3f0d6d489ec74f0698a" prot="public" virt="non-virtual"><scope>amrex::EBToPVD</scope><name>WritePVTP</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
