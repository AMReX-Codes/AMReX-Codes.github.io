<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="structamrex_1_1ParticleIDWrapper" kind="struct" language="C++" prot="public">
    <compoundname>amrex::ParticleIDWrapper</compoundname>
    <includes refid="AMReX__Particle_8H" local="no">AMReX_Particle.H</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
        <defval>uint64_t</defval>
      </param>
    </templateparamlist>
    <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structamrex_1_1ParticleIDWrapper_1a9856422d2c1b29f226289b9646744d35" prot="public" static="no" mutable="no">
        <type>T *</type>
        <definition>T* amrex::ParticleIDWrapper&lt; T &gt;::m_idata</definition>
        <argsstring></argsstring>
        <name>m_idata</name>
        <qualifiedname>amrex::ParticleIDWrapper::m_idata</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="162" column="7" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="162" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="structamrex_1_1ParticleIDWrapper_1aaaf1d10ae585485275dc959b63f36268" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::ParticleIDWrapper&lt; T &gt;::~ParticleIDWrapper</definition>
        <argsstring>() noexcept=default</argsstring>
        <name>~ParticleIDWrapper</name>
        <qualifiedname>amrex::ParticleIDWrapper::~ParticleIDWrapper</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="164" column="5"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1ParticleIDWrapper_1a2cfe1d8a282906828833a1454945cf92" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE amrex::ParticleIDWrapper&lt; T &gt;::ParticleIDWrapper</definition>
        <argsstring>(T &amp;idata) noexcept</argsstring>
        <name>ParticleIDWrapper</name>
        <qualifiedname>amrex::ParticleIDWrapper::ParticleIDWrapper</qualifiedname>
        <param>
          <type>T &amp;</type>
          <declname>idata</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="167" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="167" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1ParticleIDWrapper_1a15b782647c3a2c008e39ea65606d7e1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE amrex::ParticleIDWrapper&lt; T &gt;::ParticleIDWrapper</definition>
        <argsstring>(const ParticleIDWrapper &amp;rhs)=default</argsstring>
        <name>ParticleIDWrapper</name>
        <qualifiedname>amrex::ParticleIDWrapper::ParticleIDWrapper</qualifiedname>
        <param>
          <type>const <ref refid="structamrex_1_1ParticleIDWrapper" kindref="compound">ParticleIDWrapper</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="172" column="5"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1ParticleIDWrapper_1ac3836bb90023bac2c8d16cb6031612a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::ParticleIDWrapper&lt; T &gt;::ParticleIDWrapper</definition>
        <argsstring>(ParticleIDWrapper &amp;&amp;)=delete</argsstring>
        <name>ParticleIDWrapper</name>
        <qualifiedname>amrex::ParticleIDWrapper::ParticleIDWrapper</qualifiedname>
        <param>
          <type><ref refid="structamrex_1_1ParticleIDWrapper" kindref="compound">ParticleIDWrapper</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="174" column="5"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1ParticleIDWrapper_1a1f291e97ce550156a57a75d5de6ae4ed" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1ParticleIDWrapper" kindref="compound">ParticleIDWrapper</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE ParticleIDWrapper &amp; amrex::ParticleIDWrapper&lt; T &gt;::operator=</definition>
        <argsstring>(const ParticleIDWrapper &amp;pidw) noexcept</argsstring>
        <name>operator=</name>
        <qualifiedname>amrex::ParticleIDWrapper::operator=</qualifiedname>
        <param>
          <type>const <ref refid="structamrex_1_1ParticleIDWrapper" kindref="compound">ParticleIDWrapper</ref> &amp;</type>
          <declname>pidw</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="177" column="23" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="177" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1ParticleIDWrapper_1aa7d460d1216feed9ef2cfe23cbcaebbe" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1ParticleIDWrapper" kindref="compound">ParticleIDWrapper</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE ParticleIDWrapper &amp; amrex::ParticleIDWrapper&lt; T &gt;::operator=</definition>
        <argsstring>(ParticleIDWrapper &amp;&amp;pidw) noexcept</argsstring>
        <name>operator=</name>
        <qualifiedname>amrex::ParticleIDWrapper::operator=</qualifiedname>
        <param>
          <type><ref refid="structamrex_1_1ParticleIDWrapper" kindref="compound">ParticleIDWrapper</ref> &amp;&amp;</type>
          <declname>pidw</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="183" column="23" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="183" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1ParticleIDWrapper_1a23a1cfeb8a7e5eae61e1c7663bbcc225" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1ParticleIDWrapper" kindref="compound">ParticleIDWrapper</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE ParticleIDWrapper &amp; amrex::ParticleIDWrapper&lt; T &gt;::operator=</definition>
        <argsstring>(const Long id) noexcept</argsstring>
        <name>operator=</name>
        <qualifiedname>amrex::ParticleIDWrapper::operator=</qualifiedname>
        <param>
          <type>const Long</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="189" column="23" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="189" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1ParticleIDWrapper_1a5571f2b090e4451a9e9c7dd24e212ec5" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE amrex::ParticleIDWrapper&lt; T &gt;::operator Long</definition>
        <argsstring>() const noexcept</argsstring>
        <name>operator Long</name>
        <qualifiedname>amrex::ParticleIDWrapper::operator Long</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="196" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="196" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1ParticleIDWrapper_1accce8cb7050e3b1988ac9211c3e8a388" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::ParticleIDWrapper&lt; T &gt;::make_invalid</definition>
        <argsstring>() const noexcept</argsstring>
        <name>make_invalid</name>
        <qualifiedname>amrex::ParticleIDWrapper::make_invalid</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Mark the particle as invalid</para>
<para>Swaps the is_valid (sign) bit to invalid. This is NOT identical to id = -id, but it is equally reversible via <ref refid="structamrex_1_1ParticleIDWrapper_1aa15d74b9a03e4f956b907d394140cd5a" kindref="member">make_valid()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="207" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="207" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1ParticleIDWrapper_1a467e2c2d32d37dbb267bb01ca52a4d7f" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_Bool</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::ParticleIDWrapper&lt; T &gt;::make_invalid</definition>
        <argsstring>(T_Bool const &amp;mask) const noexcept</argsstring>
        <name>make_invalid</name>
        <qualifiedname>amrex::ParticleIDWrapper::make_invalid</qualifiedname>
        <param>
          <type>T_Bool const &amp;</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Mark the particle as invalid</para>
<para>Swaps the is_valid (sign) bit to invalid. This is NOT identical to id = -id, but it is equally reversible via <ref refid="structamrex_1_1ParticleIDWrapper_1aa15d74b9a03e4f956b907d394140cd5a" kindref="member">make_valid()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="219" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="219" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1ParticleIDWrapper_1aa15d74b9a03e4f956b907d394140cd5a" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::ParticleIDWrapper&lt; T &gt;::make_valid</definition>
        <argsstring>() const noexcept</argsstring>
        <name>make_valid</name>
        <qualifiedname>amrex::ParticleIDWrapper::make_valid</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Mark the particle as valid</para>
<para>Swaps the is_valid (sign) bit to valid. This is NOT identical to id = -id, but it is equally reversible via <ref refid="structamrex_1_1ParticleIDWrapper_1accce8cb7050e3b1988ac9211c3e8a388" kindref="member">make_invalid()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="230" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="230" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1ParticleIDWrapper_1ab1674a22092a6276cb39b10db1ad3e0c" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_Bool</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::ParticleIDWrapper&lt; T &gt;::make_valid</definition>
        <argsstring>(T_Bool const &amp;mask) const noexcept</argsstring>
        <name>make_valid</name>
        <qualifiedname>amrex::ParticleIDWrapper::make_valid</qualifiedname>
        <param>
          <type>T_Bool const &amp;</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Mark the particle as valid</para>
<para>Swaps the is_valid (sign) bit to valid. This is NOT identical to id = -id, but it is equally reversible via <ref refid="structamrex_1_1ParticleIDWrapper_1accce8cb7050e3b1988ac9211c3e8a388" kindref="member">make_invalid()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="242" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="242" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1ParticleIDWrapper_1a22dd4bf7d9eb706b5893d22f63e56d5b" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE bool amrex::ParticleIDWrapper&lt; T &gt;::is_valid</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is_valid</name>
        <qualifiedname>amrex::ParticleIDWrapper::is_valid</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check the particle is valid, via the sign of the id.</para>
<para>Returns true if the particle is valid (the id is positive), otherwise false (invalid particle). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="252" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="252" bodyend="255"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="153" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="154" bodyend="256"/>
    <listofallmembers>
      <member refid="structamrex_1_1ParticleIDWrapper_1a22dd4bf7d9eb706b5893d22f63e56d5b" prot="public" virt="non-virtual"><scope>amrex::ParticleIDWrapper</scope><name>is_valid</name></member>
      <member refid="structamrex_1_1ParticleIDWrapper_1a9856422d2c1b29f226289b9646744d35" prot="public" virt="non-virtual"><scope>amrex::ParticleIDWrapper</scope><name>m_idata</name></member>
      <member refid="structamrex_1_1ParticleIDWrapper_1accce8cb7050e3b1988ac9211c3e8a388" prot="public" virt="non-virtual"><scope>amrex::ParticleIDWrapper</scope><name>make_invalid</name></member>
      <member refid="structamrex_1_1ParticleIDWrapper_1a467e2c2d32d37dbb267bb01ca52a4d7f" prot="public" virt="non-virtual"><scope>amrex::ParticleIDWrapper</scope><name>make_invalid</name></member>
      <member refid="structamrex_1_1ParticleIDWrapper_1aa15d74b9a03e4f956b907d394140cd5a" prot="public" virt="non-virtual"><scope>amrex::ParticleIDWrapper</scope><name>make_valid</name></member>
      <member refid="structamrex_1_1ParticleIDWrapper_1ab1674a22092a6276cb39b10db1ad3e0c" prot="public" virt="non-virtual"><scope>amrex::ParticleIDWrapper</scope><name>make_valid</name></member>
      <member refid="structamrex_1_1ParticleIDWrapper_1a5571f2b090e4451a9e9c7dd24e212ec5" prot="public" virt="non-virtual"><scope>amrex::ParticleIDWrapper</scope><name>operator Long</name></member>
      <member refid="structamrex_1_1ParticleIDWrapper_1a1f291e97ce550156a57a75d5de6ae4ed" prot="public" virt="non-virtual"><scope>amrex::ParticleIDWrapper</scope><name>operator=</name></member>
      <member refid="structamrex_1_1ParticleIDWrapper_1aa7d460d1216feed9ef2cfe23cbcaebbe" prot="public" virt="non-virtual"><scope>amrex::ParticleIDWrapper</scope><name>operator=</name></member>
      <member refid="structamrex_1_1ParticleIDWrapper_1a23a1cfeb8a7e5eae61e1c7663bbcc225" prot="public" virt="non-virtual"><scope>amrex::ParticleIDWrapper</scope><name>operator=</name></member>
      <member refid="structamrex_1_1ParticleIDWrapper_1a2cfe1d8a282906828833a1454945cf92" prot="public" virt="non-virtual"><scope>amrex::ParticleIDWrapper</scope><name>ParticleIDWrapper</name></member>
      <member refid="structamrex_1_1ParticleIDWrapper_1a15b782647c3a2c008e39ea65606d7e1c" prot="public" virt="non-virtual"><scope>amrex::ParticleIDWrapper</scope><name>ParticleIDWrapper</name></member>
      <member refid="structamrex_1_1ParticleIDWrapper_1ac3836bb90023bac2c8d16cb6031612a2" prot="public" virt="non-virtual"><scope>amrex::ParticleIDWrapper</scope><name>ParticleIDWrapper</name></member>
      <member refid="structamrex_1_1ParticleIDWrapper_1aaaf1d10ae585485275dc959b63f36268" prot="public" virt="non-virtual"><scope>amrex::ParticleIDWrapper</scope><name>~ParticleIDWrapper</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
