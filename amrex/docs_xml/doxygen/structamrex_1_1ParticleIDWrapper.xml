<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="structamrex_1_1ParticleIDWrapper" kind="struct" language="C++" prot="public">
    <compoundname>amrex::ParticleIDWrapper</compoundname>
    <includes refid="AMReX__Particle_8H" local="no">AMReX_Particle.H</includes>
    <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structamrex_1_1ParticleIDWrapper_1a2b585340461a43c8bed49aefc535f060" prot="public" static="no" mutable="no">
        <type>uint64_t *</type>
        <definition>uint64_t* amrex::ParticleIDWrapper::m_idata</definition>
        <argsstring></argsstring>
        <name>m_idata</name>
        <qualifiedname>amrex::ParticleIDWrapper::m_idata</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="111" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="111" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="structamrex_1_1ParticleIDWrapper_1a421b8df4ba4bef283d8b812c8a35e976" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::ParticleIDWrapper::~ParticleIDWrapper</definition>
        <argsstring>() noexcept=default</argsstring>
        <name>~ParticleIDWrapper</name>
        <qualifiedname>amrex::ParticleIDWrapper::~ParticleIDWrapper</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="113" column="5"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1ParticleIDWrapper_1a70c96c85021171e8ca0e31b75ba26885" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE amrex::ParticleIDWrapper::ParticleIDWrapper</definition>
        <argsstring>(uint64_t &amp;idata) noexcept</argsstring>
        <name>ParticleIDWrapper</name>
        <qualifiedname>amrex::ParticleIDWrapper::ParticleIDWrapper</qualifiedname>
        <param>
          <type>uint64_t &amp;</type>
          <declname>idata</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="116" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="116" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1ParticleIDWrapper_1a1be128a081a654e36673ae143e0c78cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE amrex::ParticleIDWrapper::ParticleIDWrapper</definition>
        <argsstring>(const ParticleIDWrapper &amp;rhs)=default</argsstring>
        <name>ParticleIDWrapper</name>
        <qualifiedname>amrex::ParticleIDWrapper::ParticleIDWrapper</qualifiedname>
        <param>
          <type>const <ref refid="structamrex_1_1ParticleIDWrapper" kindref="compound">ParticleIDWrapper</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="121" column="5"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1ParticleIDWrapper_1abe6eaeb579f55deb9eea2375bf0cdb4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::ParticleIDWrapper::ParticleIDWrapper</definition>
        <argsstring>(ParticleIDWrapper &amp;&amp;)=delete</argsstring>
        <name>ParticleIDWrapper</name>
        <qualifiedname>amrex::ParticleIDWrapper::ParticleIDWrapper</qualifiedname>
        <param>
          <type><ref refid="structamrex_1_1ParticleIDWrapper" kindref="compound">ParticleIDWrapper</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="123" column="5"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1ParticleIDWrapper_1a4a59ba259fcfe89a74b11f58565a26d7" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1ParticleIDWrapper" kindref="compound">ParticleIDWrapper</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE ParticleIDWrapper &amp; amrex::ParticleIDWrapper::operator=</definition>
        <argsstring>(const ParticleIDWrapper &amp;pidw) noexcept</argsstring>
        <name>operator=</name>
        <qualifiedname>amrex::ParticleIDWrapper::operator=</qualifiedname>
        <param>
          <type>const <ref refid="structamrex_1_1ParticleIDWrapper" kindref="compound">ParticleIDWrapper</ref> &amp;</type>
          <declname>pidw</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="126" column="23" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="126" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1ParticleIDWrapper_1a68a2a5ae8b56d41e9be78efa09ce54f6" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1ParticleIDWrapper" kindref="compound">ParticleIDWrapper</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE ParticleIDWrapper &amp; amrex::ParticleIDWrapper::operator=</definition>
        <argsstring>(ParticleIDWrapper &amp;&amp;pidw) noexcept</argsstring>
        <name>operator=</name>
        <qualifiedname>amrex::ParticleIDWrapper::operator=</qualifiedname>
        <param>
          <type><ref refid="structamrex_1_1ParticleIDWrapper" kindref="compound">ParticleIDWrapper</ref> &amp;&amp;</type>
          <declname>pidw</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="132" column="23" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="132" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1ParticleIDWrapper_1a23172db027e66159f5cc82bfaa65d7ae" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1ParticleIDWrapper" kindref="compound">ParticleIDWrapper</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE ParticleIDWrapper &amp; amrex::ParticleIDWrapper::operator=</definition>
        <argsstring>(const Long id) noexcept</argsstring>
        <name>operator=</name>
        <qualifiedname>amrex::ParticleIDWrapper::operator=</qualifiedname>
        <param>
          <type>const Long</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="138" column="23" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="138" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1ParticleIDWrapper_1a3cdec68611dbd36c124a37200d6eb516" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE amrex::ParticleIDWrapper::operator Long</definition>
        <argsstring>() const noexcept</argsstring>
        <name>operator Long</name>
        <qualifiedname>amrex::ParticleIDWrapper::operator Long</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="145" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="145" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1ParticleIDWrapper_1af21bcbc4ede1afe42beb3ce0667e56be" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::ParticleIDWrapper::make_invalid</definition>
        <argsstring>() const noexcept</argsstring>
        <name>make_invalid</name>
        <qualifiedname>amrex::ParticleIDWrapper::make_invalid</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Mark the particle as invalid</para>
<para>Swaps the is_valid (sign) bit to invalid. This is NOT identical to id = -id, but it is equally reversible via <ref refid="structamrex_1_1ParticleIDWrapper_1a932035c8f264cf9e16c6568842bdd2ce" kindref="member">make_valid()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="156" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="156" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1ParticleIDWrapper_1a932035c8f264cf9e16c6568842bdd2ce" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::ParticleIDWrapper::make_valid</definition>
        <argsstring>() const noexcept</argsstring>
        <name>make_valid</name>
        <qualifiedname>amrex::ParticleIDWrapper::make_valid</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Mark the particle as valid</para>
<para>Swaps the is_valid (sign) bit to valid. This is NOT identical to id = -id, but it is equally reversible via <ref refid="structamrex_1_1ParticleIDWrapper_1af21bcbc4ede1afe42beb3ce0667e56be" kindref="member">make_invalid()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="167" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="167" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1ParticleIDWrapper_1a6dcba6255321dadae60755324bc0f7e2" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE bool amrex::ParticleIDWrapper::is_valid</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is_valid</name>
        <qualifiedname>amrex::ParticleIDWrapper::is_valid</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check the particle is valid, via the sign of the id.</para>
<para>Returns true if the particle is valid (the id is positive), otherwise false (invalid particle). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="177" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="177" bodyend="180"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="109" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="110" bodyend="181"/>
    <listofallmembers>
      <member refid="structamrex_1_1ParticleIDWrapper_1a6dcba6255321dadae60755324bc0f7e2" prot="public" virt="non-virtual"><scope>amrex::ParticleIDWrapper</scope><name>is_valid</name></member>
      <member refid="structamrex_1_1ParticleIDWrapper_1a2b585340461a43c8bed49aefc535f060" prot="public" virt="non-virtual"><scope>amrex::ParticleIDWrapper</scope><name>m_idata</name></member>
      <member refid="structamrex_1_1ParticleIDWrapper_1af21bcbc4ede1afe42beb3ce0667e56be" prot="public" virt="non-virtual"><scope>amrex::ParticleIDWrapper</scope><name>make_invalid</name></member>
      <member refid="structamrex_1_1ParticleIDWrapper_1a932035c8f264cf9e16c6568842bdd2ce" prot="public" virt="non-virtual"><scope>amrex::ParticleIDWrapper</scope><name>make_valid</name></member>
      <member refid="structamrex_1_1ParticleIDWrapper_1a3cdec68611dbd36c124a37200d6eb516" prot="public" virt="non-virtual"><scope>amrex::ParticleIDWrapper</scope><name>operator Long</name></member>
      <member refid="structamrex_1_1ParticleIDWrapper_1a4a59ba259fcfe89a74b11f58565a26d7" prot="public" virt="non-virtual"><scope>amrex::ParticleIDWrapper</scope><name>operator=</name></member>
      <member refid="structamrex_1_1ParticleIDWrapper_1a68a2a5ae8b56d41e9be78efa09ce54f6" prot="public" virt="non-virtual"><scope>amrex::ParticleIDWrapper</scope><name>operator=</name></member>
      <member refid="structamrex_1_1ParticleIDWrapper_1a23172db027e66159f5cc82bfaa65d7ae" prot="public" virt="non-virtual"><scope>amrex::ParticleIDWrapper</scope><name>operator=</name></member>
      <member refid="structamrex_1_1ParticleIDWrapper_1a70c96c85021171e8ca0e31b75ba26885" prot="public" virt="non-virtual"><scope>amrex::ParticleIDWrapper</scope><name>ParticleIDWrapper</name></member>
      <member refid="structamrex_1_1ParticleIDWrapper_1a1be128a081a654e36673ae143e0c78cb" prot="public" virt="non-virtual"><scope>amrex::ParticleIDWrapper</scope><name>ParticleIDWrapper</name></member>
      <member refid="structamrex_1_1ParticleIDWrapper_1abe6eaeb579f55deb9eea2375bf0cdb4b" prot="public" virt="non-virtual"><scope>amrex::ParticleIDWrapper</scope><name>ParticleIDWrapper</name></member>
      <member refid="structamrex_1_1ParticleIDWrapper_1a421b8df4ba4bef283d8b812c8a35e976" prot="public" virt="non-virtual"><scope>amrex::ParticleIDWrapper</scope><name>~ParticleIDWrapper</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
