<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structamrex_1_1GpuArray" kind="struct" language="C++" prot="public">
    <compoundname>amrex::GpuArray</compoundname>
    <includes refid="AMReX__Array_8H" local="no">AMReX_Array.H</includes>
    <templateparamlist>
      <param>
        <type>class</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
      <param>
        <type>std::size_t</type>
        <declname>N</declname>
        <defname>N</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structamrex_1_1GpuArray_1a538b5c0cb019d19706450c09efa0224e" prot="public" static="no">
        <type>T</type>
        <definition>using amrex::GpuArray&lt; T, N &gt;::value_type =  T</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="36" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structamrex_1_1GpuArray_1a2f3a60d4a3f127ec669cf364b3f9a1ee" prot="public" static="no">
        <type>T &amp;</type>
        <definition>using amrex::GpuArray&lt; T, N &gt;::reference_type =  T&amp;</definition>
        <argsstring></argsstring>
        <name>reference_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="37" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="37" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structamrex_1_1GpuArray_1a52e9efdbc31f9f68e058b36ac5e696dd" prot="public" static="no" mutable="no">
        <type>T</type>
        <definition>T amrex::GpuArray&lt; T, N &gt;::arr[amrex::max(N, std::size_t{1})]</definition>
        <argsstring>[amrex::max(N, std::size_t{1})]</argsstring>
        <name>arr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="70" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="70" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structamrex_1_1GpuArray_1a855beb08e2de22f04d82e602524b65e3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> const T &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE const T&amp; amrex::GpuArray&lt; T, N &gt;::operator[]</definition>
        <argsstring>(int i) const noexcept</argsstring>
        <name>operator[]</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="40" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="40" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1GpuArray_1aba9b0ae13a9b1f8cc6cd0a52ef7caf7d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE T&amp; amrex::GpuArray&lt; T, N &gt;::operator[]</definition>
        <argsstring>(int i) noexcept</argsstring>
        <name>operator[]</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="43" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="43" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1GpuArray_1a5c60b920d8ed00176051d7625b9d284b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> const T *</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE const T* amrex::GpuArray&lt; T, N &gt;::data</definition>
        <argsstring>() const noexcept</argsstring>
        <name>data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="46" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="46" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1GpuArray_1a681262551470d501f1469b8d5a9b4003" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T *</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE T* amrex::GpuArray&lt; T, N &gt;::data</definition>
        <argsstring>() noexcept</argsstring>
        <name>data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="49" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="49" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1GpuArray_1af2107789b0202531ea9b928113f895f4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> constexpr std::size_t</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE constexpr std::size_t amrex::GpuArray&lt; T, N &gt;::size</definition>
        <argsstring>() const noexcept</argsstring>
        <name>size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="52" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="52" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1GpuArray_1aad26114679fccb33d632c5e9661d52cb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> const T *</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE const T* amrex::GpuArray&lt; T, N &gt;::begin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="55" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="55" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1GpuArray_1aeb622512186a795918ecff9ba9198f17" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> const T *</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE const T* amrex::GpuArray&lt; T, N &gt;::end</definition>
        <argsstring>() const noexcept</argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="58" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="58" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1GpuArray_1a951117a4478e02af22153fb41a75f002" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T *</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE T* amrex::GpuArray&lt; T, N &gt;::begin</definition>
        <argsstring>() noexcept</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="61" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="61" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1GpuArray_1a79159efea84c4002316373347f4c8327" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T *</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE T* amrex::GpuArray&lt; T, N &gt;::end</definition>
        <argsstring>() noexcept</argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="64" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="64" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1GpuArray_1a97ff8440a348593899d51c5996ded371" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::GpuArray&lt; T, N &gt;::fill</definition>
        <argsstring>(const T &amp;value) noexcept</argsstring>
        <name>fill</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="67" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="67" bodyend="68"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="1734">
        <label>T</label>
      </node>
      <node id="1733">
        <label>amrex::GpuArray&lt; T, N &gt;</label>
        <link refid="structamrex_1_1GpuArray"/>
        <childnode refid="1734" relation="usage">
          <edgelabel>arr</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="35" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="34" bodyend="71"/>
    <listofallmembers>
      <member refid="structamrex_1_1GpuArray_1a52e9efdbc31f9f68e058b36ac5e696dd" prot="public" virt="non-virtual"><scope>amrex::GpuArray</scope><name>arr</name></member>
      <member refid="structamrex_1_1GpuArray_1aad26114679fccb33d632c5e9661d52cb" prot="public" virt="non-virtual"><scope>amrex::GpuArray</scope><name>begin</name></member>
      <member refid="structamrex_1_1GpuArray_1a951117a4478e02af22153fb41a75f002" prot="public" virt="non-virtual"><scope>amrex::GpuArray</scope><name>begin</name></member>
      <member refid="structamrex_1_1GpuArray_1a5c60b920d8ed00176051d7625b9d284b" prot="public" virt="non-virtual"><scope>amrex::GpuArray</scope><name>data</name></member>
      <member refid="structamrex_1_1GpuArray_1a681262551470d501f1469b8d5a9b4003" prot="public" virt="non-virtual"><scope>amrex::GpuArray</scope><name>data</name></member>
      <member refid="structamrex_1_1GpuArray_1aeb622512186a795918ecff9ba9198f17" prot="public" virt="non-virtual"><scope>amrex::GpuArray</scope><name>end</name></member>
      <member refid="structamrex_1_1GpuArray_1a79159efea84c4002316373347f4c8327" prot="public" virt="non-virtual"><scope>amrex::GpuArray</scope><name>end</name></member>
      <member refid="structamrex_1_1GpuArray_1a97ff8440a348593899d51c5996ded371" prot="public" virt="non-virtual"><scope>amrex::GpuArray</scope><name>fill</name></member>
      <member refid="structamrex_1_1GpuArray_1a855beb08e2de22f04d82e602524b65e3" prot="public" virt="non-virtual"><scope>amrex::GpuArray</scope><name>operator[]</name></member>
      <member refid="structamrex_1_1GpuArray_1aba9b0ae13a9b1f8cc6cd0a52ef7caf7d" prot="public" virt="non-virtual"><scope>amrex::GpuArray</scope><name>operator[]</name></member>
      <member refid="structamrex_1_1GpuArray_1a2f3a60d4a3f127ec669cf364b3f9a1ee" prot="public" virt="non-virtual"><scope>amrex::GpuArray</scope><name>reference_type</name></member>
      <member refid="structamrex_1_1GpuArray_1af2107789b0202531ea9b928113f895f4" prot="public" virt="non-virtual"><scope>amrex::GpuArray</scope><name>size</name></member>
      <member refid="structamrex_1_1GpuArray_1a538b5c0cb019d19706450c09efa0224e" prot="public" virt="non-virtual"><scope>amrex::GpuArray</scope><name>value_type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
