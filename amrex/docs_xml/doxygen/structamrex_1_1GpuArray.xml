<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="structamrex_1_1GpuArray" kind="struct" language="C++" prot="public">
    <compoundname>amrex::GpuArray</compoundname>
    <includes refid="AMReX__Array_8H" local="no">AMReX_Array.H</includes>
    <templateparamlist>
      <param>
        <type>class T</type>
      </param>
      <param>
        <type>unsigned int</type>
        <declname>N</declname>
        <defname>N</defname>
      </param>
    </templateparamlist>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structamrex_1_1GpuArray_1a538b5c0cb019d19706450c09efa0224e" prot="public" static="no">
        <type>T</type>
        <definition>using amrex::GpuArray&lt; T, N &gt;::value_type =  T</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <qualifiedname>amrex::GpuArray::value_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="35" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structamrex_1_1GpuArray_1a2f3a60d4a3f127ec669cf364b3f9a1ee" prot="public" static="no">
        <type>T &amp;</type>
        <definition>using amrex::GpuArray&lt; T, N &gt;::reference_type =  T&amp;</definition>
        <argsstring></argsstring>
        <name>reference_type</name>
        <qualifiedname>amrex::GpuArray::reference_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="36" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="36" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structamrex_1_1GpuArray_1ab2d250b3a7efdbbf597bd50a771f3e3c" prot="public" static="no" mutable="no">
        <type>T</type>
        <definition>T amrex::GpuArray&lt; T, N &gt;::arr[amrex::max(N, 1U)]</definition>
        <argsstring>[amrex::max(N, 1U)]</argsstring>
        <name>arr</name>
        <qualifiedname>amrex::GpuArray::arr</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="172" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="172" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="structamrex_1_1GpuArray_1af3db8364fbbda3e885732664081842aa" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ const T &amp;</type>
        <definition>__host__ __device__ const T &amp; amrex::GpuArray&lt; T, N &gt;::operator[]</definition>
        <argsstring>(int i) const noexcept</argsstring>
        <name>operator[]</name>
        <qualifiedname>amrex::GpuArray::operator[]</qualifiedname>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref> elements are indexed using square brackets, as with any other array. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="43" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="43" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1GpuArray_1ad78667c1cb8624dd038f4631739608a7" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ T &amp;</type>
        <definition>__host__ __device__ T &amp; amrex::GpuArray&lt; T, N &gt;::operator[]</definition>
        <argsstring>(int i) noexcept</argsstring>
        <name>operator[]</name>
        <qualifiedname>amrex::GpuArray::operator[]</qualifiedname>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref> elements are indexed using square brackets, as with any other array. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="55" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="55" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1GpuArray_1ab1564f3de1da9f033bf5592f6b81fe86" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ const T *</type>
        <definition>__host__ __device__ const T * amrex::GpuArray&lt; T, N &gt;::data</definition>
        <argsstring>() const noexcept</argsstring>
        <name>data</name>
        <qualifiedname>amrex::GpuArray::data</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a <computeroutput>const</computeroutput> pointer to the underlying data of a <ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref> object. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="66" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="66" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1GpuArray_1ac32b0c7e5899c726bee45532d5f70776" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ T *</type>
        <definition>__host__ __device__ T * amrex::GpuArray&lt; T, N &gt;::data</definition>
        <argsstring>() noexcept</argsstring>
        <name>data</name>
        <qualifiedname>amrex::GpuArray::data</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a pointer to the underlying data of a <ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref> object. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="72" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="72" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1GpuArray_1ace9a7049bbdbe82fa3111b74327c4e89" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ const T *</type>
        <definition>__host__ __device__ const T * amrex::GpuArray&lt; T, N &gt;::begin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>begin</name>
        <qualifiedname>amrex::GpuArray::begin</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a <computeroutput>const</computeroutput> pointer address to the first element of the <ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref> object. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="86" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="86" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1GpuArray_1a58751039ff102e8ad51017fab18d938c" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ const T *</type>
        <definition>__host__ __device__ const T * amrex::GpuArray&lt; T, N &gt;::end</definition>
        <argsstring>() const noexcept</argsstring>
        <name>end</name>
        <qualifiedname>amrex::GpuArray::end</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a const pointer address right after the last element of the <ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref> object. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="93" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="93" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1GpuArray_1abbafc884154e101b3fe1a43a0f2aae27" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ T *</type>
        <definition>__host__ __device__ T * amrex::GpuArray&lt; T, N &gt;::begin</definition>
        <argsstring>() noexcept</argsstring>
        <name>begin</name>
        <qualifiedname>amrex::GpuArray::begin</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a pointer address to the first element of the <ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref> object. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="100" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="100" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1GpuArray_1a7fe7f03c3382aa51895aedf80346dcf9" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ T *</type>
        <definition>__host__ __device__ T * amrex::GpuArray&lt; T, N &gt;::end</definition>
        <argsstring>() noexcept</argsstring>
        <name>end</name>
        <qualifiedname>amrex::GpuArray::end</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a pointer address right after the last element of the <ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref> object. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="107" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="107" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1GpuArray_1ab40e516f8345a19cf800b3ff8925d0f1" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ void</type>
        <definition>__host__ __device__ void amrex::GpuArray&lt; T, N &gt;::fill</definition>
        <argsstring>(const T &amp;value) noexcept</argsstring>
        <name>fill</name>
        <qualifiedname>amrex::GpuArray::fill</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fills in all of the elements in the <ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref> object to the same value.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The fill value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="116" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="116" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1GpuArray_1a5018ec30e2f0198f49541e35b8d211b0" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ constexpr T</type>
        <definition>__host__ __device__ constexpr T amrex::GpuArray&lt; T, N &gt;::sum</definition>
        <argsstring>() const noexcept</argsstring>
        <name>sum</name>
        <qualifiedname>amrex::GpuArray::sum</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the sum of all elements in the <ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref> object. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="123" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="123" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1GpuArray_1abf5a8109f5cb554fc66f122d6d55f4ab" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ T</type>
        <definition>__host__ __device__ T amrex::GpuArray&lt; T, N &gt;::product</definition>
        <argsstring>() const noexcept</argsstring>
        <name>product</name>
        <qualifiedname>amrex::GpuArray::product</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the product of all elements in the <ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref> object. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="134" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="134" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1GpuArray_1afb80bdc6709c12fa9cab7ac2c8e994be" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ <ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; T, N &gt; &amp;</type>
        <definition>__host__ __device__ GpuArray&lt; T, N &gt; &amp; amrex::GpuArray&lt; T, N &gt;::operator+=</definition>
        <argsstring>(GpuArray&lt; T, N &gt; const &amp;a) noexcept</argsstring>
        <name>operator+=</name>
        <qualifiedname>amrex::GpuArray::operator+=</qualifiedname>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; T, N &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="142" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="142" bodyend="148"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structamrex_1_1GpuArray_1add05bf3652e95bd7e0be382be6ba8f44" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ static __device__ constexpr unsigned int</type>
        <definition>__host__ static __device__ constexpr unsigned int amrex::GpuArray&lt; T, N &gt;::size</definition>
        <argsstring>() noexcept</argsstring>
        <name>size</name>
        <qualifiedname>amrex::GpuArray::size</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the number of elements in the <ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref> object as an unsigned integer. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="79" column="39" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="79" bodyend="79"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="2">
        <label>T</label>
      </node>
      <node id="1">
        <label>amrex::GpuArray&lt; T, N &gt;</label>
        <link refid="structamrex_1_1GpuArray"/>
        <childnode refid="2" relation="usage">
          <edgelabel>arr</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="33" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="34" bodyend="173"/>
    <listofallmembers>
      <member refid="structamrex_1_1GpuArray_1ab2d250b3a7efdbbf597bd50a771f3e3c" prot="public" virt="non-virtual"><scope>amrex::GpuArray</scope><name>arr</name></member>
      <member refid="structamrex_1_1GpuArray_1ace9a7049bbdbe82fa3111b74327c4e89" prot="public" virt="non-virtual"><scope>amrex::GpuArray</scope><name>begin</name></member>
      <member refid="structamrex_1_1GpuArray_1abbafc884154e101b3fe1a43a0f2aae27" prot="public" virt="non-virtual"><scope>amrex::GpuArray</scope><name>begin</name></member>
      <member refid="structamrex_1_1GpuArray_1ab1564f3de1da9f033bf5592f6b81fe86" prot="public" virt="non-virtual"><scope>amrex::GpuArray</scope><name>data</name></member>
      <member refid="structamrex_1_1GpuArray_1ac32b0c7e5899c726bee45532d5f70776" prot="public" virt="non-virtual"><scope>amrex::GpuArray</scope><name>data</name></member>
      <member refid="structamrex_1_1GpuArray_1a58751039ff102e8ad51017fab18d938c" prot="public" virt="non-virtual"><scope>amrex::GpuArray</scope><name>end</name></member>
      <member refid="structamrex_1_1GpuArray_1a7fe7f03c3382aa51895aedf80346dcf9" prot="public" virt="non-virtual"><scope>amrex::GpuArray</scope><name>end</name></member>
      <member refid="structamrex_1_1GpuArray_1ab40e516f8345a19cf800b3ff8925d0f1" prot="public" virt="non-virtual"><scope>amrex::GpuArray</scope><name>fill</name></member>
      <member refid="structamrex_1_1GpuArray_1afb80bdc6709c12fa9cab7ac2c8e994be" prot="public" virt="non-virtual"><scope>amrex::GpuArray</scope><name>operator+=</name></member>
      <member refid="structamrex_1_1GpuArray_1af3db8364fbbda3e885732664081842aa" prot="public" virt="non-virtual"><scope>amrex::GpuArray</scope><name>operator[]</name></member>
      <member refid="structamrex_1_1GpuArray_1ad78667c1cb8624dd038f4631739608a7" prot="public" virt="non-virtual"><scope>amrex::GpuArray</scope><name>operator[]</name></member>
      <member refid="structamrex_1_1GpuArray_1abf5a8109f5cb554fc66f122d6d55f4ab" prot="public" virt="non-virtual"><scope>amrex::GpuArray</scope><name>product</name></member>
      <member refid="structamrex_1_1GpuArray_1a2f3a60d4a3f127ec669cf364b3f9a1ee" prot="public" virt="non-virtual"><scope>amrex::GpuArray</scope><name>reference_type</name></member>
      <member refid="structamrex_1_1GpuArray_1add05bf3652e95bd7e0be382be6ba8f44" prot="public" virt="non-virtual"><scope>amrex::GpuArray</scope><name>size</name></member>
      <member refid="structamrex_1_1GpuArray_1a5018ec30e2f0198f49541e35b8d211b0" prot="public" virt="non-virtual"><scope>amrex::GpuArray</scope><name>sum</name></member>
      <member refid="structamrex_1_1GpuArray_1a538b5c0cb019d19706450c09efa0224e" prot="public" virt="non-virtual"><scope>amrex::GpuArray</scope><name>value_type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
