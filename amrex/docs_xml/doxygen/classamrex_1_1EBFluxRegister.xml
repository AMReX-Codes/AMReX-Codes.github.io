<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classamrex_1_1EBFluxRegister" kind="class" language="C++" prot="public">
    <compoundname>amrex::EBFluxRegister</compoundname>
    <basecompoundref refid="classamrex_1_1YAFluxRegister" prot="public" virt="non-virtual">amrex::YAFluxRegister</basecompoundref>
    <includes refid="AMReX__EBFluxRegister_8H" local="no">AMReX_EBFluxRegister.H</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1EBFluxRegister_1ae202afe28157891442668596f24fe460" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref></type>
        <definition>iMultiFab amrex::EBFluxRegister::m_cfp_inside_mask</definition>
        <argsstring></argsstring>
        <name>m_cfp_inside_mask</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFluxRegister.H" line="104" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFluxRegister.H" bodystart="104" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1EBFluxRegister_1afed46de9d982663ff8bf4bdd752811a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::EBFluxRegister::EBFluxRegister</definition>
        <argsstring>()=default</argsstring>
        <name>EBFluxRegister</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFluxRegister.H" line="62" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBFluxRegister_1a14da975b0621f49220efd195ac6688c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::EBFluxRegister::EBFluxRegister</definition>
        <argsstring>(const BoxArray &amp;fba, const BoxArray &amp;cba, const DistributionMapping &amp;fdm, const DistributionMapping &amp;cdm, const Geometry &amp;fgeom, const Geometry &amp;cgeom, const IntVect &amp;ref_ratio, int fine_lev, int nvar)</argsstring>
        <name>EBFluxRegister</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>fba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>cba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>fdm</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>cdm</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>fgeom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>cgeom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ref_ratio</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fine_lev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nvar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFluxRegister.H" line="64" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFluxRegister.cpp" bodystart="22" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBFluxRegister_1af6fb414b612b8563f5ffc4f9bdca7343" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EBFluxRegister::define</definition>
        <argsstring>(const BoxArray &amp;fba, const BoxArray &amp;cba, const DistributionMapping &amp;fdm, const DistributionMapping &amp;cdm, const Geometry &amp;fgeom, const Geometry &amp;cgeom, const IntVect &amp;ref_ratio, int fine_lev, int nvar)</argsstring>
        <name>define</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>fba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>cba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>fdm</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>cdm</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>fgeom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>cgeom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ref_ratio</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fine_lev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nvar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFluxRegister.H" line="69" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFluxRegister.cpp" bodystart="32" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBFluxRegister_1abd6a7d887e6f9ffeebea57b2af016ba5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EBFluxRegister::CrseAdd</definition>
        <argsstring>(const MFIter &amp;mfi, const std::array&lt; FArrayBox const *, 3 &gt; &amp;flux, const Real *dx, Real dt, const FArrayBox &amp;volfrac, const std::array&lt; FArrayBox const *, 3 &gt; &amp;areafrac, RunOn gpu_or_cpu)</argsstring>
        <name>CrseAdd</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <param>
          <type>const std::array&lt; <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> const *, 3 &gt; &amp;</type>
          <declname>flux</declname>
        </param>
        <param>
          <type>const Real *</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dt</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>volfrac</declname>
        </param>
        <param>
          <type>const std::array&lt; <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> const *, 3 &gt; &amp;</type>
          <declname>areafrac</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
          <declname>gpu_or_cpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFluxRegister.H" line="75" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFluxRegister.cpp" bodystart="75" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBFluxRegister_1aded4ec44ced8ac5e0141a61188efd7a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EBFluxRegister::FineAdd</definition>
        <argsstring>(const MFIter &amp;mfi, const std::array&lt; FArrayBox const *, 3 &gt; &amp;flux, const Real *dx, Real dt, const FArrayBox &amp;volfrac, const std::array&lt; FArrayBox const *, 3 &gt; &amp;areafrac, const FArrayBox &amp;dm, RunOn gpu_or_cpu)</argsstring>
        <name>FineAdd</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <param>
          <type>const std::array&lt; <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> const *, 3 &gt; &amp;</type>
          <declname>flux</declname>
        </param>
        <param>
          <type>const Real *</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dt</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>volfrac</declname>
        </param>
        <param>
          <type>const std::array&lt; <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> const *, 3 &gt; &amp;</type>
          <declname>areafrac</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
          <declname>gpu_or_cpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFluxRegister.H" line="83" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFluxRegister.cpp" bodystart="114" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBFluxRegister_1a03dd763c1ebb0a67b2fd52ded49b1f53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EBFluxRegister::Reflux</definition>
        <argsstring>(MultiFab &amp;crse_state, const amrex::MultiFab &amp;crse_vfrac, MultiFab &amp;fine_state, const amrex::MultiFab &amp;fine_vfrac)</argsstring>
        <name>Reflux</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>crse_state</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">amrex::MultiFab</ref> &amp;</type>
          <declname>crse_vfrac</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>fine_state</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">amrex::MultiFab</ref> &amp;</type>
          <declname>fine_vfrac</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFluxRegister.H" line="91" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFluxRegister.cpp" bodystart="231" bodyend="338"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBFluxRegister_1af3c9944a1620773f35a68caa68d22121" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> *</type>
        <definition>FArrayBox* amrex::EBFluxRegister::getCrseData</definition>
        <argsstring>(const MFIter &amp;mfi)</argsstring>
        <name>getCrseData</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFluxRegister.H" line="94" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFluxRegister.H" bodystart="94" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBFluxRegister_1a81c2340e9470f6d2f4c8658f9e929f78" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1IArrayBox" kindref="compound">IArrayBox</ref> *</type>
        <definition>const IArrayBox* amrex::EBFluxRegister::getCrseFlag</definition>
        <argsstring>(const MFIter &amp;mfi) const</argsstring>
        <name>getCrseFlag</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFluxRegister.H" line="98" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFluxRegister.H" bodystart="98" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBFluxRegister_1a440e02d869ba355d0ade05af7dad4748" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EBFluxRegister::defineExtra</definition>
        <argsstring>(const BoxArray &amp;fba, const DistributionMapping &amp;fdm)</argsstring>
        <name>defineExtra</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>fba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>fdm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFluxRegister.H" line="108" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFluxRegister.cpp" bodystart="43" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBFluxRegister_1a38cda18a5ee3774c42517fb2c8819afd" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::YAFluxRegister::CrseAdd</definition>
        <argsstring>(const MFIter &amp;mfi, const std::array&lt; FArrayBox const *, 3 &gt; &amp;flux, const Real *dx, Real dt, RunOn gpu_or_cpu) noexcept</argsstring>
        <name>CrseAdd</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <param>
          <type>const std::array&lt; <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> const *, 3 &gt; &amp;</type>
          <declname>flux</declname>
        </param>
        <param>
          <type>const Real *</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dt</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
          <declname>gpu_or_cpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFluxRegister.H" line="74" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_YAFluxRegister.cpp" bodystart="232" bodyend="263"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBFluxRegister_1a655e667850f837834107b1252ea400e4" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::YAFluxRegister::FineAdd</definition>
        <argsstring>(const MFIter &amp;mfi, const std::array&lt; FArrayBox const *, 3 &gt; &amp;flux, const Real *dx, Real dt, RunOn gpu_or_cpu) noexcept</argsstring>
        <name>FineAdd</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <param>
          <type>const std::array&lt; <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> const *, 3 &gt; &amp;</type>
          <declname>flux</declname>
        </param>
        <param>
          <type>const Real *</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dt</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
          <declname>gpu_or_cpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFluxRegister.H" line="82" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_YAFluxRegister.cpp" bodystart="267" bodyend="344"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><ref refid="classamrex_1_1EBFluxRegister" kindref="compound">EBFluxRegister</ref> is used for refluxing, re-redistribution, re-refluxing, and re-re-redistribution. See <computeroutput>Tutorials/EB/CNS</computeroutput> for an example of using this class.</para>
<para>Reflux for EB is somewhat similar to non-EB. At the beginning of a coarse step, <computeroutput><ref refid="classamrex_1_1YAFluxRegister_1a9f4e5bbfcfe4bd2de5e3487a80e8cc0c" kindref="member">reset()</ref></computeroutput> is called. In <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> for the coarse level advance, <computeroutput>CrseAdd</computeroutput> is called with coarse flux. There are two versions of <computeroutput>CrseAdd</computeroutput>, one for regular fab/tile and the other for fab/tile containing cutcells. For the cutcell version, the flux is is at centroid, not face center. The flux is not scaled. In <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> for the fine level advance, <computeroutput>FineAdd</computeroutput> is called. There are also two version of <computeroutput>FineAdd</computeroutput>, one for regular and the other for fab/tile containing cutcells. The cutcell version also takes <computeroutput>dm</computeroutput> for re-redistribution explained below. After the fine level finished its time steps, <computeroutput>Reflux</computeroutput> is called to update the coarse cells next to the coarse/fine boundary. Note that re-redistribution is also performed in <computeroutput>Reflux</computeroutput>.</para>
<para>Re-redistribution is unfortunately more complicated. The coarse level needs to accumulate the <emphasis>density</emphasis> (e.g., g/cm^3 for mass density) <emphasis>loss</emphasis> of coarse/fine boundary cells (i.e., coarse cells on the coarse side of the coarse/fine boundary) due to redistribution from/to coarse cells covered by the fine level. If a coarse/fine boundary cell redistributes mass to a covered cell, this counts as a positive loss. Here covered means covered be the fine level, not EB. If a covered cell redistributes mass to a boundary cell, this counts as a negative loss for that boundary cell. The accumulation as the coarse level is performed on <computeroutput><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref></computeroutput> returned by <computeroutput><ref refid="classamrex_1_1EBFluxRegister_1af3c9944a1620773f35a68caa68d22121" kindref="member">EBFluxRegister::getCrseData(MFIter const&amp;)</ref></computeroutput>. <ref refid="classamrex_1_1EBFluxRegister" kindref="compound">EBFluxRegister</ref> also has <computeroutput>getCrseFlag(MFIte cons&amp;)</computeroutput> function returning <computeroutput><ref refid="classamrex_1_1IArrayBox" kindref="compound">IArrayBox</ref></computeroutput> that contains flags for genuine coarse cell, coarse/fine boundary cells and covered cells.</para>
<para>The fine level in re-redistribution needs to accumulate the <emphasis>mass</emphasis> (e.g., g for density) <emphasis>gain</emphasis> of ghost cells due to redistribution from/to valid cells. The application code can use a local <computeroutput><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref></computeroutput> to store this and then EBFLuxRegister::FineAdd is called to add the part in ghost cells (excluding ghost cells covered by valid cells of other grids) to <ref refid="classamrex_1_1EBFluxRegister" kindref="compound">EBFluxRegister</ref>&apos;s internal data. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>amrex::EBFluxRegister</label>
        <link refid="classamrex_1_1EBFluxRegister"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>amrex::YAFluxRegister</label>
        <link refid="classamrex_1_1YAFluxRegister"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="27">
        <label>std::vector&lt; MPI_Status, std::allocator&lt; MPI_Status &gt; &gt;</label>
      </node>
      <node id="31">
        <label>amrex::iMultiFab</label>
        <link refid="classamrex_1_1iMultiFab"/>
        <childnode refid="32" relation="public-inheritance">
        </childnode>
      </node>
      <node id="18">
        <label>amrex::ArenaInfo</label>
        <link refid="structamrex_1_1ArenaInfo"/>
      </node>
      <node id="8">
        <label>amrex::IntVect</label>
        <link refid="classamrex_1_1IntVect"/>
        <childnode refid="8" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>Real</label>
      </node>
      <node id="28">
        <label>amrex::Vector&lt; MPI_Request &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="29" relation="public-inheritance">
        </childnode>
      </node>
      <node id="16">
        <label>amrex::DataAllocator</label>
        <link refid="structamrex_1_1DataAllocator"/>
        <childnode refid="17" relation="usage">
          <edgelabel>m_arena</edgelabel>
        </childnode>
      </node>
      <node id="22">
        <label>std::vector&lt; std::string, std::allocator&lt; std::string &gt; &gt;</label>
      </node>
      <node id="17">
        <label>amrex::Arena</label>
        <link refid="classamrex_1_1Arena"/>
        <childnode refid="18" relation="usage">
          <edgelabel>arena_info</edgelabel>
        </childnode>
      </node>
      <node id="19">
        <label>amrex::Vector&lt; int &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="20" relation="public-inheritance">
        </childnode>
      </node>
      <node id="30">
        <label>amrex::Periodicity</label>
        <link refid="classamrex_1_1Periodicity"/>
        <childnode refid="8" relation="usage">
          <edgelabel>period</edgelabel>
        </childnode>
      </node>
      <node id="24">
        <label>std::vector&lt; char *, std::allocator&lt; char * &gt; &gt;</label>
      </node>
      <node id="10">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::FArrayBox * &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="11" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11">
        <label>std::vector&lt; amrex::Vector&lt; amrex::FArrayBox * &gt;, std::allocator&lt; amrex::Vector&lt; amrex::FArrayBox * &gt; &gt; &gt;</label>
      </node>
      <node id="23">
        <label>amrex::Vector&lt; char * &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="24" relation="public-inheritance">
        </childnode>
      </node>
      <node id="25">
        <label>amrex::FabArray&lt; FAB &gt;::ShMem</label>
        <link refid="structamrex_1_1FabArray_1_1ShMem"/>
      </node>
      <node id="1">
        <label>amrex::EBFluxRegister</label>
        <link refid="classamrex_1_1EBFluxRegister"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="31" relation="usage">
          <edgelabel>m_cfp_inside_mask</edgelabel>
        </childnode>
      </node>
      <node id="29">
        <label>std::vector&lt; MPI_Request, std::allocator&lt; MPI_Request &gt; &gt;</label>
      </node>
      <node id="20">
        <label>std::vector&lt; int, std::allocator&lt; int &gt; &gt;</label>
      </node>
      <node id="32">
        <label>amrex::FabArray&lt; IArrayBox &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="14" relation="usage">
          <edgelabel>pc_recv_size</edgelabel>
          <edgelabel>fb_recv_size</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>fb_nghost</edgelabel>
          <edgelabel>pc_dnghost</edgelabel>
          <edgelabel>pc_snghost</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>m_dallocator</edgelabel>
        </childnode>
        <childnode refid="19" relation="usage">
          <edgelabel>pc_recv_from</edgelabel>
          <edgelabel>fb_recv_from</edgelabel>
        </childnode>
        <childnode refid="21" relation="usage">
          <edgelabel>m_tags</edgelabel>
        </childnode>
        <childnode refid="23" relation="usage">
          <edgelabel>fb_recv_data</edgelabel>
          <edgelabel>fb_send_data</edgelabel>
          <edgelabel>pc_recv_data</edgelabel>
        </childnode>
        <childnode refid="25" relation="usage">
          <edgelabel>shmem</edgelabel>
        </childnode>
        <childnode refid="32" relation="usage">
          <edgelabel>pc_src</edgelabel>
        </childnode>
        <childnode refid="26" relation="usage">
          <edgelabel>fb_recv_stat</edgelabel>
        </childnode>
        <childnode refid="28" relation="usage">
          <edgelabel>fb_send_reqs</edgelabel>
          <edgelabel>pc_recv_reqs</edgelabel>
          <edgelabel>fb_recv_reqs</edgelabel>
          <edgelabel>pc_send_reqs</edgelabel>
        </childnode>
        <childnode refid="30" relation="usage">
          <edgelabel>fb_period</edgelabel>
          <edgelabel>pc_period</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>amrex::RealBox</label>
        <link refid="classamrex_1_1RealBox"/>
        <childnode refid="5" relation="usage">
          <edgelabel>xhi</edgelabel>
          <edgelabel>xlo</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>amrex::Box</label>
        <link refid="classamrex_1_1Box"/>
        <childnode refid="8" relation="usage">
          <edgelabel>bigend</edgelabel>
          <edgelabel>smallend</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>btype</edgelabel>
        </childnode>
      </node>
      <node id="26">
        <label>amrex::Vector&lt; MPI_Status &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="27" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>amrex::CoordSys</label>
        <link refid="classamrex_1_1CoordSys"/>
        <childnode refid="5" relation="usage">
          <edgelabel>inv_dx</edgelabel>
          <edgelabel>offset</edgelabel>
          <edgelabel>dx</edgelabel>
        </childnode>
      </node>
      <node id="9">
        <label>amrex::IndexType</label>
        <link refid="classamrex_1_1IndexType"/>
      </node>
      <node id="21">
        <label>amrex::Vector&lt; std::string &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="22" relation="public-inheritance">
        </childnode>
      </node>
      <node id="12">
        <label>amrex::MultiFab</label>
        <link refid="classamrex_1_1MultiFab"/>
        <childnode refid="13" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>amrex::Geometry</label>
        <link refid="classamrex_1_1Geometry"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>roundoff_domain</edgelabel>
          <edgelabel>prob_domain</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>domain</edgelabel>
        </childnode>
      </node>
      <node id="13">
        <label>amrex::FabArray&lt; FArrayBox &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="14" relation="usage">
          <edgelabel>pc_recv_size</edgelabel>
          <edgelabel>fb_recv_size</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>fb_nghost</edgelabel>
          <edgelabel>pc_dnghost</edgelabel>
          <edgelabel>pc_snghost</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>m_dallocator</edgelabel>
        </childnode>
        <childnode refid="19" relation="usage">
          <edgelabel>pc_recv_from</edgelabel>
          <edgelabel>fb_recv_from</edgelabel>
        </childnode>
        <childnode refid="21" relation="usage">
          <edgelabel>m_tags</edgelabel>
        </childnode>
        <childnode refid="23" relation="usage">
          <edgelabel>fb_recv_data</edgelabel>
          <edgelabel>fb_send_data</edgelabel>
          <edgelabel>pc_recv_data</edgelabel>
        </childnode>
        <childnode refid="25" relation="usage">
          <edgelabel>shmem</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>pc_src</edgelabel>
        </childnode>
        <childnode refid="26" relation="usage">
          <edgelabel>fb_recv_stat</edgelabel>
        </childnode>
        <childnode refid="28" relation="usage">
          <edgelabel>fb_send_reqs</edgelabel>
          <edgelabel>pc_recv_reqs</edgelabel>
          <edgelabel>fb_recv_reqs</edgelabel>
          <edgelabel>pc_send_reqs</edgelabel>
        </childnode>
        <childnode refid="30" relation="usage">
          <edgelabel>fb_period</edgelabel>
          <edgelabel>pc_period</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>amrex::YAFluxRegister</label>
        <link refid="classamrex_1_1YAFluxRegister"/>
        <childnode refid="3" relation="usage">
          <edgelabel>m_fine_geom</edgelabel>
          <edgelabel>m_crse_geom</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>m_cfp_fab</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>m_ratio</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>m_cfp_mask</edgelabel>
          <edgelabel>m_crse_data</edgelabel>
          <edgelabel>m_cfpatch</edgelabel>
        </childnode>
        <childnode refid="19" relation="usage">
          <edgelabel>m_cfp_localindex</edgelabel>
          <edgelabel>m_crse_fab_flag</edgelabel>
        </childnode>
        <childnode refid="31" relation="usage">
          <edgelabel>m_crse_flag</edgelabel>
        </childnode>
      </node>
      <node id="14">
        <label>amrex::Vector&lt; std::size_t &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="15" relation="public-inheritance">
        </childnode>
      </node>
      <node id="15">
        <label>std::vector&lt; std::size_t, std::allocator&lt; std::size_t &gt; &gt;</label>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFluxRegister.H" line="59" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFluxRegister.H" bodystart="57" bodyend="109"/>
    <listofallmembers>
      <member refid="classamrex_1_1YAFluxRegister_1a793217326d57a18d473ad802963c1a39" prot="public" virt="non-virtual"><scope>amrex::EBFluxRegister</scope><name>CellType</name></member>
      <member refid="classamrex_1_1YAFluxRegister_1a793217326d57a18d473ad802963c1a39ad0f71b4da95e7cb4ed06cb9fc1be19a0" prot="public" virt="non-virtual"><scope>amrex::EBFluxRegister</scope><name>crse_cell</name></member>
      <member refid="classamrex_1_1YAFluxRegister_1a793217326d57a18d473ad802963c1a39ac5c1292509aea6d15b097b266dc73151" prot="public" virt="non-virtual"><scope>amrex::EBFluxRegister</scope><name>crse_fine_boundary_cell</name></member>
      <member refid="classamrex_1_1EBFluxRegister_1abd6a7d887e6f9ffeebea57b2af016ba5" prot="public" virt="non-virtual"><scope>amrex::EBFluxRegister</scope><name>CrseAdd</name></member>
      <member refid="classamrex_1_1EBFluxRegister_1a38cda18a5ee3774c42517fb2c8819afd" prot="public" virt="non-virtual"><scope>amrex::EBFluxRegister</scope><name>CrseAdd</name></member>
      <member refid="classamrex_1_1YAFluxRegister_1a38cda18a5ee3774c42517fb2c8819afd" prot="public" virt="non-virtual" ambiguityscope="amrex::YAFluxRegister::"><scope>amrex::EBFluxRegister</scope><name>CrseAdd</name></member>
      <member refid="classamrex_1_1YAFluxRegister_1af466fe21e95a36341e6a099dcf9c5a97" prot="public" virt="non-virtual"><scope>amrex::EBFluxRegister</scope><name>CrseHasWork</name></member>
      <member refid="classamrex_1_1EBFluxRegister_1af6fb414b612b8563f5ffc4f9bdca7343" prot="public" virt="non-virtual"><scope>amrex::EBFluxRegister</scope><name>define</name></member>
      <member refid="classamrex_1_1EBFluxRegister_1a440e02d869ba355d0ade05af7dad4748" prot="public" virt="non-virtual"><scope>amrex::EBFluxRegister</scope><name>defineExtra</name></member>
      <member refid="classamrex_1_1EBFluxRegister_1afed46de9d982663ff8bf4bdd752811a9" prot="public" virt="non-virtual"><scope>amrex::EBFluxRegister</scope><name>EBFluxRegister</name></member>
      <member refid="classamrex_1_1EBFluxRegister_1a14da975b0621f49220efd195ac6688c8" prot="public" virt="non-virtual"><scope>amrex::EBFluxRegister</scope><name>EBFluxRegister</name></member>
      <member refid="classamrex_1_1YAFluxRegister_1a793217326d57a18d473ad802963c1a39af227036442400df4bcf1b730c2eb4774" prot="public" virt="non-virtual"><scope>amrex::EBFluxRegister</scope><name>fine_cell</name></member>
      <member refid="classamrex_1_1EBFluxRegister_1aded4ec44ced8ac5e0141a61188efd7a4" prot="public" virt="non-virtual"><scope>amrex::EBFluxRegister</scope><name>FineAdd</name></member>
      <member refid="classamrex_1_1EBFluxRegister_1a655e667850f837834107b1252ea400e4" prot="public" virt="non-virtual"><scope>amrex::EBFluxRegister</scope><name>FineAdd</name></member>
      <member refid="classamrex_1_1YAFluxRegister_1a655e667850f837834107b1252ea400e4" prot="public" virt="non-virtual" ambiguityscope="amrex::YAFluxRegister::"><scope>amrex::EBFluxRegister</scope><name>FineAdd</name></member>
      <member refid="classamrex_1_1YAFluxRegister_1aac0df8bf308e353e01a5477f2c3fe458" prot="public" virt="non-virtual"><scope>amrex::EBFluxRegister</scope><name>FineHasWork</name></member>
      <member refid="classamrex_1_1EBFluxRegister_1af3c9944a1620773f35a68caa68d22121" prot="public" virt="non-virtual"><scope>amrex::EBFluxRegister</scope><name>getCrseData</name></member>
      <member refid="classamrex_1_1EBFluxRegister_1a81c2340e9470f6d2f4c8658f9e929f78" prot="public" virt="non-virtual"><scope>amrex::EBFluxRegister</scope><name>getCrseFlag</name></member>
      <member refid="classamrex_1_1YAFluxRegister_1ae5fdcdbe4998bb8636e686763cebc949" prot="protected" virt="non-virtual"><scope>amrex::EBFluxRegister</scope><name>m_cfp_fab</name></member>
      <member refid="classamrex_1_1EBFluxRegister_1ae202afe28157891442668596f24fe460" prot="private" virt="non-virtual"><scope>amrex::EBFluxRegister</scope><name>m_cfp_inside_mask</name></member>
      <member refid="classamrex_1_1YAFluxRegister_1a1de636a21ef7f808042c3ad6ebefd84e" prot="protected" virt="non-virtual"><scope>amrex::EBFluxRegister</scope><name>m_cfp_localindex</name></member>
      <member refid="classamrex_1_1YAFluxRegister_1a31991246a5f75c0de9fbdfaf784db4d9" prot="protected" virt="non-virtual"><scope>amrex::EBFluxRegister</scope><name>m_cfp_mask</name></member>
      <member refid="classamrex_1_1YAFluxRegister_1a3f868dbecc624c8d0735356953e6911a" prot="protected" virt="non-virtual"><scope>amrex::EBFluxRegister</scope><name>m_cfpatch</name></member>
      <member refid="classamrex_1_1YAFluxRegister_1ad10fb234e2fec5e6486d114884150a2b" prot="protected" virt="non-virtual"><scope>amrex::EBFluxRegister</scope><name>m_crse_data</name></member>
      <member refid="classamrex_1_1YAFluxRegister_1a6f45ea054c1b1838346dd1b746a756ac" prot="protected" virt="non-virtual"><scope>amrex::EBFluxRegister</scope><name>m_crse_fab_flag</name></member>
      <member refid="classamrex_1_1YAFluxRegister_1a3e49048433f266d6f9e1c1f79dc0b395" prot="protected" virt="non-virtual"><scope>amrex::EBFluxRegister</scope><name>m_crse_flag</name></member>
      <member refid="classamrex_1_1YAFluxRegister_1a6170429b80c9c95fc90120a72cf7d2b6" prot="protected" virt="non-virtual"><scope>amrex::EBFluxRegister</scope><name>m_crse_geom</name></member>
      <member refid="classamrex_1_1YAFluxRegister_1a4abd839a10e74024737f9adf7e72ca2d" prot="protected" virt="non-virtual"><scope>amrex::EBFluxRegister</scope><name>m_fine_geom</name></member>
      <member refid="classamrex_1_1YAFluxRegister_1a6fcbf17c79baf4ec382a3a2124ecdfed" prot="protected" virt="non-virtual"><scope>amrex::EBFluxRegister</scope><name>m_fine_level</name></member>
      <member refid="classamrex_1_1YAFluxRegister_1aa6fb273e1e2d183bb7e5a15b4df5fa2e" prot="protected" virt="non-virtual"><scope>amrex::EBFluxRegister</scope><name>m_ncomp</name></member>
      <member refid="classamrex_1_1YAFluxRegister_1aba05eb1f76e3659a6aadac0e2c1011bb" prot="protected" virt="non-virtual"><scope>amrex::EBFluxRegister</scope><name>m_ratio</name></member>
      <member refid="classamrex_1_1EBFluxRegister_1a03dd763c1ebb0a67b2fd52ded49b1f53" prot="public" virt="non-virtual"><scope>amrex::EBFluxRegister</scope><name>Reflux</name></member>
      <member refid="classamrex_1_1YAFluxRegister_1a710ed45f31383818bc39e92010e63cb6" prot="public" virt="non-virtual" ambiguityscope="amrex::YAFluxRegister::"><scope>amrex::EBFluxRegister</scope><name>Reflux</name></member>
      <member refid="classamrex_1_1YAFluxRegister_1a9f4e5bbfcfe4bd2de5e3487a80e8cc0c" prot="public" virt="non-virtual"><scope>amrex::EBFluxRegister</scope><name>reset</name></member>
      <member refid="classamrex_1_1YAFluxRegister_1abfac49b8daf5d0b0303aaa24a4f7751a" prot="public" virt="non-virtual"><scope>amrex::EBFluxRegister</scope><name>YAFluxRegister</name></member>
      <member refid="classamrex_1_1YAFluxRegister_1a4cb85ba705d31548325bd3f09c6f17ff" prot="public" virt="non-virtual"><scope>amrex::EBFluxRegister</scope><name>YAFluxRegister</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
