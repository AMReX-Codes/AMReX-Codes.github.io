<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classamrex_1_1LinOp" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>amrex::LinOp</compoundname>
    <derivedcompoundref refid="classamrex_1_1ABec4" prot="public" virt="non-virtual">amrex::ABec4</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1ABecLaplacian" prot="public" virt="non-virtual">amrex::ABecLaplacian</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1Laplacian" prot="public" virt="non-virtual">amrex::Laplacian</derivedcompoundref>
    <includes refid="AMReX__LinOp_8H" local="no">AMReX_LinOp.H</includes>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classamrex_1_1LinOp_1ad5f2fc8009714c47dc63ff6a7a73a5de" prot="public" static="no">
        <name>BC_Mode</name>
        <enumvalue id="classamrex_1_1LinOp_1ad5f2fc8009714c47dc63ff6a7a73a5deae1724332b6960ec73ce5040947963f78" prot="public">
          <name>Homogeneous_BC</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classamrex_1_1LinOp_1ad5f2fc8009714c47dc63ff6a7a73a5dea2789f303c136a93263ed4b63ce83d29a" prot="public">
          <name>Inhomogeneous_BC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.H" line="87" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.H" bodystart="87" bodyend="87"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classamrex_1_1LinOp_1aa9588834363609399b2953a1285311fc" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; Real, <ref refid="AMReX__SPACE_8H_1af66ac7d7c04dad9fd54778fe5a4e816f" kindref="member">BL_SPACEDIM</ref> &gt; &gt;</type>
        <definition>Vector&lt; Array&lt;Real,BL_SPACEDIM&gt; &gt; amrex::LinOp::h</definition>
        <argsstring></argsstring>
        <name>h</name>
        <briefdescription>
<para><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref> (on level) of Arrays (on dimension) of grid spacings. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.H" line="394" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.H" bodystart="394" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1LinOp_1aaacb98abdbfa3d9377c369fe5cc79b68" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &gt;</type>
        <definition>Vector&lt; BoxArray &gt; amrex::LinOp::gbox</definition>
        <argsstring></argsstring>
        <name>gbox</name>
        <briefdescription>
<para><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref> (on level) of <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>&apos;s of <ref refid="classamrex_1_1LinOp" kindref="compound">LinOp</ref>&apos;s domain. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.H" line="397" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.H" bodystart="397" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1LinOp_1a58088c44f9d858885f1125efb3b4222e" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BndryRegister" kindref="compound">BndryRegister</ref> &gt;</type>
        <definition>Vector&lt;BndryRegister&gt; amrex::LinOp::undrrelxr</definition>
        <argsstring></argsstring>
        <name>undrrelxr</name>
        <briefdescription>
<para><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref> (on level) of pointers to BndryRegisters along each grid for scratch data required to modify internal stencil on boundary. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.H" line="403" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.H" bodystart="403" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1LinOp_1af9de09651d7047e04a70de03facb5398" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiMask" kindref="compound">MultiMask</ref> &gt; &gt;</type>
        <definition>Vector&lt;Vector&lt;MultiMask&gt; &gt; amrex::LinOp::maskvals</definition>
        <argsstring></argsstring>
        <name>maskvals</name>
        <briefdescription>
<para><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref> (on level) of Vectors (on orientation) of MultiMasks for whether boundary Fabs are covered, not_covered, outside_domain. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.H" line="409" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.H" bodystart="409" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1LinOp_1a42cf216bf54bd0cb244669a91635dbec" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiMask" kindref="compound">MultiMask</ref> &gt; &gt;</type>
        <definition>Vector&lt;Vector&lt;MultiMask&gt; &gt; amrex::LinOp::lmaskvals</definition>
        <argsstring></argsstring>
        <name>lmaskvals</name>
        <briefdescription>
<para>Similar to maskvals, but only for level 0. It&apos;s only made if it&apos;s needed. Currently used only in <ref refid="classamrex_1_1LinOp_1a7bb88ff651d23b6908c7b2bceaa34b0e" kindref="member">applyBC()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.H" line="415" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.H" bodystart="415" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1LinOp_1aa82bdf791430c2a09b3b436edf9396b5" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1BndryData" kindref="compound">BndryData</ref> *</type>
        <definition>BndryData* amrex::LinOp::bgb</definition>
        <argsstring></argsstring>
        <name>bgb</name>
        <briefdescription>
<para>boundary data class </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.H" line="418" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.H" bodystart="418" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1LinOp_1a447bf2c68e5e4fb5b275fefe879fe1e5" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt;</type>
        <definition>Vector&lt; Geometry &gt; amrex::LinOp::geomarray</definition>
        <argsstring></argsstring>
        <name>geomarray</name>
        <briefdescription>
<para><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref> (on level) of geometry objects. Needed for determining whether stuff intersects on periodic domains. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.H" line="424" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.H" bodystart="424" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1LinOp_1a6b431b3abaa1031a23c3d7972d7dab93" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int amrex::LinOp::harmavg</definition>
        <argsstring></argsstring>
        <name>harmavg</name>
        <briefdescription>
<para>flag (=1 if use harmonic averaged interpolation for coefficients, =0 is arithmetic averaging) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.H" line="430" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.H" bodystart="430" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1LinOp_1a24a48ff7792144be5c69884015388367" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int amrex::LinOp::verbose</definition>
        <argsstring></argsstring>
        <name>verbose</name>
        <briefdescription>
<para>flag (&gt;0 is verbose execution) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.H" line="433" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.H" bodystart="433" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1LinOp_1aa898f6575bb89bf315bb7a5309ad944f" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int amrex::LinOp::maxorder</definition>
        <argsstring></argsstring>
        <name>maxorder</name>
        <briefdescription>
<para>maximum interpolation order used for constructing Dirichlet ghost node values </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.H" line="439" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.H" bodystart="439" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-static-attrib">
      <memberdef kind="variable" id="classamrex_1_1LinOp_1a209d6c6a23f1627c3dd246b737b342a5" prot="protected" static="yes" mutable="no">
        <type>int</type>
        <definition>int amrex::LinOp::def_harmavg</definition>
        <argsstring></argsstring>
        <name>def_harmavg</name>
        <briefdescription>
<para>default value for harm_avg </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.H" line="442" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.H" bodystart="442" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1LinOp_1a4bc7f813757f64c47583b5c110504644" prot="protected" static="yes" mutable="no">
        <type>int</type>
        <definition>int amrex::LinOp::def_verbose</definition>
        <argsstring></argsstring>
        <name>def_verbose</name>
        <briefdescription>
<para>default value for verbose </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.H" line="445" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.H" bodystart="445" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1LinOp_1a46c9e9b959b202156654ab2a806d36b3" prot="protected" static="yes" mutable="no">
        <type>int</type>
        <definition>int amrex::LinOp::def_maxorder</definition>
        <argsstring></argsstring>
        <name>def_maxorder</name>
        <briefdescription>
<para>default maximum BC interpolant order </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.H" line="448" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.H" bodystart="448" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1LinOp_1afbf053df86bb20e076291152600f06ac" prot="protected" static="yes" mutable="no">
        <type>int</type>
        <definition>int amrex::LinOp::LinOp_grow</definition>
        <argsstring></argsstring>
        <name>LinOp_grow</name>
        <briefdescription>
<para>Number of grow cells required for this operator. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.H" line="451" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.H" bodystart="451" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1LinOp_1a528f7163d138d4c86f826821e751fae5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::LinOp::LinOp</definition>
        <argsstring>(const BndryData &amp;mgb, const Real _h)</argsstring>
        <name>LinOp</name>
        <param>
          <type>const <ref refid="classamrex_1_1BndryData" kindref="compound">BndryData</ref> &amp;</type>
          <declname>mgb</declname>
        </param>
        <param>
          <type>const Real</type>
          <declname>_h</declname>
        </param>
        <briefdescription>
<para>Allocate a <ref refid="classamrex_1_1LinOp" kindref="compound">LinOp</ref> for this box array, boundary and (uniform) spacing info. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mgb</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_h</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.H" line="95" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.cpp" bodystart="72" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1LinOp_1a11923eefafc8a3c572854a571edc03c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::LinOp::LinOp</definition>
        <argsstring>(const BndryData &amp;mgb, const Real *_h)</argsstring>
        <name>LinOp</name>
        <param>
          <type>const <ref refid="classamrex_1_1BndryData" kindref="compound">BndryData</ref> &amp;</type>
          <declname>mgb</declname>
        </param>
        <param>
          <type>const Real *</type>
          <declname>_h</declname>
        </param>
        <briefdescription>
<para>Allocate a <ref refid="classamrex_1_1LinOp" kindref="compound">LinOp</ref> for this box array, boundary data and spacing array info. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mgb</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_h</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.H" line="104" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.cpp" bodystart="85" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1LinOp_1adc5128fa53133f87d6beea7127766a17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::LinOp::LinOp</definition>
        <argsstring>(BndryData *mgb, const Real *_h)</argsstring>
        <name>LinOp</name>
        <param>
          <type><ref refid="classamrex_1_1BndryData" kindref="compound">BndryData</ref> *</type>
          <declname>mgb</declname>
        </param>
        <param>
          <type>const Real *</type>
          <declname>_h</declname>
        </param>
        <briefdescription>
<para>Allocate a <ref refid="classamrex_1_1LinOp" kindref="compound">LinOp</ref> for this box array, boundary data and spacing array info. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="classamrex_1_1LinOp" kindref="compound">LinOp</ref> assumes ownership of the pointer.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mgb</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_h</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.H" line="115" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.cpp" bodystart="93" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1LinOp_1a62ce7afd9c1479ee90df81e055e88a1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>amrex::LinOp::~LinOp</definition>
        <argsstring>()</argsstring>
        <name>~LinOp</name>
        <briefdescription>
<para>The destructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.H" line="121" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.cpp" bodystart="101" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1LinOp_1ac5b9fd4b970fee2132c2ea0c5db97149" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::LinOp::apply</definition>
        <argsstring>(MultiFab &amp;out, MultiFab &amp;in, int level=0, LinOp::BC_Mode bc_mode=LinOp::Inhomogeneous_BC, bool local=false, int src_comp=0, int dst_comp=0, int num_comp=1, int bndry_comp=0)</argsstring>
        <name>apply</name>
        <reimplementedby refid="classamrex_1_1ABec4_1aa43b9218fb2965bb93e3c79150d81e5c">apply</reimplementedby>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>int</type>
          <declname>level</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="classamrex_1_1LinOp_1ad5f2fc8009714c47dc63ff6a7a73a5de" kindref="member">LinOp::BC_Mode</ref></type>
          <declname>bc_mode</declname>
          <defval><ref refid="classamrex_1_1LinOp_1ad5f2fc8009714c47dc63ff6a7a73a5dea2789f303c136a93263ed4b63ce83d29a" kindref="member">LinOp::Inhomogeneous_BC</ref></defval>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>int</type>
          <declname>src_comp</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>dst_comp</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>num_comp</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>bndry_comp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Applies level <ref refid="classamrex_1_1LinOp" kindref="compound">LinOp</ref> to &quot;in&quot;, returns &quot;out&quot;, uses BC_mode flag. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bc_mode</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>local</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src_comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst_comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bndry_comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.H" line="136" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.cpp" bodystart="160" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1LinOp_1a7bb88ff651d23b6908c7b2bceaa34b0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::LinOp::applyBC</definition>
        <argsstring>(MultiFab &amp;inout, int src_comp, int num_comp, int level=0, LinOp::BC_Mode bc_mode=LinOp::Inhomogeneous_BC, bool local=false, int bndryComp=0)</argsstring>
        <name>applyBC</name>
        <reimplementedby refid="classamrex_1_1ABec4_1aeddfbd519c0af2fc240e64846b19df67">applyBC</reimplementedby>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>inout</declname>
        </param>
        <param>
          <type>int</type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>level</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="classamrex_1_1LinOp_1ad5f2fc8009714c47dc63ff6a7a73a5de" kindref="member">LinOp::BC_Mode</ref></type>
          <declname>bc_mode</declname>
          <defval><ref refid="classamrex_1_1LinOp_1ad5f2fc8009714c47dc63ff6a7a73a5dea2789f303c136a93263ed4b63ce83d29a" kindref="member">LinOp::Inhomogeneous_BC</ref></defval>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>int</type>
          <declname>bndryComp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Fills level boundary cells using BC_mode flag, int. BC data if reqd. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inout</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src_comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bc_mode</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>local</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bndryComp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.H" line="157" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.cpp" bodystart="175" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1LinOp_1ab77a2e7e90d65073fccb8a54fd128177" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::LinOp::residual</definition>
        <argsstring>(MultiFab &amp;residL, const MultiFab &amp;rhsL, MultiFab &amp;solnL, int level=0, LinOp::BC_Mode bc_mode=LinOp::Inhomogeneous_BC, bool local=false)</argsstring>
        <name>residual</name>
        <reimplementedby refid="classamrex_1_1ABec4_1a7c71f90b13ae2df25e59d5b9006861e7">residual</reimplementedby>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>residL</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>rhsL</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>solnL</declname>
        </param>
        <param>
          <type>int</type>
          <declname>level</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="classamrex_1_1LinOp_1ad5f2fc8009714c47dc63ff6a7a73a5de" kindref="member">LinOp::BC_Mode</ref></type>
          <declname>bc_mode</declname>
          <defval><ref refid="classamrex_1_1LinOp_1ad5f2fc8009714c47dc63ff6a7a73a5dea2789f303c136a93263ed4b63ce83d29a" kindref="member">LinOp::Inhomogeneous_BC</ref></defval>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Compute the level residual = rhsL - L(solnL). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>residL</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhsL</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>solnL</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bc_mode</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>local</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.H" line="175" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.cpp" bodystart="262" bodyend="272"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1LinOp_1a11f5dfbd38e5b5551dbcec9df469e11d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::LinOp::smooth</definition>
        <argsstring>(MultiFab &amp;solnL, const MultiFab &amp;rhsL, int level=0, LinOp::BC_Mode bc_mode=LinOp::Inhomogeneous_BC)</argsstring>
        <name>smooth</name>
        <reimplementedby refid="classamrex_1_1ABec2_1ae6bfc959a2151d8d3c6a6a8af4f7c600">smooth</reimplementedby>
        <reimplementedby refid="classamrex_1_1ABec4_1a9d3b23ff5d26e9e94a1a757c07ef1b27">smooth</reimplementedby>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>solnL</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>rhsL</declname>
        </param>
        <param>
          <type>int</type>
          <declname>level</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="classamrex_1_1LinOp_1ad5f2fc8009714c47dc63ff6a7a73a5de" kindref="member">LinOp::BC_Mode</ref></type>
          <declname>bc_mode</declname>
          <defval><ref refid="classamrex_1_1LinOp_1ad5f2fc8009714c47dc63ff6a7a73a5dea2789f303c136a93263ed4b63ce83d29a" kindref="member">LinOp::Inhomogeneous_BC</ref></defval>
        </param>
        <briefdescription>
<para>Smooth the level system L(solnL)=rhsL. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>solnL</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhsL</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bc_mode</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.H" line="190" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.cpp" bodystart="275" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1LinOp_1a81bae1e07a9908f6b677d1619d5eb4ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::LinOp::jacobi_smooth</definition>
        <argsstring>(MultiFab &amp;solnL, const MultiFab &amp;rhsL, int level=0, LinOp::BC_Mode bc_mode=LinOp::Inhomogeneous_BC)</argsstring>
        <name>jacobi_smooth</name>
        <reimplementedby refid="classamrex_1_1ABec2_1a7db8b72c0335a15321686dca09d91001">jacobi_smooth</reimplementedby>
        <reimplementedby refid="classamrex_1_1ABec4_1aee8ae235af57c533202b719b7d8e86dc">jacobi_smooth</reimplementedby>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>solnL</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>rhsL</declname>
        </param>
        <param>
          <type>int</type>
          <declname>level</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="classamrex_1_1LinOp_1ad5f2fc8009714c47dc63ff6a7a73a5de" kindref="member">LinOp::BC_Mode</ref></type>
          <declname>bc_mode</declname>
          <defval><ref refid="classamrex_1_1LinOp_1ad5f2fc8009714c47dc63ff6a7a73a5dea2789f303c136a93263ed4b63ce83d29a" kindref="member">LinOp::Inhomogeneous_BC</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.H" line="195" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.cpp" bodystart="288" bodyend="295"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1LinOp_1a187358833ef9bd25a218c2fd0ac499c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>Real</type>
        <definition>Real amrex::LinOp::norm</definition>
        <argsstring>(int nm=0, int level=0, const bool local=false)</argsstring>
        <name>norm</name>
        <reimplementedby refid="classamrex_1_1Laplacian_1a785d3a2255d1909868a82aa5df5060f4">norm</reimplementedby>
        <reimplementedby refid="classamrex_1_1ABec4_1a7ee1aebd0c0065d57d802a5f62174e3e">norm</reimplementedby>
        <reimplementedby refid="classamrex_1_1ABecLaplacian_1a67e9fbe6e4c75b0b6755c8e59f91ba19">norm</reimplementedby>
        <param>
          <type>int</type>
          <declname>nm</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>level</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Estimate the norm of the operator. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nm</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>local</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.H" line="207" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.cpp" bodystart="298" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1LinOp_1a66f650936c7785e8958617b91e7ef2a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void amrex::LinOp::compFlux</definition>
        <argsstring>(AMREX_D_DECL(MultiFab &amp;xflux, MultiFab &amp;yflux, MultiFab &amp;zflux), MultiFab &amp;in, const BC_Mode &amp;bc_mode=Inhomogeneous_BC, int sComp=0, int dComp=0, int nComp=1, int bndComp=0)=0</argsstring>
        <name>compFlux</name>
        <reimplementedby refid="classamrex_1_1Laplacian_1a1fdc716bdcc5dbb407363b432472537c">compFlux</reimplementedby>
        <reimplementedby refid="classamrex_1_1ABec4_1a52d7a01a4cce9b4045b3214b2ce3e07b">compFlux</reimplementedby>
        <reimplementedby refid="classamrex_1_1ABecLaplacian_1a4cfd0950f51135c1657069085a96f0a6">compFlux</reimplementedby>
        <param>
          <type><ref refid="namespaceamrex_1a8de829410ed15dbc56e4dafc9bc6ea69a68b0c60ae4f5670ee8d0ad5dda84d0fd" kindref="member">AMREX_D_DECL</ref>(<ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;xflux, <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;yflux, <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;zflux)</type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1LinOp_1ad5f2fc8009714c47dc63ff6a7a73a5de" kindref="member">BC_Mode</ref> &amp;</type>
          <declname>bc_mode</declname>
          <defval><ref refid="classamrex_1_1LinOp_1ad5f2fc8009714c47dc63ff6a7a73a5dea2789f303c136a93263ed4b63ce83d29a" kindref="member">Inhomogeneous_BC</ref></defval>
        </param>
        <param>
          <type>int</type>
          <declname>sComp</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>dComp</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>nComp</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>bndComp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Compute flux associated with the op. </para>        </briefdescription>
        <detaileddescription>
<para>) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bc_mode</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sComp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dComp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nComp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bndComp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.H" line="222" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1LinOp_1ab6ad6639bc139043d7e905f8d50e942c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1BndryData" kindref="compound">BndryData</ref> &amp;</type>
        <definition>const BndryData&amp; amrex::LinOp::bndryData</definition>
        <argsstring>() const </argsstring>
        <name>bndryData</name>
        <briefdescription>
<para>Return the boundary data object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.H" line="229" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.H" bodystart="229" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1LinOp_1aed40103a32e7a986e5b58594031ee887" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
        <definition>const DistributionMapping&amp; amrex::LinOp::DistributionMap</definition>
        <argsstring>() const </argsstring>
        <name>DistributionMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.H" line="231" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.H" bodystart="231" bodyend="231"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1LinOp_1a4091f3d4047359da4093f5174d56f13d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::LinOp::bndryData</definition>
        <argsstring>(const BndryData &amp;bd)</argsstring>
        <name>bndryData</name>
        <param>
          <type>const <ref refid="classamrex_1_1BndryData" kindref="compound">BndryData</ref> &amp;</type>
          <declname>bd</declname>
        </param>
        <briefdescription>
<para>Set the boundary data object. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bd</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.H" line="238" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.cpp" bodystart="66" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1LinOp_1a5f70912a54c7de221e2d51c4f432a11d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>virtual const BoxArray&amp; amrex::LinOp::boxArray</definition>
        <argsstring>(int level=0) const </argsstring>
        <name>boxArray</name>
        <reimplementedby refid="classamrex_1_1ABec4_1a3f788634a59b47732b149cdb4084fabb">boxArray</reimplementedby>
        <param>
          <type>int</type>
          <declname>level</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Return the box array. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.H" line="245" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.H" bodystart="245" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1LinOp_1aba1ac78a74d1ca7be2e9ef523c185800" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::LinOp::numGrids</definition>
        <argsstring>() const </argsstring>
        <name>numGrids</name>
        <briefdescription>
<para>Return the number of grids. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.H" line="253" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.H" bodystart="253" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1LinOp_1a9d552129ce2624a83a6ba56ead0f4d87" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>int</type>
        <definition>virtual int amrex::LinOp::numLevels</definition>
        <argsstring>() const </argsstring>
        <name>numLevels</name>
        <reimplementedby refid="classamrex_1_1ABec4_1a0a0c48d9fc31bc66bd5ba2b4e360e8ed">numLevels</reimplementedby>
        <briefdescription>
<para>Return the number of levels. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.H" line="258" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.H" bodystart="258" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1LinOp_1a09492904c8111d7108412a034efd4b1e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>int</type>
        <definition>virtual int amrex::LinOp::maxOrder</definition>
        <argsstring>() const </argsstring>
        <name>maxOrder</name>
        <briefdescription>
<para>Return the order of the boundary condition interpolant. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.H" line="263" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.H" bodystart="263" bodyend="263"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1LinOp_1a4e9d794124be8ae04fa7c4c6ab2d5fee" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>int</type>
        <definition>int amrex::LinOp::maxOrder</definition>
        <argsstring>(int maxorder_)</argsstring>
        <name>maxOrder</name>
        <param>
          <type>int</type>
          <declname>maxorder_</declname>
        </param>
        <briefdescription>
<para>Set the order of the boundary condition interpolant. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>maxorder_</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.H" line="270" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.cpp" bodystart="589" bodyend="596"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1LinOp_1a8489bd97fdad9c4de15a5610a38f0652" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>int</type>
        <definition>virtual int amrex::LinOp::NumGrow</definition>
        <argsstring>(int level=0) const </argsstring>
        <name>NumGrow</name>
        <reimplementedby refid="classamrex_1_1ABec4_1a009633468429627f9a24413d24361400">NumGrow</reimplementedby>
        <param>
          <type>int</type>
          <declname>level</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Return the number of grow cells this operator expects in the input state to compute &quot;apply&quot;. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.H" line="277" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.H" bodystart="277" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1LinOp_1a63537ed5b853907fc8a3b7adace5a383" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::LinOp::prepareForLevel</definition>
        <argsstring>(int level)</argsstring>
        <name>prepareForLevel</name>
        <reimplementedby refid="classamrex_1_1ABec4_1a59c652ddcb6d1c1d3255843ed415ca49">prepareForLevel</reimplementedby>
        <reimplementedby refid="classamrex_1_1ABecLaplacian_1a41e56686ca282635f1200c6c02fa8337">prepareForLevel</reimplementedby>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <briefdescription>
<para>Construct/allocate internal data necessary for adding a new level. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.H" line="284" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.cpp" bodystart="305" bodyend="362"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1LinOp_1a399736dcc956ff8f1fffaa2757028874" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
        <definition>const Geometry &amp; amrex::LinOp::getGeom</definition>
        <argsstring>(int level)</argsstring>
        <name>getGeom</name>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.H" line="294" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.cpp" bodystart="547" bodyend="550"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1LinOp_1a61745f14570d6a595ab67ec1bf283c18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const Real *</type>
        <definition>const Real * amrex::LinOp::getDx</definition>
        <argsstring>(int level)</argsstring>
        <name>getDx</name>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.H" line="295" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.cpp" bodystart="553" bodyend="556"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1LinOp_1a5823bb22e92e48ddbc13ceae382d0747" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>Real</type>
        <definition>Real amrex::LinOp::get_alpha</definition>
        <argsstring>() const </argsstring>
        <name>get_alpha</name>
        <reimplementedby refid="classamrex_1_1ABecLaplacian_1a44bb521dc76284823e9e5c65d9771dbf">get_alpha</reimplementedby>
        <reimplementedby refid="classamrex_1_1ABec4_1ac4ac8db1f5906ff6d432891a14e27ee3">get_alpha</reimplementedby>
        <briefdescription>
<para>Get scalar alpha coefficient. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.H" line="300" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.cpp" bodystart="559" bodyend="563"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1LinOp_1af245a02cfc92f3ddf30d6ace1c1683bb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>Real</type>
        <definition>Real amrex::LinOp::get_beta</definition>
        <argsstring>() const </argsstring>
        <name>get_beta</name>
        <reimplementedby refid="classamrex_1_1ABecLaplacian_1a1e44aab98e812a24c04e7c0685855188">get_beta</reimplementedby>
        <reimplementedby refid="classamrex_1_1ABec4_1aa3cb2ce5caf5ce37d3d16868e9108f8b">get_beta</reimplementedby>
        <briefdescription>
<para>Get scalar beta coefficient. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.H" line="305" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.cpp" bodystart="566" bodyend="570"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1LinOp_1ac8d092273a44066329b73468fe885d2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
        <definition>const MultiFab &amp; amrex::LinOp::aCoefficients</definition>
        <argsstring>(int level=0)</argsstring>
        <name>aCoefficients</name>
        <reimplementedby refid="classamrex_1_1ABecLaplacian_1aea4bd32d44ca3eac0fb85aeb8ec080ad">aCoefficients</reimplementedby>
        <reimplementedby refid="classamrex_1_1ABec4_1aaa91c6f3d872a0382438ce0406441ef1">aCoefficients</reimplementedby>
        <param>
          <type>int</type>
          <declname>level</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Return reference to &quot;a&quot; coefficients for base level. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.H" line="312" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.cpp" bodystart="573" bodyend="578"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1LinOp_1a7bb1e7f6286ace56305bcb17a2ebd06a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
        <definition>const MultiFab &amp; amrex::LinOp::bCoefficients</definition>
        <argsstring>(int dir, int level=0)</argsstring>
        <name>bCoefficients</name>
        <reimplementedby refid="classamrex_1_1ABecLaplacian_1aa8a45e5abf5e72695b939175e1b634eb">bCoefficients</reimplementedby>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>int</type>
          <declname>level</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Return reference to &quot;b&quot; coefficients for base level. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.H" line="320" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.cpp" bodystart="581" bodyend="586"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classamrex_1_1LinOp_1aef9959d08e92b487aca259f7c96c87d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const LinOp &amp;lp)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1LinOp" kindref="compound">LinOp</ref> &amp;</type>
          <declname>lp</declname>
        </param>
        <briefdescription>
<para>Output operator internal to an ASCII stream. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>os</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.H" line="292" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.cpp" bodystart="489" bodyend="544"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classamrex_1_1LinOp_1a4d4e5333f7d48ad27505ca77110d3e3a" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::LinOp::clearToLevel</definition>
        <argsstring>(int level)</argsstring>
        <name>clearToLevel</name>
        <reimplementedby refid="classamrex_1_1ABec4_1a4508fa8422aab37ac2e27b77fb0b4bb6">clearToLevel</reimplementedby>
        <reimplementedby refid="classamrex_1_1ABecLaplacian_1afd86373fe31cc6880ee3bb8b30c5df0c">clearToLevel</reimplementedby>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <briefdescription>
<para>Remove internal data necessary for a level and all higher. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.H" line="329" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.cpp" bodystart="107" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1LinOp_1a2aa4b0f8262bca0542f508adfd6d528f" prot="protected" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void amrex::LinOp::Fapply</definition>
        <argsstring>(MultiFab &amp;out, const MultiFab &amp;in, int level)=0</argsstring>
        <name>Fapply</name>
        <reimplementedby refid="classamrex_1_1Laplacian_1ace5207492179583a920d5967d43d405d">Fapply</reimplementedby>
        <reimplementedby refid="classamrex_1_1ABecLaplacian_1a2528a367ea429b2b10faa2523db04f41">Fapply</reimplementedby>
        <reimplementedby refid="classamrex_1_1ABec4_1a3b03cb05f11e08ab62203d864ece9803">Fapply</reimplementedby>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <briefdescription>
<para>Virtual to apply the level operator to the internal nodes of &quot;in&quot;, return result in &quot;out&quot;. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.H" line="339" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1LinOp_1ab06ab51c6301f1491dee04f05eadd471" prot="protected" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void amrex::LinOp::Fapply</definition>
        <argsstring>(MultiFab &amp;out, int dst_comp, const MultiFab &amp;in, int src_comp, int num_comp, int level)=0</argsstring>
        <name>Fapply</name>
        <reimplementedby refid="classamrex_1_1Laplacian_1ad10bec6e486e119a7c26f705fdcdfde7">Fapply</reimplementedby>
        <reimplementedby refid="classamrex_1_1ABecLaplacian_1a61e42ca31dc99b395b5f332c22c150c9">Fapply</reimplementedby>
        <reimplementedby refid="classamrex_1_1ABec4_1a515e9f2ce28ecd0c9bbf1c3434246be8">Fapply</reimplementedby>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dst_comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>int</type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.H" line="342" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1LinOp_1a2d3bf8d174818c5a90880d7178b0bfb9" prot="protected" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void amrex::LinOp::Fsmooth</definition>
        <argsstring>(MultiFab &amp;solnL, const MultiFab &amp;rhsL, int level, int rgbflag)=0</argsstring>
        <name>Fsmooth</name>
        <reimplementedby refid="classamrex_1_1ABec2_1af7ccba3dd25ceb15be068874150ad0d5">Fsmooth</reimplementedby>
        <reimplementedby refid="classamrex_1_1Laplacian_1a40c3f0da7cfe04502a9e2e31ef1e85b3">Fsmooth</reimplementedby>
        <reimplementedby refid="classamrex_1_1ABecLaplacian_1a53b99dd8b0ec239d23ce3940d9a5dc49">Fsmooth</reimplementedby>
        <reimplementedby refid="classamrex_1_1ABec4_1aa286995bcbcc3532f2c8273e619370e4">Fsmooth</reimplementedby>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>solnL</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>rhsL</declname>
        </param>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <param>
          <type>int</type>
          <declname>rgbflag</declname>
        </param>
        <briefdescription>
<para>Virtual to carry out the level smoothing operation for L(solnL)=rhsL on internal nodes. Modify solnL in place. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>solnL</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhsL</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rgbflag</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.H" line="358" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1LinOp_1aacd9da04ef7c21a4fa606fac28b082e6" prot="protected" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void amrex::LinOp::Fsmooth_jacobi</definition>
        <argsstring>(MultiFab &amp;solnL, const MultiFab &amp;rhsL, int level)=0</argsstring>
        <name>Fsmooth_jacobi</name>
        <reimplementedby refid="classamrex_1_1ABec2_1a042ac5559ac2d94f1d1d3ce1d3875816">Fsmooth_jacobi</reimplementedby>
        <reimplementedby refid="classamrex_1_1Laplacian_1a430c60bd674648f5dbd3627050e36468">Fsmooth_jacobi</reimplementedby>
        <reimplementedby refid="classamrex_1_1ABecLaplacian_1a5012599654ff5181eb00d0e4435caa20">Fsmooth_jacobi</reimplementedby>
        <reimplementedby refid="classamrex_1_1ABec4_1a5bb5cd536c1f0e2be3f94f2988b5ed76">Fsmooth_jacobi</reimplementedby>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>solnL</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>rhsL</declname>
        </param>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.H" line="363" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1LinOp_1a48100b02251f55f0394e976eca1e8211" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::LinOp::makeCoefficients</definition>
        <argsstring>(MultiFab &amp;crs, const MultiFab &amp;fine, int level)</argsstring>
        <name>makeCoefficients</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>crs</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <briefdescription>
<para>Build coefficients at coarser level by interpolating &quot;fine&quot; (builds in appropriate node/cell centering) </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>crs</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fine</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.H" line="375" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.cpp" bodystart="365" bodyend="486"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1LinOp_1a123f74bf002cbcc02fcfef0ac794cc57" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::LinOp::initConstruct</definition>
        <argsstring>(const Real *_h)</argsstring>
        <name>initConstruct</name>
        <param>
          <type>const Real *</type>
          <declname>_h</declname>
        </param>
        <briefdescription>
<para>Helper function for object construction. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_h</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.H" line="391" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.cpp" bodystart="110" bodyend="157"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-static-func">
      <memberdef kind="function" id="classamrex_1_1LinOp_1a089bb8eb0f74b22a7abbd60b3e872c8f" prot="protected" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::LinOp::Initialize</definition>
        <argsstring>()</argsstring>
        <name>Initialize</name>
        <briefdescription>
<para>Initialize <ref refid="classamrex_1_1LinOp" kindref="compound">LinOp</ref> internal data. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.H" line="382" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.cpp" bodystart="31" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1LinOp_1a3e96cce265979ab38b675c22fab24657" prot="protected" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::LinOp::Finalize</definition>
        <argsstring>()</argsstring>
        <name>Finalize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.H" line="384" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.cpp" bodystart="60" bodyend="63"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classamrex_1_1LinOp_1a017e9a531af97d47214af370b5d1fce1" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::LinOp::LinOp</definition>
        <argsstring>(const LinOp &amp;rhs)</argsstring>
        <name>LinOp</name>
        <param>
          <type>const <ref refid="classamrex_1_1LinOp" kindref="compound">LinOp</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Not implemented. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.H" line="460" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1LinOp_1a910fc13e1a7c8809339d618f0bdbc0b5" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::LinOp::operator=</definition>
        <argsstring>(const LinOp &amp;rhs)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classamrex_1_1LinOp" kindref="compound">LinOp</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.H" line="461" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A <ref refid="classamrex_1_1LinOp" kindref="compound">LinOp</ref> is a virtual base class for general linear operators capable of acting on MultiFabs. All implementation and access functions are designed to make a <ref refid="classamrex_1_1LinOp" kindref="compound">LinOp</ref> object useful for representing and solving a set of linear equations on a union of rectangles in 2D or 3D. </para>    </briefdescription>
    <detaileddescription>
<para>A <ref refid="classamrex_1_1LinOp" kindref="compound">LinOp</ref> contains all the information necessary to construct and maintain a linear operator which acts on a cell-centered <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. It is a virtual base class, and therefore cannot itself be instantiated. The virtual functions implement &quot;apply&quot; and &quot;smooth&quot; operators (for the internal nodes), and therefore determine the mathematical character of the operator. <ref refid="classamrex_1_1LinOp" kindref="compound">LinOp</ref>, on the other hand, determines the implementation, filling ghost cells and creating coarsened versions of the domain and operator, etc. necessary for solving linear systems.</para><para><ref refid="classamrex_1_1LinOp" kindref="compound">LinOp</ref> is designed specifically for representing discrete approximations to partial differential operators. It requires a <ref refid="classamrex_1_1BndryData" kindref="compound">BndryData</ref> object, which maintains ghost cell data surrounding each rectangle in the domain, as well as position and boundary condition type specifiers. It also requires a (vector/scalar) grid spacing. On levels above the base level, <ref refid="classamrex_1_1LinOp" kindref="compound">LinOp</ref> internally recognizes adjacent domain rectangles (using methods similar to those in the <ref refid="classamrex_1_1BndryData" kindref="compound">BndryData</ref> class) and when applying boundary conditions (filling ghost cell regions) will give preference to &quot;valid&quot; data (i.e. ghost cells covered by adjacent grids are filled with the corresponding data from the interior of that adjacent grid rather than via the auxiliary boundary instructions).</para><para>A <ref refid="classamrex_1_1LinOp" kindref="compound">LinOp</ref> constructs a set of &quot;levels&quot;, which are useful for linear solution methods such as multigrid. On each grid, a new level is created by uniformly coarsening the grid structure by a factor of two in each coordinate direction (and then allocating and initializing any internal data necessary<ndash/>new level grid spacing, for example). A <ref refid="classamrex_1_1LinOp" kindref="compound">LinOp</ref> can fill boundary ghost cells, compute a &quot;norm&quot; and coordinate the &quot;apply&quot; and &quot;smooth&quot; operations at each level. Note that there are the same number of levels on each grid in the <ref refid="classamrex_1_1LinOp" kindref="compound">LinOp</ref>&apos;s domain.</para><para>If a boundary type specifier indicates the type &quot;BndryData::
LO_DIRICHLET&quot;, the ghost cells not covered by adjacent grids are filled on demand by a polynomial interpolant (of settable order) to compute the value specified in the <ref refid="classamrex_1_1BndryData" kindref="compound">BndryData</ref> FabSets along the edge of the grid boxes. A value is put into the ghost cell of the input multifab that can be assumed to exist outside the domain, at equal spacing with the rest of the nodes. &quot;BndryData::LO_NEUMANN&quot; conditions result in ghost cells filled by second order extrapolation, and results in again filling the ghost cell with a value appropriate for application in a constant spacing cell-centered discretization. The order of the interpolant is set by default in this class to 2, which is compatible with most simple algebraic relaxation methods for linear systems based on numerical PDE&apos;s. The interpolant can be queried/set via member functions, and is applied uniformly over the domain. The boundary location is specified as a distance from the wall of the grid block, and is given in the same units that the grid spacing, h, is specified.</para><para>All the member functions of <ref refid="classamrex_1_1LinOp" kindref="compound">LinOp</ref> which interact directly with the <ref refid="classamrex_1_1LinOp_1ac5b9fd4b970fee2132c2ea0c5db97149" kindref="member">apply()</ref> member take a BC_Mode flag. The BC_mode can be either Homogeneous_BC, or Inhomogeneous_BC. It is a strict requirement of the linear operator that <ref refid="classamrex_1_1LinOp_1ac5b9fd4b970fee2132c2ea0c5db97149" kindref="member">LinOp::apply</ref>(out,in,level,bc_mode=Homogeneous_BC) acting on in=0 returns out=0.</para><para>This class does NOT provide a copy constructor or assignment operator. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="3752">
        <label>amrex::LinOp</label>
        <link refid="classamrex_1_1LinOp"/>
      </node>
      <node id="3755">
        <label>amrex::ABec2</label>
        <link refid="classamrex_1_1ABec2"/>
        <childnode refid="3754" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3753">
        <label>amrex::ABec4</label>
        <link refid="classamrex_1_1ABec4"/>
        <childnode refid="3752" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3754">
        <label>amrex::ABecLaplacian</label>
        <link refid="classamrex_1_1ABecLaplacian"/>
        <childnode refid="3752" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3756">
        <label>amrex::Laplacian</label>
        <link refid="classamrex_1_1Laplacian"/>
        <childnode refid="3752" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3763">
        <label>std::vector&lt; amrex::Vector&lt; amrex::MultiMask &gt;, std::allocator&lt; amrex::Vector&lt; amrex::MultiMask &gt; &gt; &gt;</label>
      </node>
      <node id="3757">
        <label>amrex::LinOp</label>
        <link refid="classamrex_1_1LinOp"/>
        <childnode refid="3758" relation="usage">
          <edgelabel>h</edgelabel>
        </childnode>
        <childnode refid="3760" relation="usage">
          <edgelabel>undrrelxr</edgelabel>
        </childnode>
        <childnode refid="3762" relation="usage">
          <edgelabel>maskvals</edgelabel>
          <edgelabel>lmaskvals</edgelabel>
        </childnode>
        <childnode refid="3764" relation="usage">
          <edgelabel>gbox</edgelabel>
        </childnode>
        <childnode refid="3766" relation="usage">
          <edgelabel>geomarray</edgelabel>
        </childnode>
        <childnode refid="3768" relation="usage">
          <edgelabel>bgb</edgelabel>
        </childnode>
      </node>
      <node id="3793">
        <label>std::vector&lt; MPI_Status, std::allocator&lt; MPI_Status &gt; &gt;</label>
      </node>
      <node id="3765">
        <label>std::vector&lt; amrex::BoxArray, std::allocator&lt; amrex::BoxArray &gt; &gt;</label>
      </node>
      <node id="3774">
        <label>amrex::FabArrayBase::CacheStats</label>
        <link refid="structamrex_1_1FabArrayBase_1_1CacheStats"/>
        <childnode refid="3775" relation="usage">
          <edgelabel>name</edgelabel>
        </childnode>
      </node>
      <node id="3778">
        <label>amrex::FabArrayBase::FabArrayStats</label>
        <link refid="structamrex_1_1FabArrayBase_1_1FabArrayStats"/>
      </node>
      <node id="3777">
        <label>amrex::IntVect</label>
        <link refid="classamrex_1_1IntVect"/>
        <childnode refid="3777" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
      </node>
      <node id="3760">
        <label>amrex::Vector&lt; amrex::BndryRegister &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3761" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3807">
        <label>amrex::LayoutData&lt; amrex::Vector&lt; amrex::Vector&lt; amrex::BoundCond &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1LayoutData"/>
        <childnode refid="3773" relation="public-inheritance">
        </childnode>
        <childnode refid="3808" relation="usage">
          <edgelabel>m_data</edgelabel>
        </childnode>
      </node>
      <node id="3799">
        <label>Real</label>
      </node>
      <node id="3767">
        <label>std::vector&lt; amrex::Geometry, std::allocator&lt; amrex::Geometry &gt; &gt;</label>
      </node>
      <node id="3794">
        <label>amrex::Vector&lt; MPI_Request &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3795" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3768">
        <label>amrex::BndryData</label>
        <link refid="classamrex_1_1BndryData"/>
        <childnode refid="3769" relation="public-inheritance">
        </childnode>
        <childnode refid="3797" relation="usage">
          <edgelabel>geom</edgelabel>
        </childnode>
        <childnode refid="3802" relation="usage">
          <edgelabel>bcloc</edgelabel>
        </childnode>
        <childnode refid="3805" relation="usage">
          <edgelabel>masks</edgelabel>
        </childnode>
        <childnode refid="3807" relation="usage">
          <edgelabel>bcond</edgelabel>
        </childnode>
      </node>
      <node id="3788">
        <label>std::vector&lt; std::string, std::allocator&lt; std::string &gt; &gt;</label>
      </node>
      <node id="3779">
        <label>amrex::Vector&lt; int &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3780" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3775">
        <label>string</label>
      </node>
      <node id="3796">
        <label>amrex::Periodicity</label>
        <link refid="classamrex_1_1Periodicity"/>
        <childnode refid="3777" relation="usage">
          <edgelabel>period</edgelabel>
        </childnode>
      </node>
      <node id="3790">
        <label>std::vector&lt; char *, std::allocator&lt; char * &gt; &gt;</label>
      </node>
      <node id="3806">
        <label>std::vector&lt; amrex::MultiMask, std::allocator&lt; amrex::MultiMask &gt; &gt;</label>
      </node>
      <node id="3764">
        <label>amrex::Vector&lt; amrex::BoxArray &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3765" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3789">
        <label>amrex::Vector&lt; char * &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3790" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3809">
        <label>std::vector&lt; amrex::Vector&lt; amrex::Vector&lt; amrex::BoundCond &gt; &gt;, std::allocator&lt; amrex::Vector&lt; amrex::Vector&lt; amrex::BoundCond &gt; &gt; &gt; &gt;</label>
      </node>
      <node id="3791">
        <label>amrex::FabArray&lt; FAB &gt;::ShMem</label>
        <link refid="structamrex_1_1FabArray_1_1ShMem"/>
      </node>
      <node id="3805">
        <label>amrex::Vector&lt; amrex::MultiMask &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3806" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3795">
        <label>std::vector&lt; MPI_Request, std::allocator&lt; MPI_Request &gt; &gt;</label>
      </node>
      <node id="3780">
        <label>std::vector&lt; int, std::allocator&lt; int &gt; &gt;</label>
      </node>
      <node id="3761">
        <label>std::vector&lt; amrex::BndryRegister, std::allocator&lt; amrex::BndryRegister &gt; &gt;</label>
      </node>
      <node id="3785">
        <label>amrex::BoxArray</label>
        <link refid="classamrex_1_1BoxArray"/>
        <childnode refid="3777" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
        </childnode>
        <childnode refid="3786" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
      </node>
      <node id="3800">
        <label>amrex::RealBox</label>
        <link refid="classamrex_1_1RealBox"/>
        <childnode refid="3799" relation="usage">
          <edgelabel>xhi</edgelabel>
          <edgelabel>xlo</edgelabel>
        </childnode>
      </node>
      <node id="3808">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::Vector&lt; amrex::BoundCond &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3809" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3801">
        <label>amrex::Box</label>
        <link refid="classamrex_1_1Box"/>
        <childnode refid="3777" relation="usage">
          <edgelabel>bigend</edgelabel>
          <edgelabel>smallend</edgelabel>
        </childnode>
        <childnode refid="3786" relation="usage">
          <edgelabel>btype</edgelabel>
        </childnode>
      </node>
      <node id="3783">
        <label>amrex::DistributionMapping::RefID</label>
        <link refid="structamrex_1_1DistributionMapping_1_1RefID"/>
        <childnode refid="3784" relation="usage">
          <edgelabel>data</edgelabel>
        </childnode>
      </node>
      <node id="3792">
        <label>amrex::Vector&lt; MPI_Status &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3793" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3798">
        <label>amrex::CoordSys</label>
        <link refid="classamrex_1_1CoordSys"/>
        <childnode refid="3799" relation="usage">
          <edgelabel>inv_dx</edgelabel>
          <edgelabel>offset</edgelabel>
          <edgelabel>dx</edgelabel>
        </childnode>
      </node>
      <node id="3786">
        <label>amrex::IndexType</label>
        <link refid="classamrex_1_1IndexType"/>
      </node>
      <node id="3784">
        <label>amrex::DistributionMapping::Ref</label>
        <link refid="structamrex_1_1DistributionMapping_1_1Ref"/>
        <childnode refid="3779" relation="usage">
          <edgelabel>m_index_array</edgelabel>
          <edgelabel>m_pmap</edgelabel>
        </childnode>
      </node>
      <node id="3770">
        <label>amrex::FabSet</label>
        <link refid="classamrex_1_1FabSet"/>
        <childnode refid="3771" relation="usage">
          <edgelabel>m_mf</edgelabel>
        </childnode>
      </node>
      <node id="3787">
        <label>amrex::Vector&lt; std::string &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3788" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3776">
        <label>amrex::DistributionMapping</label>
        <link refid="classamrex_1_1DistributionMapping"/>
      </node>
      <node id="3781">
        <label>amrex::FabArrayBase::BDKey</label>
        <link refid="structamrex_1_1FabArrayBase_1_1BDKey"/>
        <childnode refid="3782" relation="usage">
          <edgelabel>m_ba_id</edgelabel>
        </childnode>
        <childnode refid="3783" relation="usage">
          <edgelabel>m_dm_id</edgelabel>
        </childnode>
      </node>
      <node id="3771">
        <label>amrex::MultiFab</label>
        <link refid="classamrex_1_1MultiFab"/>
        <childnode refid="3772" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3769">
        <label>amrex::BndryRegister</label>
        <link refid="classamrex_1_1BndryRegister"/>
        <childnode refid="3770" relation="usage">
          <edgelabel>bndry</edgelabel>
        </childnode>
        <childnode refid="3785" relation="usage">
          <edgelabel>grids</edgelabel>
        </childnode>
      </node>
      <node id="3797">
        <label>amrex::Geometry</label>
        <link refid="classamrex_1_1Geometry"/>
        <childnode refid="3798" relation="public-inheritance">
        </childnode>
        <childnode refid="3800" relation="usage">
          <edgelabel>prob_domain</edgelabel>
        </childnode>
        <childnode refid="3801" relation="usage">
          <edgelabel>domain</edgelabel>
        </childnode>
      </node>
      <node id="3804">
        <label>std::vector&lt; RealTuple, std::allocator&lt; RealTuple &gt; &gt;</label>
      </node>
      <node id="3802">
        <label>amrex::LayoutData&lt; RealTuple &gt;</label>
        <link refid="classamrex_1_1LayoutData"/>
        <childnode refid="3773" relation="public-inheritance">
        </childnode>
        <childnode refid="3803" relation="usage">
          <edgelabel>m_data</edgelabel>
        </childnode>
      </node>
      <node id="3803">
        <label>amrex::Vector&lt; RealTuple &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3804" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3766">
        <label>amrex::Vector&lt; amrex::Geometry &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3767" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3772">
        <label>amrex::FabArray&lt; FArrayBox &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="3773" relation="public-inheritance">
        </childnode>
        <childnode refid="3777" relation="usage">
          <edgelabel>fb_nghost</edgelabel>
        </childnode>
        <childnode refid="3779" relation="usage">
          <edgelabel>fb_recv_size</edgelabel>
          <edgelabel>fb_recv_from</edgelabel>
        </childnode>
        <childnode refid="3787" relation="usage">
          <edgelabel>m_tags</edgelabel>
        </childnode>
        <childnode refid="3789" relation="usage">
          <edgelabel>fb_recv_data</edgelabel>
          <edgelabel>fb_send_data</edgelabel>
        </childnode>
        <childnode refid="3791" relation="usage">
          <edgelabel>shmem</edgelabel>
        </childnode>
        <childnode refid="3792" relation="usage">
          <edgelabel>fb_recv_stat</edgelabel>
        </childnode>
        <childnode refid="3794" relation="usage">
          <edgelabel>fb_send_reqs</edgelabel>
          <edgelabel>fb_recv_reqs</edgelabel>
        </childnode>
        <childnode refid="3796" relation="usage">
          <edgelabel>fb_period</edgelabel>
        </childnode>
      </node>
      <node id="3782">
        <label>amrex::BoxArray::RefID</label>
        <link refid="structamrex_1_1BoxArray_1_1RefID"/>
      </node>
      <node id="3773">
        <label>amrex::FabArrayBase</label>
        <link refid="classamrex_1_1FabArrayBase"/>
        <childnode refid="3774" relation="usage">
          <edgelabel>m_FBC_stats</edgelabel>
          <edgelabel>m_FPinfo_stats</edgelabel>
          <edgelabel>m_CFinfo_stats</edgelabel>
          <edgelabel>m_TAC_stats</edgelabel>
          <edgelabel>m_CPC_stats</edgelabel>
        </childnode>
        <childnode refid="3776" relation="usage">
          <edgelabel>distributionMap</edgelabel>
        </childnode>
        <childnode refid="3777" relation="usage">
          <edgelabel>n_grow</edgelabel>
          <edgelabel>comm_tile_size</edgelabel>
          <edgelabel>mfiter_tile_size</edgelabel>
          <edgelabel>mfghostiter_tile_size</edgelabel>
        </childnode>
        <childnode refid="3778" relation="usage">
          <edgelabel>m_FA_stats</edgelabel>
        </childnode>
        <childnode refid="3779" relation="usage">
          <edgelabel>indexArray</edgelabel>
        </childnode>
        <childnode refid="3781" relation="usage">
          <edgelabel>m_bdkey</edgelabel>
        </childnode>
        <childnode refid="3785" relation="usage">
          <edgelabel>boxarray</edgelabel>
        </childnode>
      </node>
      <node id="3759">
        <label>std::vector&lt; Array&lt; Real, BL_SPACEDIM &gt;, std::allocator&lt; Array&lt; Real, BL_SPACEDIM &gt; &gt; &gt;</label>
      </node>
      <node id="3762">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::MultiMask &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3763" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3758">
        <label>amrex::Vector&lt; Array&lt; Real, BL_SPACEDIM &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3759" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.H" line="84" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.H" bodystart="83" bodyend="462"/>
    <listofallmembers>
      <member refid="classamrex_1_1LinOp_1ac8d092273a44066329b73468fe885d2d" prot="public" virt="virtual"><scope>amrex::LinOp</scope><name>aCoefficients</name></member>
      <member refid="classamrex_1_1LinOp_1ac5b9fd4b970fee2132c2ea0c5db97149" prot="public" virt="virtual"><scope>amrex::LinOp</scope><name>apply</name></member>
      <member refid="classamrex_1_1LinOp_1a7bb88ff651d23b6908c7b2bceaa34b0e" prot="public" virt="virtual"><scope>amrex::LinOp</scope><name>applyBC</name></member>
      <member refid="classamrex_1_1LinOp_1ad5f2fc8009714c47dc63ff6a7a73a5de" prot="public" virt="non-virtual"><scope>amrex::LinOp</scope><name>BC_Mode</name></member>
      <member refid="classamrex_1_1LinOp_1a7bb1e7f6286ace56305bcb17a2ebd06a" prot="public" virt="virtual"><scope>amrex::LinOp</scope><name>bCoefficients</name></member>
      <member refid="classamrex_1_1LinOp_1aa82bdf791430c2a09b3b436edf9396b5" prot="protected" virt="non-virtual"><scope>amrex::LinOp</scope><name>bgb</name></member>
      <member refid="classamrex_1_1LinOp_1ab6ad6639bc139043d7e905f8d50e942c" prot="public" virt="non-virtual"><scope>amrex::LinOp</scope><name>bndryData</name></member>
      <member refid="classamrex_1_1LinOp_1a4091f3d4047359da4093f5174d56f13d" prot="public" virt="non-virtual"><scope>amrex::LinOp</scope><name>bndryData</name></member>
      <member refid="classamrex_1_1LinOp_1a5f70912a54c7de221e2d51c4f432a11d" prot="public" virt="virtual"><scope>amrex::LinOp</scope><name>boxArray</name></member>
      <member refid="classamrex_1_1LinOp_1a4d4e5333f7d48ad27505ca77110d3e3a" prot="protected" virt="virtual"><scope>amrex::LinOp</scope><name>clearToLevel</name></member>
      <member refid="classamrex_1_1LinOp_1a66f650936c7785e8958617b91e7ef2a6" prot="public" virt="pure-virtual"><scope>amrex::LinOp</scope><name>compFlux</name></member>
      <member refid="classamrex_1_1LinOp_1a209d6c6a23f1627c3dd246b737b342a5" prot="protected" virt="non-virtual"><scope>amrex::LinOp</scope><name>def_harmavg</name></member>
      <member refid="classamrex_1_1LinOp_1a46c9e9b959b202156654ab2a806d36b3" prot="protected" virt="non-virtual"><scope>amrex::LinOp</scope><name>def_maxorder</name></member>
      <member refid="classamrex_1_1LinOp_1a4bc7f813757f64c47583b5c110504644" prot="protected" virt="non-virtual"><scope>amrex::LinOp</scope><name>def_verbose</name></member>
      <member refid="classamrex_1_1LinOp_1aed40103a32e7a986e5b58594031ee887" prot="public" virt="non-virtual"><scope>amrex::LinOp</scope><name>DistributionMap</name></member>
      <member refid="classamrex_1_1LinOp_1a2aa4b0f8262bca0542f508adfd6d528f" prot="protected" virt="pure-virtual"><scope>amrex::LinOp</scope><name>Fapply</name></member>
      <member refid="classamrex_1_1LinOp_1ab06ab51c6301f1491dee04f05eadd471" prot="protected" virt="pure-virtual"><scope>amrex::LinOp</scope><name>Fapply</name></member>
      <member refid="classamrex_1_1LinOp_1a3e96cce265979ab38b675c22fab24657" prot="protected" virt="non-virtual"><scope>amrex::LinOp</scope><name>Finalize</name></member>
      <member refid="classamrex_1_1LinOp_1a2d3bf8d174818c5a90880d7178b0bfb9" prot="protected" virt="pure-virtual"><scope>amrex::LinOp</scope><name>Fsmooth</name></member>
      <member refid="classamrex_1_1LinOp_1aacd9da04ef7c21a4fa606fac28b082e6" prot="protected" virt="pure-virtual"><scope>amrex::LinOp</scope><name>Fsmooth_jacobi</name></member>
      <member refid="classamrex_1_1LinOp_1aaacb98abdbfa3d9377c369fe5cc79b68" prot="protected" virt="non-virtual"><scope>amrex::LinOp</scope><name>gbox</name></member>
      <member refid="classamrex_1_1LinOp_1a447bf2c68e5e4fb5b275fefe879fe1e5" prot="protected" virt="non-virtual"><scope>amrex::LinOp</scope><name>geomarray</name></member>
      <member refid="classamrex_1_1LinOp_1a5823bb22e92e48ddbc13ceae382d0747" prot="public" virt="virtual"><scope>amrex::LinOp</scope><name>get_alpha</name></member>
      <member refid="classamrex_1_1LinOp_1af245a02cfc92f3ddf30d6ace1c1683bb" prot="public" virt="virtual"><scope>amrex::LinOp</scope><name>get_beta</name></member>
      <member refid="classamrex_1_1LinOp_1a61745f14570d6a595ab67ec1bf283c18" prot="public" virt="non-virtual"><scope>amrex::LinOp</scope><name>getDx</name></member>
      <member refid="classamrex_1_1LinOp_1a399736dcc956ff8f1fffaa2757028874" prot="public" virt="non-virtual"><scope>amrex::LinOp</scope><name>getGeom</name></member>
      <member refid="classamrex_1_1LinOp_1aa9588834363609399b2953a1285311fc" prot="protected" virt="non-virtual"><scope>amrex::LinOp</scope><name>h</name></member>
      <member refid="classamrex_1_1LinOp_1a6b431b3abaa1031a23c3d7972d7dab93" prot="protected" virt="non-virtual"><scope>amrex::LinOp</scope><name>harmavg</name></member>
      <member refid="classamrex_1_1LinOp_1ad5f2fc8009714c47dc63ff6a7a73a5deae1724332b6960ec73ce5040947963f78" prot="public" virt="non-virtual"><scope>amrex::LinOp</scope><name>Homogeneous_BC</name></member>
      <member refid="classamrex_1_1LinOp_1ad5f2fc8009714c47dc63ff6a7a73a5dea2789f303c136a93263ed4b63ce83d29a" prot="public" virt="non-virtual"><scope>amrex::LinOp</scope><name>Inhomogeneous_BC</name></member>
      <member refid="classamrex_1_1LinOp_1a123f74bf002cbcc02fcfef0ac794cc57" prot="protected" virt="non-virtual"><scope>amrex::LinOp</scope><name>initConstruct</name></member>
      <member refid="classamrex_1_1LinOp_1a089bb8eb0f74b22a7abbd60b3e872c8f" prot="protected" virt="non-virtual"><scope>amrex::LinOp</scope><name>Initialize</name></member>
      <member refid="classamrex_1_1LinOp_1a81bae1e07a9908f6b677d1619d5eb4ee" prot="public" virt="virtual"><scope>amrex::LinOp</scope><name>jacobi_smooth</name></member>
      <member refid="classamrex_1_1LinOp_1a528f7163d138d4c86f826821e751fae5" prot="public" virt="non-virtual"><scope>amrex::LinOp</scope><name>LinOp</name></member>
      <member refid="classamrex_1_1LinOp_1a11923eefafc8a3c572854a571edc03c8" prot="public" virt="non-virtual"><scope>amrex::LinOp</scope><name>LinOp</name></member>
      <member refid="classamrex_1_1LinOp_1adc5128fa53133f87d6beea7127766a17" prot="public" virt="non-virtual"><scope>amrex::LinOp</scope><name>LinOp</name></member>
      <member refid="classamrex_1_1LinOp_1a017e9a531af97d47214af370b5d1fce1" prot="private" virt="non-virtual"><scope>amrex::LinOp</scope><name>LinOp</name></member>
      <member refid="classamrex_1_1LinOp_1afbf053df86bb20e076291152600f06ac" prot="protected" virt="non-virtual"><scope>amrex::LinOp</scope><name>LinOp_grow</name></member>
      <member refid="classamrex_1_1LinOp_1a42cf216bf54bd0cb244669a91635dbec" prot="protected" virt="non-virtual"><scope>amrex::LinOp</scope><name>lmaskvals</name></member>
      <member refid="classamrex_1_1LinOp_1a48100b02251f55f0394e976eca1e8211" prot="protected" virt="non-virtual"><scope>amrex::LinOp</scope><name>makeCoefficients</name></member>
      <member refid="classamrex_1_1LinOp_1af9de09651d7047e04a70de03facb5398" prot="protected" virt="non-virtual"><scope>amrex::LinOp</scope><name>maskvals</name></member>
      <member refid="classamrex_1_1LinOp_1a09492904c8111d7108412a034efd4b1e" prot="public" virt="virtual"><scope>amrex::LinOp</scope><name>maxOrder</name></member>
      <member refid="classamrex_1_1LinOp_1a4e9d794124be8ae04fa7c4c6ab2d5fee" prot="public" virt="virtual"><scope>amrex::LinOp</scope><name>maxOrder</name></member>
      <member refid="classamrex_1_1LinOp_1aa898f6575bb89bf315bb7a5309ad944f" prot="protected" virt="non-virtual"><scope>amrex::LinOp</scope><name>maxorder</name></member>
      <member refid="classamrex_1_1LinOp_1a187358833ef9bd25a218c2fd0ac499c5" prot="public" virt="virtual"><scope>amrex::LinOp</scope><name>norm</name></member>
      <member refid="classamrex_1_1LinOp_1aba1ac78a74d1ca7be2e9ef523c185800" prot="public" virt="non-virtual"><scope>amrex::LinOp</scope><name>numGrids</name></member>
      <member refid="classamrex_1_1LinOp_1a8489bd97fdad9c4de15a5610a38f0652" prot="public" virt="virtual"><scope>amrex::LinOp</scope><name>NumGrow</name></member>
      <member refid="classamrex_1_1LinOp_1a9d552129ce2624a83a6ba56ead0f4d87" prot="public" virt="virtual"><scope>amrex::LinOp</scope><name>numLevels</name></member>
      <member refid="classamrex_1_1LinOp_1aef9959d08e92b487aca259f7c96c87d1" prot="public" virt="non-virtual"><scope>amrex::LinOp</scope><name>operator&lt;&lt;</name></member>
      <member refid="classamrex_1_1LinOp_1a910fc13e1a7c8809339d618f0bdbc0b5" prot="private" virt="non-virtual"><scope>amrex::LinOp</scope><name>operator=</name></member>
      <member refid="classamrex_1_1LinOp_1a63537ed5b853907fc8a3b7adace5a383" prot="public" virt="virtual"><scope>amrex::LinOp</scope><name>prepareForLevel</name></member>
      <member refid="classamrex_1_1LinOp_1ab77a2e7e90d65073fccb8a54fd128177" prot="public" virt="virtual"><scope>amrex::LinOp</scope><name>residual</name></member>
      <member refid="classamrex_1_1LinOp_1a11f5dfbd38e5b5551dbcec9df469e11d" prot="public" virt="virtual"><scope>amrex::LinOp</scope><name>smooth</name></member>
      <member refid="classamrex_1_1LinOp_1a58088c44f9d858885f1125efb3b4222e" prot="protected" virt="non-virtual"><scope>amrex::LinOp</scope><name>undrrelxr</name></member>
      <member refid="classamrex_1_1LinOp_1a24a48ff7792144be5c69884015388367" prot="protected" virt="non-virtual"><scope>amrex::LinOp</scope><name>verbose</name></member>
      <member refid="classamrex_1_1LinOp_1a62ce7afd9c1479ee90df81e055e88a1c" prot="public" virt="virtual"><scope>amrex::LinOp</scope><name>~LinOp</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
