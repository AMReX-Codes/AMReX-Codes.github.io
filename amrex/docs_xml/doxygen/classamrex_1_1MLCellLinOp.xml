<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classamrex_1_1MLCellLinOp" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>amrex::MLCellLinOp</compoundname>
    <basecompoundref refid="classamrex_1_1MLLinOp" prot="public" virt="non-virtual">amrex::MLLinOp</basecompoundref>
    <derivedcompoundref refid="classamrex_1_1MLCellABecLap" prot="public" virt="non-virtual">amrex::MLCellABecLap</derivedcompoundref>
    <includes refid="AMReX__MLCellLinOp_8H" local="no">AMReX_MLCellLinOp.H</includes>
    <innerclass refid="structamrex_1_1MLCellLinOp_1_1BCTL" prot="public">amrex::MLCellLinOp::BCTL</innerclass>
    <innerclass refid="classamrex_1_1MLCellLinOp_1_1BndryCondLoc" prot="protected">amrex::MLCellLinOp::BndryCondLoc</innerclass>
      <sectiondef kind="protected-type">
      <memberdef kind="typedef" id="classamrex_1_1MLCellLinOp_1ae233eeb511516448492f38fe53fa9cd9" prot="protected" static="no">
        <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; Real, 2 *<ref refid="AMReX__SPACE_8H_1af66ac7d7c04dad9fd54778fe5a4e816f" kindref="member">BL_SPACEDIM</ref> &gt;</type>
        <definition>using amrex::MLCellLinOp::RealTuple =  Array&lt;Real,2*BL_SPACEDIM&gt;</definition>
        <argsstring></argsstring>
        <name>RealTuple</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="190" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" bodystart="190" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1MLCellLinOp_1a622b7c2ecc46a6b476aba4fb470f3dcf" prot="protected" static="no">
        <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1BoundCond" kindref="compound">BoundCond</ref>, 2 *<ref refid="AMReX__SPACE_8H_1af66ac7d7c04dad9fd54778fe5a4e816f" kindref="member">BL_SPACEDIM</ref> &gt;</type>
        <definition>using amrex::MLCellLinOp::BCTuple =  Array&lt;BoundCond,2*BL_SPACEDIM&gt;</definition>
        <argsstring></argsstring>
        <name>BCTuple</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="191" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" bodystart="191" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classamrex_1_1MLCellLinOp_1a1b4821805159b0595b6b7b1e0135b54f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class MLMG</definition>
        <argsstring></argsstring>
        <name>MLMG</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="15" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1MLCellLinOp_1a7b344595276c27ed17dacb3ea1fb95aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class MLCGSolver</definition>
        <argsstring></argsstring>
        <name>MLCGSolver</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="16" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" bodystart="16" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classamrex_1_1MLCellLinOp_1a9d6cdade5abfabf340b180cba282c3c1" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::MLCellLinOp::m_has_metric_term</definition>
        <argsstring></argsstring>
        <name>m_has_metric_term</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="179" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" bodystart="179" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLCellLinOp_1ab8f93178ea3f02ba63da966de7796970" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::unique_ptr&lt; <ref refid="classamrex_1_1MLMGBndry" kindref="compound">MLMGBndry</ref> &gt; &gt;</type>
        <definition>Vector&lt;std::unique_ptr&lt;MLMGBndry&gt; &gt; amrex::MLCellLinOp::m_bndry_sol</definition>
        <argsstring></argsstring>
        <name>m_bndry_sol</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="181" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" bodystart="181" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLCellLinOp_1aae58b75937a141dc599d98b034be7f3c" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::unique_ptr&lt; <ref refid="namespaceamrex_1a51a3951b54ca3db6bf891ebc2f867168" kindref="member">BndryRegister</ref> &gt; &gt;</type>
        <definition>Vector&lt;std::unique_ptr&lt;BndryRegister&gt; &gt; amrex::MLCellLinOp::m_crse_sol_br</definition>
        <argsstring></argsstring>
        <name>m_crse_sol_br</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="182" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" bodystart="182" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLCellLinOp_1a60785819fb0c997419c7ee7b007e4bb3" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::unique_ptr&lt; <ref refid="classamrex_1_1MLMGBndry" kindref="compound">MLMGBndry</ref> &gt; &gt;</type>
        <definition>Vector&lt;std::unique_ptr&lt;MLMGBndry&gt; &gt; amrex::MLCellLinOp::m_bndry_cor</definition>
        <argsstring></argsstring>
        <name>m_bndry_cor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="184" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" bodystart="184" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLCellLinOp_1a871355473b2744ad7dd29d691e72e9ee" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::unique_ptr&lt; <ref refid="namespaceamrex_1a51a3951b54ca3db6bf891ebc2f867168" kindref="member">BndryRegister</ref> &gt; &gt;</type>
        <definition>Vector&lt;std::unique_ptr&lt;BndryRegister&gt; &gt; amrex::MLCellLinOp::m_crse_cor_br</definition>
        <argsstring></argsstring>
        <name>m_crse_cor_br</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="185" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" bodystart="185" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLCellLinOp_1a20a2d5349510243c481d2b6ce1992f5c" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::unique_ptr&lt; <ref refid="classamrex_1_1MLCellLinOp_1_1BndryCondLoc" kindref="compound">BndryCondLoc</ref> &gt; &gt; &gt;</type>
        <definition>Vector&lt;Vector&lt;std::unique_ptr&lt;BndryCondLoc&gt; &gt; &gt; amrex::MLCellLinOp::m_bcondloc</definition>
        <argsstring></argsstring>
        <name>m_bcondloc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="226" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" bodystart="226" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLCellLinOp_1a920175d896857c64b3544cd0f6c80288" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::unique_ptr&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &gt; &gt;</type>
        <definition>Vector&lt;std::unique_ptr&lt;MultiFab&gt; &gt; amrex::MLCellLinOp::m_robin_bcval</definition>
        <argsstring></argsstring>
        <name>m_robin_bcval</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="228" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" bodystart="228" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLCellLinOp_1a2ffd8d47358983d3c013b8012eeb1b8e" prot="protected" static="no" mutable="yes">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1a51a3951b54ca3db6bf891ebc2f867168" kindref="member">BndryRegister</ref> &gt; &gt;</type>
        <definition>Vector&lt;Vector&lt;BndryRegister&gt; &gt; amrex::MLCellLinOp::m_undrrelxr</definition>
        <argsstring></argsstring>
        <name>m_undrrelxr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="231" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" bodystart="231" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLCellLinOp_1af7504eedbd467f1237874cbc10dd6d39" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiMask" kindref="compound">MultiMask</ref>, 2 *AMREX_SPACEDIM &gt; &gt; &gt;</type>
        <definition>Vector&lt;Vector&lt;Array&lt;MultiMask,2*AMREX_SPACEDIM&gt; &gt; &gt; amrex::MLCellLinOp::m_maskvals</definition>
        <argsstring></argsstring>
        <name>m_maskvals</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="234" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" bodystart="234" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLCellLinOp_1a5be36924b389fe28a9d9e8c08d8dd728" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::unique_ptr&lt; <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &gt; &gt;</type>
        <definition>Vector&lt;std::unique_ptr&lt;iMultiFab&gt; &gt; amrex::MLCellLinOp::m_norm_fine_mask</definition>
        <argsstring></argsstring>
        <name>m_norm_fine_mask</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="236" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" bodystart="236" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLCellLinOp_1aeabff149eec600743faac7295cd509d2" prot="protected" static="no" mutable="yes">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1a9418cfdd8457daebb1c971d4e38ceb17" kindref="member">YAFluxRegister</ref> &gt;</type>
        <definition>Vector&lt;YAFluxRegister&gt; amrex::MLCellLinOp::m_fluxreg</definition>
        <argsstring></argsstring>
        <name>m_fluxreg</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="238" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" bodystart="238" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1MLCellLinOp_1a4ea7cb30ede32f69a678fdb4af1180bb" prot="private" static="no" mutable="yes">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &gt;</type>
        <definition>Vector&lt;Vector&lt;Real&gt; &gt; amrex::MLCellLinOp::m_volinv</definition>
        <argsstring></argsstring>
        <name>m_volinv</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="246" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" bodystart="246" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1MLCellLinOp_1acc45e2dedbc266cc717ffc2239727486" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MLCellLinOp::MLCellLinOp</definition>
        <argsstring>()</argsstring>
        <name>MLCellLinOp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="18" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.cpp" bodystart="79" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellLinOp_1a4d46c85e7e43e5231e19607a868d3d0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>amrex::MLCellLinOp::~MLCellLinOp</definition>
        <argsstring>()</argsstring>
        <name>~MLCellLinOp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="19" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.cpp" bodystart="84" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellLinOp_1acba5508d208bbb531ce2fe45042b4f6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MLCellLinOp::MLCellLinOp</definition>
        <argsstring>(const MLCellLinOp &amp;)=delete</argsstring>
        <name>MLCellLinOp</name>
        <param>
          <type>const <ref refid="classamrex_1_1MLCellLinOp" kindref="compound">MLCellLinOp</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="21" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellLinOp_1a4bb69639aa4cb08113d6d8273fca03ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MLCellLinOp::MLCellLinOp</definition>
        <argsstring>(MLCellLinOp &amp;&amp;)=delete</argsstring>
        <name>MLCellLinOp</name>
        <param>
          <type><ref refid="classamrex_1_1MLCellLinOp" kindref="compound">MLCellLinOp</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="22" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellLinOp_1a87fd042ed7a3004a39f75564f24264ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1MLCellLinOp" kindref="compound">MLCellLinOp</ref> &amp;</type>
        <definition>MLCellLinOp&amp; amrex::MLCellLinOp::operator=</definition>
        <argsstring>(const MLCellLinOp &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classamrex_1_1MLCellLinOp" kindref="compound">MLCellLinOp</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="23" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellLinOp_1a4be43b4a29bd4f7092aa870804870ae2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1MLCellLinOp" kindref="compound">MLCellLinOp</ref> &amp;</type>
        <definition>MLCellLinOp&amp; amrex::MLCellLinOp::operator=</definition>
        <argsstring>(MLCellLinOp &amp;&amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1MLCellLinOp" kindref="compound">MLCellLinOp</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="24" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellLinOp_1a55d205f42d99658c7cce9005b7388b8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLCellLinOp::define</definition>
        <argsstring>(const Vector&lt; Geometry &gt; &amp;a_geom, const Vector&lt; BoxArray &gt; &amp;a_grids, const Vector&lt; DistributionMapping &gt; &amp;a_dmap, const LPInfo &amp;a_info=LPInfo(), const Vector&lt; FabFactory&lt; FArrayBox &gt; const * &gt; &amp;a_factory={})</argsstring>
        <name>define</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>a_geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &gt; &amp;</type>
          <declname>a_grids</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt; &amp;</type>
          <declname>a_dmap</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1LPInfo" kindref="compound">LPInfo</ref> &amp;</type>
          <declname>a_info</declname>
          <defval><ref refid="structamrex_1_1LPInfo" kindref="compound">LPInfo</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &gt; const * &gt; &amp;</type>
          <declname>a_factory</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="26" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.cpp" bodystart="87" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellLinOp_1a17b29b5c93f25181f34313b42b795a9e" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLCellLinOp::setLevelBC</definition>
        <argsstring>(int amrlev, const MultiFab *levelbcdata, const MultiFab *robinbc_a=nullptr, const MultiFab *robinbc_b=nullptr, const MultiFab *robinbc_f=nullptr) final override</argsstring>
        <name>setLevelBC</name>
        <reimplements refid="classamrex_1_1MLLinOp_1a04008d16768c19836e3ea78add024630">setLevelBC</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *</type>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *</type>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *</type>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>For cell-centered solves only: this must be called for each level. Argument <computeroutput>levelbcdata</computeroutput> is used to supply Dirichlet or Neumann bc at the physical domain; if those data are homogeneous we can pass nullptr instead of levelbcdata. Regardless, this function must be called. If used, the <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> levelbcdata must have one ghost cell. Only the data outside the physical domain will be used. It is assumed that the data in those ghost cells outside the domain live exactly on the face of the physical domain. Argument <computeroutput>amrlev</computeroutput> is relative level such that the lowest to the solver is always 0. The optional arguments robinbc_[a|b|f] provide Robin boundary condition <computeroutput>a*phi + b*dphi/dn = f</computeroutput>. Note that <computeroutput>d./dn</computeroutput> is <computeroutput>d./dx</computeroutput> at the upper boundary and <computeroutput>-d./dx</computeroutput> at the lower boundary, for Robin BC. However, for inhomogeneous Neumann BC, the value in leveldata is assumed to be <computeroutput>d./dx</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="32" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.cpp" bodystart="234" bodyend="353"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellLinOp_1a0073d05770099d89c87a60e25ab3cc47" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool amrex::MLCellLinOp::needsUpdate</definition>
        <argsstring>() const override</argsstring>
        <name>needsUpdate</name>
        <reimplements refid="classamrex_1_1MLLinOp_1a210b4c125747c6a4a6f171dcff941579">needsUpdate</reimplements>
        <reimplementedby refid="classamrex_1_1MLEBTensorOp_1ab6dd50ea71733ee23625ef3fe6634d98">needsUpdate</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLTensorOp_1a65030fea7dc90010188af0e7b33fb6ab">needsUpdate</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLALaplacian_1a9b2247b87648cdbe1e66f1f62067a91b">needsUpdate</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLCellABecLap_1adb891ed98442838db52ab71e703ff752">needsUpdate</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLABecLaplacian_1acf27ddd13356c7c675ec2527d8e80223">needsUpdate</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLEBABecLap_1a248e016a259d04af443355f6340e0898">needsUpdate</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="37" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" bodystart="37" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellLinOp_1a6de98ea7f86803972368acd05180431d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLCellLinOp::update</definition>
        <argsstring>() override</argsstring>
        <name>update</name>
        <reimplements refid="classamrex_1_1MLLinOp_1ad5afb08b77db92744e5e7f7f02e5c83b">update</reimplements>
        <reimplementedby refid="classamrex_1_1MLEBTensorOp_1a3c4aac7c4c8cec7458fd1b5b3ac8c3f4">update</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLTensorOp_1a2974162f8c208ea9130dbe20a99a76e1">update</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLALaplacian_1a6cbd359ec0116baed950bbc003e1ea09">update</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLCellABecLap_1aa107a7270bd64cf582e25812c5e5cbab">update</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLABecLaplacian_1a7e612906bd561e6b5db7ce47ea0e7d14">update</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLEBABecLap_1ad6b4be6cef1783fdb223e5aa7eb50343">update</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="40" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.cpp" bodystart="1447" bodyend="1450"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellLinOp_1af6f760fa4c14171371737ac10d0e2c02" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool amrex::MLCellLinOp::isCrossStencil</definition>
        <argsstring>() const</argsstring>
        <name>isCrossStencil</name>
        <reimplementedby refid="classamrex_1_1MLEBTensorOp_1a6fd32c1815462061d634ad81818e348f">isCrossStencil</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLTensorOp_1aa6606a8be71e504fc8e8e7e61a9393ec">isCrossStencil</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLEBABecLap_1a8d6575333ae596ac283e95b748fb84b4">isCrossStencil</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="98" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" bodystart="98" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellLinOp_1a0152cd38e35f6a41dc3da2814b910f2b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool amrex::MLCellLinOp::isTensorOp</definition>
        <argsstring>() const</argsstring>
        <name>isTensorOp</name>
        <reimplementedby refid="classamrex_1_1MLEBTensorOp_1a89e3f55449f2d482de028071c240ec8c">isTensorOp</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLTensorOp_1a7a79d02f26f61d67c0aed26d314b8a03">isTensorOp</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="99" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" bodystart="99" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellLinOp_1aec26fa3ea4e35bd1a02b8972fc392493" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLCellLinOp::updateSolBC</definition>
        <argsstring>(int amrlev, const MultiFab &amp;crse_bcdata) const</argsstring>
        <name>updateSolBC</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>crse_bcdata</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="101" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.cpp" bodystart="505" bodyend="514"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellLinOp_1a73212ed387925f27b0ebeaed21e4a00a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLCellLinOp::updateCorBC</definition>
        <argsstring>(int amrlev, const MultiFab &amp;crse_bcdata) const</argsstring>
        <name>updateCorBC</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>crse_bcdata</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="102" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.cpp" bodystart="517" bodyend="525"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellLinOp_1ae77f68c02a722cf55b176d17e2c49a90" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLCellLinOp::applyBC</definition>
        <argsstring>(int amrlev, int mglev, MultiFab &amp;in, BCMode bc_mode, StateMode s_mode, const MLMGBndry *bndry=nullptr, bool skip_fillboundary=false) const</argsstring>
        <name>applyBC</name>
        <reimplementedby refid="classamrex_1_1MLEBABecLap_1a0dd52a0063675d0af5cd1e3bb8576a24">applyBC</reimplementedby>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLLinOp_1a5aa01a1ef6b0b3a471f02f65ae4b4884" kindref="member">BCMode</ref></type>
          <declname>bc_mode</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLLinOp_1a1f2821b4a51da49d862dae1e757bb8c3" kindref="member">StateMode</ref></type>
          <declname>s_mode</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MLMGBndry" kindref="compound">MLMGBndry</ref> *</type>
          <declname>bndry</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>skip_fillboundary</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="104" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.cpp" bodystart="571" bodyend="776"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellLinOp_1a3bbfff6e733b7883fffacffb363569aa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref></type>
        <definition>BoxArray amrex::MLCellLinOp::makeNGrids</definition>
        <argsstring>(int grid_size) const</argsstring>
        <name>makeNGrids</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>grid_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="107" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.cpp" bodystart="356" bodyend="402"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellLinOp_1aa95312f91d2baeeba018a231d162ad9a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLCellLinOp::restriction</definition>
        <argsstring>(int, int, MultiFab &amp;crse, MultiFab &amp;fine) const override</argsstring>
        <name>restriction</name>
        <reimplements refid="classamrex_1_1MLLinOp_1afd006e1aba81687f29e30e7a26bcba04">restriction</reimplements>
        <reimplementedby refid="classamrex_1_1MLEBABecLap_1a4e02281f596d4f8d9fc0ccad62f8525b">restriction</reimplementedby>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>amrlev</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>cmglev</defname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>fine</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="109" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.cpp" bodystart="405" bodyend="413"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellLinOp_1a0044458b3dd79241c2b74483b70cb7e7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLCellLinOp::interpolation</definition>
        <argsstring>(int amrlev, int fmglev, MultiFab &amp;fine, const MultiFab &amp;crse) const override</argsstring>
        <name>interpolation</name>
        <reimplements refid="classamrex_1_1MLLinOp_1a250ef9650a08f752045410345cd3a408">interpolation</reimplements>
        <reimplementedby refid="classamrex_1_1MLEBABecLap_1a15a2cb048460b6619e61e66fb3a8e3d5">interpolation</reimplementedby>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fmglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>crse</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="111" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.cpp" bodystart="416" bodyend="463"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellLinOp_1afc69014267331541efe7c497b31118e4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLCellLinOp::interpAssign</definition>
        <argsstring>(int amrlev, int fmglev, MultiFab &amp;fine, MultiFab &amp;crse) const override</argsstring>
        <name>interpAssign</name>
        <reimplements refid="classamrex_1_1MLLinOp_1ac055c06cab956b521c8b66bed595ef79">interpAssign</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fmglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>crse</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="113" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.cpp" bodystart="1736" bodyend="1825"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellLinOp_1adfefa1b34d6988c4bf97957616b61c8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLCellLinOp::averageDownSolutionRHS</definition>
        <argsstring>(int camrlev, MultiFab &amp;crse_sol, MultiFab &amp;crse_rhs, const MultiFab &amp;fine_sol, const MultiFab &amp;fine_rhs) override</argsstring>
        <name>averageDownSolutionRHS</name>
        <reimplements refid="classamrex_1_1MLLinOp_1a9b5321e037b2534811f295b767c58398">averageDownSolutionRHS</reimplements>
        <reimplementedby refid="classamrex_1_1MLEBABecLap_1a184c8bb62e01581cfc6d1d936f7eeca0">averageDownSolutionRHS</reimplementedby>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>camrlev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>crse_sol</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>crse_rhs</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>fine_sol</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>fine_rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="115" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.cpp" bodystart="466" bodyend="473"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellLinOp_1a62ea55fae7824c00b3237cf57616dd1d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLCellLinOp::apply</definition>
        <argsstring>(int amrlev, int mglev, MultiFab &amp;out, MultiFab &amp;in, BCMode bc_mode, StateMode s_mode, const MLMGBndry *bndry=nullptr) const override</argsstring>
        <name>apply</name>
        <reimplements refid="classamrex_1_1MLLinOp_1a268158a66466e7fec51ef1240689b687">apply</reimplements>
        <reimplementedby refid="classamrex_1_1MLEBTensorOp_1a492bdb86a17eff7aa7b01a99d68eefed">apply</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLTensorOp_1ab27ab49bb00008a08ebb46ae961492a9">apply</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLEBABecLap_1a8e392e42b5c238124145af83776d575a">apply</reimplementedby>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLLinOp_1a5aa01a1ef6b0b3a471f02f65ae4b4884" kindref="member">BCMode</ref></type>
          <declname>bc_mode</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLLinOp_1a1f2821b4a51da49d862dae1e757bb8c3" kindref="member">StateMode</ref></type>
          <declname>s_mode</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MLMGBndry" kindref="compound">MLMGBndry</ref> *</type>
          <declname>bndry</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="118" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.cpp" bodystart="476" bodyend="485"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellLinOp_1a240eadd9886e8df70f955fecb56bcdfe" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLCellLinOp::smooth</definition>
        <argsstring>(int amrlev, int mglev, MultiFab &amp;sol, const MultiFab &amp;rhs, bool skip_fillboundary=false) const final override</argsstring>
        <name>smooth</name>
        <reimplements refid="classamrex_1_1MLLinOp_1af39026c5bf9ff3a7826a8804526ba9a9">smooth</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>skip_fillboundary</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="120" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.cpp" bodystart="488" bodyend="502"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellLinOp_1ab18841d6aec78590a56eeaed61fe4345" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLCellLinOp::solutionResidual</definition>
        <argsstring>(int amrlev, MultiFab &amp;resid, MultiFab &amp;x, const MultiFab &amp;b, const MultiFab *crse_bcdata=nullptr) override</argsstring>
        <name>solutionResidual</name>
        <reimplements refid="classamrex_1_1MLLinOp_1a10c2c2bf1622b6359e830155d7b5352c">solutionResidual</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>resid</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *</type>
          <declname>crse_bcdata</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="123" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.cpp" bodystart="528" bodyend="542"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellLinOp_1a3c1832912375e08e8bd38775b6b532b3" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLCellLinOp::correctionResidual</definition>
        <argsstring>(int amrlev, int mglev, MultiFab &amp;resid, MultiFab &amp;x, const MultiFab &amp;b, BCMode bc_mode, const MultiFab *crse_bcdata=nullptr) final override</argsstring>
        <name>correctionResidual</name>
        <reimplements refid="classamrex_1_1MLLinOp_1a1cc4a740107bec84bb7bac80b4a34f53">correctionResidual</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>resid</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLLinOp_1a5aa01a1ef6b0b3a471f02f65ae4b4884" kindref="member">BCMode</ref></type>
          <declname>bc_mode</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *</type>
          <declname>crse_bcdata</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="126" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.cpp" bodystart="545" bodyend="568"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellLinOp_1afc76c452e2704200c3b596ba1c1cb1a2" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLCellLinOp::reflux</definition>
        <argsstring>(int crse_amrlev, MultiFab &amp;res, const MultiFab &amp;crse_sol, const MultiFab &amp;, MultiFab &amp;, MultiFab &amp;fine_sol, const MultiFab &amp;) const final override</argsstring>
        <name>reflux</name>
        <reimplements refid="classamrex_1_1MLLinOp_1ab1f098dbddd9ad2068278fc3a51a7b56">reflux</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>crse_amrlev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>res</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>crse_sol</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>fine_sol</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="130" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.cpp" bodystart="779" bodyend="849"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellLinOp_1acd6c78c0e6307234b1539ba81caadb9c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLCellLinOp::compFlux</definition>
        <argsstring>(int amrlev, const Array&lt; MultiFab *, AMREX_SPACEDIM &gt; &amp;fluxes, MultiFab &amp;sol, Location loc) const override</argsstring>
        <name>compFlux</name>
        <reimplements refid="classamrex_1_1MLLinOp_1a7dfae9fa431aefebde79a4d5aff2ac5e">compFlux</reimplements>
        <reimplementedby refid="classamrex_1_1MLEBTensorOp_1a739281050ab5aebe8d61a56992049a58">compFlux</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLTensorOp_1ab07ec8381bce1e90f83ecf92d6581547">compFlux</reimplementedby>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>fluxes</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLLinOp_1a07cd0a7c45d6542e33a5d97aefe5bab3" kindref="member">Location</ref></type>
          <declname>loc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="133" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.cpp" bodystart="852" bodyend="892"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellLinOp_1aead98967987fb3826008fc69f3270247" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLCellLinOp::compGrad</definition>
        <argsstring>(int amrlev, const Array&lt; MultiFab *, AMREX_SPACEDIM &gt; &amp;grad, MultiFab &amp;sol, Location loc) const override</argsstring>
        <name>compGrad</name>
        <reimplements refid="classamrex_1_1MLLinOp_1ab6f46c05df22dbda4d2da6e198f98344">compGrad</reimplements>
        <reimplementedby refid="classamrex_1_1MLEBABecLap_1afc09237149ffffd61a4fc209955f9ff8">compGrad</reimplementedby>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>grad</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLLinOp_1a07cd0a7c45d6542e33a5d97aefe5bab3" kindref="member">Location</ref></type>
          <declname>loc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="135" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.cpp" bodystart="895" bodyend="944"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellLinOp_1a3ecef53f14386209e60edf69cab15bb1" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLCellLinOp::applyMetricTerm</definition>
        <argsstring>(int amrlev, int mglev, Any &amp;rhs) const final override</argsstring>
        <name>applyMetricTerm</name>
        <reimplements refid="classamrex_1_1MLLinOp_1a8e31761ce1106732dd8db8e72894d1bd">applyMetricTerm</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Any" kindref="compound">Any</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="138" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.cpp" bodystart="1320" bodyend="1330"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellLinOp_1a4ee573102053163e673153f3334153fe" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLCellLinOp::unapplyMetricTerm</definition>
        <argsstring>(int amrlev, int mglev, MultiFab &amp;rhs) const final override</argsstring>
        <name>unapplyMetricTerm</name>
        <reimplements refid="classamrex_1_1MLLinOp_1af73a5461ea6c841bc1293a1c0a9d91a3">unapplyMetricTerm</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="139" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.cpp" bodystart="1389" bodyend="1444"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellLinOp_1a83f585ffe6e99a77143a4ae564b9f988" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt;</type>
        <definition>Vector&lt; Real &gt; amrex::MLCellLinOp::getSolvabilityOffset</definition>
        <argsstring>(int amrlev, int mglev, Any const &amp;rhs) const override</argsstring>
        <name>getSolvabilityOffset</name>
        <reimplements refid="classamrex_1_1MLLinOp_1a21d5ab7f7712cf681083ed6763399132">getSolvabilityOffset</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Any" kindref="compound">Any</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="140" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.cpp" bodystart="1507" bodyend="1537"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellLinOp_1a8a9e84cdae16cefb1f4dac19ac06c793" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLCellLinOp::fixSolvabilityByOffset</definition>
        <argsstring>(int amrlev, int mglev, Any &amp;rhs, Vector&lt; Real &gt; const &amp;offset) const override</argsstring>
        <name>fixSolvabilityByOffset</name>
        <reimplements refid="classamrex_1_1MLLinOp_1a9437bf41a67df3f776428c41f284a022">fixSolvabilityByOffset</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Any" kindref="compound">Any</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; const &amp;</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="142" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.cpp" bodystart="1846" bodyend="1863"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellLinOp_1a142ae4b8e4c68254e81516b5c8e00f4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLCellLinOp::prepareForSolve</definition>
        <argsstring>() override</argsstring>
        <name>prepareForSolve</name>
        <reimplements refid="classamrex_1_1MLLinOp_1a431d85bffa7e9bbcd36a10ae82fe3683">prepareForSolve</reimplements>
        <reimplementedby refid="classamrex_1_1MLALaplacian_1a0273d9fc3ae644bc006c08af0d891660">prepareForSolve</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLPoisson_1af7ed92c7fa5541ead4182b86c3a7d275">prepareForSolve</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLEBTensorOp_1adb58fe08c96787422aaf6449a03a76e8">prepareForSolve</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLTensorOp_1a7d6264e24870296cd61ca4ce20b118df">prepareForSolve</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLCellABecLap_1a7d6d2646e9f6afaf7ed70bf0c86fa762">prepareForSolve</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLABecLaplacian_1a627779ad059394a0bd2b3bede177e12a">prepareForSolve</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLEBABecLap_1a10d9a42df59b0c48c0de0bc3a2b41cca">prepareForSolve</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="145" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.cpp" bodystart="947" bodyend="1247"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellLinOp_1a2d3d01dcb4fddb4f2df39484b6f58f97" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>Real</type>
        <definition>Real amrex::MLCellLinOp::xdoty</definition>
        <argsstring>(int amrlev, int mglev, const MultiFab &amp;x, const MultiFab &amp;y, bool local) const final override</argsstring>
        <name>xdoty</name>
        <reimplements refid="classamrex_1_1MLLinOp_1adeb9c046c943c797ebe796a72ad0c895">xdoty</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="147" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.cpp" bodystart="1250" bodyend="1259"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellLinOp_1a34a85d0cc1fc408ad4dc4b3509cb9917" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void amrex::MLCellLinOp::Fapply</definition>
        <argsstring>(int amrlev, int mglev, MultiFab &amp;out, const MultiFab &amp;in) const =0</argsstring>
        <name>Fapply</name>
        <reimplementedby refid="classamrex_1_1MLALaplacian_1a1f460db8418e9e37c3918ca4af377ed6">Fapply</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLPoisson_1a228246373b0a8c05a2b8656725e3ad6a">Fapply</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLABecLaplacian_1a4e48dde7f389a14c76aef25361384a12">Fapply</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLEBABecLap_1ae757c91789ec2b174e27f330d200c8f0">Fapply</reimplementedby>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="149" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellLinOp_1a6f2e4279fbe6ebbea1e903fb0aafc745" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void amrex::MLCellLinOp::Fsmooth</definition>
        <argsstring>(int amrlev, int mglev, MultiFab &amp;sol, const MultiFab &amp;rsh, int redblack) const =0</argsstring>
        <name>Fsmooth</name>
        <reimplementedby refid="classamrex_1_1MLABecLaplacian_1a32f30f88fc7763cc7c6f378e91761e6f">Fsmooth</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLEBABecLap_1a6d19a8694d9c4ef50a169f50822220e4">Fsmooth</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLALaplacian_1afe43cd144c954ede7876c55ccb91e071">Fsmooth</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLPoisson_1a420216f540519af7ead6ca22fd1f2e3f">Fsmooth</reimplementedby>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>rsh</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>redblack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="150" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellLinOp_1a984719ccb019be3050750f57138557b0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void amrex::MLCellLinOp::FFlux</definition>
        <argsstring>(int amrlev, const MFIter &amp;mfi, const Array&lt; FArrayBox *, AMREX_SPACEDIM &gt; &amp;flux, const FArrayBox &amp;sol, Location loc, const int face_only=0) const =0</argsstring>
        <name>FFlux</name>
        <reimplementedby refid="classamrex_1_1MLPoisson_1ada86917688ba1183c91948846b316344">FFlux</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLEBABecLap_1a200c1fea9d1ff4f7f3f6cc97a645bce8">FFlux</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLALaplacian_1a7166ec107d9a949e0d3aa2ce4b75a4af">FFlux</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLABecLaplacian_1a6e3cc0a31d52d1bb18ebf5c43dac89eb">FFlux</reimplementedby>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>flux</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLLinOp_1a07cd0a7c45d6542e33a5d97aefe5bab3" kindref="member">Location</ref></type>
          <declname>loc</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>face_only</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="151" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellLinOp_1aecf6e808caf5ecfbd519a464133f7b0b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLCellLinOp::applyMetricTermToMF</definition>
        <argsstring>(int amrlev, int mglev, MultiFab &amp;rhs) const</argsstring>
        <name>applyMetricTermToMF</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="156" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.cpp" bodystart="1333" bodyend="1386"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellLinOp_1aaacf8a4f3f2c127b3ea2bb7035897b19" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>Real</type>
        <definition>Real amrex::MLCellLinOp::AnyNormInfMask</definition>
        <argsstring>(int amrlev, Any const &amp;a, bool local) const override</argsstring>
        <name>AnyNormInfMask</name>
        <reimplements refid="classamrex_1_1MLLinOp_1a64f4ec813a013e966d0d9d8fb87cdbb5">AnyNormInfMask</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Any" kindref="compound">Any</ref> const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="158" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.cpp" bodystart="1540" bodyend="1629"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellLinOp_1af7c27ed28c0d3038c44e786416fcfa27" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLCellLinOp::AnyAvgDownResAmr</definition>
        <argsstring>(int clev, Any &amp;cres, Any const &amp;fres) const override</argsstring>
        <name>AnyAvgDownResAmr</name>
        <reimplements refid="classamrex_1_1MLLinOp_1abea292e743cd597afb9543a76261990b">AnyAvgDownResAmr</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>clev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Any" kindref="compound">Any</ref> &amp;</type>
          <declname>cres</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Any" kindref="compound">Any</ref> const &amp;</type>
          <declname>fres</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="160" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.cpp" bodystart="1632" bodyend="1641"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellLinOp_1a9bc26851381c49d35f14bbcf2e0bbb75" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLCellLinOp::AnyInterpolationAmr</definition>
        <argsstring>(int famrlev, Any &amp;fine, const Any &amp;crse, IntVect const &amp;) const override</argsstring>
        <name>AnyInterpolationAmr</name>
        <reimplements refid="classamrex_1_1MLLinOp_1ac0a74a280b8321de86dbf25297ed95ef">AnyInterpolationAmr</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>famrlev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Any" kindref="compound">Any</ref> &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Any" kindref="compound">Any</ref> &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="162" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.cpp" bodystart="1644" bodyend="1733"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellLinOp_1a3efe1958435b3fde0ea3acb0f404f54e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLCellLinOp::AnyAverageDownAndSync</definition>
        <argsstring>(Vector&lt; Any &gt; &amp;sol) const override</argsstring>
        <name>AnyAverageDownAndSync</name>
        <reimplements refid="classamrex_1_1MLLinOp_1a19f2a99b89fdb222ff2c006c3e623625">AnyAverageDownAndSync</reimplements>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Any" kindref="compound">Any</ref> &gt; &amp;</type>
          <declname>sol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="165" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.cpp" bodystart="1828" bodyend="1843"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellLinOp_1a7220b4246ab9447e6b2b4432797c794f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex::MLCellLinOp::addInhomogNeumannFlux</definition>
        <argsstring>(int, const Array&lt; MultiFab *, AMREX_SPACEDIM &gt; &amp;, MultiFab const &amp;, bool) const</argsstring>
        <name>addInhomogNeumannFlux</name>
        <reimplementedby refid="classamrex_1_1MLCellABecLap_1a8e19334555666cedb2a6a35a7bb3e885">addInhomogNeumannFlux</reimplementedby>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *, AMREX_SPACEDIM &gt; &amp;</type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> const &amp;</type>
        </param>
        <param>
          <type>bool</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="167" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" bodystart="167" bodyend="170"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classamrex_1_1MLCellLinOp_1a971e6a729527288cdcb774d19799cf18" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLCellLinOp::defineAuxData</definition>
        <argsstring>()</argsstring>
        <name>defineAuxData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="242" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.cpp" bodystart="99" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellLinOp_1a51a99982e299f90449ae12473a15c7d2" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLCellLinOp::defineBC</definition>
        <argsstring>()</argsstring>
        <name>defineBC</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="243" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.cpp" bodystart="157" bodyend="231"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellLinOp_1aec0d79cef7bae830d597fe71b5bcd56e" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLCellLinOp::computeVolInv</definition>
        <argsstring>() const</argsstring>
        <name>computeVolInv</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="245" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.cpp" bodystart="1453" bodyend="1504"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="5">
        <label>amrex::MLTensorOp</label>
        <link refid="classamrex_1_1MLTensorOp"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>amrex::MLEBTensorOp</label>
        <link refid="classamrex_1_1MLEBTensorOp"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>amrex::MLALaplacian</label>
        <link refid="classamrex_1_1MLALaplacian"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>amrex::MLPoisson</label>
        <link refid="classamrex_1_1MLPoisson"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>amrex::MLABecLaplacian</label>
        <link refid="classamrex_1_1MLABecLaplacian"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>amrex::MLEBABecLap</label>
        <link refid="classamrex_1_1MLEBABecLap"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>amrex::MLLinOp</label>
        <link refid="classamrex_1_1MLLinOp"/>
      </node>
      <node id="3">
        <label>amrex::MLCellABecLap</label>
        <link refid="classamrex_1_1MLCellABecLap"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>amrex::MLCellLinOp</label>
        <link refid="classamrex_1_1MLCellLinOp"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="64">
        <label>amrex::BaseFab&lt; Real &gt;</label>
        <link refid="classamrex_1_1BaseFab"/>
        <childnode refid="65" relation="public-inheritance">
        </childnode>
        <childnode refid="38" relation="usage">
          <edgelabel>domain</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>dptr</edgelabel>
        </childnode>
      </node>
      <node id="72">
        <label>std::vector&lt; MPI_Status, std::allocator&lt; MPI_Status &gt; &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="48">
        <label>amrex::BoxList</label>
        <link refid="classamrex_1_1BoxList"/>
        <childnode refid="36" relation="usage">
          <edgelabel>m_lbox</edgelabel>
        </childnode>
        <childnode refid="39" relation="usage">
          <edgelabel>btype</edgelabel>
        </childnode>
      </node>
      <node id="67">
        <label>amrex::ArenaInfo</label>
        <link refid="structamrex_1_1ArenaInfo"/>
      </node>
      <node id="54">
        <label>amrex::BATindexType</label>
        <link refid="structamrex_1_1BATindexType"/>
        <childnode refid="39" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
      </node>
      <node id="69">
        <label>std::unique_ptr&lt; amrex::FBData&lt; FArrayBox &gt; &gt;</label>
        <childnode refid="70" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="37">
        <label>std::vector&lt; amrex::Box, std::allocator&lt; amrex::Box &gt; &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="104">
        <label>std::vector&lt; amrex::YAFluxRegisterT, std::allocator&lt; amrex::YAFluxRegisterT &gt; &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="56">
        <label>amrex::BATindexType_coarsenRatio</label>
        <link refid="structamrex_1_1BATindexType__coarsenRatio"/>
        <childnode refid="12" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
        </childnode>
        <childnode refid="39" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
      </node>
      <node id="28">
        <label>K</label>
      </node>
      <node id="55">
        <label>amrex::BATnull</label>
        <link refid="structamrex_1_1BATnull"/>
      </node>
      <node id="12">
        <label>amrex::IntVect</label>
        <link refid="classamrex_1_1IntVect"/>
        <childnode refid="12" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>T</label>
      </node>
      <node id="25">
        <label>amrex::FabArrayBase::CommMetaData</label>
        <link refid="structamrex_1_1FabArrayBase_1_1CommMetaData"/>
        <childnode refid="26" relation="usage">
          <edgelabel>m_RcvTags</edgelabel>
          <edgelabel>m_SndTags</edgelabel>
        </childnode>
        <childnode refid="29" relation="usage">
          <edgelabel>m_LocTags</edgelabel>
        </childnode>
      </node>
      <node id="93">
        <label>amrex::Vector&lt; std::unique_ptr&lt; amrex::MultiFab &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="94" relation="public-inheritance">
        </childnode>
      </node>
      <node id="74">
        <label>std::unique_ptr&lt; amrex::FabArray&lt; FArrayBox &gt; &gt;</label>
        <childnode refid="14" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="16">
        <label>amrex::FabFactory&lt; FArrayBox &gt;</label>
        <link refid="classamrex_1_1FabFactory"/>
      </node>
      <node id="9">
        <label>Real</label>
      </node>
      <node id="30">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="60">
        <label>amrex::Vector&lt; MPI_Request &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="61" relation="public-inheritance">
        </childnode>
      </node>
      <node id="78">
        <label>amrex::MultiArray4&lt; value_type &gt;</label>
        <link refid="structamrex_1_1MultiArray4"/>
        <childnode refid="79" relation="usage">
          <edgelabel>hp</edgelabel>
          <edgelabel>dp</edgelabel>
        </childnode>
      </node>
      <node id="65">
        <label>amrex::DataAllocator</label>
        <link refid="structamrex_1_1DataAllocator"/>
        <childnode refid="66" relation="usage">
          <edgelabel>m_arena</edgelabel>
        </childnode>
      </node>
      <node id="34">
        <label>std::unordered_map&lt; IntVect, std::vector&lt; int &gt;, IntVect::shift_hasher &gt;</label>
        <childnode refid="12" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="35" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="96">
        <label>std::vector&lt; std::unique_ptr&lt; amrex::BndryRegisterT &gt;, std::allocator&lt; std::unique_ptr&lt; amrex::BndryRegisterT &gt; &gt; &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="83">
        <label>std::vector&lt; Array&lt; BCType, AMREX_SPACEDIM &gt;, std::allocator&lt; Array&lt; BCType, AMREX_SPACEDIM &gt; &gt; &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="76">
        <label>std::vector&lt; std::string, std::allocator&lt; std::string &gt; &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="17">
        <label>amrex::MultiArray4&lt; value_type const &gt;</label>
        <link refid="structamrex_1_1MultiArray4"/>
        <childnode refid="18" relation="usage">
          <edgelabel>hp</edgelabel>
          <edgelabel>dp</edgelabel>
        </childnode>
      </node>
      <node id="79">
        <label>amrex::Array4&lt; value_type &gt;</label>
        <link refid="structamrex_1_1Array4"/>
        <childnode refid="19" relation="usage">
          <edgelabel>begin</edgelabel>
          <edgelabel>end</edgelabel>
        </childnode>
      </node>
      <node id="10">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::BoxArray &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="11" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11">
        <label>std::vector&lt; amrex::Vector&lt; amrex::BoxArray &gt;, std::allocator&lt; amrex::Vector&lt; amrex::BoxArray &gt; &gt; &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="27">
        <label>std::map&lt; K, T &gt;</label>
        <childnode refid="28" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="66">
        <label>amrex::Arena</label>
        <link refid="classamrex_1_1Arena"/>
        <childnode refid="67" relation="usage">
          <edgelabel>arena_info</edgelabel>
        </childnode>
      </node>
      <node id="42">
        <label>amrex::Vector&lt; int &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="43" relation="public-inheritance">
        </childnode>
      </node>
      <node id="57">
        <label>amrex::Periodicity</label>
        <link refid="classamrex_1_1Periodicity"/>
        <childnode refid="12" relation="usage">
          <edgelabel>period</edgelabel>
        </childnode>
      </node>
      <node id="59">
        <label>std::vector&lt; char *, std::allocator&lt; char * &gt; &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="70">
        <label>amrex::FBData&lt; FArrayBox &gt;</label>
        <link refid="structamrex_1_1FBData"/>
        <childnode refid="22" relation="usage">
          <edgelabel>recv_size</edgelabel>
        </childnode>
        <childnode refid="42" relation="usage">
          <edgelabel>recv_from</edgelabel>
        </childnode>
        <childnode refid="58" relation="usage">
          <edgelabel>recv_data</edgelabel>
          <edgelabel>send_data</edgelabel>
        </childnode>
        <childnode refid="71" relation="usage">
          <edgelabel>recv_stat</edgelabel>
        </childnode>
        <childnode refid="60" relation="usage">
          <edgelabel>send_reqs</edgelabel>
          <edgelabel>recv_reqs</edgelabel>
        </childnode>
        <childnode refid="73" relation="usage">
          <edgelabel>fb</edgelabel>
        </childnode>
      </node>
      <node id="91">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::BndryRegisterT &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="92" relation="public-inheritance">
        </childnode>
      </node>
      <node id="99">
        <label>amrex::Vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::MLCellLinOp::BndryCondLoc &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="100" relation="public-inheritance">
        </childnode>
      </node>
      <node id="52">
        <label>amrex::Orientation</label>
        <link refid="classamrex_1_1Orientation"/>
      </node>
      <node id="33">
        <label>amrex::BARef</label>
        <link refid="structamrex_1_1BARef"/>
        <childnode refid="12" relation="usage">
          <edgelabel>crsn</edgelabel>
        </childnode>
        <childnode refid="34" relation="usage">
          <edgelabel>hash</edgelabel>
        </childnode>
        <childnode refid="36" relation="usage">
          <edgelabel>m_abox</edgelabel>
        </childnode>
        <childnode refid="38" relation="usage">
          <edgelabel>bbox</edgelabel>
        </childnode>
      </node>
      <node id="100">
        <label>std::vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::MLCellLinOp::BndryCondLoc &gt; &gt;, std::allocator&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::MLCellLinOp::BndryCondLoc &gt; &gt; &gt; &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="73">
        <label>amrex::FabArrayBase::FB</label>
        <link refid="structamrex_1_1FabArrayBase_1_1FB"/>
        <childnode refid="25" relation="public-inheritance">
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>m_ngrow</edgelabel>
          <edgelabel>m_crse_ratio</edgelabel>
        </childnode>
        <childnode refid="39" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
        <childnode refid="57" relation="usage">
          <edgelabel>m_period</edgelabel>
        </childnode>
      </node>
      <node id="58">
        <label>amrex::Vector&lt; char * &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="59" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>amrex::Vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::FabFactory&lt; amrex::FArrayBox &gt; &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="49">
        <label>amrex::BATransformer</label>
        <link refid="structamrex_1_1BATransformer"/>
        <childnode refid="50" relation="usage">
          <edgelabel>m_op</edgelabel>
        </childnode>
      </node>
      <node id="95">
        <label>amrex::Vector&lt; std::unique_ptr&lt; amrex::BndryRegisterT &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="96" relation="public-inheritance">
        </childnode>
      </node>
      <node id="86">
        <label>std::unique_ptr&lt; amrex::MLLinOp::CommContainer &gt;</label>
        <childnode refid="87" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>std::vector&lt; amrex::Vector&lt; amrex::Geometry &gt;, std::allocator&lt; amrex::Vector&lt; amrex::Geometry &gt; &gt; &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="53">
        <label>amrex::BATcoarsenRatio</label>
        <link refid="structamrex_1_1BATcoarsenRatio"/>
        <childnode refid="12" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
        </childnode>
      </node>
      <node id="77">
        <label>amrex::FabArray&lt; FAB &gt;::ShMem</label>
        <link refid="structamrex_1_1FabArray_1_1ShMem"/>
      </node>
      <node id="98">
        <label>std::vector&lt; amrex::Vector&lt; Real &gt;, std::allocator&lt; amrex::Vector&lt; Real &gt; &gt; &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="50">
        <label>amrex::BATransformer::BATOp</label>
        <link refid="unionamrex_1_1BATransformer_1_1BATOp"/>
        <childnode refid="51" relation="usage">
          <edgelabel>m_bndryReg</edgelabel>
        </childnode>
        <childnode refid="53" relation="usage">
          <edgelabel>m_coarsenRatio</edgelabel>
        </childnode>
        <childnode refid="54" relation="usage">
          <edgelabel>m_indexType</edgelabel>
        </childnode>
        <childnode refid="55" relation="usage">
          <edgelabel>m_null</edgelabel>
        </childnode>
        <childnode refid="56" relation="usage">
          <edgelabel>m_indexType_coarsenRatio</edgelabel>
        </childnode>
      </node>
      <node id="62">
        <label>std::vector&lt; FArrayBox * &gt;</label>
        <childnode refid="63" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="24">
        <label>amrex::FabArrayBase::CPC</label>
        <link refid="structamrex_1_1FabArrayBase_1_1CPC"/>
        <childnode refid="25" relation="public-inheritance">
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>m_srcng</edgelabel>
          <edgelabel>m_dstng</edgelabel>
        </childnode>
        <childnode refid="31" relation="usage">
          <edgelabel>m_dstbdk</edgelabel>
          <edgelabel>m_srcbdk</edgelabel>
        </childnode>
        <childnode refid="45" relation="usage">
          <edgelabel>m_srcba</edgelabel>
          <edgelabel>m_dstba</edgelabel>
        </childnode>
        <childnode refid="57" relation="usage">
          <edgelabel>m_period</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::Geometry &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>amrex::RealVect</label>
        <link refid="classamrex_1_1RealVect"/>
        <childnode refid="8" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>vect</edgelabel>
        </childnode>
      </node>
      <node id="19">
        <label>amrex::Dim3</label>
        <link refid="structamrex_1_1Dim3"/>
      </node>
      <node id="80">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::DistributionMapping &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="81" relation="public-inheritance">
        </childnode>
      </node>
      <node id="84">
        <label>amrex::Vector&lt; amrex::IntVect &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="85" relation="public-inheritance">
        </childnode>
      </node>
      <node id="94">
        <label>std::vector&lt; std::unique_ptr&lt; amrex::MultiFab &gt;, std::allocator&lt; std::unique_ptr&lt; amrex::MultiFab &gt; &gt; &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="61">
        <label>std::vector&lt; MPI_Request, std::allocator&lt; MPI_Request &gt; &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="43">
        <label>std::vector&lt; int, std::allocator&lt; int &gt; &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="45">
        <label>amrex::BoxArray</label>
        <link refid="classamrex_1_1BoxArray"/>
        <childnode refid="46" relation="usage">
          <edgelabel>m_ref</edgelabel>
        </childnode>
        <childnode refid="47" relation="usage">
          <edgelabel>m_simplified_list</edgelabel>
        </childnode>
        <childnode refid="49" relation="usage">
          <edgelabel>m_bat</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>amrex::MLLinOp</label>
        <link refid="classamrex_1_1MLLinOp"/>
        <childnode refid="3" relation="usage">
          <edgelabel>m_factory</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>m_geom</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>m_coarse_bc_loc</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>m_grids</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>m_ixtype</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>m_coarse_data_for_bc</edgelabel>
        </childnode>
        <childnode refid="42" relation="usage">
          <edgelabel>m_domain_covered</edgelabel>
          <edgelabel>m_amr_ref_ratio</edgelabel>
          <edgelabel>m_num_mg_levels</edgelabel>
        </childnode>
        <childnode refid="80" relation="usage">
          <edgelabel>m_dmap</edgelabel>
        </childnode>
        <childnode refid="82" relation="usage">
          <edgelabel>m_hibc</edgelabel>
          <edgelabel>m_lobc_orig</edgelabel>
          <edgelabel>m_lobc</edgelabel>
          <edgelabel>m_hibc_orig</edgelabel>
        </childnode>
        <childnode refid="84" relation="usage">
          <edgelabel>mg_coarsen_ratio_vec</edgelabel>
        </childnode>
        <childnode refid="2" relation="usage">
          <edgelabel>m_parent</edgelabel>
        </childnode>
        <childnode refid="86" relation="usage">
          <edgelabel>m_raii_comm</edgelabel>
        </childnode>
        <childnode refid="88" relation="usage">
          <edgelabel>info</edgelabel>
        </childnode>
      </node>
      <node id="18">
        <label>amrex::Array4&lt; value_type const &gt;</label>
        <link refid="structamrex_1_1Array4"/>
        <childnode refid="19" relation="usage">
          <edgelabel>begin</edgelabel>
          <edgelabel>end</edgelabel>
        </childnode>
      </node>
      <node id="102">
        <label>std::vector&lt; amrex::Vector&lt; Array&lt; amrex::MultiMask, 2 *AMREX_SPACEDIM &gt; &gt;, std::allocator&lt; amrex::Vector&lt; Array&lt; amrex::MultiMask, 2 *AMREX_SPACEDIM &gt; &gt; &gt; &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="38">
        <label>amrex::Box</label>
        <link refid="classamrex_1_1Box"/>
        <childnode refid="12" relation="usage">
          <edgelabel>bigend</edgelabel>
          <edgelabel>smallend</edgelabel>
        </childnode>
        <childnode refid="39" relation="usage">
          <edgelabel>btype</edgelabel>
        </childnode>
      </node>
      <node id="89">
        <label>amrex::Vector&lt; std::unique_ptr&lt; amrex::iMultiFab &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="90" relation="public-inheritance">
        </childnode>
      </node>
      <node id="82">
        <label>amrex::Vector&lt; Array&lt; BCType, AMREX_SPACEDIM &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="83" relation="public-inheritance">
        </childnode>
      </node>
      <node id="20">
        <label>std::unique_ptr&lt; amrex::PCData&lt; FArrayBox &gt; &gt;</label>
        <childnode refid="21" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="46">
        <label>std::shared_ptr&lt; amrex::BARef &gt;</label>
        <childnode refid="33" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="40">
        <label>amrex::DistributionMapping::RefID</label>
        <link refid="structamrex_1_1DistributionMapping_1_1RefID"/>
        <childnode refid="41" relation="usage">
          <edgelabel>data</edgelabel>
        </childnode>
      </node>
      <node id="103">
        <label>amrex::Vector&lt; amrex::YAFluxRegisterT &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="104" relation="public-inheritance">
        </childnode>
      </node>
      <node id="71">
        <label>amrex::Vector&lt; MPI_Status &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="72" relation="public-inheritance">
        </childnode>
      </node>
      <node id="88">
        <label>amrex::LPInfo</label>
        <link refid="structamrex_1_1LPInfo"/>
      </node>
      <node id="51">
        <label>amrex::BATbndryReg</label>
        <link refid="structamrex_1_1BATbndryReg"/>
        <childnode refid="12" relation="usage">
          <edgelabel>m_doihi</edgelabel>
          <edgelabel>m_doilo</edgelabel>
          <edgelabel>m_hishft</edgelabel>
          <edgelabel>m_crse_ratio</edgelabel>
          <edgelabel>m_loshft</edgelabel>
        </childnode>
        <childnode refid="52" relation="usage">
          <edgelabel>m_face</edgelabel>
        </childnode>
        <childnode refid="39" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
      </node>
      <node id="26">
        <label>std::unique_ptr&lt; MapOfCopyComTagContainers &gt;</label>
        <childnode refid="27" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="87">
        <label>amrex::MLLinOp::CommContainer</label>
        <link refid="structamrex_1_1MLLinOp_1_1CommContainer"/>
      </node>
      <node id="106">
        <label>std::vector&lt; std::unique_ptr&lt; amrex::MLMGBndry &gt;, std::allocator&lt; std::unique_ptr&lt; amrex::MLMGBndry &gt; &gt; &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="39">
        <label>amrex::IndexType</label>
        <link refid="classamrex_1_1IndexType"/>
      </node>
      <node id="41">
        <label>amrex::DistributionMapping::Ref</label>
        <link refid="structamrex_1_1DistributionMapping_1_1Ref"/>
        <childnode refid="42" relation="usage">
          <edgelabel>m_index_array</edgelabel>
          <edgelabel>m_pmap</edgelabel>
        </childnode>
        <childnode refid="44" relation="usage">
          <edgelabel>m_ownership</edgelabel>
        </childnode>
      </node>
      <node id="75">
        <label>amrex::Vector&lt; std::string &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="76" relation="public-inheritance">
        </childnode>
      </node>
      <node id="68">
        <label>amrex::FABio</label>
        <link refid="classamrex_1_1FABio"/>
      </node>
      <node id="31">
        <label>amrex::FabArrayBase::BDKey</label>
        <link refid="structamrex_1_1FabArrayBase_1_1BDKey"/>
        <childnode refid="32" relation="usage">
          <edgelabel>m_ba_id</edgelabel>
        </childnode>
        <childnode refid="40" relation="usage">
          <edgelabel>m_dm_id</edgelabel>
        </childnode>
      </node>
      <node id="85">
        <label>std::vector&lt; amrex::IntVect, std::allocator&lt; amrex::IntVect &gt; &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="101">
        <label>amrex::Vector&lt; amrex::Vector&lt; Array&lt; amrex::MultiMask, 2 *AMREX_SPACEDIM &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="102" relation="public-inheritance">
        </childnode>
      </node>
      <node id="44">
        <label>std::vector&lt; bool &gt;</label>
      </node>
      <node id="15">
        <label>std::unique_ptr&lt; amrex::FabFactory&lt; FArrayBox &gt; &gt;</label>
        <childnode refid="16" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="13">
        <label>amrex::MultiFab</label>
        <link refid="classamrex_1_1MultiFab"/>
        <childnode refid="14" relation="public-inheritance">
        </childnode>
      </node>
      <node id="90">
        <label>std::vector&lt; std::unique_ptr&lt; amrex::iMultiFab &gt;, std::allocator&lt; std::unique_ptr&lt; amrex::iMultiFab &gt; &gt; &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="47">
        <label>std::shared_ptr&lt; amrex::BoxList &gt;</label>
        <childnode refid="48" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>amrex::MLCellLinOp</label>
        <link refid="classamrex_1_1MLCellLinOp"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="89" relation="usage">
          <edgelabel>m_norm_fine_mask</edgelabel>
        </childnode>
        <childnode refid="91" relation="usage">
          <edgelabel>m_undrrelxr</edgelabel>
        </childnode>
        <childnode refid="93" relation="usage">
          <edgelabel>m_robin_bcval</edgelabel>
        </childnode>
        <childnode refid="95" relation="usage">
          <edgelabel>m_crse_sol_br</edgelabel>
          <edgelabel>m_crse_cor_br</edgelabel>
        </childnode>
        <childnode refid="97" relation="usage">
          <edgelabel>m_volinv</edgelabel>
        </childnode>
        <childnode refid="99" relation="usage">
          <edgelabel>m_bcondloc</edgelabel>
        </childnode>
        <childnode refid="101" relation="usage">
          <edgelabel>m_maskvals</edgelabel>
        </childnode>
        <childnode refid="103" relation="usage">
          <edgelabel>m_fluxreg</edgelabel>
        </childnode>
        <childnode refid="105" relation="usage">
          <edgelabel>m_bndry_sol</edgelabel>
          <edgelabel>m_bndry_cor</edgelabel>
        </childnode>
      </node>
      <node id="63">
        <label>amrex::FArrayBox</label>
        <link refid="classamrex_1_1FArrayBox"/>
        <childnode refid="64" relation="public-inheritance">
        </childnode>
        <childnode refid="68" relation="usage">
          <edgelabel>fabio</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>initval</edgelabel>
        </childnode>
      </node>
      <node id="14">
        <label>amrex::FabArray&lt; FArrayBox &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="15" relation="usage">
          <edgelabel>m_factory</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>m_const_arrays</edgelabel>
        </childnode>
        <childnode refid="20" relation="usage">
          <edgelabel>pcd</edgelabel>
        </childnode>
        <childnode refid="62" relation="usage">
          <edgelabel>m_fabs_v</edgelabel>
        </childnode>
        <childnode refid="69" relation="usage">
          <edgelabel>fbd</edgelabel>
        </childnode>
        <childnode refid="65" relation="usage">
          <edgelabel>m_dallocator</edgelabel>
        </childnode>
        <childnode refid="74" relation="usage">
          <edgelabel>os_temp</edgelabel>
        </childnode>
        <childnode refid="75" relation="usage">
          <edgelabel>m_tags</edgelabel>
        </childnode>
        <childnode refid="77" relation="usage">
          <edgelabel>shmem</edgelabel>
        </childnode>
        <childnode refid="78" relation="usage">
          <edgelabel>m_arrays</edgelabel>
        </childnode>
      </node>
      <node id="22">
        <label>amrex::Vector&lt; std::size_t &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="23" relation="public-inheritance">
        </childnode>
      </node>
      <node id="32">
        <label>amrex::BoxArray::RefID</label>
        <link refid="structamrex_1_1BoxArray_1_1RefID"/>
        <childnode refid="33" relation="usage">
          <edgelabel>data</edgelabel>
        </childnode>
      </node>
      <node id="36">
        <label>amrex::Vector&lt; amrex::Box &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="37" relation="public-inheritance">
        </childnode>
      </node>
      <node id="21">
        <label>amrex::PCData&lt; FArrayBox &gt;</label>
        <link refid="structamrex_1_1PCData"/>
        <childnode refid="22" relation="usage">
          <edgelabel>recv_size</edgelabel>
        </childnode>
        <childnode refid="24" relation="usage">
          <edgelabel>cpc</edgelabel>
        </childnode>
        <childnode refid="42" relation="usage">
          <edgelabel>recv_from</edgelabel>
        </childnode>
        <childnode refid="58" relation="usage">
          <edgelabel>recv_data</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>src</edgelabel>
        </childnode>
        <childnode refid="60" relation="usage">
          <edgelabel>send_reqs</edgelabel>
          <edgelabel>recv_reqs</edgelabel>
        </childnode>
      </node>
      <node id="105">
        <label>amrex::Vector&lt; std::unique_ptr&lt; amrex::MLMGBndry &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="106" relation="public-inheritance">
        </childnode>
      </node>
      <node id="97">
        <label>amrex::Vector&lt; amrex::Vector&lt; Real &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="98" relation="public-inheritance">
        </childnode>
      </node>
      <node id="23">
        <label>std::vector&lt; std::size_t, std::allocator&lt; std::size_t &gt; &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="35">
        <label>std::vector&lt; int &gt;</label>
      </node>
      <node id="81">
        <label>std::vector&lt; amrex::Vector&lt; amrex::DistributionMapping &gt;, std::allocator&lt; amrex::Vector&lt; amrex::DistributionMapping &gt; &gt; &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="92">
        <label>std::vector&lt; amrex::Vector&lt; amrex::BndryRegisterT &gt;, std::allocator&lt; amrex::Vector&lt; amrex::BndryRegisterT &gt; &gt; &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="29">
        <label>std::unique_ptr&lt; CopyComTagsContainer &gt;</label>
        <childnode refid="30" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>std::vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::FabFactory&lt; amrex::FArrayBox &gt; &gt; &gt;, std::allocator&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::FabFactory&lt; amrex::FArrayBox &gt; &gt; &gt; &gt; &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="12" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" bodystart="10" bodyend="247"/>
    <listofallmembers>
      <member refid="classamrex_1_1MLCellLinOp_1a7220b4246ab9447e6b2b4432797c794f" prot="public" virt="virtual"><scope>amrex::MLCellLinOp</scope><name>addInhomogNeumannFlux</name></member>
      <member refid="classamrex_1_1MLLinOp_1a8effbacb86233a5334789092372a9bde" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>AMRRefRatio</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac80a224852d40e9dd01ef9e4d52cd1c9" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>AMRRefRatio</name></member>
      <member refid="classamrex_1_1MLLinOp_1a798b4eaeb4638b01352daba1ce7a5e44" prot="public" virt="virtual"><scope>amrex::MLCellLinOp</scope><name>AnyAdd</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a3efe1958435b3fde0ea3acb0f404f54e" prot="public" virt="virtual"><scope>amrex::MLCellLinOp</scope><name>AnyAverageDownAndSync</name></member>
      <member refid="classamrex_1_1MLLinOp_1a7053d4e8db13b9bc6aa1505228e42b82" prot="public" virt="virtual"><scope>amrex::MLCellLinOp</scope><name>AnyAverageDownSolutionRHS</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1af7c27ed28c0d3038c44e786416fcfa27" prot="public" virt="virtual"><scope>amrex::MLCellLinOp</scope><name>AnyAvgDownResAmr</name></member>
      <member refid="classamrex_1_1MLLinOp_1afbe1037430dd65ce6f5f90ff47fa3abf" prot="public" virt="virtual"><scope>amrex::MLCellLinOp</scope><name>AnyAvgDownResMG</name></member>
      <member refid="classamrex_1_1MLLinOp_1a0bcab258419204e22344e10166971f25" prot="public" virt="virtual"><scope>amrex::MLCellLinOp</scope><name>AnyCopy</name></member>
      <member refid="classamrex_1_1MLLinOp_1a0a60ca7809271135f39ea4294f3890ca" prot="public" virt="virtual"><scope>amrex::MLCellLinOp</scope><name>AnyCorrectionResidual</name></member>
      <member refid="classamrex_1_1MLLinOp_1aca0a26169b857efbc1bd1e424e787886" prot="public" virt="virtual"><scope>amrex::MLCellLinOp</scope><name>AnyGrowVect</name></member>
      <member refid="classamrex_1_1MLLinOp_1aebb9d5705330c057bdb1bd8800a6f430" prot="public" virt="virtual"><scope>amrex::MLCellLinOp</scope><name>AnyInterpAssignMG</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a9bc26851381c49d35f14bbcf2e0bbb75" prot="public" virt="virtual"><scope>amrex::MLCellLinOp</scope><name>AnyInterpolationAmr</name></member>
      <member refid="classamrex_1_1MLLinOp_1adbdf9aaf1ccc800c62487b24f336b502" prot="public" virt="virtual"><scope>amrex::MLCellLinOp</scope><name>AnyInterpolationMG</name></member>
      <member refid="classamrex_1_1MLLinOp_1ad40e38b311ffc4f58f39b1ada8619294" prot="public" virt="virtual"><scope>amrex::MLCellLinOp</scope><name>AnyMake</name></member>
      <member refid="classamrex_1_1MLLinOp_1a768ff0c44cdf30e07b0c9ddb0a30ffef" prot="public" virt="virtual"><scope>amrex::MLCellLinOp</scope><name>AnyMakeAlias</name></member>
      <member refid="classamrex_1_1MLLinOp_1a9f7fcc41c14f77079d509e5eb85cbfe9" prot="public" virt="virtual"><scope>amrex::MLCellLinOp</scope><name>AnyMakeCoarseAmr</name></member>
      <member refid="classamrex_1_1MLLinOp_1a4e8d808ba57a2331615f1e256cf85e4e" prot="public" virt="virtual"><scope>amrex::MLCellLinOp</scope><name>AnyMakeCoarseMG</name></member>
      <member refid="classamrex_1_1MLLinOp_1a47701945960629a5fab242da32add560" prot="public" virt="virtual"><scope>amrex::MLCellLinOp</scope><name>AnyNormInf</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1aaacf8a4f3f2c127b3ea2bb7035897b19" prot="public" virt="virtual"><scope>amrex::MLCellLinOp</scope><name>AnyNormInfMask</name></member>
      <member refid="classamrex_1_1MLLinOp_1acfd9e2b3acdcd9494d321c020b6ce98f" prot="public" virt="virtual"><scope>amrex::MLCellLinOp</scope><name>AnyParallelCopy</name></member>
      <member refid="classamrex_1_1MLLinOp_1a316bc42d433c2d77a6110ac5632324f6" prot="public" virt="virtual"><scope>amrex::MLCellLinOp</scope><name>AnyReflux</name></member>
      <member refid="classamrex_1_1MLLinOp_1ae135c931d3ceb31f1d21f06253e73658" prot="public" virt="virtual"><scope>amrex::MLCellLinOp</scope><name>AnyRestriction</name></member>
      <member refid="classamrex_1_1MLLinOp_1ad28403dda85895d123abdaf36365cf29" prot="public" virt="virtual"><scope>amrex::MLCellLinOp</scope><name>AnySetBndryToZero</name></member>
      <member refid="classamrex_1_1MLLinOp_1a8cd14b1829a52c3f9eedfc975274242d" prot="public" virt="virtual"><scope>amrex::MLCellLinOp</scope><name>AnySetToZero</name></member>
      <member refid="classamrex_1_1MLLinOp_1af6f520cd860d3be048f5bf04a219aa85" prot="public" virt="virtual"><scope>amrex::MLCellLinOp</scope><name>AnySmooth</name></member>
      <member refid="classamrex_1_1MLLinOp_1acd3c616a0a54d9367a924b3779108f8b" prot="public" virt="virtual"><scope>amrex::MLCellLinOp</scope><name>AnySolutionResidual</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a62ea55fae7824c00b3237cf57616dd1d" prot="public" virt="virtual"><scope>amrex::MLCellLinOp</scope><name>apply</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1ae77f68c02a722cf55b176d17e2c49a90" prot="public" virt="virtual"><scope>amrex::MLCellLinOp</scope><name>applyBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1a6f31b79968da09d7a713f6581fe8e3dd" prot="public" virt="virtual"><scope>amrex::MLCellLinOp</scope><name>applyInhomogNeumannTerm</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a3ecef53f14386209e60edf69cab15bb1" prot="public" virt="virtual"><scope>amrex::MLCellLinOp</scope><name>applyMetricTerm</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1aecf6e808caf5ecfbd519a464133f7b0b" prot="public" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>applyMetricTermToMF</name></member>
      <member refid="classamrex_1_1MLLinOp_1a15c57a1dbcd04052f52b9ca0701d603d" prot="public" virt="virtual"><scope>amrex::MLCellLinOp</scope><name>applyOverset</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1adfefa1b34d6988c4bf97957616b61c8f" prot="public" virt="virtual"><scope>amrex::MLCellLinOp</scope><name>averageDownSolutionRHS</name></member>
      <member refid="classamrex_1_1MLLinOp_1a5aa01a1ef6b0b3a471f02f65ae4b4884" prot="public" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>BCMode</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a622b7c2ecc46a6b476aba4fb470f3dcf" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>BCTuple</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac2e55c34bf6b5c0ed53d0ef6a4625a3f" prot="public" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>BCType</name></member>
      <member refid="classamrex_1_1MLLinOp_1a77b33530b316399f5fb5314a846d9b7e" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>BottomCommunicator</name></member>
      <member refid="classamrex_1_1MLLinOp_1a91cf65a68d76e83272098df8829e0dca" prot="private" virt="virtual"><scope>amrex::MLCellLinOp</scope><name>checkPoint</name></member>
      <member refid="classamrex_1_1MLLinOp_1a941ddfa6ec11cbd0a1c835007494b057" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>Communicator</name></member>
      <member refid="classamrex_1_1MLLinOp_1af37726771c106055867bf88ade1f65d7" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>compactify</name></member>
      <member refid="classamrex_1_1MLLinOp_1ae3dae2320c8c9e64274e8d41131187dc" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>compactify</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1acd6c78c0e6307234b1539ba81caadb9c" prot="public" virt="virtual"><scope>amrex::MLCellLinOp</scope><name>compFlux</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1aead98967987fb3826008fc69f3270247" prot="public" virt="virtual"><scope>amrex::MLCellLinOp</scope><name>compGrad</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1aec0d79cef7bae830d597fe71b5bcd56e" prot="private" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>computeVolInv</name></member>
      <member refid="classamrex_1_1MLLinOp_1aff1b5ba7a45c7e320550f99f88984301" prot="public" virt="virtual"><scope>amrex::MLCellLinOp</scope><name>copyNSolveSolution</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a3c1832912375e08e8bd38775b6b532b3" prot="public" virt="virtual"><scope>amrex::MLCellLinOp</scope><name>correctionResidual</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a55d205f42d99658c7cce9005b7388b8e" prot="public" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>define</name></member>
      <member refid="classamrex_1_1MLLinOp_1aa0ba245918a01db26fdc8289b4e4ed29" prot="public" virt="non-virtual" ambiguityscope="amrex::MLLinOp::"><scope>amrex::MLCellLinOp</scope><name>define</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a971e6a729527288cdcb774d19799cf18" prot="private" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>defineAuxData</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a51a99982e299f90449ae12473a15c7d2" prot="private" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>defineBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1a07740ce5e26ee8f463d6176b157fe06a" prot="private" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>defineGrids</name></member>
      <member refid="classamrex_1_1MLLinOp_1a355691d7877fb9a9aabc65db76d0f2b4" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>doAgglomeration</name></member>
      <member refid="classamrex_1_1MLLinOp_1a79f98e0cf06f695dbad6052c5d53e00b" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>doConsolidation</name></member>
      <member refid="classamrex_1_1MLLinOp_1ae920d0e3602dd26d57876b6d6a6843e4" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>doSemicoarsening</name></member>
      <member refid="classamrex_1_1MLLinOp_1a831ab67f9a58e0f452f52b176219c1a0" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>enforceSingularSolvable</name></member>
      <member refid="classamrex_1_1MLLinOp_1a0eb75c39ff8e715b524d79442b83a3fb" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>Factory</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a34a85d0cc1fc408ad4dc4b3509cb9917" prot="public" virt="pure-virtual"><scope>amrex::MLCellLinOp</scope><name>Fapply</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a984719ccb019be3050750f57138557b0" prot="public" virt="pure-virtual"><scope>amrex::MLCellLinOp</scope><name>FFlux</name></member>
      <member refid="classamrex_1_1MLLinOp_1ad00407760d4927438c355ba115aaad4e" prot="public" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>Finalize</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a8a9e84cdae16cefb1f4dac19ac06c793" prot="public" virt="virtual"><scope>amrex::MLCellLinOp</scope><name>fixSolvabilityByOffset</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a6f2e4279fbe6ebbea1e903fb0aafc745" prot="public" virt="pure-virtual"><scope>amrex::MLCellLinOp</scope><name>Fsmooth</name></member>
      <member refid="classamrex_1_1MLLinOp_1a7b1da16499dc7b95e807a28757e0c094" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>Geom</name></member>
      <member refid="classamrex_1_1MLLinOp_1aa429808b0b8d8a9efcf3380620f6263a" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>get_d0</name></member>
      <member refid="classamrex_1_1MLLinOp_1ad16cb6cbf7bcb78cc0d0af59611ae00a" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>get_d1</name></member>
      <member refid="classamrex_1_1MLLinOp_1a6d1ed393d8e089b8af021e80ead4267b" prot="public" virt="virtual"><scope>amrex::MLCellLinOp</scope><name>getDefaultBottomSolver</name></member>
      <member refid="classamrex_1_1MLLinOp_1a29c32b42500a25348ee5331f44ab94ba" prot="public" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>getEnforceSingularSolvable</name></member>
      <member refid="classamrex_1_1MLLinOp_1a16bfe483ac9088f65f81d12166adecb4" prot="public" virt="virtual"><scope>amrex::MLCellLinOp</scope><name>getFluxes</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac495d1d722cbb68c31af46b2e860fa9f" prot="public" virt="virtual"><scope>amrex::MLCellLinOp</scope><name>getFluxes</name></member>
      <member refid="classamrex_1_1MLLinOp_1a1189e4016e7757083343a93649f102aa" prot="public" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>getMaxOrder</name></member>
      <member refid="classamrex_1_1MLLinOp_1a525b102eb592e2b44a864c62e64e9566" prot="public" virt="virtual"><scope>amrex::MLCellLinOp</scope><name>getNComp</name></member>
      <member refid="classamrex_1_1MLLinOp_1aea3bbedd2e663d88f153e88ce06a59c3" prot="public" virt="virtual"><scope>amrex::MLCellLinOp</scope><name>getNGrow</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a83f585ffe6e99a77143a4ae564b9f988" prot="public" virt="virtual"><scope>amrex::MLCellLinOp</scope><name>getSolvabilityOffset</name></member>
      <member refid="classamrex_1_1MLLinOp_1a6d7b1e0e21fd61d71bbe342df0f1a5d4" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>hasHiddenDimension</name></member>
      <member refid="classamrex_1_1MLLinOp_1a4910f22e3c63b572ef364cdf8177e392" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>hasInhomogNeumannBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1a4b2636d8115debeeefa38b4b34186ecc" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>hasRobinBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac313a2de49bd67c23fad23d5c4045e70" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>HiBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1af0793198f529f4474139fa9366b2e1aa" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>hiddenDirection</name></member>
      <member refid="classamrex_1_1MLLinOp_1a85fa2f104bbfeaa73d55d589906ecd45" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>info</name></member>
      <member refid="classamrex_1_1MLLinOp_1a48b2fe73722eee0a1d50b6e0b9558174" prot="public" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>Initialize</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1afc69014267331541efe7c497b31118e4" prot="public" virt="virtual"><scope>amrex::MLCellLinOp</scope><name>interpAssign</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a0044458b3dd79241c2b74483b70cb7e7" prot="public" virt="virtual"><scope>amrex::MLCellLinOp</scope><name>interpolation</name></member>
      <member refid="classamrex_1_1MLLinOp_1aa1c6883eef4d4dc55d3a5fe5c921113a" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>isBottomActive</name></member>
      <member refid="classamrex_1_1MLLinOp_1ae5110978eac9ec01689bec96866ad8d5" prot="public" virt="virtual"><scope>amrex::MLCellLinOp</scope><name>isBottomSingular</name></member>
      <member refid="classamrex_1_1MLLinOp_1aa42fd2dfa3b0133f2b20a99026549900" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>isCellCentered</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1af6f760fa4c14171371737ac10d0e2c02" prot="public" virt="virtual"><scope>amrex::MLCellLinOp</scope><name>isCrossStencil</name></member>
      <member refid="classamrex_1_1MLLinOp_1af8de1257ddde2a40a49011ef34d68100" prot="public" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>isMFIterSafe</name></member>
      <member refid="classamrex_1_1MLLinOp_1abdb84e18739d3e95d406166acb56a9a3" prot="public" virt="virtual"><scope>amrex::MLCellLinOp</scope><name>isSingular</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a0152cd38e35f6a41dc3da2814b910f2b" prot="public" virt="virtual"><scope>amrex::MLCellLinOp</scope><name>isTensorOp</name></member>
      <member refid="classamrex_1_1MLLinOp_1a7ef6c8434223ac6e052359cd4f27fbe6" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>LoBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1a07cd0a7c45d6542e33a5d97aefe5bab3" prot="public" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>Location</name></member>
      <member refid="classamrex_1_1MLLinOp_1a42ca524eb4deca1132be683805d2d7ab" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>m_amr_ref_ratio</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a20a2d5349510243c481d2b6ce1992f5c" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>m_bcondloc</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a60785819fb0c997419c7ee7b007e4bb3" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>m_bndry_cor</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1ab8f93178ea3f02ba63da966de7796970" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>m_bndry_sol</name></member>
      <member refid="classamrex_1_1MLLinOp_1a06ea1608702e52d38c0eceaa180bad7e" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>m_bottom_comm</name></member>
      <member refid="classamrex_1_1MLLinOp_1abc7e6e6252f9ecc63c86dcbd99250e10" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>m_coarse_bc_loc</name></member>
      <member refid="classamrex_1_1MLLinOp_1a1ca01453776c12e634debdc6d09206c3" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>m_coarse_data_crse_ratio</name></member>
      <member refid="classamrex_1_1MLLinOp_1ad1382ee007387f65075acda2f46866f2" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>m_coarse_data_for_bc</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a871355473b2744ad7dd29d691e72e9ee" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>m_crse_cor_br</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1aae58b75937a141dc599d98b034be7f3c" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>m_crse_sol_br</name></member>
      <member refid="classamrex_1_1MLLinOp_1addb42fac68158f49c2508cf47d3b8d9d" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>m_default_comm</name></member>
      <member refid="classamrex_1_1MLLinOp_1a80552ba3fc7cdd6bb00739c66327ae2c" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>m_dmap</name></member>
      <member refid="classamrex_1_1MLLinOp_1a19bf5f2d76877e5f5777e5c44d290648" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>m_do_agglomeration</name></member>
      <member refid="classamrex_1_1MLLinOp_1a488b6dd5c1bfecef948b543bfa7e5154" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>m_do_consolidation</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac5eeb189073e311245243a3292b8377d" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>m_do_semicoarsening</name></member>
      <member refid="classamrex_1_1MLLinOp_1a700409c91ec909489e19c53e601de053" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>m_domain_bloc_hi</name></member>
      <member refid="classamrex_1_1MLLinOp_1a0fd156d093aacd959e78666105ed6328" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>m_domain_bloc_lo</name></member>
      <member refid="classamrex_1_1MLLinOp_1aaba23614888f937956554945e6a2a5a0" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>m_domain_covered</name></member>
      <member refid="classamrex_1_1MLLinOp_1aca26a5ef5d68cae3dcabea0a5d8c2493" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>m_factory</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1aeabff149eec600743faac7295cd509d2" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>m_fluxreg</name></member>
      <member refid="classamrex_1_1MLLinOp_1ab16551403ee1629e20ed6e6d9d4f680c" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>m_geom</name></member>
      <member refid="classamrex_1_1MLLinOp_1a3f9b0a7c3a91ca7e13664dbfe7115eed" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>m_grids</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a9d6cdade5abfabf340b180cba282c3c1" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>m_has_metric_term</name></member>
      <member refid="classamrex_1_1MLLinOp_1a619323b7ef2de7c06f7c480c9bcdf3d2" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>m_hibc</name></member>
      <member refid="classamrex_1_1MLLinOp_1a94066c5e255464485d5af0d1f174e1c2" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>m_hibc_orig</name></member>
      <member refid="classamrex_1_1MLLinOp_1a1422f7b22ae204247f5cdf20ab70e741" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>m_ixtype</name></member>
      <member refid="classamrex_1_1MLLinOp_1aac661e9e03991a16c7aca157ca2447b0" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>m_lobc</name></member>
      <member refid="classamrex_1_1MLLinOp_1aec9b82494ef69731d10e9b293b64fdd8" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>m_lobc_orig</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1af7504eedbd467f1237874cbc10dd6d39" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>m_maskvals</name></member>
      <member refid="classamrex_1_1MLLinOp_1aa53a765aea0ed0c4e7410d147380079f" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>m_needs_coarse_data_for_bc</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a5be36924b389fe28a9d9e8c08d8dd728" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>m_norm_fine_mask</name></member>
      <member refid="classamrex_1_1MLLinOp_1ad6bbf49c1bdb88256721471b22b4b044" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>m_num_amr_levels</name></member>
      <member refid="classamrex_1_1MLLinOp_1ababf1d5df3da022563dc90ee2c81ad75" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>m_num_mg_levels</name></member>
      <member refid="classamrex_1_1MLLinOp_1a614164d6c8e680ccb5ac8fb9cf1558ed" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>m_parent</name></member>
      <member refid="classamrex_1_1MLLinOp_1a2faeb23bc1e93e2b0cd693cb94a18d08" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>m_raii_comm</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a920175d896857c64b3544cd0f6c80288" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>m_robin_bcval</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a2ffd8d47358983d3c013b8012eeb1b8e" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>m_undrrelxr</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a4ea7cb30ede32f69a678fdb4af1180bb" prot="private" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>m_volinv</name></member>
      <member refid="classamrex_1_1MLLinOp_1af653a69980f01d30f178caede72b3843" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>make</name></member>
      <member refid="classamrex_1_1MLLinOp_1a8aebe104ce2f4892f32350c742d0ba36" prot="private" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>makeAgglomeratedDMap</name></member>
      <member refid="classamrex_1_1MLLinOp_1aafd84fa947e45627503861e5707201dd" prot="private" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>makeConsolidatedDMap</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac31926ba837b440475e0715a8fa4b87b" prot="protected" virt="virtual"><scope>amrex::MLCellLinOp</scope><name>makeFactory</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a3bbfff6e733b7883fffacffb363569aa" prot="public" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>makeNGrids</name></member>
      <member refid="classamrex_1_1MLLinOp_1a1ce310367908f9f10842859e92c5fd3d" prot="public" virt="virtual"><scope>amrex::MLCellLinOp</scope><name>makeNLinOp</name></member>
      <member refid="classamrex_1_1MLLinOp_1a0aa88871d9875a2436ed23ff882516e4" prot="private" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>makeSubCommunicator</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac516dba583aede117f89e339423f6114" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>maxorder</name></member>
      <member refid="classamrex_1_1MLLinOp_1a63aaab910ae5e9c6bd653804eb1c8148" prot="public" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>MFNormInf</name></member>
      <member refid="classamrex_1_1MLLinOp_1ae871a991ef83c33044a22db383c76dcd" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>mg_box_min_width</name></member>
      <member refid="classamrex_1_1MLLinOp_1aaa5616982aef27c68c5ae5544092c7db" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>mg_coarsen_ratio</name></member>
      <member refid="classamrex_1_1MLLinOp_1a2023b3b3881d5aff49c7a3b995a03993" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>mg_coarsen_ratio_vec</name></member>
      <member refid="classamrex_1_1MLLinOp_1a3ea5c2611e98234737157e36bae6c343" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>mg_domain_min_width</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1acc45e2dedbc266cc717ffc2239727486" prot="public" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>MLCellLinOp</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1acba5508d208bbb531ce2fe45042b4f6f" prot="public" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>MLCellLinOp</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a4bb69639aa4cb08113d6d8273fca03ae" prot="public" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>MLCellLinOp</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a7b344595276c27ed17dacb3ea1fb95aa" prot="public" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>MLCGSolver</name></member>
      <member refid="classamrex_1_1MLLinOp_1a2a75b94dc22faffec8a686f91fbfc9c1" prot="public" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>MLLinOp</name></member>
      <member refid="classamrex_1_1MLLinOp_1a7dd2c530e984f58e5a04cc415e9a539b" prot="public" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>MLLinOp</name></member>
      <member refid="classamrex_1_1MLLinOp_1a69fbc0ca95c18b6e954c53abb41c885c" prot="public" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>MLLinOp</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a1b4821805159b0595b6b7b1e0135b54f" prot="public" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>MLMG</name></member>
      <member refid="classamrex_1_1MLLinOp_1ab0e25c7ee0f264b36146fa77ee2bf1c4" prot="public" virt="virtual"><scope>amrex::MLCellLinOp</scope><name>name</name></member>
      <member refid="classamrex_1_1MLLinOp_1adcfe0a91f9b85388c17eee6172f02975" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>NAMRLevels</name></member>
      <member refid="classamrex_1_1MLLinOp_1a0c150481b635dccaf83cfff3d38b11c7" prot="public" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>needsCoarseDataForBC</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a0073d05770099d89c87a60e25ab3cc47" prot="public" virt="virtual"><scope>amrex::MLCellLinOp</scope><name>needsUpdate</name></member>
      <member refid="classamrex_1_1MLLinOp_1a257d196611ba0ab9d861dc5e0dc23502" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>NMGLevels</name></member>
      <member refid="classamrex_1_1MLLinOp_1a86207e36440100ba012296cb95b51713" prot="public" virt="virtual"><scope>amrex::MLCellLinOp</scope><name>normalize</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a87fd042ed7a3004a39f75564f24264ca" prot="public" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a4be43b4a29bd4f7092aa870804870ae2" prot="public" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLLinOp_1ad163e1fa25935bce528783de5adb6b1a" prot="public" virt="non-virtual" ambiguityscope="amrex::MLLinOp::"><scope>amrex::MLCellLinOp</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLLinOp_1aec2118e27e9938788a89f5dda28709f7" prot="public" virt="non-virtual" ambiguityscope="amrex::MLLinOp::"><scope>amrex::MLCellLinOp</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLLinOp_1aea26a4fe6d5a15d23a347501c6be1c71" prot="public" virt="virtual"><scope>amrex::MLCellLinOp</scope><name>postSolve</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a142ae4b8e4c68254e81516b5c8e00f4d" prot="public" virt="virtual"><scope>amrex::MLCellLinOp</scope><name>prepareForSolve</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1ae233eeb511516448492f38fe53fa9cd9" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>RealTuple</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1afc76c452e2704200c3b596ba1c1cb1a2" prot="public" virt="virtual"><scope>amrex::MLCellLinOp</scope><name>reflux</name></member>
      <member refid="classamrex_1_1MLLinOp_1a62f7495893309fa4f4805bbea9b59b3b" prot="private" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>remapNeighborhoods</name></member>
      <member refid="classamrex_1_1MLLinOp_1ae80c21d0f29e6878cf478dfeef8dd4f2" prot="protected" virt="virtual"><scope>amrex::MLCellLinOp</scope><name>resizeMultiGrid</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1aa95312f91d2baeeba018a231d162ad9a" prot="public" virt="virtual"><scope>amrex::MLCellLinOp</scope><name>restriction</name></member>
      <member refid="classamrex_1_1MLLinOp_1af32f494664d6666bdd94d92998f4b5f0" prot="public" virt="virtual"><scope>amrex::MLCellLinOp</scope><name>scaleRHS</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac161f1d53e925b82ba5defeb9b0efe70" prot="public" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>setCoarseFineBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac0c0882eb6092218dc09c5d60555ffed" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>setCoarseFineBCLocation</name></member>
      <member refid="classamrex_1_1MLLinOp_1aa034da35bd05e1fb93b8d876a9840ce3" prot="public" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>setDomainBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1a2402e6343df20087a51fb653a147987d" prot="public" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>setDomainBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1aeb7f6e87ab86b49cc97a248b4240d600" prot="public" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>setDomainBCLoc</name></member>
      <member refid="classamrex_1_1MLLinOp_1a8225491c35d71e1fb7edb6355f44ac5a" prot="public" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>setEnforceSingularSolvable</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a17b29b5c93f25181f34313b42b795a9e" prot="public" virt="virtual"><scope>amrex::MLCellLinOp</scope><name>setLevelBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1a45b72169ccf285c17f439c4e990c0f58" prot="public" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>setMaxOrder</name></member>
      <member refid="classamrex_1_1MLLinOp_1a4d96a0475759eef80d096851fdedd411" prot="public" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>setVerbose</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a240eadd9886e8df70f955fecb56bcdfe" prot="public" virt="virtual"><scope>amrex::MLCellLinOp</scope><name>smooth</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1ab18841d6aec78590a56eeaed61fe4345" prot="public" virt="virtual"><scope>amrex::MLCellLinOp</scope><name>solutionResidual</name></member>
      <member refid="classamrex_1_1MLLinOp_1a1f2821b4a51da49d862dae1e757bb8c3" prot="public" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>StateMode</name></member>
      <member refid="classamrex_1_1MLLinOp_1a638713cd5f8bf8cb703eca1ed94da5dc" prot="protected" virt="virtual"><scope>amrex::MLCellLinOp</scope><name>supportInhomogNeumannBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1a9d05943073d4f01c9a6d03c2ec9f0602" prot="public" virt="virtual"><scope>amrex::MLCellLinOp</scope><name>supportNSolve</name></member>
      <member refid="classamrex_1_1MLLinOp_1a01c4cbbbf82530a8d3523d07ad3a9e9f" prot="protected" virt="virtual"><scope>amrex::MLCellLinOp</scope><name>supportRobinBC</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a4ee573102053163e673153f3334153fe" prot="public" virt="virtual"><scope>amrex::MLCellLinOp</scope><name>unapplyMetricTerm</name></member>
      <member refid="classamrex_1_1MLLinOp_1a806af8f6ea146fdf513e1cc82305c822" prot="public" virt="virtual"><scope>amrex::MLCellLinOp</scope><name>unimposeNeumannBC</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a6de98ea7f86803972368acd05180431d" prot="public" virt="virtual"><scope>amrex::MLCellLinOp</scope><name>update</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a73212ed387925f27b0ebeaed21e4a00a" prot="public" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>updateCorBC</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1aec26fa3ea4e35bd1a02b8972fc392493" prot="public" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>updateSolBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1a0815357130e78962e01abdaba2b09c21" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOp</scope><name>verbose</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a2d3d01dcb4fddb4f2df39484b6f58f97" prot="public" virt="virtual"><scope>amrex::MLCellLinOp</scope><name>xdoty</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a4d46c85e7e43e5231e19607a868d3d0f" prot="public" virt="virtual"><scope>amrex::MLCellLinOp</scope><name>~MLCellLinOp</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac6793724d6b5c98581d42d9233fda1bd" prot="public" virt="virtual"><scope>amrex::MLCellLinOp</scope><name>~MLLinOp</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
