<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classamrex_1_1MLCellLinOpT" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>amrex::MLCellLinOpT</compoundname>
    <basecompoundref refid="classamrex_1_1MLLinOpT" prot="public" virt="non-virtual">amrex::MLLinOpT&lt; MF &gt;</basecompoundref>
    <derivedcompoundref refid="classamrex_1_1MLCellABecLapT" prot="public" virt="non-virtual">amrex::MLCellABecLapT&lt; MF &gt;</derivedcompoundref>
    <includes refid="AMReX__MLCellLinOp_8H" local="no">AMReX_MLCellLinOp.H</includes>
    <innerclass refid="structamrex_1_1MLCellLinOpT_1_1BCTL" prot="public">amrex::MLCellLinOpT::BCTL</innerclass>
    <innerclass refid="classamrex_1_1MLCellLinOpT_1_1BndryCondLoc" prot="protected">amrex::MLCellLinOpT::BndryCondLoc</innerclass>
    <templateparamlist>
      <param>
        <type>typename MF</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classamrex_1_1MLCellLinOpT_1a0bbec26a1602f0b6e13a2a77a105416b" prot="public" static="no">
        <type>typename MF::fab_type</type>
        <definition>using amrex::MLCellLinOpT&lt; MF &gt;::FAB =  typename MF::fab_type</definition>
        <argsstring></argsstring>
        <name>FAB</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="24" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1MLCellLinOpT_1a4cd7bb9cadbccdb52688ef33ddfd8d5c" prot="public" static="no">
        <type>typename MF::value_type</type>
        <definition>using amrex::MLCellLinOpT&lt; MF &gt;::RT =  typename MF::value_type</definition>
        <argsstring></argsstring>
        <name>RT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="25" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1MLCellLinOpT_1a507cfffa6d7098331e08cc35e7c19e18" prot="public" static="no">
        <type>LinOpBCType</type>
        <definition>using amrex::MLCellLinOpT&lt; MF &gt;::BCType =  LinOpBCType</definition>
        <argsstring></argsstring>
        <name>BCType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="27" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1MLCellLinOpT_1a5f24e3a713313778626619bfd96ebc96" prot="public" static="no">
        <type>typename <ref refid="classamrex_1_1MLLinOpT" kindref="compound">MLLinOpT</ref>&lt; MF &gt;::<ref refid="classamrex_1_1MLCellLinOpT_1a5f24e3a713313778626619bfd96ebc96" kindref="member">BCMode</ref></type>
        <definition>using amrex::MLCellLinOpT&lt; MF &gt;::BCMode =  typename MLLinOpT&lt;MF&gt;::BCMode</definition>
        <argsstring></argsstring>
        <name>BCMode</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="28" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1MLCellLinOpT_1afaa558995ac0e6dace1b2539572250a7" prot="public" static="no">
        <type>typename <ref refid="classamrex_1_1MLLinOpT" kindref="compound">MLLinOpT</ref>&lt; MF &gt;::<ref refid="classamrex_1_1MLCellLinOpT_1afaa558995ac0e6dace1b2539572250a7" kindref="member">StateMode</ref></type>
        <definition>using amrex::MLCellLinOpT&lt; MF &gt;::StateMode =  typename MLLinOpT&lt;MF&gt;::StateMode</definition>
        <argsstring></argsstring>
        <name>StateMode</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="29" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1MLCellLinOpT_1ac93e5fc5cf3373e6711f1328b051b997" prot="public" static="no">
        <type>typename <ref refid="classamrex_1_1MLLinOpT" kindref="compound">MLLinOpT</ref>&lt; MF &gt;::<ref refid="classamrex_1_1MLCellLinOpT_1ac93e5fc5cf3373e6711f1328b051b997" kindref="member">Location</ref></type>
        <definition>using amrex::MLCellLinOpT&lt; MF &gt;::Location =  typename MLLinOpT&lt;MF&gt;::Location</definition>
        <argsstring></argsstring>
        <name>Location</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="30" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" bodystart="30" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-type">
      <memberdef kind="typedef" id="classamrex_1_1MLCellLinOpT_1a65abf3895113354dbd34041b96dfb3ba" prot="protected" static="no">
        <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MLCellLinOpT_1a4cd7bb9cadbccdb52688ef33ddfd8d5c" kindref="member">RT</ref>, 2 *<ref refid="AMReX__SPACE_8H_1af66ac7d7c04dad9fd54778fe5a4e816f" kindref="member">BL_SPACEDIM</ref> &gt;</type>
        <definition>using amrex::MLCellLinOpT&lt; MF &gt;::RealTuple =  Array&lt;RT,2*BL_SPACEDIM&gt;</definition>
        <argsstring></argsstring>
        <name>RealTuple</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="157" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" bodystart="157" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1MLCellLinOpT_1a6ce4d3fd41e76507b017ff826a52c62e" prot="protected" static="no">
        <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1BoundCond" kindref="compound">BoundCond</ref>, 2 *<ref refid="AMReX__SPACE_8H_1af66ac7d7c04dad9fd54778fe5a4e816f" kindref="member">BL_SPACEDIM</ref> &gt;</type>
        <definition>using amrex::MLCellLinOpT&lt; MF &gt;::BCTuple =  Array&lt;BoundCond,2*BL_SPACEDIM&gt;</definition>
        <argsstring></argsstring>
        <name>BCTuple</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="158" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" bodystart="158" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classamrex_1_1MLCellLinOpT_1a95a0dd3f6700b3da5b020a66ef726dff" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::unique_ptr&lt; MF &gt; &gt;</type>
        <definition>Vector&lt;std::unique_ptr&lt;MF&gt; &gt; amrex::MLCellLinOpT&lt; MF &gt;::m_robin_bcval</definition>
        <argsstring></argsstring>
        <name>m_robin_bcval</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="138" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" bodystart="138" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classamrex_1_1MLCellLinOpT_1ada8bf2b1964f2023282e23ac54a948f4" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::MLCellLinOpT&lt; MF &gt;::m_has_metric_term</definition>
        <argsstring></argsstring>
        <name>m_has_metric_term</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="146" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" bodystart="146" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLCellLinOpT_1a2b8a625f55f16b9c5b620a82021f17f4" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::unique_ptr&lt; <ref refid="classamrex_1_1MLMGBndryT" kindref="compound">MLMGBndryT</ref>&lt; MF &gt; &gt; &gt;</type>
        <definition>Vector&lt;std::unique_ptr&lt;MLMGBndryT&lt;MF&gt; &gt; &gt; amrex::MLCellLinOpT&lt; MF &gt;::m_bndry_sol</definition>
        <argsstring></argsstring>
        <name>m_bndry_sol</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="148" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" bodystart="148" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLCellLinOpT_1adf51879b81fbd24f9ccb7b9f0142d63b" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::unique_ptr&lt; <ref refid="classamrex_1_1BndryRegisterT" kindref="compound">BndryRegisterT</ref>&lt; MF &gt; &gt; &gt;</type>
        <definition>Vector&lt;std::unique_ptr&lt;BndryRegisterT&lt;MF&gt; &gt; &gt; amrex::MLCellLinOpT&lt; MF &gt;::m_crse_sol_br</definition>
        <argsstring></argsstring>
        <name>m_crse_sol_br</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="149" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" bodystart="149" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLCellLinOpT_1ac667791f6b37a42e55ef25267bc78fa9" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::unique_ptr&lt; <ref refid="classamrex_1_1MLMGBndryT" kindref="compound">MLMGBndryT</ref>&lt; MF &gt; &gt; &gt;</type>
        <definition>Vector&lt;std::unique_ptr&lt;MLMGBndryT&lt;MF&gt; &gt; &gt; amrex::MLCellLinOpT&lt; MF &gt;::m_bndry_cor</definition>
        <argsstring></argsstring>
        <name>m_bndry_cor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="151" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" bodystart="151" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLCellLinOpT_1a892cce2e429f77cee7360f2859ceda4d" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::unique_ptr&lt; <ref refid="classamrex_1_1BndryRegisterT" kindref="compound">BndryRegisterT</ref>&lt; MF &gt; &gt; &gt;</type>
        <definition>Vector&lt;std::unique_ptr&lt;BndryRegisterT&lt;MF&gt; &gt; &gt; amrex::MLCellLinOpT&lt; MF &gt;::m_crse_cor_br</definition>
        <argsstring></argsstring>
        <name>m_crse_cor_br</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="152" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" bodystart="152" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLCellLinOpT_1a8ea2fb547b5b9b37d88880948073e00c" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::unique_ptr&lt; <ref refid="classamrex_1_1MLCellLinOpT_1_1BndryCondLoc" kindref="compound">BndryCondLoc</ref> &gt; &gt; &gt;</type>
        <definition>Vector&lt;Vector&lt;std::unique_ptr&lt;BndryCondLoc&gt; &gt; &gt; amrex::MLCellLinOpT&lt; MF &gt;::m_bcondloc</definition>
        <argsstring></argsstring>
        <name>m_bcondloc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="194" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" bodystart="194" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLCellLinOpT_1ab50c53ea7ff9c53bf37ac816e0663406" prot="protected" static="no" mutable="yes">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BndryRegisterT" kindref="compound">BndryRegisterT</ref>&lt; MF &gt; &gt; &gt;</type>
        <definition>Vector&lt;Vector&lt;BndryRegisterT&lt;MF&gt; &gt; &gt; amrex::MLCellLinOpT&lt; MF &gt;::m_undrrelxr</definition>
        <argsstring></argsstring>
        <name>m_undrrelxr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="197" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" bodystart="197" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLCellLinOpT_1a9c470f145301b98fe0938ac6241284eb" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiMask" kindref="compound">MultiMask</ref>, 2 *AMREX_SPACEDIM &gt; &gt; &gt;</type>
        <definition>Vector&lt;Vector&lt;Array&lt;MultiMask,2*AMREX_SPACEDIM&gt; &gt; &gt; amrex::MLCellLinOpT&lt; MF &gt;::m_maskvals</definition>
        <argsstring></argsstring>
        <name>m_maskvals</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="200" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" bodystart="200" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLCellLinOpT_1af29ed070015666e58d890685cb491900" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::unique_ptr&lt; <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &gt; &gt;</type>
        <definition>Vector&lt;std::unique_ptr&lt;iMultiFab&gt; &gt; amrex::MLCellLinOpT&lt; MF &gt;::m_norm_fine_mask</definition>
        <argsstring></argsstring>
        <name>m_norm_fine_mask</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="202" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" bodystart="202" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLCellLinOpT_1a22cdf5d6b191ab3c883b7167e9f94ebe" prot="protected" static="no" mutable="yes">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1YAFluxRegisterT" kindref="compound">YAFluxRegisterT</ref>&lt; MF &gt; &gt;</type>
        <definition>Vector&lt;YAFluxRegisterT&lt;MF&gt; &gt; amrex::MLCellLinOpT&lt; MF &gt;::m_fluxreg</definition>
        <argsstring></argsstring>
        <name>m_fluxreg</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="204" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" bodystart="204" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLCellLinOpT_1add77293caacd09584aa8b5f0fd7f923a" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::MLCellLinOpT&lt; MF &gt;::m_use_gauss_seidel</definition>
        <argsstring></argsstring>
        <name>m_use_gauss_seidel</name>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="206" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" bodystart="206" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1MLCellLinOpT_1ad73d9eed28e8d9d32cf54327e21c5225" prot="private" static="no" mutable="yes">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MLCellLinOpT_1a4cd7bb9cadbccdb52688ef33ddfd8d5c" kindref="member">RT</ref> &gt; &gt;</type>
        <definition>Vector&lt;Vector&lt;RT&gt; &gt; amrex::MLCellLinOpT&lt; MF &gt;::m_volinv</definition>
        <argsstring></argsstring>
        <name>m_volinv</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="214" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" bodystart="214" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLCellLinOpT_1ab5b6c73fee0004ac732f74350cc72bab" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::MLCellLinOpT&lt; MF &gt;::m_interpbndry_halfwidth</definition>
        <argsstring></argsstring>
        <name>m_interpbndry_halfwidth</name>
        <initializer>= 2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="216" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" bodystart="216" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1MLCellLinOpT_1ab6bc4d82971ae75fc206df8d00d15ef6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MLCellLinOpT&lt; MF &gt;::MLCellLinOpT</definition>
        <argsstring>()</argsstring>
        <name>MLCellLinOpT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="32" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" bodystart="348" bodyend="351"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellLinOpT_1aaa89b0307d84d1687ece7880403c5689" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MLCellLinOpT&lt; MF &gt;::~MLCellLinOpT</definition>
        <argsstring>() override=default</argsstring>
        <name>~MLCellLinOpT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="33" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellLinOpT_1a54558ff60dc7b62ac803e8dd8a5c1816" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MLCellLinOpT&lt; MF &gt;::MLCellLinOpT</definition>
        <argsstring>(const MLCellLinOpT&lt; MF &gt; &amp;)=delete</argsstring>
        <name>MLCellLinOpT</name>
        <param>
          <type>const <ref refid="classamrex_1_1MLCellLinOpT" kindref="compound">MLCellLinOpT</ref>&lt; MF &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="35" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellLinOpT_1ab75b6f4249c1408041b529732b179d32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MLCellLinOpT&lt; MF &gt;::MLCellLinOpT</definition>
        <argsstring>(MLCellLinOpT&lt; MF &gt; &amp;&amp;)=delete</argsstring>
        <name>MLCellLinOpT</name>
        <param>
          <type><ref refid="classamrex_1_1MLCellLinOpT" kindref="compound">MLCellLinOpT</ref>&lt; MF &gt; &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="36" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellLinOpT_1abcbc29c6deeba6419b5cd5a67b553cd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1MLCellLinOpT" kindref="compound">MLCellLinOpT</ref>&lt; MF &gt; &amp;</type>
        <definition>MLCellLinOpT&lt;MF&gt;&amp; amrex::MLCellLinOpT&lt; MF &gt;::operator=</definition>
        <argsstring>(const MLCellLinOpT&lt; MF &gt; &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classamrex_1_1MLCellLinOpT" kindref="compound">MLCellLinOpT</ref>&lt; MF &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="37" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellLinOpT_1a36d76fae0e448ac86582b957eb7b5174" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1MLCellLinOpT" kindref="compound">MLCellLinOpT</ref>&lt; MF &gt; &amp;</type>
        <definition>MLCellLinOpT&lt;MF&gt;&amp; amrex::MLCellLinOpT&lt; MF &gt;::operator=</definition>
        <argsstring>(MLCellLinOpT&lt; MF &gt; &amp;&amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1MLCellLinOpT" kindref="compound">MLCellLinOpT</ref>&lt; MF &gt; &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="38" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellLinOpT_1aa6df034e49814000ac0304a3579890b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLCellLinOpT&lt; MF &gt;::define</definition>
        <argsstring>(const Vector&lt; Geometry &gt; &amp;a_geom, const Vector&lt; BoxArray &gt; &amp;a_grids, const Vector&lt; DistributionMapping &gt; &amp;a_dmap, const LPInfo &amp;a_info=LPInfo(), const Vector&lt; FabFactory&lt; FAB &gt; const * &gt; &amp;a_factory={})</argsstring>
        <name>define</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>a_geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &gt; &amp;</type>
          <declname>a_grids</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt; &amp;</type>
          <declname>a_dmap</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1LPInfo" kindref="compound">LPInfo</ref> &amp;</type>
          <declname>a_info</declname>
          <defval><ref refid="structamrex_1_1LPInfo" kindref="compound">LPInfo</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; <ref refid="classamrex_1_1MLCellLinOpT_1a0bbec26a1602f0b6e13a2a77a105416b" kindref="member">FAB</ref> &gt; const * &gt; &amp;</type>
          <declname>a_factory</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="40" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" bodystart="355" bodyend="364"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellLinOpT_1afaf162a4471fc9b3a7121d9579fea518" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLCellLinOpT&lt; MF &gt;::setLevelBC</definition>
        <argsstring>(int amrlev, const MF *levelbcdata, const MF *robinbc_a=nullptr, const MF *robinbc_b=nullptr, const MF *robinbc_f=nullptr) final</argsstring>
        <name>setLevelBC</name>
        <reimplements refid="classamrex_1_1MLLinOpT_1a1ca9d659068ffdf4e8d78d035aa9450c">setLevelBC</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type>const MF *</type>
        </param>
        <param>
          <type>const MF *</type>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const MF *</type>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const MF *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Set boundary conditions for given level. For cell-centered solves only. </para>
        </briefdescription>
        <detaileddescription>
<para>This must be called for each level. Argument <computeroutput>levelbcdata</computeroutput> is used to supply Dirichlet or Neumann bc at the physical domain; if those data are homogeneous we can pass nullptr instead of levelbcdata. Regardless, this function must be called. If used, the <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> levelbcdata must have one ghost cell. Only the data outside the physical domain will be used. It is assumed that the data in those ghost cells outside the domain live exactly on the face of the physical domain. Argument <computeroutput>amrlev</computeroutput> is relative level such that the lowest to the solver is always 0. The optional arguments robinbc_[a|b|f] provide Robin boundary condition <computeroutput>a*phi + b*dphi/dn = f</computeroutput>. Note that <computeroutput>d./dn</computeroutput> is <computeroutput>d./dx</computeroutput> at the upper boundary and <computeroutput>-d./dx</computeroutput> at the lower boundary, for Robin BC. However, for inhomogeneous Neumann BC, the value in leveldata is assumed to be <computeroutput>d./dx</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="46" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" bodystart="513" bodyend="642"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellLinOpT_1afb2f8218dcad4df69508e7ea795c2aaf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool amrex::MLCellLinOpT&lt; MF &gt;::needsUpdate</definition>
        <argsstring>() const override</argsstring>
        <name>needsUpdate</name>
        <reimplements refid="classamrex_1_1MLLinOpT_1a1aeab1e2fe2f589ecdc3b9751208a22a">needsUpdate</reimplements>
        <reimplementedby refid="classamrex_1_1MLEBTensorOp_1a28c6954110a23fa141f9ab6420086999">needsUpdate</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLTensorOp_1a8fb6d1048cec22ab43f69b7d91ccce1d">needsUpdate</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLEBABecLap_1a95ea231a7ff288e48c9209aa44210bcd">needsUpdate</reimplementedby>
        <briefdescription>
<para>Does it need update if it&apos;s reused? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="53" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" bodystart="53" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellLinOpT_1a4482485699afcfc64adb1f8179714636" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLCellLinOpT&lt; MF &gt;::update</definition>
        <argsstring>() override</argsstring>
        <name>update</name>
        <reimplements refid="classamrex_1_1MLLinOpT_1a81443deada65588ba7a71e191def4aa0">update</reimplements>
        <reimplementedby refid="classamrex_1_1MLEBTensorOp_1aa4a38baa43b1454a82381cbb0b8ff253">update</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLTensorOp_1a099b8059c7848bf601ca1cc33426ce24">update</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLEBABecLap_1ad6b4be6cef1783fdb223e5aa7eb50343">update</reimplementedby>
        <briefdescription>
<para>Update for reuse. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="56" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" bodystart="646" bodyend="649"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellLinOpT_1a910678e8eb5a82aaa5550910cb4ac3fb" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLCellLinOpT&lt; MF &gt;::setGaussSeidel</definition>
        <argsstring>(bool flag) noexcept</argsstring>
        <name>setGaussSeidel</name>
        <param>
          <type>bool</type>
          <declname>flag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="58" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" bodystart="58" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellLinOpT_1a69fbf6add2bd954f6fb9a17f89adebf8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool amrex::MLCellLinOpT&lt; MF &gt;::isCrossStencil</definition>
        <argsstring>() const</argsstring>
        <name>isCrossStencil</name>
        <reimplementedby refid="classamrex_1_1MLEBTensorOp_1a4ea0760ca062eb3e4cf1bda5f3993631">isCrossStencil</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLTensorOp_1ad1999e903e0c7cf6a9559427f6dddb89">isCrossStencil</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLEBABecLap_1a083ceaee929d2e3520ddd5a78841726a">isCrossStencil</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="60" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" bodystart="60" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellLinOpT_1aae0589f189ee2d39dadca3a308e3df9b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool amrex::MLCellLinOpT&lt; MF &gt;::isTensorOp</definition>
        <argsstring>() const</argsstring>
        <name>isTensorOp</name>
        <reimplementedby refid="classamrex_1_1MLEBTensorOp_1aeeeea035327ccd896c7af7beb6093c8a">isTensorOp</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLTensorOp_1a08aefe93ce148879b387ed11f9da0f94">isTensorOp</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="61" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" bodystart="61" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellLinOpT_1a28d4c00dc8448c2c8f10dc519a42ae0f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLCellLinOpT&lt; MF &gt;::updateSolBC</definition>
        <argsstring>(int amrlev, const MF &amp;crse_bcdata) const</argsstring>
        <name>updateSolBC</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>const MF &amp;</type>
          <declname>crse_bcdata</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="63" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" bodystart="653" bodyend="665"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellLinOpT_1a6bb9614b2635f9935e7cb8816074a2ef" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLCellLinOpT&lt; MF &gt;::updateCorBC</definition>
        <argsstring>(int amrlev, const MF &amp;crse_bcdata) const</argsstring>
        <name>updateCorBC</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>const MF &amp;</type>
          <declname>crse_bcdata</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="64" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" bodystart="669" bodyend="680"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellLinOpT_1a251a2f1de9fea9f0d0230e04b19c078e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLCellLinOpT&lt; MF &gt;::applyBC</definition>
        <argsstring>(int amrlev, int mglev, MF &amp;in, BCMode bc_mode, StateMode s_mode, const MLMGBndryT&lt; MF &gt; *bndry=nullptr, bool skip_fillboundary=false) const</argsstring>
        <name>applyBC</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev</declname>
        </param>
        <param>
          <type>MF &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLCellLinOpT_1a5f24e3a713313778626619bfd96ebc96" kindref="member">BCMode</ref></type>
          <declname>bc_mode</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLCellLinOpT_1afaa558995ac0e6dace1b2539572250a7" kindref="member">StateMode</ref></type>
          <declname>s_mode</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MLMGBndryT" kindref="compound">MLMGBndryT</ref>&lt; MF &gt; *</type>
          <declname>bndry</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>skip_fillboundary</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="66" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" bodystart="684" bodyend="893"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellLinOpT_1a1574dd8857314d9658c28c26adc6ce12" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref></type>
        <definition>BoxArray amrex::MLCellLinOpT&lt; MF &gt;::makeNGrids</definition>
        <argsstring>(int grid_size) const</argsstring>
        <name>makeNGrids</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>grid_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="69" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" bodystart="897" bodyend="943"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellLinOpT_1ab4713a678d7c2ac9e1a9c5b027f965c5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLCellLinOpT&lt; MF &gt;::restriction</definition>
        <argsstring>(int, int, MF &amp;crse, MF &amp;fine) const override</argsstring>
        <name>restriction</name>
        <reimplements refid="classamrex_1_1MLLinOpT_1aee3f3df0d83ef41c04eb1eef68f41797">restriction</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cmglev</declname>
        </param>
        <param>
          <type>MF &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type>MF &amp;</type>
          <declname>fine</declname>
        </param>
        <briefdescription>
<para>Restriction onto coarse MG level. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>amrlev</parametername>
</parameternamelist>
<parameterdescription>
<para>AMR level </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cmglev</parametername>
</parameternamelist>
<parameterdescription>
<para>coarse MG level </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>crse</parametername>
</parameternamelist>
<parameterdescription>
<para>coarse data. This is the output. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fine</parametername>
</parameternamelist>
<parameterdescription>
<para>fine data. This is the input. Some operators might need to fill ghost cells. This is why it&apos;s not a const reference. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="71" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" bodystart="947" bodyend="952"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellLinOpT_1a7a7909cddc98ec2abe949ee2f043e817" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLCellLinOpT&lt; MF &gt;::interpolation</definition>
        <argsstring>(int amrlev, int fmglev, MF &amp;fine, const MF &amp;crse) const override</argsstring>
        <name>interpolation</name>
        <reimplements refid="classamrex_1_1MLLinOpT_1a1c8739b0c8b387f82d1c4cb3ba3ea509">interpolation</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fmglev</declname>
        </param>
        <param>
          <type>MF &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type>const MF &amp;</type>
          <declname>crse</declname>
        </param>
        <briefdescription>
<para>Add interpolated coarse MG level data to fine MG level data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>amrlev</parametername>
</parameternamelist>
<parameterdescription>
<para>AMR level </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fmglev</parametername>
</parameternamelist>
<parameterdescription>
<para>fine MG level </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>crse</parametername>
</parameternamelist>
<parameterdescription>
<para>coarse data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fine</parametername>
</parameternamelist>
<parameterdescription>
<para>fine data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="73" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" bodystart="956" bodyend="999"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellLinOpT_1ac40a7cc1f424156f36d3d8b2f0254ae7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLCellLinOpT&lt; MF &gt;::interpAssign</definition>
        <argsstring>(int amrlev, int fmglev, MF &amp;fine, MF &amp;crse) const override</argsstring>
        <name>interpAssign</name>
        <reimplements refid="classamrex_1_1MLLinOpT_1a2f7c32a95d9e511ccee3f3f256341141">interpAssign</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fmglev</declname>
        </param>
        <param>
          <type>MF &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type>MF &amp;</type>
          <declname>crse</declname>
        </param>
        <briefdescription>
<para>Overwrite fine MG level data with interpolated coarse data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>amrlev</parametername>
</parameternamelist>
<parameterdescription>
<para>AMR level </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fmglev</parametername>
</parameternamelist>
<parameterdescription>
<para>fine MG level </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fine</parametername>
</parameternamelist>
<parameterdescription>
<para>fine MG level data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>crse</parametername>
</parameternamelist>
<parameterdescription>
<para>coarse MG level data </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="75" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" bodystart="1003" bodyend="1092"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellLinOpT_1ae4108ba43d2b66494dd56578879a29a9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLCellLinOpT&lt; MF &gt;::interpolationAmr</definition>
        <argsstring>(int famrlev, MF &amp;fine, const MF &amp;crse, IntVect const &amp;nghost) const override</argsstring>
        <name>interpolationAmr</name>
        <reimplements refid="classamrex_1_1MLLinOpT_1add47eb9821c3b08db62d7f0f68554a4f">interpolationAmr</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>famrlev</declname>
        </param>
        <param>
          <type>MF &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type>const MF &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
<para>Interpolation between AMR levels. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>famrlev</parametername>
</parameternamelist>
<parameterdescription>
<para>fine AMR level </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fine</parametername>
</parameternamelist>
<parameterdescription>
<para>fine level data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>crse</parametername>
</parameternamelist>
<parameterdescription>
<para>coarse level data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nghost</parametername>
</parameternamelist>
<parameterdescription>
<para>number of ghost cells </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="77" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" bodystart="1096" bodyend="1181"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellLinOpT_1a116deee661b635f1872ac7eded5f28a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLCellLinOpT&lt; MF &gt;::averageDownSolutionRHS</definition>
        <argsstring>(int camrlev, MF &amp;crse_sol, MF &amp;crse_rhs, const MF &amp;fine_sol, const MF &amp;fine_rhs) override</argsstring>
        <name>averageDownSolutionRHS</name>
        <reimplements refid="classamrex_1_1MLLinOpT_1ac933a7f88c4daa600f3737080c18a09e">averageDownSolutionRHS</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>camrlev</declname>
        </param>
        <param>
          <type>MF &amp;</type>
          <declname>crse_sol</declname>
        </param>
        <param>
          <type>MF &amp;</type>
          <declname>crse_rhs</declname>
        </param>
        <param>
          <type>const MF &amp;</type>
          <declname>fine_sol</declname>
        </param>
        <param>
          <type>const MF &amp;</type>
          <declname>fine_rhs</declname>
        </param>
        <briefdescription>
<para>Average-down data from fine AMR level to coarse AMR level. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>camrlev</parametername>
</parameternamelist>
<parameterdescription>
<para>coarse AMR level </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>crse_sol</parametername>
</parameternamelist>
<parameterdescription>
<para>solutoin on coarse AMR level </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>crse_rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>RHS on coarse AMR level </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fine_sol</parametername>
</parameternamelist>
<parameterdescription>
<para>solution on fine AMR level </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fine_rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>RHS on fine AMR level </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="80" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" bodystart="1185" bodyend="1192"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellLinOpT_1a8755fe1a7a09db77e7d810dd9dfdb107" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLCellLinOpT&lt; MF &gt;::apply</definition>
        <argsstring>(int amrlev, int mglev, MF &amp;out, MF &amp;in, BCMode bc_mode, StateMode s_mode, const MLMGBndryT&lt; MF &gt; *bndry=nullptr) const override</argsstring>
        <name>apply</name>
        <reimplements refid="classamrex_1_1MLLinOpT_1a7aea888ca18e54df62e7dffc8378d872">apply</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev</declname>
        </param>
        <param>
          <type>MF &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>MF &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLCellLinOpT_1a5f24e3a713313778626619bfd96ebc96" kindref="member">BCMode</ref></type>
          <declname>bc_mode</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLCellLinOpT_1afaa558995ac0e6dace1b2539572250a7" kindref="member">StateMode</ref></type>
          <declname>s_mode</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MLMGBndryT" kindref="compound">MLMGBndryT</ref>&lt; MF &gt; *</type>
          <declname>bndry</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Apply the linear operator, out = L(in) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>amrlev</parametername>
</parameternamelist>
<parameterdescription>
<para>AMR level </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mglev</parametername>
</parameternamelist>
<parameterdescription>
<para>MG level </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>output </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para>input </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bc_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Is the BC homogeneous or inhomogeneous? </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Are data data solution or correction? </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bndry</parametername>
</parameternamelist>
<parameterdescription>
<para>object for handling coarse/fine and physical boundaries </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="83" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" bodystart="1196" bodyend="1202"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellLinOpT_1a04486888c630dc3e4a5258a0e174345c" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLCellLinOpT&lt; MF &gt;::smooth</definition>
        <argsstring>(int amrlev, int mglev, MF &amp;sol, const MF &amp;rhs, bool skip_fillboundary=false) const final</argsstring>
        <name>smooth</name>
        <reimplements refid="classamrex_1_1MLLinOpT_1a03189718c2f8cd40c34158bb4ddf6120">smooth</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev</declname>
        </param>
        <param>
          <type>MF &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>const MF &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>skip_fillboundary</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Smooth. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>amrlev</parametername>
</parameternamelist>
<parameterdescription>
<para>AMR level </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mglev</parametername>
</parameternamelist>
<parameterdescription>
<para>MG level </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sol</parametername>
</parameternamelist>
<parameterdescription>
<para>unknowns </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>RHS </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>skip_fillboundary</parametername>
</parameternamelist>
<parameterdescription>
<para>flag controlling whether ghost cell filling can be skipped. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="85" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" bodystart="1206" bodyend="1217"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellLinOpT_1ad6684ea6b055170aad353ee9a4dcc316" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLCellLinOpT&lt; MF &gt;::solutionResidual</definition>
        <argsstring>(int amrlev, MF &amp;resid, MF &amp;x, const MF &amp;b, const MF *crse_bcdata=nullptr) override</argsstring>
        <name>solutionResidual</name>
        <reimplements refid="classamrex_1_1MLLinOpT_1a4c4d498e615acd98b90da20eaee2a529">solutionResidual</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>MF &amp;</type>
          <declname>resid</declname>
        </param>
        <param>
          <type>MF &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const MF &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const MF *</type>
          <declname>crse_bcdata</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Compute residual for solution. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>amrlev</parametername>
</parameternamelist>
<parameterdescription>
<para>AMR level </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>resid</parametername>
</parameternamelist>
<parameterdescription>
<para>residual </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>solution </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>RHS </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>crse_bc_data</parametername>
</parameternamelist>
<parameterdescription>
<para>optional argument providing BC at coarse/fine boundary. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="88" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" bodystart="1221" bodyend="1235"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellLinOpT_1acfbbd0bc16c6143b970276cb3db30a03" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLCellLinOpT&lt; MF &gt;::prepareForFluxes</definition>
        <argsstring>(int amrlev, const MF *crse_bcdata=nullptr) override</argsstring>
        <name>prepareForFluxes</name>
        <reimplements refid="classamrex_1_1MLLinOpT_1ae101fd3f33bbd0f0085d668b196cb527">prepareForFluxes</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>const MF *</type>
          <declname>crse_bcdata</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="91" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" bodystart="1239" bodyend="1244"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellLinOpT_1a51480d2022ad9346d6eb11f3cbfd631a" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLCellLinOpT&lt; MF &gt;::correctionResidual</definition>
        <argsstring>(int amrlev, int mglev, MF &amp;resid, MF &amp;x, const MF &amp;b, BCMode bc_mode, const MF *crse_bcdata=nullptr) final</argsstring>
        <name>correctionResidual</name>
        <reimplements refid="classamrex_1_1MLLinOpT_1a6f18465de0228f8ec4609e9e45367e5d">correctionResidual</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev</declname>
        </param>
        <param>
          <type>MF &amp;</type>
          <declname>resid</declname>
        </param>
        <param>
          <type>MF &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const MF &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLCellLinOpT_1a5f24e3a713313778626619bfd96ebc96" kindref="member">BCMode</ref></type>
          <declname>bc_mode</declname>
        </param>
        <param>
          <type>const MF *</type>
          <declname>crse_bcdata</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Compute residual for the residual-correction form, resid = b - L(x) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>amrlev</parametername>
</parameternamelist>
<parameterdescription>
<para>AMR level </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mglev</parametername>
</parameternamelist>
<parameterdescription>
<para>MG level </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>resid</parametername>
</parameternamelist>
<parameterdescription>
<para>residual </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>unknown in the residual-correction form </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>RHS in the residual-correction form </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bc_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Is the BC homogeneous or inhomogeneous? </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>crse_bc_data</parametername>
</parameternamelist>
<parameterdescription>
<para>optional argument providing BC at coarse/fine boundary. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="93" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" bodystart="1248" bodyend="1270"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellLinOpT_1a35158f8a8bd840468c4dedb08d6726ff" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLCellLinOpT&lt; MF &gt;::reflux</definition>
        <argsstring>(int crse_amrlev, MF &amp;res, const MF &amp;crse_sol, const MF &amp;, MF &amp;, MF &amp;fine_sol, const MF &amp;) const final</argsstring>
        <name>reflux</name>
        <reimplements refid="classamrex_1_1MLLinOpT_1a8b1c71665134af1b1ceccc4d17df2615">reflux</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>crse_amrlev</declname>
        </param>
        <param>
          <type>MF &amp;</type>
          <declname>res</declname>
        </param>
        <param>
          <type>const MF &amp;</type>
          <declname>crse_sol</declname>
        </param>
        <param>
          <type>const MF &amp;</type>
          <declname>crse_rhs</declname>
        </param>
        <param>
          <type>MF &amp;</type>
          <declname>fine_res</declname>
        </param>
        <param>
          <type>MF &amp;</type>
          <declname>fine_sol</declname>
        </param>
        <param>
          <type>const MF &amp;</type>
          <declname>fine_rhs</declname>
        </param>
        <briefdescription>
<para>Reflux at AMR coarse/fine boundary. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>crse_amrlev</parametername>
</parameternamelist>
<parameterdescription>
<para>coarse AMR level </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>coarse level residual </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>crse_sol</parametername>
</parameternamelist>
<parameterdescription>
<para>coarse level solution </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>crse_rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>coarse level RHS </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fine_res</parametername>
</parameternamelist>
<parameterdescription>
<para>fine level residual </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fine_sol</parametername>
</parameternamelist>
<parameterdescription>
<para>fine level solution </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fine_rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>fine level RHS </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="97" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" bodystart="1274" bodyend="1344"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellLinOpT_1ae7f32e1b953ea4ef5643501e91560d32" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLCellLinOpT&lt; MF &gt;::compFlux</definition>
        <argsstring>(int amrlev, const Array&lt; MF *, AMREX_SPACEDIM &gt; &amp;fluxes, MF &amp;sol, Location loc) const override</argsstring>
        <name>compFlux</name>
        <reimplements refid="classamrex_1_1MLLinOpT_1a6f26e44f0e91bdfd3f6e9830c71a2ec6">compFlux</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; MF *, AMREX_SPACEDIM &gt; &amp;</type>
        </param>
        <param>
          <type>MF &amp;</type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLCellLinOpT_1ac93e5fc5cf3373e6711f1328b051b997" kindref="member">Location</ref></type>
        </param>
        <briefdescription>
<para>Compute fluxes. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>amrlev</parametername>
</parameternamelist>
<parameterdescription>
<para>AMR level </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fluxes</parametername>
</parameternamelist>
<parameterdescription>
<para>fluxes </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sol</parametername>
</parameternamelist>
<parameterdescription>
<para>solution </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>loc</parametername>
</parameternamelist>
<parameterdescription>
<para>location of the fluxes </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="100" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" bodystart="1348" bodyend="1388"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellLinOpT_1a2ed74b3dc4e3c46d2cd589cbb8301e94" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLCellLinOpT&lt; MF &gt;::compGrad</definition>
        <argsstring>(int amrlev, const Array&lt; MF *, AMREX_SPACEDIM &gt; &amp;grad, MF &amp;sol, Location loc) const override</argsstring>
        <name>compGrad</name>
        <reimplements refid="classamrex_1_1MLLinOpT_1a1044f61a2f9270efa01fce0898988ec6">compGrad</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; MF *, AMREX_SPACEDIM &gt; &amp;</type>
        </param>
        <param>
          <type>MF &amp;</type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLCellLinOpT_1ac93e5fc5cf3373e6711f1328b051b997" kindref="member">Location</ref></type>
        </param>
        <briefdescription>
<para>Compute gradients of the solution. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>amrlev</parametername>
</parameternamelist>
<parameterdescription>
<para>AMR level </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>grad</parametername>
</parameternamelist>
<parameterdescription>
<para>grad(sol) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sol</parametername>
</parameternamelist>
<parameterdescription>
<para>solution </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>loc</parametername>
</parameternamelist>
<parameterdescription>
<para>location of the gradients </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="102" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" bodystart="1392" bodyend="1442"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellLinOpT_1a87bccd5330e4295f7108cf56c0a1cd20" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLCellLinOpT&lt; MF &gt;::applyMetricTerm</definition>
        <argsstring>(int amrlev, int mglev, MF &amp;rhs) const final</argsstring>
        <name>applyMetricTerm</name>
        <reimplements refid="classamrex_1_1MLLinOpT_1a862b45e632c8fa045d0857e13843481d">applyMetricTerm</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type>MF &amp;</type>
        </param>
        <briefdescription>
<para>apply metric terms if there are any </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="105" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" bodystart="1446" bodyend="1498"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellLinOpT_1a8681147e6aa6a83cba4451adda7b719c" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLCellLinOpT&lt; MF &gt;::unapplyMetricTerm</definition>
        <argsstring>(int amrlev, int mglev, MF &amp;rhs) const final</argsstring>
        <name>unapplyMetricTerm</name>
        <reimplements refid="classamrex_1_1MLLinOpT_1a87aa267936bffcd4ed6387b3138bd9d5">unapplyMetricTerm</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type>MF &amp;</type>
        </param>
        <briefdescription>
<para>unapply metric terms if there are any </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="106" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" bodystart="1502" bodyend="1556"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellLinOpT_1a08e68e2870cd7367dd09d2ef777261b3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MLCellLinOpT_1a4cd7bb9cadbccdb52688ef33ddfd8d5c" kindref="member">RT</ref> &gt;</type>
        <definition>auto amrex::MLCellLinOpT&lt; MF &gt;::getSolvabilityOffset</definition>
        <argsstring>(int amrlev, int mglev, MF const &amp;rhs) const override</argsstring>
        <name>getSolvabilityOffset</name>
        <reimplements refid="classamrex_1_1MLLinOpT_1a94c2f24c3e40ca7b09e7757d94d009af">getSolvabilityOffset</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type>MF const &amp;</type>
        </param>
        <briefdescription>
<para>get offset for fixing solvability </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="107" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" bodystart="1560" bodyend="1593"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellLinOpT_1ac44f404584644c6cb3f7548de48206d0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLCellLinOpT&lt; MF &gt;::fixSolvabilityByOffset</definition>
        <argsstring>(int amrlev, int mglev, MF &amp;rhs, Vector&lt; RT &gt; const &amp;offset) const override</argsstring>
        <name>fixSolvabilityByOffset</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev</declname>
        </param>
        <param>
          <type>MF &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MLCellLinOpT_1a4cd7bb9cadbccdb52688ef33ddfd8d5c" kindref="member">RT</ref> &gt; const &amp;</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="109" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" bodystart="1597" bodyend="1613"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellLinOpT_1a8201ce95349a35448ba37366eabc518b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLCellLinOpT&lt; MF &gt;::prepareForSolve</definition>
        <argsstring>() override</argsstring>
        <name>prepareForSolve</name>
        <reimplements refid="classamrex_1_1MLLinOpT_1af8740f5bcf25e80b3e074a99be681c47">prepareForSolve</reimplements>
        <reimplementedby refid="classamrex_1_1MLEBTensorOp_1a16a71281b7dfd14b0f89a2c50fc327bb">prepareForSolve</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLPoissonT_1a46fe8bdcadd6679f29d19971eeb19242">prepareForSolve</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLTensorOp_1a9e8e4689f0e0f349f5a29708c224360c">prepareForSolve</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLEBABecLap_1a10d9a42df59b0c48c0de0bc3a2b41cca">prepareForSolve</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="112" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" bodystart="1617" bodyend="1926"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellLinOpT_1a7c044db51cc603481135fb0d75e43e90" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type><ref refid="classamrex_1_1MLCellLinOpT_1a4cd7bb9cadbccdb52688ef33ddfd8d5c" kindref="member">RT</ref></type>
        <definition>auto amrex::MLCellLinOpT&lt; MF &gt;::xdoty</definition>
        <argsstring>(int amrlev, int mglev, const MF &amp;x, const MF &amp;y, bool local) const final</argsstring>
        <name>xdoty</name>
        <reimplements refid="classamrex_1_1MLLinOpT_1adc521ed02a450f7efc4d24f18d8ee7aa">xdoty</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev</declname>
        </param>
        <param>
          <type>const MF &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const MF &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
        </param>
        <briefdescription>
<para>x dot y, used by the bottom solver </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="114" column="8" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" bodystart="1930" bodyend="1940"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellLinOpT_1a3841e981caa197033fcd74eee93f0daf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void amrex::MLCellLinOpT&lt; MF &gt;::Fapply</definition>
        <argsstring>(int amrlev, int mglev, MF &amp;out, const MF &amp;in) const =0</argsstring>
        <name>Fapply</name>
        <reimplementedby refid="classamrex_1_1MLABecLaplacianT_1a8781967da72aea442a9f7837407004fe">Fapply</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLALaplacianT_1a7e7c474a3a2b509c38ec6f22eb810b23">Fapply</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLPoissonT_1a51fb5455fbb2f0940a4f4b99a03f1c44">Fapply</reimplementedby>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev</declname>
        </param>
        <param>
          <type>MF &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const MF &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="116" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellLinOpT_1a07fa09c5665782a39755f32fccdb7ec6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void amrex::MLCellLinOpT&lt; MF &gt;::Fsmooth</definition>
        <argsstring>(int amrlev, int mglev, MF &amp;sol, const MF &amp;rhs, int redblack) const =0</argsstring>
        <name>Fsmooth</name>
        <reimplementedby refid="classamrex_1_1MLABecLaplacianT_1ad219bae0ff8321a675900f6850dd551a">Fsmooth</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLALaplacianT_1abcdd9ab9f087bf18744643b24d2e7471">Fsmooth</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLPoissonT_1af9232adb87973674d3243a2e01a10155">Fsmooth</reimplementedby>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev</declname>
        </param>
        <param>
          <type>MF &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>const MF &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>redblack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="117" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellLinOpT_1af69b48f91ccf0266c5d219c0c24ea3c2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void amrex::MLCellLinOpT&lt; MF &gt;::FFlux</definition>
        <argsstring>(int amrlev, const MFIter &amp;mfi, const Array&lt; FAB *, AMREX_SPACEDIM &gt; &amp;flux, const FAB &amp;sol, Location loc, int face_only=0) const =0</argsstring>
        <name>FFlux</name>
        <reimplementedby refid="classamrex_1_1MLPoissonT_1aede7210df6c1aca7b7bee58a88c3a75d">FFlux</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLABecLaplacianT_1af4097c02d7d7338535af34df84af7e61">FFlux</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLALaplacianT_1a6bc221e1003d0f11d6d7f720f487afb7">FFlux</reimplementedby>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MLCellLinOpT_1a0bbec26a1602f0b6e13a2a77a105416b" kindref="member">FAB</ref> *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>flux</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MLCellLinOpT_1a0bbec26a1602f0b6e13a2a77a105416b" kindref="member">FAB</ref> &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLCellLinOpT_1ac93e5fc5cf3373e6711f1328b051b997" kindref="member">Location</ref></type>
          <declname>loc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>face_only</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="118" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellLinOpT_1a7b267ba339a135bfb4352e4273f4706a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex::MLCellLinOpT&lt; MF &gt;::addInhomogNeumannFlux</definition>
        <argsstring>(int, const Array&lt; MF *, AMREX_SPACEDIM &gt; &amp;, MF const &amp;, bool) const</argsstring>
        <name>addInhomogNeumannFlux</name>
        <reimplementedby refid="classamrex_1_1MLCellABecLapT_1a2be65b6a2c0a68b5a8954d4be9ace8d7">addInhomogNeumannFlux</reimplementedby>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; MF *, AMREX_SPACEDIM &gt; &amp;</type>
        </param>
        <param>
          <type>MF const &amp;</type>
        </param>
        <param>
          <type>bool</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="122" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" bodystart="122" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellLinOpT_1a6207e307cf8edda53498feebe2abb2e3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classamrex_1_1MLCellLinOpT_1a4cd7bb9cadbccdb52688ef33ddfd8d5c" kindref="member">RT</ref></type>
        <definition>auto amrex::MLCellLinOpT&lt; MF &gt;::normInf</definition>
        <argsstring>(int amrlev, MF const &amp;mf, bool local) const override</argsstring>
        <name>normInf</name>
        <reimplements refid="classamrex_1_1MLLinOpT_1a637cc2c475b32f4606119af00617d840">normInf</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>MF const &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="127" column="8" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" bodystart="2008" bodyend="2100"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellLinOpT_1a118fb8de26be373907091016e1207645" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLCellLinOpT&lt; MF &gt;::averageDownAndSync</definition>
        <argsstring>(Vector&lt; MF &gt; &amp;sol) const override</argsstring>
        <name>averageDownAndSync</name>
        <reimplements refid="classamrex_1_1MLLinOpT_1aaef6b6d5b5aa06ad781f7c81b996ad78">averageDownAndSync</reimplements>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; MF &gt; &amp;</type>
          <declname>sol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="129" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" bodystart="2104" bodyend="2122"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellLinOpT_1a33f2c8cbf69e58cbe60e9be048181f5d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLCellLinOpT&lt; MF &gt;::avgDownResAmr</definition>
        <argsstring>(int clev, MF &amp;cres, MF const &amp;fres) const override</argsstring>
        <name>avgDownResAmr</name>
        <reimplements refid="classamrex_1_1MLLinOpT_1aab2a0d1464333955b58343210d15bbb8">avgDownResAmr</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>clev</declname>
        </param>
        <param>
          <type>MF &amp;</type>
          <declname>cres</declname>
        </param>
        <param>
          <type>MF const &amp;</type>
          <declname>fres</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="131" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" bodystart="2126" bodyend="2142"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classamrex_1_1MLCellLinOpT_1a95432ea80c81e30e58ffda678f2d926d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLCellLinOpT&lt; MF &gt;::defineAuxData</definition>
        <argsstring>()</argsstring>
        <name>defineAuxData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="210" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" bodystart="368" bodyend="427"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellLinOpT_1a3b583520578b832e04ea2baf3ea48917" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLCellLinOpT&lt; MF &gt;::defineBC</definition>
        <argsstring>()</argsstring>
        <name>defineBC</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="211" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" bodystart="431" bodyend="509"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCellLinOpT_1af28f1c33141158bd515093c3741d7124" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLCellLinOpT&lt; MF &gt;::computeVolInv</definition>
        <argsstring>() const</argsstring>
        <name>computeVolInv</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="213" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" bodystart="1944" bodyend="2004"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="8">
        <label>amrex::MLEBTensorOp</label>
        <link refid="classamrex_1_1MLEBTensorOp"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>amrex::MLCellABecLapT&lt; MF &gt;</label>
        <link refid="classamrex_1_1MLCellABecLapT"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>amrex::MLABecLaplacianT&lt; MF &gt;</label>
        <link refid="classamrex_1_1MLABecLaplacianT"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>amrex::MLALaplacianT&lt; MF &gt;</label>
        <link refid="classamrex_1_1MLALaplacianT"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>amrex::MLTensorOp&lt; MultiFab &gt;</label>
        <link refid="classamrex_1_1MLTensorOp"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>amrex::MLPoissonT&lt; MF &gt;</label>
        <link refid="classamrex_1_1MLPoissonT"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>amrex::MLCellLinOpT&lt; MF &gt;</label>
        <link refid="classamrex_1_1MLCellLinOpT"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>amrex::MLLinOpT&lt; MF &gt;</label>
        <link refid="classamrex_1_1MLLinOpT"/>
      </node>
      <node id="7">
        <label>amrex::MLEBABecLap&lt; MultiFab &gt;</label>
        <link refid="classamrex_1_1MLEBABecLap"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="25">
        <label>amrex::Vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::MLCellLinOpT::BndryCondLoc &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>T</label>
      </node>
      <node id="8">
        <label>Real</label>
      </node>
      <node id="4">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="24">
        <label>amrex::Vector&lt; amrex::Vector&lt; RT &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::BoxArray &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="21">
        <label>amrex::Vector&lt; std::unique_ptr&lt; amrex::BndryRegisterT&lt; MF &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11">
        <label>std::unique_ptr&lt; amrex::MLLinOpT::CommContainer &gt;</label>
      </node>
      <node id="22">
        <label>amrex::Vector&lt; std::unique_ptr&lt; amrex::MLMGBndryT&lt; MF &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="18">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::BndryRegisterT&lt; MF &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="12">
        <label>amrex::Vector&lt; int &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="14">
        <label>amrex::Vector&lt; amrex::IntVectND &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="19">
        <label>amrex::Vector&lt; amrex::YAFluxRegisterT&lt; MF &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::Geometry &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>amrex::RealVect</label>
        <link refid="classamrex_1_1RealVect"/>
        <childnode refid="7" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>vect</edgelabel>
        </childnode>
      </node>
      <node id="16">
        <label>amrex::Vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::FabFactory&lt; FAB &gt; &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="13">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::DistributionMapping &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>amrex::Vector&lt; std::unique_ptr&lt; MF &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="20">
        <label>amrex::Vector&lt; std::unique_ptr&lt; amrex::iMultiFab &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="15">
        <label>amrex::Vector&lt; Array&lt; BCType, AMREX_SPACEDIM &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>amrex::MLCellLinOpT&lt; MF &gt;</label>
        <link refid="classamrex_1_1MLCellLinOpT"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>m_undrrelxr</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>m_robin_bcval</edgelabel>
        </childnode>
        <childnode refid="19" relation="usage">
          <edgelabel>m_fluxreg</edgelabel>
        </childnode>
        <childnode refid="20" relation="usage">
          <edgelabel>m_norm_fine_mask</edgelabel>
        </childnode>
        <childnode refid="21" relation="usage">
          <edgelabel>m_crse_cor_br</edgelabel>
          <edgelabel>m_crse_sol_br</edgelabel>
        </childnode>
        <childnode refid="22" relation="usage">
          <edgelabel>m_bndry_cor</edgelabel>
          <edgelabel>m_bndry_sol</edgelabel>
        </childnode>
        <childnode refid="23" relation="usage">
          <edgelabel>m_maskvals</edgelabel>
        </childnode>
        <childnode refid="24" relation="usage">
          <edgelabel>m_volinv</edgelabel>
        </childnode>
        <childnode refid="25" relation="usage">
          <edgelabel>m_bcondloc</edgelabel>
        </childnode>
      </node>
      <node id="17">
        <label>amrex::LPInfo</label>
        <link refid="structamrex_1_1LPInfo"/>
      </node>
      <node id="2">
        <label>amrex::MLLinOpT&lt; MF &gt;</label>
        <link refid="classamrex_1_1MLLinOpT"/>
        <childnode refid="3" relation="usage">
          <edgelabel>levelbc_raii</edgelabel>
          <edgelabel>robin_a_raii</edgelabel>
          <edgelabel>robin_b_raii</edgelabel>
          <edgelabel>robin_f_raii</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>m_geom</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>m_coarse_bc_loc</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>m_grids</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>m_coarse_data_crse_ratio</edgelabel>
          <edgelabel>m_ixtype</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>m_raii_comm</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>m_amr_ref_ratio</edgelabel>
          <edgelabel>m_domain_covered</edgelabel>
          <edgelabel>m_num_mg_levels</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>m_dmap</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>mg_coarsen_ratio_vec</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>m_hibc</edgelabel>
          <edgelabel>m_hibc_orig</edgelabel>
          <edgelabel>m_lobc</edgelabel>
          <edgelabel>m_lobc_orig</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>m_factory</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>info</edgelabel>
        </childnode>
      </node>
      <node id="23">
        <label>amrex::Vector&lt; amrex::Vector&lt; Array&lt; amrex::MultiMask, 2 *AMREX_SPACEDIM &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>amrex::IntVectND&lt; AMREX_SPACEDIM &gt;</label>
        <link refid="classamrex_1_1IntVectND"/>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="19" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" bodystart="21" bodyend="217"/>
    <listofallmembers>
      <member refid="classamrex_1_1MLCellLinOpT_1a7b267ba339a135bfb4352e4273f4706a" prot="public" virt="virtual"><scope>amrex::MLCellLinOpT</scope><name>addInhomogNeumannFlux</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a10ebb5d290f3579d4c3e69aa56cf6251" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>AMRRefRatio</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ae88bc615f7fa178e54ea32899aae6506" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>AMRRefRatio</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a8755fe1a7a09db77e7d810dd9dfdb107" prot="public" virt="virtual"><scope>amrex::MLCellLinOpT</scope><name>apply</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a251a2f1de9fea9f0d0230e04b19c078e" prot="public" virt="virtual"><scope>amrex::MLCellLinOpT</scope><name>applyBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aaa73c9a5abc4c1289c181dc297906221" prot="public" virt="virtual"><scope>amrex::MLCellLinOpT</scope><name>applyInhomogNeumannTerm</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a87bccd5330e4295f7108cf56c0a1cd20" prot="public" virt="virtual"><scope>amrex::MLCellLinOpT</scope><name>applyMetricTerm</name></member>
      <member refid="classamrex_1_1MLLinOpT_1af3ef819a79d23afc7993a4f6750d7a1d" prot="public" virt="virtual"><scope>amrex::MLCellLinOpT</scope><name>applyOverset</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a118fb8de26be373907091016e1207645" prot="public" virt="virtual"><scope>amrex::MLCellLinOpT</scope><name>averageDownAndSync</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a116deee661b635f1872ac7eded5f28a7" prot="public" virt="virtual"><scope>amrex::MLCellLinOpT</scope><name>averageDownSolutionRHS</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a33f2c8cbf69e58cbe60e9be048181f5d" prot="public" virt="virtual"><scope>amrex::MLCellLinOpT</scope><name>avgDownResAmr</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a08f1cfd6afc79121fce39e027f15cac5" prot="public" virt="virtual"><scope>amrex::MLCellLinOpT</scope><name>avgDownResMG</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a5f24e3a713313778626619bfd96ebc96" prot="public" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>BCMode</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a6ce4d3fd41e76507b017ff826a52c62e" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>BCTuple</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a507cfffa6d7098331e08cc35e7c19e18" prot="public" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>BCType</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a2859b0cddde955b30ccf90c0af86e897" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>BottomCommunicator</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a6b2ce3775a4c209860db63635f969640" prot="private" virt="virtual"><scope>amrex::MLCellLinOpT</scope><name>checkPoint</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a2ac85c71c7e15137bd62cbfd04cc52ed" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>Communicator</name></member>
      <member refid="classamrex_1_1MLLinOpT_1abb542d962e83dd7479852f83fd3575bf" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>compactify</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a3f7e812180f57035bfe85cb7d10b26e9" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>compactify</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1ae7f32e1b953ea4ef5643501e91560d32" prot="public" virt="virtual"><scope>amrex::MLCellLinOpT</scope><name>compFlux</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a2ed74b3dc4e3c46d2cd589cbb8301e94" prot="public" virt="virtual"><scope>amrex::MLCellLinOpT</scope><name>compGrad</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1af28f1c33141158bd515093c3741d7124" prot="private" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>computeVolInv</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a4b8c0b3d1fd866b3b9a787bdcb056e77" prot="public" virt="virtual"><scope>amrex::MLCellLinOpT</scope><name>copyNSolveSolution</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a51480d2022ad9346d6eb11f3cbfd631a" prot="public" virt="virtual"><scope>amrex::MLCellLinOpT</scope><name>correctionResidual</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1aa6df034e49814000ac0304a3579890b6" prot="public" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>define</name></member>
      <member refid="classamrex_1_1MLLinOpT_1abe69b9ebe0a04b3da502ac8606871680" prot="public" virt="non-virtual" ambiguityscope="amrex::MLLinOpT::"><scope>amrex::MLCellLinOpT</scope><name>define</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a95432ea80c81e30e58ffda678f2d926d" prot="private" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>defineAuxData</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a3b583520578b832e04ea2baf3ea48917" prot="private" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>defineBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a5aa9449241f9867021b4d5300284a76a" prot="private" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>defineGrids</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a33e77669d6f0da47f28959678db508e4" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>doAgglomeration</name></member>
      <member refid="classamrex_1_1MLLinOpT_1add56650e9ecd05e16a7f2f71bcbe7c9b" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>doConsolidation</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aa99dea32527b34287aa64542b5545256" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>doSemicoarsening</name></member>
      <member refid="classamrex_1_1MLLinOpT_1adb9b0f44a3e66fbefa2310385747427b" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>enforceSingularSolvable</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a0bbec26a1602f0b6e13a2a77a105416b" prot="public" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>FAB</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a3ca782a47b55ca765b4fd9eeda174d36" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>Factory</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a3841e981caa197033fcd74eee93f0daf" prot="public" virt="pure-virtual"><scope>amrex::MLCellLinOpT</scope><name>Fapply</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1af69b48f91ccf0266c5d219c0c24ea3c2" prot="public" virt="pure-virtual"><scope>amrex::MLCellLinOpT</scope><name>FFlux</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1ac44f404584644c6cb3f7548de48206d0" prot="public" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>fixSolvabilityByOffset</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a9b6ac2fe55b5951ef0aee9cfdf3e56c0" prot="public" virt="virtual" ambiguityscope="amrex::MLLinOpT::"><scope>amrex::MLCellLinOpT</scope><name>fixSolvabilityByOffset</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a07fa09c5665782a39755f32fccdb7ec6" prot="public" virt="pure-virtual"><scope>amrex::MLCellLinOpT</scope><name>Fsmooth</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a02b3d2ea4535daf60276e9014571f955" prot="public" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>Geom</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a28402657d9216f6ef38835ab562ee58b" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>get_d0</name></member>
      <member refid="classamrex_1_1MLLinOpT_1adad8c3e9a304cc409d473b2d44aa4520" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>get_d1</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a5e588d148e2672c3e82c8f40d5826671" prot="public" virt="virtual"><scope>amrex::MLCellLinOpT</scope><name>getDefaultBottomSolver</name></member>
      <member refid="classamrex_1_1MLLinOpT_1af823f5b435d2f329595b333c82080e35" prot="public" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>getEnforceSingularSolvable</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a2ae10763b783ce6190c161927125dd63" prot="public" virt="virtual"><scope>amrex::MLCellLinOpT</scope><name>getFluxes</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a4fc56d4aef22e014e4743cc6745f92e9" prot="public" virt="virtual"><scope>amrex::MLCellLinOpT</scope><name>getFluxes</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a4e2a07d995c0fc8d2dfe5be544501eea" prot="public" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>getMaxOrder</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a4f45234f33332dbaf9406e4daa01b475" prot="public" virt="virtual"><scope>amrex::MLCellLinOpT</scope><name>getNComp</name></member>
      <member refid="classamrex_1_1MLLinOpT_1afe8257f1157b08104c622bedb11b0d00" prot="public" virt="virtual"><scope>amrex::MLCellLinOpT</scope><name>getNGrow</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a8f0f9865915b5d7c47bbff26bc46d442" prot="protected" virt="virtual"><scope>amrex::MLCellLinOpT</scope><name>getNGrowVectRestriction</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a08e68e2870cd7367dd09d2ef777261b3" prot="public" virt="virtual"><scope>amrex::MLCellLinOpT</scope><name>getSolvabilityOffset</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a647cd4352c3719aa23545a8e0f88b562" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>hasBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a894d1f80e83452c32470d42e05947e13" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>hasHiddenDimension</name></member>
      <member refid="classamrex_1_1MLLinOpT_1afdb203f24caba5241fa95fad173cfae7" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>hasInhomogNeumannBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a40cc3ea13c4a150195a6198e33f1eac2" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>hasRobinBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ae6a081e88ffb4aafb123a7eb644ebd72" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>HiBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aa0c3b0c5a4e23b9248d18138229aec76" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>hiddenDirection</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ad0412f399e1e29e200a2451b371b0133" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>info</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1ac40a7cc1f424156f36d3d8b2f0254ae7" prot="public" virt="virtual"><scope>amrex::MLCellLinOpT</scope><name>interpAssign</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a7a7909cddc98ec2abe949ee2f043e817" prot="public" virt="virtual"><scope>amrex::MLCellLinOpT</scope><name>interpolation</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1ae4108ba43d2b66494dd56578879a29a9" prot="public" virt="virtual"><scope>amrex::MLCellLinOpT</scope><name>interpolationAmr</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a56ed51708c4e70b4ec224f4d0c2f2ff9" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>isBottomActive</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a8a5fce59ba5bb0e9eb9d65e8615050ea" prot="public" virt="pure-virtual"><scope>amrex::MLCellLinOpT</scope><name>isBottomSingular</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a107c8a8b4f0b4d5209357ab3a8225671" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>isCellCentered</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a69fbf6add2bd954f6fb9a17f89adebf8" prot="public" virt="virtual"><scope>amrex::MLCellLinOpT</scope><name>isCrossStencil</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a1666fe3156e40b2fbd7a44166f70ce11" prot="public" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>isMFIterSafe</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ae4208159e7121c341be4c40f148563ad" prot="public" virt="pure-virtual"><scope>amrex::MLCellLinOpT</scope><name>isSingular</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1aae0589f189ee2d39dadca3a308e3df9b" prot="public" virt="virtual"><scope>amrex::MLCellLinOpT</scope><name>isTensorOp</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a3ac078eb634767e8e812746b8327a6b5" prot="private" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>levelbc_raii</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a60f337c8a71be69643d62c774a536dcd" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>LoBC</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1ac93e5fc5cf3373e6711f1328b051b997" prot="public" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>Location</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a520a29dd5773acdba2c227d316e059a4" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>m_amr_ref_ratio</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a8ea2fb547b5b9b37d88880948073e00c" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>m_bcondloc</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1ac667791f6b37a42e55ef25267bc78fa9" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>m_bndry_cor</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a2b8a625f55f16b9c5b620a82021f17f4" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>m_bndry_sol</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aee13b9d32b909adb7903586bfa352855" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>m_bottom_comm</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a1a730552d4db500b99496712dec21038" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>m_coarse_bc_loc</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a6d6305f5cb6d0df287f766719bb9566d" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>m_coarse_data_crse_ratio</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a02f8f07d9d724566c7aea603ea1248a6" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>m_coarse_data_for_bc</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a3bf0a8559fbed2ec5297f97590e92cb0" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>m_coarse_data_for_bc_raii</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ae152107703463ca7e27c2e3dccf7538d" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>m_coarse_fine_bc_type</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a892cce2e429f77cee7360f2859ceda4d" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>m_crse_cor_br</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1adf51879b81fbd24f9ccb7b9f0142d63b" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>m_crse_sol_br</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a52e548305943a2d3a1b1731eb5855b73" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>m_default_comm</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a67d38036b0d30275047637a1ab739ca6" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>m_dmap</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a452827d7dc1f2d84d701248f05e908af" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>m_do_agglomeration</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a0e1db3374227c3c6043734d42bbbc795" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>m_do_consolidation</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a3f65a4345945e648b7170635a33c9557" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>m_do_semicoarsening</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a1375eac46dcbfeb8155a251b904cc727" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>m_domain_bloc_hi</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a437d5bd996be47153207c90d286b336c" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>m_domain_bloc_lo</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aa83ed4b753b00606bcdff3573a6f0824" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>m_domain_covered</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a07a2cce97f1c77f36f8a241090543b8e" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>m_factory</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a22cdf5d6b191ab3c883b7167e9f94ebe" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>m_fluxreg</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aab42ad785f4263767af0a0e7306cdf8a" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>m_geom</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a4458bc19263fdcf39df3665681ce3aef" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>m_grids</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1ada8bf2b1964f2023282e23ac54a948f4" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>m_has_metric_term</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ad073f92f684b4d5ea20718fbc396ef40" prot="public" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>m_hibc</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a2cf9f506d5cee3aeaaae8b9930e7866d" prot="public" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>m_hibc_orig</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1ab5b6c73fee0004ac732f74350cc72bab" prot="private" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>m_interpbndry_halfwidth</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a1144a9c3d743270ff29c8e9f582581c0" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>m_ixtype</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a9f2e0c10c385f9bee16af5fed5f4e9c9" prot="public" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>m_lobc</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a726dec103c10ea9c84e649b9c8200767" prot="public" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>m_lobc_orig</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a9c470f145301b98fe0938ac6241284eb" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>m_maskvals</name></member>
      <member refid="classamrex_1_1MLLinOpT_1abc7eaafcc5804d269386c6bdbd13181d" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>m_needs_coarse_data_for_bc</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1af29ed070015666e58d890685cb491900" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>m_norm_fine_mask</name></member>
      <member refid="classamrex_1_1MLLinOpT_1afe9761ce7b771e51e0b47d415779ce93" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>m_num_amr_levels</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a64262a62291404dab652353158886cce" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>m_num_mg_levels</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aa96812cd049f02fe827fc1573fa0626e" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>m_parent</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a3e96c4035b1315b80c6301329695f86e" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>m_raii_comm</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a95a0dd3f6700b3da5b020a66ef726dff" prot="public" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>m_robin_bcval</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1ab50c53ea7ff9c53bf37ac816e0663406" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>m_undrrelxr</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1add77293caacd09584aa8b5f0fd7f923a" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>m_use_gauss_seidel</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1ad73d9eed28e8d9d32cf54327e21c5225" prot="private" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>m_volinv</name></member>
      <member refid="classamrex_1_1MLLinOpT_1afb48e62b81e97ddffb92d7b7cea09c55" prot="protected" virt="virtual"><scope>amrex::MLCellLinOpT</scope><name>make</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a223df72e572182f58b611c220487fe20" prot="protected" virt="virtual"><scope>amrex::MLCellLinOpT</scope><name>make</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a54590ff0d7670660d6520c753f6fbbbb" prot="private" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>makeAgglomeratedDMap</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a457c82b4259eab9916ca4e5f4493b373" prot="protected" virt="virtual"><scope>amrex::MLCellLinOpT</scope><name>makeAlias</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a44952a0322f09ae53fe7e26669f85de1" prot="protected" virt="virtual"><scope>amrex::MLCellLinOpT</scope><name>makeCoarseAmr</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a9991da8ff85055f29349c9f5b8246c65" prot="protected" virt="virtual"><scope>amrex::MLCellLinOpT</scope><name>makeCoarseMG</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a6574c3f3a840f96723f9a10ccb2eeb69" prot="private" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>makeConsolidatedDMap</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a46477d4e418960292da4f442741541b6" prot="protected" virt="virtual"><scope>amrex::MLCellLinOpT</scope><name>makeFactory</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a1574dd8857314d9658c28c26adc6ce12" prot="public" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>makeNGrids</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a1170a5be1e22a4168e341b9edff1ff76" prot="public" virt="virtual"><scope>amrex::MLCellLinOpT</scope><name>makeNLinOp</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ad05360dc7ba30a94505918519dea299c" prot="private" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>makeSubCommunicator</name></member>
      <member refid="classamrex_1_1MLLinOpT_1abddb56c317b794cc672b446046784d95" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>maxorder</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ac42612ebc576bd674db633fd6d0363db" prot="public" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>MFType</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a958be92529c763a85a81c3fc03e1e5af" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>mg_box_min_width</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a4ab72cdcf8c7d1746bd1e03fac99d808" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>mg_coarsen_ratio</name></member>
      <member refid="classamrex_1_1MLLinOpT_1abf470fae49c59ccd4cbc058ebfdab2a2" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>mg_coarsen_ratio_vec</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a2c3fc7b84d860915b7aa6bb06417800f" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>mg_domain_min_width</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1ab6bc4d82971ae75fc206df8d00d15ef6" prot="public" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>MLCellLinOpT</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a54558ff60dc7b62ac803e8dd8a5c1816" prot="public" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>MLCellLinOpT</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1ab75b6f4249c1408041b529732b179d32" prot="public" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>MLCellLinOpT</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ab768833f0df0eb419284243a6940153e" prot="public" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>MLLinOpT</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aae73abc3efc9dcc4b381ff020e043c68" prot="public" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>MLLinOpT</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a709f5c12d16e1e5e191a1d56df622173" prot="public" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>MLLinOpT</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a2fb16a53d8b6d9dd08306f89a535c617" prot="public" virt="virtual"><scope>amrex::MLCellLinOpT</scope><name>name</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a09c567773980f90aa59d90d3235ded9c" prot="public" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>NAMRLevels</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a7e2d1058dd843b67192b1aa489e112b6" prot="public" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>needsCoarseDataForBC</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1afb2f8218dcad4df69508e7ea795c2aaf" prot="public" virt="virtual"><scope>amrex::MLCellLinOpT</scope><name>needsUpdate</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ad1697410f7ce33223a511796bbf9273f" prot="public" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>NMGLevels</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aaa66bfea39287ead35be91ec940d0bb1" prot="public" virt="virtual"><scope>amrex::MLCellLinOpT</scope><name>normalize</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a6207e307cf8edda53498feebe2abb2e3" prot="public" virt="virtual"><scope>amrex::MLCellLinOpT</scope><name>normInf</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1abcbc29c6deeba6419b5cd5a67b553cd6" prot="public" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a36d76fae0e448ac86582b957eb7b5174" prot="public" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aba8d3e06373e96ddac7da02928522796" prot="public" virt="non-virtual" ambiguityscope="amrex::MLLinOpT::"><scope>amrex::MLCellLinOpT</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a9399276c8cadba0d0e513200ab8758c9" prot="public" virt="non-virtual" ambiguityscope="amrex::MLLinOpT::"><scope>amrex::MLCellLinOpT</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a7766bf3ef48ac5508865ef5aa3ef49be" prot="public" virt="virtual"><scope>amrex::MLCellLinOpT</scope><name>postSolve</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1acfbbd0bc16c6143b970276cb3db30a03" prot="public" virt="virtual"><scope>amrex::MLCellLinOpT</scope><name>prepareForFluxes</name></member>
      <member refid="classamrex_1_1MLLinOpT_1af79ba1ae9377062bdcdfc68884529865" prot="public" virt="virtual"><scope>amrex::MLCellLinOpT</scope><name>prepareForGMRES</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a8201ce95349a35448ba37366eabc518b" prot="public" virt="virtual"><scope>amrex::MLCellLinOpT</scope><name>prepareForSolve</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a65abf3895113354dbd34041b96dfb3ba" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>RealTuple</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a35158f8a8bd840468c4dedb08d6726ff" prot="public" virt="virtual"><scope>amrex::MLCellLinOpT</scope><name>reflux</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a43fcad8e24531044114e9572beb28323" prot="protected" virt="virtual"><scope>amrex::MLCellLinOpT</scope><name>resizeMultiGrid</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1ab4713a678d7c2ac9e1a9c5b027f965c5" prot="public" virt="virtual"><scope>amrex::MLCellLinOpT</scope><name>restriction</name></member>
      <member refid="classamrex_1_1MLLinOpT_1afdb609a7a4b9ea229e7b9cc89a8751f7" prot="private" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>robin_a_raii</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a90e6517d0ff6dee31c92101a9249de67" prot="private" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>robin_b_raii</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a451681732629cb75f6a4a9ba29799f44" prot="private" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>robin_f_raii</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a4cd7bb9cadbccdb52688ef33ddfd8d5c" prot="public" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>RT</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ad86c06dbaa4556184fb4dea08186e3c9" prot="public" virt="virtual"><scope>amrex::MLCellLinOpT</scope><name>scaleRHS</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a776db3c3a85a3f2d3938446d7ce6b19c" prot="public" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>setCoarseFineBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ab12336bb4e985ab158e63397b4960171" prot="public" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>setCoarseFineBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a455030051a17d954b7aeb6323b0a4fba" prot="public" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>setCoarseFineBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a3210982bb202d42999661f1c3920bf1e" prot="public" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>setCoarseFineBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a51edb661205b9d4b77b5acab32d17cd2" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>setCoarseFineBCLocation</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a3c105d805c87469e86c653692af55428" prot="public" virt="virtual"><scope>amrex::MLCellLinOpT</scope><name>setDirichletNodesToZero</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a065b7216ffbd4136592b893066feabc9" prot="public" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>setDomainBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a472da4d3c20cee50275d2790e18bf046" prot="public" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>setDomainBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a7dd25019053e84389e2d9226fc5816ed" prot="public" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>setDomainBCLoc</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a28dec45d870edf5fba713b18c53542cf" prot="public" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>setEnforceSingularSolvable</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a910678e8eb5a82aaa5550910cb4ac3fb" prot="public" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>setGaussSeidel</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1afaf162a4471fc9b3a7121d9579fea518" prot="public" virt="virtual"><scope>amrex::MLCellLinOpT</scope><name>setLevelBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1adc2c4cd3ccc03f6c0f958429b1d1f093" prot="public" virt="non-virtual" ambiguityscope="amrex::MLLinOpT::"><scope>amrex::MLCellLinOpT</scope><name>setLevelBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a2cea879bd6717f7b2f425b1c1aeff724" prot="public" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>setMaxOrder</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a135bc97332faf6e4f7f864b45c2b0b69" prot="public" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>setVerbose</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a04486888c630dc3e4a5258a0e174345c" prot="public" virt="virtual"><scope>amrex::MLCellLinOpT</scope><name>smooth</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1ad6684ea6b055170aad353ee9a4dcc316" prot="public" virt="virtual"><scope>amrex::MLCellLinOpT</scope><name>solutionResidual</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1afaa558995ac0e6dace1b2539572250a7" prot="public" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>StateMode</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ae0ca480e28c3c9c318f0e4d5beee0143" prot="protected" virt="virtual"><scope>amrex::MLCellLinOpT</scope><name>supportInhomogNeumannBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aa9b2cbde953686aaf94f7f6442a0ea5c" prot="public" virt="virtual"><scope>amrex::MLCellLinOpT</scope><name>supportNSolve</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aaa1fde319e32db3c05ca0f7fd944c111" prot="protected" virt="virtual"><scope>amrex::MLCellLinOpT</scope><name>supportRobinBC</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a8681147e6aa6a83cba4451adda7b719c" prot="public" virt="virtual"><scope>amrex::MLCellLinOpT</scope><name>unapplyMetricTerm</name></member>
      <member refid="classamrex_1_1MLLinOpT_1af5258bf128c18afbb9712ad7230dad8e" prot="public" virt="virtual"><scope>amrex::MLCellLinOpT</scope><name>unimposeNeumannBC</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a4482485699afcfc64adb1f8179714636" prot="public" virt="virtual"><scope>amrex::MLCellLinOpT</scope><name>update</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a6bb9614b2635f9935e7cb8816074a2ef" prot="public" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>updateCorBC</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a28d4c00dc8448c2c8f10dc519a42ae0f" prot="public" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>updateSolBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a685caf14f09300309d306d01150eae9a" prot="protected" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>verbose</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a7c044db51cc603481135fb0d75e43e90" prot="public" virt="virtual"><scope>amrex::MLCellLinOpT</scope><name>xdoty</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1aaa89b0307d84d1687ece7880403c5689" prot="public" virt="non-virtual"><scope>amrex::MLCellLinOpT</scope><name>~MLCellLinOpT</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ac7718af80beb24d049ffad1239e31384" prot="public" virt="virtual"><scope>amrex::MLCellLinOpT</scope><name>~MLLinOpT</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
