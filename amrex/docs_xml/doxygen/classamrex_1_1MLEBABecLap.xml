<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classamrex_1_1MLEBABecLap" kind="class" language="C++" prot="public">
    <compoundname>amrex::MLEBABecLap</compoundname>
    <basecompoundref refid="classamrex_1_1MLCellABecLap" prot="public" virt="non-virtual">amrex::MLCellABecLap</basecompoundref>
    <derivedcompoundref refid="classamrex_1_1MLEBTensorOp" prot="public" virt="non-virtual">amrex::MLEBTensorOp</derivedcompoundref>
    <includes refid="AMReX__MLEBABecLap_8H" local="no">AMReX_MLEBABecLap.H</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classamrex_1_1MLEBABecLap_1a85df3961f7b0ad04d0ad1463ea1e24da" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::MLEBABecLap::m_ncomp</definition>
        <argsstring></argsstring>
        <name>m_ncomp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.H" line="126" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.H" bodystart="126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLEBABecLap_1aadf975aed65ffe24b230421d1366de50" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::MLEBABecLap::m_needs_update</definition>
        <argsstring></argsstring>
        <name>m_needs_update</name>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.H" line="128" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.H" bodystart="128" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLEBABecLap_1afc12bcb23ed82f37ceae7da2d6f44eea" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1MLLinOp_1a07cd0a7c45d6542e33a5d97aefe5bab3" kindref="member">Location</ref></type>
        <definition>Location amrex::MLEBABecLap::m_beta_loc</definition>
        <argsstring></argsstring>
        <name>m_beta_loc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.H" line="130" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.H" bodystart="130" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLEBABecLap_1ae0ea21faa4cc1aeadf8641b37d8cf59f" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1MLLinOp_1a07cd0a7c45d6542e33a5d97aefe5bab3" kindref="member">Location</ref></type>
        <definition>Location amrex::MLEBABecLap::m_phi_loc</definition>
        <argsstring></argsstring>
        <name>m_phi_loc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.H" line="131" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.H" bodystart="131" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLEBABecLap_1ac43a9c8728bb7861415d80283d41e064" prot="protected" static="no" mutable="no">
        <type>Real</type>
        <definition>Real amrex::MLEBABecLap::m_a_scalar</definition>
        <argsstring></argsstring>
        <name>m_a_scalar</name>
        <initializer>= std::numeric_limits&lt;Real&gt;::quiet_NaN()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.H" line="133" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.H" bodystart="133" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLEBABecLap_1a1fb977f5a6b0c8682e5f658a4dc9db0c" prot="protected" static="no" mutable="no">
        <type>Real</type>
        <definition>Real amrex::MLEBABecLap::m_b_scalar</definition>
        <argsstring></argsstring>
        <name>m_b_scalar</name>
        <initializer>= std::numeric_limits&lt;Real&gt;::quiet_NaN()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.H" line="134" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.H" bodystart="134" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLEBABecLap_1a48c0efb6e525e5c901c1ee34fa5119ca" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &gt; &gt;</type>
        <definition>Vector&lt;Vector&lt;MultiFab&gt; &gt; amrex::MLEBABecLap::m_a_coeffs</definition>
        <argsstring></argsstring>
        <name>m_a_coeffs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.H" line="135" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.H" bodystart="135" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLEBABecLap_1ad631dff72b03c8a0d629bd735a63078e" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>, AMREX_SPACEDIM &gt; &gt; &gt;</type>
        <definition>Vector&lt;Vector&lt;Array&lt;MultiFab,AMREX_SPACEDIM&gt; &gt; &gt; amrex::MLEBABecLap::m_b_coeffs</definition>
        <argsstring></argsstring>
        <name>m_b_coeffs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.H" line="136" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.H" bodystart="136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLEBABecLap_1a820de6c415b8f6911cf96c94788cb102" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &gt; &gt;</type>
        <definition>Vector&lt;Vector&lt;iMultiFab&gt; &gt; amrex::MLEBABecLap::m_cc_mask</definition>
        <argsstring></argsstring>
        <name>m_cc_mask</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.H" line="137" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.H" bodystart="137" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLEBABecLap_1a25296274131127e2be522bd86b57be2c" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::unique_ptr&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &gt; &gt;</type>
        <definition>Vector&lt;std::unique_ptr&lt;MultiFab&gt; &gt; amrex::MLEBABecLap::m_eb_phi</definition>
        <argsstring></argsstring>
        <name>m_eb_phi</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.H" line="139" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.H" bodystart="139" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLEBABecLap_1a1644cbea6bac7ad1b9ae4a039cf96cc4" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::unique_ptr&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &gt; &gt; &gt;</type>
        <definition>Vector&lt;Vector&lt;std::unique_ptr&lt;MultiFab&gt; &gt; &gt; amrex::MLEBABecLap::m_eb_b_coeffs</definition>
        <argsstring></argsstring>
        <name>m_eb_b_coeffs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.H" line="140" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.H" bodystart="140" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLEBABecLap_1a69f0aa528f3437aed6e5fbc26d3f1820" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
        <definition>Vector&lt;int&gt; amrex::MLEBABecLap::m_is_singular</definition>
        <argsstring></argsstring>
        <name>m_is_singular</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.H" line="142" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.H" bodystart="142" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLEBABecLap_1a11297b15320727df4d9e32d3b8085c06" prot="protected" static="no" mutable="yes">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::MLEBABecLap::m_is_eb_inhomog</definition>
        <argsstring></argsstring>
        <name>m_is_eb_inhomog</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.H" line="144" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.H" bodystart="144" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1MLEBABecLap_1aa9a96f2bc072cb181d9cce454e3da098" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::MLEBABecLap::MLEBABecLap</definition>
        <argsstring>()</argsstring>
        <name>MLEBABecLap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.H" line="19" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.H" bodystart="19" bodyend="19"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBABecLap_1afbf800c9b02dd7a3da3fc75905a53c64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MLEBABecLap::MLEBABecLap</definition>
        <argsstring>(const Vector&lt; Geometry &gt; &amp;a_geom, const Vector&lt; BoxArray &gt; &amp;a_grids, const Vector&lt; DistributionMapping &gt; &amp;a_dmap, const LPInfo &amp;a_info, const Vector&lt; EBFArrayBoxFactory const *&gt; &amp;a_factory, const int a_ncomp=1)</argsstring>
        <name>MLEBABecLap</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>a_geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; BoxArray &gt; &amp;</type>
          <declname>a_grids</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt; &amp;</type>
          <declname>a_dmap</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1LPInfo" kindref="compound">LPInfo</ref> &amp;</type>
          <declname>a_info</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1EBFArrayBoxFactory" kindref="compound">EBFArrayBoxFactory</ref> const *&gt; &amp;</type>
          <declname>a_factory</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>a_ncomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.H" line="20" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.cpp" bodystart="23" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBABecLap_1a1c3ebe277cdfba5a7bdafca9f0a2672f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>amrex::MLEBABecLap::~MLEBABecLap</definition>
        <argsstring>()</argsstring>
        <name>~MLEBABecLap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.H" line="27" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.cpp" bodystart="99" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBABecLap_1a14181cc0ff70a2ed471cdb3a3fc2bdb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MLEBABecLap::MLEBABecLap</definition>
        <argsstring>(const MLEBABecLap &amp;)=delete</argsstring>
        <name>MLEBABecLap</name>
        <param>
          <type>const <ref refid="classamrex_1_1MLEBABecLap" kindref="compound">MLEBABecLap</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.H" line="29" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBABecLap_1a0b7f1e4cc90469a42eb10c8792eced13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MLEBABecLap::MLEBABecLap</definition>
        <argsstring>(MLEBABecLap &amp;&amp;)=delete</argsstring>
        <name>MLEBABecLap</name>
        <param>
          <type><ref refid="classamrex_1_1MLEBABecLap" kindref="compound">MLEBABecLap</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.H" line="30" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBABecLap_1a510cfdf6165c8a08174e71624357bbf9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1MLEBABecLap" kindref="compound">MLEBABecLap</ref> &amp;</type>
        <definition>MLEBABecLap&amp; amrex::MLEBABecLap::operator=</definition>
        <argsstring>(const MLEBABecLap &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classamrex_1_1MLEBABecLap" kindref="compound">MLEBABecLap</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.H" line="31" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBABecLap_1aaa0d12f5f57ddf587493f2c93f516dd8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1MLEBABecLap" kindref="compound">MLEBABecLap</ref> &amp;</type>
        <definition>MLEBABecLap&amp; amrex::MLEBABecLap::operator=</definition>
        <argsstring>(MLEBABecLap &amp;&amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1MLEBABecLap" kindref="compound">MLEBABecLap</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.H" line="32" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBABecLap_1a364e0a03d9922bf9dc15361248ed5a1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLEBABecLap::define</definition>
        <argsstring>(const Vector&lt; Geometry &gt; &amp;a_geom, const Vector&lt; BoxArray &gt; &amp;a_grids, const Vector&lt; DistributionMapping &gt; &amp;a_dmap, const LPInfo &amp;a_info, const Vector&lt; EBFArrayBoxFactory const *&gt; &amp;a_factory)</argsstring>
        <name>define</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>a_geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; BoxArray &gt; &amp;</type>
          <declname>a_grids</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt; &amp;</type>
          <declname>a_dmap</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1LPInfo" kindref="compound">LPInfo</ref> &amp;</type>
          <declname>a_info</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1EBFArrayBoxFactory" kindref="compound">EBFArrayBoxFactory</ref> const *&gt; &amp;</type>
          <declname>a_factory</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.H" line="34" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.cpp" bodystart="44" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBABecLap_1a1b6b64134bb5a73a43da2d2aaefbbf53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLEBABecLap::setPhiOnCentroid</definition>
        <argsstring>()</argsstring>
        <name>setPhiOnCentroid</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.H" line="40" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.cpp" bodystart="103" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBABecLap_1ad3027675177497cdb23a984a50ebcb12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLEBABecLap::setScalars</definition>
        <argsstring>(Real a, Real b)</argsstring>
        <name>setScalars</name>
        <param>
          <type>Real</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.H" line="42" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.cpp" bodystart="109" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBABecLap_1a3897cf202c96a14a8d9733f25c5e750f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLEBABecLap::setACoeffs</definition>
        <argsstring>(int amrlev, const MultiFab &amp;alpha)</argsstring>
        <name>setACoeffs</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>alpha</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.H" line="43" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.cpp" bodystart="123" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBABecLap_1a4c998b02361b80cb5324775e3d58f90b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLEBABecLap::setACoeffs</definition>
        <argsstring>(int amrlev, Real alpha)</argsstring>
        <name>setACoeffs</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>alpha</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.H" line="44" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.cpp" bodystart="130" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBABecLap_1ae025087505b611d886e4ce39371d6e21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLEBABecLap::setBCoeffs</definition>
        <argsstring>(int amrlev, const Array&lt; MultiFab const *, AMREX_SPACEDIM &gt; &amp;beta, Location a_beta_loc)</argsstring>
        <name>setBCoeffs</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> const *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>beta</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLLinOp_1a07cd0a7c45d6542e33a5d97aefe5bab3" kindref="member">Location</ref></type>
          <declname>a_beta_loc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.H" line="46" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.cpp" bodystart="137" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBABecLap_1aa85c8346fd88d47cf525b9ebd2d64322" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLEBABecLap::setBCoeffs</definition>
        <argsstring>(int amrlev, const Array&lt; MultiFab const *, AMREX_SPACEDIM &gt; &amp;beta)</argsstring>
        <name>setBCoeffs</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> const *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>beta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.H" line="48" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.H" bodystart="48" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBABecLap_1a9088117f62b7fdf5ddf44a3cccea40eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLEBABecLap::setBCoeffs</definition>
        <argsstring>(int amrlev, Real beta)</argsstring>
        <name>setBCoeffs</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>beta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.H" line="51" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.cpp" bodystart="163" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBABecLap_1a41a0bab0f39a7886bee16b3db3253ef7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLEBABecLap::setBCoeffs</definition>
        <argsstring>(int amrlev, Vector&lt; Real &gt; const &amp;beta)</argsstring>
        <name>setBCoeffs</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; const &amp;</type>
          <declname>beta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.H" line="52" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.cpp" bodystart="173" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBABecLap_1a780796d3dee5dfa89cba56c05383868d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLEBABecLap::setEBDirichlet</definition>
        <argsstring>(int amrlev, const MultiFab &amp;phi, const MultiFab &amp;beta)</argsstring>
        <name>setEBDirichlet</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>beta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.H" line="55" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.cpp" bodystart="186" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBABecLap_1aaa5d24895fc813690a700fff13302d30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLEBABecLap::setEBDirichlet</definition>
        <argsstring>(int amrlev, const MultiFab &amp;phi, Real beta)</argsstring>
        <name>setEBDirichlet</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>beta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.H" line="56" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.cpp" bodystart="258" bodyend="310"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBABecLap_1a21036dcdb342fa89b6bc11b0cf730d04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLEBABecLap::setEBDirichlet</definition>
        <argsstring>(int amrlev, const MultiFab &amp;phi, Vector&lt; Real &gt; const &amp;beta)</argsstring>
        <name>setEBDirichlet</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; const &amp;</type>
          <declname>beta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.H" line="57" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.cpp" bodystart="313" bodyend="369"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBABecLap_1a9acab9bf4580bb611d63434f8e2daeed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLEBABecLap::setEBHomogDirichlet</definition>
        <argsstring>(int amrlev, const MultiFab &amp;beta)</argsstring>
        <name>setEBHomogDirichlet</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>beta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.H" line="60" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.cpp" bodystart="372" bodyend="438"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBABecLap_1a69dc896ed1e3c373ffed1364c14b39ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLEBABecLap::setEBHomogDirichlet</definition>
        <argsstring>(int amrlev, Real beta)</argsstring>
        <name>setEBHomogDirichlet</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>beta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.H" line="61" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.cpp" bodystart="441" bodyend="493"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBABecLap_1a367adfeb7192bf75233d0d3176eb8fd9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLEBABecLap::setEBHomogDirichlet</definition>
        <argsstring>(int amrlev, Vector&lt; Real &gt; const &amp;beta)</argsstring>
        <name>setEBHomogDirichlet</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; const &amp;</type>
          <declname>beta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.H" line="62" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.cpp" bodystart="496" bodyend="552"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBABecLap_1a2f6702ea1b79e9775bf8937f165ec6fd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>virtual int amrex::MLEBABecLap::getNComp</definition>
        <argsstring>() const override</argsstring>
        <name>getNComp</name>
        <reimplements refid="classamrex_1_1MLLinOp_1a525b102eb592e2b44a864c62e64e9566">getNComp</reimplements>
        <reimplementedby refid="classamrex_1_1MLEBTensorOp_1ad5e85d6b70f2ee501328d4ec5efb0771">getNComp</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.H" line="64" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.H" bodystart="64" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBABecLap_1a248e016a259d04af443355f6340e0898" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool amrex::MLEBABecLap::needsUpdate</definition>
        <argsstring>() const override</argsstring>
        <name>needsUpdate</name>
        <reimplements refid="classamrex_1_1MLCellABecLap_1adb891ed98442838db52ab71e703ff752">needsUpdate</reimplements>
        <reimplementedby refid="classamrex_1_1MLEBTensorOp_1ab6dd50ea71733ee23625ef3fe6634d98">needsUpdate</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.H" line="66" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.H" bodystart="66" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBABecLap_1ad6b4be6cef1783fdb223e5aa7eb50343" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLEBABecLap::update</definition>
        <argsstring>() override</argsstring>
        <name>update</name>
        <reimplements refid="classamrex_1_1MLCellABecLap_1aa107a7270bd64cf582e25812c5e5cbab">update</reimplements>
        <reimplementedby refid="classamrex_1_1MLEBTensorOp_1a3c4aac7c4c8cec7458fd1b5b3ac8c3f4">update</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.H" line="69" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.cpp" bodystart="1537" bodyend="1568"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBABecLap_1a95879abefc0ff8610b6534d919892a1a" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &gt; &gt;</type>
        <definition>std::unique_ptr&lt; FabFactory&lt; FArrayBox &gt; &gt; amrex::MLEBABecLap::makeFactory</definition>
        <argsstring>(int amrlev, int mglev) const final override</argsstring>
        <name>makeFactory</name>
        <reimplements refid="classamrex_1_1MLLinOp_1ac31926ba837b440475e0715a8fa4b87b">makeFactory</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.H" line="71" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.cpp" bodystart="35" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBABecLap_1a8d6575333ae596ac283e95b748fb84b4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool amrex::MLEBABecLap::isCrossStencil</definition>
        <argsstring>() const override</argsstring>
        <name>isCrossStencil</name>
        <reimplements refid="classamrex_1_1MLCellLinOp_1af6f760fa4c14171371737ac10d0e2c02">isCrossStencil</reimplements>
        <reimplementedby refid="classamrex_1_1MLEBTensorOp_1a6fd32c1815462061d634ad81818e348f">isCrossStencil</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.H" line="73" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.H" bodystart="73" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBABecLap_1a0dd52a0063675d0af5cd1e3bb8576a24" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLEBABecLap::applyBC</definition>
        <argsstring>(int amrlev, int mglev, MultiFab &amp;in, BCMode bc_mode, StateMode s_mode, const MLMGBndry *bndry=nullptr, bool skip_fillboundary=false) const final override</argsstring>
        <name>applyBC</name>
        <reimplements refid="classamrex_1_1MLCellLinOp_1ae77f68c02a722cf55b176d17e2c49a90">applyBC</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLLinOp_1a5aa01a1ef6b0b3a471f02f65ae4b4884" kindref="member">BCMode</ref></type>
          <declname>bc_mode</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLLinOp_1a1f2821b4a51da49d862dae1e757bb8c3" kindref="member">StateMode</ref></type>
          <declname>s_mode</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MLMGBndry" kindref="compound">MLMGBndry</ref> *</type>
          <declname>bndry</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>skip_fillboundary</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.H" line="75" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.cpp" bodystart="1364" bodyend="1525"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBABecLap_1a8e392e42b5c238124145af83776d575a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLEBABecLap::apply</definition>
        <argsstring>(int amrlev, int mglev, MultiFab &amp;out, MultiFab &amp;in, BCMode bc_mode, StateMode s_mode, const MLMGBndry *bndry=nullptr) const override</argsstring>
        <name>apply</name>
        <reimplements refid="classamrex_1_1MLCellLinOp_1a62ea55fae7824c00b3237cf57616dd1d">apply</reimplements>
        <reimplementedby refid="classamrex_1_1MLEBTensorOp_1a492bdb86a17eff7aa7b01a99d68eefed">apply</reimplementedby>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLLinOp_1a5aa01a1ef6b0b3a471f02f65ae4b4884" kindref="member">BCMode</ref></type>
          <declname>bc_mode</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLLinOp_1a1f2821b4a51da49d862dae1e757bb8c3" kindref="member">StateMode</ref></type>
          <declname>s_mode</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MLMGBndry" kindref="compound">MLMGBndry</ref> *</type>
          <declname>bndry</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.H" line="77" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.cpp" bodystart="1528" bodyend="1534"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBABecLap_1afc09237149ffffd61a4fc209955f9ff8" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLEBABecLap::compGrad</definition>
        <argsstring>(int amrlev, const Array&lt; MultiFab *, AMREX_SPACEDIM &gt; &amp;grad, MultiFab &amp;sol, Location loc) const final override</argsstring>
        <name>compGrad</name>
        <reimplements refid="classamrex_1_1MLCellLinOp_1aead98967987fb3826008fc69f3270247">compGrad</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>grad</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLLinOp_1a07cd0a7c45d6542e33a5d97aefe5bab3" kindref="member">Location</ref></type>
          <declname>loc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.H" line="79" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.cpp" bodystart="1086" bodyend="1207"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBABecLap_1a10d9a42df59b0c48c0de0bc3a2b41cca" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLEBABecLap::prepareForSolve</definition>
        <argsstring>() override</argsstring>
        <name>prepareForSolve</name>
        <reimplements refid="classamrex_1_1MLCellABecLap_1a7d6d2646e9f6afaf7ed70bf0c86fa762">prepareForSolve</reimplements>
        <reimplementedby refid="classamrex_1_1MLEBTensorOp_1adb58fe08c96787422aaf6449a03a76e8">prepareForSolve</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.H" line="82" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.cpp" bodystart="634" bodyend="674"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBABecLap_1accc281e18237ce18823e3a1a00cbbf01" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool amrex::MLEBABecLap::isSingular</definition>
        <argsstring>(int amrlev) const override</argsstring>
        <name>isSingular</name>
        <reimplements refid="classamrex_1_1MLLinOp_1aa8d6ef9e77180f9076ef5cb83f48bb50">isSingular</reimplements>
        <reimplementedby refid="classamrex_1_1MLEBTensorOp_1abe98c1ca87f919a66405ece51d590f07">isSingular</reimplementedby>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.H" line="83" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.H" bodystart="83" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBABecLap_1a74d6ab8dcd6375bed793437c83271aaa" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool amrex::MLEBABecLap::isBottomSingular</definition>
        <argsstring>() const override</argsstring>
        <name>isBottomSingular</name>
        <reimplements refid="classamrex_1_1MLLinOp_1aa6ff4935f1246d7c94ac38dc65c25d7d">isBottomSingular</reimplements>
        <reimplementedby refid="classamrex_1_1MLEBTensorOp_1a82e9a304ae27837aa45c9215df9d2b15">isBottomSingular</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.H" line="84" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.H" bodystart="84" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBABecLap_1ae757c91789ec2b174e27f330d200c8f0" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLEBABecLap::Fapply</definition>
        <argsstring>(int amrlev, int mglev, MultiFab &amp;out, const MultiFab &amp;in) const final override</argsstring>
        <name>Fapply</name>
        <reimplements refid="classamrex_1_1MLCellLinOp_1a34a85d0cc1fc408ad4dc4b3509cb9917">Fapply</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.H" line="85" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.cpp" bodystart="677" bodyend="807"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBABecLap_1a6d19a8694d9c4ef50a169f50822220e4" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLEBABecLap::Fsmooth</definition>
        <argsstring>(int amrlev, int mglev, MultiFab &amp;sol, const MultiFab &amp;rhs, int redblack) const final override</argsstring>
        <name>Fsmooth</name>
        <reimplements refid="classamrex_1_1MLCellLinOp_1a6f2e4279fbe6ebbea1e903fb0aafc745">Fsmooth</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>redblack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.H" line="86" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.cpp" bodystart="810" bodyend="967"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBABecLap_1a200c1fea9d1ff4f7f3f6cc97a645bce8" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLEBABecLap::FFlux</definition>
        <argsstring>(int amrlev, const MFIter &amp;mfi, const Array&lt; FArrayBox *, AMREX_SPACEDIM &gt; &amp;flux, const FArrayBox &amp;sol, Location loc, const int face_only=0) const final override</argsstring>
        <name>FFlux</name>
        <reimplements refid="classamrex_1_1MLCellLinOp_1a984719ccb019be3050750f57138557b0">FFlux</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>flux</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLLinOp_1a07cd0a7c45d6542e33a5d97aefe5bab3" kindref="member">Location</ref></type>
          <declname>loc</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>face_only</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.H" line="87" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.cpp" bodystart="970" bodyend="1083"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBABecLap_1a1ba4a6db3bd8895f95ac90ff5decc461" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLEBABecLap::normalize</definition>
        <argsstring>(int amrlev, int mglev, MultiFab &amp;mf) const final override</argsstring>
        <name>normalize</name>
        <reimplements refid="classamrex_1_1MLLinOp_1a86207e36440100ba012296cb95b51713">normalize</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.H" line="92" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.cpp" bodystart="1210" bodyend="1296"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBABecLap_1ad851a01b301637515a70e6902fe56d40" prot="public" static="no" const="yes" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>Real</type>
        <definition>virtual Real amrex::MLEBABecLap::getAScalar</definition>
        <argsstring>() const final override</argsstring>
        <name>getAScalar</name>
        <reimplements refid="classamrex_1_1MLCellABecLap_1a7c4aeebd8ef17280170ed19e619f076a">getAScalar</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.H" line="94" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.H" bodystart="94" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBABecLap_1a31195eef598735476044e840046bd295" prot="public" static="no" const="yes" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>Real</type>
        <definition>virtual Real amrex::MLEBABecLap::getBScalar</definition>
        <argsstring>() const final override</argsstring>
        <name>getBScalar</name>
        <reimplements refid="classamrex_1_1MLCellABecLap_1a0e67dc87e4b048beb5f44d38b3ccebfe">getBScalar</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.H" line="95" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.H" bodystart="95" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBABecLap_1aaebd085dc9e01abe1c027b57e5c89971" prot="public" static="no" const="yes" explicit="no" inline="yes" final="yes" virt="virtual">
        <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> const  *</type>
        <definition>virtual MultiFab const* amrex::MLEBABecLap::getACoeffs</definition>
        <argsstring>(int amrlev, int mglev) const final override</argsstring>
        <name>getACoeffs</name>
        <reimplements refid="classamrex_1_1MLCellABecLap_1a066785981b2814b49cd7ccc98ff01831">getACoeffs</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.H" line="96" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.H" bodystart="96" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBABecLap_1add0dbd605a9841007492a8d9c3e4b007" prot="public" static="no" const="yes" explicit="no" inline="yes" final="yes" virt="virtual">
        <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> const  *, AMREX_SPACEDIM &gt;</type>
        <definition>virtual Array&lt;MultiFab const*,AMREX_SPACEDIM&gt; amrex::MLEBABecLap::getBCoeffs</definition>
        <argsstring>(int amrlev, int mglev) const final override</argsstring>
        <name>getBCoeffs</name>
        <reimplements refid="classamrex_1_1MLCellABecLap_1aacb5d55dc92f8d82e56fa0636c9d5a3e">getBCoeffs</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.H" line="98" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.H" bodystart="98" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBABecLap_1acd7d1f624947d653cfb4b3ea3f2fd193" prot="public" static="no" const="yes" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1MLLinOp" kindref="compound">MLLinOp</ref> &gt;</type>
        <definition>virtual std::unique_ptr&lt;MLLinOp&gt; amrex::MLEBABecLap::makeNLinOp</definition>
        <argsstring>(int) const final override</argsstring>
        <name>makeNLinOp</name>
        <reimplements refid="classamrex_1_1MLLinOp_1af7992c664d65948c99e3661e6d23a646">makeNLinOp</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.H" line="101" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.H" bodystart="101" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBABecLap_1a4e02281f596d4f8d9fc0ccad62f8525b" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLEBABecLap::restriction</definition>
        <argsstring>(int, int, MultiFab &amp;crse, MultiFab &amp;fine) const final override</argsstring>
        <name>restriction</name>
        <reimplements refid="classamrex_1_1MLCellLinOp_1aa95312f91d2baeeba018a231d162ad9a">restriction</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>amrlev</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>cmglev</defname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>fine</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.H" line="106" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.cpp" bodystart="1299" bodyend="1304"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBABecLap_1a15a2cb048460b6619e61e66fb3a8e3d5" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLEBABecLap::interpolation</definition>
        <argsstring>(int amrlev, int fmglev, MultiFab &amp;fine, const MultiFab &amp;crse) const final override</argsstring>
        <name>interpolation</name>
        <reimplements refid="classamrex_1_1MLCellLinOp_1a0044458b3dd79241c2b74483b70cb7e7">interpolation</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fmglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>crse</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.H" line="108" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.cpp" bodystart="1307" bodyend="1351"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBABecLap_1a184c8bb62e01581cfc6d1d936f7eeca0" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLEBABecLap::averageDownSolutionRHS</definition>
        <argsstring>(int camrlev, MultiFab &amp;crse_sol, MultiFab &amp;crse_rhs, const MultiFab &amp;fine_sol, const MultiFab &amp;fine_rhs) final override</argsstring>
        <name>averageDownSolutionRHS</name>
        <reimplements refid="classamrex_1_1MLCellLinOp_1adfefa1b34d6988c4bf97957616b61c8f">averageDownSolutionRHS</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>camrlev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>crse_sol</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>crse_rhs</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>fine_sol</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>fine_rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.H" line="110" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.cpp" bodystart="1354" bodyend="1361"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBABecLap_1a1a326e5b4b3cac2e30d3ea2ec8052fe3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLEBABecLap::getEBFluxes</definition>
        <argsstring>(const Vector&lt; MultiFab *&gt; &amp;a_flux, const Vector&lt; MultiFab *&gt; &amp;a_sol) const override</argsstring>
        <name>getEBFluxes</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *&gt; &amp;</type>
          <declname>a_flux</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *&gt; &amp;</type>
          <declname>a_sol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.H" line="113" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.cpp" bodystart="1571" bodyend="1641"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classamrex_1_1MLEBABecLap_1a566f171eb405174c2eea99667a76cdb1" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::MLEBABecLap::isEBDirichlet</definition>
        <argsstring>() const noexcept</argsstring>
        <name>isEBDirichlet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.H" line="149" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.H" bodystart="149" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBABecLap_1aaf9d51bdc102c2e9e01cd3ab369a68b7" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLEBABecLap::averageDownCoeffsSameAmrLevel</definition>
        <argsstring>(int amrlev, Vector&lt; MultiFab &gt; &amp;a, Vector&lt; Array&lt; MultiFab, AMREX_SPACEDIM &gt; &gt; &amp;b, const Vector&lt; MultiFab *&gt; &amp;b_eb)</argsstring>
        <name>averageDownCoeffsSameAmrLevel</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>, AMREX_SPACEDIM &gt; &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *&gt; &amp;</type>
          <declname>b_eb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.H" line="151" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.cpp" bodystart="580" bodyend="608"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBABecLap_1a55ed8c27b04966126b3bd76c92735dbf" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLEBABecLap::averageDownCoeffs</definition>
        <argsstring>()</argsstring>
        <name>averageDownCoeffs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.H" line="154" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.cpp" bodystart="555" bodyend="577"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBABecLap_1a92fdeee03f9af3866563ba880cd81879" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLEBABecLap::averageDownCoeffsToCoarseAmrLevel</definition>
        <argsstring>(int flev)</argsstring>
        <name>averageDownCoeffsToCoarseAmrLevel</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>flev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.H" line="155" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.cpp" bodystart="611" bodyend="631"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="3070">
        <label>amrex::MLEBTensorOp</label>
        <link refid="classamrex_1_1MLEBTensorOp"/>
        <childnode refid="3066" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3066">
        <label>amrex::MLEBABecLap</label>
        <link refid="classamrex_1_1MLEBABecLap"/>
        <childnode refid="3067" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3069">
        <label>amrex::MLLinOp</label>
        <link refid="classamrex_1_1MLLinOp"/>
      </node>
      <node id="3067">
        <label>amrex::MLCellABecLap</label>
        <link refid="classamrex_1_1MLCellABecLap"/>
        <childnode refid="3068" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3068">
        <label>amrex::MLCellLinOp</label>
        <link refid="classamrex_1_1MLCellLinOp"/>
        <childnode refid="3069" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3107">
        <label>std::vector&lt; MPI_Status, std::allocator&lt; MPI_Status &gt; &gt;</label>
      </node>
      <node id="3087">
        <label>amrex::FabArrayBase::CacheStats</label>
        <link refid="structamrex_1_1FabArrayBase_1_1CacheStats"/>
        <childnode refid="3088" relation="usage">
          <edgelabel>name</edgelabel>
        </childnode>
      </node>
      <node id="3090">
        <label>amrex::FabArrayBase::FabArrayStats</label>
        <link refid="structamrex_1_1FabArrayBase_1_1FabArrayStats"/>
      </node>
      <node id="3102">
        <label>amrex::ArenaInfo</label>
        <link refid="structamrex_1_1ArenaInfo"/>
      </node>
      <node id="3083">
        <label>amrex::IntVect</label>
        <link refid="classamrex_1_1IntVect"/>
        <childnode refid="3083" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
      </node>
      <node id="3138">
        <label>amrex::Vector&lt; std::unique_ptr&lt; amrex::MultiFab &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3139" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3082">
        <label>Real</label>
      </node>
      <node id="3108">
        <label>amrex::Vector&lt; MPI_Request &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3109" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3100">
        <label>amrex::DataAllocator</label>
        <link refid="structamrex_1_1DataAllocator"/>
        <childnode refid="3101" relation="usage">
          <edgelabel>m_arena</edgelabel>
        </childnode>
      </node>
      <node id="3135">
        <label>std::vector&lt; amrex::Vector&lt; amrex::MultiFab &gt;, std::allocator&lt; amrex::Vector&lt; amrex::MultiFab &gt; &gt; &gt;</label>
      </node>
      <node id="3099">
        <label>std::vector&lt; char *, std::allocator&lt; char *&gt; &gt;</label>
      </node>
      <node id="3116">
        <label>std::vector&lt; Array&lt; BCType, AMREX_SPACEDIM &gt;, std::allocator&lt; Array&lt; BCType, AMREX_SPACEDIM &gt; &gt; &gt;</label>
      </node>
      <node id="3104">
        <label>std::vector&lt; std::string, std::allocator&lt; std::string &gt; &gt;</label>
      </node>
      <node id="3101">
        <label>amrex::Arena</label>
        <link refid="classamrex_1_1Arena"/>
        <childnode refid="3102" relation="usage">
          <edgelabel>arena_info</edgelabel>
        </childnode>
      </node>
      <node id="3091">
        <label>amrex::Vector&lt; int &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3092" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3088">
        <label>string</label>
      </node>
      <node id="3110">
        <label>amrex::Periodicity</label>
        <link refid="classamrex_1_1Periodicity"/>
        <childnode refid="3083" relation="usage">
          <edgelabel>period</edgelabel>
        </childnode>
      </node>
      <node id="3124">
        <label>amrex::Vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::MLCellLinOp::BndryCondLoc &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3125" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3112">
        <label>std::vector&lt; Array&lt; int, AMREX_SPACEDIM &gt;, std::allocator&lt; Array&lt; int, AMREX_SPACEDIM &gt; &gt; &gt;</label>
      </node>
      <node id="3125">
        <label>std::vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::MLCellLinOp::BndryCondLoc &gt; &gt;, std::allocator&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::MLCellLinOp::BndryCondLoc &gt; &gt; &gt; &gt;</label>
      </node>
      <node id="3077">
        <label>amrex::Vector&lt; amrex::Vector&lt; BoxArray &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3078" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3075">
        <label>amrex::Vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::FabFactory&lt; amrex::FArrayBox &gt; &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3076" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3080">
        <label>std::vector&lt; amrex::Vector&lt; amrex::Geometry &gt;, std::allocator&lt; amrex::Vector&lt; amrex::Geometry &gt; &gt; &gt;</label>
      </node>
      <node id="3105">
        <label>amrex::FabArray&lt; FAB &gt;::ShMem</label>
        <link refid="structamrex_1_1FabArray_1_1ShMem"/>
      </node>
      <node id="3129">
        <label>std::vector&lt; std::unique_ptr&lt; amrex::BndryRegister &gt;, std::allocator&lt; std::unique_ptr&lt; amrex::BndryRegister &gt; &gt; &gt;</label>
      </node>
      <node id="3079">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::Geometry &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3080" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3120">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::BndryRegister &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3121" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3081">
        <label>amrex::RealVect</label>
        <link refid="classamrex_1_1RealVect"/>
        <childnode refid="3081" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
        <childnode refid="3082" relation="usage">
          <edgelabel>vect</edgelabel>
        </childnode>
      </node>
      <node id="3098">
        <label>amrex::Vector&lt; char *&gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3099" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3071">
        <label>amrex::MLEBABecLap</label>
        <link refid="classamrex_1_1MLEBABecLap"/>
        <childnode refid="3072" relation="public-inheritance">
        </childnode>
        <childnode refid="3134" relation="usage">
          <edgelabel>m_a_coeffs</edgelabel>
        </childnode>
        <childnode refid="3136" relation="usage">
          <edgelabel>m_cc_mask</edgelabel>
        </childnode>
        <childnode refid="3091" relation="usage">
          <edgelabel>m_is_singular</edgelabel>
        </childnode>
        <childnode refid="3138" relation="usage">
          <edgelabel>m_eb_phi</edgelabel>
        </childnode>
        <childnode refid="3140" relation="usage">
          <edgelabel>m_b_coeffs</edgelabel>
        </childnode>
        <childnode refid="3142" relation="usage">
          <edgelabel>m_eb_b_coeffs</edgelabel>
        </childnode>
        <childnode refid="3082" relation="usage">
          <edgelabel>m_a_scalar</edgelabel>
          <edgelabel>m_b_scalar</edgelabel>
        </childnode>
      </node>
      <node id="3142">
        <label>amrex::Vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::MultiFab &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3143" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3122">
        <label>amrex::Vector&lt; amrex::YAFluxRegister &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3123" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3113">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::DistributionMapping &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3114" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3141">
        <label>std::vector&lt; amrex::Vector&lt; Array&lt; amrex::MultiFab, AMREX_SPACEDIM &gt; &gt;, std::allocator&lt; amrex::Vector&lt; Array&lt; amrex::MultiFab, AMREX_SPACEDIM &gt; &gt; &gt; &gt;</label>
      </node>
      <node id="3123">
        <label>std::vector&lt; amrex::YAFluxRegister, std::allocator&lt; amrex::YAFluxRegister &gt; &gt;</label>
      </node>
      <node id="3117">
        <label>amrex::Vector&lt; amrex::IntVect &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3118" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3139">
        <label>std::vector&lt; std::unique_ptr&lt; amrex::MultiFab &gt;, std::allocator&lt; std::unique_ptr&lt; amrex::MultiFab &gt; &gt; &gt;</label>
      </node>
      <node id="3109">
        <label>std::vector&lt; MPI_Request, std::allocator&lt; MPI_Request &gt; &gt;</label>
      </node>
      <node id="3092">
        <label>std::vector&lt; int, std::allocator&lt; int &gt; &gt;</label>
      </node>
      <node id="3128">
        <label>amrex::Vector&lt; std::unique_ptr&lt; amrex::BndryRegister &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3129" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3074">
        <label>amrex::MLLinOp</label>
        <link refid="classamrex_1_1MLLinOp"/>
        <childnode refid="3075" relation="usage">
          <edgelabel>m_factory</edgelabel>
        </childnode>
        <childnode refid="3077" relation="usage">
          <edgelabel>m_grids</edgelabel>
        </childnode>
        <childnode refid="3079" relation="usage">
          <edgelabel>m_geom</edgelabel>
        </childnode>
        <childnode refid="3081" relation="usage">
          <edgelabel>m_coarse_bc_loc</edgelabel>
        </childnode>
        <childnode refid="3083" relation="usage">
          <edgelabel>m_ixtype</edgelabel>
        </childnode>
        <childnode refid="3084" relation="usage">
          <edgelabel>m_coarse_data_for_bc</edgelabel>
        </childnode>
        <childnode refid="3091" relation="usage">
          <edgelabel>m_domain_covered</edgelabel>
          <edgelabel>m_amr_ref_ratio</edgelabel>
          <edgelabel>m_num_mg_levels</edgelabel>
        </childnode>
        <childnode refid="3111" relation="usage">
          <edgelabel>m_hi_inhomog_neumann</edgelabel>
          <edgelabel>m_lo_inhomog_neumann</edgelabel>
        </childnode>
        <childnode refid="3113" relation="usage">
          <edgelabel>m_dmap</edgelabel>
        </childnode>
        <childnode refid="3115" relation="usage">
          <edgelabel>m_hibc</edgelabel>
          <edgelabel>m_lobc</edgelabel>
        </childnode>
        <childnode refid="3117" relation="usage">
          <edgelabel>mg_coarsen_ratio_vec</edgelabel>
        </childnode>
        <childnode refid="3074" relation="usage">
          <edgelabel>m_parent</edgelabel>
        </childnode>
        <childnode refid="3119" relation="usage">
          <edgelabel>info</edgelabel>
        </childnode>
      </node>
      <node id="3134">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::MultiFab &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3135" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3137">
        <label>std::vector&lt; amrex::Vector&lt; amrex::iMultiFab &gt;, std::allocator&lt; amrex::Vector&lt; amrex::iMultiFab &gt; &gt; &gt;</label>
      </node>
      <node id="3127">
        <label>std::vector&lt; amrex::Vector&lt; Array&lt; amrex::MultiMask, 2 *AMREX_SPACEDIM &gt; &gt;, std::allocator&lt; amrex::Vector&lt; Array&lt; amrex::MultiMask, 2 *AMREX_SPACEDIM &gt; &gt; &gt; &gt;</label>
      </node>
      <node id="3115">
        <label>amrex::Vector&lt; Array&lt; BCType, AMREX_SPACEDIM &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3116" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3094">
        <label>amrex::DistributionMapping::RefID</label>
        <link refid="structamrex_1_1DistributionMapping_1_1RefID"/>
        <childnode refid="3095" relation="usage">
          <edgelabel>data</edgelabel>
        </childnode>
      </node>
      <node id="3106">
        <label>amrex::Vector&lt; MPI_Status &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3107" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3119">
        <label>amrex::LPInfo</label>
        <link refid="structamrex_1_1LPInfo"/>
      </node>
      <node id="3131">
        <label>std::vector&lt; std::unique_ptr&lt; amrex::MLMGBndry &gt;, std::allocator&lt; std::unique_ptr&lt; amrex::MLMGBndry &gt; &gt; &gt;</label>
      </node>
      <node id="3072">
        <label>amrex::MLCellABecLap</label>
        <link refid="classamrex_1_1MLCellABecLap"/>
        <childnode refid="3073" relation="public-inheritance">
        </childnode>
        <childnode refid="3132" relation="usage">
          <edgelabel>m_overset_mask</edgelabel>
        </childnode>
      </node>
      <node id="3095">
        <label>amrex::DistributionMapping::Ref</label>
        <link refid="structamrex_1_1DistributionMapping_1_1Ref"/>
        <childnode refid="3091" relation="usage">
          <edgelabel>m_index_array</edgelabel>
          <edgelabel>m_pmap</edgelabel>
        </childnode>
      </node>
      <node id="3103">
        <label>amrex::Vector&lt; std::string &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3104" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3111">
        <label>amrex::Vector&lt; Array&lt; int, AMREX_SPACEDIM &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3112" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3132">
        <label>amrex::Vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::iMultiFab &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3133" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3089">
        <label>amrex::DistributionMapping</label>
        <link refid="classamrex_1_1DistributionMapping"/>
      </node>
      <node id="3093">
        <label>amrex::FabArrayBase::BDKey</label>
        <link refid="structamrex_1_1FabArrayBase_1_1BDKey"/>
        <childnode refid="3094" relation="usage">
          <edgelabel>m_dm_id</edgelabel>
        </childnode>
      </node>
      <node id="3118">
        <label>std::vector&lt; amrex::IntVect, std::allocator&lt; amrex::IntVect &gt; &gt;</label>
      </node>
      <node id="3143">
        <label>std::vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::MultiFab &gt; &gt;, std::allocator&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::MultiFab &gt; &gt; &gt; &gt;</label>
      </node>
      <node id="3136">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::iMultiFab &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3137" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3126">
        <label>amrex::Vector&lt; amrex::Vector&lt; Array&lt; amrex::MultiMask, 2 *AMREX_SPACEDIM &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3127" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3084">
        <label>amrex::MultiFab</label>
        <link refid="classamrex_1_1MultiFab"/>
        <childnode refid="3085" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3121">
        <label>std::vector&lt; amrex::Vector&lt; amrex::BndryRegister &gt;, std::allocator&lt; amrex::Vector&lt; amrex::BndryRegister &gt; &gt; &gt;</label>
      </node>
      <node id="3073">
        <label>amrex::MLCellLinOp</label>
        <link refid="classamrex_1_1MLCellLinOp"/>
        <childnode refid="3074" relation="public-inheritance">
        </childnode>
        <childnode refid="3120" relation="usage">
          <edgelabel>m_undrrelxr</edgelabel>
        </childnode>
        <childnode refid="3122" relation="usage">
          <edgelabel>m_fluxreg</edgelabel>
        </childnode>
        <childnode refid="3124" relation="usage">
          <edgelabel>m_bcondloc</edgelabel>
        </childnode>
        <childnode refid="3126" relation="usage">
          <edgelabel>m_maskvals</edgelabel>
        </childnode>
        <childnode refid="3128" relation="usage">
          <edgelabel>m_crse_sol_br</edgelabel>
          <edgelabel>m_crse_cor_br</edgelabel>
        </childnode>
        <childnode refid="3130" relation="usage">
          <edgelabel>m_bndry_sol</edgelabel>
          <edgelabel>m_bndry_cor</edgelabel>
        </childnode>
      </node>
      <node id="3085">
        <label>amrex::FabArray&lt; FArrayBox &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="3086" relation="public-inheritance">
        </childnode>
        <childnode refid="3096" relation="usage">
          <edgelabel>fb_recv_size</edgelabel>
        </childnode>
        <childnode refid="3098" relation="usage">
          <edgelabel>fb_recv_data</edgelabel>
          <edgelabel>fb_send_data</edgelabel>
        </childnode>
        <childnode refid="3083" relation="usage">
          <edgelabel>fb_nghost</edgelabel>
        </childnode>
        <childnode refid="3100" relation="usage">
          <edgelabel>m_dallocator</edgelabel>
        </childnode>
        <childnode refid="3091" relation="usage">
          <edgelabel>fb_recv_from</edgelabel>
        </childnode>
        <childnode refid="3103" relation="usage">
          <edgelabel>m_tags</edgelabel>
        </childnode>
        <childnode refid="3105" relation="usage">
          <edgelabel>shmem</edgelabel>
        </childnode>
        <childnode refid="3106" relation="usage">
          <edgelabel>fb_recv_stat</edgelabel>
        </childnode>
        <childnode refid="3108" relation="usage">
          <edgelabel>fb_send_reqs</edgelabel>
          <edgelabel>fb_recv_reqs</edgelabel>
        </childnode>
        <childnode refid="3110" relation="usage">
          <edgelabel>fb_period</edgelabel>
        </childnode>
      </node>
      <node id="3096">
        <label>amrex::Vector&lt; std::size_t &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3097" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3130">
        <label>amrex::Vector&lt; std::unique_ptr&lt; amrex::MLMGBndry &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3131" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3086">
        <label>amrex::FabArrayBase</label>
        <link refid="classamrex_1_1FabArrayBase"/>
        <childnode refid="3087" relation="usage">
          <edgelabel>m_FBC_stats</edgelabel>
          <edgelabel>m_FPinfo_stats</edgelabel>
          <edgelabel>m_CFinfo_stats</edgelabel>
          <edgelabel>m_TAC_stats</edgelabel>
          <edgelabel>m_CPC_stats</edgelabel>
        </childnode>
        <childnode refid="3089" relation="usage">
          <edgelabel>distributionMap</edgelabel>
        </childnode>
        <childnode refid="3083" relation="usage">
          <edgelabel>n_filled</edgelabel>
          <edgelabel>n_grow</edgelabel>
          <edgelabel>comm_tile_size</edgelabel>
          <edgelabel>mfiter_tile_size</edgelabel>
          <edgelabel>mfghostiter_tile_size</edgelabel>
        </childnode>
        <childnode refid="3090" relation="usage">
          <edgelabel>m_FA_stats</edgelabel>
        </childnode>
        <childnode refid="3091" relation="usage">
          <edgelabel>indexArray</edgelabel>
        </childnode>
        <childnode refid="3093" relation="usage">
          <edgelabel>m_bdkey</edgelabel>
        </childnode>
      </node>
      <node id="3140">
        <label>amrex::Vector&lt; amrex::Vector&lt; Array&lt; amrex::MultiFab, AMREX_SPACEDIM &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3141" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3133">
        <label>std::vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::iMultiFab &gt; &gt;, std::allocator&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::iMultiFab &gt; &gt; &gt; &gt;</label>
      </node>
      <node id="3097">
        <label>std::vector&lt; std::size_t, std::allocator&lt; std::size_t &gt; &gt;</label>
      </node>
      <node id="3078">
        <label>std::vector&lt; amrex::Vector&lt; BoxArray &gt;, std::allocator&lt; amrex::Vector&lt; BoxArray &gt; &gt; &gt;</label>
      </node>
      <node id="3114">
        <label>std::vector&lt; amrex::Vector&lt; amrex::DistributionMapping &gt;, std::allocator&lt; amrex::Vector&lt; amrex::DistributionMapping &gt; &gt; &gt;</label>
      </node>
      <node id="3076">
        <label>std::vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::FabFactory&lt; amrex::FArrayBox &gt; &gt; &gt;, std::allocator&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::FabFactory&lt; amrex::FArrayBox &gt; &gt; &gt; &gt; &gt;</label>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.H" line="16" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.H" bodystart="14" bodyend="156"/>
    <listofallmembers>
      <member refid="classamrex_1_1MLLinOp_1a8effbacb86233a5334789092372a9bde" prot="protected" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>AMRRefRatio</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac80a224852d40e9dd01ef9e4d52cd1c9" prot="protected" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>AMRRefRatio</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a8e392e42b5c238124145af83776d575a" prot="public" virt="virtual"><scope>amrex::MLEBABecLap</scope><name>apply</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a0dd52a0063675d0af5cd1e3bb8576a24" prot="public" virt="virtual"><scope>amrex::MLEBABecLap</scope><name>applyBC</name></member>
      <member refid="classamrex_1_1MLCellABecLap_1a576364fc5fcadf5eb1b23a7a693fa3ba" prot="public" virt="virtual"><scope>amrex::MLEBABecLap</scope><name>applyInhomogNeumannTerm</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1af6190fe1b9d2ed218129e7ad6f4b4f64" prot="public" virt="virtual"><scope>amrex::MLEBABecLap</scope><name>applyMetricTerm</name></member>
      <member refid="classamrex_1_1MLCellABecLap_1ad9c4081306f2882750345d3161ca2261" prot="public" virt="virtual"><scope>amrex::MLEBABecLap</scope><name>applyOverset</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a55ed8c27b04966126b3bd76c92735dbf" prot="protected" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>averageDownCoeffs</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1aaf9d51bdc102c2e9e01cd3ab369a68b7" prot="protected" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>averageDownCoeffsSameAmrLevel</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a92fdeee03f9af3866563ba880cd81879" prot="protected" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>averageDownCoeffsToCoarseAmrLevel</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a184c8bb62e01581cfc6d1d936f7eeca0" prot="public" virt="virtual"><scope>amrex::MLEBABecLap</scope><name>averageDownSolutionRHS</name></member>
      <member refid="classamrex_1_1MLLinOp_1a5aa01a1ef6b0b3a471f02f65ae4b4884" prot="public" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>BCMode</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a622b7c2ecc46a6b476aba4fb470f3dcf" prot="protected" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>BCTuple</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac2e55c34bf6b5c0ed53d0ef6a4625a3f" prot="public" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>BCType</name></member>
      <member refid="classamrex_1_1MLLinOp_1a77b33530b316399f5fb5314a846d9b7e" prot="protected" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>BottomCommunicator</name></member>
      <member refid="classamrex_1_1MLLinOp_1a941ddfa6ec11cbd0a1c835007494b057" prot="protected" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>Communicator</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1acd6c78c0e6307234b1539ba81caadb9c" prot="public" virt="virtual"><scope>amrex::MLEBABecLap</scope><name>compFlux</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1afc09237149ffffd61a4fc209955f9ff8" prot="public" virt="virtual"><scope>amrex::MLEBABecLap</scope><name>compGrad</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a3c1832912375e08e8bd38775b6b532b3" prot="public" virt="virtual"><scope>amrex::MLEBABecLap</scope><name>correctionResidual</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a364e0a03d9922bf9dc15361248ed5a1b" prot="public" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>define</name></member>
      <member refid="classamrex_1_1MLCellABecLap_1acf81aa134d6acc149b73757189d16a10" prot="public" virt="non-virtual" ambiguityscope="amrex::MLCellABecLap::"><scope>amrex::MLEBABecLap</scope><name>define</name></member>
      <member refid="classamrex_1_1MLCellABecLap_1ab0367e6ee533865b423123eeb4e6e97b" prot="public" virt="non-virtual" ambiguityscope="amrex::MLCellABecLap::"><scope>amrex::MLEBABecLap</scope><name>define</name></member>
      <member refid="classamrex_1_1MLLinOp_1a2940aad54767b9998943db75ae57dfba" prot="public" virt="non-virtual" ambiguityscope="amrex::MLLinOp::"><scope>amrex::MLEBABecLap</scope><name>define</name></member>
      <member refid="classamrex_1_1MLLinOp_1a355691d7877fb9a9aabc65db76d0f2b4" prot="protected" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>doAgglomeration</name></member>
      <member refid="classamrex_1_1MLLinOp_1a79f98e0cf06f695dbad6052c5d53e00b" prot="protected" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>doConsolidation</name></member>
      <member refid="classamrex_1_1MLLinOp_1ae920d0e3602dd26d57876b6d6a6843e4" prot="protected" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>doSemicoarsening</name></member>
      <member refid="classamrex_1_1MLLinOp_1a831ab67f9a58e0f452f52b176219c1a0" prot="protected" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>enforceSingularSolvable</name></member>
      <member refid="classamrex_1_1MLLinOp_1a0eb75c39ff8e715b524d79442b83a3fb" prot="protected" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>Factory</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1ae757c91789ec2b174e27f330d200c8f0" prot="public" virt="virtual"><scope>amrex::MLEBABecLap</scope><name>Fapply</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a200c1fea9d1ff4f7f3f6cc97a645bce8" prot="public" virt="virtual"><scope>amrex::MLEBABecLap</scope><name>FFlux</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a10b043a8a06133e0f36f81231a7519d9" prot="public" virt="virtual"><scope>amrex::MLEBABecLap</scope><name>fillSolutionBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1ad00407760d4927438c355ba115aaad4e" prot="public" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>Finalize</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac94ee917e5350722a537af7e127984d3" prot="public" virt="virtual"><scope>amrex::MLEBABecLap</scope><name>fixUpResidualMask</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a6d19a8694d9c4ef50a169f50822220e4" prot="public" virt="virtual"><scope>amrex::MLEBABecLap</scope><name>Fsmooth</name></member>
      <member refid="classamrex_1_1MLLinOp_1a7b1da16499dc7b95e807a28757e0c094" prot="protected" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>Geom</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1aaebd085dc9e01abe1c027b57e5c89971" prot="public" virt="virtual"><scope>amrex::MLEBABecLap</scope><name>getACoeffs</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1ad851a01b301637515a70e6902fe56d40" prot="public" virt="virtual"><scope>amrex::MLEBABecLap</scope><name>getAScalar</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1add0dbd605a9841007492a8d9c3e4b007" prot="public" virt="virtual"><scope>amrex::MLEBABecLap</scope><name>getBCoeffs</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a31195eef598735476044e840046bd295" prot="public" virt="virtual"><scope>amrex::MLEBABecLap</scope><name>getBScalar</name></member>
      <member refid="classamrex_1_1MLLinOp_1a6d1ed393d8e089b8af021e80ead4267b" prot="public" virt="virtual"><scope>amrex::MLEBABecLap</scope><name>getDefaultBottomSolver</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a1a326e5b4b3cac2e30d3ea2ec8052fe3" prot="public" virt="virtual"><scope>amrex::MLEBABecLap</scope><name>getEBFluxes</name></member>
      <member refid="classamrex_1_1MLLinOp_1a29c32b42500a25348ee5331f44ab94ba" prot="public" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>getEnforceSingularSolvable</name></member>
      <member refid="classamrex_1_1MLCellABecLap_1a4dd161c7a7e335d397af47ec8a51f0d4" prot="public" virt="virtual"><scope>amrex::MLEBABecLap</scope><name>getFluxes</name></member>
      <member refid="classamrex_1_1MLCellABecLap_1a9879a1ecf8cb211813eda42fa2d616ab" prot="public" virt="virtual"><scope>amrex::MLEBABecLap</scope><name>getFluxes</name></member>
      <member refid="classamrex_1_1MLLinOp_1a1189e4016e7757083343a93649f102aa" prot="public" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>getMaxOrder</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a2f6702ea1b79e9775bf8937f165ec6fd" prot="public" virt="virtual"><scope>amrex::MLEBABecLap</scope><name>getNComp</name></member>
      <member refid="classamrex_1_1MLLinOp_1a53fabf0ebd4dd86e92a3c7e5a161f5a6" prot="public" virt="virtual"><scope>amrex::MLEBABecLap</scope><name>getNGrow</name></member>
      <member refid="classamrex_1_1MLCellABecLap_1acb4d23e32365a814323cdd4787884420" prot="public" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>getOversetMask</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac313a2de49bd67c23fad23d5c4045e70" prot="protected" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>HiBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1a85fa2f104bbfeaa73d55d589906ecd45" prot="protected" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>info</name></member>
      <member refid="classamrex_1_1MLLinOp_1a48b2fe73722eee0a1d50b6e0b9558174" prot="public" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>Initialize</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a15a2cb048460b6619e61e66fb3a8e3d5" prot="public" virt="virtual"><scope>amrex::MLEBABecLap</scope><name>interpolation</name></member>
      <member refid="classamrex_1_1MLLinOp_1aa1c6883eef4d4dc55d3a5fe5c921113a" prot="protected" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>isBottomActive</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a74d6ab8dcd6375bed793437c83271aaa" prot="public" virt="virtual"><scope>amrex::MLEBABecLap</scope><name>isBottomSingular</name></member>
      <member refid="classamrex_1_1MLLinOp_1aa42fd2dfa3b0133f2b20a99026549900" prot="protected" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>isCellCentered</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a8d6575333ae596ac283e95b748fb84b4" prot="public" virt="virtual"><scope>amrex::MLEBABecLap</scope><name>isCrossStencil</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a566f171eb405174c2eea99667a76cdb1" prot="protected" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>isEBDirichlet</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1accc281e18237ce18823e3a1a00cbbf01" prot="public" virt="virtual"><scope>amrex::MLEBABecLap</scope><name>isSingular</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a0152cd38e35f6a41dc3da2814b910f2b" prot="public" virt="virtual"><scope>amrex::MLEBABecLap</scope><name>isTensorOp</name></member>
      <member refid="classamrex_1_1MLLinOp_1a7ef6c8434223ac6e052359cd4f27fbe6" prot="protected" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>LoBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1a07cd0a7c45d6542e33a5d97aefe5bab3" prot="public" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>Location</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a48c0efb6e525e5c901c1ee34fa5119ca" prot="protected" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>m_a_coeffs</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1ac43a9c8728bb7861415d80283d41e064" prot="protected" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>m_a_scalar</name></member>
      <member refid="classamrex_1_1MLLinOp_1a42ca524eb4deca1132be683805d2d7ab" prot="protected" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>m_amr_ref_ratio</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1ad631dff72b03c8a0d629bd735a63078e" prot="protected" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>m_b_coeffs</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a1fb977f5a6b0c8682e5f658a4dc9db0c" prot="protected" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>m_b_scalar</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a20a2d5349510243c481d2b6ce1992f5c" prot="protected" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>m_bcondloc</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1afc12bcb23ed82f37ceae7da2d6f44eea" prot="protected" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>m_beta_loc</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a60785819fb0c997419c7ee7b007e4bb3" prot="protected" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>m_bndry_cor</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1ab8f93178ea3f02ba63da966de7796970" prot="protected" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>m_bndry_sol</name></member>
      <member refid="classamrex_1_1MLLinOp_1a06ea1608702e52d38c0eceaa180bad7e" prot="protected" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>m_bottom_comm</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a820de6c415b8f6911cf96c94788cb102" prot="protected" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>m_cc_mask</name></member>
      <member refid="classamrex_1_1MLLinOp_1abc7e6e6252f9ecc63c86dcbd99250e10" prot="protected" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>m_coarse_bc_loc</name></member>
      <member refid="classamrex_1_1MLLinOp_1a1ca01453776c12e634debdc6d09206c3" prot="protected" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>m_coarse_data_crse_ratio</name></member>
      <member refid="classamrex_1_1MLLinOp_1ad1382ee007387f65075acda2f46866f2" prot="protected" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>m_coarse_data_for_bc</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a871355473b2744ad7dd29d691e72e9ee" prot="protected" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>m_crse_cor_br</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1aae58b75937a141dc599d98b034be7f3c" prot="protected" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>m_crse_sol_br</name></member>
      <member refid="classamrex_1_1MLLinOp_1addb42fac68158f49c2508cf47d3b8d9d" prot="protected" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>m_default_comm</name></member>
      <member refid="classamrex_1_1MLLinOp_1a80552ba3fc7cdd6bb00739c66327ae2c" prot="protected" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>m_dmap</name></member>
      <member refid="classamrex_1_1MLLinOp_1a19bf5f2d76877e5f5777e5c44d290648" prot="protected" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>m_do_agglomeration</name></member>
      <member refid="classamrex_1_1MLLinOp_1a488b6dd5c1bfecef948b543bfa7e5154" prot="protected" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>m_do_consolidation</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac5eeb189073e311245243a3292b8377d" prot="protected" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>m_do_semicoarsening</name></member>
      <member refid="classamrex_1_1MLLinOp_1a700409c91ec909489e19c53e601de053" prot="protected" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>m_domain_bloc_hi</name></member>
      <member refid="classamrex_1_1MLLinOp_1a0fd156d093aacd959e78666105ed6328" prot="protected" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>m_domain_bloc_lo</name></member>
      <member refid="classamrex_1_1MLLinOp_1aaba23614888f937956554945e6a2a5a0" prot="protected" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>m_domain_covered</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a1644cbea6bac7ad1b9ae4a039cf96cc4" prot="protected" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>m_eb_b_coeffs</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a25296274131127e2be522bd86b57be2c" prot="protected" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>m_eb_phi</name></member>
      <member refid="classamrex_1_1MLLinOp_1aca26a5ef5d68cae3dcabea0a5d8c2493" prot="protected" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>m_factory</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1aeabff149eec600743faac7295cd509d2" prot="protected" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>m_fluxreg</name></member>
      <member refid="classamrex_1_1MLLinOp_1ab16551403ee1629e20ed6e6d9d4f680c" prot="protected" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>m_geom</name></member>
      <member refid="classamrex_1_1MLLinOp_1a3f9b0a7c3a91ca7e13664dbfe7115eed" prot="protected" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>m_grids</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a9d6cdade5abfabf340b180cba282c3c1" prot="protected" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>m_has_metric_term</name></member>
      <member refid="classamrex_1_1MLLinOp_1a885bd2d76204604e07a5ce06e92da271" prot="protected" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>m_hi_inhomog_neumann</name></member>
      <member refid="classamrex_1_1MLLinOp_1a619323b7ef2de7c06f7c480c9bcdf3d2" prot="protected" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>m_hibc</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a11297b15320727df4d9e32d3b8085c06" prot="protected" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>m_is_eb_inhomog</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a69f0aa528f3437aed6e5fbc26d3f1820" prot="protected" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>m_is_singular</name></member>
      <member refid="classamrex_1_1MLLinOp_1a1422f7b22ae204247f5cdf20ab70e741" prot="protected" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>m_ixtype</name></member>
      <member refid="classamrex_1_1MLLinOp_1aa91c1d6bf82658c8668b2ffcfa5ab4f1" prot="protected" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>m_lo_inhomog_neumann</name></member>
      <member refid="classamrex_1_1MLLinOp_1aac661e9e03991a16c7aca157ca2447b0" prot="protected" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>m_lobc</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1af7504eedbd467f1237874cbc10dd6d39" prot="protected" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>m_maskvals</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a85df3961f7b0ad04d0ad1463ea1e24da" prot="protected" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>m_ncomp</name></member>
      <member refid="classamrex_1_1MLLinOp_1aa53a765aea0ed0c4e7410d147380079f" prot="protected" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>m_needs_coarse_data_for_bc</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1aadf975aed65ffe24b230421d1366de50" prot="protected" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>m_needs_update</name></member>
      <member refid="classamrex_1_1MLLinOp_1ad6bbf49c1bdb88256721471b22b4b044" prot="protected" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>m_num_amr_levels</name></member>
      <member refid="classamrex_1_1MLLinOp_1ababf1d5df3da022563dc90ee2c81ad75" prot="protected" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>m_num_mg_levels</name></member>
      <member refid="classamrex_1_1MLCellABecLap_1aeee38af8d207ad6bc70087b4c6ec4215" prot="protected" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>m_overset_mask</name></member>
      <member refid="classamrex_1_1MLLinOp_1a614164d6c8e680ccb5ac8fb9cf1558ed" prot="protected" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>m_parent</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1ae0ea21faa4cc1aeadf8641b37d8cf59f" prot="protected" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>m_phi_loc</name></member>
      <member refid="classamrex_1_1MLLinOp_1a2faeb23bc1e93e2b0cd693cb94a18d08" prot="protected" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>m_raii_comm</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a2ffd8d47358983d3c013b8012eeb1b8e" prot="protected" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>m_undrrelxr</name></member>
      <member refid="classamrex_1_1MLLinOp_1af41b89817b39bbd605ee94ee5d47d72f" prot="protected" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>make</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a95879abefc0ff8610b6534d919892a1a" prot="public" virt="virtual"><scope>amrex::MLEBABecLap</scope><name>makeFactory</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a3bbfff6e733b7883fffacffb363569aa" prot="public" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>makeNGrids</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1acd7d1f624947d653cfb4b3ea3f2fd193" prot="public" virt="virtual"><scope>amrex::MLEBABecLap</scope><name>makeNLinOp</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac516dba583aede117f89e339423f6114" prot="protected" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>maxorder</name></member>
      <member refid="classamrex_1_1MLLinOp_1ae871a991ef83c33044a22db383c76dcd" prot="protected" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>mg_box_min_width</name></member>
      <member refid="classamrex_1_1MLLinOp_1aaa5616982aef27c68c5ae5544092c7db" prot="protected" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>mg_coarsen_ratio</name></member>
      <member refid="classamrex_1_1MLLinOp_1a2023b3b3881d5aff49c7a3b995a03993" prot="protected" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>mg_coarsen_ratio_vec</name></member>
      <member refid="classamrex_1_1MLLinOp_1a3ea5c2611e98234737157e36bae6c343" prot="protected" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>mg_domain_min_width</name></member>
      <member refid="classamrex_1_1MLCellABecLap_1a4645fe35e39e5f36fe87938a48ea9641" prot="public" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>MLCellABecLap</name></member>
      <member refid="classamrex_1_1MLCellABecLap_1aff6a0f1c81880c9e944e725098d73a7c" prot="public" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>MLCellABecLap</name></member>
      <member refid="classamrex_1_1MLCellABecLap_1a13b727caa58ea6b165dcc414b6c14bae" prot="public" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>MLCellABecLap</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1acc45e2dedbc266cc717ffc2239727486" prot="public" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>MLCellLinOp</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1acba5508d208bbb531ce2fe45042b4f6f" prot="public" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>MLCellLinOp</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a4bb69639aa4cb08113d6d8273fca03ae" prot="public" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>MLCellLinOp</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1aa9a96f2bc072cb181d9cce454e3da098" prot="public" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>MLEBABecLap</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1afbf800c9b02dd7a3da3fc75905a53c64" prot="public" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>MLEBABecLap</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a14181cc0ff70a2ed471cdb3a3fc2bdb6" prot="public" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>MLEBABecLap</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a0b7f1e4cc90469a42eb10c8792eced13" prot="public" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>MLEBABecLap</name></member>
      <member refid="classamrex_1_1MLLinOp_1a2a75b94dc22faffec8a686f91fbfc9c1" prot="public" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>MLLinOp</name></member>
      <member refid="classamrex_1_1MLLinOp_1a7dd2c530e984f58e5a04cc415e9a539b" prot="public" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>MLLinOp</name></member>
      <member refid="classamrex_1_1MLLinOp_1a69fbc0ca95c18b6e954c53abb41c885c" prot="public" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>MLLinOp</name></member>
      <member refid="classamrex_1_1MLLinOp_1ab0e25c7ee0f264b36146fa77ee2bf1c4" prot="public" virt="virtual"><scope>amrex::MLEBABecLap</scope><name>name</name></member>
      <member refid="classamrex_1_1MLLinOp_1adcfe0a91f9b85388c17eee6172f02975" prot="protected" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>NAMRLevels</name></member>
      <member refid="classamrex_1_1MLLinOp_1a0c150481b635dccaf83cfff3d38b11c7" prot="public" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>needsCoarseDataForBC</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a248e016a259d04af443355f6340e0898" prot="public" virt="virtual"><scope>amrex::MLEBABecLap</scope><name>needsUpdate</name></member>
      <member refid="classamrex_1_1MLLinOp_1a257d196611ba0ab9d861dc5e0dc23502" prot="protected" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>NMGLevels</name></member>
      <member refid="classamrex_1_1MLLinOp_1a8f43837a5a495425a72840dc811fc230" prot="public" virt="virtual"><scope>amrex::MLEBABecLap</scope><name>nodalSync</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a1ba4a6db3bd8895f95ac90ff5decc461" prot="public" virt="virtual"><scope>amrex::MLEBABecLap</scope><name>normalize</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a510cfdf6165c8a08174e71624357bbf9" prot="public" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1aaa0d12f5f57ddf587493f2c93f516dd8" prot="public" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLCellABecLap_1a7fd4867774038467f97cfac185e235ac" prot="public" virt="non-virtual" ambiguityscope="amrex::MLCellABecLap::"><scope>amrex::MLEBABecLap</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLCellABecLap_1ac72a224155e09fd10918b66384ccdb81" prot="public" virt="non-virtual" ambiguityscope="amrex::MLCellABecLap::"><scope>amrex::MLEBABecLap</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a87fd042ed7a3004a39f75564f24264ca" prot="public" virt="non-virtual" ambiguityscope="amrex::MLCellLinOp::"><scope>amrex::MLEBABecLap</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a4be43b4a29bd4f7092aa870804870ae2" prot="public" virt="non-virtual" ambiguityscope="amrex::MLCellLinOp::"><scope>amrex::MLEBABecLap</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLLinOp_1ad163e1fa25935bce528783de5adb6b1a" prot="public" virt="non-virtual" ambiguityscope="amrex::MLLinOp::"><scope>amrex::MLEBABecLap</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLLinOp_1aec2118e27e9938788a89f5dda28709f7" prot="public" virt="non-virtual" ambiguityscope="amrex::MLLinOp::"><scope>amrex::MLEBABecLap</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a10d9a42df59b0c48c0de0bc3a2b41cca" prot="public" virt="virtual"><scope>amrex::MLEBABecLap</scope><name>prepareForSolve</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1ae233eeb511516448492f38fe53fa9cd9" prot="protected" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>RealTuple</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1afc76c452e2704200c3b596ba1c1cb1a2" prot="public" virt="virtual"><scope>amrex::MLEBABecLap</scope><name>reflux</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a4e02281f596d4f8d9fc0ccad62f8525b" prot="public" virt="virtual"><scope>amrex::MLEBABecLap</scope><name>restriction</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a3897cf202c96a14a8d9733f25c5e750f" prot="public" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>setACoeffs</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a4c998b02361b80cb5324775e3d58f90b" prot="public" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>setACoeffs</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1ae025087505b611d886e4ce39371d6e21" prot="public" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>setBCoeffs</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1aa85c8346fd88d47cf525b9ebd2d64322" prot="public" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>setBCoeffs</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a9088117f62b7fdf5ddf44a3cccea40eb" prot="public" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>setBCoeffs</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a41a0bab0f39a7886bee16b3db3253ef7" prot="public" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>setBCoeffs</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac161f1d53e925b82ba5defeb9b0efe70" prot="public" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>setCoarseFineBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac0c0882eb6092218dc09c5d60555ffed" prot="protected" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>setCoarseFineBCLocation</name></member>
      <member refid="classamrex_1_1MLLinOp_1aa034da35bd05e1fb93b8d876a9840ce3" prot="public" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>setDomainBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1a2402e6343df20087a51fb653a147987d" prot="public" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>setDomainBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1aeb7f6e87ab86b49cc97a248b4240d600" prot="public" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>setDomainBCLoc</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a780796d3dee5dfa89cba56c05383868d" prot="public" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>setEBDirichlet</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1aaa5d24895fc813690a700fff13302d30" prot="public" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>setEBDirichlet</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a21036dcdb342fa89b6bc11b0cf730d04" prot="public" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>setEBDirichlet</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a9acab9bf4580bb611d63434f8e2daeed" prot="public" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>setEBHomogDirichlet</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a69dc896ed1e3c373ffed1364c14b39ea" prot="public" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>setEBHomogDirichlet</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a367adfeb7192bf75233d0d3176eb8fd9" prot="public" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>setEBHomogDirichlet</name></member>
      <member refid="classamrex_1_1MLLinOp_1a8225491c35d71e1fb7edb6355f44ac5a" prot="public" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>setEnforceSingularSolvable</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a2da9b07a1fb449ee9ffd1250cce4b74d" prot="public" virt="virtual"><scope>amrex::MLEBABecLap</scope><name>setLevelBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1a45b72169ccf285c17f439c4e990c0f58" prot="public" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>setMaxOrder</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a1b6b64134bb5a73a43da2d2aaefbbf53" prot="public" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>setPhiOnCentroid</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1ad3027675177497cdb23a984a50ebcb12" prot="public" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>setScalars</name></member>
      <member refid="classamrex_1_1MLLinOp_1a4d96a0475759eef80d096851fdedd411" prot="public" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>setVerbose</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a240eadd9886e8df70f955fecb56bcdfe" prot="public" virt="virtual"><scope>amrex::MLEBABecLap</scope><name>smooth</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1ab18841d6aec78590a56eeaed61fe4345" prot="public" virt="virtual"><scope>amrex::MLEBABecLap</scope><name>solutionResidual</name></member>
      <member refid="classamrex_1_1MLLinOp_1a1f2821b4a51da49d862dae1e757bb8c3" prot="public" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>StateMode</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a4ee573102053163e673153f3334153fe" prot="public" virt="virtual"><scope>amrex::MLEBABecLap</scope><name>unapplyMetricTerm</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac62698656785dd3261f05e9dc76cd8fa" prot="public" virt="virtual"><scope>amrex::MLEBABecLap</scope><name>unimposeNeumannBC</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1ad6b4be6cef1783fdb223e5aa7eb50343" prot="public" virt="virtual"><scope>amrex::MLEBABecLap</scope><name>update</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a73212ed387925f27b0ebeaed21e4a00a" prot="public" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>updateCorBC</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1aec26fa3ea4e35bd1a02b8972fc392493" prot="public" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>updateSolBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1a0815357130e78962e01abdaba2b09c21" prot="protected" virt="non-virtual"><scope>amrex::MLEBABecLap</scope><name>verbose</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a2d3d01dcb4fddb4f2df39484b6f58f97" prot="public" virt="virtual"><scope>amrex::MLEBABecLap</scope><name>xdoty</name></member>
      <member refid="classamrex_1_1MLCellABecLap_1aaa11148ef1cc3386414a3b3d02f9a4b2" prot="public" virt="virtual"><scope>amrex::MLEBABecLap</scope><name>~MLCellABecLap</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a4d46c85e7e43e5231e19607a868d3d0f" prot="public" virt="virtual"><scope>amrex::MLEBABecLap</scope><name>~MLCellLinOp</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a1c3ebe277cdfba5a7bdafca9f0a2672f" prot="public" virt="virtual"><scope>amrex::MLEBABecLap</scope><name>~MLEBABecLap</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac6793724d6b5c98581d42d9233fda1bd" prot="public" virt="virtual"><scope>amrex::MLEBABecLap</scope><name>~MLLinOp</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
