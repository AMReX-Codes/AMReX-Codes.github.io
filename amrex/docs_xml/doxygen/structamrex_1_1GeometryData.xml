<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="structamrex_1_1GeometryData" kind="struct" language="C++" prot="public">
    <compoundname>amrex::GeometryData</compoundname>
    <includes refid="AMReX__Geometry_8H" local="no">AMReX_Geometry.H</includes>
    <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structamrex_1_1GeometryData_1aee36e84e322a0ca0025338dcca8475d1" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1RealBox" kindref="compound">RealBox</ref></type>
        <definition>RealBox amrex::GeometryData::prob_domain</definition>
        <argsstring></argsstring>
        <name>prob_domain</name>
        <qualifiedname>amrex::GeometryData::prob_domain</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" line="55" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structamrex_1_1GeometryData_1a092f48607ca49b3796425e78b96a3b68" prot="public" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref></type>
        <definition>Box amrex::GeometryData::domain</definition>
        <argsstring></argsstring>
        <name>domain</name>
        <qualifiedname>amrex::GeometryData::domain</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" line="56" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structamrex_1_1GeometryData_1a6ae1008fee5d826e469209d098776573" prot="public" static="no" mutable="no">
        <type>Real</type>
        <definition>Real amrex::GeometryData::dx[AMREX_SPACEDIM]</definition>
        <argsstring>[AMREX_SPACEDIM]</argsstring>
        <name>dx</name>
        <qualifiedname>amrex::GeometryData::dx</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" line="57" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structamrex_1_1GeometryData_1a1c153da19d61edca41192dd82233071b" prot="public" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::GeometryData::is_periodic[AMREX_SPACEDIM]</definition>
        <argsstring>[AMREX_SPACEDIM]</argsstring>
        <name>is_periodic</name>
        <qualifiedname>amrex::GeometryData::is_periodic</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>For each dimension, 0 if the domain is non-periodic and 1 if it is. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" line="58" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structamrex_1_1GeometryData_1a68d36ab01dbd0848e0f3e43ef59b74cb" prot="public" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::GeometryData::coord</definition>
        <argsstring></argsstring>
        <name>coord</name>
        <qualifiedname>amrex::GeometryData::coord</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" line="59" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" bodystart="59" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="structamrex_1_1GeometryData_1a323f184535888044efb7c491360d9255" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> const Real *</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE const Real * amrex::GeometryData::CellSize</definition>
        <argsstring>() const noexcept</argsstring>
        <name>CellSize</name>
        <qualifiedname>amrex::GeometryData::CellSize</qualifiedname>
        <briefdescription>
<para>Returns the cellsize for each coordinate direction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" line="28" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" bodystart="28" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1GeometryData_1a135962447b210aea10cc4457ffe140fe" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> Real</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Real amrex::GeometryData::CellSize</definition>
        <argsstring>(int dir) const noexcept</argsstring>
        <name>CellSize</name>
        <qualifiedname>amrex::GeometryData::CellSize</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" line="31" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" bodystart="31" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1GeometryData_1a7042da448e7fe52bcc832bdb6e64860c" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> const Real *</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE const Real * amrex::GeometryData::ProbLo</definition>
        <argsstring>() const noexcept</argsstring>
        <name>ProbLo</name>
        <qualifiedname>amrex::GeometryData::ProbLo</qualifiedname>
        <briefdescription>
<para>Returns the lo end of the problem domain in each dimension. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" line="34" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" bodystart="34" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1GeometryData_1a3d9777846ced2fc748f213cc58ff0dfd" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> Real</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Real amrex::GeometryData::ProbLo</definition>
        <argsstring>(int dir) const noexcept</argsstring>
        <name>ProbLo</name>
        <qualifiedname>amrex::GeometryData::ProbLo</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" line="37" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" bodystart="37" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1GeometryData_1a96191239f6821fdcdd365ce77566a6a4" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> const Real *</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE const Real * amrex::GeometryData::ProbHi</definition>
        <argsstring>() const noexcept</argsstring>
        <name>ProbHi</name>
        <qualifiedname>amrex::GeometryData::ProbHi</qualifiedname>
        <briefdescription>
<para>Returns the hi end of the problem domain in each dimension. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" line="40" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" bodystart="40" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1GeometryData_1a2325c024dbbe3cb941e2964e0d8dc53d" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> Real</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Real amrex::GeometryData::ProbHi</definition>
        <argsstring>(int dir) const noexcept</argsstring>
        <name>ProbHi</name>
        <qualifiedname>amrex::GeometryData::ProbHi</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" line="43" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" bodystart="43" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1GeometryData_1a69f5f2f440dbf65ffb5c1f3186e7ab1c" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE const Box &amp; amrex::GeometryData::Domain</definition>
        <argsstring>() const noexcept</argsstring>
        <name>Domain</name>
        <qualifiedname>amrex::GeometryData::Domain</qualifiedname>
        <briefdescription>
<para>Returns our rectangular domain. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" line="46" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" bodystart="46" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1GeometryData_1a2d12d7cb9b520d38458d1b0e2821e25f" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE int amrex::GeometryData::isPeriodic</definition>
        <argsstring>(const int i) const noexcept</argsstring>
        <name>isPeriodic</name>
        <qualifiedname>amrex::GeometryData::isPeriodic</qualifiedname>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Returns whether the domain is periodic in the given direction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" line="49" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" bodystart="49" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1GeometryData_1a00a5815cf1c7d5f1800f9346a3d100ba" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE int amrex::GeometryData::Coord</definition>
        <argsstring>() const noexcept</argsstring>
        <name>Coord</name>
        <qualifiedname>amrex::GeometryData::Coord</qualifiedname>
        <briefdescription>
<para>Coordinates type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" line="52" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" bodystart="52" bodyend="52"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="4">
        <label>amrex::BoxND&lt; AMREX_SPACEDIM &gt;</label>
        <link refid="classamrex_1_1BoxND"/>
      </node>
      <node id="1">
        <label>amrex::GeometryData</label>
        <link refid="structamrex_1_1GeometryData"/>
        <childnode refid="2" relation="usage">
          <edgelabel>prob_domain</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>domain</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>dx</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>Real</label>
      </node>
      <node id="2">
        <label>amrex::RealBox</label>
        <link refid="classamrex_1_1RealBox"/>
        <childnode refid="3" relation="usage">
          <edgelabel>xhi</edgelabel>
          <edgelabel>xlo</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" line="24" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" bodystart="25" bodyend="60"/>
    <listofallmembers>
      <member refid="structamrex_1_1GeometryData_1a323f184535888044efb7c491360d9255" prot="public" virt="non-virtual"><scope>amrex::GeometryData</scope><name>CellSize</name></member>
      <member refid="structamrex_1_1GeometryData_1a135962447b210aea10cc4457ffe140fe" prot="public" virt="non-virtual"><scope>amrex::GeometryData</scope><name>CellSize</name></member>
      <member refid="structamrex_1_1GeometryData_1a68d36ab01dbd0848e0f3e43ef59b74cb" prot="public" virt="non-virtual"><scope>amrex::GeometryData</scope><name>coord</name></member>
      <member refid="structamrex_1_1GeometryData_1a00a5815cf1c7d5f1800f9346a3d100ba" prot="public" virt="non-virtual"><scope>amrex::GeometryData</scope><name>Coord</name></member>
      <member refid="structamrex_1_1GeometryData_1a092f48607ca49b3796425e78b96a3b68" prot="public" virt="non-virtual"><scope>amrex::GeometryData</scope><name>domain</name></member>
      <member refid="structamrex_1_1GeometryData_1a69f5f2f440dbf65ffb5c1f3186e7ab1c" prot="public" virt="non-virtual"><scope>amrex::GeometryData</scope><name>Domain</name></member>
      <member refid="structamrex_1_1GeometryData_1a6ae1008fee5d826e469209d098776573" prot="public" virt="non-virtual"><scope>amrex::GeometryData</scope><name>dx</name></member>
      <member refid="structamrex_1_1GeometryData_1a1c153da19d61edca41192dd82233071b" prot="public" virt="non-virtual"><scope>amrex::GeometryData</scope><name>is_periodic</name></member>
      <member refid="structamrex_1_1GeometryData_1a2d12d7cb9b520d38458d1b0e2821e25f" prot="public" virt="non-virtual"><scope>amrex::GeometryData</scope><name>isPeriodic</name></member>
      <member refid="structamrex_1_1GeometryData_1aee36e84e322a0ca0025338dcca8475d1" prot="public" virt="non-virtual"><scope>amrex::GeometryData</scope><name>prob_domain</name></member>
      <member refid="structamrex_1_1GeometryData_1a96191239f6821fdcdd365ce77566a6a4" prot="public" virt="non-virtual"><scope>amrex::GeometryData</scope><name>ProbHi</name></member>
      <member refid="structamrex_1_1GeometryData_1a2325c024dbbe3cb941e2964e0d8dc53d" prot="public" virt="non-virtual"><scope>amrex::GeometryData</scope><name>ProbHi</name></member>
      <member refid="structamrex_1_1GeometryData_1a7042da448e7fe52bcc832bdb6e64860c" prot="public" virt="non-virtual"><scope>amrex::GeometryData</scope><name>ProbLo</name></member>
      <member refid="structamrex_1_1GeometryData_1a3d9777846ced2fc748f213cc58ff0dfd" prot="public" virt="non-virtual"><scope>amrex::GeometryData</scope><name>ProbLo</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
