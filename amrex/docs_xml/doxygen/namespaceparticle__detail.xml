<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="namespaceparticle__detail" kind="namespace" language="C++">
    <compoundname>particle_detail</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceparticle__detail_1afbe88249b244a942b7d7d41b6b176abd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ParticleReal</type>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>std::size_t particle_detail::PSizeInFile</definition>
        <argsstring>(const Vector&lt; int &gt; &amp;wrc, const Vector&lt; int &gt; &amp;wic)</argsstring>
        <name>PSizeInFile</name>
        <param>
          <type>const Vector&lt; int &gt; &amp;</type>
          <declname>wrc</declname>
        </param>
        <param>
          <type>const Vector&lt; int &gt; &amp;</type>
          <declname>wic</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H" line="23" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H" bodystart="23" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparticle__detail_1ac8fa5307957d3b3b7ebea9e83b344da8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>template&lt; class, class &gt; class</type>
            <declname>Container</declname>
            <defname>Container</defname>
          </param>
          <param>
            <type>class Allocator</type>
          </param>
          <param>
            <type>class PTile</type>
          </param>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; RunOnGpu&lt; typename Container&lt; int, Allocator &gt;::allocator_type &gt;::value &gt;::type</type>
        <definition>std::enable_if&lt;RunOnGpu&lt;typename Container&lt;int, Allocator&gt;::allocator_type&gt;::value&gt;::type particle_detail::fillFlags</definition>
        <argsstring>(Container&lt; int, Allocator &gt; &amp;pflags, const PTile &amp;ptile, F &amp;&amp;f)</argsstring>
        <name>fillFlags</name>
        <param>
          <type>Container&lt; int, Allocator &gt; &amp;</type>
          <declname>pflags</declname>
        </param>
        <param>
          <type>const PTile &amp;</type>
          <declname>ptile</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H" line="35" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H" bodystart="35" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparticle__detail_1ab8c27dbb3112cb2f7270253d878d30a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>template&lt; class, class &gt; class</type>
            <declname>Container</declname>
            <defname>Container</defname>
          </param>
          <param>
            <type>class Allocator</type>
          </param>
          <param>
            <type>class PTile</type>
          </param>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt;!RunOnGpu&lt; typename Container&lt; int, Allocator &gt;::allocator_type &gt;::value &gt;::type</type>
        <definition>std::enable_if&lt;!RunOnGpu&lt;typename Container&lt;int, Allocator&gt;::allocator_type&gt;::value&gt;::type particle_detail::fillFlags</definition>
        <argsstring>(Container&lt; int, Allocator &gt; &amp;pflags, const PTile &amp;ptile, F &amp;&amp;f)</argsstring>
        <name>fillFlags</name>
        <param>
          <type>Container&lt; int, Allocator &gt; &amp;</type>
          <declname>pflags</declname>
        </param>
        <param>
          <type>const PTile &amp;</type>
          <declname>ptile</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H" line="59" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H" bodystart="59" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparticle__detail_1afbe110320582b7ce557067081c94c949" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>template&lt; class, class &gt; class</type>
            <declname>Container</declname>
            <defname>Container</defname>
          </param>
          <param>
            <type>class Allocator</type>
          </param>
          <param>
            <type>class PC</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; RunOnGpu&lt; typename Container&lt; int, Allocator &gt;::allocator_type &gt;::value, amrex::Long &gt;::type</type>
        <definition>std::enable_if&lt;RunOnGpu&lt;typename Container&lt;int, Allocator&gt;::allocator_type&gt;::value, amrex::Long&gt;::type particle_detail::countFlags</definition>
        <argsstring>(const Vector&lt; std::map&lt; std::pair&lt; int, int &gt;, Container&lt; int, Allocator &gt;&gt;&gt; &amp;particle_io_flags, const PC &amp;pc)</argsstring>
        <name>countFlags</name>
        <param>
          <type>const Vector&lt; std::map&lt; std::pair&lt; int, int &gt;, Container&lt; int, Allocator &gt;&gt;&gt; &amp;</type>
          <declname>particle_io_flags</declname>
        </param>
        <param>
          <type>const PC &amp;</type>
          <declname>pc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H" line="77" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H" bodystart="77" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparticle__detail_1ac1b1478c3d38493071ade6e6ac307806" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>template&lt; class, class &gt; class</type>
            <declname>Container</declname>
            <defname>Container</defname>
          </param>
          <param>
            <type>class Allocator</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; RunOnGpu&lt; typename Container&lt; int, Allocator &gt;::allocator_type &gt;::value, int &gt;::type</type>
        <definition>std::enable_if&lt;RunOnGpu&lt;typename Container&lt;int, Allocator&gt;::allocator_type&gt;::value, int&gt;::type particle_detail::countFlags</definition>
        <argsstring>(const Container&lt; int, Allocator &gt; &amp;pflags)</argsstring>
        <name>countFlags</name>
        <param>
          <type>const Container&lt; int, Allocator &gt; &amp;</type>
          <declname>pflags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H" line="103" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H" bodystart="103" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparticle__detail_1a2a43b6df160cae87f7c97c45c1f750d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>template&lt; class, class &gt; class</type>
            <declname>Container</declname>
            <defname>Container</defname>
          </param>
          <param>
            <type>class Allocator</type>
          </param>
          <param>
            <type>class PC</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt;!RunOnGpu&lt; typename Container&lt; int, Allocator &gt;::allocator_type &gt;::value, amrex::Long &gt;::type</type>
        <definition>std::enable_if&lt;!RunOnGpu&lt;typename Container&lt;int, Allocator&gt;::allocator_type&gt;::value, amrex::Long&gt;::type particle_detail::countFlags</definition>
        <argsstring>(const Vector&lt; std::map&lt; std::pair&lt; int, int &gt;, Container&lt; int, Allocator &gt;&gt;&gt; &amp;particle_io_flags, const PC &amp;pc)</argsstring>
        <name>countFlags</name>
        <param>
          <type>const Vector&lt; std::map&lt; std::pair&lt; int, int &gt;, Container&lt; int, Allocator &gt;&gt;&gt; &amp;</type>
          <declname>particle_io_flags</declname>
        </param>
        <param>
          <type>const PC &amp;</type>
          <declname>pc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H" line="121" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H" bodystart="121" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparticle__detail_1a22e1685e4b065657f4bdd7dbe71d34d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>template&lt; class, class &gt; class</type>
            <declname>Container</declname>
            <defname>Container</defname>
          </param>
          <param>
            <type>class Allocator</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt;!RunOnGpu&lt; typename Container&lt; int, Allocator &gt;::allocator_type &gt;::value, int &gt;::type</type>
        <definition>std::enable_if&lt;!RunOnGpu&lt;typename Container&lt;int, Allocator&gt;::allocator_type&gt;::value, int&gt;::type particle_detail::countFlags</definition>
        <argsstring>(const Container&lt; int, Allocator &gt; &amp;pflags)</argsstring>
        <name>countFlags</name>
        <param>
          <type>const Container&lt; int, Allocator &gt; &amp;</type>
          <declname>pflags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H" line="141" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H" bodystart="141" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparticle__detail_1a30a6f3594be5d404180737352c8c375d" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename P</type>
          </param>
          <param>
            <type>typename I</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void particle_detail::packParticleIDs</definition>
        <argsstring>(I *idata, const P &amp;p, bool is_checkpoint) noexcept</argsstring>
        <name>packParticleIDs</name>
        <param>
          <type>I *</type>
          <declname>idata</declname>
        </param>
        <param>
          <type>const P &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_checkpoint</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H" line="153" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H" bodystart="153" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparticle__detail_1a32c79228797f0b67784cf06d5767df2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PC</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; RunOnGpu&lt; typename PC::template AllocatorType&lt; int &gt; &gt;::value &gt;::type</type>
        <definition>std::enable_if&lt;RunOnGpu&lt;typename PC::template AllocatorType&lt;int&gt; &gt;::value&gt;::type particle_detail::packIOData</definition>
        <argsstring>(Vector&lt; int &gt; &amp;idata, Vector&lt; ParticleReal &gt; &amp;rdata, const PC &amp;pc, int lev, int grid, const Vector&lt; int &gt; &amp;write_real_comp, const Vector&lt; int &gt; &amp;write_int_comp, const Vector&lt; std::map&lt; std::pair&lt; int, int &gt;, typename PC::IntVector &gt;&gt; &amp;particle_io_flags, const Vector&lt; int &gt; &amp;tiles, int np, bool is_checkpoint)</argsstring>
        <name>packIOData</name>
        <param>
          <type>Vector&lt; int &gt; &amp;</type>
          <declname>idata</declname>
        </param>
        <param>
          <type>Vector&lt; ParticleReal &gt; &amp;</type>
          <declname>rdata</declname>
        </param>
        <param>
          <type>const PC &amp;</type>
          <declname>pc</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lev</declname>
        </param>
        <param>
          <type>int</type>
          <declname>grid</declname>
        </param>
        <param>
          <type>const Vector&lt; int &gt; &amp;</type>
          <declname>write_real_comp</declname>
        </param>
        <param>
          <type>const Vector&lt; int &gt; &amp;</type>
          <declname>write_int_comp</declname>
        </param>
        <param>
          <type>const Vector&lt; std::map&lt; std::pair&lt; int, int &gt;, typename PC::IntVector &gt;&gt; &amp;</type>
          <declname>particle_io_flags</declname>
        </param>
        <param>
          <type>const Vector&lt; int &gt; &amp;</type>
          <declname>tiles</declname>
        </param>
        <param>
          <type>int</type>
          <declname>np</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_checkpoint</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H" line="172" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H" bodystart="172" bodyend="272"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparticle__detail_1a037d69b06fff9ac32219c2a17886a88b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PC</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt;!RunOnGpu&lt; typename PC::template AllocatorType&lt; int &gt; &gt;::value &gt;::type</type>
        <definition>std::enable_if&lt;!RunOnGpu&lt;typename PC::template AllocatorType&lt;int&gt; &gt;::value&gt;::type particle_detail::packIOData</definition>
        <argsstring>(Vector&lt; int &gt; &amp;idata, Vector&lt; ParticleReal &gt; &amp;rdata, const PC &amp;pc, int lev, int grid, const Vector&lt; int &gt; &amp;write_real_comp, const Vector&lt; int &gt; &amp;write_int_comp, const Vector&lt; std::map&lt; std::pair&lt; int, int &gt;, typename PC::IntVector &gt;&gt; &amp;particle_io_flags, const Vector&lt; int &gt; &amp;tiles, int np, bool is_checkpoint)</argsstring>
        <name>packIOData</name>
        <param>
          <type>Vector&lt; int &gt; &amp;</type>
          <declname>idata</declname>
        </param>
        <param>
          <type>Vector&lt; ParticleReal &gt; &amp;</type>
          <declname>rdata</declname>
        </param>
        <param>
          <type>const PC &amp;</type>
          <declname>pc</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lev</declname>
        </param>
        <param>
          <type>int</type>
          <declname>grid</declname>
        </param>
        <param>
          <type>const Vector&lt; int &gt; &amp;</type>
          <declname>write_real_comp</declname>
        </param>
        <param>
          <type>const Vector&lt; int &gt; &amp;</type>
          <declname>write_int_comp</declname>
        </param>
        <param>
          <type>const Vector&lt; std::map&lt; std::pair&lt; int, int &gt;, typename PC::IntVector &gt;&gt; &amp;</type>
          <declname>particle_io_flags</declname>
        </param>
        <param>
          <type>const Vector&lt; int &gt; &amp;</type>
          <declname>tiles</declname>
        </param>
        <param>
          <type>int</type>
          <declname>np</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_checkpoint</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H" line="276" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H" bodystart="276" bodyend="367"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H" line="20" column="1"/>
  </compounddef>
</doxygen>
