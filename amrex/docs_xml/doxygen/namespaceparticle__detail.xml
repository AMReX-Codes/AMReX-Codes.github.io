<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="namespaceparticle__detail" kind="namespace" language="C++">
    <compoundname>particle_detail</compoundname>
    <sectiondef kind="func">
      <memberdef kind="function" id="namespaceparticle__detail_1afbe88249b244a942b7d7d41b6b176abd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ParticleReal</type>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>std::size_t particle_detail::PSizeInFile</definition>
        <argsstring>(const Vector&lt; int &gt; &amp;wrc, const Vector&lt; int &gt; &amp;wic)</argsstring>
        <name>PSizeInFile</name>
        <qualifiedname>particle_detail::PSizeInFile</qualifiedname>
        <param>
          <type>const Vector&lt; int &gt; &amp;</type>
          <declname>wrc</declname>
        </param>
        <param>
          <type>const Vector&lt; int &gt; &amp;</type>
          <declname>wic</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H" line="22" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H" bodystart="22" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparticle__detail_1a434bf78e655d4760c37d1a0a03a546dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>template&lt; class, class &gt; class</type>
            <declname>Container</declname>
            <defname>Container</defname>
          </param>
          <param>
            <type>class Allocator</type>
          </param>
          <param>
            <type>class PTile</type>
          </param>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; RunOnGpu&lt; typename Container&lt; int, Allocator &gt;::allocator_type &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt; RunOnGpu&lt; typename Container&lt; int, Allocator &gt;::allocator_type &gt;::value &gt; particle_detail::fillFlags</definition>
        <argsstring>(Container&lt; int, Allocator &gt; &amp;pflags, const PTile &amp;ptile, F const &amp;f)</argsstring>
        <name>fillFlags</name>
        <qualifiedname>particle_detail::fillFlags</qualifiedname>
        <param>
          <type>Container&lt; int, Allocator &gt; &amp;</type>
          <declname>pflags</declname>
        </param>
        <param>
          <type>const PTile &amp;</type>
          <declname>ptile</declname>
        </param>
        <param>
          <type>F const &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H" line="34" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H" bodystart="34" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparticle__detail_1af2c418888fce5fff1b051c871b8100c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>template&lt; class, class &gt; class</type>
            <declname>Container</declname>
            <defname>Container</defname>
          </param>
          <param>
            <type>class Allocator</type>
          </param>
          <param>
            <type>class PTile</type>
          </param>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt;!RunOnGpu&lt; typename Container&lt; int, Allocator &gt;::allocator_type &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt;!RunOnGpu&lt; typename Container&lt; int, Allocator &gt;::allocator_type &gt;::value &gt; particle_detail::fillFlags</definition>
        <argsstring>(Container&lt; int, Allocator &gt; &amp;pflags, const PTile &amp;ptile, F const &amp;f)</argsstring>
        <name>fillFlags</name>
        <qualifiedname>particle_detail::fillFlags</qualifiedname>
        <param>
          <type>Container&lt; int, Allocator &gt; &amp;</type>
          <declname>pflags</declname>
        </param>
        <param>
          <type>const PTile &amp;</type>
          <declname>ptile</declname>
        </param>
        <param>
          <type>F const &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H" line="58" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H" bodystart="58" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparticle__detail_1aa7150d951cdc6e8f930ade02d9f39339" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>template&lt; class, class &gt; class</type>
            <declname>Container</declname>
            <defname>Container</defname>
          </param>
          <param>
            <type>class Allocator</type>
          </param>
          <param>
            <type>class PC</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; RunOnGpu&lt; typename Container&lt; int, Allocator &gt;::allocator_type &gt;::value, amrex::Long &gt;</type>
        <definition>std::enable_if_t&lt; RunOnGpu&lt; typename Container&lt; int, Allocator &gt;::allocator_type &gt;::value, amrex::Long &gt; particle_detail::countFlags</definition>
        <argsstring>(const Vector&lt; std::map&lt; std::pair&lt; int, int &gt;, Container&lt; int, Allocator &gt; &gt; &gt; &amp;particle_io_flags, const PC &amp;pc)</argsstring>
        <name>countFlags</name>
        <qualifiedname>particle_detail::countFlags</qualifiedname>
        <param>
          <type>const Vector&lt; std::map&lt; std::pair&lt; int, int &gt;, Container&lt; int, Allocator &gt; &gt; &gt; &amp;</type>
          <declname>particle_io_flags</declname>
        </param>
        <param>
          <type>const PC &amp;</type>
          <declname>pc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H" line="76" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H" bodystart="76" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparticle__detail_1ad0f9f7baba3e8ee0bb915f2f39ddfb00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>template&lt; class, class &gt; class</type>
            <declname>Container</declname>
            <defname>Container</defname>
          </param>
          <param>
            <type>class Allocator</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; RunOnGpu&lt; typename Container&lt; int, Allocator &gt;::allocator_type &gt;::value, int &gt;</type>
        <definition>std::enable_if_t&lt; RunOnGpu&lt; typename Container&lt; int, Allocator &gt;::allocator_type &gt;::value, int &gt; particle_detail::countFlags</definition>
        <argsstring>(const Container&lt; int, Allocator &gt; &amp;pflags)</argsstring>
        <name>countFlags</name>
        <qualifiedname>particle_detail::countFlags</qualifiedname>
        <param>
          <type>const Container&lt; int, Allocator &gt; &amp;</type>
          <declname>pflags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H" line="102" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H" bodystart="102" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparticle__detail_1ac19caa98c68d8d3bd29714d38bd08b86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>template&lt; class, class &gt; class</type>
            <declname>Container</declname>
            <defname>Container</defname>
          </param>
          <param>
            <type>class Allocator</type>
          </param>
          <param>
            <type>class PC</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt;!RunOnGpu&lt; typename Container&lt; int, Allocator &gt;::allocator_type &gt;::value, amrex::Long &gt;</type>
        <definition>std::enable_if_t&lt;!RunOnGpu&lt; typename Container&lt; int, Allocator &gt;::allocator_type &gt;::value, amrex::Long &gt; particle_detail::countFlags</definition>
        <argsstring>(const Vector&lt; std::map&lt; std::pair&lt; int, int &gt;, Container&lt; int, Allocator &gt; &gt; &gt; &amp;particle_io_flags, const PC &amp;pc)</argsstring>
        <name>countFlags</name>
        <qualifiedname>particle_detail::countFlags</qualifiedname>
        <param>
          <type>const Vector&lt; std::map&lt; std::pair&lt; int, int &gt;, Container&lt; int, Allocator &gt; &gt; &gt; &amp;</type>
          <declname>particle_io_flags</declname>
        </param>
        <param>
          <type>const PC &amp;</type>
          <declname>pc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H" line="120" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H" bodystart="120" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparticle__detail_1a46cf3f99f8cd6664f211ab82eb30ba5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>template&lt; class, class &gt; class</type>
            <declname>Container</declname>
            <defname>Container</defname>
          </param>
          <param>
            <type>class Allocator</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt;!RunOnGpu&lt; typename Container&lt; int, Allocator &gt;::allocator_type &gt;::value, int &gt;</type>
        <definition>std::enable_if_t&lt;!RunOnGpu&lt; typename Container&lt; int, Allocator &gt;::allocator_type &gt;::value, int &gt; particle_detail::countFlags</definition>
        <argsstring>(const Container&lt; int, Allocator &gt; &amp;pflags)</argsstring>
        <name>countFlags</name>
        <qualifiedname>particle_detail::countFlags</qualifiedname>
        <param>
          <type>const Container&lt; int, Allocator &gt; &amp;</type>
          <declname>pflags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H" line="140" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H" bodystart="140" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparticle__detail_1a30a6f3594be5d404180737352c8c375d" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename P</type>
          </param>
          <param>
            <type>typename I</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void particle_detail::packParticleIDs</definition>
        <argsstring>(I *idata, const P &amp;p, bool is_checkpoint) noexcept</argsstring>
        <name>packParticleIDs</name>
        <qualifiedname>particle_detail::packParticleIDs</qualifiedname>
        <param>
          <type>I *</type>
          <declname>idata</declname>
        </param>
        <param>
          <type>const P &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_checkpoint</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H" line="152" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H" bodystart="152" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparticle__detail_1a0bf8ee8601513b770f183edebd598679" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PC</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; RunOnGpu&lt; typename PC::template AllocatorType&lt; int &gt; &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt; RunOnGpu&lt; typename PC::template AllocatorType&lt; int &gt; &gt;::value &gt; particle_detail::packIOData</definition>
        <argsstring>(Vector&lt; int &gt; &amp;idata, Vector&lt; ParticleReal &gt; &amp;rdata, const PC &amp;pc, int lev, int grid, const Vector&lt; int &gt; &amp;write_real_comp, const Vector&lt; int &gt; &amp;write_int_comp, const Vector&lt; std::map&lt; std::pair&lt; int, int &gt;, typename PC::IntVector &gt; &gt; &amp;particle_io_flags, const Vector&lt; int &gt; &amp;tiles, int np, bool is_checkpoint)</argsstring>
        <name>packIOData</name>
        <qualifiedname>particle_detail::packIOData</qualifiedname>
        <param>
          <type>Vector&lt; int &gt; &amp;</type>
          <declname>idata</declname>
        </param>
        <param>
          <type>Vector&lt; ParticleReal &gt; &amp;</type>
          <declname>rdata</declname>
        </param>
        <param>
          <type>const PC &amp;</type>
          <declname>pc</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lev</declname>
        </param>
        <param>
          <type>int</type>
          <declname>grid</declname>
        </param>
        <param>
          <type>const Vector&lt; int &gt; &amp;</type>
          <declname>write_real_comp</declname>
        </param>
        <param>
          <type>const Vector&lt; int &gt; &amp;</type>
          <declname>write_int_comp</declname>
        </param>
        <param>
          <type>const Vector&lt; std::map&lt; std::pair&lt; int, int &gt;, typename PC::IntVector &gt; &gt; &amp;</type>
          <declname>particle_io_flags</declname>
        </param>
        <param>
          <type>const Vector&lt; int &gt; &amp;</type>
          <declname>tiles</declname>
        </param>
        <param>
          <type>int</type>
          <declname>np</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_checkpoint</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H" line="171" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H" bodystart="171" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparticle__detail_1aaa996cdd179d246d691bf0a3a23faa28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PC</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt;!RunOnGpu&lt; typename PC::template AllocatorType&lt; int &gt; &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt;!RunOnGpu&lt; typename PC::template AllocatorType&lt; int &gt; &gt;::value &gt; particle_detail::packIOData</definition>
        <argsstring>(Vector&lt; int &gt; &amp;idata, Vector&lt; ParticleReal &gt; &amp;rdata, const PC &amp;pc, int lev, int grid, const Vector&lt; int &gt; &amp;write_real_comp, const Vector&lt; int &gt; &amp;write_int_comp, const Vector&lt; std::map&lt; std::pair&lt; int, int &gt;, typename PC::IntVector &gt; &gt; &amp;particle_io_flags, const Vector&lt; int &gt; &amp;tiles, int np, bool is_checkpoint)</argsstring>
        <name>packIOData</name>
        <qualifiedname>particle_detail::packIOData</qualifiedname>
        <param>
          <type>Vector&lt; int &gt; &amp;</type>
          <declname>idata</declname>
        </param>
        <param>
          <type>Vector&lt; ParticleReal &gt; &amp;</type>
          <declname>rdata</declname>
        </param>
        <param>
          <type>const PC &amp;</type>
          <declname>pc</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lev</declname>
        </param>
        <param>
          <type>int</type>
          <declname>grid</declname>
        </param>
        <param>
          <type>const Vector&lt; int &gt; &amp;</type>
          <declname>write_real_comp</declname>
        </param>
        <param>
          <type>const Vector&lt; int &gt; &amp;</type>
          <declname>write_int_comp</declname>
        </param>
        <param>
          <type>const Vector&lt; std::map&lt; std::pair&lt; int, int &gt;, typename PC::IntVector &gt; &gt; &amp;</type>
          <declname>particle_io_flags</declname>
        </param>
        <param>
          <type>const Vector&lt; int &gt; &amp;</type>
          <declname>tiles</declname>
        </param>
        <param>
          <type>int</type>
          <declname>np</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_checkpoint</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H" line="281" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H" bodystart="281" bodyend="388"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H" line="19" column="1"/>
  </compounddef>
</doxygen>
