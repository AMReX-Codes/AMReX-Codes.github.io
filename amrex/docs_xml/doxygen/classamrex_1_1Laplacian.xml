<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classamrex_1_1Laplacian" kind="class" language="C++" prot="public">
    <compoundname>amrex::Laplacian</compoundname>
    <basecompoundref refid="classamrex_1_1LinOp" prot="public" virt="non-virtual">amrex::LinOp</basecompoundref>
    <includes refid="AMReX__Laplacian_8H" local="no">AMReX_Laplacian.H</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1Laplacian_1a4b10e31414e608d6edac7f99f03c3639" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::Laplacian::Laplacian</definition>
        <argsstring>(const BndryData &amp;bd, Real _h)</argsstring>
        <name>Laplacian</name>
        <param>
          <type>const <ref refid="classamrex_1_1BndryData" kindref="compound">BndryData</ref> &amp;</type>
          <declname>bd</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>_h</declname>
        </param>
        <briefdescription>
<para>constructor; </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bd</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_h</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_Laplacian.H" line="49" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_Laplacian.cpp" bodystart="7" bodyend="10"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Laplacian_1ac629c94ee798d889413ccee727515f34" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>amrex::Laplacian::~Laplacian</definition>
        <argsstring>() override</argsstring>
        <name>~Laplacian</name>
        <briefdescription>
<para>destructor </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_Laplacian.H" line="55" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_Laplacian.cpp" bodystart="12" bodyend="12"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Laplacian_1a1fdc716bdcc5dbb407363b432472537c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::Laplacian::compFlux</definition>
        <argsstring>(AMREX_D_DECL(MultiFab &amp;xflux, MultiFab &amp;yflux, MultiFab &amp;zflux), MultiFab &amp;in, const BC_Mode &amp;bc_mode=LinOp::Inhomogeneous_BC, int sComp=0, int dComp=0, int nComp=1, int bndComp=0) override</argsstring>
        <name>compFlux</name>
        <reimplements refid="classamrex_1_1LinOp_1a66f650936c7785e8958617b91e7ef2a6">compFlux</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1a8de829410ed15dbc56e4dafc9bc6ea69a68b0c60ae4f5670ee8d0ad5dda84d0fd" kindref="member">AMREX_D_DECL</ref>(<ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;xflux, <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;yflux, <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;zflux)</type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1LinOp_1ad5f2fc8009714c47dc63ff6a7a73a5de" kindref="member">BC_Mode</ref> &amp;</type>
          <declname>bc_mode</declname>
          <defval><ref refid="classamrex_1_1LinOp_1ad5f2fc8009714c47dc63ff6a7a73a5dea2789f303c136a93263ed4b63ce83d29a" kindref="member">LinOp::Inhomogeneous_BC</ref></defval>
        </param>
        <param>
          <type>int</type>
          <declname>sComp</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>dComp</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>nComp</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>bndComp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Compute flux associated with the op. </para>        </briefdescription>
        <detaileddescription>
<para>) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bc_mode</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sComp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dComp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nComp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bndComp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_Laplacian.H" line="70" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_Laplacian.cpp" bodystart="27" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Laplacian_1a785d3a2255d1909868a82aa5df5060f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>Real</type>
        <definition>Real amrex::Laplacian::norm</definition>
        <argsstring>(int nm=0, int level=0, const bool local=false) override</argsstring>
        <name>norm</name>
        <reimplements refid="classamrex_1_1LinOp_1a187358833ef9bd25a218c2fd0ac499c5">norm</reimplements>
        <param>
          <type>int</type>
          <declname>nm</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>level</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Estimate the norm of the operator. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nm</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>local</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_Laplacian.H" line="74" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_Laplacian.cpp" bodystart="15" bodyend="24"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classamrex_1_1Laplacian_1ace5207492179583a920d5967d43d405d" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::Laplacian::Fapply</definition>
        <argsstring>(MultiFab &amp;out, const MultiFab &amp;in, int level) override</argsstring>
        <name>Fapply</name>
        <reimplements refid="classamrex_1_1LinOp_1a2aa4b0f8262bca0542f508adfd6d528f">Fapply</reimplements>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <briefdescription>
<para>compute out=L(in) at level=level </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_Laplacian.H" line="85" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_Laplacian.cpp" bodystart="207" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Laplacian_1ad10bec6e486e119a7c26f705fdcdfde7" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::Laplacian::Fapply</definition>
        <argsstring>(MultiFab &amp;out, int dst_comp, const MultiFab &amp;in, int src_comp, int num_comp, int level) override</argsstring>
        <name>Fapply</name>
        <reimplements refid="classamrex_1_1LinOp_1ab06ab51c6301f1491dee04f05eadd471">Fapply</reimplements>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dst_comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>int</type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_Laplacian.H" line="88" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_Laplacian.cpp" bodystart="218" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Laplacian_1a40c3f0da7cfe04502a9e2e31ef1e85b3" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::Laplacian::Fsmooth</definition>
        <argsstring>(MultiFab &amp;solnL, const MultiFab &amp;rhsL, int level, int rgbflag) override</argsstring>
        <name>Fsmooth</name>
        <reimplements refid="classamrex_1_1LinOp_1a2d3bf8d174818c5a90880d7178b0bfb9">Fsmooth</reimplements>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>solnL</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>rhsL</declname>
        </param>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <param>
          <type>int</type>
          <declname>rgbflag</declname>
        </param>
        <briefdescription>
<para>apply GSRB smoother to improve residual to <computeroutput>L(solnL)=rhsL</computeroutput> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>solnL</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhsL</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rgbflag</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_Laplacian.H" line="103" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_Laplacian.cpp" bodystart="78" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Laplacian_1a430c60bd674648f5dbd3627050e36468" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::Laplacian::Fsmooth_jacobi</definition>
        <argsstring>(MultiFab &amp;solnL, const MultiFab &amp;rhsL, int level) override</argsstring>
        <name>Fsmooth_jacobi</name>
        <reimplements refid="classamrex_1_1LinOp_1aacd9da04ef7c21a4fa606fac28b082e6">Fsmooth_jacobi</reimplements>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>solnL</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>rhsL</declname>
        </param>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <briefdescription>
<para>apply Jacobi smoother to improve residual to <computeroutput>L(solnL)=rhsL</computeroutput> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>solnL</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhsL</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_Laplacian.H" line="115" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_Laplacian.cpp" bodystart="200" bodyend="204"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A <ref refid="classamrex_1_1Laplacian" kindref="compound">Laplacian</ref> tailors the description of a linear operator to apply the second-order central difference approximation to the laplacian differential operator on a cell-centered <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> of data. </para>    </briefdescription>
    <detaileddescription>
<para>A <ref refid="classamrex_1_1Laplacian" kindref="compound">Laplacian</ref> tailors a <ref refid="classamrex_1_1LinOp" kindref="compound">LinOp</ref> (a virtual base class for general linear operators) to compute the second-order central difference approximation to the laplacian differential operator, L(phi) = div(grad(phi)), on a cell-centered <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>, phi. This class provides the necessary implementations for applying the operator and for smoothing a guessed solution for the linear equation system, L(phi) = rhs (where rhs is another cell-centered <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>). These customizations are designed for 2D and 3D, with uniform, constant mesh spacing in all directions.</para><para>Application of the operator and smoothing are &quot;level&quot; operations, and therefore must access &quot;hidden&quot; level data (such as boundary conditions, etc) as required, in concert with the semantics of the underlying <ref refid="classamrex_1_1LinOp" kindref="compound">LinOp</ref> defintions. Accordingly, these implementations are &quot;protected&quot; and called only by the publically accessible members of the virtual base class, <ref refid="classamrex_1_1LinOp" kindref="compound">LinOp</ref>. Note that these implementations may therefore assume that boundary (ghost) nodes and other pertinent information are filled properly by the base class functions prior to call.</para><para>This class does NOT provide a copy constructor or assignment operator. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="3626">
        <label>amrex::LinOp</label>
        <link refid="classamrex_1_1LinOp"/>
      </node>
      <node id="3625">
        <label>amrex::Laplacian</label>
        <link refid="classamrex_1_1Laplacian"/>
        <childnode refid="3626" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3634">
        <label>std::vector&lt; amrex::Vector&lt; amrex::MultiMask &gt;, std::allocator&lt; amrex::Vector&lt; amrex::MultiMask &gt; &gt; &gt;</label>
      </node>
      <node id="3628">
        <label>amrex::LinOp</label>
        <link refid="classamrex_1_1LinOp"/>
        <childnode refid="3629" relation="usage">
          <edgelabel>h</edgelabel>
        </childnode>
        <childnode refid="3631" relation="usage">
          <edgelabel>undrrelxr</edgelabel>
        </childnode>
        <childnode refid="3633" relation="usage">
          <edgelabel>maskvals</edgelabel>
          <edgelabel>lmaskvals</edgelabel>
        </childnode>
        <childnode refid="3635" relation="usage">
          <edgelabel>gbox</edgelabel>
        </childnode>
        <childnode refid="3637" relation="usage">
          <edgelabel>geomarray</edgelabel>
        </childnode>
        <childnode refid="3639" relation="usage">
          <edgelabel>bgb</edgelabel>
        </childnode>
      </node>
      <node id="3664">
        <label>std::vector&lt; MPI_Status, std::allocator&lt; MPI_Status &gt; &gt;</label>
      </node>
      <node id="3636">
        <label>std::vector&lt; amrex::BoxArray, std::allocator&lt; amrex::BoxArray &gt; &gt;</label>
      </node>
      <node id="3645">
        <label>amrex::FabArrayBase::CacheStats</label>
        <link refid="structamrex_1_1FabArrayBase_1_1CacheStats"/>
        <childnode refid="3646" relation="usage">
          <edgelabel>name</edgelabel>
        </childnode>
      </node>
      <node id="3649">
        <label>amrex::FabArrayBase::FabArrayStats</label>
        <link refid="structamrex_1_1FabArrayBase_1_1FabArrayStats"/>
      </node>
      <node id="3648">
        <label>amrex::IntVect</label>
        <link refid="classamrex_1_1IntVect"/>
        <childnode refid="3648" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
      </node>
      <node id="3631">
        <label>amrex::Vector&lt; amrex::BndryRegister &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3632" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3678">
        <label>amrex::LayoutData&lt; amrex::Vector&lt; amrex::Vector&lt; amrex::BoundCond &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1LayoutData"/>
        <childnode refid="3644" relation="public-inheritance">
        </childnode>
        <childnode refid="3679" relation="usage">
          <edgelabel>m_data</edgelabel>
        </childnode>
      </node>
      <node id="3670">
        <label>Real</label>
      </node>
      <node id="3638">
        <label>std::vector&lt; amrex::Geometry, std::allocator&lt; amrex::Geometry &gt; &gt;</label>
      </node>
      <node id="3665">
        <label>amrex::Vector&lt; MPI_Request &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3666" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3639">
        <label>amrex::BndryData</label>
        <link refid="classamrex_1_1BndryData"/>
        <childnode refid="3640" relation="public-inheritance">
        </childnode>
        <childnode refid="3668" relation="usage">
          <edgelabel>geom</edgelabel>
        </childnode>
        <childnode refid="3673" relation="usage">
          <edgelabel>bcloc</edgelabel>
        </childnode>
        <childnode refid="3676" relation="usage">
          <edgelabel>masks</edgelabel>
        </childnode>
        <childnode refid="3678" relation="usage">
          <edgelabel>bcond</edgelabel>
        </childnode>
      </node>
      <node id="3659">
        <label>std::vector&lt; std::string, std::allocator&lt; std::string &gt; &gt;</label>
      </node>
      <node id="3650">
        <label>amrex::Vector&lt; int &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3651" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3646">
        <label>string</label>
      </node>
      <node id="3667">
        <label>amrex::Periodicity</label>
        <link refid="classamrex_1_1Periodicity"/>
        <childnode refid="3648" relation="usage">
          <edgelabel>period</edgelabel>
        </childnode>
      </node>
      <node id="3661">
        <label>std::vector&lt; char *, std::allocator&lt; char * &gt; &gt;</label>
      </node>
      <node id="3677">
        <label>std::vector&lt; amrex::MultiMask, std::allocator&lt; amrex::MultiMask &gt; &gt;</label>
      </node>
      <node id="3635">
        <label>amrex::Vector&lt; amrex::BoxArray &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3636" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3660">
        <label>amrex::Vector&lt; char * &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3661" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3680">
        <label>std::vector&lt; amrex::Vector&lt; amrex::Vector&lt; amrex::BoundCond &gt; &gt;, std::allocator&lt; amrex::Vector&lt; amrex::Vector&lt; amrex::BoundCond &gt; &gt; &gt; &gt;</label>
      </node>
      <node id="3662">
        <label>amrex::FabArray&lt; FAB &gt;::ShMem</label>
        <link refid="structamrex_1_1FabArray_1_1ShMem"/>
      </node>
      <node id="3676">
        <label>amrex::Vector&lt; amrex::MultiMask &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3677" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3666">
        <label>std::vector&lt; MPI_Request, std::allocator&lt; MPI_Request &gt; &gt;</label>
      </node>
      <node id="3651">
        <label>std::vector&lt; int, std::allocator&lt; int &gt; &gt;</label>
      </node>
      <node id="3632">
        <label>std::vector&lt; amrex::BndryRegister, std::allocator&lt; amrex::BndryRegister &gt; &gt;</label>
      </node>
      <node id="3656">
        <label>amrex::BoxArray</label>
        <link refid="classamrex_1_1BoxArray"/>
        <childnode refid="3648" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
        </childnode>
        <childnode refid="3657" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
      </node>
      <node id="3671">
        <label>amrex::RealBox</label>
        <link refid="classamrex_1_1RealBox"/>
        <childnode refid="3670" relation="usage">
          <edgelabel>xhi</edgelabel>
          <edgelabel>xlo</edgelabel>
        </childnode>
      </node>
      <node id="3679">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::Vector&lt; amrex::BoundCond &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3680" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3672">
        <label>amrex::Box</label>
        <link refid="classamrex_1_1Box"/>
        <childnode refid="3648" relation="usage">
          <edgelabel>bigend</edgelabel>
          <edgelabel>smallend</edgelabel>
        </childnode>
        <childnode refid="3657" relation="usage">
          <edgelabel>btype</edgelabel>
        </childnode>
      </node>
      <node id="3654">
        <label>amrex::DistributionMapping::RefID</label>
        <link refid="structamrex_1_1DistributionMapping_1_1RefID"/>
        <childnode refid="3655" relation="usage">
          <edgelabel>data</edgelabel>
        </childnode>
      </node>
      <node id="3663">
        <label>amrex::Vector&lt; MPI_Status &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3664" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3669">
        <label>amrex::CoordSys</label>
        <link refid="classamrex_1_1CoordSys"/>
        <childnode refid="3670" relation="usage">
          <edgelabel>inv_dx</edgelabel>
          <edgelabel>offset</edgelabel>
          <edgelabel>dx</edgelabel>
        </childnode>
      </node>
      <node id="3657">
        <label>amrex::IndexType</label>
        <link refid="classamrex_1_1IndexType"/>
      </node>
      <node id="3655">
        <label>amrex::DistributionMapping::Ref</label>
        <link refid="structamrex_1_1DistributionMapping_1_1Ref"/>
        <childnode refid="3650" relation="usage">
          <edgelabel>m_index_array</edgelabel>
          <edgelabel>m_pmap</edgelabel>
        </childnode>
      </node>
      <node id="3641">
        <label>amrex::FabSet</label>
        <link refid="classamrex_1_1FabSet"/>
        <childnode refid="3642" relation="usage">
          <edgelabel>m_mf</edgelabel>
        </childnode>
      </node>
      <node id="3658">
        <label>amrex::Vector&lt; std::string &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3659" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3647">
        <label>amrex::DistributionMapping</label>
        <link refid="classamrex_1_1DistributionMapping"/>
      </node>
      <node id="3652">
        <label>amrex::FabArrayBase::BDKey</label>
        <link refid="structamrex_1_1FabArrayBase_1_1BDKey"/>
        <childnode refid="3653" relation="usage">
          <edgelabel>m_ba_id</edgelabel>
        </childnode>
        <childnode refid="3654" relation="usage">
          <edgelabel>m_dm_id</edgelabel>
        </childnode>
      </node>
      <node id="3642">
        <label>amrex::MultiFab</label>
        <link refid="classamrex_1_1MultiFab"/>
        <childnode refid="3643" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3640">
        <label>amrex::BndryRegister</label>
        <link refid="classamrex_1_1BndryRegister"/>
        <childnode refid="3641" relation="usage">
          <edgelabel>bndry</edgelabel>
        </childnode>
        <childnode refid="3656" relation="usage">
          <edgelabel>grids</edgelabel>
        </childnode>
      </node>
      <node id="3668">
        <label>amrex::Geometry</label>
        <link refid="classamrex_1_1Geometry"/>
        <childnode refid="3669" relation="public-inheritance">
        </childnode>
        <childnode refid="3671" relation="usage">
          <edgelabel>prob_domain</edgelabel>
        </childnode>
        <childnode refid="3672" relation="usage">
          <edgelabel>domain</edgelabel>
        </childnode>
      </node>
      <node id="3675">
        <label>std::vector&lt; RealTuple, std::allocator&lt; RealTuple &gt; &gt;</label>
      </node>
      <node id="3673">
        <label>amrex::LayoutData&lt; RealTuple &gt;</label>
        <link refid="classamrex_1_1LayoutData"/>
        <childnode refid="3644" relation="public-inheritance">
        </childnode>
        <childnode refid="3674" relation="usage">
          <edgelabel>m_data</edgelabel>
        </childnode>
      </node>
      <node id="3674">
        <label>amrex::Vector&lt; RealTuple &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3675" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3637">
        <label>amrex::Vector&lt; amrex::Geometry &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3638" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3643">
        <label>amrex::FabArray&lt; FArrayBox &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="3644" relation="public-inheritance">
        </childnode>
        <childnode refid="3648" relation="usage">
          <edgelabel>fb_nghost</edgelabel>
        </childnode>
        <childnode refid="3650" relation="usage">
          <edgelabel>fb_recv_size</edgelabel>
          <edgelabel>fb_recv_from</edgelabel>
        </childnode>
        <childnode refid="3658" relation="usage">
          <edgelabel>m_tags</edgelabel>
        </childnode>
        <childnode refid="3660" relation="usage">
          <edgelabel>fb_recv_data</edgelabel>
          <edgelabel>fb_send_data</edgelabel>
        </childnode>
        <childnode refid="3662" relation="usage">
          <edgelabel>shmem</edgelabel>
        </childnode>
        <childnode refid="3663" relation="usage">
          <edgelabel>fb_recv_stat</edgelabel>
        </childnode>
        <childnode refid="3665" relation="usage">
          <edgelabel>fb_send_reqs</edgelabel>
          <edgelabel>fb_recv_reqs</edgelabel>
        </childnode>
        <childnode refid="3667" relation="usage">
          <edgelabel>fb_period</edgelabel>
        </childnode>
      </node>
      <node id="3627">
        <label>amrex::Laplacian</label>
        <link refid="classamrex_1_1Laplacian"/>
        <childnode refid="3628" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3653">
        <label>amrex::BoxArray::RefID</label>
        <link refid="structamrex_1_1BoxArray_1_1RefID"/>
      </node>
      <node id="3644">
        <label>amrex::FabArrayBase</label>
        <link refid="classamrex_1_1FabArrayBase"/>
        <childnode refid="3645" relation="usage">
          <edgelabel>m_FBC_stats</edgelabel>
          <edgelabel>m_FPinfo_stats</edgelabel>
          <edgelabel>m_CFinfo_stats</edgelabel>
          <edgelabel>m_TAC_stats</edgelabel>
          <edgelabel>m_CPC_stats</edgelabel>
        </childnode>
        <childnode refid="3647" relation="usage">
          <edgelabel>distributionMap</edgelabel>
        </childnode>
        <childnode refid="3648" relation="usage">
          <edgelabel>n_grow</edgelabel>
          <edgelabel>comm_tile_size</edgelabel>
          <edgelabel>mfiter_tile_size</edgelabel>
          <edgelabel>mfghostiter_tile_size</edgelabel>
        </childnode>
        <childnode refid="3649" relation="usage">
          <edgelabel>m_FA_stats</edgelabel>
        </childnode>
        <childnode refid="3650" relation="usage">
          <edgelabel>indexArray</edgelabel>
        </childnode>
        <childnode refid="3652" relation="usage">
          <edgelabel>m_bdkey</edgelabel>
        </childnode>
        <childnode refid="3656" relation="usage">
          <edgelabel>boxarray</edgelabel>
        </childnode>
      </node>
      <node id="3630">
        <label>std::vector&lt; Array&lt; Real, BL_SPACEDIM &gt;, std::allocator&lt; Array&lt; Real, BL_SPACEDIM &gt; &gt; &gt;</label>
      </node>
      <node id="3633">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::MultiMask &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3634" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3629">
        <label>amrex::Vector&lt; Array&lt; Real, BL_SPACEDIM &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3630" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_Laplacian.H" line="40" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_Laplacian.H" bodystart="37" bodyend="118"/>
    <listofallmembers>
      <member refid="classamrex_1_1LinOp_1ac8d092273a44066329b73468fe885d2d" prot="public" virt="virtual"><scope>amrex::Laplacian</scope><name>aCoefficients</name></member>
      <member refid="classamrex_1_1LinOp_1ac5b9fd4b970fee2132c2ea0c5db97149" prot="public" virt="virtual"><scope>amrex::Laplacian</scope><name>apply</name></member>
      <member refid="classamrex_1_1LinOp_1a7bb88ff651d23b6908c7b2bceaa34b0e" prot="public" virt="virtual"><scope>amrex::Laplacian</scope><name>applyBC</name></member>
      <member refid="classamrex_1_1LinOp_1ad5f2fc8009714c47dc63ff6a7a73a5de" prot="public" virt="non-virtual"><scope>amrex::Laplacian</scope><name>BC_Mode</name></member>
      <member refid="classamrex_1_1LinOp_1a7bb1e7f6286ace56305bcb17a2ebd06a" prot="public" virt="virtual"><scope>amrex::Laplacian</scope><name>bCoefficients</name></member>
      <member refid="classamrex_1_1LinOp_1aa82bdf791430c2a09b3b436edf9396b5" prot="protected" virt="non-virtual"><scope>amrex::Laplacian</scope><name>bgb</name></member>
      <member refid="classamrex_1_1LinOp_1ab6ad6639bc139043d7e905f8d50e942c" prot="public" virt="non-virtual"><scope>amrex::Laplacian</scope><name>bndryData</name></member>
      <member refid="classamrex_1_1LinOp_1a4091f3d4047359da4093f5174d56f13d" prot="public" virt="non-virtual"><scope>amrex::Laplacian</scope><name>bndryData</name></member>
      <member refid="classamrex_1_1LinOp_1a5f70912a54c7de221e2d51c4f432a11d" prot="public" virt="virtual"><scope>amrex::Laplacian</scope><name>boxArray</name></member>
      <member refid="classamrex_1_1LinOp_1a4d4e5333f7d48ad27505ca77110d3e3a" prot="protected" virt="virtual"><scope>amrex::Laplacian</scope><name>clearToLevel</name></member>
      <member refid="classamrex_1_1Laplacian_1a1fdc716bdcc5dbb407363b432472537c" prot="public" virt="virtual"><scope>amrex::Laplacian</scope><name>compFlux</name></member>
      <member refid="classamrex_1_1LinOp_1a209d6c6a23f1627c3dd246b737b342a5" prot="protected" virt="non-virtual"><scope>amrex::Laplacian</scope><name>def_harmavg</name></member>
      <member refid="classamrex_1_1LinOp_1a46c9e9b959b202156654ab2a806d36b3" prot="protected" virt="non-virtual"><scope>amrex::Laplacian</scope><name>def_maxorder</name></member>
      <member refid="classamrex_1_1LinOp_1a4bc7f813757f64c47583b5c110504644" prot="protected" virt="non-virtual"><scope>amrex::Laplacian</scope><name>def_verbose</name></member>
      <member refid="classamrex_1_1LinOp_1aed40103a32e7a986e5b58594031ee887" prot="public" virt="non-virtual"><scope>amrex::Laplacian</scope><name>DistributionMap</name></member>
      <member refid="classamrex_1_1Laplacian_1ace5207492179583a920d5967d43d405d" prot="protected" virt="virtual"><scope>amrex::Laplacian</scope><name>Fapply</name></member>
      <member refid="classamrex_1_1Laplacian_1ad10bec6e486e119a7c26f705fdcdfde7" prot="protected" virt="virtual"><scope>amrex::Laplacian</scope><name>Fapply</name></member>
      <member refid="classamrex_1_1LinOp_1a3e96cce265979ab38b675c22fab24657" prot="protected" virt="non-virtual"><scope>amrex::Laplacian</scope><name>Finalize</name></member>
      <member refid="classamrex_1_1Laplacian_1a40c3f0da7cfe04502a9e2e31ef1e85b3" prot="protected" virt="virtual"><scope>amrex::Laplacian</scope><name>Fsmooth</name></member>
      <member refid="classamrex_1_1Laplacian_1a430c60bd674648f5dbd3627050e36468" prot="protected" virt="virtual"><scope>amrex::Laplacian</scope><name>Fsmooth_jacobi</name></member>
      <member refid="classamrex_1_1LinOp_1aaacb98abdbfa3d9377c369fe5cc79b68" prot="protected" virt="non-virtual"><scope>amrex::Laplacian</scope><name>gbox</name></member>
      <member refid="classamrex_1_1LinOp_1a447bf2c68e5e4fb5b275fefe879fe1e5" prot="protected" virt="non-virtual"><scope>amrex::Laplacian</scope><name>geomarray</name></member>
      <member refid="classamrex_1_1LinOp_1a5823bb22e92e48ddbc13ceae382d0747" prot="public" virt="virtual"><scope>amrex::Laplacian</scope><name>get_alpha</name></member>
      <member refid="classamrex_1_1LinOp_1af245a02cfc92f3ddf30d6ace1c1683bb" prot="public" virt="virtual"><scope>amrex::Laplacian</scope><name>get_beta</name></member>
      <member refid="classamrex_1_1LinOp_1a61745f14570d6a595ab67ec1bf283c18" prot="public" virt="non-virtual"><scope>amrex::Laplacian</scope><name>getDx</name></member>
      <member refid="classamrex_1_1LinOp_1a399736dcc956ff8f1fffaa2757028874" prot="public" virt="non-virtual"><scope>amrex::Laplacian</scope><name>getGeom</name></member>
      <member refid="classamrex_1_1LinOp_1aa9588834363609399b2953a1285311fc" prot="protected" virt="non-virtual"><scope>amrex::Laplacian</scope><name>h</name></member>
      <member refid="classamrex_1_1LinOp_1a6b431b3abaa1031a23c3d7972d7dab93" prot="protected" virt="non-virtual"><scope>amrex::Laplacian</scope><name>harmavg</name></member>
      <member refid="classamrex_1_1LinOp_1ad5f2fc8009714c47dc63ff6a7a73a5deae1724332b6960ec73ce5040947963f78" prot="public" virt="non-virtual"><scope>amrex::Laplacian</scope><name>Homogeneous_BC</name></member>
      <member refid="classamrex_1_1LinOp_1ad5f2fc8009714c47dc63ff6a7a73a5dea2789f303c136a93263ed4b63ce83d29a" prot="public" virt="non-virtual"><scope>amrex::Laplacian</scope><name>Inhomogeneous_BC</name></member>
      <member refid="classamrex_1_1LinOp_1a123f74bf002cbcc02fcfef0ac794cc57" prot="protected" virt="non-virtual"><scope>amrex::Laplacian</scope><name>initConstruct</name></member>
      <member refid="classamrex_1_1LinOp_1a089bb8eb0f74b22a7abbd60b3e872c8f" prot="protected" virt="non-virtual"><scope>amrex::Laplacian</scope><name>Initialize</name></member>
      <member refid="classamrex_1_1LinOp_1a81bae1e07a9908f6b677d1619d5eb4ee" prot="public" virt="virtual"><scope>amrex::Laplacian</scope><name>jacobi_smooth</name></member>
      <member refid="classamrex_1_1Laplacian_1a4b10e31414e608d6edac7f99f03c3639" prot="public" virt="non-virtual"><scope>amrex::Laplacian</scope><name>Laplacian</name></member>
      <member refid="classamrex_1_1LinOp_1a528f7163d138d4c86f826821e751fae5" prot="public" virt="non-virtual"><scope>amrex::Laplacian</scope><name>LinOp</name></member>
      <member refid="classamrex_1_1LinOp_1a11923eefafc8a3c572854a571edc03c8" prot="public" virt="non-virtual"><scope>amrex::Laplacian</scope><name>LinOp</name></member>
      <member refid="classamrex_1_1LinOp_1adc5128fa53133f87d6beea7127766a17" prot="public" virt="non-virtual"><scope>amrex::Laplacian</scope><name>LinOp</name></member>
      <member refid="classamrex_1_1LinOp_1afbf053df86bb20e076291152600f06ac" prot="protected" virt="non-virtual"><scope>amrex::Laplacian</scope><name>LinOp_grow</name></member>
      <member refid="classamrex_1_1LinOp_1a42cf216bf54bd0cb244669a91635dbec" prot="protected" virt="non-virtual"><scope>amrex::Laplacian</scope><name>lmaskvals</name></member>
      <member refid="classamrex_1_1LinOp_1a48100b02251f55f0394e976eca1e8211" prot="protected" virt="non-virtual"><scope>amrex::Laplacian</scope><name>makeCoefficients</name></member>
      <member refid="classamrex_1_1LinOp_1af9de09651d7047e04a70de03facb5398" prot="protected" virt="non-virtual"><scope>amrex::Laplacian</scope><name>maskvals</name></member>
      <member refid="classamrex_1_1LinOp_1aa898f6575bb89bf315bb7a5309ad944f" prot="protected" virt="non-virtual"><scope>amrex::Laplacian</scope><name>maxorder</name></member>
      <member refid="classamrex_1_1LinOp_1a09492904c8111d7108412a034efd4b1e" prot="public" virt="virtual"><scope>amrex::Laplacian</scope><name>maxOrder</name></member>
      <member refid="classamrex_1_1LinOp_1a4e9d794124be8ae04fa7c4c6ab2d5fee" prot="public" virt="virtual"><scope>amrex::Laplacian</scope><name>maxOrder</name></member>
      <member refid="classamrex_1_1Laplacian_1a785d3a2255d1909868a82aa5df5060f4" prot="public" virt="virtual"><scope>amrex::Laplacian</scope><name>norm</name></member>
      <member refid="classamrex_1_1LinOp_1aba1ac78a74d1ca7be2e9ef523c185800" prot="public" virt="non-virtual"><scope>amrex::Laplacian</scope><name>numGrids</name></member>
      <member refid="classamrex_1_1LinOp_1a8489bd97fdad9c4de15a5610a38f0652" prot="public" virt="virtual"><scope>amrex::Laplacian</scope><name>NumGrow</name></member>
      <member refid="classamrex_1_1LinOp_1a9d552129ce2624a83a6ba56ead0f4d87" prot="public" virt="virtual"><scope>amrex::Laplacian</scope><name>numLevels</name></member>
      <member refid="classamrex_1_1LinOp_1a63537ed5b853907fc8a3b7adace5a383" prot="public" virt="virtual"><scope>amrex::Laplacian</scope><name>prepareForLevel</name></member>
      <member refid="classamrex_1_1LinOp_1ab77a2e7e90d65073fccb8a54fd128177" prot="public" virt="virtual"><scope>amrex::Laplacian</scope><name>residual</name></member>
      <member refid="classamrex_1_1LinOp_1a11f5dfbd38e5b5551dbcec9df469e11d" prot="public" virt="virtual"><scope>amrex::Laplacian</scope><name>smooth</name></member>
      <member refid="classamrex_1_1LinOp_1a58088c44f9d858885f1125efb3b4222e" prot="protected" virt="non-virtual"><scope>amrex::Laplacian</scope><name>undrrelxr</name></member>
      <member refid="classamrex_1_1LinOp_1a24a48ff7792144be5c69884015388367" prot="protected" virt="non-virtual"><scope>amrex::Laplacian</scope><name>verbose</name></member>
      <member refid="classamrex_1_1Laplacian_1ac629c94ee798d889413ccee727515f34" prot="public" virt="virtual"><scope>amrex::Laplacian</scope><name>~Laplacian</name></member>
      <member refid="classamrex_1_1LinOp_1a62ce7afd9c1479ee90df81e055e88a1c" prot="public" virt="virtual"><scope>amrex::Laplacian</scope><name>~LinOp</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
