<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classamrex_1_1OpenBCSolver" kind="class" language="C++" prot="public">
    <compoundname>amrex::OpenBCSolver</compoundname>
    <includes refid="AMReX__OpenBC_8H" local="no">AMReX_OpenBC.H</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1OpenBCSolver_1a0ca647ecd06b85d8b1ae579ae02895d5" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::OpenBCSolver::m_verbose</definition>
        <argsstring></argsstring>
        <name>m_verbose</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/OpenBC/AMReX_OpenBC.H" line="97" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/OpenBC/AMReX_OpenBC.H" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1OpenBCSolver_1a1d6c905d586d04d63a33985d4a919ce2" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt;</type>
        <definition>Vector&lt;Geometry&gt; amrex::OpenBCSolver::m_geom</definition>
        <argsstring></argsstring>
        <name>m_geom</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/OpenBC/AMReX_OpenBC.H" line="98" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/OpenBC/AMReX_OpenBC.H" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1OpenBCSolver_1a036b6904fd09ed914a7b12ebc900034a" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &gt;</type>
        <definition>Vector&lt;BoxArray&gt; amrex::OpenBCSolver::m_grids</definition>
        <argsstring></argsstring>
        <name>m_grids</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/OpenBC/AMReX_OpenBC.H" line="99" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/OpenBC/AMReX_OpenBC.H" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1OpenBCSolver_1aa8a7ddd4f65f8f43b9df11669e7720cf" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt;</type>
        <definition>Vector&lt;DistributionMapping&gt; amrex::OpenBCSolver::m_dmap</definition>
        <argsstring></argsstring>
        <name>m_dmap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/OpenBC/AMReX_OpenBC.H" line="100" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/OpenBC/AMReX_OpenBC.H" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1OpenBCSolver_1aeec6daa6ebe88ef8eaf6491af2f02cd6" prot="private" static="no" mutable="no">
        <type><ref refid="structamrex_1_1LPInfo" kindref="compound">LPInfo</ref></type>
        <definition>LPInfo amrex::OpenBCSolver::m_info</definition>
        <argsstring></argsstring>
        <name>m_info</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/OpenBC/AMReX_OpenBC.H" line="101" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/OpenBC/AMReX_OpenBC.H" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1OpenBCSolver_1a709e83e70ab954da3922f40d676b5295" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1MLPoisson" kindref="compound">MLPoisson</ref> &gt;</type>
        <definition>std::unique_ptr&lt;MLPoisson&gt; amrex::OpenBCSolver::m_poisson_1</definition>
        <argsstring></argsstring>
        <name>m_poisson_1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/OpenBC/AMReX_OpenBC.H" line="102" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/OpenBC/AMReX_OpenBC.H" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1OpenBCSolver_1a30bb1d5c74178f67ac147168cf5d7e27" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1MLPoisson" kindref="compound">MLPoisson</ref> &gt;</type>
        <definition>std::unique_ptr&lt;MLPoisson&gt; amrex::OpenBCSolver::m_poisson_2</definition>
        <argsstring></argsstring>
        <name>m_poisson_2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/OpenBC/AMReX_OpenBC.H" line="103" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/OpenBC/AMReX_OpenBC.H" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1OpenBCSolver_1af4f8bd2cd9315ff6b44f81cc1e4a2d6f" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1MLMG" kindref="compound">MLMG</ref> &gt;</type>
        <definition>std::unique_ptr&lt;MLMG&gt; amrex::OpenBCSolver::m_mlmg_1</definition>
        <argsstring></argsstring>
        <name>m_mlmg_1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/OpenBC/AMReX_OpenBC.H" line="104" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/OpenBC/AMReX_OpenBC.H" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1OpenBCSolver_1a97b6170ecb8747fcc50cfc8fb11da671" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1MLMG" kindref="compound">MLMG</ref> &gt;</type>
        <definition>std::unique_ptr&lt;MLMG&gt; amrex::OpenBCSolver::m_mlmg_2</definition>
        <argsstring></argsstring>
        <name>m_mlmg_2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/OpenBC/AMReX_OpenBC.H" line="105" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/OpenBC/AMReX_OpenBC.H" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1OpenBCSolver_1a3d401d8f6e037bf70fe52989385f4dac" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::OpenBCSolver::m_coarsen_ratio</definition>
        <argsstring></argsstring>
        <name>m_coarsen_ratio</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/OpenBC/AMReX_OpenBC.H" line="107" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/OpenBC/AMReX_OpenBC.H" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1OpenBCSolver_1ae7fada71ee96535887f907f28e17246c" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>, AMREX_SPACEDIM &gt;</type>
        <definition>Array&lt;MultiFab,AMREX_SPACEDIM&gt; amrex::OpenBCSolver::m_dpdn</definition>
        <argsstring></argsstring>
        <name>m_dpdn</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/OpenBC/AMReX_OpenBC.H" line="108" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/OpenBC/AMReX_OpenBC.H" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1OpenBCSolver_1a637ef773d76e4ded161fdde7e2057d7e" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1_1Gpu_1a6e76d121ad2e1030d86ccbc9a47f6fde" kindref="member">Gpu::PinnedVector</ref>&lt; <ref refid="structamrex_1_1openbc_1_1MomTag" kindref="compound">openbc::MomTag</ref> &gt;</type>
        <definition>Gpu::PinnedVector&lt;openbc::MomTag&gt; amrex::OpenBCSolver::m_momtags_h</definition>
        <argsstring></argsstring>
        <name>m_momtags_h</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/OpenBC/AMReX_OpenBC.H" line="109" column="23" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/OpenBC/AMReX_OpenBC.H" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1OpenBCSolver_1a42401091098315c9aaab7a635345692f" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1_1Gpu_1a99e1f048890efc1c275606cb9bdc41c7" kindref="member">Gpu::DeviceVector</ref>&lt; <ref refid="structamrex_1_1openbc_1_1MomTag" kindref="compound">openbc::MomTag</ref> &gt;</type>
        <definition>Gpu::DeviceVector&lt;openbc::MomTag&gt; amrex::OpenBCSolver::m_momtags_d</definition>
        <argsstring></argsstring>
        <name>m_momtags_d</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/OpenBC/AMReX_OpenBC.H" line="111" column="23" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/OpenBC/AMReX_OpenBC.H" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1OpenBCSolver_1a80eeb93e042aaf3ba2197349b17e85c0" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1_1Gpu_1a6e76d121ad2e1030d86ccbc9a47f6fde" kindref="member">Gpu::PinnedVector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
        <definition>Gpu::PinnedVector&lt;int&gt; amrex::OpenBCSolver::m_ngpublocks_h</definition>
        <argsstring></argsstring>
        <name>m_ngpublocks_h</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/OpenBC/AMReX_OpenBC.H" line="112" column="23" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/OpenBC/AMReX_OpenBC.H" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1OpenBCSolver_1a08a177855c8f971da2aa51ebc08041bf" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1_1Gpu_1a99e1f048890efc1c275606cb9bdc41c7" kindref="member">Gpu::DeviceVector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
        <definition>Gpu::DeviceVector&lt;int&gt; amrex::OpenBCSolver::m_ngpublocks_d</definition>
        <argsstring></argsstring>
        <name>m_ngpublocks_d</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/OpenBC/AMReX_OpenBC.H" line="113" column="23" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/OpenBC/AMReX_OpenBC.H" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1OpenBCSolver_1a5d5c2037341dc1939ceb71904c642f7e" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::OpenBCSolver::m_nthreads_momtag</definition>
        <argsstring></argsstring>
        <name>m_nthreads_momtag</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/OpenBC/AMReX_OpenBC.H" line="114" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/OpenBC/AMReX_OpenBC.H" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1OpenBCSolver_1ac4211b50259bcddcdb640a73362b0e19" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::OpenBCSolver::m_nblocks_local</definition>
        <argsstring></argsstring>
        <name>m_nblocks_local</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/OpenBC/AMReX_OpenBC.H" line="117" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/OpenBC/AMReX_OpenBC.H" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1OpenBCSolver_1a23018825c7f4b69f2ccc208bc88cfaa0" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::OpenBCSolver::m_nblocks</definition>
        <argsstring></argsstring>
        <name>m_nblocks</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/OpenBC/AMReX_OpenBC.H" line="118" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/OpenBC/AMReX_OpenBC.H" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1OpenBCSolver_1ae1be4beb27cb3b3667cc36fdc6448415" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
        <definition>Vector&lt;int&gt; amrex::OpenBCSolver::m_countvec</definition>
        <argsstring></argsstring>
        <name>m_countvec</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/OpenBC/AMReX_OpenBC.H" line="120" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/OpenBC/AMReX_OpenBC.H" bodystart="120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1OpenBCSolver_1a2c1236a694939f630bd82a59f383f00d" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
        <definition>Vector&lt;int&gt; amrex::OpenBCSolver::m_offset</definition>
        <argsstring></argsstring>
        <name>m_offset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/OpenBC/AMReX_OpenBC.H" line="121" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/OpenBC/AMReX_OpenBC.H" bodystart="121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1OpenBCSolver_1a3a92090574e0adaf00fc51398e9fcc32" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>IntVect amrex::OpenBCSolver::m_ngrowdomain</definition>
        <argsstring></argsstring>
        <name>m_ngrowdomain</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/OpenBC/AMReX_OpenBC.H" line="124" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/OpenBC/AMReX_OpenBC.H" bodystart="124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1OpenBCSolver_1a25518d5cabb1d9332b6f8fb812d872cf" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref></type>
        <definition>MultiFab amrex::OpenBCSolver::m_crse_grown_faces_phi</definition>
        <argsstring></argsstring>
        <name>m_crse_grown_faces_phi</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/OpenBC/AMReX_OpenBC.H" line="125" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/OpenBC/AMReX_OpenBC.H" bodystart="125" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1OpenBCSolver_1a5169dad1c41680aa536527c80486f3b6" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref></type>
        <definition>MultiFab amrex::OpenBCSolver::m_phind</definition>
        <argsstring></argsstring>
        <name>m_phind</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/OpenBC/AMReX_OpenBC.H" line="126" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/OpenBC/AMReX_OpenBC.H" bodystart="126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1OpenBCSolver_1a597017e3faf53c6b6569a27fbf01ce3f" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref></type>
        <definition>BoxArray amrex::OpenBCSolver::m_bag</definition>
        <argsstring></argsstring>
        <name>m_bag</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/OpenBC/AMReX_OpenBC.H" line="127" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/OpenBC/AMReX_OpenBC.H" bodystart="127" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1OpenBCSolver_1abb6fd098be05f5d6763cf26b71eedee9" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref></type>
        <definition>BoxArray amrex::OpenBCSolver::m_ba_all</definition>
        <argsstring></argsstring>
        <name>m_ba_all</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/OpenBC/AMReX_OpenBC.H" line="129" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/OpenBC/AMReX_OpenBC.H" bodystart="129" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1OpenBCSolver_1a4793209f81cbca41253a8ae8950480bc" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref></type>
        <definition>DistributionMapping amrex::OpenBCSolver::m_dm_all</definition>
        <argsstring></argsstring>
        <name>m_dm_all</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/OpenBC/AMReX_OpenBC.H" line="130" column="25" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/OpenBC/AMReX_OpenBC.H" bodystart="130" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1OpenBCSolver_1a2ede296c3da0102e0aaa954e923d4342" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref></type>
        <definition>Geometry amrex::OpenBCSolver::m_geom_all</definition>
        <argsstring></argsstring>
        <name>m_geom_all</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/OpenBC/AMReX_OpenBC.H" line="131" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/OpenBC/AMReX_OpenBC.H" bodystart="131" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1OpenBCSolver_1a67f80b2378dbe69bcae2ed61f427f0f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::OpenBCSolver::OpenBCSolver</definition>
        <argsstring>()</argsstring>
        <name>OpenBCSolver</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/OpenBC/AMReX_OpenBC.H" line="61" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/OpenBC/AMReX_OpenBC.cpp" bodystart="8" bodyend="8"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1OpenBCSolver_1a31ec46379a45506dceab79e66c66f5c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::OpenBCSolver::OpenBCSolver</definition>
        <argsstring>(const Vector&lt; Geometry &gt; &amp;a_geom, const Vector&lt; BoxArray &gt; &amp;a_grids, const Vector&lt; DistributionMapping &gt; &amp;a_dmap, const LPInfo &amp;a_info=LPInfo())</argsstring>
        <name>OpenBCSolver</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>a_geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &gt; &amp;</type>
          <declname>a_grids</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt; &amp;</type>
          <declname>a_dmap</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1LPInfo" kindref="compound">LPInfo</ref> &amp;</type>
          <declname>a_info</declname>
          <defval><ref refid="structamrex_1_1LPInfo" kindref="compound">LPInfo</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/OpenBC/AMReX_OpenBC.H" line="63" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/OpenBC/AMReX_OpenBC.cpp" bodystart="10" bodyend="16"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1OpenBCSolver_1a03d5928d33717ca57878f6f45b19f7e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::OpenBCSolver::~OpenBCSolver</definition>
        <argsstring>()</argsstring>
        <name>~OpenBCSolver</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/OpenBC/AMReX_OpenBC.H" line="68" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/OpenBC/AMReX_OpenBC.cpp" bodystart="18" bodyend="18"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1OpenBCSolver_1aa89b51713976f2e1561966c3bd66574e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::OpenBCSolver::OpenBCSolver</definition>
        <argsstring>(const OpenBCSolver &amp;)=delete</argsstring>
        <name>OpenBCSolver</name>
        <param>
          <type>const <ref refid="classamrex_1_1OpenBCSolver" kindref="compound">OpenBCSolver</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/OpenBC/AMReX_OpenBC.H" line="70" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1OpenBCSolver_1ad780a1c2f297ad99edc26b462b3d65d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::OpenBCSolver::OpenBCSolver</definition>
        <argsstring>(OpenBCSolver &amp;&amp;)=delete</argsstring>
        <name>OpenBCSolver</name>
        <param>
          <type><ref refid="classamrex_1_1OpenBCSolver" kindref="compound">OpenBCSolver</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/OpenBC/AMReX_OpenBC.H" line="71" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1OpenBCSolver_1aa683523b9787a4de44ec76ce557094b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1OpenBCSolver" kindref="compound">OpenBCSolver</ref> &amp;</type>
        <definition>OpenBCSolver&amp; amrex::OpenBCSolver::operator=</definition>
        <argsstring>(const OpenBCSolver &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classamrex_1_1OpenBCSolver" kindref="compound">OpenBCSolver</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/OpenBC/AMReX_OpenBC.H" line="72" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1OpenBCSolver_1a7861601e913a4f49dd5be1338245f681" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1OpenBCSolver" kindref="compound">OpenBCSolver</ref> &amp;</type>
        <definition>OpenBCSolver&amp; amrex::OpenBCSolver::operator=</definition>
        <argsstring>(OpenBCSolver &amp;&amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1OpenBCSolver" kindref="compound">OpenBCSolver</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/OpenBC/AMReX_OpenBC.H" line="73" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1OpenBCSolver_1af01e6f4fb7c82f61c978d6afc1b20f4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::OpenBCSolver::define</definition>
        <argsstring>(const Vector&lt; Geometry &gt; &amp;a_geom, const Vector&lt; BoxArray &gt; &amp;a_grids, const Vector&lt; DistributionMapping &gt; &amp;a_dmap, const LPInfo &amp;a_info=LPInfo())</argsstring>
        <name>define</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>a_geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &gt; &amp;</type>
          <declname>a_grids</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt; &amp;</type>
          <declname>a_dmap</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1LPInfo" kindref="compound">LPInfo</ref> &amp;</type>
          <declname>a_info</declname>
          <defval><ref refid="structamrex_1_1LPInfo" kindref="compound">LPInfo</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/OpenBC/AMReX_OpenBC.H" line="75" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/OpenBC/AMReX_OpenBC.cpp" bodystart="20" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1OpenBCSolver_1a657ff95ca0e408729e171ef2a3ca2141" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::OpenBCSolver::setVerbose</definition>
        <argsstring>(int v) noexcept</argsstring>
        <name>setVerbose</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/OpenBC/AMReX_OpenBC.H" line="80" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/OpenBC/AMReX_OpenBC.cpp" bodystart="171" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1OpenBCSolver_1a687b35c6ab5b576840ab03ae61a898ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::OpenBCSolver::solve</definition>
        <argsstring>(const Vector&lt; MultiFab * &gt; &amp;a_sol, const Vector&lt; MultiFab const * &gt; &amp;a_rhs, Real a_tol_rel, Real a_tol_abs)</argsstring>
        <name>solve</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> * &gt; &amp;</type>
          <declname>a_sol</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> const * &gt; &amp;</type>
          <declname>a_rhs</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>a_tol_rel</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>a_tol_abs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/OpenBC/AMReX_OpenBC.H" line="82" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/OpenBC/AMReX_OpenBC.cpp" bodystart="176" bodyend="324"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1OpenBCSolver_1addf5ecada6e7f7ece057304b8547c5a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::OpenBCSolver::compute_moments</definition>
        <argsstring>(Gpu::DeviceVector&lt; openbc::Moments &gt; &amp;moments)</argsstring>
        <name>compute_moments</name>
        <param>
          <type><ref refid="namespaceamrex_1_1Gpu_1a99e1f048890efc1c275606cb9bdc41c7" kindref="member">Gpu::DeviceVector</ref>&lt; <ref refid="structamrex_1_1openbc_1_1Moments" kindref="compound">openbc::Moments</ref> &gt; &amp;</type>
          <declname>moments</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/OpenBC/AMReX_OpenBC.H" line="87" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/OpenBC/AMReX_OpenBC.cpp" bodystart="326" bodyend="613"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1OpenBCSolver_1ac0363c008c9b41babb1758a686a397d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::OpenBCSolver::compute_potential</definition>
        <argsstring>(Gpu::DeviceVector&lt; openbc::Moments &gt; const &amp;moments)</argsstring>
        <name>compute_potential</name>
        <param>
          <type><ref refid="namespaceamrex_1_1Gpu_1a99e1f048890efc1c275606cb9bdc41c7" kindref="member">Gpu::DeviceVector</ref>&lt; <ref refid="structamrex_1_1openbc_1_1Moments" kindref="compound">openbc::Moments</ref> &gt; const &amp;</type>
          <declname>moments</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/OpenBC/AMReX_OpenBC.H" line="88" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/OpenBC/AMReX_OpenBC.cpp" bodystart="669" bodyend="732"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1OpenBCSolver_1a5e29bc57a9ca4bc8ef562a731a373871" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::OpenBCSolver::interpolate_potential</definition>
        <argsstring>(MultiFab &amp;solg)</argsstring>
        <name>interpolate_potential</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>solg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/OpenBC/AMReX_OpenBC.H" line="89" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/OpenBC/AMReX_OpenBC.cpp" bodystart="734" bodyend="808"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classamrex_1_1OpenBCSolver_1ac9096a2954bfd6a9f717711b294b9f95" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::OpenBCSolver::bcast_moments</definition>
        <argsstring>(Gpu::DeviceVector&lt; openbc::Moments &gt; &amp;moments)</argsstring>
        <name>bcast_moments</name>
        <param>
          <type><ref refid="namespaceamrex_1_1Gpu_1a99e1f048890efc1c275606cb9bdc41c7" kindref="member">Gpu::DeviceVector</ref>&lt; <ref refid="structamrex_1_1openbc_1_1Moments" kindref="compound">openbc::Moments</ref> &gt; &amp;</type>
          <declname>moments</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/OpenBC/AMReX_OpenBC.H" line="94" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/OpenBC/AMReX_OpenBC.cpp" bodystart="616" bodyend="666"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Open Boundary Poisson Solver. </para>
    </briefdescription>
    <detaileddescription>
<para>References: (1) The Solution of Poisson&apos;s Equation for Isolated Source Distributions, R. A. James, 1977, JCP 25, 71 (2) A Local Corrections Algorithm for Solving Poisson&apos;s Equation in Three Dimensions, P. McCorquodale, P. Colella, G. T. Balls, &amp; S. B. Baden, 2007, Communications in Applied Mathematics and Computational Science, 2, 1, 57-81 </para>
    </detaileddescription>
    <collaborationgraph>
      <node id="67">
        <label>amrex::BaseFab&lt; Real &gt;</label>
        <link refid="classamrex_1_1BaseFab"/>
        <childnode refid="68" relation="public-inheritance">
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>domain</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>dptr</edgelabel>
        </childnode>
      </node>
      <node id="75">
        <label>std::vector&lt; MPI_Status, std::allocator&lt; MPI_Status &gt; &gt;</label>
        <childnode refid="16" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="141">
        <label>std::vector&lt; amrex::BoxArray, std::allocator&lt; amrex::BoxArray &gt; &gt;</label>
        <childnode refid="16" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="51">
        <label>amrex::BoxList</label>
        <link refid="classamrex_1_1BoxList"/>
        <childnode refid="45" relation="usage">
          <edgelabel>m_lbox</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>btype</edgelabel>
        </childnode>
      </node>
      <node id="70">
        <label>amrex::ArenaInfo</label>
        <link refid="structamrex_1_1ArenaInfo"/>
      </node>
      <node id="57">
        <label>amrex::BATindexType</label>
        <link refid="structamrex_1_1BATindexType"/>
        <childnode refid="9" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
      </node>
      <node id="72">
        <label>std::unique_ptr&lt; amrex::FBData&lt; FArrayBox &gt; &gt;</label>
        <childnode refid="73" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="46">
        <label>std::vector&lt; amrex::Box, std::allocator&lt; amrex::Box &gt; &gt;</label>
        <childnode refid="16" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="114">
        <label>amrex::Vector&lt; double &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="115" relation="public-inheritance">
        </childnode>
      </node>
      <node id="59">
        <label>amrex::BATindexType_coarsenRatio</label>
        <link refid="structamrex_1_1BATindexType__coarsenRatio"/>
        <childnode refid="8" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
      </node>
      <node id="37">
        <label>K</label>
      </node>
      <node id="58">
        <label>amrex::BATnull</label>
        <link refid="structamrex_1_1BATnull"/>
      </node>
      <node id="8">
        <label>amrex::IntVect</label>
        <link refid="classamrex_1_1IntVect"/>
        <childnode refid="8" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
      </node>
      <node id="16">
        <label>T</label>
      </node>
      <node id="117">
        <label>amrex::MLPoisson</label>
        <link refid="classamrex_1_1MLPoisson"/>
        <childnode refid="118" relation="public-inheritance">
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>m_is_singular</edgelabel>
        </childnode>
      </node>
      <node id="34">
        <label>amrex::FabArrayBase::CommMetaData</label>
        <link refid="structamrex_1_1FabArrayBase_1_1CommMetaData"/>
        <childnode refid="35" relation="usage">
          <edgelabel>m_RcvTags</edgelabel>
          <edgelabel>m_SndTags</edgelabel>
        </childnode>
        <childnode refid="38" relation="usage">
          <edgelabel>m_LocTags</edgelabel>
        </childnode>
      </node>
      <node id="126">
        <label>amrex::Vector&lt; std::unique_ptr&lt; amrex::MultiFab &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="127" relation="public-inheritance">
        </childnode>
      </node>
      <node id="77">
        <label>std::unique_ptr&lt; amrex::FabArray&lt; FArrayBox &gt; &gt;</label>
        <childnode refid="23" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="25">
        <label>amrex::FabFactory&lt; FArrayBox &gt;</label>
        <link refid="classamrex_1_1FabFactory"/>
      </node>
      <node id="4">
        <label>Real</label>
      </node>
      <node id="143">
        <label>std::vector&lt; amrex::Geometry, std::allocator&lt; amrex::Geometry &gt; &gt;</label>
        <childnode refid="16" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="112">
        <label>std::vector&lt; amrex::Any, std::allocator&lt; amrex::Any &gt; &gt;</label>
        <childnode refid="16" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="39">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="16" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="63">
        <label>amrex::Vector&lt; MPI_Request &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="64" relation="public-inheritance">
        </childnode>
      </node>
      <node id="81">
        <label>amrex::MultiArray4&lt; value_type &gt;</label>
        <link refid="structamrex_1_1MultiArray4"/>
        <childnode refid="82" relation="usage">
          <edgelabel>hp</edgelabel>
          <edgelabel>dp</edgelabel>
        </childnode>
      </node>
      <node id="110">
        <label>std::vector&lt; amrex::Vector&lt; amrex::Any &gt;, std::allocator&lt; amrex::Vector&lt; amrex::Any &gt; &gt; &gt;</label>
        <childnode refid="16" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="68">
        <label>amrex::DataAllocator</label>
        <link refid="structamrex_1_1DataAllocator"/>
        <childnode refid="69" relation="usage">
          <edgelabel>m_arena</edgelabel>
        </childnode>
      </node>
      <node id="43">
        <label>std::unordered_map&lt; IntVect, std::vector&lt; int &gt;, IntVect::shift_hasher &gt;</label>
        <childnode refid="8" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="44" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="88">
        <label>amrex::MLMG</label>
        <link refid="classamrex_1_1MLMG"/>
        <childnode refid="89" relation="usage">
          <edgelabel>ns_linop</edgelabel>
        </childnode>
        <childnode refid="107" relation="usage">
          <edgelabel>m_iter_fine_resnorm0</edgelabel>
        </childnode>
        <childnode refid="109" relation="usage">
          <edgelabel>cor</edgelabel>
          <edgelabel>cor_hold</edgelabel>
          <edgelabel>rescor</edgelabel>
          <edgelabel>res</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>sol_is_alias</edgelabel>
          <edgelabel>m_niters_cg</edgelabel>
        </childnode>
        <childnode refid="111" relation="usage">
          <edgelabel>rhs</edgelabel>
          <edgelabel>sol</edgelabel>
        </childnode>
        <childnode refid="87" relation="usage">
          <edgelabel>ns_mlmg</edgelabel>
        </childnode>
        <childnode refid="113" relation="usage">
          <edgelabel>ns_rhs</edgelabel>
          <edgelabel>ns_sol</edgelabel>
        </childnode>
        <childnode refid="114" relation="usage">
          <edgelabel>timer</edgelabel>
        </childnode>
        <childnode refid="90" relation="usage">
          <edgelabel>linop</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>bottom_reltol</edgelabel>
          <edgelabel>bottom_abstol</edgelabel>
          <edgelabel>m_final_resnorm0</edgelabel>
          <edgelabel>m_rhsnorm0</edgelabel>
          <edgelabel>m_init_resnorm0</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>amrex::GpuArray&lt; float, AMREX_SPACEDIM &gt;</label>
        <link refid="structamrex_1_1GpuArray"/>
      </node>
      <node id="101">
        <label>std::vector&lt; Array&lt; BCType, AMREX_SPACEDIM &gt;, std::allocator&lt; Array&lt; BCType, AMREX_SPACEDIM &gt; &gt; &gt;</label>
        <childnode refid="16" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="79">
        <label>std::vector&lt; std::string, std::allocator&lt; std::string &gt; &gt;</label>
        <childnode refid="16" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="26">
        <label>amrex::MultiArray4&lt; value_type const &gt;</label>
        <link refid="structamrex_1_1MultiArray4"/>
        <childnode refid="27" relation="usage">
          <edgelabel>hp</edgelabel>
          <edgelabel>dp</edgelabel>
        </childnode>
      </node>
      <node id="82">
        <label>amrex::Array4&lt; value_type &gt;</label>
        <link refid="structamrex_1_1Array4"/>
        <childnode refid="28" relation="usage">
          <edgelabel>begin</edgelabel>
          <edgelabel>end</edgelabel>
        </childnode>
      </node>
      <node id="96">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::BoxArray &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="97" relation="public-inheritance">
        </childnode>
      </node>
      <node id="97">
        <label>std::vector&lt; amrex::Vector&lt; amrex::BoxArray &gt;, std::allocator&lt; amrex::Vector&lt; amrex::BoxArray &gt; &gt; &gt;</label>
        <childnode refid="16" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="20">
        <label>amrex::Vector&lt; amrex::DistributionMapping &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="21" relation="public-inheritance">
        </childnode>
      </node>
      <node id="36">
        <label>std::map&lt; K, T &gt;</label>
        <childnode refid="37" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="69">
        <label>amrex::Arena</label>
        <link refid="classamrex_1_1Arena"/>
        <childnode refid="70" relation="usage">
          <edgelabel>arena_info</edgelabel>
        </childnode>
      </node>
      <node id="14">
        <label>amrex::Vector&lt; int &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="15" relation="public-inheritance">
        </childnode>
      </node>
      <node id="60">
        <label>amrex::Periodicity</label>
        <link refid="classamrex_1_1Periodicity"/>
        <childnode refid="8" relation="usage">
          <edgelabel>period</edgelabel>
        </childnode>
      </node>
      <node id="113">
        <label>std::unique_ptr&lt; amrex::MultiFab &gt;</label>
        <childnode refid="22" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="62">
        <label>std::vector&lt; char *, std::allocator&lt; char * &gt; &gt;</label>
        <childnode refid="16" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="73">
        <label>amrex::FBData&lt; FArrayBox &gt;</label>
        <link refid="structamrex_1_1FBData"/>
        <childnode refid="31" relation="usage">
          <edgelabel>recv_size</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>recv_from</edgelabel>
        </childnode>
        <childnode refid="61" relation="usage">
          <edgelabel>recv_data</edgelabel>
          <edgelabel>send_data</edgelabel>
        </childnode>
        <childnode refid="74" relation="usage">
          <edgelabel>recv_stat</edgelabel>
        </childnode>
        <childnode refid="63" relation="usage">
          <edgelabel>send_reqs</edgelabel>
          <edgelabel>recv_reqs</edgelabel>
        </childnode>
        <childnode refid="76" relation="usage">
          <edgelabel>fb</edgelabel>
        </childnode>
      </node>
      <node id="130">
        <label>amrex::Vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::MLCellLinOp::BndryCondLoc &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="131" relation="public-inheritance">
        </childnode>
      </node>
      <node id="108">
        <label>std::vector&lt; Real, std::allocator&lt; Real &gt; &gt;</label>
        <childnode refid="16" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="55">
        <label>amrex::Orientation</label>
        <link refid="classamrex_1_1Orientation"/>
      </node>
      <node id="42">
        <label>amrex::BARef</label>
        <link refid="structamrex_1_1BARef"/>
        <childnode refid="8" relation="usage">
          <edgelabel>crsn</edgelabel>
        </childnode>
        <childnode refid="43" relation="usage">
          <edgelabel>hash</edgelabel>
        </childnode>
        <childnode refid="45" relation="usage">
          <edgelabel>m_abox</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>bbox</edgelabel>
        </childnode>
      </node>
      <node id="140">
        <label>amrex::Vector&lt; amrex::BoxArray &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="141" relation="public-inheritance">
        </childnode>
      </node>
      <node id="131">
        <label>std::vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::MLCellLinOp::BndryCondLoc &gt; &gt;, std::allocator&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::MLCellLinOp::BndryCondLoc &gt; &gt; &gt; &gt;</label>
        <childnode refid="16" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="76">
        <label>amrex::FabArrayBase::FB</label>
        <link refid="structamrex_1_1FabArrayBase_1_1FB"/>
        <childnode refid="34" relation="public-inheritance">
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>m_ngrow</edgelabel>
          <edgelabel>m_crse_ratio</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
        <childnode refid="60" relation="usage">
          <edgelabel>m_period</edgelabel>
        </childnode>
      </node>
      <node id="61">
        <label>amrex::Vector&lt; char * &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="62" relation="public-inheritance">
        </childnode>
      </node>
      <node id="91">
        <label>amrex::Vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::FabFactory&lt; amrex::FArrayBox &gt; &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="92" relation="public-inheritance">
        </childnode>
      </node>
      <node id="52">
        <label>amrex::BATransformer</label>
        <link refid="structamrex_1_1BATransformer"/>
        <childnode refid="53" relation="usage">
          <edgelabel>m_op</edgelabel>
        </childnode>
      </node>
      <node id="104">
        <label>std::unique_ptr&lt; amrex::MLLinOp::CommContainer &gt;</label>
        <childnode refid="105" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="94">
        <label>std::vector&lt; amrex::Vector&lt; amrex::Geometry &gt;, std::allocator&lt; amrex::Vector&lt; amrex::Geometry &gt; &gt; &gt;</label>
        <childnode refid="16" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="56">
        <label>amrex::BATcoarsenRatio</label>
        <link refid="structamrex_1_1BATcoarsenRatio"/>
        <childnode refid="8" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
        </childnode>
      </node>
      <node id="80">
        <label>amrex::FabArray&lt; FAB &gt;::ShMem</label>
        <link refid="structamrex_1_1FabArray_1_1ShMem"/>
      </node>
      <node id="135">
        <label>std::vector&lt; std::unique_ptr&lt; amrex::BndryRegister &gt;, std::allocator&lt; std::unique_ptr&lt; amrex::BndryRegister &gt; &gt; &gt;</label>
        <childnode refid="16" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="129">
        <label>std::vector&lt; amrex::Vector&lt; Real &gt;, std::allocator&lt; amrex::Vector&lt; Real &gt; &gt; &gt;</label>
        <childnode refid="16" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="53">
        <label>amrex::BATransformer::BATOp</label>
        <link refid="unionamrex_1_1BATransformer_1_1BATOp"/>
        <childnode refid="54" relation="usage">
          <edgelabel>m_bndryReg</edgelabel>
        </childnode>
        <childnode refid="56" relation="usage">
          <edgelabel>m_coarsenRatio</edgelabel>
        </childnode>
        <childnode refid="57" relation="usage">
          <edgelabel>m_indexType</edgelabel>
        </childnode>
        <childnode refid="58" relation="usage">
          <edgelabel>m_null</edgelabel>
        </childnode>
        <childnode refid="59" relation="usage">
          <edgelabel>m_indexType_coarsenRatio</edgelabel>
        </childnode>
      </node>
      <node id="65">
        <label>std::vector&lt; FArrayBox * &gt;</label>
        <childnode refid="66" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="93">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::Geometry &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="94" relation="public-inheritance">
        </childnode>
      </node>
      <node id="33">
        <label>amrex::FabArrayBase::CPC</label>
        <link refid="structamrex_1_1FabArrayBase_1_1CPC"/>
        <childnode refid="34" relation="public-inheritance">
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>m_srcng</edgelabel>
          <edgelabel>m_dstng</edgelabel>
        </childnode>
        <childnode refid="40" relation="usage">
          <edgelabel>m_dstbdk</edgelabel>
          <edgelabel>m_srcbdk</edgelabel>
        </childnode>
        <childnode refid="48" relation="usage">
          <edgelabel>m_srcba</edgelabel>
          <edgelabel>m_dstba</edgelabel>
        </childnode>
        <childnode refid="60" relation="usage">
          <edgelabel>m_period</edgelabel>
        </childnode>
      </node>
      <node id="122">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::BndryRegister &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="123" relation="public-inheritance">
        </childnode>
      </node>
      <node id="95">
        <label>amrex::RealVect</label>
        <link refid="classamrex_1_1RealVect"/>
        <childnode refid="95" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>vect</edgelabel>
        </childnode>
      </node>
      <node id="28">
        <label>amrex::Dim3</label>
        <link refid="structamrex_1_1Dim3"/>
      </node>
      <node id="21">
        <label>std::vector&lt; amrex::DistributionMapping, std::allocator&lt; amrex::DistributionMapping &gt; &gt;</label>
        <childnode refid="16" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="85">
        <label>amrex::openbc::MomTag</label>
        <link refid="structamrex_1_1openbc_1_1MomTag"/>
        <childnode refid="55" relation="usage">
          <edgelabel>face</edgelabel>
        </childnode>
        <childnode refid="86" relation="usage">
          <edgelabel>gp</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>b2d</edgelabel>
        </childnode>
      </node>
      <node id="124">
        <label>amrex::Vector&lt; amrex::YAFluxRegister &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="125" relation="public-inheritance">
        </childnode>
      </node>
      <node id="98">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::DistributionMapping &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="99" relation="public-inheritance">
        </childnode>
      </node>
      <node id="125">
        <label>std::vector&lt; amrex::YAFluxRegister, std::allocator&lt; amrex::YAFluxRegister &gt; &gt;</label>
        <childnode refid="16" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="102">
        <label>amrex::Vector&lt; amrex::IntVect &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="103" relation="public-inheritance">
        </childnode>
      </node>
      <node id="127">
        <label>std::vector&lt; std::unique_ptr&lt; amrex::MultiFab &gt;, std::allocator&lt; std::unique_ptr&lt; amrex::MultiFab &gt; &gt; &gt;</label>
        <childnode refid="16" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="64">
        <label>std::vector&lt; MPI_Request, std::allocator&lt; MPI_Request &gt; &gt;</label>
        <childnode refid="16" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="84">
        <label>std::allocator&lt; amrex::openbc::MomTag &gt;</label>
        <childnode refid="16" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="86">
        <label>amrex::Array4&lt; Real const &gt;</label>
        <link refid="structamrex_1_1Array4"/>
        <childnode refid="28" relation="usage">
          <edgelabel>begin</edgelabel>
          <edgelabel>end</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>p</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>amrex::OpenBCSolver</label>
        <link refid="classamrex_1_1OpenBCSolver"/>
        <childnode refid="2" relation="usage">
          <edgelabel>m_geom_all</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>m_dm_all</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>m_ngpublocks_d</edgelabel>
          <edgelabel>m_ngpublocks_h</edgelabel>
        </childnode>
        <childnode refid="20" relation="usage">
          <edgelabel>m_dmap</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>m_ngrowdomain</edgelabel>
        </childnode>
        <childnode refid="22" relation="usage">
          <edgelabel>m_phind</edgelabel>
          <edgelabel>m_crse_grown_faces_phi</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>m_offset</edgelabel>
          <edgelabel>m_countvec</edgelabel>
        </childnode>
        <childnode refid="83" relation="usage">
          <edgelabel>m_momtags_d</edgelabel>
          <edgelabel>m_momtags_h</edgelabel>
        </childnode>
        <childnode refid="87" relation="usage">
          <edgelabel>m_mlmg_1</edgelabel>
          <edgelabel>m_mlmg_2</edgelabel>
        </childnode>
        <childnode refid="116" relation="usage">
          <edgelabel>m_poisson_1</edgelabel>
          <edgelabel>m_poisson_2</edgelabel>
        </childnode>
        <childnode refid="140" relation="usage">
          <edgelabel>m_grids</edgelabel>
        </childnode>
        <childnode refid="48" relation="usage">
          <edgelabel>m_ba_all</edgelabel>
          <edgelabel>m_bag</edgelabel>
        </childnode>
        <childnode refid="106" relation="usage">
          <edgelabel>m_info</edgelabel>
        </childnode>
        <childnode refid="142" relation="usage">
          <edgelabel>m_geom</edgelabel>
        </childnode>
      </node>
      <node id="15">
        <label>std::vector&lt; int, std::allocator&lt; int &gt; &gt;</label>
        <childnode refid="16" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="48">
        <label>amrex::BoxArray</label>
        <link refid="classamrex_1_1BoxArray"/>
        <childnode refid="49" relation="usage">
          <edgelabel>m_ref</edgelabel>
        </childnode>
        <childnode refid="50" relation="usage">
          <edgelabel>m_simplified_list</edgelabel>
        </childnode>
        <childnode refid="52" relation="usage">
          <edgelabel>m_bat</edgelabel>
        </childnode>
      </node>
      <node id="134">
        <label>amrex::Vector&lt; std::unique_ptr&lt; amrex::BndryRegister &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="135" relation="public-inheritance">
        </childnode>
      </node>
      <node id="90">
        <label>amrex::MLLinOp</label>
        <link refid="classamrex_1_1MLLinOp"/>
        <childnode refid="91" relation="usage">
          <edgelabel>m_factory</edgelabel>
        </childnode>
        <childnode refid="93" relation="usage">
          <edgelabel>m_geom</edgelabel>
        </childnode>
        <childnode refid="95" relation="usage">
          <edgelabel>m_coarse_bc_loc</edgelabel>
        </childnode>
        <childnode refid="96" relation="usage">
          <edgelabel>m_grids</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>m_ixtype</edgelabel>
        </childnode>
        <childnode refid="22" relation="usage">
          <edgelabel>m_coarse_data_for_bc</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>m_domain_covered</edgelabel>
          <edgelabel>m_amr_ref_ratio</edgelabel>
          <edgelabel>m_num_mg_levels</edgelabel>
        </childnode>
        <childnode refid="98" relation="usage">
          <edgelabel>m_dmap</edgelabel>
        </childnode>
        <childnode refid="100" relation="usage">
          <edgelabel>m_hibc</edgelabel>
          <edgelabel>m_lobc_orig</edgelabel>
          <edgelabel>m_lobc</edgelabel>
          <edgelabel>m_hibc_orig</edgelabel>
        </childnode>
        <childnode refid="102" relation="usage">
          <edgelabel>mg_coarsen_ratio_vec</edgelabel>
        </childnode>
        <childnode refid="90" relation="usage">
          <edgelabel>m_parent</edgelabel>
        </childnode>
        <childnode refid="104" relation="usage">
          <edgelabel>m_raii_comm</edgelabel>
        </childnode>
        <childnode refid="106" relation="usage">
          <edgelabel>info</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>amrex::RealBox</label>
        <link refid="classamrex_1_1RealBox"/>
        <childnode refid="4" relation="usage">
          <edgelabel>xhi</edgelabel>
          <edgelabel>xlo</edgelabel>
        </childnode>
      </node>
      <node id="27">
        <label>amrex::Array4&lt; value_type const &gt;</label>
        <link refid="structamrex_1_1Array4"/>
        <childnode refid="28" relation="usage">
          <edgelabel>begin</edgelabel>
          <edgelabel>end</edgelabel>
        </childnode>
      </node>
      <node id="133">
        <label>std::vector&lt; amrex::Vector&lt; Array&lt; amrex::MultiMask, 2 *AMREX_SPACEDIM &gt; &gt;, std::allocator&lt; amrex::Vector&lt; Array&lt; amrex::MultiMask, 2 *AMREX_SPACEDIM &gt; &gt; &gt; &gt;</label>
        <childnode refid="16" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>amrex::Box</label>
        <link refid="classamrex_1_1Box"/>
        <childnode refid="8" relation="usage">
          <edgelabel>bigend</edgelabel>
          <edgelabel>smallend</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>btype</edgelabel>
        </childnode>
      </node>
      <node id="120">
        <label>amrex::Vector&lt; std::unique_ptr&lt; amrex::iMultiFab &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="121" relation="public-inheritance">
        </childnode>
      </node>
      <node id="111">
        <label>amrex::Vector&lt; amrex::Any &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="112" relation="public-inheritance">
        </childnode>
      </node>
      <node id="100">
        <label>amrex::Vector&lt; Array&lt; BCType, AMREX_SPACEDIM &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="101" relation="public-inheritance">
        </childnode>
      </node>
      <node id="29">
        <label>std::unique_ptr&lt; amrex::PCData&lt; FArrayBox &gt; &gt;</label>
        <childnode refid="30" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="49">
        <label>std::shared_ptr&lt; amrex::BARef &gt;</label>
        <childnode refid="42" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="47">
        <label>amrex::DistributionMapping::RefID</label>
        <link refid="structamrex_1_1DistributionMapping_1_1RefID"/>
        <childnode refid="13" relation="usage">
          <edgelabel>data</edgelabel>
        </childnode>
      </node>
      <node id="12">
        <label>std::shared_ptr&lt; amrex::DistributionMapping::Ref &gt;</label>
        <childnode refid="13" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="74">
        <label>amrex::Vector&lt; MPI_Status &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="75" relation="public-inheritance">
        </childnode>
      </node>
      <node id="106">
        <label>amrex::LPInfo</label>
        <link refid="structamrex_1_1LPInfo"/>
      </node>
      <node id="3">
        <label>amrex::CoordSys</label>
        <link refid="classamrex_1_1CoordSys"/>
        <childnode refid="4" relation="usage">
          <edgelabel>inv_dx</edgelabel>
          <edgelabel>offset</edgelabel>
          <edgelabel>dx</edgelabel>
        </childnode>
      </node>
      <node id="54">
        <label>amrex::BATbndryReg</label>
        <link refid="structamrex_1_1BATbndryReg"/>
        <childnode refid="8" relation="usage">
          <edgelabel>m_doihi</edgelabel>
          <edgelabel>m_doilo</edgelabel>
          <edgelabel>m_hishft</edgelabel>
          <edgelabel>m_crse_ratio</edgelabel>
          <edgelabel>m_loshft</edgelabel>
        </childnode>
        <childnode refid="55" relation="usage">
          <edgelabel>m_face</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
      </node>
      <node id="87">
        <label>std::unique_ptr&lt; amrex::MLMG &gt;</label>
        <childnode refid="88" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="18">
        <label>amrex::PODVector&lt; int &gt;</label>
        <link refid="classamrex_1_1PODVector"/>
        <childnode refid="19" relation="public-inheritance">
        </childnode>
      </node>
      <node id="35">
        <label>std::unique_ptr&lt; MapOfCopyComTagContainers &gt;</label>
        <childnode refid="36" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="105">
        <label>amrex::MLLinOp::CommContainer</label>
        <link refid="structamrex_1_1MLLinOp_1_1CommContainer"/>
      </node>
      <node id="137">
        <label>std::vector&lt; std::unique_ptr&lt; amrex::MLMGBndry &gt;, std::allocator&lt; std::unique_ptr&lt; amrex::MLMGBndry &gt; &gt; &gt;</label>
        <childnode refid="16" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="118">
        <label>amrex::MLCellABecLap</label>
        <link refid="classamrex_1_1MLCellABecLap"/>
        <childnode refid="119" relation="public-inheritance">
        </childnode>
        <childnode refid="138" relation="usage">
          <edgelabel>m_overset_mask</edgelabel>
        </childnode>
        <childnode refid="106" relation="usage">
          <edgelabel>m_lpinfo_arg</edgelabel>
        </childnode>
      </node>
      <node id="9">
        <label>amrex::IndexType</label>
        <link refid="classamrex_1_1IndexType"/>
      </node>
      <node id="19">
        <label>std::allocator&lt; int &gt;</label>
        <childnode refid="16" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="13">
        <label>amrex::DistributionMapping::Ref</label>
        <link refid="structamrex_1_1DistributionMapping_1_1Ref"/>
        <childnode refid="14" relation="usage">
          <edgelabel>m_index_array</edgelabel>
          <edgelabel>m_pmap</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>m_ownership</edgelabel>
        </childnode>
      </node>
      <node id="78">
        <label>amrex::Vector&lt; std::string &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="79" relation="public-inheritance">
        </childnode>
      </node>
      <node id="71">
        <label>amrex::FABio</label>
        <link refid="classamrex_1_1FABio"/>
      </node>
      <node id="138">
        <label>amrex::Vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::iMultiFab &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="139" relation="public-inheritance">
        </childnode>
      </node>
      <node id="115">
        <label>std::vector&lt; double, std::allocator&lt; double &gt; &gt;</label>
        <childnode refid="16" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="11">
        <label>amrex::DistributionMapping</label>
        <link refid="classamrex_1_1DistributionMapping"/>
        <childnode refid="12" relation="usage">
          <edgelabel>m_ref</edgelabel>
        </childnode>
      </node>
      <node id="40">
        <label>amrex::FabArrayBase::BDKey</label>
        <link refid="structamrex_1_1FabArrayBase_1_1BDKey"/>
        <childnode refid="41" relation="usage">
          <edgelabel>m_ba_id</edgelabel>
        </childnode>
        <childnode refid="47" relation="usage">
          <edgelabel>m_dm_id</edgelabel>
        </childnode>
      </node>
      <node id="103">
        <label>std::vector&lt; amrex::IntVect, std::allocator&lt; amrex::IntVect &gt; &gt;</label>
        <childnode refid="16" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="132">
        <label>amrex::Vector&lt; amrex::Vector&lt; Array&lt; amrex::MultiMask, 2 *AMREX_SPACEDIM &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="133" relation="public-inheritance">
        </childnode>
      </node>
      <node id="17">
        <label>std::vector&lt; bool &gt;</label>
      </node>
      <node id="107">
        <label>amrex::Vector&lt; Real &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="108" relation="public-inheritance">
        </childnode>
      </node>
      <node id="24">
        <label>std::unique_ptr&lt; amrex::FabFactory&lt; FArrayBox &gt; &gt;</label>
        <childnode refid="25" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="22">
        <label>amrex::MultiFab</label>
        <link refid="classamrex_1_1MultiFab"/>
        <childnode refid="23" relation="public-inheritance">
        </childnode>
      </node>
      <node id="121">
        <label>std::vector&lt; std::unique_ptr&lt; amrex::iMultiFab &gt;, std::allocator&lt; std::unique_ptr&lt; amrex::iMultiFab &gt; &gt; &gt;</label>
        <childnode refid="16" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>amrex::Geometry</label>
        <link refid="classamrex_1_1Geometry"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>prob_domain</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>roundoff_hi_f</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>domain</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>roundoff_hi_d</edgelabel>
        </childnode>
      </node>
      <node id="50">
        <label>std::shared_ptr&lt; amrex::BoxList &gt;</label>
        <childnode refid="51" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="123">
        <label>std::vector&lt; amrex::Vector&lt; amrex::BndryRegister &gt;, std::allocator&lt; amrex::Vector&lt; amrex::BndryRegister &gt; &gt; &gt;</label>
        <childnode refid="16" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="10">
        <label>amrex::GpuArray&lt; double, AMREX_SPACEDIM &gt;</label>
        <link refid="structamrex_1_1GpuArray"/>
      </node>
      <node id="89">
        <label>std::unique_ptr&lt; amrex::MLLinOp &gt;</label>
        <childnode refid="90" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="83">
        <label>amrex::PODVector&lt; amrex::openbc::MomTag &gt;</label>
        <link refid="classamrex_1_1PODVector"/>
        <childnode refid="84" relation="public-inheritance">
        </childnode>
        <childnode refid="85" relation="usage">
          <edgelabel>const_reference</edgelabel>
          <edgelabel>const_iterator</edgelabel>
          <edgelabel>const_pointer</edgelabel>
          <edgelabel>m_data</edgelabel>
        </childnode>
      </node>
      <node id="119">
        <label>amrex::MLCellLinOp</label>
        <link refid="classamrex_1_1MLCellLinOp"/>
        <childnode refid="90" relation="public-inheritance">
        </childnode>
        <childnode refid="120" relation="usage">
          <edgelabel>m_norm_fine_mask</edgelabel>
        </childnode>
        <childnode refid="122" relation="usage">
          <edgelabel>m_undrrelxr</edgelabel>
        </childnode>
        <childnode refid="124" relation="usage">
          <edgelabel>m_fluxreg</edgelabel>
        </childnode>
        <childnode refid="126" relation="usage">
          <edgelabel>m_robin_bcval</edgelabel>
        </childnode>
        <childnode refid="128" relation="usage">
          <edgelabel>m_volinv</edgelabel>
        </childnode>
        <childnode refid="130" relation="usage">
          <edgelabel>m_bcondloc</edgelabel>
        </childnode>
        <childnode refid="132" relation="usage">
          <edgelabel>m_maskvals</edgelabel>
        </childnode>
        <childnode refid="134" relation="usage">
          <edgelabel>m_crse_sol_br</edgelabel>
          <edgelabel>m_crse_cor_br</edgelabel>
        </childnode>
        <childnode refid="136" relation="usage">
          <edgelabel>m_bndry_sol</edgelabel>
          <edgelabel>m_bndry_cor</edgelabel>
        </childnode>
      </node>
      <node id="142">
        <label>amrex::Vector&lt; amrex::Geometry &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="143" relation="public-inheritance">
        </childnode>
      </node>
      <node id="116">
        <label>std::unique_ptr&lt; amrex::MLPoisson &gt;</label>
        <childnode refid="117" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="66">
        <label>amrex::FArrayBox</label>
        <link refid="classamrex_1_1FArrayBox"/>
        <childnode refid="67" relation="public-inheritance">
        </childnode>
        <childnode refid="71" relation="usage">
          <edgelabel>fabio</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>initval</edgelabel>
        </childnode>
      </node>
      <node id="23">
        <label>amrex::FabArray&lt; FArrayBox &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="24" relation="usage">
          <edgelabel>m_factory</edgelabel>
        </childnode>
        <childnode refid="26" relation="usage">
          <edgelabel>m_const_arrays</edgelabel>
        </childnode>
        <childnode refid="29" relation="usage">
          <edgelabel>pcd</edgelabel>
        </childnode>
        <childnode refid="65" relation="usage">
          <edgelabel>m_fabs_v</edgelabel>
        </childnode>
        <childnode refid="72" relation="usage">
          <edgelabel>fbd</edgelabel>
        </childnode>
        <childnode refid="68" relation="usage">
          <edgelabel>m_dallocator</edgelabel>
        </childnode>
        <childnode refid="77" relation="usage">
          <edgelabel>os_temp</edgelabel>
        </childnode>
        <childnode refid="78" relation="usage">
          <edgelabel>m_tags</edgelabel>
        </childnode>
        <childnode refid="80" relation="usage">
          <edgelabel>shmem</edgelabel>
        </childnode>
        <childnode refid="81" relation="usage">
          <edgelabel>m_arrays</edgelabel>
        </childnode>
      </node>
      <node id="31">
        <label>amrex::Vector&lt; std::size_t &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="32" relation="public-inheritance">
        </childnode>
      </node>
      <node id="41">
        <label>amrex::BoxArray::RefID</label>
        <link refid="structamrex_1_1BoxArray_1_1RefID"/>
        <childnode refid="42" relation="usage">
          <edgelabel>data</edgelabel>
        </childnode>
      </node>
      <node id="45">
        <label>amrex::Vector&lt; amrex::Box &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="46" relation="public-inheritance">
        </childnode>
      </node>
      <node id="30">
        <label>amrex::PCData&lt; FArrayBox &gt;</label>
        <link refid="structamrex_1_1PCData"/>
        <childnode refid="31" relation="usage">
          <edgelabel>recv_size</edgelabel>
        </childnode>
        <childnode refid="33" relation="usage">
          <edgelabel>cpc</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>recv_from</edgelabel>
        </childnode>
        <childnode refid="61" relation="usage">
          <edgelabel>recv_data</edgelabel>
        </childnode>
        <childnode refid="23" relation="usage">
          <edgelabel>src</edgelabel>
        </childnode>
        <childnode refid="63" relation="usage">
          <edgelabel>send_reqs</edgelabel>
          <edgelabel>recv_reqs</edgelabel>
        </childnode>
      </node>
      <node id="136">
        <label>amrex::Vector&lt; std::unique_ptr&lt; amrex::MLMGBndry &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="137" relation="public-inheritance">
        </childnode>
      </node>
      <node id="128">
        <label>amrex::Vector&lt; amrex::Vector&lt; Real &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="129" relation="public-inheritance">
        </childnode>
      </node>
      <node id="139">
        <label>std::vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::iMultiFab &gt; &gt;, std::allocator&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::iMultiFab &gt; &gt; &gt; &gt;</label>
        <childnode refid="16" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="32">
        <label>std::vector&lt; std::size_t, std::allocator&lt; std::size_t &gt; &gt;</label>
        <childnode refid="16" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="109">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::Any &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="110" relation="public-inheritance">
        </childnode>
      </node>
      <node id="44">
        <label>std::vector&lt; int &gt;</label>
      </node>
      <node id="99">
        <label>std::vector&lt; amrex::Vector&lt; amrex::DistributionMapping &gt;, std::allocator&lt; amrex::Vector&lt; amrex::DistributionMapping &gt; &gt; &gt;</label>
        <childnode refid="16" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="38">
        <label>std::unique_ptr&lt; CopyComTagsContainer &gt;</label>
        <childnode refid="39" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="92">
        <label>std::vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::FabFactory&lt; amrex::FArrayBox &gt; &gt; &gt;, std::allocator&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::FabFactory&lt; amrex::FArrayBox &gt; &gt; &gt; &gt; &gt;</label>
        <childnode refid="16" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/OpenBC/AMReX_OpenBC.H" line="59" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/OpenBC/AMReX_OpenBC.H" bodystart="58" bodyend="132"/>
    <listofallmembers>
      <member refid="classamrex_1_1OpenBCSolver_1ac9096a2954bfd6a9f717711b294b9f95" prot="private" virt="non-virtual"><scope>amrex::OpenBCSolver</scope><name>bcast_moments</name></member>
      <member refid="classamrex_1_1OpenBCSolver_1addf5ecada6e7f7ece057304b8547c5a8" prot="public" virt="non-virtual"><scope>amrex::OpenBCSolver</scope><name>compute_moments</name></member>
      <member refid="classamrex_1_1OpenBCSolver_1ac0363c008c9b41babb1758a686a397d0" prot="public" virt="non-virtual"><scope>amrex::OpenBCSolver</scope><name>compute_potential</name></member>
      <member refid="classamrex_1_1OpenBCSolver_1af01e6f4fb7c82f61c978d6afc1b20f4e" prot="public" virt="non-virtual"><scope>amrex::OpenBCSolver</scope><name>define</name></member>
      <member refid="classamrex_1_1OpenBCSolver_1a5e29bc57a9ca4bc8ef562a731a373871" prot="public" virt="non-virtual"><scope>amrex::OpenBCSolver</scope><name>interpolate_potential</name></member>
      <member refid="classamrex_1_1OpenBCSolver_1abb6fd098be05f5d6763cf26b71eedee9" prot="private" virt="non-virtual"><scope>amrex::OpenBCSolver</scope><name>m_ba_all</name></member>
      <member refid="classamrex_1_1OpenBCSolver_1a597017e3faf53c6b6569a27fbf01ce3f" prot="private" virt="non-virtual"><scope>amrex::OpenBCSolver</scope><name>m_bag</name></member>
      <member refid="classamrex_1_1OpenBCSolver_1a3d401d8f6e037bf70fe52989385f4dac" prot="private" virt="non-virtual"><scope>amrex::OpenBCSolver</scope><name>m_coarsen_ratio</name></member>
      <member refid="classamrex_1_1OpenBCSolver_1ae1be4beb27cb3b3667cc36fdc6448415" prot="private" virt="non-virtual"><scope>amrex::OpenBCSolver</scope><name>m_countvec</name></member>
      <member refid="classamrex_1_1OpenBCSolver_1a25518d5cabb1d9332b6f8fb812d872cf" prot="private" virt="non-virtual"><scope>amrex::OpenBCSolver</scope><name>m_crse_grown_faces_phi</name></member>
      <member refid="classamrex_1_1OpenBCSolver_1a4793209f81cbca41253a8ae8950480bc" prot="private" virt="non-virtual"><scope>amrex::OpenBCSolver</scope><name>m_dm_all</name></member>
      <member refid="classamrex_1_1OpenBCSolver_1aa8a7ddd4f65f8f43b9df11669e7720cf" prot="private" virt="non-virtual"><scope>amrex::OpenBCSolver</scope><name>m_dmap</name></member>
      <member refid="classamrex_1_1OpenBCSolver_1ae7fada71ee96535887f907f28e17246c" prot="private" virt="non-virtual"><scope>amrex::OpenBCSolver</scope><name>m_dpdn</name></member>
      <member refid="classamrex_1_1OpenBCSolver_1a1d6c905d586d04d63a33985d4a919ce2" prot="private" virt="non-virtual"><scope>amrex::OpenBCSolver</scope><name>m_geom</name></member>
      <member refid="classamrex_1_1OpenBCSolver_1a2ede296c3da0102e0aaa954e923d4342" prot="private" virt="non-virtual"><scope>amrex::OpenBCSolver</scope><name>m_geom_all</name></member>
      <member refid="classamrex_1_1OpenBCSolver_1a036b6904fd09ed914a7b12ebc900034a" prot="private" virt="non-virtual"><scope>amrex::OpenBCSolver</scope><name>m_grids</name></member>
      <member refid="classamrex_1_1OpenBCSolver_1aeec6daa6ebe88ef8eaf6491af2f02cd6" prot="private" virt="non-virtual"><scope>amrex::OpenBCSolver</scope><name>m_info</name></member>
      <member refid="classamrex_1_1OpenBCSolver_1af4f8bd2cd9315ff6b44f81cc1e4a2d6f" prot="private" virt="non-virtual"><scope>amrex::OpenBCSolver</scope><name>m_mlmg_1</name></member>
      <member refid="classamrex_1_1OpenBCSolver_1a97b6170ecb8747fcc50cfc8fb11da671" prot="private" virt="non-virtual"><scope>amrex::OpenBCSolver</scope><name>m_mlmg_2</name></member>
      <member refid="classamrex_1_1OpenBCSolver_1a42401091098315c9aaab7a635345692f" prot="private" virt="non-virtual"><scope>amrex::OpenBCSolver</scope><name>m_momtags_d</name></member>
      <member refid="classamrex_1_1OpenBCSolver_1a637ef773d76e4ded161fdde7e2057d7e" prot="private" virt="non-virtual"><scope>amrex::OpenBCSolver</scope><name>m_momtags_h</name></member>
      <member refid="classamrex_1_1OpenBCSolver_1a23018825c7f4b69f2ccc208bc88cfaa0" prot="private" virt="non-virtual"><scope>amrex::OpenBCSolver</scope><name>m_nblocks</name></member>
      <member refid="classamrex_1_1OpenBCSolver_1ac4211b50259bcddcdb640a73362b0e19" prot="private" virt="non-virtual"><scope>amrex::OpenBCSolver</scope><name>m_nblocks_local</name></member>
      <member refid="classamrex_1_1OpenBCSolver_1a08a177855c8f971da2aa51ebc08041bf" prot="private" virt="non-virtual"><scope>amrex::OpenBCSolver</scope><name>m_ngpublocks_d</name></member>
      <member refid="classamrex_1_1OpenBCSolver_1a80eeb93e042aaf3ba2197349b17e85c0" prot="private" virt="non-virtual"><scope>amrex::OpenBCSolver</scope><name>m_ngpublocks_h</name></member>
      <member refid="classamrex_1_1OpenBCSolver_1a3a92090574e0adaf00fc51398e9fcc32" prot="private" virt="non-virtual"><scope>amrex::OpenBCSolver</scope><name>m_ngrowdomain</name></member>
      <member refid="classamrex_1_1OpenBCSolver_1a5d5c2037341dc1939ceb71904c642f7e" prot="private" virt="non-virtual"><scope>amrex::OpenBCSolver</scope><name>m_nthreads_momtag</name></member>
      <member refid="classamrex_1_1OpenBCSolver_1a2c1236a694939f630bd82a59f383f00d" prot="private" virt="non-virtual"><scope>amrex::OpenBCSolver</scope><name>m_offset</name></member>
      <member refid="classamrex_1_1OpenBCSolver_1a5169dad1c41680aa536527c80486f3b6" prot="private" virt="non-virtual"><scope>amrex::OpenBCSolver</scope><name>m_phind</name></member>
      <member refid="classamrex_1_1OpenBCSolver_1a709e83e70ab954da3922f40d676b5295" prot="private" virt="non-virtual"><scope>amrex::OpenBCSolver</scope><name>m_poisson_1</name></member>
      <member refid="classamrex_1_1OpenBCSolver_1a30bb1d5c74178f67ac147168cf5d7e27" prot="private" virt="non-virtual"><scope>amrex::OpenBCSolver</scope><name>m_poisson_2</name></member>
      <member refid="classamrex_1_1OpenBCSolver_1a0ca647ecd06b85d8b1ae579ae02895d5" prot="private" virt="non-virtual"><scope>amrex::OpenBCSolver</scope><name>m_verbose</name></member>
      <member refid="classamrex_1_1OpenBCSolver_1a67f80b2378dbe69bcae2ed61f427f0f5" prot="public" virt="non-virtual"><scope>amrex::OpenBCSolver</scope><name>OpenBCSolver</name></member>
      <member refid="classamrex_1_1OpenBCSolver_1a31ec46379a45506dceab79e66c66f5c8" prot="public" virt="non-virtual"><scope>amrex::OpenBCSolver</scope><name>OpenBCSolver</name></member>
      <member refid="classamrex_1_1OpenBCSolver_1aa89b51713976f2e1561966c3bd66574e" prot="public" virt="non-virtual"><scope>amrex::OpenBCSolver</scope><name>OpenBCSolver</name></member>
      <member refid="classamrex_1_1OpenBCSolver_1ad780a1c2f297ad99edc26b462b3d65d5" prot="public" virt="non-virtual"><scope>amrex::OpenBCSolver</scope><name>OpenBCSolver</name></member>
      <member refid="classamrex_1_1OpenBCSolver_1aa683523b9787a4de44ec76ce557094b0" prot="public" virt="non-virtual"><scope>amrex::OpenBCSolver</scope><name>operator=</name></member>
      <member refid="classamrex_1_1OpenBCSolver_1a7861601e913a4f49dd5be1338245f681" prot="public" virt="non-virtual"><scope>amrex::OpenBCSolver</scope><name>operator=</name></member>
      <member refid="classamrex_1_1OpenBCSolver_1a657ff95ca0e408729e171ef2a3ca2141" prot="public" virt="non-virtual"><scope>amrex::OpenBCSolver</scope><name>setVerbose</name></member>
      <member refid="classamrex_1_1OpenBCSolver_1a687b35c6ab5b576840ab03ae61a898ab" prot="public" virt="non-virtual"><scope>amrex::OpenBCSolver</scope><name>solve</name></member>
      <member refid="classamrex_1_1OpenBCSolver_1a03d5928d33717ca57878f6f45b19f7e3" prot="public" virt="non-virtual"><scope>amrex::OpenBCSolver</scope><name>~OpenBCSolver</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
