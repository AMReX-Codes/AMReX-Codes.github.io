<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structamrex_1_1BaseUmap_1_1const__iterator" kind="struct" language="C++" prot="public">
    <compoundname>amrex::BaseUmap::const_iterator</compoundname>
    <includes refid="AMReX__BaseUmap_8H" local="no">AMReX_BaseUmap.H</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="structamrex_1_1BaseUmap_1_1const__iterator_1a7e9fdc58aa6ed653233663af4636f39b" prot="protected" static="no" mutable="no">
        <type>const <ref refid="classamrex_1_1BaseUmap" kindref="compound">BaseUmap</ref>&lt; T &gt; &amp;</type>
        <definition>const BaseUmap&lt;T&gt;&amp; amrex::BaseUmap&lt; T &gt;::const_iterator::m_bmap</definition>
        <argsstring></argsstring>
        <name>m_bmap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseUmap.H" line="80" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseUmap.H" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structamrex_1_1BaseUmap_1_1const__iterator_1a4ce4dea90a4f5fb0d0645a9e2409ab67" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::BaseUmap&lt; T &gt;::const_iterator::m_idx</definition>
        <argsstring></argsstring>
        <name>m_idx</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseUmap.H" line="81" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseUmap.H" bodystart="81" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structamrex_1_1BaseUmap_1_1const__iterator_1aa494ba3d63a2911e17b5e83ad014c093" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::BaseUmap&lt; T &gt;::const_iterator::const_iterator</definition>
        <argsstring>(const BaseUmap &amp;bmap, int idx)</argsstring>
        <name>const_iterator</name>
        <param>
          <type>const <ref refid="classamrex_1_1BaseUmap" kindref="compound">BaseUmap</ref> &amp;</type>
          <declname>bmap</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseUmap.H" line="59" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseUmap.H" bodystart="59" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1BaseUmap_1_1const__iterator_1a3745281c90e912c357c05bc333935f70" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BaseUmap&lt; T &gt;::const_iterator::operator++</definition>
        <argsstring>()</argsstring>
        <name>operator++</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseUmap.H" line="60" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseUmap.H" bodystart="60" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1BaseUmap_1_1const__iterator_1ae7935c6ec4fcc11a402fc8778dc2a9b1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::BaseUmap&lt; T &gt;::const_iterator::operator&lt;</definition>
        <argsstring>(const const_iterator &amp;rhs)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="structamrex_1_1BaseUmap_1_1const__iterator" kindref="compound">const_iterator</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseUmap.H" line="61" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseUmap.H" bodystart="61" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1BaseUmap_1_1const__iterator_1aabe15a0f77b5c542d56ce8ba3ba07ad1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T&amp; amrex::BaseUmap&lt; T &gt;::const_iterator::operator*</definition>
        <argsstring>()</argsstring>
        <name>operator*</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseUmap.H" line="66" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseUmap.H" bodystart="66" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1BaseUmap_1_1const__iterator_1a2c8d41b674bea6076c9f732ad6239916" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="namespaceamrex_1a9f4d0df7602cb80e9c2217dae6b9281d" kindref="member">key_table_type</ref> &amp;</type>
        <definition>const key_table_type&amp; amrex::BaseUmap&lt; T &gt;::const_iterator::index</definition>
        <argsstring>() const</argsstring>
        <name>index</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseUmap.H" line="71" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseUmap.H" bodystart="71" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1BaseUmap_1_1const__iterator_1a3e7c800c9c5e1c78126bc36dd71d731e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="structamrex_1_1BaseUmap_1_1Tuple" kindref="compound">Tuple</ref> &amp;</type>
        <definition>const Tuple&amp; amrex::BaseUmap&lt; T &gt;::const_iterator::tuple</definition>
        <argsstring>() const</argsstring>
        <name>tuple</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseUmap.H" line="73" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseUmap.H" bodystart="73" bodyend="77"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseUmap.H" line="58" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseUmap.H" bodystart="57" bodyend="82"/>
    <listofallmembers>
      <member refid="structamrex_1_1BaseUmap_1_1const__iterator_1aa494ba3d63a2911e17b5e83ad014c093" prot="public" virt="non-virtual"><scope>amrex::BaseUmap::const_iterator</scope><name>const_iterator</name></member>
      <member refid="structamrex_1_1BaseUmap_1_1const__iterator_1a2c8d41b674bea6076c9f732ad6239916" prot="public" virt="non-virtual"><scope>amrex::BaseUmap::const_iterator</scope><name>index</name></member>
      <member refid="structamrex_1_1BaseUmap_1_1const__iterator_1a7e9fdc58aa6ed653233663af4636f39b" prot="protected" virt="non-virtual"><scope>amrex::BaseUmap::const_iterator</scope><name>m_bmap</name></member>
      <member refid="structamrex_1_1BaseUmap_1_1const__iterator_1a4ce4dea90a4f5fb0d0645a9e2409ab67" prot="protected" virt="non-virtual"><scope>amrex::BaseUmap::const_iterator</scope><name>m_idx</name></member>
      <member refid="structamrex_1_1BaseUmap_1_1const__iterator_1aabe15a0f77b5c542d56ce8ba3ba07ad1" prot="public" virt="non-virtual"><scope>amrex::BaseUmap::const_iterator</scope><name>operator*</name></member>
      <member refid="structamrex_1_1BaseUmap_1_1const__iterator_1a3745281c90e912c357c05bc333935f70" prot="public" virt="non-virtual"><scope>amrex::BaseUmap::const_iterator</scope><name>operator++</name></member>
      <member refid="structamrex_1_1BaseUmap_1_1const__iterator_1ae7935c6ec4fcc11a402fc8778dc2a9b1" prot="public" virt="non-virtual"><scope>amrex::BaseUmap::const_iterator</scope><name>operator&lt;</name></member>
      <member refid="structamrex_1_1BaseUmap_1_1const__iterator_1a3e7c800c9c5e1c78126bc36dd71d731e" prot="public" virt="non-virtual"><scope>amrex::BaseUmap::const_iterator</scope><name>tuple</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
