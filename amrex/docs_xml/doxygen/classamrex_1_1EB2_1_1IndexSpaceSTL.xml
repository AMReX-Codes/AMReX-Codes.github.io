<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classamrex_1_1EB2_1_1IndexSpaceSTL" kind="class" language="C++" prot="public">
    <compoundname>amrex::EB2::IndexSpaceSTL</compoundname>
    <basecompoundref refid="classamrex_1_1EB2_1_1IndexSpace" prot="public" virt="non-virtual">amrex::EB2::IndexSpace</basecompoundref>
    <includes refid="AMReX__EB2__IndexSpace__STL_8H" local="no">AMReX_EB2_IndexSpace_STL.H</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1EB2_1_1IndexSpaceSTL_1ab14caa115cde8da650b6587b8e73dd02" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1EB2_1_1STLLevel" kindref="compound">STLLevel</ref> &gt;</type>
        <definition>Vector&lt;STLLevel&gt; amrex::EB2::IndexSpaceSTL::m_stllevel</definition>
        <argsstring></argsstring>
        <name>m_stllevel</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IndexSpace_STL.H" line="40" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IndexSpace_STL.H" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1EB2_1_1IndexSpaceSTL_1a60957b371c1e6c775ebb2e18bbbc2c99" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt;</type>
        <definition>Vector&lt;Geometry&gt; amrex::EB2::IndexSpaceSTL::m_geom</definition>
        <argsstring></argsstring>
        <name>m_geom</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IndexSpace_STL.H" line="41" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IndexSpace_STL.H" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1EB2_1_1IndexSpaceSTL_1a92801c71e56e5fdb7873f8f4af0542ac" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &gt;</type>
        <definition>Vector&lt;Box&gt; amrex::EB2::IndexSpaceSTL::m_domain</definition>
        <argsstring></argsstring>
        <name>m_domain</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IndexSpace_STL.H" line="42" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IndexSpace_STL.H" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1EB2_1_1IndexSpaceSTL_1ad9db2e06c6728146ed5d6a2cf2fc956c" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
        <definition>Vector&lt;int&gt; amrex::EB2::IndexSpaceSTL::m_ngrow</definition>
        <argsstring></argsstring>
        <name>m_ngrow</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IndexSpace_STL.H" line="43" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IndexSpace_STL.H" bodystart="43" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1EB2_1_1IndexSpaceSTL_1abe85200c4d1b12e00b1c39640553f064" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::EB2::IndexSpaceSTL::IndexSpaceSTL</definition>
        <argsstring>(const std::string &amp;stl_file, Real stl_scale, Array&lt; Real, 3 &gt; const &amp;stl_center, int stl_reverse_normal, const Geometry &amp;geom, int required_coarsening_level, int max_coarsening_level, int ngrow, bool build_coarse_level_by_coarsening, bool extend_domain_face, int num_coarsen_opt)</argsstring>
        <name>IndexSpaceSTL</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>stl_file</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>stl_scale</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; Real, 3 &gt; const &amp;</type>
          <declname>stl_center</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>stl_reverse_normal</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>required_coarsening_level</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>max_coarsening_level</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngrow</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>build_coarse_level_by_coarsening</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>extend_domain_face</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_coarsen_opt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IndexSpace_STL.H" line="17" column="4" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IndexSpace_STL.cpp" bodystart="5" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EB2_1_1IndexSpaceSTL_1accce0356b6e62b40a6fa8bb0cf1a9402" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::EB2::IndexSpaceSTL::IndexSpaceSTL</definition>
        <argsstring>(IndexSpaceSTL const &amp;)=delete</argsstring>
        <name>IndexSpaceSTL</name>
        <param>
          <type><ref refid="classamrex_1_1EB2_1_1IndexSpaceSTL" kindref="compound">IndexSpaceSTL</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IndexSpace_STL.H" line="24" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EB2_1_1IndexSpaceSTL_1adc0c4857ce013433b350e51cfb2f1b47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::EB2::IndexSpaceSTL::IndexSpaceSTL</definition>
        <argsstring>(IndexSpaceSTL &amp;&amp;)=delete</argsstring>
        <name>IndexSpaceSTL</name>
        <param>
          <type><ref refid="classamrex_1_1EB2_1_1IndexSpaceSTL" kindref="compound">IndexSpaceSTL</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IndexSpace_STL.H" line="25" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EB2_1_1IndexSpaceSTL_1a2e26fd180cf15b5ee489da10269d950d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EB2::IndexSpaceSTL::operator=</definition>
        <argsstring>(IndexSpaceSTL const &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1EB2_1_1IndexSpaceSTL" kindref="compound">IndexSpaceSTL</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IndexSpace_STL.H" line="26" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EB2_1_1IndexSpaceSTL_1a9a958addce9e3b225e6d76af21e3e851" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EB2::IndexSpaceSTL::operator=</definition>
        <argsstring>(IndexSpaceSTL &amp;&amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1EB2_1_1IndexSpaceSTL" kindref="compound">IndexSpaceSTL</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IndexSpace_STL.H" line="27" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EB2_1_1IndexSpaceSTL_1a366483cfa4e0b0c4741fe8e065c14fe7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual amrex::EB2::IndexSpaceSTL::~IndexSpaceSTL</definition>
        <argsstring>()</argsstring>
        <name>~IndexSpaceSTL</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IndexSpace_STL.H" line="29" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IndexSpace_STL.H" bodystart="29" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EB2_1_1IndexSpaceSTL_1a4106393335714ad0351ccf212d479cdf" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>const <ref refid="classamrex_1_1EB2_1_1Level" kindref="compound">Level</ref> &amp;</type>
        <definition>const Level &amp; amrex::EB2::IndexSpaceSTL::getLevel</definition>
        <argsstring>(const Geometry &amp;geom) const final</argsstring>
        <name>getLevel</name>
        <reimplements refid="classamrex_1_1EB2_1_1IndexSpace_1a71aa6d39a145bc12424b2fc6c9a7e015">getLevel</reimplements>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IndexSpace_STL.H" line="31" column="25" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IndexSpace_STL.cpp" bodystart="70" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EB2_1_1IndexSpaceSTL_1afa9591f706505991554b147f3d2a137b" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
        <definition>const Geometry &amp; amrex::EB2::IndexSpaceSTL::getGeometry</definition>
        <argsstring>(const Box &amp;dom) const final</argsstring>
        <name>getGeometry</name>
        <reimplements refid="classamrex_1_1EB2_1_1IndexSpace_1a683092cb9c842fb986c79f0aedcd05bb">getGeometry</reimplements>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>dom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IndexSpace_STL.H" line="32" column="28" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IndexSpace_STL.cpp" bodystart="78" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EB2_1_1IndexSpaceSTL_1aaaa590849e7bb70c9f2b0814153b0e9e" prot="public" static="no" const="yes" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
        <definition>virtual const Box&amp; amrex::EB2::IndexSpaceSTL::coarsestDomain</definition>
        <argsstring>() const final</argsstring>
        <name>coarsestDomain</name>
        <reimplements refid="classamrex_1_1EB2_1_1IndexSpace_1a7795703119c27937004c54f50532a369">coarsestDomain</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IndexSpace_STL.H" line="33" column="23" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IndexSpace_STL.H" bodystart="33" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EB2_1_1IndexSpaceSTL_1a91c9991bc2691ccf3603be8005954c83" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void amrex::EB2::IndexSpaceSTL::addFineLevels</definition>
        <argsstring>(int num_new_fine_levels) final</argsstring>
        <name>addFineLevels</name>
        <reimplements refid="classamrex_1_1EB2_1_1IndexSpace_1a346cc897525e434cd311f4b303d6b898">addFineLevels</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_new_fine_levels</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IndexSpace_STL.H" line="36" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IndexSpace_STL.cpp" bodystart="86" bodyend="89"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>amrex::EB2::IndexSpaceSTL</label>
        <link refid="classamrex_1_1EB2_1_1IndexSpaceSTL"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>amrex::EB2::IndexSpace</label>
        <link refid="classamrex_1_1EB2_1_1IndexSpace"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>amrex::EB2::IndexSpaceSTL</label>
        <link refid="classamrex_1_1EB2_1_1IndexSpaceSTL"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>m_stllevel</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>m_ngrow</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>m_domain</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>m_geom</edgelabel>
        </childnode>
      </node>
      <node id="11">
        <label>std::vector&lt; amrex::Box, std::allocator&lt; amrex::Box &gt; &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>amrex::EB2::IndexSpace</label>
        <link refid="classamrex_1_1EB2_1_1IndexSpace"/>
        <childnode refid="3" relation="usage">
          <edgelabel>m_instance</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>T</label>
      </node>
      <node id="13">
        <label>std::vector&lt; amrex::Geometry, std::allocator&lt; amrex::Geometry &gt; &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>amrex::Vector&lt; int &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="9" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>std::vector&lt; amrex::EB2::STLLevel, std::allocator&lt; amrex::EB2::STLLevel &gt; &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>std::vector&lt; std::unique_ptr&lt; amrex::EB2::IndexSpace &gt;, std::allocator&lt; std::unique_ptr&lt; amrex::EB2::IndexSpace &gt; &gt; &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="9">
        <label>std::vector&lt; int, std::allocator&lt; int &gt; &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>amrex::Vector&lt; std::unique_ptr&lt; amrex::EB2::IndexSpace &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>amrex::Vector&lt; amrex::EB2::STLLevel &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="12">
        <label>amrex::Vector&lt; amrex::Geometry &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="13" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>amrex::Vector&lt; amrex::Box &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="11" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IndexSpace_STL.H" line="14" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IndexSpace_STL.H" bodystart="12" bodyend="44"/>
    <listofallmembers>
      <member refid="classamrex_1_1EB2_1_1IndexSpaceSTL_1a91c9991bc2691ccf3603be8005954c83" prot="public" virt="virtual"><scope>amrex::EB2::IndexSpaceSTL</scope><name>addFineLevels</name></member>
      <member refid="classamrex_1_1EB2_1_1IndexSpace_1ac2b149fea822702476a70d1b12ae2f21" prot="public" virt="non-virtual"><scope>amrex::EB2::IndexSpaceSTL</scope><name>clear</name></member>
      <member refid="classamrex_1_1EB2_1_1IndexSpaceSTL_1aaaa590849e7bb70c9f2b0814153b0e9e" prot="public" virt="virtual"><scope>amrex::EB2::IndexSpaceSTL</scope><name>coarsestDomain</name></member>
      <member refid="classamrex_1_1EB2_1_1IndexSpace_1a7ebc7ce80aded82313b3f96ba0f14d8e" prot="public" virt="non-virtual"><scope>amrex::EB2::IndexSpaceSTL</scope><name>empty</name></member>
      <member refid="classamrex_1_1EB2_1_1IndexSpace_1aff6283995254b7660c80cd420d99886b" prot="public" virt="non-virtual"><scope>amrex::EB2::IndexSpaceSTL</scope><name>erase</name></member>
      <member refid="classamrex_1_1EB2_1_1IndexSpaceSTL_1afa9591f706505991554b147f3d2a137b" prot="public" virt="virtual"><scope>amrex::EB2::IndexSpaceSTL</scope><name>getGeometry</name></member>
      <member refid="classamrex_1_1EB2_1_1IndexSpaceSTL_1a4106393335714ad0351ccf212d479cdf" prot="public" virt="virtual"><scope>amrex::EB2::IndexSpaceSTL</scope><name>getLevel</name></member>
      <member refid="classamrex_1_1EB2_1_1IndexSpaceSTL_1abe85200c4d1b12e00b1c39640553f064" prot="public" virt="non-virtual"><scope>amrex::EB2::IndexSpaceSTL</scope><name>IndexSpaceSTL</name></member>
      <member refid="classamrex_1_1EB2_1_1IndexSpaceSTL_1accce0356b6e62b40a6fa8bb0cf1a9402" prot="public" virt="non-virtual"><scope>amrex::EB2::IndexSpaceSTL</scope><name>IndexSpaceSTL</name></member>
      <member refid="classamrex_1_1EB2_1_1IndexSpaceSTL_1adc0c4857ce013433b350e51cfb2f1b47" prot="public" virt="non-virtual"><scope>amrex::EB2::IndexSpaceSTL</scope><name>IndexSpaceSTL</name></member>
      <member refid="classamrex_1_1EB2_1_1IndexSpaceSTL_1a92801c71e56e5fdb7873f8f4af0542ac" prot="private" virt="non-virtual"><scope>amrex::EB2::IndexSpaceSTL</scope><name>m_domain</name></member>
      <member refid="classamrex_1_1EB2_1_1IndexSpaceSTL_1a60957b371c1e6c775ebb2e18bbbc2c99" prot="private" virt="non-virtual"><scope>amrex::EB2::IndexSpaceSTL</scope><name>m_geom</name></member>
      <member refid="classamrex_1_1EB2_1_1IndexSpace_1a8534fa5e1a19e2e1f6fbcfb162a8460a" prot="protected" virt="non-virtual"><scope>amrex::EB2::IndexSpaceSTL</scope><name>m_instance</name></member>
      <member refid="classamrex_1_1EB2_1_1IndexSpaceSTL_1ad9db2e06c6728146ed5d6a2cf2fc956c" prot="private" virt="non-virtual"><scope>amrex::EB2::IndexSpaceSTL</scope><name>m_ngrow</name></member>
      <member refid="classamrex_1_1EB2_1_1IndexSpaceSTL_1ab14caa115cde8da650b6587b8e73dd02" prot="private" virt="non-virtual"><scope>amrex::EB2::IndexSpaceSTL</scope><name>m_stllevel</name></member>
      <member refid="classamrex_1_1EB2_1_1IndexSpaceSTL_1a2e26fd180cf15b5ee489da10269d950d" prot="public" virt="non-virtual"><scope>amrex::EB2::IndexSpaceSTL</scope><name>operator=</name></member>
      <member refid="classamrex_1_1EB2_1_1IndexSpaceSTL_1a9a958addce9e3b225e6d76af21e3e851" prot="public" virt="non-virtual"><scope>amrex::EB2::IndexSpaceSTL</scope><name>operator=</name></member>
      <member refid="classamrex_1_1EB2_1_1IndexSpace_1a45b714be9d0d45f3ecb339085a73c6ec" prot="public" virt="non-virtual"><scope>amrex::EB2::IndexSpaceSTL</scope><name>pop</name></member>
      <member refid="classamrex_1_1EB2_1_1IndexSpace_1a5a3c0ce524a4c0bff9901548d9e8648d" prot="public" virt="non-virtual"><scope>amrex::EB2::IndexSpaceSTL</scope><name>push</name></member>
      <member refid="classamrex_1_1EB2_1_1IndexSpace_1aa263203c4d632942992a81436d22d658" prot="public" virt="non-virtual"><scope>amrex::EB2::IndexSpaceSTL</scope><name>size</name></member>
      <member refid="classamrex_1_1EB2_1_1IndexSpace_1ad17160a9839f2d64ac20460b4cefbaee" prot="public" virt="non-virtual"><scope>amrex::EB2::IndexSpaceSTL</scope><name>top</name></member>
      <member refid="classamrex_1_1EB2_1_1IndexSpace_1ac4076fe625fa22e660fed58771f6b2d5" prot="public" virt="virtual"><scope>amrex::EB2::IndexSpaceSTL</scope><name>~IndexSpace</name></member>
      <member refid="classamrex_1_1EB2_1_1IndexSpaceSTL_1a366483cfa4e0b0c4741fe8e065c14fe7" prot="public" virt="virtual"><scope>amrex::EB2::IndexSpaceSTL</scope><name>~IndexSpaceSTL</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
