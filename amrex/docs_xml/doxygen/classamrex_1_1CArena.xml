<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classamrex_1_1CArena" kind="class" language="C++" prot="public">
    <compoundname>amrex::CArena</compoundname>
    <basecompoundref refid="classamrex_1_1Arena" prot="public" virt="non-virtual">amrex::Arena</basecompoundref>
    <includes refid="AMReX__CArena_8H" local="no">AMReX_CArena.H</includes>
    <innerclass refid="classamrex_1_1CArena_1_1Node" prot="protected">amrex::CArena::Node</innerclass>
    <sectiondef kind="protected-type">
      <memberdef kind="typedef" id="classamrex_1_1CArena_1a7b2f9d1dc98c8e92648e3785f297e13f" prot="protected" static="no">
        <type>std::set&lt; <ref refid="classamrex_1_1CArena_1_1Node" kindref="compound">Node</ref> &gt;</type>
        <definition>using amrex::CArena::NL =  std::set&lt;Node&gt;</definition>
        <argsstring></argsstring>
        <name>NL</name>
        <qualifiedname>amrex::CArena::NL</qualifiedname>
        <briefdescription>
<para>The type of our freelist and blocklist. We use a set sorted from lo to hi memory addresses. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" line="170" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" bodystart="170" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classamrex_1_1CArena_1a3025f965a6401b591a232fe52fe2c878" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr std::size_t</type>
        <definition>constexpr std::size_t amrex::CArena::DefaultHunkSize</definition>
        <argsstring></argsstring>
        <name>DefaultHunkSize</name>
        <qualifiedname>amrex::CArena::DefaultHunkSize</qualifiedname>
        <initializer>= 1024*1024*8</initializer>
        <briefdescription>
<para>The default memory hunk size to grab from the heap. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" line="94" column="34" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" bodystart="94" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classamrex_1_1CArena_1ad1b240a0437cfcaee6788096d93a1674" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; std::pair&lt; void *, std::size_t &gt; &gt;</type>
        <definition>std::vector&lt;std::pair&lt;void*,std::size_t&gt; &gt; amrex::CArena::m_alloc</definition>
        <argsstring></argsstring>
        <name>m_alloc</name>
        <qualifiedname>amrex::CArena::m_alloc</qualifiedname>
        <briefdescription>
<para>The list of blocks allocated via ::operator new(). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" line="164" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" bodystart="164" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1CArena_1a000d9e231672c9a28a72a05abec379fb" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1CArena_1a7b2f9d1dc98c8e92648e3785f297e13f" kindref="member">NL</ref></type>
        <definition>NL amrex::CArena::m_freelist</definition>
        <argsstring></argsstring>
        <name>m_freelist</name>
        <qualifiedname>amrex::CArena::m_freelist</qualifiedname>
        <briefdescription>
<para>The free list of allocated but not currently used blocks. Maintained in lo to hi memory sorted order. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" line="176" column="8" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" bodystart="176" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1CArena_1a88823438ee0e89721d65131d87d2f687" prot="protected" static="no" mutable="no">
        <type>std::unordered_set&lt; <ref refid="classamrex_1_1CArena_1_1Node" kindref="compound">Node</ref>, <ref refid="structamrex_1_1CArena_1_1Node_1_1hash" kindref="compound">Node::hash</ref> &gt;</type>
        <definition>std::unordered_set&lt;Node, Node::hash&gt; amrex::CArena::m_busylist</definition>
        <argsstring></argsstring>
        <name>m_busylist</name>
        <qualifiedname>amrex::CArena::m_busylist</qualifiedname>
        <briefdescription>
<para>The list of busy blocks. A block is either on the freelist or on the blocklist, but not on both. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" line="183" column="24" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" bodystart="183" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1CArena_1a7bbf66f41bc3167185236bdcd6fe67a1" prot="protected" static="no" mutable="no">
        <type>std::size_t</type>
        <definition>std::size_t amrex::CArena::m_hunk</definition>
        <argsstring></argsstring>
        <name>m_hunk</name>
        <qualifiedname>amrex::CArena::m_hunk</qualifiedname>
        <briefdescription>
<para>The minimal size of hunks to request from system. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" line="185" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" bodystart="185" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1CArena_1a7ec2fcdaa0d06d1fceb739d0e1661751" prot="protected" static="no" mutable="no">
        <type>std::size_t</type>
        <definition>std::size_t amrex::CArena::m_used</definition>
        <argsstring></argsstring>
        <name>m_used</name>
        <qualifiedname>amrex::CArena::m_used</qualifiedname>
        <initializer>{0}</initializer>
        <briefdescription>
<para>The amount of heap space currently allocated. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" line="187" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" bodystart="187" bodyend="187"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1CArena_1ae080e8f434fe1dbdd9913a5089c481c5" prot="protected" static="no" mutable="no">
        <type>std::size_t</type>
        <definition>std::size_t amrex::CArena::m_max_used</definition>
        <argsstring></argsstring>
        <name>m_max_used</name>
        <qualifiedname>amrex::CArena::m_max_used</qualifiedname>
        <initializer>{0}</initializer>
        <briefdescription>
<para>The max amount of heap space currently allocated. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" line="189" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" bodystart="189" bodyend="189"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1CArena_1af3edc78581fb20c7273fbf74494e0c48" prot="protected" static="no" mutable="no">
        <type>std::size_t</type>
        <definition>std::size_t amrex::CArena::m_actually_used</definition>
        <argsstring></argsstring>
        <name>m_actually_used</name>
        <qualifiedname>amrex::CArena::m_actually_used</qualifiedname>
        <initializer>{0}</initializer>
        <briefdescription>
<para>The amount of memory given out via <ref refid="classamrex_1_1CArena_1a8d55773acd31606b385f0a524587bd1d" kindref="member">alloc()</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" line="191" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" bodystart="191" bodyend="191"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1CArena_1a500345d5a92552eeb34943b989318952" prot="protected" static="no" mutable="no">
        <type>std::size_t</type>
        <definition>std::size_t amrex::CArena::m_max_actually_used</definition>
        <argsstring></argsstring>
        <name>m_max_actually_used</name>
        <qualifiedname>amrex::CArena::m_max_actually_used</qualifiedname>
        <initializer>{0}</initializer>
        <briefdescription>
<para>The max amount of memory given out via <ref refid="classamrex_1_1CArena_1a8d55773acd31606b385f0a524587bd1d" kindref="member">alloc()</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" line="193" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" bodystart="193" bodyend="193"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1CArena_1a445be9f2ccca25ca4d2c8db026400136" prot="protected" static="no" mutable="no">
        <type>std::mutex</type>
        <definition>std::mutex amrex::CArena::carena_mutex</definition>
        <argsstring></argsstring>
        <name>carena_mutex</name>
        <qualifiedname>amrex::CArena::carena_mutex</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" line="195" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" bodystart="195" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1CArena_1a43a76cc08d37a6c6174a05989d0bc60e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::CArena::CArena</definition>
        <argsstring>(std::size_t hunk_size=0, ArenaInfo info=ArenaInfo())</argsstring>
        <name>CArena</name>
        <qualifiedname>amrex::CArena::CArena</qualifiedname>
        <param>
          <type>std::size_t</type>
          <declname>hunk_size</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="structamrex_1_1ArenaInfo" kindref="compound">ArenaInfo</ref></type>
          <declname>info</declname>
          <defval><ref refid="structamrex_1_1ArenaInfo" kindref="compound">ArenaInfo</ref>()</defval>
        </param>
        <briefdescription>
<para>Construct a coalescing memory manager. hunk_size is the minimum size of hunks of memory to allocate from the heap. If hunk_size == 0 we use DefaultHunkSize as specified below. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" line="35" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.cpp" bodystart="13" bodyend="19"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1CArena_1a1dc0400df161a7395380b6156678918a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::CArena::CArena</definition>
        <argsstring>(const CArena &amp;rhs)=delete</argsstring>
        <name>CArena</name>
        <qualifiedname>amrex::CArena::CArena</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1CArena" kindref="compound">CArena</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" line="37" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1CArena_1a8df362670d9202352afc131bfc421c28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::CArena::CArena</definition>
        <argsstring>(CArena &amp;&amp;rhs)=delete</argsstring>
        <name>CArena</name>
        <qualifiedname>amrex::CArena::CArena</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1CArena" kindref="compound">CArena</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" line="38" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1CArena_1a6c8c5b70d150c0ecbbd6e8f39386a6a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1CArena" kindref="compound">CArena</ref> &amp;</type>
        <definition>CArena &amp; amrex::CArena::operator=</definition>
        <argsstring>(const CArena &amp;rhs)=delete</argsstring>
        <name>operator=</name>
        <qualifiedname>amrex::CArena::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1CArena" kindref="compound">CArena</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" line="39" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1CArena_1a15235cb370bfe20dffaf7cd7edb4d0a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1CArena" kindref="compound">CArena</ref> &amp;</type>
        <definition>CArena &amp; amrex::CArena::operator=</definition>
        <argsstring>(CArena &amp;&amp;rhs)=delete</argsstring>
        <name>operator=</name>
        <qualifiedname>amrex::CArena::operator=</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1CArena" kindref="compound">CArena</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" line="40" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1CArena_1abca549bb11a9efb8b05dca10c32aab81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::CArena::~CArena</definition>
        <argsstring>() override</argsstring>
        <name>~CArena</name>
        <qualifiedname>amrex::CArena::~CArena</qualifiedname>
        <briefdescription>
<para>The destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" line="43" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.cpp" bodystart="21" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1CArena_1a8d55773acd31606b385f0a524587bd1d" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void *</type>
        <definition>void * amrex::CArena::alloc</definition>
        <argsstring>(std::size_t nbytes) final</argsstring>
        <name>alloc</name>
        <qualifiedname>amrex::CArena::alloc</qualifiedname>
        <reimplements refid="classamrex_1_1Arena_1a0fa2cdc35eb9da4a03fedf53f6484c86">alloc</reimplements>
        <param>
          <type>std::size_t</type>
          <declname>nbytes</declname>
        </param>
        <briefdescription>
<para>Allocate some memory. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" line="46" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.cpp" bodystart="29" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1CArena_1a61c3deadcb0c3c69b91ecec373b086ee" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>std::pair&lt; void *, std::size_t &gt;</type>
        <definition>std::pair&lt; void *, std::size_t &gt; amrex::CArena::alloc_in_place</definition>
        <argsstring>(void *pt, std::size_t szmin, std::size_t szmax) final</argsstring>
        <name>alloc_in_place</name>
        <qualifiedname>amrex::CArena::alloc_in_place</qualifiedname>
        <reimplements refid="classamrex_1_1Arena_1a872ba01b7389ba36beb402641df3f2b9">alloc_in_place</reimplements>
        <param>
          <type>void *</type>
          <declname>pt</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>szmin</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>szmax</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Try to allocate in-place by extending the capacity of given pointer. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" line="52" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.cpp" bodystart="131" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1CArena_1a39b6596c9fb986503f9e782ff67ecd40" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void *</type>
        <definition>void * amrex::CArena::shrink_in_place</definition>
        <argsstring>(void *pt, std::size_t new_size) final</argsstring>
        <name>shrink_in_place</name>
        <qualifiedname>amrex::CArena::shrink_in_place</qualifiedname>
        <reimplements refid="classamrex_1_1Arena_1aceacbbe5395a8671cc571063d51ee7e2">shrink_in_place</reimplements>
        <param>
          <type>void *</type>
          <declname>pt</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>new_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Try to shrink in-place </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" line="58" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.cpp" bodystart="204" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1CArena_1a92c318e660a559a2c8d4dc75ba2bc658" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void amrex::CArena::free</definition>
        <argsstring>(void *vp) final</argsstring>
        <name>free</name>
        <qualifiedname>amrex::CArena::free</qualifiedname>
        <reimplements refid="classamrex_1_1Arena_1a0c7e0730574c98febb6ddca2712cb515">free</reimplements>
        <param>
          <type>void *</type>
          <declname>vp</declname>
        </param>
        <briefdescription>
<para>Free up allocated memory. Merge neighboring free memory chunks into largest possible chunk. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" line="64" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.cpp" bodystart="262" bodyend="349"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1CArena_1a7e9429cce47c95ae5f8d8d379ffe6184" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>std::size_t</type>
        <definition>std::size_t amrex::CArena::freeUnused</definition>
        <argsstring>() final</argsstring>
        <name>freeUnused</name>
        <qualifiedname>amrex::CArena::freeUnused</qualifiedname>
        <reimplements refid="classamrex_1_1Arena_1ae58dbb9ab6bb4e8d980b384b0d8804e5">freeUnused</reimplements>
        <briefdescription>
<para>Free unused memory back to the system. Return value is the amount memory freed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" line="66" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.cpp" bodystart="352" bodyend="356"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1CArena_1ac778bcf5399be4884d6a2cf35cc5c9f3" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>bool</type>
        <definition>bool amrex::CArena::hasFreeDeviceMemory</definition>
        <argsstring>(std::size_t sz) final</argsstring>
        <name>hasFreeDeviceMemory</name>
        <qualifiedname>amrex::CArena::hasFreeDeviceMemory</qualifiedname>
        <reimplements refid="classamrex_1_1Arena_1abd6b026129f35157aa2b3945a37bdbd3">hasFreeDeviceMemory</reimplements>
        <param>
          <type>std::size_t</type>
          <declname>sz</declname>
        </param>
        <briefdescription>
<para>Does the device have enough free memory for allocating this much memory? For CPU builds, this always return true. This is not a const function because it may attempt to release memory back to the system. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" line="74" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.cpp" bodystart="400" bodyend="435"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1CArena_1a5f5de3e5518c0f5bcc71a6a2b4076a3f" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t amrex::CArena::heap_space_used</definition>
        <argsstring>() const noexcept</argsstring>
        <name>heap_space_used</name>
        <qualifiedname>amrex::CArena::heap_space_used</qualifiedname>
        <briefdescription>
<para>The current amount of heap space used by the <ref refid="classamrex_1_1CArena" kindref="compound">CArena</ref> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" line="77" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.cpp" bodystart="438" bodyend="441"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1CArena_1a52c8024bd12299f84f2362c0547c533d" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t amrex::CArena::heap_space_actually_used</definition>
        <argsstring>() const noexcept</argsstring>
        <name>heap_space_actually_used</name>
        <qualifiedname>amrex::CArena::heap_space_actually_used</qualifiedname>
        <briefdescription>
<para>Return the total amount of memory given out via alloc. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" line="80" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.cpp" bodystart="444" bodyend="447"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1CArena_1a1aefcfca2b595c0f7ddac3e351f6e8a3" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t amrex::CArena::sizeOf</definition>
        <argsstring>(void *p) const noexcept</argsstring>
        <name>sizeOf</name>
        <qualifiedname>amrex::CArena::sizeOf</qualifiedname>
        <param>
          <type>void *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Return the amount of memory in this pointer. Return 0 for unknown pointer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" line="83" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.cpp" bodystart="450" bodyend="462"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1CArena_1acf03c7d216561ed41f5fcdd64169b8b7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::CArena::PrintUsage</definition>
        <argsstring>(std::string const &amp;name, bool print_max_usage) const</argsstring>
        <name>PrintUsage</name>
        <qualifiedname>amrex::CArena::PrintUsage</qualifiedname>
        <param>
          <type>std::string const &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>print_max_usage</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" line="85" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.cpp" bodystart="465" bodyend="489"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1CArena_1a220453b0ec3b2de0df5cd94cb08dab03" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::CArena::PrintUsage</definition>
        <argsstring>(std::ostream &amp;os, std::string const &amp;name, std::string const &amp;space) const</argsstring>
        <name>PrintUsage</name>
        <qualifiedname>amrex::CArena::PrintUsage</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>space</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" line="87" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.cpp" bodystart="492" bodyend="500"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1CArena_1a77c2ae14a68569c5cdfc6c5e014af038" prot="public" static="no" const="no" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>void</type>
        <definition>void amrex::CArena::ResetMaxUsageCounter</definition>
        <argsstring>() final</argsstring>
        <name>ResetMaxUsageCounter</name>
        <qualifiedname>amrex::CArena::ResetMaxUsageCounter</qualifiedname>
        <reimplements refid="classamrex_1_1Arena_1a3f1783f675e9c483705081a695f9cedf">ResetMaxUsageCounter</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" line="89" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" bodystart="89" bodyend="91"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-func">
      <memberdef kind="function" id="classamrex_1_1CArena_1acb20836b76ef5e5c0fb002637132c442" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * amrex::CArena::alloc_protected</definition>
        <argsstring>(std::size_t nbytes)</argsstring>
        <name>alloc_protected</name>
        <qualifiedname>amrex::CArena::alloc_protected</qualifiedname>
        <param>
          <type>std::size_t</type>
          <declname>nbytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" line="98" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.cpp" bodystart="37" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1CArena_1a496e3022b2c758f0f8cde7b20f954066" prot="protected" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>std::size_t</type>
        <definition>std::size_t amrex::CArena::freeUnused_protected</definition>
        <argsstring>() final</argsstring>
        <name>freeUnused_protected</name>
        <qualifiedname>amrex::CArena::freeUnused_protected</qualifiedname>
        <reimplements refid="classamrex_1_1Arena_1a881f97d5676c4784f52d6f4c702da696">freeUnused_protected</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" line="100" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.cpp" bodystart="359" bodyend="397"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="friend">
      <memberdef kind="friend" id="classamrex_1_1CArena_1a75784310504f825670140f90e334f7b5" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const CArena &amp;arena)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>amrex::CArena::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1CArena" kindref="compound">CArena</ref> &amp;</type>
          <declname>arena</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" line="197" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.cpp" bodystart="502" bodyend="539"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>A Concrete Class for Dynamic Memory Management using first fit. This is a coalescing memory manager. It allocates (possibly) large chunks of heap space and apportions it out as requested. It merges together neighboring chunks on each <ref refid="classamrex_1_1CArena_1a92c318e660a559a2c8d4dc75ba2bc658" kindref="member">free()</ref>. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>amrex::Arena</label>
        <link refid="classamrex_1_1Arena"/>
      </node>
      <node id="1">
        <label>amrex::CArena</label>
        <link refid="classamrex_1_1CArena"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>amrex::Arena</label>
        <link refid="classamrex_1_1Arena"/>
        <childnode refid="3" relation="usage">
          <edgelabel>arena_info</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>m_profiler</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>amrex::Arena::ArenaProfiler</label>
        <link refid="structamrex_1_1Arena_1_1ArenaProfiler"/>
        <childnode refid="5" relation="usage">
          <edgelabel>m_arena_profiler_mutex</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>m_profiling_stats</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>m_currently_allocated</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>amrex::ArenaInfo</label>
        <link refid="structamrex_1_1ArenaInfo"/>
      </node>
      <node id="1">
        <label>amrex::CArena</label>
        <link refid="classamrex_1_1CArena"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>m_alloc</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>m_freelist</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>m_busylist</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>carena_mutex</edgelabel>
        </childnode>
      </node>
      <node id="13">
        <label>amrex::CArena::Node</label>
        <link refid="classamrex_1_1CArena_1_1Node"/>
        <childnode refid="9" relation="usage">
          <edgelabel>m_stat</edgelabel>
        </childnode>
      </node>
      <node id="9">
        <label>amrex::MemStat</label>
        <link refid="structamrex_1_1MemStat"/>
      </node>
      <node id="6">
        <label>std::map&lt; std::string, amrex::MemStat &gt;</label>
        <childnode refid="7" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="12">
        <label>std::set&lt; Node &gt;</label>
        <childnode refid="13" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="5">
        <label>std::mutex</label>
      </node>
      <node id="7">
        <label>std::string</label>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>std::unordered_map&lt; void *, std::pair&lt; amrex::MemStat *, std::size_t &gt; &gt;</label>
      </node>
      <node id="14">
        <label>std::unordered_set&lt; amrex::CArena::Node, amrex::CArena::Node::hash &gt;</label>
        <childnode refid="13" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
      </node>
      <node id="11">
        <label>std::vector&lt; std::pair&lt; void *, std::size_t &gt; &gt;</label>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" line="25" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" bodystart="28" bodyend="198"/>
    <listofallmembers>
      <member refid="classamrex_1_1Arena_1a253c417e0bd2863509c75d6250468a4e" prot="public" virt="non-virtual"><scope>amrex::CArena</scope><name>align</name></member>
      <member refid="classamrex_1_1Arena_1a4b2f3b31e81e52426aef615cb2aaa7b7" prot="public" virt="non-virtual"><scope>amrex::CArena</scope><name>align_size</name></member>
      <member refid="classamrex_1_1CArena_1a8d55773acd31606b385f0a524587bd1d" prot="public" virt="virtual"><scope>amrex::CArena</scope><name>alloc</name></member>
      <member refid="classamrex_1_1CArena_1a61c3deadcb0c3c69b91ecec373b086ee" prot="public" virt="virtual"><scope>amrex::CArena</scope><name>alloc_in_place</name></member>
      <member refid="classamrex_1_1CArena_1acb20836b76ef5e5c0fb002637132c442" prot="protected" virt="non-virtual"><scope>amrex::CArena</scope><name>alloc_protected</name></member>
      <member refid="classamrex_1_1Arena_1afc721e195430f79b2d1b287c490ef0fb" prot="protected" virt="non-virtual"><scope>amrex::CArena</scope><name>allocate_system</name></member>
      <member refid="classamrex_1_1Arena_1a2e2407d56d1710a0029928c776b27682" prot="public" virt="non-virtual"><scope>amrex::CArena</scope><name>Arena</name></member>
      <member refid="classamrex_1_1Arena_1a57de8f5ef86cceadc9f1c00bc7ea7790" prot="public" virt="non-virtual"><scope>amrex::CArena</scope><name>Arena</name></member>
      <member refid="classamrex_1_1Arena_1a3e2c87e60ea734fe6be6e49d124d5a76" prot="public" virt="non-virtual"><scope>amrex::CArena</scope><name>Arena</name></member>
      <member refid="classamrex_1_1Arena_1aeb2158ba443c9b23ba0d12bcf38a66e1" prot="protected" virt="non-virtual"><scope>amrex::CArena</scope><name>arena_info</name></member>
      <member refid="classamrex_1_1Arena_1a6cf1a7926c2ee38d82fab5fadef8e4d0" prot="public" virt="non-virtual"><scope>amrex::CArena</scope><name>arenaInfo</name></member>
      <member refid="classamrex_1_1CArena_1a43a76cc08d37a6c6174a05989d0bc60e" prot="public" virt="non-virtual"><scope>amrex::CArena</scope><name>CArena</name></member>
      <member refid="classamrex_1_1CArena_1a1dc0400df161a7395380b6156678918a" prot="public" virt="non-virtual"><scope>amrex::CArena</scope><name>CArena</name></member>
      <member refid="classamrex_1_1CArena_1a8df362670d9202352afc131bfc421c28" prot="public" virt="non-virtual"><scope>amrex::CArena</scope><name>CArena</name></member>
      <member refid="classamrex_1_1CArena_1a445be9f2ccca25ca4d2c8db026400136" prot="protected" virt="non-virtual"><scope>amrex::CArena</scope><name>carena_mutex</name></member>
      <member refid="classamrex_1_1Arena_1ac07ba8cda253cddee3cab1168ac65694" prot="protected" virt="non-virtual"><scope>amrex::CArena</scope><name>deallocate_system</name></member>
      <member refid="classamrex_1_1CArena_1a3025f965a6401b591a232fe52fe2c878" prot="public" virt="non-virtual"><scope>amrex::CArena</scope><name>DefaultHunkSize</name></member>
      <member refid="classamrex_1_1Arena_1a76f2f99b3aa712fe5da7b00610c07385" prot="public" virt="non-virtual"><scope>amrex::CArena</scope><name>deregisterFromProfiling</name></member>
      <member refid="classamrex_1_1Arena_1a06dd6197d2081d7dd4c1bed308edd387" prot="public" virt="non-virtual"><scope>amrex::CArena</scope><name>Finalize</name></member>
      <member refid="classamrex_1_1CArena_1a92c318e660a559a2c8d4dc75ba2bc658" prot="public" virt="virtual"><scope>amrex::CArena</scope><name>free</name></member>
      <member refid="classamrex_1_1CArena_1a7e9429cce47c95ae5f8d8d379ffe6184" prot="public" virt="virtual"><scope>amrex::CArena</scope><name>freeUnused</name></member>
      <member refid="classamrex_1_1CArena_1a496e3022b2c758f0f8cde7b20f954066" prot="protected" virt="virtual"><scope>amrex::CArena</scope><name>freeUnused_protected</name></member>
      <member refid="classamrex_1_1CArena_1ac778bcf5399be4884d6a2cf35cc5c9f3" prot="public" virt="virtual"><scope>amrex::CArena</scope><name>hasFreeDeviceMemory</name></member>
      <member refid="classamrex_1_1CArena_1a52c8024bd12299f84f2362c0547c533d" prot="public" virt="non-virtual"><scope>amrex::CArena</scope><name>heap_space_actually_used</name></member>
      <member refid="classamrex_1_1CArena_1a5f5de3e5518c0f5bcc71a6a2b4076a3f" prot="public" virt="non-virtual"><scope>amrex::CArena</scope><name>heap_space_used</name></member>
      <member refid="classamrex_1_1Arena_1ad3c30247b7f738cc4e292f781a503ce9" prot="public" virt="non-virtual"><scope>amrex::CArena</scope><name>Initialize</name></member>
      <member refid="classamrex_1_1Arena_1aa45555e396ee74158b0c6f3331ce5536" prot="public" virt="virtual"><scope>amrex::CArena</scope><name>isDevice</name></member>
      <member refid="classamrex_1_1Arena_1afa7c9e223346f671eb055b3ce8580e56" prot="public" virt="virtual"><scope>amrex::CArena</scope><name>isDeviceAccessible</name></member>
      <member refid="classamrex_1_1Arena_1a40d897685d407918d2d6143b5301a525" prot="public" virt="virtual"><scope>amrex::CArena</scope><name>isHostAccessible</name></member>
      <member refid="classamrex_1_1Arena_1a7119489f4464f902d907f6dfe9716909" prot="public" virt="virtual"><scope>amrex::CArena</scope><name>isManaged</name></member>
      <member refid="classamrex_1_1Arena_1a336e271c5a07296e4c2866d194111784" prot="public" virt="virtual"><scope>amrex::CArena</scope><name>isPinned</name></member>
      <member refid="classamrex_1_1Arena_1a45cb8a8f57250c6858412296275c8dbb" prot="public" virt="virtual"><scope>amrex::CArena</scope><name>isStreamOrderedArena</name></member>
      <member refid="classamrex_1_1CArena_1af3edc78581fb20c7273fbf74494e0c48" prot="protected" virt="non-virtual"><scope>amrex::CArena</scope><name>m_actually_used</name></member>
      <member refid="classamrex_1_1CArena_1ad1b240a0437cfcaee6788096d93a1674" prot="protected" virt="non-virtual"><scope>amrex::CArena</scope><name>m_alloc</name></member>
      <member refid="classamrex_1_1CArena_1a88823438ee0e89721d65131d87d2f687" prot="protected" virt="non-virtual"><scope>amrex::CArena</scope><name>m_busylist</name></member>
      <member refid="classamrex_1_1CArena_1a000d9e231672c9a28a72a05abec379fb" prot="protected" virt="non-virtual"><scope>amrex::CArena</scope><name>m_freelist</name></member>
      <member refid="classamrex_1_1CArena_1a7bbf66f41bc3167185236bdcd6fe67a1" prot="protected" virt="non-virtual"><scope>amrex::CArena</scope><name>m_hunk</name></member>
      <member refid="classamrex_1_1CArena_1a500345d5a92552eeb34943b989318952" prot="protected" virt="non-virtual"><scope>amrex::CArena</scope><name>m_max_actually_used</name></member>
      <member refid="classamrex_1_1CArena_1ae080e8f434fe1dbdd9913a5089c481c5" prot="protected" virt="non-virtual"><scope>amrex::CArena</scope><name>m_max_used</name></member>
      <member refid="classamrex_1_1Arena_1ad136b691382e7a7d8fba158837416b98" prot="protected" virt="non-virtual"><scope>amrex::CArena</scope><name>m_profiler</name></member>
      <member refid="classamrex_1_1CArena_1a7ec2fcdaa0d06d1fceb739d0e1661751" prot="protected" virt="non-virtual"><scope>amrex::CArena</scope><name>m_used</name></member>
      <member refid="classamrex_1_1CArena_1a7b2f9d1dc98c8e92648e3785f297e13f" prot="protected" virt="non-virtual"><scope>amrex::CArena</scope><name>NL</name></member>
      <member refid="classamrex_1_1CArena_1a75784310504f825670140f90e334f7b5" prot="protected" virt="non-virtual"><scope>amrex::CArena</scope><name>operator&lt;&lt;</name></member>
      <member refid="classamrex_1_1CArena_1a6c8c5b70d150c0ecbbd6e8f39386a6a3" prot="public" virt="non-virtual"><scope>amrex::CArena</scope><name>operator=</name></member>
      <member refid="classamrex_1_1CArena_1a15235cb370bfe20dffaf7cd7edb4d0a5" prot="public" virt="non-virtual"><scope>amrex::CArena</scope><name>operator=</name></member>
      <member refid="classamrex_1_1Arena_1a79c958fa2bc911b683c1bb312b54ef13" prot="public" virt="non-virtual" ambiguityscope="amrex::Arena::"><scope>amrex::CArena</scope><name>operator=</name></member>
      <member refid="classamrex_1_1Arena_1a23c2b2614dcafe7437bdba8ac8cbe163" prot="public" virt="non-virtual" ambiguityscope="amrex::Arena::"><scope>amrex::CArena</scope><name>operator=</name></member>
      <member refid="classamrex_1_1CArena_1acf03c7d216561ed41f5fcdd64169b8b7" prot="public" virt="non-virtual"><scope>amrex::CArena</scope><name>PrintUsage</name></member>
      <member refid="classamrex_1_1CArena_1a220453b0ec3b2de0df5cd94cb08dab03" prot="public" virt="non-virtual"><scope>amrex::CArena</scope><name>PrintUsage</name></member>
      <member refid="classamrex_1_1Arena_1ada0c93d4aa3a9adce127ba381c652ac6" prot="public" virt="non-virtual" ambiguityscope="amrex::Arena::"><scope>amrex::CArena</scope><name>PrintUsage</name></member>
      <member refid="classamrex_1_1Arena_1aa1cfbcfa1c41ac7e45bf469e93db7402" prot="public" virt="non-virtual"><scope>amrex::CArena</scope><name>PrintUsageToFiles</name></member>
      <member refid="classamrex_1_1Arena_1a99982885760cd861e6e860dea40ea64f" prot="public" virt="non-virtual"><scope>amrex::CArena</scope><name>registerForProfiling</name></member>
      <member refid="classamrex_1_1CArena_1a77c2ae14a68569c5cdfc6c5e014af038" prot="public" virt="virtual"><scope>amrex::CArena</scope><name>ResetMaxUsageCounter</name></member>
      <member refid="classamrex_1_1CArena_1a39b6596c9fb986503f9e782ff67ecd40" prot="public" virt="virtual"><scope>amrex::CArena</scope><name>shrink_in_place</name></member>
      <member refid="classamrex_1_1CArena_1a1aefcfca2b595c0f7ddac3e351f6e8a3" prot="public" virt="non-virtual"><scope>amrex::CArena</scope><name>sizeOf</name></member>
      <member refid="classamrex_1_1Arena_1a327e7541e6291ce735c03392b21931b6" prot="public" virt="virtual"><scope>amrex::CArena</scope><name>~Arena</name></member>
      <member refid="classamrex_1_1CArena_1abca549bb11a9efb8b05dca10c32aab81" prot="public" virt="non-virtual"><scope>amrex::CArena</scope><name>~CArena</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
