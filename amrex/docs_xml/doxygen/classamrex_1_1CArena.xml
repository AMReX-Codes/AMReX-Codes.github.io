<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classamrex_1_1CArena" kind="class" language="C++" prot="public">
    <compoundname>amrex::CArena</compoundname>
    <basecompoundref refid="classamrex_1_1Arena" prot="public" virt="non-virtual">amrex::Arena</basecompoundref>
    <includes refid="AMReX__CArena_8H" local="no">AMReX_CArena.H</includes>
    <innerclass refid="classamrex_1_1CArena_1_1Node" prot="protected">amrex::CArena::Node</innerclass>
      <sectiondef kind="protected-type">
      <memberdef kind="typedef" id="classamrex_1_1CArena_1a9e8adf2bef58badafbefa442d69db64b" prot="protected" static="no">
        <type>std::set&lt; <ref refid="classamrex_1_1CArena_1_1Node" kindref="compound">Node</ref> &gt;</type>
        <definition>typedef std::set&lt;Node&gt; amrex::CArena::NL</definition>
        <argsstring></argsstring>
        <name>NL</name>
        <briefdescription>
<para>The type of our freelist and blocklist. We use a set sorted from lo to hi memory addresses. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" line="130" column="22" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" bodystart="130" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classamrex_1_1CArena_1a5f71cae39f7456982cea4f81395a4e69" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr static std::size_t</type>
        <definition>constexpr static std::size_t amrex::CArena::DefaultHunkSize</definition>
        <argsstring></argsstring>
        <name>DefaultHunkSize</name>
        <initializer>= 1024*1024*8</initializer>
        <briefdescription>
<para>The default memory hunk size to grab from the heap. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" line="67" column="34" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" bodystart="67" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classamrex_1_1CArena_1ad1b240a0437cfcaee6788096d93a1674" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; std::pair&lt; void *, std::size_t &gt; &gt;</type>
        <definition>std::vector&lt;std::pair&lt;void*,std::size_t&gt; &gt; amrex::CArena::m_alloc</definition>
        <argsstring></argsstring>
        <name>m_alloc</name>
        <briefdescription>
<para>The list of blocks allocated via ::operator new(). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" line="133" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" bodystart="133" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1CArena_1a000d9e231672c9a28a72a05abec379fb" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1CArena_1a9e8adf2bef58badafbefa442d69db64b" kindref="member">NL</ref></type>
        <definition>NL amrex::CArena::m_freelist</definition>
        <argsstring></argsstring>
        <name>m_freelist</name>
        <briefdescription>
<para>The free list of allocated but not currently used blocks. Maintained in lo to hi memory sorted order. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" line="139" column="8" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" bodystart="139" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1CArena_1a88823438ee0e89721d65131d87d2f687" prot="protected" static="no" mutable="no">
        <type>std::unordered_set&lt; <ref refid="classamrex_1_1CArena_1_1Node" kindref="compound">Node</ref>, <ref refid="structamrex_1_1CArena_1_1Node_1_1hash" kindref="compound">Node::hash</ref> &gt;</type>
        <definition>std::unordered_set&lt;Node, Node::hash&gt; amrex::CArena::m_busylist</definition>
        <argsstring></argsstring>
        <name>m_busylist</name>
        <briefdescription>
<para>The list of busy blocks. A block is either on the freelist or on the blocklist, but not on both. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" line="146" column="24" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" bodystart="146" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1CArena_1a7bbf66f41bc3167185236bdcd6fe67a1" prot="protected" static="no" mutable="no">
        <type>std::size_t</type>
        <definition>std::size_t amrex::CArena::m_hunk</definition>
        <argsstring></argsstring>
        <name>m_hunk</name>
        <briefdescription>
<para>The minimal size of hunks to request from system. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" line="148" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" bodystart="148" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1CArena_1a7ec2fcdaa0d06d1fceb739d0e1661751" prot="protected" static="no" mutable="no">
        <type>std::size_t</type>
        <definition>std::size_t amrex::CArena::m_used</definition>
        <argsstring></argsstring>
        <name>m_used</name>
        <briefdescription>
<para>The amount of heap space currently allocated. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" line="150" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" bodystart="150" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1CArena_1af3edc78581fb20c7273fbf74494e0c48" prot="protected" static="no" mutable="no">
        <type>std::size_t</type>
        <definition>std::size_t amrex::CArena::m_actually_used</definition>
        <argsstring></argsstring>
        <name>m_actually_used</name>
        <briefdescription>
<para>The amount of memory given out via <ref refid="classamrex_1_1CArena_1a1bc87d17826c27e1b3ec8c623554db04" kindref="member">alloc()</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" line="152" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" bodystart="152" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1CArena_1a445be9f2ccca25ca4d2c8db026400136" prot="protected" static="no" mutable="no">
        <type>std::mutex</type>
        <definition>std::mutex amrex::CArena::carena_mutex</definition>
        <argsstring></argsstring>
        <name>carena_mutex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" line="154" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" bodystart="154" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1CArena_1a43a76cc08d37a6c6174a05989d0bc60e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::CArena::CArena</definition>
        <argsstring>(std::size_t hunk_size=0, ArenaInfo info=ArenaInfo())</argsstring>
        <name>CArena</name>
        <param>
          <type>std::size_t</type>
          <declname>hunk_size</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="structamrex_1_1ArenaInfo" kindref="compound">ArenaInfo</ref></type>
          <declname>info</declname>
          <defval><ref refid="structamrex_1_1ArenaInfo" kindref="compound">ArenaInfo</ref>()</defval>
        </param>
        <briefdescription>
<para>Construct a coalescing memory manager. hunk_size is the minimum size of hunks of memory to allocate from the heap. If hunk_size == 0 we use DefaultHunkSize as specified below. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" line="34" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.cpp" bodystart="12" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1CArena_1a1dc0400df161a7395380b6156678918a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::CArena::CArena</definition>
        <argsstring>(const CArena &amp;rhs)=delete</argsstring>
        <name>CArena</name>
        <param>
          <type>const <ref refid="classamrex_1_1CArena" kindref="compound">CArena</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" line="36" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1CArena_1ae491fc24a9163b864bc798acc7518852" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1CArena" kindref="compound">CArena</ref> &amp;</type>
        <definition>CArena&amp; amrex::CArena::operator=</definition>
        <argsstring>(const CArena &amp;rhs)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classamrex_1_1CArena" kindref="compound">CArena</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" line="37" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1CArena_1abca549bb11a9efb8b05dca10c32aab81" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>amrex::CArena::~CArena</definition>
        <argsstring>() override</argsstring>
        <name>~CArena</name>
        <briefdescription>
<para>The destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" line="40" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.cpp" bodystart="26" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1CArena_1a1bc87d17826c27e1b3ec8c623554db04" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void *</type>
        <definition>void * amrex::CArena::alloc</definition>
        <argsstring>(std::size_t nbytes) override final</argsstring>
        <name>alloc</name>
        <reimplements refid="classamrex_1_1Arena_1a46ce2cd5cfc039cec64548b031fbde2e">alloc</reimplements>
        <param>
          <type>std::size_t</type>
          <declname>nbytes</declname>
        </param>
        <briefdescription>
<para>Allocate some memory. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" line="43" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.cpp" bodystart="34" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1CArena_1a56528182c07ceb5d08fce7f674f62991" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void amrex::CArena::free</definition>
        <argsstring>(void *ap) override final</argsstring>
        <name>free</name>
        <reimplements refid="classamrex_1_1Arena_1a0c7e0730574c98febb6ddca2712cb515">free</reimplements>
        <param>
          <type>void *</type>
          <declname>ap</declname>
        </param>
        <briefdescription>
<para>Free up allocated memory. Merge neighboring free memory chunks into largest possible chunk. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" line="49" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.cpp" bodystart="116" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1CArena_1a1452ccfc21b50919047fdaf5c3a5497f" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>std::size_t</type>
        <definition>std::size_t amrex::CArena::freeUnused</definition>
        <argsstring>() override final</argsstring>
        <name>freeUnused</name>
        <reimplements refid="classamrex_1_1Arena_1ae58dbb9ab6bb4e8d980b384b0d8804e5">freeUnused</reimplements>
        <briefdescription>
<para>Free unused memory back to the system. Return value is the amount memory freed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" line="51" column="25" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.cpp" bodystart="202" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1CArena_1a5f5de3e5518c0f5bcc71a6a2b4076a3f" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t amrex::CArena::heap_space_used</definition>
        <argsstring>() const noexcept</argsstring>
        <name>heap_space_used</name>
        <briefdescription>
<para>The current amount of heap space used by the <ref refid="classamrex_1_1CArena" kindref="compound">CArena</ref> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" line="54" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.cpp" bodystart="235" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1CArena_1a52c8024bd12299f84f2362c0547c533d" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t amrex::CArena::heap_space_actually_used</definition>
        <argsstring>() const noexcept</argsstring>
        <name>heap_space_actually_used</name>
        <briefdescription>
<para>Return the total amount of memory given out via alloc. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" line="57" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.cpp" bodystart="241" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1CArena_1a1aefcfca2b595c0f7ddac3e351f6e8a3" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t amrex::CArena::sizeOf</definition>
        <argsstring>(void *p) const noexcept</argsstring>
        <name>sizeOf</name>
        <param>
          <type>void *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Return the amount of memory in this pointer. Return 0 for unknown pointer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" line="60" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.cpp" bodystart="247" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1CArena_1aa73ded7161a0649ccd1103491034632a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::CArena::PrintUsage</definition>
        <argsstring>(std::string const &amp;name) const</argsstring>
        <name>PrintUsage</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" line="62" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.cpp" bodystart="262" bodyend="282"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1CArena_1a220453b0ec3b2de0df5cd94cb08dab03" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::CArena::PrintUsage</definition>
        <argsstring>(std::ostream &amp;os, std::string const &amp;name, std::string const &amp;space) const</argsstring>
        <name>PrintUsage</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>space</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" line="64" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.cpp" bodystart="285" bodyend="293"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classamrex_1_1CArena_1a5d453f5a9a96ede674a4ef4d8a40382c" prot="protected" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>std::size_t</type>
        <definition>std::size_t amrex::CArena::freeUnused_protected</definition>
        <argsstring>() override final</argsstring>
        <name>freeUnused_protected</name>
        <reimplements refid="classamrex_1_1Arena_1a881f97d5676c4784f52d6f4c702da696">freeUnused_protected</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" line="71" column="25" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.cpp" bodystart="209" bodyend="232"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A Concrete Class for Dynamic Memory Management using first fit. This is a coalescing memory manager. It allocates (possibly) large chunks of heap space and apportions it out as requested. It merges together neighboring chunks on each <ref refid="classamrex_1_1CArena_1a56528182c07ceb5d08fce7f674f62991" kindref="member">free()</ref>. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>amrex::Arena</label>
        <link refid="classamrex_1_1Arena"/>
      </node>
      <node id="1">
        <label>amrex::CArena</label>
        <link refid="classamrex_1_1CArena"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>amrex::ArenaInfo</label>
        <link refid="structamrex_1_1ArenaInfo"/>
      </node>
      <node id="2">
        <label>amrex::Arena</label>
        <link refid="classamrex_1_1Arena"/>
        <childnode refid="3" relation="usage">
          <edgelabel>arena_info</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>amrex::CArena</label>
        <link refid="classamrex_1_1CArena"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" line="27" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" bodystart="24" bodyend="155"/>
    <listofallmembers>
      <member refid="classamrex_1_1Arena_1a253c417e0bd2863509c75d6250468a4e" prot="public" virt="non-virtual"><scope>amrex::CArena</scope><name>align</name></member>
      <member refid="classamrex_1_1Arena_1a4b2f3b31e81e52426aef615cb2aaa7b7" prot="public" virt="non-virtual"><scope>amrex::CArena</scope><name>align_size</name></member>
      <member refid="classamrex_1_1CArena_1a1bc87d17826c27e1b3ec8c623554db04" prot="public" virt="virtual"><scope>amrex::CArena</scope><name>alloc</name></member>
      <member refid="classamrex_1_1Arena_1afc721e195430f79b2d1b287c490ef0fb" prot="protected" virt="non-virtual"><scope>amrex::CArena</scope><name>allocate_system</name></member>
      <member refid="classamrex_1_1Arena_1aeb2158ba443c9b23ba0d12bcf38a66e1" prot="protected" virt="non-virtual"><scope>amrex::CArena</scope><name>arena_info</name></member>
      <member refid="classamrex_1_1Arena_1a1af72a36a13904de0715917915db1f6b" prot="public" virt="non-virtual"><scope>amrex::CArena</scope><name>arenaInfo</name></member>
      <member refid="classamrex_1_1CArena_1a43a76cc08d37a6c6174a05989d0bc60e" prot="public" virt="non-virtual"><scope>amrex::CArena</scope><name>CArena</name></member>
      <member refid="classamrex_1_1CArena_1a1dc0400df161a7395380b6156678918a" prot="public" virt="non-virtual"><scope>amrex::CArena</scope><name>CArena</name></member>
      <member refid="classamrex_1_1CArena_1a445be9f2ccca25ca4d2c8db026400136" prot="protected" virt="non-virtual"><scope>amrex::CArena</scope><name>carena_mutex</name></member>
      <member refid="classamrex_1_1Arena_1ac07ba8cda253cddee3cab1168ac65694" prot="protected" virt="non-virtual"><scope>amrex::CArena</scope><name>deallocate_system</name></member>
      <member refid="classamrex_1_1CArena_1a5f71cae39f7456982cea4f81395a4e69" prot="public" virt="non-virtual"><scope>amrex::CArena</scope><name>DefaultHunkSize</name></member>
      <member refid="classamrex_1_1Arena_1a06dd6197d2081d7dd4c1bed308edd387" prot="public" virt="non-virtual"><scope>amrex::CArena</scope><name>Finalize</name></member>
      <member refid="classamrex_1_1CArena_1a56528182c07ceb5d08fce7f674f62991" prot="public" virt="virtual"><scope>amrex::CArena</scope><name>free</name></member>
      <member refid="classamrex_1_1CArena_1a1452ccfc21b50919047fdaf5c3a5497f" prot="public" virt="virtual"><scope>amrex::CArena</scope><name>freeUnused</name></member>
      <member refid="classamrex_1_1CArena_1a5d453f5a9a96ede674a4ef4d8a40382c" prot="protected" virt="virtual"><scope>amrex::CArena</scope><name>freeUnused_protected</name></member>
      <member refid="classamrex_1_1CArena_1a52c8024bd12299f84f2362c0547c533d" prot="public" virt="non-virtual"><scope>amrex::CArena</scope><name>heap_space_actually_used</name></member>
      <member refid="classamrex_1_1CArena_1a5f5de3e5518c0f5bcc71a6a2b4076a3f" prot="public" virt="non-virtual"><scope>amrex::CArena</scope><name>heap_space_used</name></member>
      <member refid="classamrex_1_1Arena_1a9f40990a545f4d280e905117fc6a0786" prot="public" virt="non-virtual"><scope>amrex::CArena</scope><name>Initialize</name></member>
      <member refid="classamrex_1_1Arena_1aa45555e396ee74158b0c6f3331ce5536" prot="public" virt="virtual"><scope>amrex::CArena</scope><name>isDevice</name></member>
      <member refid="classamrex_1_1Arena_1afa7c9e223346f671eb055b3ce8580e56" prot="public" virt="virtual"><scope>amrex::CArena</scope><name>isDeviceAccessible</name></member>
      <member refid="classamrex_1_1Arena_1a40d897685d407918d2d6143b5301a525" prot="public" virt="virtual"><scope>amrex::CArena</scope><name>isHostAccessible</name></member>
      <member refid="classamrex_1_1Arena_1a7119489f4464f902d907f6dfe9716909" prot="public" virt="virtual"><scope>amrex::CArena</scope><name>isManaged</name></member>
      <member refid="classamrex_1_1Arena_1a336e271c5a07296e4c2866d194111784" prot="public" virt="virtual"><scope>amrex::CArena</scope><name>isPinned</name></member>
      <member refid="classamrex_1_1CArena_1af3edc78581fb20c7273fbf74494e0c48" prot="protected" virt="non-virtual"><scope>amrex::CArena</scope><name>m_actually_used</name></member>
      <member refid="classamrex_1_1CArena_1ad1b240a0437cfcaee6788096d93a1674" prot="protected" virt="non-virtual"><scope>amrex::CArena</scope><name>m_alloc</name></member>
      <member refid="classamrex_1_1CArena_1a88823438ee0e89721d65131d87d2f687" prot="protected" virt="non-virtual"><scope>amrex::CArena</scope><name>m_busylist</name></member>
      <member refid="classamrex_1_1CArena_1a000d9e231672c9a28a72a05abec379fb" prot="protected" virt="non-virtual"><scope>amrex::CArena</scope><name>m_freelist</name></member>
      <member refid="classamrex_1_1CArena_1a7bbf66f41bc3167185236bdcd6fe67a1" prot="protected" virt="non-virtual"><scope>amrex::CArena</scope><name>m_hunk</name></member>
      <member refid="classamrex_1_1CArena_1a7ec2fcdaa0d06d1fceb739d0e1661751" prot="protected" virt="non-virtual"><scope>amrex::CArena</scope><name>m_used</name></member>
      <member refid="classamrex_1_1CArena_1a9e8adf2bef58badafbefa442d69db64b" prot="protected" virt="non-virtual"><scope>amrex::CArena</scope><name>NL</name></member>
      <member refid="classamrex_1_1CArena_1ae491fc24a9163b864bc798acc7518852" prot="public" virt="non-virtual"><scope>amrex::CArena</scope><name>operator=</name></member>
      <member refid="classamrex_1_1CArena_1aa73ded7161a0649ccd1103491034632a" prot="public" virt="non-virtual"><scope>amrex::CArena</scope><name>PrintUsage</name></member>
      <member refid="classamrex_1_1CArena_1a220453b0ec3b2de0df5cd94cb08dab03" prot="public" virt="non-virtual"><scope>amrex::CArena</scope><name>PrintUsage</name></member>
      <member refid="classamrex_1_1Arena_1a506a68384da30629323d0839f13812c2" prot="public" virt="non-virtual" ambiguityscope="amrex::Arena::"><scope>amrex::CArena</scope><name>PrintUsage</name></member>
      <member refid="classamrex_1_1Arena_1aa1cfbcfa1c41ac7e45bf469e93db7402" prot="public" virt="non-virtual"><scope>amrex::CArena</scope><name>PrintUsageToFiles</name></member>
      <member refid="classamrex_1_1CArena_1a1aefcfca2b595c0f7ddac3e351f6e8a3" prot="public" virt="non-virtual"><scope>amrex::CArena</scope><name>sizeOf</name></member>
      <member refid="classamrex_1_1Arena_1a515142557e6b630fbad746e3c33776e5" prot="public" virt="virtual"><scope>amrex::CArena</scope><name>~Arena</name></member>
      <member refid="classamrex_1_1CArena_1abca549bb11a9efb8b05dca10c32aab81" prot="public" virt="virtual"><scope>amrex::CArena</scope><name>~CArena</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
