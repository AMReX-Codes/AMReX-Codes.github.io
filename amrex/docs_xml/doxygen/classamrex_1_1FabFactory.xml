<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classamrex_1_1FabFactory" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>amrex::FabFactory</compoundname>
    <derivedcompoundref refid="classamrex_1_1DefaultFabFactory" prot="public" virt="non-virtual">amrex::DefaultFabFactory&lt; CutFab &gt;</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1DefaultFabFactory" prot="public" virt="non-virtual">amrex::DefaultFabFactory&lt; FAB &gt;</derivedcompoundref>
    <includes refid="AMReX__FabFactory_8H" local="no">AMReX_FabFactory.H</includes>
    <templateparamlist>
      <param>
        <type>class FAB</type>
      </param>
    </templateparamlist>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1FabFactory_1ab88cda55dded29e88d2aeaf84f2d5e83" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::FabFactory&lt; FAB &gt;::FabFactory</definition>
        <argsstring>() noexcept=default</argsstring>
        <name>FabFactory</name>
        <qualifiedname>amrex::FabFactory::FabFactory</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabFactory.H" line="52" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabFactory_1a438a3209840b7fc84705b81ce82cc944" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::FabFactory&lt; FAB &gt;::FabFactory</definition>
        <argsstring>(FabFactory const &amp;) noexcept=default</argsstring>
        <name>FabFactory</name>
        <qualifiedname>amrex::FabFactory::FabFactory</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabFactory.H" line="53" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabFactory_1acff7aece531c1605a9261be791916493" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::FabFactory&lt; FAB &gt;::FabFactory</definition>
        <argsstring>(FabFactory &amp;&amp;) noexcept=default</argsstring>
        <name>FabFactory</name>
        <qualifiedname>amrex::FabFactory::FabFactory</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabFactory.H" line="54" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabFactory_1a2b025be131ac74738e3b617aafa33346" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref> &amp;</type>
        <definition>FabFactory &amp; amrex::FabFactory&lt; FAB &gt;::operator=</definition>
        <argsstring>(FabFactory const &amp;) noexcept=default</argsstring>
        <name>operator=</name>
        <qualifiedname>amrex::FabFactory::operator=</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabFactory.H" line="55" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabFactory_1ad44f5c64f3ed88fd9a089cb3134d8bc5" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref> &amp;</type>
        <definition>FabFactory &amp; amrex::FabFactory&lt; FAB &gt;::operator=</definition>
        <argsstring>(FabFactory &amp;&amp;) noexcept=default</argsstring>
        <name>operator=</name>
        <qualifiedname>amrex::FabFactory::operator=</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabFactory.H" line="56" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabFactory_1a0d7f240eb5eb5b366024b09539d7ce87" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type></type>
        <definition>virtual amrex::FabFactory&lt; FAB &gt;::~FabFactory</definition>
        <argsstring>() noexcept=default</argsstring>
        <name>~FabFactory</name>
        <qualifiedname>amrex::FabFactory::~FabFactory</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabFactory.H" line="57" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabFactory_1ae07c1c956064199fe7eea860fe367db7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>FAB *</type>
        <definition>virtual FAB * amrex::FabFactory&lt; FAB &gt;::create</definition>
        <argsstring>(const Box &amp;box, int ncomps, const FabInfo &amp;info, int box_index) const =0</argsstring>
        <name>create</name>
        <qualifiedname>amrex::FabFactory::create</qualifiedname>
        <reimplementedby refid="classamrex_1_1EBFArrayBoxFactory_1af4895e37eae210a93ca7d2b0493a250e">create</reimplementedby>
        <reimplementedby refid="classamrex_1_1detail_1_1CutFabFactory_1ae2de73aaec64dd9cb594eb676a8c05a4">create</reimplementedby>
        <reimplementedby refid="classamrex_1_1DefaultFabFactory_1a36aaa85b384c796b25a27e0b0a3d34ed">create</reimplementedby>
        <reimplementedby refid="classamrex_1_1DefaultFabFactory_1a36aaa85b384c796b25a27e0b0a3d34ed">create</reimplementedby>
        <param>
          <type>const <ref refid="namespaceamrex_1a5e922fb76ff2eb645844783ad65d1490" kindref="member">Box</ref> &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomps</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1FabInfo" kindref="compound">FabInfo</ref> &amp;</type>
          <declname>info</declname>
        </param>
        <param>
          <type>int</type>
          <declname>box_index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabFactory.H" line="59" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabFactory_1acfe4a31d3c59124ece13c9c782815bc6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>FAB *</type>
        <definition>virtual FAB * amrex::FabFactory&lt; FAB &gt;::create_alias</definition>
        <argsstring>(FAB const &amp;, int, int) const</argsstring>
        <name>create_alias</name>
        <qualifiedname>amrex::FabFactory::create_alias</qualifiedname>
        <reimplementedby refid="classamrex_1_1DefaultFabFactory_1aa6e7d9e363ab973a4fdebe9e2857803b">create_alias</reimplementedby>
        <reimplementedby refid="classamrex_1_1EBFArrayBoxFactory_1a99374626e050249afcdc541cf12aa53a">create_alias</reimplementedby>
        <param>
          <type>FAB const &amp;</type>
        </param>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabFactory.H" line="61" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabFactory.H" bodystart="61" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabFactory_1a62e57972e3054a6f7ed1cdb9c0426c09" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void amrex::FabFactory&lt; FAB &gt;::destroy</definition>
        <argsstring>(FAB *fab) const =0</argsstring>
        <name>destroy</name>
        <qualifiedname>amrex::FabFactory::destroy</qualifiedname>
        <reimplementedby refid="classamrex_1_1DefaultFabFactory_1a44cfd162206571bec18df510351c1e9b">destroy</reimplementedby>
        <reimplementedby refid="classamrex_1_1EBFArrayBoxFactory_1a25f6eca7dc8d4f2269fec54f5d20f079">destroy</reimplementedby>
        <param>
          <type>FAB *</type>
          <declname>fab</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabFactory.H" line="62" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabFactory_1aab3bc7c3cdec65ae9e6a4d9623320d69" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; FAB &gt; *</type>
        <definition>virtual FabFactory&lt; FAB &gt; * amrex::FabFactory&lt; FAB &gt;::clone</definition>
        <argsstring>() const =0</argsstring>
        <name>clone</name>
        <qualifiedname>amrex::FabFactory::clone</qualifiedname>
        <reimplementedby refid="classamrex_1_1EBFArrayBoxFactory_1a2d942d0e7c5fa2e3dc6c4ef56d52f53d">clone</reimplementedby>
        <reimplementedby refid="classamrex_1_1DefaultFabFactory_1ae70db0d40a6c0cde8644d67730304e71">clone</reimplementedby>
        <reimplementedby refid="classamrex_1_1DefaultFabFactory_1ae70db0d40a6c0cde8644d67730304e71">clone</reimplementedby>
        <reimplementedby refid="classamrex_1_1detail_1_1CutFabFactory_1a6fcf030c8e6d458ba58b4b0e11bd6819">clone</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabFactory.H" line="63" column="27"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabFactory_1a75d66fe91e8d1d690d452759cd0cb3f4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>Long</type>
        <definition>virtual Long amrex::FabFactory&lt; FAB &gt;::nBytes</definition>
        <argsstring>(const Box &amp;box, int ncomps, int) const</argsstring>
        <name>nBytes</name>
        <qualifiedname>amrex::FabFactory::nBytes</qualifiedname>
        <reimplementedby refid="classamrex_1_1detail_1_1CutFabFactory_1a1de2d4b0ba8cd44abdf26a4f8beac3eb">nBytes</reimplementedby>
        <param>
          <type>const <ref refid="namespaceamrex_1a5e922fb76ff2eb645844783ad65d1490" kindref="member">Box</ref> &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomps</declname>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabFactory.H" line="64" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabFactory.H" bodystart="64" bodyend="70"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>amrex::DefaultFabFactory&lt; CutFab &gt;</label>
        <link refid="classamrex_1_1DefaultFabFactory"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>amrex::DefaultFabFactory&lt; FAB &gt;</label>
        <link refid="classamrex_1_1DefaultFabFactory"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>amrex::FabFactory&lt; FAB &gt;</label>
        <link refid="classamrex_1_1FabFactory"/>
      </node>
      <node id="3">
        <label>amrex::detail::CutFabFactory</label>
        <link refid="classamrex_1_1detail_1_1CutFabFactory"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabFactory.H" line="49" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabFactory.H" bodystart="50" bodyend="71"/>
    <listofallmembers>
      <member refid="classamrex_1_1FabFactory_1aab3bc7c3cdec65ae9e6a4d9623320d69" prot="public" virt="pure-virtual"><scope>amrex::FabFactory</scope><name>clone</name></member>
      <member refid="classamrex_1_1FabFactory_1ae07c1c956064199fe7eea860fe367db7" prot="public" virt="pure-virtual"><scope>amrex::FabFactory</scope><name>create</name></member>
      <member refid="classamrex_1_1FabFactory_1acfe4a31d3c59124ece13c9c782815bc6" prot="public" virt="virtual"><scope>amrex::FabFactory</scope><name>create_alias</name></member>
      <member refid="classamrex_1_1FabFactory_1a62e57972e3054a6f7ed1cdb9c0426c09" prot="public" virt="pure-virtual"><scope>amrex::FabFactory</scope><name>destroy</name></member>
      <member refid="classamrex_1_1FabFactory_1ab88cda55dded29e88d2aeaf84f2d5e83" prot="public" virt="non-virtual"><scope>amrex::FabFactory</scope><name>FabFactory</name></member>
      <member refid="classamrex_1_1FabFactory_1a438a3209840b7fc84705b81ce82cc944" prot="public" virt="non-virtual"><scope>amrex::FabFactory</scope><name>FabFactory</name></member>
      <member refid="classamrex_1_1FabFactory_1acff7aece531c1605a9261be791916493" prot="public" virt="non-virtual"><scope>amrex::FabFactory</scope><name>FabFactory</name></member>
      <member refid="classamrex_1_1FabFactory_1a75d66fe91e8d1d690d452759cd0cb3f4" prot="public" virt="virtual"><scope>amrex::FabFactory</scope><name>nBytes</name></member>
      <member refid="classamrex_1_1FabFactory_1a2b025be131ac74738e3b617aafa33346" prot="public" virt="non-virtual"><scope>amrex::FabFactory</scope><name>operator=</name></member>
      <member refid="classamrex_1_1FabFactory_1ad44f5c64f3ed88fd9a089cb3134d8bc5" prot="public" virt="non-virtual"><scope>amrex::FabFactory</scope><name>operator=</name></member>
      <member refid="classamrex_1_1FabFactory_1a0d7f240eb5eb5b366024b09539d7ce87" prot="public" virt="virtual"><scope>amrex::FabFactory</scope><name>~FabFactory</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
