<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classNodalProjector" kind="class" language="C++" prot="public">
    <compoundname>NodalProjector</compoundname>
    <includes refid="AMReX__NodalProjector_8H" local="no">AMReX_NodalProjector.H</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classNodalProjector_1a0bc5fad5d0c394cace2558c7f933c747" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool NodalProjector::m_ok</definition>
        <argsstring></argsstring>
        <name>m_ok</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="69" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classNodalProjector_1ad799454b667f8bdf59c06548edb85ac8" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int NodalProjector::m_verbose</definition>
        <argsstring></argsstring>
        <name>m_verbose</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="72" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classNodalProjector_1a2c1b1691263eaa2eb0b68c15e3ac387b" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int NodalProjector::m_mg_verbose</definition>
        <argsstring></argsstring>
        <name>m_mg_verbose</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="73" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classNodalProjector_1a5dea083f2eaa4bc11d2f5774d5735a7e" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int NodalProjector::m_mg_cg_verbose</definition>
        <argsstring></argsstring>
        <name>m_mg_cg_verbose</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="74" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classNodalProjector_1ae52995fd7b5da8bf9f486a8c3def1845" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int NodalProjector::m_mg_maxiter</definition>
        <argsstring></argsstring>
        <name>m_mg_maxiter</name>
        <initializer>= 100</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="77" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classNodalProjector_1af738cf791afda325a6385e7950c54cb8" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int NodalProjector::m_mg_cg_maxiter</definition>
        <argsstring></argsstring>
        <name>m_mg_cg_maxiter</name>
        <initializer>= 100</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="78" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classNodalProjector_1aa0e47146a277f9888666a138abb45933" prot="private" static="no" mutable="no">
        <type>amrex::Real</type>
        <definition>amrex::Real NodalProjector::m_mg_rtol</definition>
        <argsstring></argsstring>
        <name>m_mg_rtol</name>
        <initializer>= 1.0e-11</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="79" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classNodalProjector_1ad2390bdb0bdcfc723e244e46007018ba" prot="private" static="no" mutable="no">
        <type>amrex::Real</type>
        <definition>amrex::Real NodalProjector::m_mg_atol</definition>
        <argsstring></argsstring>
        <name>m_mg_atol</name>
        <initializer>= 1.0e-14</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="80" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classNodalProjector_1a4993274b1547ef308bff71b699ea5ee7" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string NodalProjector::m_bottom_solver_type</definition>
        <argsstring></argsstring>
        <name>m_bottom_solver_type</name>
        <initializer>= &quot;bicgcg&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="81" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classNodalProjector_1af00e4fa936dd6a104dbc4c06c31ce3c9" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int NodalProjector::m_mg_max_coarsening_level</definition>
        <argsstring></argsstring>
        <name>m_mg_max_coarsening_level</name>
        <initializer>= 100</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="84" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classNodalProjector_1a707a22fe34e0f3931292289da0ed9539" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">amrex::Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">amrex::Geometry</ref> &gt;</type>
        <definition>amrex::Vector&lt;amrex::Geometry&gt; NodalProjector::m_geom</definition>
        <argsstring></argsstring>
        <name>m_geom</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="87" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classNodalProjector_1a0a3e937a9e2dd309d3a7b7a218478368" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">amrex::Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">amrex::BoxArray</ref> &gt;</type>
        <definition>amrex::Vector&lt;amrex::BoxArray&gt; NodalProjector::m_grids</definition>
        <argsstring></argsstring>
        <name>m_grids</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="88" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classNodalProjector_1a36343f0ec35282606812115ab9ffe03b" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">amrex::Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">amrex::DistributionMapping</ref> &gt;</type>
        <definition>amrex::Vector&lt;amrex::DistributionMapping&gt; NodalProjector::m_dmap</definition>
        <argsstring></argsstring>
        <name>m_dmap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="89" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classNodalProjector_1af274d6cbbb683f3fa95e21cde8d35894" prot="private" static="no" mutable="no">
        <type>std::array&lt; amrex::LinOpBCType, AMREX_SPACEDIM &gt;</type>
        <definition>std::array&lt;amrex::LinOpBCType,AMREX_SPACEDIM&gt; NodalProjector::m_bc_lo</definition>
        <argsstring></argsstring>
        <name>m_bc_lo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="95" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classNodalProjector_1a438826e16af6802a642e140677764aa3" prot="private" static="no" mutable="no">
        <type>std::array&lt; amrex::LinOpBCType, AMREX_SPACEDIM &gt;</type>
        <definition>std::array&lt;amrex::LinOpBCType,AMREX_SPACEDIM&gt; NodalProjector::m_bc_hi</definition>
        <argsstring></argsstring>
        <name>m_bc_hi</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="96" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classNodalProjector_1a61cf07c28a8f0bf6ac26a8c03a094b9e" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">amrex::Vector</ref>&lt; std::unique_ptr&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">amrex::MultiFab</ref> &gt; &gt;</type>
        <definition>amrex::Vector&lt; std::unique_ptr&lt; amrex::MultiFab &gt; &gt; NodalProjector::m_fluxes</definition>
        <argsstring></argsstring>
        <name>m_fluxes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="99" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classNodalProjector_1a72eefc6d3691bd81d0f8d2ea19a31a44" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">amrex::Vector</ref>&lt; std::unique_ptr&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">amrex::MultiFab</ref> &gt; &gt;</type>
        <definition>amrex::Vector&lt; std::unique_ptr&lt; amrex::MultiFab &gt; &gt; NodalProjector::m_phi</definition>
        <argsstring></argsstring>
        <name>m_phi</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="102" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classNodalProjector_1a4f6ca9a218add3c39bc73214d1602896" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">amrex::Vector</ref>&lt; std::unique_ptr&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">amrex::MultiFab</ref> &gt; &gt;</type>
        <definition>amrex::Vector&lt; std::unique_ptr&lt; amrex::MultiFab &gt; &gt; NodalProjector::m_rhs</definition>
        <argsstring></argsstring>
        <name>m_rhs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="103" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classNodalProjector_1aca188adf652bee20a0088bcaeaed4568" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1MLNodeLaplacian" kindref="compound">amrex::MLNodeLaplacian</ref> &gt;</type>
        <definition>std::unique_ptr&lt; amrex::MLNodeLaplacian &gt; NodalProjector::m_matrix</definition>
        <argsstring></argsstring>
        <name>m_matrix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="106" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classNodalProjector_1a685ba2709e473151ed6abe8ae57a1257" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1MLMG" kindref="compound">amrex::MLMG</ref> &gt;</type>
        <definition>std::unique_ptr&lt; amrex::MLMG &gt; NodalProjector::m_solver</definition>
        <argsstring></argsstring>
        <name>m_solver</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="109" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" bodystart="109" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classNodalProjector_1aba2519bd9dd9a867278517066b981a8d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>NodalProjector::NodalProjector</definition>
        <argsstring>()</argsstring>
        <name>NodalProjector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="16" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" bodystart="16" bodyend="16"/>
      </memberdef>
      <memberdef kind="function" id="classNodalProjector_1a7d0bea990561a7858480dee0b1e0224c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>NodalProjector::NodalProjector</definition>
        <argsstring>(const amrex::Vector&lt; amrex::Geometry &gt; &amp;a_geom, const amrex::Vector&lt; amrex::BoxArray &gt; &amp;a_grids, const amrex::Vector&lt; amrex::DistributionMapping &gt; &amp;a_dmap, std::array&lt; amrex::LinOpBCType, AMREX_SPACEDIM &gt; a_bc_lo, std::array&lt; amrex::LinOpBCType, AMREX_SPACEDIM &gt; a_bc_hi)</argsstring>
        <name>NodalProjector</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">amrex::Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">amrex::Geometry</ref> &gt; &amp;</type>
          <declname>a_geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">amrex::Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">amrex::BoxArray</ref> &gt; &amp;</type>
          <declname>a_grids</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">amrex::Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">amrex::DistributionMapping</ref> &gt; &amp;</type>
          <declname>a_dmap</declname>
        </param>
        <param>
          <type>std::array&lt; amrex::LinOpBCType, AMREX_SPACEDIM &gt;</type>
          <declname>a_bc_lo</declname>
        </param>
        <param>
          <type>std::array&lt; amrex::LinOpBCType, AMREX_SPACEDIM &gt;</type>
          <declname>a_bc_hi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="18" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.cpp" bodystart="11" bodyend="18"/>
      </memberdef>
      <memberdef kind="function" id="classNodalProjector_1a41ae2bfaad72fe7e67b827087c450984" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NodalProjector::define</definition>
        <argsstring>(const amrex::Vector&lt; amrex::Geometry &gt; &amp;a_geom, const amrex::Vector&lt; amrex::BoxArray &gt; &amp;a_grids, const amrex::Vector&lt; amrex::DistributionMapping &gt; &amp;a_dmap, std::array&lt; amrex::LinOpBCType, AMREX_SPACEDIM &gt; a_bc_lo, std::array&lt; amrex::LinOpBCType, AMREX_SPACEDIM &gt; a_bc_hi)</argsstring>
        <name>define</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">amrex::Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">amrex::Geometry</ref> &gt; &amp;</type>
          <declname>a_geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">amrex::Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">amrex::BoxArray</ref> &gt; &amp;</type>
          <declname>a_grids</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">amrex::Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">amrex::DistributionMapping</ref> &gt; &amp;</type>
          <declname>a_dmap</declname>
        </param>
        <param>
          <type>std::array&lt; amrex::LinOpBCType, AMREX_SPACEDIM &gt;</type>
          <declname>a_bc_lo</declname>
        </param>
        <param>
          <type>std::array&lt; amrex::LinOpBCType, AMREX_SPACEDIM &gt;</type>
          <declname>a_bc_hi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="32" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.cpp" bodystart="33" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="classNodalProjector_1a97407c4976bf0f4258129af43fb83368" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NodalProjector::project</definition>
        <argsstring>(amrex::Vector&lt; std::unique_ptr&lt; amrex::MultiFab &gt; &gt; &amp;a_vel, const amrex::Vector&lt; std::unique_ptr&lt; amrex::MultiFab &gt; &gt; &amp;a_sigma, const amrex::Vector&lt; std::unique_ptr&lt; amrex::MultiFab &gt; &gt; &amp;a_S_cc={}, const amrex::Vector&lt; std::unique_ptr&lt; amrex::MultiFab &gt; &gt; &amp;a_S_nd={})</argsstring>
        <name>project</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">amrex::Vector</ref>&lt; std::unique_ptr&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">amrex::MultiFab</ref> &gt; &gt; &amp;</type>
          <declname>a_vel</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">amrex::Vector</ref>&lt; std::unique_ptr&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">amrex::MultiFab</ref> &gt; &gt; &amp;</type>
          <declname>a_sigma</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">amrex::Vector</ref>&lt; std::unique_ptr&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">amrex::MultiFab</ref> &gt; &gt; &amp;</type>
          <declname>a_S_cc</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">amrex::Vector</ref>&lt; std::unique_ptr&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">amrex::MultiFab</ref> &gt; &gt; &amp;</type>
          <declname>a_S_nd</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="49" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.cpp" bodystart="142" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="classNodalProjector_1a422d897c5f196e63245215c1e23e8592" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NodalProjector::project2</definition>
        <argsstring>(amrex::Vector&lt; std::unique_ptr&lt; amrex::MultiFab &gt; &gt; &amp;a_vel, const amrex::Vector&lt; std::unique_ptr&lt; amrex::MultiFab &gt; &gt; &amp;a_alpha, const amrex::Vector&lt; std::unique_ptr&lt; amrex::MultiFab &gt; &gt; &amp;a_beta, const amrex::Vector&lt; std::unique_ptr&lt; amrex::MultiFab &gt; &gt; &amp;a_rhs)</argsstring>
        <name>project2</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">amrex::Vector</ref>&lt; std::unique_ptr&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">amrex::MultiFab</ref> &gt; &gt; &amp;</type>
          <declname>a_vel</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">amrex::Vector</ref>&lt; std::unique_ptr&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">amrex::MultiFab</ref> &gt; &gt; &amp;</type>
          <declname>a_alpha</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">amrex::Vector</ref>&lt; std::unique_ptr&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">amrex::MultiFab</ref> &gt; &gt; &amp;</type>
          <declname>a_beta</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">amrex::Vector</ref>&lt; std::unique_ptr&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">amrex::MultiFab</ref> &gt; &gt; &amp;</type>
          <declname>a_rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="54" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.cpp" bodystart="213" bodyend="272"/>
      </memberdef>
      <memberdef kind="function" id="classNodalProjector_1a71f40933284ce98bbbb210d9d06d5f1f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">amrex::Vector</ref>&lt; const <ref refid="classamrex_1_1MultiFab" kindref="compound">amrex::MultiFab</ref> * &gt;</type>
        <definition>amrex::Vector&lt; const amrex::MultiFab* &gt; NodalProjector::getPhi</definition>
        <argsstring>() const </argsstring>
        <name>getPhi</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="59" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" bodystart="59" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="classNodalProjector_1aab30ec8e55f20261bee4401352fe330e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">amrex::Vector</ref>&lt; const <ref refid="classamrex_1_1MultiFab" kindref="compound">amrex::MultiFab</ref> * &gt;</type>
        <definition>amrex::Vector&lt; const amrex::MultiFab* &gt; NodalProjector::getGradPhi</definition>
        <argsstring>() const </argsstring>
        <name>getGradPhi</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="60" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" bodystart="60" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="classNodalProjector_1a73a62e41f06a187ede7f13ec88ace5dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NodalProjector::computeRHS</definition>
        <argsstring>(amrex::Vector&lt; std::unique_ptr&lt; amrex::MultiFab &gt; &gt; &amp;a_rhs, const amrex::Vector&lt; std::unique_ptr&lt; amrex::MultiFab &gt; &gt; &amp;a_vel, const amrex::Vector&lt; std::unique_ptr&lt; amrex::MultiFab &gt; &gt; &amp;a_S_cc={}, const amrex::Vector&lt; std::unique_ptr&lt; amrex::MultiFab &gt; &gt; &amp;a_S_nd={})</argsstring>
        <name>computeRHS</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">amrex::Vector</ref>&lt; std::unique_ptr&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">amrex::MultiFab</ref> &gt; &gt; &amp;</type>
          <declname>a_rhs</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">amrex::Vector</ref>&lt; std::unique_ptr&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">amrex::MultiFab</ref> &gt; &gt; &amp;</type>
          <declname>a_vel</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">amrex::Vector</ref>&lt; std::unique_ptr&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">amrex::MultiFab</ref> &gt; &gt; &amp;</type>
          <declname>a_S_cc</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">amrex::Vector</ref>&lt; std::unique_ptr&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">amrex::MultiFab</ref> &gt; &gt; &amp;</type>
          <declname>a_S_nd</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="62" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.cpp" bodystart="373" bodyend="383"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classNodalProjector_1aaa515200abd70c4d8dc37112ac9c8974" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NodalProjector::readParameters</definition>
        <argsstring>()</argsstring>
        <name>readParameters</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="111" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.cpp" bodystart="278" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="classNodalProjector_1a8dadc1af58420e5e61a0357f0d076deb" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NodalProjector::printInfo</definition>
        <argsstring>()</argsstring>
        <name>printInfo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="113" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.cpp" bodystart="387" bodyend="396"/>
      </memberdef>
      <memberdef kind="function" id="classNodalProjector_1a29e8b5ac0b7640840486c5b0a06b9a11" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NodalProjector::setup</definition>
        <argsstring>()</argsstring>
        <name>setup</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="115" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.cpp" bodystart="298" bodyend="365"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="5619">
        <label>std::vector&lt; amrex::BoxArray, std::allocator&lt; amrex::BoxArray &gt; &gt;</label>
      </node>
      <node id="5615">
        <label>amrex::Vector&lt; std::unique_ptr&lt; amrex::MultiFab &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="5616" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5622">
        <label>Real</label>
      </node>
      <node id="5621">
        <label>std::vector&lt; amrex::Geometry, std::allocator&lt; amrex::Geometry &gt; &gt;</label>
      </node>
      <node id="5613">
        <label>amrex::Vector&lt; amrex::DistributionMapping &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="5614" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5617">
        <label>string</label>
      </node>
      <node id="5618">
        <label>amrex::Vector&lt; amrex::BoxArray &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="5619" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5614">
        <label>std::vector&lt; amrex::DistributionMapping, std::allocator&lt; amrex::DistributionMapping &gt; &gt;</label>
      </node>
      <node id="5616">
        <label>std::vector&lt; std::unique_ptr&lt; amrex::MultiFab &gt;, std::allocator&lt; std::unique_ptr&lt; amrex::MultiFab &gt; &gt; &gt;</label>
      </node>
      <node id="5612">
        <label>NodalProjector</label>
        <link refid="classNodalProjector"/>
        <childnode refid="5613" relation="usage">
          <edgelabel>m_dmap</edgelabel>
        </childnode>
        <childnode refid="5615" relation="usage">
          <edgelabel>m_rhs</edgelabel>
          <edgelabel>m_phi</edgelabel>
          <edgelabel>m_fluxes</edgelabel>
        </childnode>
        <childnode refid="5617" relation="usage">
          <edgelabel>m_bottom_solver_type</edgelabel>
        </childnode>
        <childnode refid="5618" relation="usage">
          <edgelabel>m_grids</edgelabel>
        </childnode>
        <childnode refid="5620" relation="usage">
          <edgelabel>m_geom</edgelabel>
        </childnode>
        <childnode refid="5622" relation="usage">
          <edgelabel>m_mg_rtol</edgelabel>
          <edgelabel>m_mg_atol</edgelabel>
        </childnode>
      </node>
      <node id="5620">
        <label>amrex::Vector&lt; amrex::Geometry &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="5621" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" line="11" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/Projections/AMReX_NodalProjector.H" bodystart="10" bodyend="117"/>
    <listofallmembers>
      <member refid="classNodalProjector_1a73a62e41f06a187ede7f13ec88ace5dd" prot="public" virt="non-virtual"><scope>NodalProjector</scope><name>computeRHS</name></member>
      <member refid="classNodalProjector_1a41ae2bfaad72fe7e67b827087c450984" prot="public" virt="non-virtual"><scope>NodalProjector</scope><name>define</name></member>
      <member refid="classNodalProjector_1aab30ec8e55f20261bee4401352fe330e" prot="public" virt="non-virtual"><scope>NodalProjector</scope><name>getGradPhi</name></member>
      <member refid="classNodalProjector_1a71f40933284ce98bbbb210d9d06d5f1f" prot="public" virt="non-virtual"><scope>NodalProjector</scope><name>getPhi</name></member>
      <member refid="classNodalProjector_1a438826e16af6802a642e140677764aa3" prot="private" virt="non-virtual"><scope>NodalProjector</scope><name>m_bc_hi</name></member>
      <member refid="classNodalProjector_1af274d6cbbb683f3fa95e21cde8d35894" prot="private" virt="non-virtual"><scope>NodalProjector</scope><name>m_bc_lo</name></member>
      <member refid="classNodalProjector_1a4993274b1547ef308bff71b699ea5ee7" prot="private" virt="non-virtual"><scope>NodalProjector</scope><name>m_bottom_solver_type</name></member>
      <member refid="classNodalProjector_1a36343f0ec35282606812115ab9ffe03b" prot="private" virt="non-virtual"><scope>NodalProjector</scope><name>m_dmap</name></member>
      <member refid="classNodalProjector_1a61cf07c28a8f0bf6ac26a8c03a094b9e" prot="private" virt="non-virtual"><scope>NodalProjector</scope><name>m_fluxes</name></member>
      <member refid="classNodalProjector_1a707a22fe34e0f3931292289da0ed9539" prot="private" virt="non-virtual"><scope>NodalProjector</scope><name>m_geom</name></member>
      <member refid="classNodalProjector_1a0a3e937a9e2dd309d3a7b7a218478368" prot="private" virt="non-virtual"><scope>NodalProjector</scope><name>m_grids</name></member>
      <member refid="classNodalProjector_1aca188adf652bee20a0088bcaeaed4568" prot="private" virt="non-virtual"><scope>NodalProjector</scope><name>m_matrix</name></member>
      <member refid="classNodalProjector_1ad2390bdb0bdcfc723e244e46007018ba" prot="private" virt="non-virtual"><scope>NodalProjector</scope><name>m_mg_atol</name></member>
      <member refid="classNodalProjector_1af738cf791afda325a6385e7950c54cb8" prot="private" virt="non-virtual"><scope>NodalProjector</scope><name>m_mg_cg_maxiter</name></member>
      <member refid="classNodalProjector_1a5dea083f2eaa4bc11d2f5774d5735a7e" prot="private" virt="non-virtual"><scope>NodalProjector</scope><name>m_mg_cg_verbose</name></member>
      <member refid="classNodalProjector_1af00e4fa936dd6a104dbc4c06c31ce3c9" prot="private" virt="non-virtual"><scope>NodalProjector</scope><name>m_mg_max_coarsening_level</name></member>
      <member refid="classNodalProjector_1ae52995fd7b5da8bf9f486a8c3def1845" prot="private" virt="non-virtual"><scope>NodalProjector</scope><name>m_mg_maxiter</name></member>
      <member refid="classNodalProjector_1aa0e47146a277f9888666a138abb45933" prot="private" virt="non-virtual"><scope>NodalProjector</scope><name>m_mg_rtol</name></member>
      <member refid="classNodalProjector_1a2c1b1691263eaa2eb0b68c15e3ac387b" prot="private" virt="non-virtual"><scope>NodalProjector</scope><name>m_mg_verbose</name></member>
      <member refid="classNodalProjector_1a0bc5fad5d0c394cace2558c7f933c747" prot="private" virt="non-virtual"><scope>NodalProjector</scope><name>m_ok</name></member>
      <member refid="classNodalProjector_1a72eefc6d3691bd81d0f8d2ea19a31a44" prot="private" virt="non-virtual"><scope>NodalProjector</scope><name>m_phi</name></member>
      <member refid="classNodalProjector_1a4f6ca9a218add3c39bc73214d1602896" prot="private" virt="non-virtual"><scope>NodalProjector</scope><name>m_rhs</name></member>
      <member refid="classNodalProjector_1a685ba2709e473151ed6abe8ae57a1257" prot="private" virt="non-virtual"><scope>NodalProjector</scope><name>m_solver</name></member>
      <member refid="classNodalProjector_1ad799454b667f8bdf59c06548edb85ac8" prot="private" virt="non-virtual"><scope>NodalProjector</scope><name>m_verbose</name></member>
      <member refid="classNodalProjector_1aba2519bd9dd9a867278517066b981a8d" prot="public" virt="non-virtual"><scope>NodalProjector</scope><name>NodalProjector</name></member>
      <member refid="classNodalProjector_1a7d0bea990561a7858480dee0b1e0224c" prot="public" virt="non-virtual"><scope>NodalProjector</scope><name>NodalProjector</name></member>
      <member refid="classNodalProjector_1a8dadc1af58420e5e61a0357f0d076deb" prot="private" virt="non-virtual"><scope>NodalProjector</scope><name>printInfo</name></member>
      <member refid="classNodalProjector_1a97407c4976bf0f4258129af43fb83368" prot="public" virt="non-virtual"><scope>NodalProjector</scope><name>project</name></member>
      <member refid="classNodalProjector_1a422d897c5f196e63245215c1e23e8592" prot="public" virt="non-virtual"><scope>NodalProjector</scope><name>project2</name></member>
      <member refid="classNodalProjector_1aaa515200abd70c4d8dc37112ac9c8974" prot="private" virt="non-virtual"><scope>NodalProjector</scope><name>readParameters</name></member>
      <member refid="classNodalProjector_1a29e8b5ac0b7640840486c5b0a06b9a11" prot="private" virt="non-virtual"><scope>NodalProjector</scope><name>setup</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
