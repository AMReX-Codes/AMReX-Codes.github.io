<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classamrex_1_1MLNodeLaplacian" kind="class" language="C++" prot="public">
    <compoundname>amrex::MLNodeLaplacian</compoundname>
    <basecompoundref refid="classamrex_1_1MLNodeLinOp" prot="public" virt="non-virtual">amrex::MLNodeLinOp</basecompoundref>
    <includes refid="AMReX__MLNodeLaplacian_8H" local="no">AMReX_MLNodeLaplacian.H</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1MLNodeLaplacian_1a6e9813d42ab7f38861a4b0a0d88f6080" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int amrex::MLNodeLaplacian::m_is_rz</definition>
        <argsstring></argsstring>
        <name>m_is_rz</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian.H" line="132" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian.H" bodystart="132" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLNodeLaplacian_1a8a183b518f95b79420fa95a4400b3a4f" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; std::unique_ptr&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &gt;, AMREX_SPACEDIM &gt; &gt; &gt;</type>
        <definition>Vector&lt;Vector&lt;Array&lt;std::unique_ptr&lt;MultiFab&gt;,AMREX_SPACEDIM&gt; &gt; &gt; amrex::MLNodeLaplacian::m_sigma</definition>
        <argsstring></argsstring>
        <name>m_sigma</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian.H" line="134" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian.H" bodystart="134" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLNodeLaplacian_1ae971fa5b7d9a948b3b8b778bb9540064" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::unique_ptr&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &gt; &gt; &gt;</type>
        <definition>Vector&lt;Vector&lt;std::unique_ptr&lt;MultiFab&gt; &gt; &gt; amrex::MLNodeLaplacian::m_stencil</definition>
        <argsstring></argsstring>
        <name>m_stencil</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian.H" line="135" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian.H" bodystart="135" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLNodeLaplacian_1a587789b33e8a1da29ce868daeb003995" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &gt;</type>
        <definition>Vector&lt;Vector&lt;Real&gt; &gt; amrex::MLNodeLaplacian::m_s0_norm0</definition>
        <argsstring></argsstring>
        <name>m_s0_norm0</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian.H" line="136" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian.H" bodystart="136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLNodeLaplacian_1a0797df73e7c6a1283fd31748aa6f12e5" prot="private" static="no" mutable="no">
        <type>Real</type>
        <definition>Real amrex::MLNodeLaplacian::m_normalization_threshold</definition>
        <argsstring></argsstring>
        <name>m_normalization_threshold</name>
        <initializer>= 1.e-10</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian.H" line="138" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian.H" bodystart="138" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLNodeLaplacian_1a1dd0f2250ddf96f66c4163f0f99e1f1d" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::MLNodeLaplacian::m_use_gauss_seidel</definition>
        <argsstring></argsstring>
        <name>m_use_gauss_seidel</name>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian.H" line="146" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian.H" bodystart="146" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLNodeLaplacian_1ac1b3d5d3a2cde86e476ffb95f17b0fef" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::MLNodeLaplacian::m_use_harmonic_average</definition>
        <argsstring></argsstring>
        <name>m_use_harmonic_average</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian.H" line="147" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian.H" bodystart="147" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1MLNodeLaplacian_1ac394ddffb9ed6a17dec6b50db0f7275a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::MLNodeLaplacian::MLNodeLaplacian</definition>
        <argsstring>() noexcept</argsstring>
        <name>MLNodeLaplacian</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian.H" line="16" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian.H" bodystart="16" bodyend="16"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLNodeLaplacian_1af834bec998e77e019a9bb511ca9b7da0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MLNodeLaplacian::MLNodeLaplacian</definition>
        <argsstring>(const Vector&lt; Geometry &gt; &amp;a_geom, const Vector&lt; BoxArray &gt; &amp;a_grids, const Vector&lt; DistributionMapping &gt; &amp;a_dmap, const LPInfo &amp;a_info=LPInfo(), const Vector&lt; FabFactory&lt; FArrayBox &gt; const * &gt; &amp;a_factory={})</argsstring>
        <name>MLNodeLaplacian</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>a_geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; BoxArray &gt; &amp;</type>
          <declname>a_grids</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt; &amp;</type>
          <declname>a_dmap</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1LPInfo" kindref="compound">LPInfo</ref> &amp;</type>
          <declname>a_info</declname>
          <defval><ref refid="structamrex_1_1LPInfo" kindref="compound">LPInfo</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &gt; const * &gt; &amp;</type>
          <declname>a_factory</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian.H" line="17" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian.cpp" bodystart="19" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLNodeLaplacian_1aeba4557ed8cd5a660c5925f4ebc0e271" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>amrex::MLNodeLaplacian::~MLNodeLaplacian</definition>
        <argsstring>()</argsstring>
        <name>~MLNodeLaplacian</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian.H" line="29" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian.cpp" bodystart="39" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLNodeLaplacian_1a3e118d417a65df672755dedb1623fe06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MLNodeLaplacian::MLNodeLaplacian</definition>
        <argsstring>(const MLNodeLaplacian &amp;)=delete</argsstring>
        <name>MLNodeLaplacian</name>
        <param>
          <type>const <ref refid="classamrex_1_1MLNodeLaplacian" kindref="compound">MLNodeLaplacian</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian.H" line="31" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLNodeLaplacian_1a9b935f6c3fd7cdb7d702502ffbabc275" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MLNodeLaplacian::MLNodeLaplacian</definition>
        <argsstring>(MLNodeLaplacian &amp;&amp;)=delete</argsstring>
        <name>MLNodeLaplacian</name>
        <param>
          <type><ref refid="classamrex_1_1MLNodeLaplacian" kindref="compound">MLNodeLaplacian</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian.H" line="32" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLNodeLaplacian_1af5fc5382f4bff5cbeec42c320d033b77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1MLNodeLaplacian" kindref="compound">MLNodeLaplacian</ref> &amp;</type>
        <definition>MLNodeLaplacian&amp; amrex::MLNodeLaplacian::operator=</definition>
        <argsstring>(const MLNodeLaplacian &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classamrex_1_1MLNodeLaplacian" kindref="compound">MLNodeLaplacian</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian.H" line="33" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLNodeLaplacian_1a2f0797012b11f58024e0789f7acc26dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1MLNodeLaplacian" kindref="compound">MLNodeLaplacian</ref> &amp;</type>
        <definition>MLNodeLaplacian&amp; amrex::MLNodeLaplacian::operator=</definition>
        <argsstring>(MLNodeLaplacian &amp;&amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1MLNodeLaplacian" kindref="compound">MLNodeLaplacian</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian.H" line="34" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLNodeLaplacian_1a44df7f1f221968bec24958304cf947f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLNodeLaplacian::define</definition>
        <argsstring>(const Vector&lt; Geometry &gt; &amp;a_geom, const Vector&lt; BoxArray &gt; &amp;a_grids, const Vector&lt; DistributionMapping &gt; &amp;a_dmap, const LPInfo &amp;a_info=LPInfo(), const Vector&lt; FabFactory&lt; FArrayBox &gt; const * &gt; &amp;a_factory={})</argsstring>
        <name>define</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>a_geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; BoxArray &gt; &amp;</type>
          <declname>a_grids</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt; &amp;</type>
          <declname>a_dmap</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1LPInfo" kindref="compound">LPInfo</ref> &amp;</type>
          <declname>a_info</declname>
          <defval><ref refid="structamrex_1_1LPInfo" kindref="compound">LPInfo</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &gt; const * &gt; &amp;</type>
          <declname>a_factory</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian.H" line="36" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian.cpp" bodystart="43" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLNodeLaplacian_1aec78f58fa749e98da726f5a64e91874a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::string</type>
        <definition>virtual std::string amrex::MLNodeLaplacian::name</definition>
        <argsstring>() const override</argsstring>
        <name>name</name>
        <reimplements refid="classamrex_1_1MLLinOp_1a9f6145ef119707fa7ce4fd43542d1c24">name</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian.H" line="50" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian.H" bodystart="50" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLNodeLaplacian_1ad6fc7d27c22cd096b77b9bb7d2b4f66d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLNodeLaplacian::setRZCorrection</definition>
        <argsstring>(bool rz) noexcept</argsstring>
        <name>setRZCorrection</name>
        <param>
          <type>bool</type>
          <declname>rz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian.H" line="52" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian.H" bodystart="52" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLNodeLaplacian_1a5184c0395e2b615863f958c9a057f6d2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLNodeLaplacian::setNormalizationThreshold</definition>
        <argsstring>(Real t) noexcept</argsstring>
        <name>setNormalizationThreshold</name>
        <param>
          <type>Real</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian.H" line="54" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian.H" bodystart="54" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLNodeLaplacian_1a4cbcb13e082363d597268b6523f72470" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLNodeLaplacian::setSigma</definition>
        <argsstring>(int amrlev, const MultiFab &amp;a_sigma)</argsstring>
        <name>setSigma</name>
        <param>
          <type>int</type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>a_sigma</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian.H" line="56" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian.cpp" bodystart="135" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLNodeLaplacian_1adb3e623e86459b1e9a9c14492961d759" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLNodeLaplacian::compDivergence</definition>
        <argsstring>(const Vector&lt; MultiFab * &gt; &amp;rhs, const Vector&lt; MultiFab * &gt; &amp;vel)</argsstring>
        <name>compDivergence</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> * &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> * &gt; &amp;</type>
          <declname>vel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian.H" line="58" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian.cpp" bodystart="141" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLNodeLaplacian_1a59c04abe13cccca82379bbcac19a5467" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLNodeLaplacian::compRHS</definition>
        <argsstring>(const Vector&lt; MultiFab * &gt; &amp;rhs, const Vector&lt; MultiFab * &gt; &amp;vel, const Vector&lt; const MultiFab * &gt; &amp;rhnd, const Vector&lt; MultiFab * &gt; &amp;rhcc)</argsstring>
        <name>compRHS</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> * &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> * &gt; &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> * &gt; &amp;</type>
          <declname>rhnd</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> * &gt; &amp;</type>
          <declname>rhcc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian.H" line="60" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian.cpp" bodystart="147" bodyend="483"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLNodeLaplacian_1aec4af1f3dc974b684560e6483befdc60" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLNodeLaplacian::updateVelocity</definition>
        <argsstring>(const Vector&lt; MultiFab * &gt; &amp;vel, const Vector&lt; MultiFab const * &gt; &amp;sol) const </argsstring>
        <name>updateVelocity</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> * &gt; &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> const * &gt; &amp;</type>
          <declname>sol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian.H" line="64" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian.cpp" bodystart="486" bodyend="551"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLNodeLaplacian_1afc701712c658d0f67bef6a07bbf323b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLNodeLaplacian::compSyncResidualCoarse</definition>
        <argsstring>(MultiFab &amp;sync_resid, const MultiFab &amp;phi, const MultiFab &amp;vold, const MultiFab *rhcc, const BoxArray &amp;fine_grids, const IntVect &amp;ref_ratio)</argsstring>
        <name>compSyncResidualCoarse</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>sync_resid</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>vold</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *</type>
          <declname>rhcc</declname>
        </param>
        <param>
          <type>const BoxArray &amp;</type>
          <declname>fine_grids</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ref_ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian.H" line="66" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian.cpp" bodystart="1605" bodyend="1899"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLNodeLaplacian_1a44e85cef12a5b759e5a52e64cc9f2c3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLNodeLaplacian::compSyncResidualFine</definition>
        <argsstring>(MultiFab &amp;sync_resid, const MultiFab &amp;phi, const MultiFab &amp;vold, const MultiFab *rhcc)</argsstring>
        <name>compSyncResidualFine</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>sync_resid</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>vold</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *</type>
          <declname>rhcc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian.H" line="70" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian.cpp" bodystart="1902" bodyend="2147"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLNodeLaplacian_1aaa74c5ed1094317d719bffbe89f016c9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLNodeLaplacian::setGaussSeidel</definition>
        <argsstring>(bool flag) noexcept</argsstring>
        <name>setGaussSeidel</name>
        <param>
          <type>bool</type>
          <declname>flag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian.H" line="73" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian.H" bodystart="73" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLNodeLaplacian_1a2d7beea7bc93f71c8970977613d2ff08" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLNodeLaplacian::setHarmonicAverage</definition>
        <argsstring>(bool flag) noexcept</argsstring>
        <name>setHarmonicAverage</name>
        <param>
          <type>bool</type>
          <declname>flag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian.H" line="74" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian.H" bodystart="74" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLNodeLaplacian_1af44fe2628228f69789874df4dbcab755" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLNodeLaplacian::setCoarseningStrategy</definition>
        <argsstring>(CoarseningStrategy cs) noexcept</argsstring>
        <name>setCoarseningStrategy</name>
        <param>
          <type><ref refid="classamrex_1_1MLNodeLinOp_1a2ddc20eaca70aaa6da5935648ce06a82" kindref="member">CoarseningStrategy</ref></type>
          <declname>cs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian.H" line="76" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian.H" bodystart="76" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLNodeLaplacian_1af6d2be33c0d71092e0231e878c6b7cd9" prot="public" static="no" const="yes" explicit="no" inline="yes" final="yes" virt="virtual">
        <type><ref refid="namespaceamrex_1a9303c93b47b7839de8ce552cb7cb21c4" kindref="member">BottomSolver</ref></type>
        <definition>virtual BottomSolver amrex::MLNodeLaplacian::getDefaultBottomSolver</definition>
        <argsstring>() const finaloverride</argsstring>
        <name>getDefaultBottomSolver</name>
        <reimplements refid="classamrex_1_1MLLinOp_1a7c1c62615a265e25a92ce37b3b287933">getDefaultBottomSolver</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian.H" line="78" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian.H" bodystart="78" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLNodeLaplacian_1a049861a9a5c04611f13be0978ebb6232" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLNodeLaplacian::restriction</definition>
        <argsstring>(int amrlev, int cmglev, MultiFab &amp;crse, MultiFab &amp;fine) const finaloverride</argsstring>
        <name>restriction</name>
        <reimplements refid="classamrex_1_1MLLinOp_1a5a1bffd08a85405f9a9fbeed7c20fd97">restriction</reimplements>
        <param>
          <type>int</type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cmglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>fine</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian.H" line="83" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian.cpp" bodystart="1046" bodyend="1093"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLNodeLaplacian_1a44f3d04638b6cde86deb3520faafcac5" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLNodeLaplacian::interpolation</definition>
        <argsstring>(int amrlev, int fmglev, MultiFab &amp;fine, const MultiFab &amp;crse) const finaloverride</argsstring>
        <name>interpolation</name>
        <reimplements refid="classamrex_1_1MLLinOp_1a55d585de64a0263a1b2308553cbaee13">interpolation</reimplements>
        <param>
          <type>int</type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>int</type>
          <declname>fmglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>crse</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian.H" line="84" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian.cpp" bodystart="1096" bodyend="1151"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLNodeLaplacian_1a1f56925dec0934532aaaf4dd1c6c7c42" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLNodeLaplacian::averageDownSolutionRHS</definition>
        <argsstring>(int camrlev, MultiFab &amp;crse_sol, MultiFab &amp;crse_rhs, const MultiFab &amp;fine_sol, const MultiFab &amp;fine_rhs) finaloverride</argsstring>
        <name>averageDownSolutionRHS</name>
        <reimplements refid="classamrex_1_1MLLinOp_1a49e8248c4a3a27e8bfc77227bdfb433a">averageDownSolutionRHS</reimplements>
        <param>
          <type>int</type>
          <declname>camrlev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>crse_sol</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>crse_rhs</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>fine_sol</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>fine_rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian.H" line="85" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian.cpp" bodystart="1154" bodyend="1166"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLNodeLaplacian_1aa16d5801347ae1d56216e72cbe4da5ae" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLNodeLaplacian::reflux</definition>
        <argsstring>(int crse_amrlev, MultiFab &amp;res, const MultiFab &amp;crse_sol, const MultiFab &amp;crse_rhs, MultiFab &amp;fine_res, MultiFab &amp;fine_sol, const MultiFab &amp;fine_rhs) const finaloverride</argsstring>
        <name>reflux</name>
        <reimplements refid="classamrex_1_1MLLinOp_1a0c9c6f136cf005be3ce2c797b4b67537">reflux</reimplements>
        <param>
          <type>int</type>
          <declname>crse_amrlev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>res</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>crse_sol</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>crse_rhs</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>fine_res</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>fine_sol</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>fine_rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian.H" line="88" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian.cpp" bodystart="2150" bodyend="2319"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLNodeLaplacian_1ae2134173a1bd7b925000e8072a87082f" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLNodeLaplacian::prepareForSolve</definition>
        <argsstring>() finaloverride</argsstring>
        <name>prepareForSolve</name>
        <reimplements refid="classamrex_1_1MLNodeLinOp_1ac604e9b47938e183cd38f8f9ad400668">prepareForSolve</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian.H" line="92" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian.cpp" bodystart="1028" bodyend="1043"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLNodeLaplacian_1a94ccd77c0c9e232e20b5e68d785d2dee" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLNodeLaplacian::Fapply</definition>
        <argsstring>(int amrlev, int mglev, MultiFab &amp;out, const MultiFab &amp;in) const finaloverride</argsstring>
        <name>Fapply</name>
        <reimplements refid="classamrex_1_1MLNodeLinOp_1afaae44c30405c4c8c2fdabede17a34ef">Fapply</reimplements>
        <param>
          <type>int</type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian.H" line="93" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian.cpp" bodystart="1250" bodyend="1308"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLNodeLaplacian_1af52c5a037979e4b1a7da5201868af61a" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLNodeLaplacian::Fsmooth</definition>
        <argsstring>(int amrlev, int mglev, MultiFab &amp;sol, const MultiFab &amp;rhs) const finaloverride</argsstring>
        <name>Fsmooth</name>
        <reimplements refid="classamrex_1_1MLNodeLinOp_1ac856c51055f30434fd54c59eeeeb2f9b">Fsmooth</reimplements>
        <param>
          <type>int</type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian.H" line="94" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian.cpp" bodystart="1311" bodyend="1552"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLNodeLaplacian_1aae5e2a5876ca539035a6cee8fa025c29" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLNodeLaplacian::normalize</definition>
        <argsstring>(int amrlev, int mglev, MultiFab &amp;mf) const finaloverride</argsstring>
        <name>normalize</name>
        <reimplements refid="classamrex_1_1MLLinOp_1a3e0f34318790ba3e087ecf8b870dd12f">normalize</reimplements>
        <param>
          <type>int</type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian.H" line="95" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian.cpp" bodystart="1555" bodyend="1602"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLNodeLaplacian_1a1156c6a363950889ca5e456aed6187b7" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLNodeLaplacian::fixUpResidualMask</definition>
        <argsstring>(int amrlev, iMultiFab &amp;resmsk) finaloverride</argsstring>
        <name>fixUpResidualMask</name>
        <reimplements refid="classamrex_1_1MLLinOp_1a5137ff000c6f8940f4b07a28f3bf9375">fixUpResidualMask</reimplements>
        <param>
          <type>int</type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &amp;</type>
          <declname>resmsk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian.H" line="97" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian.cpp" bodystart="1006" bodyend="1025"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLNodeLaplacian_1aa2876f1b621f23109c9da02a9e7f383a" prot="public" static="no" const="yes" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex::MLNodeLaplacian::getFluxes</definition>
        <argsstring>(const Vector&lt; Array&lt; MultiFab *, AMREX_SPACEDIM &gt; &gt; &amp;a_flux, const Vector&lt; MultiFab * &gt; &amp;a_sol, Location a_loc) const finaloverride</argsstring>
        <name>getFluxes</name>
        <reimplements refid="classamrex_1_1MLLinOp_1ae6a653e83929e0f2c41482551c10b4e8">getFluxes</reimplements>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *, AMREX_SPACEDIM &gt; &gt; &amp;</type>
          <declname>a_flux</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> * &gt; &amp;</type>
          <declname>a_sol</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLLinOp_1a07cd0a7c45d6542e33a5d97aefe5bab3" kindref="member">Location</ref></type>
          <declname>a_loc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian.H" line="99" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian.H" bodystart="99" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLNodeLaplacian_1ace1773b3f7fa41c2c6af25fae9c5de6b" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLNodeLaplacian::getFluxes</definition>
        <argsstring>(const Vector&lt; MultiFab * &gt; &amp;a_flux, const Vector&lt; MultiFab * &gt; &amp;a_sol) const finaloverride</argsstring>
        <name>getFluxes</name>
        <reimplements refid="classamrex_1_1MLLinOp_1ad2419e6b4d384edbd5695daca078e310">getFluxes</reimplements>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> * &gt; &amp;</type>
          <declname>a_flux</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> * &gt; &amp;</type>
          <declname>a_sol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian.H" line="104" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian.cpp" bodystart="554" bodyend="625"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLNodeLaplacian_1a35200d609bde84407b7e54dfd8b53f92" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLNodeLaplacian::unimposeNeumannBC</definition>
        <argsstring>(int amrlev, MultiFab &amp;rhs) const finaloverride</argsstring>
        <name>unimposeNeumannBC</name>
        <reimplements refid="classamrex_1_1MLLinOp_1ab66507f9095fd460fec87c890e5a49c4">unimposeNeumannBC</reimplements>
        <param>
          <type>int</type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian.H" line="107" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian.cpp" bodystart="113" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLNodeLaplacian_1aca10dcca4922ff74faf8f26263cbed7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLNodeLaplacian::averageDownCoeffs</definition>
        <argsstring>()</argsstring>
        <name>averageDownCoeffs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian.H" line="109" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian.cpp" bodystart="628" bodyend="687"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLNodeLaplacian_1ae306b7b6eb65f5d7a9f1ce779b7e6f71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLNodeLaplacian::averageDownCoeffsToCoarseAmrLevel</definition>
        <argsstring>(int flev)</argsstring>
        <name>averageDownCoeffsToCoarseAmrLevel</name>
        <param>
          <type>int</type>
          <declname>flev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian.H" line="110" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian.cpp" bodystart="690" bodyend="701"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLNodeLaplacian_1aff6d8e0b4352ae92de5b24f380497820" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLNodeLaplacian::averageDownCoeffsSameAmrLevel</definition>
        <argsstring>(int amrlev)</argsstring>
        <name>averageDownCoeffsSameAmrLevel</name>
        <param>
          <type>int</type>
          <declname>amrlev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian.H" line="111" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian.cpp" bodystart="704" bodyend="760"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLNodeLaplacian_1a7f384a4902e067ed46689c129bb89809" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLNodeLaplacian::restrictInteriorNodes</definition>
        <argsstring>(int camrlev, MultiFab &amp;crhs, MultiFab &amp;frhs) const </argsstring>
        <name>restrictInteriorNodes</name>
        <param>
          <type>int</type>
          <declname>camrlev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>crhs</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>frhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian.H" line="113" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian.cpp" bodystart="1169" bodyend="1247"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLNodeLaplacian_1a22d0dde0a531705c3148cd4669f21ed3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLNodeLaplacian::FillBoundaryCoeff</definition>
        <argsstring>(MultiFab &amp;sigma, const Geometry &amp;geom)</argsstring>
        <name>FillBoundaryCoeff</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>sigma</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian.H" line="115" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian.cpp" bodystart="763" bodyend="786"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLNodeLaplacian_1a52ede5504eb690639637884661c1676a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLNodeLaplacian::buildStencil</definition>
        <argsstring>()</argsstring>
        <name>buildStencil</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian.H" line="117" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian.cpp" bodystart="789" bodyend="1003"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classamrex_1_1MLNodeLaplacian_1ad798a370022ba9766ddc8423c8c3cdf6" prot="private" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLNodeLaplacian::checkPoint</definition>
        <argsstring>(std::string const &amp;file_name) const final</argsstring>
        <name>checkPoint</name>
        <reimplements refid="classamrex_1_1MLLinOp_1a19f8f18b021a5b9caf959de14247bd92">checkPoint</reimplements>
        <param>
          <type>std::string const &amp;</type>
          <declname>file_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian.H" line="149" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian.cpp" bodystart="2391" bodyend="2473"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="5157">
        <label>amrex::MLNodeLinOp</label>
        <link refid="classamrex_1_1MLNodeLinOp"/>
        <childnode refid="5158" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5158">
        <label>amrex::MLLinOp</label>
        <link refid="classamrex_1_1MLLinOp"/>
      </node>
      <node id="5156">
        <label>amrex::MLNodeLaplacian</label>
        <link refid="classamrex_1_1MLNodeLaplacian"/>
        <childnode refid="5157" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="5194">
        <label>std::vector&lt; MPI_Status, std::allocator&lt; MPI_Status &gt; &gt;</label>
      </node>
      <node id="5174">
        <label>amrex::FabArrayBase::CacheStats</label>
        <link refid="structamrex_1_1FabArrayBase_1_1CacheStats"/>
        <childnode refid="5175" relation="usage">
          <edgelabel>name</edgelabel>
        </childnode>
      </node>
      <node id="5177">
        <label>amrex::FabArrayBase::FabArrayStats</label>
        <link refid="structamrex_1_1FabArrayBase_1_1FabArrayStats"/>
      </node>
      <node id="5187">
        <label>amrex::ArenaInfo</label>
        <link refid="structamrex_1_1ArenaInfo"/>
      </node>
      <node id="5170">
        <label>amrex::IntVect</label>
        <link refid="classamrex_1_1IntVect"/>
        <childnode refid="5170" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
      </node>
      <node id="5169">
        <label>Real</label>
      </node>
      <node id="5195">
        <label>amrex::Vector&lt; MPI_Request &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="5196" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5185">
        <label>amrex::DataAllocator</label>
        <link refid="structamrex_1_1DataAllocator"/>
        <childnode refid="5186" relation="usage">
          <edgelabel>m_arena</edgelabel>
        </childnode>
      </node>
      <node id="5203">
        <label>std::vector&lt; Array&lt; BCType, AMREX_SPACEDIM &gt;, std::allocator&lt; Array&lt; BCType, AMREX_SPACEDIM &gt; &gt; &gt;</label>
      </node>
      <node id="5189">
        <label>std::vector&lt; std::string, std::allocator&lt; std::string &gt; &gt;</label>
      </node>
      <node id="5186">
        <label>amrex::Arena</label>
        <link refid="classamrex_1_1Arena"/>
        <childnode refid="5187" relation="usage">
          <edgelabel>arena_info</edgelabel>
        </childnode>
      </node>
      <node id="5178">
        <label>amrex::Vector&lt; int &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="5179" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5175">
        <label>string</label>
      </node>
      <node id="5197">
        <label>amrex::Periodicity</label>
        <link refid="classamrex_1_1Periodicity"/>
        <childnode refid="5170" relation="usage">
          <edgelabel>period</edgelabel>
        </childnode>
      </node>
      <node id="5191">
        <label>std::vector&lt; char *, std::allocator&lt; char * &gt; &gt;</label>
      </node>
      <node id="5160">
        <label>amrex::MLNodeLinOp</label>
        <link refid="classamrex_1_1MLNodeLinOp"/>
        <childnode refid="5161" relation="public-inheritance">
        </childnode>
        <childnode refid="5171" relation="usage">
          <edgelabel>m_bottom_dot_mask</edgelabel>
          <edgelabel>m_coarse_dot_mask</edgelabel>
        </childnode>
        <childnode refid="5205" relation="usage">
          <edgelabel>m_nd_fine_mask</edgelabel>
          <edgelabel>m_cc_fine_mask</edgelabel>
        </childnode>
        <childnode refid="5207" relation="usage">
          <edgelabel>m_owner_mask</edgelabel>
          <edgelabel>m_dirichlet_mask</edgelabel>
        </childnode>
        <childnode refid="5209" relation="usage">
          <edgelabel>m_has_fine_bndry</edgelabel>
        </childnode>
      </node>
      <node id="5211">
        <label>amrex::Vector&lt; amrex::Vector&lt; Array&lt; std::unique_ptr&lt; amrex::MultiFab &gt;, AMREX_SPACEDIM &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="5212" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5199">
        <label>std::vector&lt; Array&lt; int, AMREX_SPACEDIM &gt;, std::allocator&lt; Array&lt; int, AMREX_SPACEDIM &gt; &gt; &gt;</label>
      </node>
      <node id="5164">
        <label>amrex::Vector&lt; amrex::Vector&lt; BoxArray &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="5165" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5190">
        <label>amrex::Vector&lt; char * &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="5191" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5162">
        <label>amrex::Vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::FabFactory&lt; amrex::FArrayBox &gt; &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="5163" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5167">
        <label>std::vector&lt; amrex::Vector&lt; amrex::Geometry &gt;, std::allocator&lt; amrex::Vector&lt; amrex::Geometry &gt; &gt; &gt;</label>
      </node>
      <node id="5192">
        <label>amrex::FabArray&lt; FAB &gt;::ShMem</label>
        <link refid="structamrex_1_1FabArray_1_1ShMem"/>
      </node>
      <node id="5214">
        <label>std::vector&lt; amrex::Vector&lt; Real &gt;, std::allocator&lt; amrex::Vector&lt; Real &gt; &gt; &gt;</label>
      </node>
      <node id="5166">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::Geometry &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="5167" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5210">
        <label>std::vector&lt; std::unique_ptr&lt; amrex::LayoutData&lt; int &gt; &gt;, std::allocator&lt; std::unique_ptr&lt; amrex::LayoutData&lt; int &gt; &gt; &gt; &gt;</label>
      </node>
      <node id="5168">
        <label>amrex::RealVect</label>
        <link refid="classamrex_1_1RealVect"/>
        <childnode refid="5168" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
        <childnode refid="5169" relation="usage">
          <edgelabel>vect</edgelabel>
        </childnode>
      </node>
      <node id="5215">
        <label>amrex::Vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::MultiFab &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="5216" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5200">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::DistributionMapping &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="5201" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5196">
        <label>std::vector&lt; MPI_Request, std::allocator&lt; MPI_Request &gt; &gt;</label>
      </node>
      <node id="5179">
        <label>std::vector&lt; int, std::allocator&lt; int &gt; &gt;</label>
      </node>
      <node id="5161">
        <label>amrex::MLLinOp</label>
        <link refid="classamrex_1_1MLLinOp"/>
        <childnode refid="5162" relation="usage">
          <edgelabel>m_factory</edgelabel>
        </childnode>
        <childnode refid="5164" relation="usage">
          <edgelabel>m_grids</edgelabel>
        </childnode>
        <childnode refid="5166" relation="usage">
          <edgelabel>m_geom</edgelabel>
        </childnode>
        <childnode refid="5168" relation="usage">
          <edgelabel>m_coarse_bc_loc</edgelabel>
        </childnode>
        <childnode refid="5170" relation="usage">
          <edgelabel>m_ixtype</edgelabel>
        </childnode>
        <childnode refid="5171" relation="usage">
          <edgelabel>m_coarse_data_for_bc</edgelabel>
        </childnode>
        <childnode refid="5178" relation="usage">
          <edgelabel>m_domain_covered</edgelabel>
          <edgelabel>m_amr_ref_ratio</edgelabel>
          <edgelabel>m_num_mg_levels</edgelabel>
        </childnode>
        <childnode refid="5198" relation="usage">
          <edgelabel>m_hi_inhomog_neumann</edgelabel>
          <edgelabel>m_lo_inhomog_neumann</edgelabel>
        </childnode>
        <childnode refid="5200" relation="usage">
          <edgelabel>m_dmap</edgelabel>
        </childnode>
        <childnode refid="5202" relation="usage">
          <edgelabel>m_hibc</edgelabel>
          <edgelabel>m_lobc</edgelabel>
        </childnode>
        <childnode refid="5161" relation="usage">
          <edgelabel>m_parent</edgelabel>
        </childnode>
        <childnode refid="5204" relation="usage">
          <edgelabel>info</edgelabel>
        </childnode>
      </node>
      <node id="5209">
        <label>amrex::Vector&lt; std::unique_ptr&lt; amrex::LayoutData&lt; int &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="5210" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5212">
        <label>std::vector&lt; amrex::Vector&lt; Array&lt; std::unique_ptr&lt; amrex::MultiFab &gt;, AMREX_SPACEDIM &gt; &gt;, std::allocator&lt; amrex::Vector&lt; Array&lt; std::unique_ptr&lt; amrex::MultiFab &gt;, AMREX_SPACEDIM &gt; &gt; &gt; &gt;</label>
      </node>
      <node id="5205">
        <label>amrex::Vector&lt; std::unique_ptr&lt; amrex::iMultiFab &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="5206" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5159">
        <label>amrex::MLNodeLaplacian</label>
        <link refid="classamrex_1_1MLNodeLaplacian"/>
        <childnode refid="5160" relation="public-inheritance">
        </childnode>
        <childnode refid="5211" relation="usage">
          <edgelabel>m_sigma</edgelabel>
        </childnode>
        <childnode refid="5213" relation="usage">
          <edgelabel>m_s0_norm0</edgelabel>
        </childnode>
        <childnode refid="5215" relation="usage">
          <edgelabel>m_stencil</edgelabel>
        </childnode>
        <childnode refid="5169" relation="usage">
          <edgelabel>m_normalization_threshold</edgelabel>
        </childnode>
      </node>
      <node id="5202">
        <label>amrex::Vector&lt; Array&lt; BCType, AMREX_SPACEDIM &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="5203" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5181">
        <label>amrex::DistributionMapping::RefID</label>
        <link refid="structamrex_1_1DistributionMapping_1_1RefID"/>
        <childnode refid="5182" relation="usage">
          <edgelabel>data</edgelabel>
        </childnode>
      </node>
      <node id="5193">
        <label>amrex::Vector&lt; MPI_Status &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="5194" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5204">
        <label>amrex::LPInfo</label>
        <link refid="structamrex_1_1LPInfo"/>
      </node>
      <node id="5182">
        <label>amrex::DistributionMapping::Ref</label>
        <link refid="structamrex_1_1DistributionMapping_1_1Ref"/>
        <childnode refid="5178" relation="usage">
          <edgelabel>m_index_array</edgelabel>
          <edgelabel>m_pmap</edgelabel>
        </childnode>
      </node>
      <node id="5188">
        <label>amrex::Vector&lt; std::string &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="5189" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5198">
        <label>amrex::Vector&lt; Array&lt; int, AMREX_SPACEDIM &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="5199" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5207">
        <label>amrex::Vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::iMultiFab &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="5208" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5176">
        <label>amrex::DistributionMapping</label>
        <link refid="classamrex_1_1DistributionMapping"/>
      </node>
      <node id="5180">
        <label>amrex::FabArrayBase::BDKey</label>
        <link refid="structamrex_1_1FabArrayBase_1_1BDKey"/>
        <childnode refid="5181" relation="usage">
          <edgelabel>m_dm_id</edgelabel>
        </childnode>
      </node>
      <node id="5216">
        <label>std::vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::MultiFab &gt; &gt;, std::allocator&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::MultiFab &gt; &gt; &gt; &gt;</label>
      </node>
      <node id="5171">
        <label>amrex::MultiFab</label>
        <link refid="classamrex_1_1MultiFab"/>
        <childnode refid="5172" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5206">
        <label>std::vector&lt; std::unique_ptr&lt; amrex::iMultiFab &gt;, std::allocator&lt; std::unique_ptr&lt; amrex::iMultiFab &gt; &gt; &gt;</label>
      </node>
      <node id="5172">
        <label>amrex::FabArray&lt; FArrayBox &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="5173" relation="public-inheritance">
        </childnode>
        <childnode refid="5183" relation="usage">
          <edgelabel>fb_recv_size</edgelabel>
        </childnode>
        <childnode refid="5170" relation="usage">
          <edgelabel>fb_nghost</edgelabel>
        </childnode>
        <childnode refid="5185" relation="usage">
          <edgelabel>m_dallocator</edgelabel>
        </childnode>
        <childnode refid="5178" relation="usage">
          <edgelabel>fb_recv_from</edgelabel>
        </childnode>
        <childnode refid="5188" relation="usage">
          <edgelabel>m_tags</edgelabel>
        </childnode>
        <childnode refid="5190" relation="usage">
          <edgelabel>fb_recv_data</edgelabel>
          <edgelabel>fb_send_data</edgelabel>
        </childnode>
        <childnode refid="5192" relation="usage">
          <edgelabel>shmem</edgelabel>
        </childnode>
        <childnode refid="5193" relation="usage">
          <edgelabel>fb_recv_stat</edgelabel>
        </childnode>
        <childnode refid="5195" relation="usage">
          <edgelabel>fb_send_reqs</edgelabel>
          <edgelabel>fb_recv_reqs</edgelabel>
        </childnode>
        <childnode refid="5197" relation="usage">
          <edgelabel>fb_period</edgelabel>
        </childnode>
      </node>
      <node id="5183">
        <label>amrex::Vector&lt; std::size_t &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="5184" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5213">
        <label>amrex::Vector&lt; amrex::Vector&lt; Real &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="5214" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5173">
        <label>amrex::FabArrayBase</label>
        <link refid="classamrex_1_1FabArrayBase"/>
        <childnode refid="5174" relation="usage">
          <edgelabel>m_FBC_stats</edgelabel>
          <edgelabel>m_FPinfo_stats</edgelabel>
          <edgelabel>m_CFinfo_stats</edgelabel>
          <edgelabel>m_TAC_stats</edgelabel>
          <edgelabel>m_CPC_stats</edgelabel>
        </childnode>
        <childnode refid="5176" relation="usage">
          <edgelabel>distributionMap</edgelabel>
        </childnode>
        <childnode refid="5170" relation="usage">
          <edgelabel>n_filled</edgelabel>
          <edgelabel>n_grow</edgelabel>
          <edgelabel>comm_tile_size</edgelabel>
          <edgelabel>mfiter_tile_size</edgelabel>
          <edgelabel>mfghostiter_tile_size</edgelabel>
        </childnode>
        <childnode refid="5177" relation="usage">
          <edgelabel>m_FA_stats</edgelabel>
        </childnode>
        <childnode refid="5178" relation="usage">
          <edgelabel>indexArray</edgelabel>
        </childnode>
        <childnode refid="5180" relation="usage">
          <edgelabel>m_bdkey</edgelabel>
        </childnode>
      </node>
      <node id="5208">
        <label>std::vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::iMultiFab &gt; &gt;, std::allocator&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::iMultiFab &gt; &gt; &gt; &gt;</label>
      </node>
      <node id="5184">
        <label>std::vector&lt; std::size_t, std::allocator&lt; std::size_t &gt; &gt;</label>
      </node>
      <node id="5165">
        <label>std::vector&lt; amrex::Vector&lt; BoxArray &gt;, std::allocator&lt; amrex::Vector&lt; BoxArray &gt; &gt; &gt;</label>
      </node>
      <node id="5201">
        <label>std::vector&lt; amrex::Vector&lt; amrex::DistributionMapping &gt;, std::allocator&lt; amrex::Vector&lt; amrex::DistributionMapping &gt; &gt; &gt;</label>
      </node>
      <node id="5163">
        <label>std::vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::FabFactory&lt; amrex::FArrayBox &gt; &gt; &gt;, std::allocator&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::FabFactory&lt; amrex::FArrayBox &gt; &gt; &gt; &gt; &gt;</label>
      </node>
    </collaborationgraph>
    <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian.H" line="13" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian.H" bodystart="11" bodyend="150"/>
    <listofallmembers>
      <member refid="classamrex_1_1MLLinOp_1a8effbacb86233a5334789092372a9bde" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>AMRRefRatio</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac80a224852d40e9dd01ef9e4d52cd1c9" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>AMRRefRatio</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a668c3faa79d094f72e351a8ec1736fc2" prot="public" virt="virtual"><scope>amrex::MLNodeLaplacian</scope><name>apply</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a0ab8d8d842032e19132903b007771953" prot="public" virt="virtual"><scope>amrex::MLNodeLaplacian</scope><name>applyBC</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a79b6bca7f31b09333bc7caae80d39136" prot="public" virt="virtual"><scope>amrex::MLNodeLaplacian</scope><name>applyInhomogNeumannTerm</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a7e5c287fd5bd6078ccc3afc7e18fd69a" prot="public" virt="virtual"><scope>amrex::MLNodeLaplacian</scope><name>applyMetricTerm</name></member>
      <member refid="classamrex_1_1MLNodeLaplacian_1aca10dcca4922ff74faf8f26263cbed7e" prot="public" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>averageDownCoeffs</name></member>
      <member refid="classamrex_1_1MLNodeLaplacian_1aff6d8e0b4352ae92de5b24f380497820" prot="public" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>averageDownCoeffsSameAmrLevel</name></member>
      <member refid="classamrex_1_1MLNodeLaplacian_1ae306b7b6eb65f5d7a9f1ce779b7e6f71" prot="public" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>averageDownCoeffsToCoarseAmrLevel</name></member>
      <member refid="classamrex_1_1MLNodeLaplacian_1a1f56925dec0934532aaaf4dd1c6c7c42" prot="public" virt="virtual"><scope>amrex::MLNodeLaplacian</scope><name>averageDownSolutionRHS</name></member>
      <member refid="classamrex_1_1MLLinOp_1a5aa01a1ef6b0b3a471f02f65ae4b4884" prot="public" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>BCMode</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac2e55c34bf6b5c0ed53d0ef6a4625a3f" prot="public" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>BCType</name></member>
      <member refid="classamrex_1_1MLLinOp_1a77b33530b316399f5fb5314a846d9b7e" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>BottomCommunicator</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1aa43fb0696cb5782669c8ee368b743099" prot="public" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>buildMasks</name></member>
      <member refid="classamrex_1_1MLNodeLaplacian_1a52ede5504eb690639637884661c1676a" prot="public" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>buildStencil</name></member>
      <member refid="classamrex_1_1MLNodeLaplacian_1ad798a370022ba9766ddc8423c8c3cdf6" prot="private" virt="virtual"><scope>amrex::MLNodeLaplacian</scope><name>checkPoint</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a2ddc20eaca70aaa6da5935648ce06a82" prot="public" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>CoarseningStrategy</name></member>
      <member refid="classamrex_1_1MLLinOp_1a941ddfa6ec11cbd0a1c835007494b057" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>Communicator</name></member>
      <member refid="classamrex_1_1MLNodeLaplacian_1adb3e623e86459b1e9a9c14492961d759" prot="public" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>compDivergence</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1afe48a02e5be6dd3beac70271de7a02da" prot="public" virt="virtual"><scope>amrex::MLNodeLaplacian</scope><name>compFlux</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a264af834600d85a8773131c87ccfeb1b" prot="public" virt="virtual"><scope>amrex::MLNodeLaplacian</scope><name>compGrad</name></member>
      <member refid="classamrex_1_1MLNodeLaplacian_1a59c04abe13cccca82379bbcac19a5467" prot="public" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>compRHS</name></member>
      <member refid="classamrex_1_1MLNodeLaplacian_1afc701712c658d0f67bef6a07bbf323b9" prot="public" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>compSyncResidualCoarse</name></member>
      <member refid="classamrex_1_1MLNodeLaplacian_1a44e85cef12a5b759e5a52e64cc9f2c3d" prot="public" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>compSyncResidualFine</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a2018b943fdab7019461dc9580b04177c" prot="public" virt="virtual"><scope>amrex::MLNodeLaplacian</scope><name>correctionResidual</name></member>
      <member refid="classamrex_1_1MLNodeLaplacian_1a44df7f1f221968bec24958304cf947f6" prot="public" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>define</name></member>
      <member refid="classamrex_1_1MLLinOp_1aa0ba245918a01db26fdc8289b4e4ed29" prot="public" virt="non-virtual" ambiguityscope="amrex::MLLinOp::"><scope>amrex::MLNodeLaplacian</scope><name>define</name></member>
      <member refid="classamrex_1_1MLLinOp_1a355691d7877fb9a9aabc65db76d0f2b4" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>doAgglomeration</name></member>
      <member refid="classamrex_1_1MLLinOp_1a79f98e0cf06f695dbad6052c5d53e00b" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>doConsolidation</name></member>
      <member refid="classamrex_1_1MLLinOp_1a0eb75c39ff8e715b524d79442b83a3fb" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>Factory</name></member>
      <member refid="classamrex_1_1MLNodeLaplacian_1a94ccd77c0c9e232e20b5e68d785d2dee" prot="public" virt="virtual"><scope>amrex::MLNodeLaplacian</scope><name>Fapply</name></member>
      <member refid="classamrex_1_1MLNodeLaplacian_1a22d0dde0a531705c3148cd4669f21ed3" prot="public" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>FillBoundaryCoeff</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1af31692542848e1defea74b813d801a81" prot="public" virt="virtual"><scope>amrex::MLNodeLaplacian</scope><name>fillSolutionBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1ad00407760d4927438c355ba115aaad4e" prot="public" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>Finalize</name></member>
      <member refid="classamrex_1_1MLNodeLaplacian_1a1156c6a363950889ca5e456aed6187b7" prot="public" virt="virtual"><scope>amrex::MLNodeLaplacian</scope><name>fixUpResidualMask</name></member>
      <member refid="classamrex_1_1MLNodeLaplacian_1af52c5a037979e4b1a7da5201868af61a" prot="public" virt="virtual"><scope>amrex::MLNodeLaplacian</scope><name>Fsmooth</name></member>
      <member refid="classamrex_1_1MLLinOp_1a7b1da16499dc7b95e807a28757e0c094" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>Geom</name></member>
      <member refid="classamrex_1_1MLNodeLaplacian_1af6d2be33c0d71092e0231e878c6b7cd9" prot="public" virt="virtual"><scope>amrex::MLNodeLaplacian</scope><name>getDefaultBottomSolver</name></member>
      <member refid="classamrex_1_1MLNodeLaplacian_1aa2876f1b621f23109c9da02a9e7f383a" prot="public" virt="virtual"><scope>amrex::MLNodeLaplacian</scope><name>getFluxes</name></member>
      <member refid="classamrex_1_1MLNodeLaplacian_1ace1773b3f7fa41c2c6af25fae9c5de6b" prot="public" virt="virtual"><scope>amrex::MLNodeLaplacian</scope><name>getFluxes</name></member>
      <member refid="classamrex_1_1MLLinOp_1a1189e4016e7757083343a93649f102aa" prot="public" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>getMaxOrder</name></member>
      <member refid="classamrex_1_1MLLinOp_1acd287b03ea1a73f47ba1f08bb10a484d" prot="public" virt="virtual"><scope>amrex::MLNodeLaplacian</scope><name>getNComp</name></member>
      <member refid="classamrex_1_1MLLinOp_1a10e3ecd56636236ea6c1c219630bf79b" prot="public" virt="virtual"><scope>amrex::MLNodeLaplacian</scope><name>getNGrow</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac313a2de49bd67c23fad23d5c4045e70" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>HiBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1a85fa2f104bbfeaa73d55d589906ecd45" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>info</name></member>
      <member refid="classamrex_1_1MLLinOp_1a48b2fe73722eee0a1d50b6e0b9558174" prot="public" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>Initialize</name></member>
      <member refid="classamrex_1_1MLNodeLaplacian_1a44f3d04638b6cde86deb3520faafcac5" prot="public" virt="virtual"><scope>amrex::MLNodeLaplacian</scope><name>interpolation</name></member>
      <member refid="classamrex_1_1MLLinOp_1aa1c6883eef4d4dc55d3a5fe5c921113a" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>isBottomActive</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a5ebdba6239eb393431835a2f2ad724df" prot="public" virt="virtual"><scope>amrex::MLNodeLaplacian</scope><name>isBottomSingular</name></member>
      <member refid="classamrex_1_1MLLinOp_1aa42fd2dfa3b0133f2b20a99026549900" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>isCellCentered</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a18804aba43a14c7ffea9b6bc3f3179ba" prot="public" virt="virtual"><scope>amrex::MLNodeLaplacian</scope><name>isSingular</name></member>
      <member refid="classamrex_1_1MLLinOp_1a7ef6c8434223ac6e052359cd4f27fbe6" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>LoBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1a07cd0a7c45d6542e33a5d97aefe5bab3" prot="public" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>Location</name></member>
      <member refid="classamrex_1_1MLLinOp_1a42ca524eb4deca1132be683805d2d7ab" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>m_amr_ref_ratio</name></member>
      <member refid="classamrex_1_1MLLinOp_1a06ea1608702e52d38c0eceaa180bad7e" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>m_bottom_comm</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a4b398a735f5c05d0919bc24efc9a7025" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>m_bottom_dot_mask</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a91c9e98ef8edd4106aace72a6c7a4294" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>m_cc_fine_mask</name></member>
      <member refid="classamrex_1_1MLLinOp_1abc7e6e6252f9ecc63c86dcbd99250e10" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>m_coarse_bc_loc</name></member>
      <member refid="classamrex_1_1MLLinOp_1a1ca01453776c12e634debdc6d09206c3" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>m_coarse_data_crse_ratio</name></member>
      <member refid="classamrex_1_1MLLinOp_1ad1382ee007387f65075acda2f46866f2" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>m_coarse_data_for_bc</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a117db04aae22221b83130cff6e6fdb52" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>m_coarse_dot_mask</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1af4d1bfea4dae502fae40e6b71fd4deae" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>m_coarsening_strategy</name></member>
      <member refid="classamrex_1_1MLLinOp_1addb42fac68158f49c2508cf47d3b8d9d" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>m_default_comm</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1aaa52abefe4405ee59158a27c112ccfa9" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>m_dirichlet_mask</name></member>
      <member refid="classamrex_1_1MLLinOp_1a80552ba3fc7cdd6bb00739c66327ae2c" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>m_dmap</name></member>
      <member refid="classamrex_1_1MLLinOp_1a19bf5f2d76877e5f5777e5c44d290648" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>m_do_agglomeration</name></member>
      <member refid="classamrex_1_1MLLinOp_1a488b6dd5c1bfecef948b543bfa7e5154" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>m_do_consolidation</name></member>
      <member refid="classamrex_1_1MLLinOp_1a700409c91ec909489e19c53e601de053" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>m_domain_bloc_hi</name></member>
      <member refid="classamrex_1_1MLLinOp_1a0fd156d093aacd959e78666105ed6328" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>m_domain_bloc_lo</name></member>
      <member refid="classamrex_1_1MLLinOp_1aaba23614888f937956554945e6a2a5a0" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>m_domain_covered</name></member>
      <member refid="classamrex_1_1MLLinOp_1aca26a5ef5d68cae3dcabea0a5d8c2493" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>m_factory</name></member>
      <member refid="classamrex_1_1MLLinOp_1ab16551403ee1629e20ed6e6d9d4f680c" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>m_geom</name></member>
      <member refid="classamrex_1_1MLLinOp_1a3f9b0a7c3a91ca7e13664dbfe7115eed" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>m_grids</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a76a73246b9e7679b93591f2093a857c3" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>m_has_fine_bndry</name></member>
      <member refid="classamrex_1_1MLLinOp_1a885bd2d76204604e07a5ce06e92da271" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>m_hi_inhomog_neumann</name></member>
      <member refid="classamrex_1_1MLLinOp_1a619323b7ef2de7c06f7c480c9bcdf3d2" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>m_hibc</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a51345471274acc0bdd0b5477285d4db1" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>m_is_bottom_singular</name></member>
      <member refid="classamrex_1_1MLNodeLaplacian_1a6e9813d42ab7f38861a4b0a0d88f6080" prot="private" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>m_is_rz</name></member>
      <member refid="classamrex_1_1MLLinOp_1a1422f7b22ae204247f5cdf20ab70e741" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>m_ixtype</name></member>
      <member refid="classamrex_1_1MLLinOp_1aa91c1d6bf82658c8668b2ffcfa5ab4f1" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>m_lo_inhomog_neumann</name></member>
      <member refid="classamrex_1_1MLLinOp_1aac661e9e03991a16c7aca157ca2447b0" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>m_lobc</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a2bb5e031c87b6bdf67618f9c25dc6945" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>m_masks_built</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a034b72948cecb00630515b6a2de77109" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>m_nd_fine_mask</name></member>
      <member refid="classamrex_1_1MLLinOp_1aa53a765aea0ed0c4e7410d147380079f" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>m_needs_coarse_data_for_bc</name></member>
      <member refid="classamrex_1_1MLNodeLaplacian_1a0797df73e7c6a1283fd31748aa6f12e5" prot="private" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>m_normalization_threshold</name></member>
      <member refid="classamrex_1_1MLLinOp_1ad6bbf49c1bdb88256721471b22b4b044" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>m_num_amr_levels</name></member>
      <member refid="classamrex_1_1MLLinOp_1ababf1d5df3da022563dc90ee2c81ad75" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>m_num_mg_levels</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a7c0bb3eeb87e33f76c055d78e1e68df2" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>m_overset_dirichlet_mask</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a192598f12e56d51e8f952913e8fdf72c" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>m_owner_mask</name></member>
      <member refid="classamrex_1_1MLLinOp_1a614164d6c8e680ccb5ac8fb9cf1558ed" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>m_parent</name></member>
      <member refid="classamrex_1_1MLLinOp_1a2faeb23bc1e93e2b0cd693cb94a18d08" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>m_raii_comm</name></member>
      <member refid="classamrex_1_1MLNodeLaplacian_1a587789b33e8a1da29ce868daeb003995" prot="private" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>m_s0_norm0</name></member>
      <member refid="classamrex_1_1MLNodeLaplacian_1a8a183b518f95b79420fa95a4400b3a4f" prot="private" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>m_sigma</name></member>
      <member refid="classamrex_1_1MLNodeLaplacian_1ae971fa5b7d9a948b3b8b778bb9540064" prot="private" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>m_stencil</name></member>
      <member refid="classamrex_1_1MLNodeLaplacian_1a1dd0f2250ddf96f66c4163f0f99e1f1d" prot="private" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>m_use_gauss_seidel</name></member>
      <member refid="classamrex_1_1MLNodeLaplacian_1ac1b3d5d3a2cde86e476ffb95f17b0fef" prot="private" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>m_use_harmonic_average</name></member>
      <member refid="classamrex_1_1MLLinOp_1a6249249666804079176507b88626a72c" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>make</name></member>
      <member refid="classamrex_1_1MLLinOp_1af58f71c827253ca415f218f6cf77f1fb" prot="protected" virt="virtual"><scope>amrex::MLNodeLaplacian</scope><name>makeFactory</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a5fffb41bbd6d2ee5cf4454e0e3768898" prot="public" virt="virtual"><scope>amrex::MLNodeLaplacian</scope><name>makeNLinOp</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1ae050e4fda0843b175da8fbcfb8462392" prot="public" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>makeOwnerMask</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac516dba583aede117f89e339423f6114" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>maxorder</name></member>
      <member refid="classamrex_1_1MLLinOp_1ae871a991ef83c33044a22db383c76dcd" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>mg_box_min_width</name></member>
      <member refid="classamrex_1_1MLLinOp_1aaa5616982aef27c68c5ae5544092c7db" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>mg_coarsen_ratio</name></member>
      <member refid="classamrex_1_1MLLinOp_1a3ea5c2611e98234737157e36bae6c343" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>mg_domain_min_width</name></member>
      <member refid="classamrex_1_1MLLinOp_1a2a75b94dc22faffec8a686f91fbfc9c1" prot="public" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>MLLinOp</name></member>
      <member refid="classamrex_1_1MLLinOp_1a7dd2c530e984f58e5a04cc415e9a539b" prot="public" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>MLLinOp</name></member>
      <member refid="classamrex_1_1MLLinOp_1a69fbc0ca95c18b6e954c53abb41c885c" prot="public" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>MLLinOp</name></member>
      <member refid="classamrex_1_1MLNodeLaplacian_1ac394ddffb9ed6a17dec6b50db0f7275a" prot="public" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>MLNodeLaplacian</name></member>
      <member refid="classamrex_1_1MLNodeLaplacian_1af834bec998e77e019a9bb511ca9b7da0" prot="public" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>MLNodeLaplacian</name></member>
      <member refid="classamrex_1_1MLNodeLaplacian_1a3e118d417a65df672755dedb1623fe06" prot="public" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>MLNodeLaplacian</name></member>
      <member refid="classamrex_1_1MLNodeLaplacian_1a9b935f6c3fd7cdb7d702502ffbabc275" prot="public" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>MLNodeLaplacian</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1aaf264472c0b70b5588a04b930fbcd8ff" prot="public" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>MLNodeLinOp</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a712873309064abf30aafcb2d277890fb" prot="public" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>MLNodeLinOp</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a02892864c3a177a34cc38d3d55a972fd" prot="public" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>MLNodeLinOp</name></member>
      <member refid="classamrex_1_1MLNodeLaplacian_1aec78f58fa749e98da726f5a64e91874a" prot="public" virt="virtual"><scope>amrex::MLNodeLaplacian</scope><name>name</name></member>
      <member refid="classamrex_1_1MLLinOp_1adcfe0a91f9b85388c17eee6172f02975" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>NAMRLevels</name></member>
      <member refid="classamrex_1_1MLLinOp_1a0c150481b635dccaf83cfff3d38b11c7" prot="public" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>needsCoarseDataForBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1ab68d7b11273242e632c9f8a422c911d7" prot="public" virt="virtual"><scope>amrex::MLNodeLaplacian</scope><name>needsUpdate</name></member>
      <member refid="classamrex_1_1MLLinOp_1a257d196611ba0ab9d861dc5e0dc23502" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>NMGLevels</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a0e91f952317f3b9bfb4c20bb68624e1b" prot="public" virt="virtual"><scope>amrex::MLNodeLaplacian</scope><name>nodalSync</name></member>
      <member refid="classamrex_1_1MLNodeLaplacian_1aae5e2a5876ca539035a6cee8fa025c29" prot="public" virt="virtual"><scope>amrex::MLNodeLaplacian</scope><name>normalize</name></member>
      <member refid="classamrex_1_1MLNodeLaplacian_1af5fc5382f4bff5cbeec42c320d033b77" prot="public" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLNodeLaplacian_1a2f0797012b11f58024e0789f7acc26dc" prot="public" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a1f11eab31e2487056a5befd79c8a22a0" prot="public" virt="non-virtual" ambiguityscope="amrex::MLNodeLinOp::"><scope>amrex::MLNodeLaplacian</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a8dcf3f92d3ef1932e03ad470e29d1517" prot="public" virt="non-virtual" ambiguityscope="amrex::MLNodeLinOp::"><scope>amrex::MLNodeLaplacian</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLLinOp_1ad163e1fa25935bce528783de5adb6b1a" prot="public" virt="non-virtual" ambiguityscope="amrex::MLLinOp::"><scope>amrex::MLNodeLaplacian</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLLinOp_1aec2118e27e9938788a89f5dda28709f7" prot="public" virt="non-virtual" ambiguityscope="amrex::MLLinOp::"><scope>amrex::MLNodeLaplacian</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLNodeLaplacian_1ae2134173a1bd7b925000e8072a87082f" prot="public" virt="virtual"><scope>amrex::MLNodeLaplacian</scope><name>prepareForSolve</name></member>
      <member refid="classamrex_1_1MLNodeLaplacian_1aa16d5801347ae1d56216e72cbe4da5ae" prot="public" virt="virtual"><scope>amrex::MLNodeLaplacian</scope><name>reflux</name></member>
      <member refid="classamrex_1_1MLNodeLaplacian_1a7f384a4902e067ed46689c129bb89809" prot="public" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>restrictInteriorNodes</name></member>
      <member refid="classamrex_1_1MLNodeLaplacian_1a049861a9a5c04611f13be0978ebb6232" prot="public" virt="virtual"><scope>amrex::MLNodeLaplacian</scope><name>restriction</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac161f1d53e925b82ba5defeb9b0efe70" prot="public" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>setCoarseFineBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac0c0882eb6092218dc09c5d60555ffed" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>setCoarseFineBCLocation</name></member>
      <member refid="classamrex_1_1MLNodeLaplacian_1af44fe2628228f69789874df4dbcab755" prot="public" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>setCoarseningStrategy</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1ac1af7651e37b6f38c778ad960b422fb7" prot="public" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>setDirichletMask</name></member>
      <member refid="classamrex_1_1MLLinOp_1aa034da35bd05e1fb93b8d876a9840ce3" prot="public" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>setDomainBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1a2402e6343df20087a51fb653a147987d" prot="public" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>setDomainBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1aeb7f6e87ab86b49cc97a248b4240d600" prot="public" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>setDomainBCLoc</name></member>
      <member refid="classamrex_1_1MLNodeLaplacian_1aaa74c5ed1094317d719bffbe89f016c9" prot="public" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>setGaussSeidel</name></member>
      <member refid="classamrex_1_1MLNodeLaplacian_1a2d7beea7bc93f71c8970977613d2ff08" prot="public" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>setHarmonicAverage</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a15e11c647b57a19a393a2ca6a323a85a" prot="public" virt="virtual"><scope>amrex::MLNodeLaplacian</scope><name>setLevelBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1a45b72169ccf285c17f439c4e990c0f58" prot="public" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>setMaxOrder</name></member>
      <member refid="classamrex_1_1MLNodeLaplacian_1a5184c0395e2b615863f958c9a057f6d2" prot="public" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>setNormalizationThreshold</name></member>
      <member refid="classamrex_1_1MLNodeLaplacian_1ad6fc7d27c22cd096b77b9bb7d2b4f66d" prot="public" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>setRZCorrection</name></member>
      <member refid="classamrex_1_1MLNodeLaplacian_1a4cbcb13e082363d597268b6523f72470" prot="public" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>setSigma</name></member>
      <member refid="classamrex_1_1MLLinOp_1a4d96a0475759eef80d096851fdedd411" prot="public" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>setVerbose</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a049936d38ba7f07adcf9c435849bca64" prot="public" virt="virtual"><scope>amrex::MLNodeLaplacian</scope><name>smooth</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a9577a87ff76e6c9406e3cbe716d26746" prot="public" virt="virtual"><scope>amrex::MLNodeLaplacian</scope><name>solutionResidual</name></member>
      <member refid="classamrex_1_1MLLinOp_1a1f2821b4a51da49d862dae1e757bb8c3" prot="public" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>StateMode</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a700bdd6e43250739cc3f571b94b81688" prot="public" virt="virtual"><scope>amrex::MLNodeLaplacian</scope><name>unapplyMetricTerm</name></member>
      <member refid="classamrex_1_1MLNodeLaplacian_1a35200d609bde84407b7e54dfd8b53f92" prot="public" virt="virtual"><scope>amrex::MLNodeLaplacian</scope><name>unimposeNeumannBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1ad5afb08b77db92744e5e7f7f02e5c83b" prot="public" virt="virtual"><scope>amrex::MLNodeLaplacian</scope><name>update</name></member>
      <member refid="classamrex_1_1MLNodeLaplacian_1aec4af1f3dc974b684560e6483befdc60" prot="public" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>updateVelocity</name></member>
      <member refid="classamrex_1_1MLLinOp_1a0815357130e78962e01abdaba2b09c21" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLaplacian</scope><name>verbose</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1ab1e7a8ff6a4f712576a8eff0baef1772" prot="public" virt="virtual"><scope>amrex::MLNodeLaplacian</scope><name>xdoty</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac6793724d6b5c98581d42d9233fda1bd" prot="public" virt="virtual"><scope>amrex::MLNodeLaplacian</scope><name>~MLLinOp</name></member>
      <member refid="classamrex_1_1MLNodeLaplacian_1aeba4557ed8cd5a660c5925f4ebc0e271" prot="public" virt="virtual"><scope>amrex::MLNodeLaplacian</scope><name>~MLNodeLaplacian</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a07faf757bcc476afe8bf3b88997d3039" prot="public" virt="virtual"><scope>amrex::MLNodeLaplacian</scope><name>~MLNodeLinOp</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
