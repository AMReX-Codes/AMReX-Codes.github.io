<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classamrex_1_1MLEBTensorOp" kind="class" language="C++" prot="public">
    <compoundname>amrex::MLEBTensorOp</compoundname>
    <basecompoundref refid="classamrex_1_1MLEBABecLap" prot="public" virt="non-virtual">amrex::MLEBABecLap</basecompoundref>
    <includes refid="AMReX__MLEBTensorOp_8H" local="no">AMReX_MLEBTensorOp.H</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classamrex_1_1MLEBTensorOp_1a15abc2cecf258e0967f5803ef5c5729e" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::MLEBTensorOp::m_needs_update</definition>
        <argsstring></argsstring>
        <name>m_needs_update</name>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="90" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLEBTensorOp_1a1ac24f61712e93b25ebcd55639f30ce2" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::MLEBTensorOp::m_has_kappa</definition>
        <argsstring></argsstring>
        <name>m_has_kappa</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="92" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLEBTensorOp_1aed368e6d9fa6a5cb5b193e4368d39cb7" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::MLEBTensorOp::m_has_eb_kappa</definition>
        <argsstring></argsstring>
        <name>m_has_eb_kappa</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="93" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLEBTensorOp_1af91981f116ef858b2bc4778b53fc575f" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>, 3 &gt; &gt; &gt;</type>
        <definition>Vector&lt;Vector&lt;Array&lt;MultiFab,3&gt; &gt; &gt; amrex::MLEBTensorOp::m_kappa</definition>
        <argsstring></argsstring>
        <name>m_kappa</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="94" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLEBTensorOp_1aa52b74715e6fd800ad391684b5a2321b" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &gt; &gt;</type>
        <definition>Vector&lt;Vector&lt;MultiFab&gt; &gt; amrex::MLEBTensorOp::m_eb_kappa</definition>
        <argsstring></argsstring>
        <name>m_eb_kappa</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="95" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLEBTensorOp_1a921cc1fd7db333aeca73b00f0530d44e" prot="protected" static="no" mutable="yes">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>, 3 &gt; &gt; &gt;</type>
        <definition>Vector&lt;Vector&lt;Array&lt;MultiFab,3&gt; &gt; &gt; amrex::MLEBTensorOp::m_tauflux</definition>
        <argsstring></argsstring>
        <name>m_tauflux</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="96" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" bodystart="96" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1MLEBTensorOp_1adccad5fb53a52c9b7227847cfc4a636d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MLEBTensorOp::MLEBTensorOp</definition>
        <argsstring>()</argsstring>
        <name>MLEBTensorOp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="31" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.cpp" bodystart="14" bodyend="17"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBTensorOp_1a4f997af4135dcb79775a5d7f7ac3b678" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MLEBTensorOp::MLEBTensorOp</definition>
        <argsstring>(const Vector&lt; Geometry &gt; &amp;a_geom, const Vector&lt; BoxArray &gt; &amp;a_grids, const Vector&lt; DistributionMapping &gt; &amp;a_dmap, const LPInfo &amp;a_info, const Vector&lt; EBFArrayBoxFactory const * &gt; &amp;a_factory)</argsstring>
        <name>MLEBTensorOp</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>a_geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &gt; &amp;</type>
          <declname>a_grids</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt; &amp;</type>
          <declname>a_dmap</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1LPInfo" kindref="compound">LPInfo</ref> &amp;</type>
          <declname>a_info</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1EBFArrayBoxFactory" kindref="compound">EBFArrayBoxFactory</ref> const * &gt; &amp;</type>
          <declname>a_factory</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="32" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.cpp" bodystart="19" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBTensorOp_1a5efda34c10df7a5f5d4c738a60c04e9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>amrex::MLEBTensorOp::~MLEBTensorOp</definition>
        <argsstring>()</argsstring>
        <name>~MLEBTensorOp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="38" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.cpp" bodystart="29" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBTensorOp_1af0d70e756af559a4082443914b134b0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MLEBTensorOp::MLEBTensorOp</definition>
        <argsstring>(const MLEBTensorOp &amp;)=delete</argsstring>
        <name>MLEBTensorOp</name>
        <param>
          <type>const <ref refid="classamrex_1_1MLEBTensorOp" kindref="compound">MLEBTensorOp</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="40" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBTensorOp_1a16a15944a17ebe8341932a53483ef2b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MLEBTensorOp::MLEBTensorOp</definition>
        <argsstring>(MLEBTensorOp &amp;&amp;)=delete</argsstring>
        <name>MLEBTensorOp</name>
        <param>
          <type><ref refid="classamrex_1_1MLEBTensorOp" kindref="compound">MLEBTensorOp</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="41" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBTensorOp_1ac801f35a398c39c6ae9b42b1e6c29c7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1MLEBTensorOp" kindref="compound">MLEBTensorOp</ref> &amp;</type>
        <definition>MLEBTensorOp&amp; amrex::MLEBTensorOp::operator=</definition>
        <argsstring>(const MLEBTensorOp &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classamrex_1_1MLEBTensorOp" kindref="compound">MLEBTensorOp</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="42" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBTensorOp_1a8217ea65e778d2f86a2f059ec79a6474" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1MLEBTensorOp" kindref="compound">MLEBTensorOp</ref> &amp;</type>
        <definition>MLEBTensorOp&amp; amrex::MLEBTensorOp::operator=</definition>
        <argsstring>(MLEBTensorOp &amp;&amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1MLEBTensorOp" kindref="compound">MLEBTensorOp</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="43" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBTensorOp_1ac6b1462f39aa6a60a2bfd0cd6e687aee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLEBTensorOp::define</definition>
        <argsstring>(const Vector&lt; Geometry &gt; &amp;a_geom, const Vector&lt; BoxArray &gt; &amp;a_grids, const Vector&lt; DistributionMapping &gt; &amp;a_dmap, const LPInfo &amp;a_info, const Vector&lt; EBFArrayBoxFactory const * &gt; &amp;a_factory)</argsstring>
        <name>define</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>a_geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &gt; &amp;</type>
          <declname>a_grids</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt; &amp;</type>
          <declname>a_dmap</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1LPInfo" kindref="compound">LPInfo</ref> &amp;</type>
          <declname>a_info</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1EBFArrayBoxFactory" kindref="compound">EBFArrayBoxFactory</ref> const * &gt; &amp;</type>
          <declname>a_factory</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="45" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.cpp" bodystart="33" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBTensorOp_1a5f0ab748bd6113cdf149b780c7ce9ee3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLEBTensorOp::setShearViscosity</definition>
        <argsstring>(int amrlev, const Array&lt; MultiFab const *, 3 &gt; &amp;eta, Location a_beta_loc)</argsstring>
        <name>setShearViscosity</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> const *, 3 &gt; &amp;</type>
          <declname>eta</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLLinOp_1a07cd0a7c45d6542e33a5d97aefe5bab3" kindref="member">Location</ref></type>
          <declname>a_beta_loc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="51" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.cpp" bodystart="75" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBTensorOp_1a514d2b861724430a7a0d3182bbf26d06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLEBTensorOp::setShearViscosity</definition>
        <argsstring>(int amrlev, Real eta)</argsstring>
        <name>setShearViscosity</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>eta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="53" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.cpp" bodystart="82" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBTensorOp_1a8ce45e8e9445e3007f43af125bd9c821" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLEBTensorOp::setBulkViscosity</definition>
        <argsstring>(int amrlev, const Array&lt; MultiFab const *, 3 &gt; &amp;kappa)</argsstring>
        <name>setBulkViscosity</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> const *, 3 &gt; &amp;</type>
          <declname>kappa</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="55" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.cpp" bodystart="88" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBTensorOp_1a0e7d54919f40ee816e333ba1d531ecb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLEBTensorOp::setBulkViscosity</definition>
        <argsstring>(int amrlev, Real kappa)</argsstring>
        <name>setBulkViscosity</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>kappa</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="56" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.cpp" bodystart="97" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBTensorOp_1a7c8d573df03c82ad4c1bbb8cec38f6aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLEBTensorOp::setEBShearViscosity</definition>
        <argsstring>(int amrlev, MultiFab const &amp;eta)</argsstring>
        <name>setEBShearViscosity</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> const &amp;</type>
          <declname>eta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="58" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.cpp" bodystart="106" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBTensorOp_1a95ede9e3771119992924c74dbbd6a83d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLEBTensorOp::setEBShearViscosity</definition>
        <argsstring>(int amrlev, Real eta)</argsstring>
        <name>setEBShearViscosity</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>eta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="59" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.cpp" bodystart="112" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBTensorOp_1a3aa0e1f0a27c29c4cf2f73d97c19e6b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLEBTensorOp::setEBBulkViscosity</definition>
        <argsstring>(int amrlev, MultiFab const &amp;kappa)</argsstring>
        <name>setEBBulkViscosity</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> const &amp;</type>
          <declname>kappa</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="61" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.cpp" bodystart="118" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBTensorOp_1a60aa035c7f58be6547e1fc06c25b55ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLEBTensorOp::setEBBulkViscosity</definition>
        <argsstring>(int amrlev, Real eta)</argsstring>
        <name>setEBBulkViscosity</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>eta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="62" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.cpp" bodystart="125" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBTensorOp_1ad5e85d6b70f2ee501328d4ec5efb0771" prot="public" static="no" const="yes" explicit="no" inline="yes" final="yes" virt="virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>virtual int amrex::MLEBTensorOp::getNComp</definition>
        <argsstring>() const final override</argsstring>
        <name>getNComp</name>
        <reimplements refid="classamrex_1_1MLEBABecLap_1a2f6702ea1b79e9775bf8937f165ec6fd">getNComp</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="64" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" bodystart="64" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBTensorOp_1a6fd32c1815462061d634ad81818e348f" prot="public" static="no" const="yes" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool amrex::MLEBTensorOp::isCrossStencil</definition>
        <argsstring>() const final override</argsstring>
        <name>isCrossStencil</name>
        <reimplements refid="classamrex_1_1MLEBABecLap_1a8d6575333ae596ac283e95b748fb84b4">isCrossStencil</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="66" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" bodystart="66" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBTensorOp_1a89e3f55449f2d482de028071c240ec8c" prot="public" static="no" const="yes" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool amrex::MLEBTensorOp::isTensorOp</definition>
        <argsstring>() const final override</argsstring>
        <name>isTensorOp</name>
        <reimplements refid="classamrex_1_1MLCellLinOp_1a0152cd38e35f6a41dc3da2814b910f2b">isTensorOp</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="67" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" bodystart="67" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBTensorOp_1ab6dd50ea71733ee23625ef3fe6634d98" prot="public" static="no" const="yes" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool amrex::MLEBTensorOp::needsUpdate</definition>
        <argsstring>() const final override</argsstring>
        <name>needsUpdate</name>
        <reimplements refid="classamrex_1_1MLEBABecLap_1a248e016a259d04af443355f6340e0898">needsUpdate</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="69" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" bodystart="69" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBTensorOp_1a3c4aac7c4c8cec7458fd1b5b3ac8c3f4" prot="public" static="no" const="no" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex::MLEBTensorOp::update</definition>
        <argsstring>() final override</argsstring>
        <name>update</name>
        <reimplements refid="classamrex_1_1MLEBABecLap_1ad6b4be6cef1783fdb223e5aa7eb50343">update</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="72" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" bodystart="72" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBTensorOp_1adb58fe08c96787422aaf6449a03a76e8" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLEBTensorOp::prepareForSolve</definition>
        <argsstring>() final override</argsstring>
        <name>prepareForSolve</name>
        <reimplements refid="classamrex_1_1MLEBABecLap_1a10d9a42df59b0c48c0de0bc3a2b41cca">prepareForSolve</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="76" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.cpp" bodystart="134" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBTensorOp_1abe98c1ca87f919a66405ece51d590f07" prot="public" static="no" const="yes" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool amrex::MLEBTensorOp::isSingular</definition>
        <argsstring>(int) const final override</argsstring>
        <name>isSingular</name>
        <reimplements refid="classamrex_1_1MLEBABecLap_1accc281e18237ce18823e3a1a00cbbf01">isSingular</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="77" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" bodystart="77" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBTensorOp_1a82e9a304ae27837aa45c9215df9d2b15" prot="public" static="no" const="yes" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool amrex::MLEBTensorOp::isBottomSingular</definition>
        <argsstring>() const final override</argsstring>
        <name>isBottomSingular</name>
        <reimplements refid="classamrex_1_1MLEBABecLap_1a74d6ab8dcd6375bed793437c83271aaa">isBottomSingular</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="78" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" bodystart="78" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBTensorOp_1a492bdb86a17eff7aa7b01a99d68eefed" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLEBTensorOp::apply</definition>
        <argsstring>(int amrlev, int mglev, MultiFab &amp;out, MultiFab &amp;in, BCMode bc_mode, StateMode s_mode, const MLMGBndry *bndry=nullptr) const final override</argsstring>
        <name>apply</name>
        <reimplements refid="classamrex_1_1MLEBABecLap_1a8e392e42b5c238124145af83776d575a">apply</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLLinOp_1a5aa01a1ef6b0b3a471f02f65ae4b4884" kindref="member">BCMode</ref></type>
          <declname>bc_mode</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLLinOp_1a1f2821b4a51da49d862dae1e757bb8c3" kindref="member">StateMode</ref></type>
          <declname>s_mode</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MLMGBndry" kindref="compound">MLMGBndry</ref> *</type>
          <declname>bndry</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="80" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.cpp" bodystart="195" bodyend="276"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBTensorOp_1ae866b40b2b0e24432ac381546fa869a0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLEBTensorOp::compFlux</definition>
        <argsstring>(int amrlev, const Array&lt; MultiFab *, 3 &gt; &amp;fluxes, MultiFab &amp;sol, Location loc) const override</argsstring>
        <name>compFlux</name>
        <reimplements refid="classamrex_1_1MLCellLinOp_1ac3c3b7b4ee2a2c235cfed06d40db2949">compFlux</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *, 3 &gt; &amp;</type>
          <declname>fluxes</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLLinOp_1a07cd0a7c45d6542e33a5d97aefe5bab3" kindref="member">Location</ref></type>
          <declname>loc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="82" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.cpp" bodystart="395" bodyend="502"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBTensorOp_1a27075f423b7735b6d847198e1b8ce3f7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLEBTensorOp::compVelGrad</definition>
        <argsstring>(int amrlev, const Array&lt; MultiFab *, 3 &gt; &amp;fluxes, MultiFab &amp;sol, Location loc) const</argsstring>
        <name>compVelGrad</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *, 3 &gt; &amp;</type>
          <declname>fluxes</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLLinOp_1a07cd0a7c45d6542e33a5d97aefe5bab3" kindref="member">Location</ref></type>
          <declname>loc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="85" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.cpp" bodystart="505" bodyend="603"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBTensorOp_1a6cf6cb52bc1116d3bae93ea118d55096" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLEBTensorOp::applyBCTensor</definition>
        <argsstring>(int amrlev, int mglev, MultiFab &amp;vel, BCMode bc_mode, StateMode s_mode, const MLMGBndry *bndry) const</argsstring>
        <name>applyBCTensor</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLLinOp_1a5aa01a1ef6b0b3a471f02f65ae4b4884" kindref="member">BCMode</ref></type>
          <declname>bc_mode</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLLinOp_1a1f2821b4a51da49d862dae1e757bb8c3" kindref="member">StateMode</ref></type>
          <declname>s_mode</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MLMGBndry" kindref="compound">MLMGBndry</ref> *</type>
          <declname>bndry</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="105" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp_bc.cpp" bodystart="8" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBTensorOp_1a14c881c5002de907212e7a2803d88046" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLEBTensorOp::compCrossTerms</definition>
        <argsstring>(int amrlev, int mglev, MultiFab const &amp;mf) const</argsstring>
        <name>compCrossTerms</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> const &amp;</type>
          <declname>mf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="107" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.cpp" bodystart="279" bodyend="392"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classamrex_1_1MLEBTensorOp_1aac4737f755efe396ebaaaac9c3e64bc7" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLEBTensorOp::setBCoeffs</definition>
        <argsstring>(int amrlev, const Array&lt; MultiFab const *, 3 &gt; &amp;beta, Location a_beta_loc)=delete</argsstring>
        <name>setBCoeffs</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> const *, 3 &gt; &amp;</type>
          <declname>beta</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLLinOp_1a07cd0a7c45d6542e33a5d97aefe5bab3" kindref="member">Location</ref></type>
          <declname>a_beta_loc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="98" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBTensorOp_1a7f36dae9f70a37ded92faab9a89b4a52" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLEBTensorOp::setEBDirichlet</definition>
        <argsstring>(int amrlev, const MultiFab &amp;phi, const MultiFab &amp;beta)=delete</argsstring>
        <name>setEBDirichlet</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>beta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="100" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBTensorOp_1a4fd75863f9948f2fc1c82336088f1d51" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLEBTensorOp::setEBHomogDirichlet</definition>
        <argsstring>(int amrlev, const MultiFab &amp;beta)=delete</argsstring>
        <name>setEBHomogDirichlet</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>beta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="101" column="10"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>amrex::MLEBTensorOp</label>
        <link refid="classamrex_1_1MLEBTensorOp"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>amrex::MLEBABecLap</label>
        <link refid="classamrex_1_1MLEBABecLap"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>amrex::MLLinOp</label>
        <link refid="classamrex_1_1MLLinOp"/>
      </node>
      <node id="3">
        <label>amrex::MLCellABecLap</label>
        <link refid="classamrex_1_1MLCellABecLap"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>amrex::MLCellLinOp</label>
        <link refid="classamrex_1_1MLCellLinOp"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="30">
        <label>std::vector&lt; MPI_Status, std::allocator&lt; MPI_Status &gt; &gt;</label>
      </node>
      <node id="1">
        <label>amrex::MLEBTensorOp</label>
        <link refid="classamrex_1_1MLEBTensorOp"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="57" relation="usage">
          <edgelabel>m_eb_kappa</edgelabel>
        </childnode>
        <childnode refid="59" relation="usage">
          <edgelabel>m_kappa</edgelabel>
          <edgelabel>m_tauflux</edgelabel>
        </childnode>
      </node>
      <node id="21">
        <label>amrex::ArenaInfo</label>
        <link refid="structamrex_1_1ArenaInfo"/>
      </node>
      <node id="14">
        <label>amrex::IntVect</label>
        <link refid="classamrex_1_1IntVect"/>
        <childnode refid="14" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
      </node>
      <node id="37">
        <label>std::vector&lt; Array&lt; BCType, 3 &gt;, std::allocator&lt; Array&lt; BCType, 3 &gt; &gt; &gt;</label>
      </node>
      <node id="47">
        <label>amrex::Vector&lt; std::unique_ptr&lt; amrex::MultiFab &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="48" relation="public-inheritance">
        </childnode>
      </node>
      <node id="36">
        <label>amrex::Vector&lt; Array&lt; BCType, 3 &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="37" relation="public-inheritance">
        </childnode>
      </node>
      <node id="41">
        <label>amrex::Vector&lt; amrex::Vector&lt; Array&lt; amrex::MultiMask, 2 *3 &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="42" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11">
        <label>Real</label>
      </node>
      <node id="42">
        <label>std::vector&lt; amrex::Vector&lt; Array&lt; amrex::MultiMask, 2 *3 &gt; &gt;, std::allocator&lt; amrex::Vector&lt; Array&lt; amrex::MultiMask, 2 *3 &gt; &gt; &gt; &gt;</label>
      </node>
      <node id="31">
        <label>amrex::Vector&lt; MPI_Request &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="32" relation="public-inheritance">
        </childnode>
      </node>
      <node id="19">
        <label>amrex::DataAllocator</label>
        <link refid="structamrex_1_1DataAllocator"/>
        <childnode refid="20" relation="usage">
          <edgelabel>m_arena</edgelabel>
        </childnode>
      </node>
      <node id="58">
        <label>std::vector&lt; amrex::Vector&lt; amrex::MultiFab &gt;, std::allocator&lt; amrex::Vector&lt; amrex::MultiFab &gt; &gt; &gt;</label>
      </node>
      <node id="25">
        <label>std::vector&lt; std::string, std::allocator&lt; std::string &gt; &gt;</label>
      </node>
      <node id="12">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::BoxArray &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="13" relation="public-inheritance">
        </childnode>
      </node>
      <node id="13">
        <label>std::vector&lt; amrex::Vector&lt; amrex::BoxArray &gt;, std::allocator&lt; amrex::Vector&lt; amrex::BoxArray &gt; &gt; &gt;</label>
      </node>
      <node id="20">
        <label>amrex::Arena</label>
        <link refid="classamrex_1_1Arena"/>
        <childnode refid="21" relation="usage">
          <edgelabel>arena_info</edgelabel>
        </childnode>
      </node>
      <node id="22">
        <label>amrex::Vector&lt; int &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="23" relation="public-inheritance">
        </childnode>
      </node>
      <node id="33">
        <label>amrex::Periodicity</label>
        <link refid="classamrex_1_1Periodicity"/>
        <childnode refid="14" relation="usage">
          <edgelabel>period</edgelabel>
        </childnode>
      </node>
      <node id="27">
        <label>std::vector&lt; char *, std::allocator&lt; char * &gt; &gt;</label>
      </node>
      <node id="49">
        <label>amrex::Vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::MLCellLinOp::BndryCondLoc &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="50" relation="public-inheritance">
        </childnode>
      </node>
      <node id="50">
        <label>std::vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::MLCellLinOp::BndryCondLoc &gt; &gt;, std::allocator&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::MLCellLinOp::BndryCondLoc &gt; &gt; &gt; &gt;</label>
      </node>
      <node id="26">
        <label>amrex::Vector&lt; char * &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="27" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>amrex::Vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::FabFactory&lt; amrex::FArrayBox &gt; &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>std::vector&lt; amrex::Vector&lt; amrex::Geometry &gt;, std::allocator&lt; amrex::Vector&lt; amrex::Geometry &gt; &gt; &gt;</label>
      </node>
      <node id="28">
        <label>amrex::FabArray&lt; FAB &gt;::ShMem</label>
        <link refid="structamrex_1_1FabArray_1_1ShMem"/>
      </node>
      <node id="59">
        <label>amrex::Vector&lt; amrex::Vector&lt; Array&lt; amrex::MultiFab, 3 &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="60" relation="public-inheritance">
        </childnode>
      </node>
      <node id="52">
        <label>std::vector&lt; std::unique_ptr&lt; amrex::BndryRegister &gt;, std::allocator&lt; std::unique_ptr&lt; amrex::BndryRegister &gt; &gt; &gt;</label>
      </node>
      <node id="8">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::Geometry &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="9" relation="public-inheritance">
        </childnode>
      </node>
      <node id="43">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::BndryRegister &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="44" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>amrex::RealVect</label>
        <link refid="classamrex_1_1RealVect"/>
        <childnode refid="10" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>vect</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>amrex::MLEBABecLap</label>
        <link refid="classamrex_1_1MLEBABecLap"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="57" relation="usage">
          <edgelabel>m_a_coeffs</edgelabel>
        </childnode>
        <childnode refid="59" relation="usage">
          <edgelabel>m_b_coeffs</edgelabel>
        </childnode>
        <childnode refid="61" relation="usage">
          <edgelabel>m_cc_mask</edgelabel>
        </childnode>
        <childnode refid="22" relation="usage">
          <edgelabel>m_is_singular</edgelabel>
        </childnode>
        <childnode refid="47" relation="usage">
          <edgelabel>m_eb_phi</edgelabel>
        </childnode>
        <childnode refid="63" relation="usage">
          <edgelabel>m_eb_b_coeffs</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>m_a_scalar</edgelabel>
          <edgelabel>m_b_scalar</edgelabel>
        </childnode>
      </node>
      <node id="60">
        <label>std::vector&lt; amrex::Vector&lt; Array&lt; amrex::MultiFab, 3 &gt; &gt;, std::allocator&lt; amrex::Vector&lt; Array&lt; amrex::MultiFab, 3 &gt; &gt; &gt; &gt;</label>
      </node>
      <node id="63">
        <label>amrex::Vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::MultiFab &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="64" relation="public-inheritance">
        </childnode>
      </node>
      <node id="45">
        <label>amrex::Vector&lt; amrex::YAFluxRegister &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="46" relation="public-inheritance">
        </childnode>
      </node>
      <node id="34">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::DistributionMapping &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="35" relation="public-inheritance">
        </childnode>
      </node>
      <node id="46">
        <label>std::vector&lt; amrex::YAFluxRegister, std::allocator&lt; amrex::YAFluxRegister &gt; &gt;</label>
      </node>
      <node id="38">
        <label>amrex::Vector&lt; amrex::IntVect &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="39" relation="public-inheritance">
        </childnode>
      </node>
      <node id="48">
        <label>std::vector&lt; std::unique_ptr&lt; amrex::MultiFab &gt;, std::allocator&lt; std::unique_ptr&lt; amrex::MultiFab &gt; &gt; &gt;</label>
      </node>
      <node id="32">
        <label>std::vector&lt; MPI_Request, std::allocator&lt; MPI_Request &gt; &gt;</label>
      </node>
      <node id="23">
        <label>std::vector&lt; int, std::allocator&lt; int &gt; &gt;</label>
      </node>
      <node id="51">
        <label>amrex::Vector&lt; std::unique_ptr&lt; amrex::BndryRegister &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="52" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>amrex::MLLinOp</label>
        <link refid="classamrex_1_1MLLinOp"/>
        <childnode refid="6" relation="usage">
          <edgelabel>m_factory</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>m_geom</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>m_coarse_bc_loc</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>m_grids</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>m_ixtype</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>m_coarse_data_for_bc</edgelabel>
        </childnode>
        <childnode refid="22" relation="usage">
          <edgelabel>m_domain_covered</edgelabel>
          <edgelabel>m_amr_ref_ratio</edgelabel>
          <edgelabel>m_num_mg_levels</edgelabel>
        </childnode>
        <childnode refid="34" relation="usage">
          <edgelabel>m_dmap</edgelabel>
        </childnode>
        <childnode refid="36" relation="usage">
          <edgelabel>m_hibc</edgelabel>
          <edgelabel>m_lobc_orig</edgelabel>
          <edgelabel>m_lobc</edgelabel>
          <edgelabel>m_hibc_orig</edgelabel>
        </childnode>
        <childnode refid="38" relation="usage">
          <edgelabel>mg_coarsen_ratio_vec</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>m_parent</edgelabel>
        </childnode>
        <childnode refid="40" relation="usage">
          <edgelabel>info</edgelabel>
        </childnode>
      </node>
      <node id="57">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::MultiFab &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="58" relation="public-inheritance">
        </childnode>
      </node>
      <node id="62">
        <label>std::vector&lt; amrex::Vector&lt; amrex::iMultiFab &gt;, std::allocator&lt; amrex::Vector&lt; amrex::iMultiFab &gt; &gt; &gt;</label>
      </node>
      <node id="29">
        <label>amrex::Vector&lt; MPI_Status &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="30" relation="public-inheritance">
        </childnode>
      </node>
      <node id="40">
        <label>amrex::LPInfo</label>
        <link refid="structamrex_1_1LPInfo"/>
      </node>
      <node id="54">
        <label>std::vector&lt; std::unique_ptr&lt; amrex::MLMGBndry &gt;, std::allocator&lt; std::unique_ptr&lt; amrex::MLMGBndry &gt; &gt; &gt;</label>
      </node>
      <node id="3">
        <label>amrex::MLCellABecLap</label>
        <link refid="classamrex_1_1MLCellABecLap"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="55" relation="usage">
          <edgelabel>m_overset_mask</edgelabel>
        </childnode>
        <childnode refid="40" relation="usage">
          <edgelabel>m_lpinfo_arg</edgelabel>
        </childnode>
      </node>
      <node id="24">
        <label>amrex::Vector&lt; std::string &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="25" relation="public-inheritance">
        </childnode>
      </node>
      <node id="55">
        <label>amrex::Vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::iMultiFab &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="56" relation="public-inheritance">
        </childnode>
      </node>
      <node id="39">
        <label>std::vector&lt; amrex::IntVect, std::allocator&lt; amrex::IntVect &gt; &gt;</label>
      </node>
      <node id="64">
        <label>std::vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::MultiFab &gt; &gt;, std::allocator&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::MultiFab &gt; &gt; &gt; &gt;</label>
      </node>
      <node id="61">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::iMultiFab &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="62" relation="public-inheritance">
        </childnode>
      </node>
      <node id="15">
        <label>amrex::MultiFab</label>
        <link refid="classamrex_1_1MultiFab"/>
        <childnode refid="16" relation="public-inheritance">
        </childnode>
      </node>
      <node id="44">
        <label>std::vector&lt; amrex::Vector&lt; amrex::BndryRegister &gt;, std::allocator&lt; amrex::Vector&lt; amrex::BndryRegister &gt; &gt; &gt;</label>
      </node>
      <node id="4">
        <label>amrex::MLCellLinOp</label>
        <link refid="classamrex_1_1MLCellLinOp"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="41" relation="usage">
          <edgelabel>m_maskvals</edgelabel>
        </childnode>
        <childnode refid="43" relation="usage">
          <edgelabel>m_undrrelxr</edgelabel>
        </childnode>
        <childnode refid="45" relation="usage">
          <edgelabel>m_fluxreg</edgelabel>
        </childnode>
        <childnode refid="47" relation="usage">
          <edgelabel>m_robin_bcval</edgelabel>
        </childnode>
        <childnode refid="49" relation="usage">
          <edgelabel>m_bcondloc</edgelabel>
        </childnode>
        <childnode refid="51" relation="usage">
          <edgelabel>m_crse_sol_br</edgelabel>
          <edgelabel>m_crse_cor_br</edgelabel>
        </childnode>
        <childnode refid="53" relation="usage">
          <edgelabel>m_bndry_sol</edgelabel>
          <edgelabel>m_bndry_cor</edgelabel>
        </childnode>
      </node>
      <node id="16">
        <label>amrex::FabArray&lt; FArrayBox &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="17" relation="usage">
          <edgelabel>pc_recv_size</edgelabel>
          <edgelabel>fb_recv_size</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>fb_nghost</edgelabel>
          <edgelabel>pc_dnghost</edgelabel>
          <edgelabel>pc_snghost</edgelabel>
        </childnode>
        <childnode refid="19" relation="usage">
          <edgelabel>m_dallocator</edgelabel>
        </childnode>
        <childnode refid="22" relation="usage">
          <edgelabel>pc_recv_from</edgelabel>
          <edgelabel>fb_recv_from</edgelabel>
        </childnode>
        <childnode refid="24" relation="usage">
          <edgelabel>m_tags</edgelabel>
        </childnode>
        <childnode refid="26" relation="usage">
          <edgelabel>fb_recv_data</edgelabel>
          <edgelabel>fb_send_data</edgelabel>
          <edgelabel>pc_recv_data</edgelabel>
        </childnode>
        <childnode refid="28" relation="usage">
          <edgelabel>shmem</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>pc_src</edgelabel>
        </childnode>
        <childnode refid="29" relation="usage">
          <edgelabel>fb_recv_stat</edgelabel>
        </childnode>
        <childnode refid="31" relation="usage">
          <edgelabel>fb_send_reqs</edgelabel>
          <edgelabel>pc_recv_reqs</edgelabel>
          <edgelabel>fb_recv_reqs</edgelabel>
          <edgelabel>pc_send_reqs</edgelabel>
        </childnode>
        <childnode refid="33" relation="usage">
          <edgelabel>fb_period</edgelabel>
          <edgelabel>pc_period</edgelabel>
        </childnode>
      </node>
      <node id="17">
        <label>amrex::Vector&lt; std::size_t &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="18" relation="public-inheritance">
        </childnode>
      </node>
      <node id="53">
        <label>amrex::Vector&lt; std::unique_ptr&lt; amrex::MLMGBndry &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="54" relation="public-inheritance">
        </childnode>
      </node>
      <node id="56">
        <label>std::vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::iMultiFab &gt; &gt;, std::allocator&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::iMultiFab &gt; &gt; &gt; &gt;</label>
      </node>
      <node id="18">
        <label>std::vector&lt; std::size_t, std::allocator&lt; std::size_t &gt; &gt;</label>
      </node>
      <node id="35">
        <label>std::vector&lt; amrex::Vector&lt; amrex::DistributionMapping &gt;, std::allocator&lt; amrex::Vector&lt; amrex::DistributionMapping &gt; &gt; &gt;</label>
      </node>
      <node id="7">
        <label>std::vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::FabFactory&lt; amrex::FArrayBox &gt; &gt; &gt;, std::allocator&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::FabFactory&lt; amrex::FArrayBox &gt; &gt; &gt; &gt; &gt;</label>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="28" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" bodystart="26" bodyend="108"/>
    <listofallmembers>
      <member refid="classamrex_1_1MLLinOp_1a8effbacb86233a5334789092372a9bde" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>AMRRefRatio</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac80a224852d40e9dd01ef9e4d52cd1c9" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>AMRRefRatio</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1a492bdb86a17eff7aa7b01a99d68eefed" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>apply</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a0dd52a0063675d0af5cd1e3bb8576a24" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>applyBC</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1a6cf6cb52bc1116d3bae93ea118d55096" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>applyBCTensor</name></member>
      <member refid="classamrex_1_1MLCellABecLap_1a576364fc5fcadf5eb1b23a7a693fa3ba" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>applyInhomogNeumannTerm</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1af6190fe1b9d2ed218129e7ad6f4b4f64" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>applyMetricTerm</name></member>
      <member refid="classamrex_1_1MLCellABecLap_1ad9c4081306f2882750345d3161ca2261" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>applyOverset</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a55ed8c27b04966126b3bd76c92735dbf" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>averageDownCoeffs</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1ad7bbf45372a9607dcaccc85f3b6da08e" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>averageDownCoeffsSameAmrLevel</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a92fdeee03f9af3866563ba880cd81879" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>averageDownCoeffsToCoarseAmrLevel</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a184c8bb62e01581cfc6d1d936f7eeca0" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>averageDownSolutionRHS</name></member>
      <member refid="classamrex_1_1MLLinOp_1a5aa01a1ef6b0b3a471f02f65ae4b4884" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>BCMode</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a622b7c2ecc46a6b476aba4fb470f3dcf" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>BCTuple</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac2e55c34bf6b5c0ed53d0ef6a4625a3f" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>BCType</name></member>
      <member refid="classamrex_1_1MLLinOp_1a77b33530b316399f5fb5314a846d9b7e" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>BottomCommunicator</name></member>
      <member refid="classamrex_1_1MLLinOp_1a91cf65a68d76e83272098df8829e0dca" prot="private" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>checkPoint</name></member>
      <member refid="classamrex_1_1MLLinOp_1a941ddfa6ec11cbd0a1c835007494b057" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>Communicator</name></member>
      <member refid="classamrex_1_1MLLinOp_1af37726771c106055867bf88ade1f65d7" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>compactify</name></member>
      <member refid="classamrex_1_1MLLinOp_1ae3dae2320c8c9e64274e8d41131187dc" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>compactify</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1a14c881c5002de907212e7a2803d88046" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>compCrossTerms</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1ae866b40b2b0e24432ac381546fa869a0" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>compFlux</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a757eb205bb69749079d0988dd528cc32" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>compGrad</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1a27075f423b7735b6d847198e1b8ce3f7" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>compVelGrad</name></member>
      <member refid="classamrex_1_1MLLinOp_1aff1b5ba7a45c7e320550f99f88984301" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>copyNSolveSolution</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a3c1832912375e08e8bd38775b6b532b3" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>correctionResidual</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1ac6b1462f39aa6a60a2bfd0cd6e687aee" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>define</name></member>
      <member refid="classamrex_1_1MLCellABecLap_1a93dbbb7204ba78212d8891ab72cb8491" prot="public" virt="non-virtual" ambiguityscope="amrex::MLCellABecLap::"><scope>amrex::MLEBTensorOp</scope><name>define</name></member>
      <member refid="classamrex_1_1MLCellABecLap_1a6fdf2ec2549af7037094856dceeb375a" prot="public" virt="non-virtual" ambiguityscope="amrex::MLCellABecLap::"><scope>amrex::MLEBTensorOp</scope><name>define</name></member>
      <member refid="classamrex_1_1MLLinOp_1aa0ba245918a01db26fdc8289b4e4ed29" prot="public" virt="non-virtual" ambiguityscope="amrex::MLLinOp::"><scope>amrex::MLEBTensorOp</scope><name>define</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a971e6a729527288cdcb774d19799cf18" prot="private" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>defineAuxData</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a51a99982e299f90449ae12473a15c7d2" prot="private" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>defineBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1a07740ce5e26ee8f463d6176b157fe06a" prot="private" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>defineGrids</name></member>
      <member refid="classamrex_1_1MLLinOp_1a355691d7877fb9a9aabc65db76d0f2b4" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>doAgglomeration</name></member>
      <member refid="classamrex_1_1MLLinOp_1a79f98e0cf06f695dbad6052c5d53e00b" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>doConsolidation</name></member>
      <member refid="classamrex_1_1MLLinOp_1ae920d0e3602dd26d57876b6d6a6843e4" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>doSemicoarsening</name></member>
      <member refid="classamrex_1_1MLLinOp_1a831ab67f9a58e0f452f52b176219c1a0" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>enforceSingularSolvable</name></member>
      <member refid="classamrex_1_1MLLinOp_1a0eb75c39ff8e715b524d79442b83a3fb" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>Factory</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1ae757c91789ec2b174e27f330d200c8f0" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>Fapply</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1aa2fd07dff1fe39d12190710458f87c11" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>FFlux</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a10b043a8a06133e0f36f81231a7519d9" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>fillSolutionBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1ad00407760d4927438c355ba115aaad4e" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>Finalize</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac94ee917e5350722a537af7e127984d3" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>fixUpResidualMask</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a6d19a8694d9c4ef50a169f50822220e4" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>Fsmooth</name></member>
      <member refid="classamrex_1_1MLLinOp_1a7b1da16499dc7b95e807a28757e0c094" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>Geom</name></member>
      <member refid="classamrex_1_1MLLinOp_1aa429808b0b8d8a9efcf3380620f6263a" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>get_d0</name></member>
      <member refid="classamrex_1_1MLLinOp_1ad16cb6cbf7bcb78cc0d0af59611ae00a" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>get_d1</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1aaebd085dc9e01abe1c027b57e5c89971" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>getACoeffs</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1ad851a01b301637515a70e6902fe56d40" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>getAScalar</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a1c5ae44dbc877c6cd0dd069a15b840e5" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>getBCoeffs</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a31195eef598735476044e840046bd295" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>getBScalar</name></member>
      <member refid="classamrex_1_1MLLinOp_1a6d1ed393d8e089b8af021e80ead4267b" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>getDefaultBottomSolver</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a5bc7b648df895d5ff5402e2ddcf9605c" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>getEBFluxes</name></member>
      <member refid="classamrex_1_1MLLinOp_1a29c32b42500a25348ee5331f44ab94ba" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>getEnforceSingularSolvable</name></member>
      <member refid="classamrex_1_1MLCellABecLap_1ae8f4b9e81f1e5650a091fff25f2afdf9" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>getFluxes</name></member>
      <member refid="classamrex_1_1MLCellABecLap_1a34cb682ceb72e31c45cadb89bc2e3a9f" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>getFluxes</name></member>
      <member refid="classamrex_1_1MLLinOp_1a1189e4016e7757083343a93649f102aa" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>getMaxOrder</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1ad5e85d6b70f2ee501328d4ec5efb0771" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>getNComp</name></member>
      <member refid="classamrex_1_1MLLinOp_1a53fabf0ebd4dd86e92a3c7e5a161f5a6" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>getNGrow</name></member>
      <member refid="classamrex_1_1MLCellABecLap_1acb4d23e32365a814323cdd4787884420" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>getOversetMask</name></member>
      <member refid="classamrex_1_1MLLinOp_1a6d7b1e0e21fd61d71bbe342df0f1a5d4" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>hasHiddenDimension</name></member>
      <member refid="classamrex_1_1MLLinOp_1a4910f22e3c63b572ef364cdf8177e392" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>hasInhomogNeumannBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1a4b2636d8115debeeefa38b4b34186ecc" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>hasRobinBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1a458383f5dc4aba88329db715fd027d7a" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>HiBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1af0793198f529f4474139fa9366b2e1aa" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>hiddenDirection</name></member>
      <member refid="classamrex_1_1MLLinOp_1a85fa2f104bbfeaa73d55d589906ecd45" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>info</name></member>
      <member refid="classamrex_1_1MLLinOp_1a48b2fe73722eee0a1d50b6e0b9558174" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>Initialize</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a15a2cb048460b6619e61e66fb3a8e3d5" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>interpolation</name></member>
      <member refid="classamrex_1_1MLLinOp_1aa1c6883eef4d4dc55d3a5fe5c921113a" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>isBottomActive</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1a82e9a304ae27837aa45c9215df9d2b15" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>isBottomSingular</name></member>
      <member refid="classamrex_1_1MLLinOp_1aa42fd2dfa3b0133f2b20a99026549900" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>isCellCentered</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1a6fd32c1815462061d634ad81818e348f" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>isCrossStencil</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a566f171eb405174c2eea99667a76cdb1" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>isEBDirichlet</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1abe98c1ca87f919a66405ece51d590f07" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>isSingular</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1a89e3f55449f2d482de028071c240ec8c" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>isTensorOp</name></member>
      <member refid="classamrex_1_1MLLinOp_1a1ac509d7066244935918fdff0326ca95" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>LoBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1a07cd0a7c45d6542e33a5d97aefe5bab3" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>Location</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a48c0efb6e525e5c901c1ee34fa5119ca" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_a_coeffs</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1ac43a9c8728bb7861415d80283d41e064" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_a_scalar</name></member>
      <member refid="classamrex_1_1MLLinOp_1a42ca524eb4deca1132be683805d2d7ab" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_amr_ref_ratio</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1af80e60d2de0c586caccdc9c2fd4f8f13" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_b_coeffs</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a1fb977f5a6b0c8682e5f658a4dc9db0c" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_b_scalar</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a20a2d5349510243c481d2b6ce1992f5c" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_bcondloc</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1afc12bcb23ed82f37ceae7da2d6f44eea" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_beta_loc</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a60785819fb0c997419c7ee7b007e4bb3" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_bndry_cor</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1ab8f93178ea3f02ba63da966de7796970" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_bndry_sol</name></member>
      <member refid="classamrex_1_1MLLinOp_1a06ea1608702e52d38c0eceaa180bad7e" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_bottom_comm</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a820de6c415b8f6911cf96c94788cb102" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_cc_mask</name></member>
      <member refid="classamrex_1_1MLLinOp_1abc7e6e6252f9ecc63c86dcbd99250e10" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_coarse_bc_loc</name></member>
      <member refid="classamrex_1_1MLLinOp_1a1ca01453776c12e634debdc6d09206c3" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_coarse_data_crse_ratio</name></member>
      <member refid="classamrex_1_1MLLinOp_1ad1382ee007387f65075acda2f46866f2" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_coarse_data_for_bc</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a871355473b2744ad7dd29d691e72e9ee" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_crse_cor_br</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1aae58b75937a141dc599d98b034be7f3c" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_crse_sol_br</name></member>
      <member refid="classamrex_1_1MLLinOp_1addb42fac68158f49c2508cf47d3b8d9d" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_default_comm</name></member>
      <member refid="classamrex_1_1MLLinOp_1a80552ba3fc7cdd6bb00739c66327ae2c" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_dmap</name></member>
      <member refid="classamrex_1_1MLLinOp_1a19bf5f2d76877e5f5777e5c44d290648" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_do_agglomeration</name></member>
      <member refid="classamrex_1_1MLLinOp_1a488b6dd5c1bfecef948b543bfa7e5154" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_do_consolidation</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac5eeb189073e311245243a3292b8377d" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_do_semicoarsening</name></member>
      <member refid="classamrex_1_1MLLinOp_1a77492a5974990e96061d11c681ceb55d" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_domain_bloc_hi</name></member>
      <member refid="classamrex_1_1MLLinOp_1a62d8b5644f8ca07d5e27a4d33cc9528f" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_domain_bloc_lo</name></member>
      <member refid="classamrex_1_1MLLinOp_1aaba23614888f937956554945e6a2a5a0" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_domain_covered</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a1644cbea6bac7ad1b9ae4a039cf96cc4" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_eb_b_coeffs</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1aa52b74715e6fd800ad391684b5a2321b" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_eb_kappa</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a25296274131127e2be522bd86b57be2c" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_eb_phi</name></member>
      <member refid="classamrex_1_1MLLinOp_1aca26a5ef5d68cae3dcabea0a5d8c2493" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_factory</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1aeabff149eec600743faac7295cd509d2" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_fluxreg</name></member>
      <member refid="classamrex_1_1MLLinOp_1ab16551403ee1629e20ed6e6d9d4f680c" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_geom</name></member>
      <member refid="classamrex_1_1MLLinOp_1a3f9b0a7c3a91ca7e13664dbfe7115eed" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_grids</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1aed368e6d9fa6a5cb5b193e4368d39cb7" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_has_eb_kappa</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1a1ac24f61712e93b25ebcd55639f30ce2" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_has_kappa</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a9d6cdade5abfabf340b180cba282c3c1" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_has_metric_term</name></member>
      <member refid="classamrex_1_1MLLinOp_1afabfb801a5e93c7c2d74250dd7223aff" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_hibc</name></member>
      <member refid="classamrex_1_1MLLinOp_1a187bf73f893ba53dc2ee3e70c8f8811f" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_hibc_orig</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a11297b15320727df4d9e32d3b8085c06" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_is_eb_inhomog</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a69f0aa528f3437aed6e5fbc26d3f1820" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_is_singular</name></member>
      <member refid="classamrex_1_1MLLinOp_1a1422f7b22ae204247f5cdf20ab70e741" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_ixtype</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1af91981f116ef858b2bc4778b53fc575f" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_kappa</name></member>
      <member refid="classamrex_1_1MLLinOp_1ae74ca314ec3dcba18a97daf57896baaa" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_lobc</name></member>
      <member refid="classamrex_1_1MLLinOp_1adc90c319d9f918dac74fe5c500cc2fc4" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_lobc_orig</name></member>
      <member refid="classamrex_1_1MLCellABecLap_1acb34071cea72aa5efd3a25700903e9c1" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_lpinfo_arg</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a4c34af07271b2f0b7f9efdaffa6920d0" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_maskvals</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a85df3961f7b0ad04d0ad1463ea1e24da" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_ncomp</name></member>
      <member refid="classamrex_1_1MLLinOp_1aa53a765aea0ed0c4e7410d147380079f" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_needs_coarse_data_for_bc</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1a15abc2cecf258e0967f5803ef5c5729e" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_needs_update</name></member>
      <member refid="classamrex_1_1MLLinOp_1ad6bbf49c1bdb88256721471b22b4b044" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_num_amr_levels</name></member>
      <member refid="classamrex_1_1MLLinOp_1ababf1d5df3da022563dc90ee2c81ad75" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_num_mg_levels</name></member>
      <member refid="classamrex_1_1MLCellABecLap_1aeee38af8d207ad6bc70087b4c6ec4215" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_overset_mask</name></member>
      <member refid="classamrex_1_1MLLinOp_1a614164d6c8e680ccb5ac8fb9cf1558ed" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_parent</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1ae0ea21faa4cc1aeadf8641b37d8cf59f" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_phi_loc</name></member>
      <member refid="classamrex_1_1MLLinOp_1a2faeb23bc1e93e2b0cd693cb94a18d08" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_raii_comm</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a920175d896857c64b3544cd0f6c80288" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_robin_bcval</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1a921cc1fd7db333aeca73b00f0530d44e" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_tauflux</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a2ffd8d47358983d3c013b8012eeb1b8e" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_undrrelxr</name></member>
      <member refid="classamrex_1_1MLLinOp_1a02f3afbdee5598f2cae332d7946a5a70" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>make</name></member>
      <member refid="classamrex_1_1MLLinOp_1a8aebe104ce2f4892f32350c742d0ba36" prot="private" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>makeAgglomeratedDMap</name></member>
      <member refid="classamrex_1_1MLLinOp_1aafd84fa947e45627503861e5707201dd" prot="private" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>makeConsolidatedDMap</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a95879abefc0ff8610b6534d919892a1a" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>makeFactory</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a3bbfff6e733b7883fffacffb363569aa" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>makeNGrids</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1acd7d1f624947d653cfb4b3ea3f2fd193" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>makeNLinOp</name></member>
      <member refid="classamrex_1_1MLLinOp_1a0aa88871d9875a2436ed23ff882516e4" prot="private" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>makeSubCommunicator</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac516dba583aede117f89e339423f6114" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>maxorder</name></member>
      <member refid="classamrex_1_1MLLinOp_1ae871a991ef83c33044a22db383c76dcd" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>mg_box_min_width</name></member>
      <member refid="classamrex_1_1MLLinOp_1aaa5616982aef27c68c5ae5544092c7db" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>mg_coarsen_ratio</name></member>
      <member refid="classamrex_1_1MLLinOp_1a2023b3b3881d5aff49c7a3b995a03993" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>mg_coarsen_ratio_vec</name></member>
      <member refid="classamrex_1_1MLLinOp_1a3ea5c2611e98234737157e36bae6c343" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>mg_domain_min_width</name></member>
      <member refid="classamrex_1_1MLCellABecLap_1a4645fe35e39e5f36fe87938a48ea9641" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>MLCellABecLap</name></member>
      <member refid="classamrex_1_1MLCellABecLap_1aff6a0f1c81880c9e944e725098d73a7c" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>MLCellABecLap</name></member>
      <member refid="classamrex_1_1MLCellABecLap_1a13b727caa58ea6b165dcc414b6c14bae" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>MLCellABecLap</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1acc45e2dedbc266cc717ffc2239727486" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>MLCellLinOp</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1acba5508d208bbb531ce2fe45042b4f6f" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>MLCellLinOp</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a4bb69639aa4cb08113d6d8273fca03ae" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>MLCellLinOp</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1aa9a96f2bc072cb181d9cce454e3da098" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>MLEBABecLap</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a59f358ede4763b7153642b4e0aae8de8" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>MLEBABecLap</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a14181cc0ff70a2ed471cdb3a3fc2bdb6" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>MLEBABecLap</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a0b7f1e4cc90469a42eb10c8792eced13" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>MLEBABecLap</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1adccad5fb53a52c9b7227847cfc4a636d" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>MLEBTensorOp</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1a4f997af4135dcb79775a5d7f7ac3b678" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>MLEBTensorOp</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1af0d70e756af559a4082443914b134b0d" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>MLEBTensorOp</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1a16a15944a17ebe8341932a53483ef2b6" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>MLEBTensorOp</name></member>
      <member refid="classamrex_1_1MLLinOp_1a2a75b94dc22faffec8a686f91fbfc9c1" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>MLLinOp</name></member>
      <member refid="classamrex_1_1MLLinOp_1a7dd2c530e984f58e5a04cc415e9a539b" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>MLLinOp</name></member>
      <member refid="classamrex_1_1MLLinOp_1a69fbc0ca95c18b6e954c53abb41c885c" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>MLLinOp</name></member>
      <member refid="classamrex_1_1MLLinOp_1ab0e25c7ee0f264b36146fa77ee2bf1c4" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>name</name></member>
      <member refid="classamrex_1_1MLLinOp_1adcfe0a91f9b85388c17eee6172f02975" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>NAMRLevels</name></member>
      <member refid="classamrex_1_1MLLinOp_1a0c150481b635dccaf83cfff3d38b11c7" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>needsCoarseDataForBC</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1ab6dd50ea71733ee23625ef3fe6634d98" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>needsUpdate</name></member>
      <member refid="classamrex_1_1MLLinOp_1a257d196611ba0ab9d861dc5e0dc23502" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>NMGLevels</name></member>
      <member refid="classamrex_1_1MLLinOp_1a8f43837a5a495425a72840dc811fc230" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>nodalSync</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a1ba4a6db3bd8895f95ac90ff5decc461" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>normalize</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1ac801f35a398c39c6ae9b42b1e6c29c7a" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1a8217ea65e778d2f86a2f059ec79a6474" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a510cfdf6165c8a08174e71624357bbf9" prot="public" virt="non-virtual" ambiguityscope="amrex::MLEBABecLap::"><scope>amrex::MLEBTensorOp</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1aaa0d12f5f57ddf587493f2c93f516dd8" prot="public" virt="non-virtual" ambiguityscope="amrex::MLEBABecLap::"><scope>amrex::MLEBTensorOp</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLCellABecLap_1a7fd4867774038467f97cfac185e235ac" prot="public" virt="non-virtual" ambiguityscope="amrex::MLCellABecLap::"><scope>amrex::MLEBTensorOp</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLCellABecLap_1ac72a224155e09fd10918b66384ccdb81" prot="public" virt="non-virtual" ambiguityscope="amrex::MLCellABecLap::"><scope>amrex::MLEBTensorOp</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a87fd042ed7a3004a39f75564f24264ca" prot="public" virt="non-virtual" ambiguityscope="amrex::MLCellLinOp::"><scope>amrex::MLEBTensorOp</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a4be43b4a29bd4f7092aa870804870ae2" prot="public" virt="non-virtual" ambiguityscope="amrex::MLCellLinOp::"><scope>amrex::MLEBTensorOp</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLLinOp_1ad163e1fa25935bce528783de5adb6b1a" prot="public" virt="non-virtual" ambiguityscope="amrex::MLLinOp::"><scope>amrex::MLEBTensorOp</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLLinOp_1aec2118e27e9938788a89f5dda28709f7" prot="public" virt="non-virtual" ambiguityscope="amrex::MLLinOp::"><scope>amrex::MLEBTensorOp</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1adb58fe08c96787422aaf6449a03a76e8" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>prepareForSolve</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1ae233eeb511516448492f38fe53fa9cd9" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>RealTuple</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1afc76c452e2704200c3b596ba1c1cb1a2" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>reflux</name></member>
      <member refid="classamrex_1_1MLLinOp_1a62f7495893309fa4f4805bbea9b59b3b" prot="private" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>remapNeighborhoods</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a4e02281f596d4f8d9fc0ccad62f8525b" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>restriction</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a3897cf202c96a14a8d9733f25c5e750f" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>setACoeffs</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a4c998b02361b80cb5324775e3d58f90b" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>setACoeffs</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1aac4737f755efe396ebaaaac9c3e64bc7" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>setBCoeffs</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1ae7681680c9ec6ea8b4d7c16f72379506" prot="public" virt="non-virtual" ambiguityscope="amrex::MLEBABecLap::"><scope>amrex::MLEBTensorOp</scope><name>setBCoeffs</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a9088117f62b7fdf5ddf44a3cccea40eb" prot="public" virt="non-virtual" ambiguityscope="amrex::MLEBABecLap::"><scope>amrex::MLEBTensorOp</scope><name>setBCoeffs</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a41a0bab0f39a7886bee16b3db3253ef7" prot="public" virt="non-virtual" ambiguityscope="amrex::MLEBABecLap::"><scope>amrex::MLEBTensorOp</scope><name>setBCoeffs</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1a8ce45e8e9445e3007f43af125bd9c821" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>setBulkViscosity</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1a0e7d54919f40ee816e333ba1d531ecb8" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>setBulkViscosity</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac161f1d53e925b82ba5defeb9b0efe70" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>setCoarseFineBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac0c0882eb6092218dc09c5d60555ffed" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>setCoarseFineBCLocation</name></member>
      <member refid="classamrex_1_1MLLinOp_1a0d2cc5acbd59af429bb23cea82e1cb4e" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>setDomainBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1af86e2902f472568fc0056d403f9787ff" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>setDomainBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1a46abcf3897135febcc172d96e03b7603" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>setDomainBCLoc</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1a3aa0e1f0a27c29c4cf2f73d97c19e6b9" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>setEBBulkViscosity</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1a60aa035c7f58be6547e1fc06c25b55ef" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>setEBBulkViscosity</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1a7f36dae9f70a37ded92faab9a89b4a52" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>setEBDirichlet</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1aaa5d24895fc813690a700fff13302d30" prot="public" virt="non-virtual" ambiguityscope="amrex::MLEBABecLap::"><scope>amrex::MLEBTensorOp</scope><name>setEBDirichlet</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a21036dcdb342fa89b6bc11b0cf730d04" prot="public" virt="non-virtual" ambiguityscope="amrex::MLEBABecLap::"><scope>amrex::MLEBTensorOp</scope><name>setEBDirichlet</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1a4fd75863f9948f2fc1c82336088f1d51" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>setEBHomogDirichlet</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a69dc896ed1e3c373ffed1364c14b39ea" prot="public" virt="non-virtual" ambiguityscope="amrex::MLEBABecLap::"><scope>amrex::MLEBTensorOp</scope><name>setEBHomogDirichlet</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a367adfeb7192bf75233d0d3176eb8fd9" prot="public" virt="non-virtual" ambiguityscope="amrex::MLEBABecLap::"><scope>amrex::MLEBTensorOp</scope><name>setEBHomogDirichlet</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1a7c8d573df03c82ad4c1bbb8cec38f6aa" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>setEBShearViscosity</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1a95ede9e3771119992924c74dbbd6a83d" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>setEBShearViscosity</name></member>
      <member refid="classamrex_1_1MLLinOp_1a8225491c35d71e1fb7edb6355f44ac5a" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>setEnforceSingularSolvable</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a17b29b5c93f25181f34313b42b795a9e" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>setLevelBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1a45b72169ccf285c17f439c4e990c0f58" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>setMaxOrder</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a1b6b64134bb5a73a43da2d2aaefbbf53" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>setPhiOnCentroid</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1ad3027675177497cdb23a984a50ebcb12" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>setScalars</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1a5f0ab748bd6113cdf149b780c7ce9ee3" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>setShearViscosity</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1a514d2b861724430a7a0d3182bbf26d06" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>setShearViscosity</name></member>
      <member refid="classamrex_1_1MLLinOp_1a4d96a0475759eef80d096851fdedd411" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>setVerbose</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a240eadd9886e8df70f955fecb56bcdfe" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>smooth</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1ab18841d6aec78590a56eeaed61fe4345" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>solutionResidual</name></member>
      <member refid="classamrex_1_1MLLinOp_1a1f2821b4a51da49d862dae1e757bb8c3" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>StateMode</name></member>
      <member refid="classamrex_1_1MLCellABecLap_1ade6948bc20dfcd07ac886cee8b072c9b" prot="protected" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>supportInhomogNeumannBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1a9d05943073d4f01c9a6d03c2ec9f0602" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>supportNSolve</name></member>
      <member refid="classamrex_1_1MLLinOp_1a01c4cbbbf82530a8d3523d07ad3a9e9f" prot="protected" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>supportRobinBC</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a4ee573102053163e673153f3334153fe" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>unapplyMetricTerm</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac62698656785dd3261f05e9dc76cd8fa" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>unimposeNeumannBC</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1a3c4aac7c4c8cec7458fd1b5b3ac8c3f4" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>update</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a73212ed387925f27b0ebeaed21e4a00a" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>updateCorBC</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1aec26fa3ea4e35bd1a02b8972fc392493" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>updateSolBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1a0815357130e78962e01abdaba2b09c21" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>verbose</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a2d3d01dcb4fddb4f2df39484b6f58f97" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>xdoty</name></member>
      <member refid="classamrex_1_1MLCellABecLap_1aaa11148ef1cc3386414a3b3d02f9a4b2" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>~MLCellABecLap</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a4d46c85e7e43e5231e19607a868d3d0f" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>~MLCellLinOp</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a1c3ebe277cdfba5a7bdafca9f0a2672f" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>~MLEBABecLap</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1a5efda34c10df7a5f5d4c738a60c04e9f" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>~MLEBTensorOp</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac6793724d6b5c98581d42d9233fda1bd" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>~MLLinOp</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
