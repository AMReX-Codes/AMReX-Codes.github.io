<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classamrex_1_1MLEBTensorOp" kind="class" language="C++" prot="public">
    <compoundname>amrex::MLEBTensorOp</compoundname>
    <basecompoundref refid="classamrex_1_1MLEBABecLap" prot="public" virt="non-virtual">amrex::MLEBABecLap</basecompoundref>
    <includes refid="AMReX__MLEBTensorOp_8H" local="no">AMReX_MLEBTensorOp.H</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classamrex_1_1MLEBTensorOp_1a15abc2cecf258e0967f5803ef5c5729e" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::MLEBTensorOp::m_needs_update</definition>
        <argsstring></argsstring>
        <name>m_needs_update</name>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="91" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLEBTensorOp_1a1ac24f61712e93b25ebcd55639f30ce2" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::MLEBTensorOp::m_has_kappa</definition>
        <argsstring></argsstring>
        <name>m_has_kappa</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="93" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLEBTensorOp_1aed368e6d9fa6a5cb5b193e4368d39cb7" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::MLEBTensorOp::m_has_eb_kappa</definition>
        <argsstring></argsstring>
        <name>m_has_eb_kappa</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="94" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLEBTensorOp_1a1ab2cb2c4fcbbbf0e3fdedad325fd6b9" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>, AMREX_SPACEDIM &gt; &gt; &gt;</type>
        <definition>Vector&lt;Vector&lt;Array&lt;MultiFab,AMREX_SPACEDIM&gt; &gt; &gt; amrex::MLEBTensorOp::m_kappa</definition>
        <argsstring></argsstring>
        <name>m_kappa</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="95" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLEBTensorOp_1aa52b74715e6fd800ad391684b5a2321b" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &gt; &gt;</type>
        <definition>Vector&lt;Vector&lt;MultiFab&gt; &gt; amrex::MLEBTensorOp::m_eb_kappa</definition>
        <argsstring></argsstring>
        <name>m_eb_kappa</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="96" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLEBTensorOp_1abb70c0cd0ba0b1da3fe27e69bb2fe792" prot="protected" static="no" mutable="yes">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>, AMREX_SPACEDIM &gt; &gt; &gt;</type>
        <definition>Vector&lt;Vector&lt;Array&lt;MultiFab,AMREX_SPACEDIM&gt; &gt; &gt; amrex::MLEBTensorOp::m_tauflux</definition>
        <argsstring></argsstring>
        <name>m_tauflux</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="97" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" bodystart="97" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1MLEBTensorOp_1adccad5fb53a52c9b7227847cfc4a636d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MLEBTensorOp::MLEBTensorOp</definition>
        <argsstring>()</argsstring>
        <name>MLEBTensorOp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="31" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.cpp" bodystart="14" bodyend="17"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBTensorOp_1a4f997af4135dcb79775a5d7f7ac3b678" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MLEBTensorOp::MLEBTensorOp</definition>
        <argsstring>(const Vector&lt; Geometry &gt; &amp;a_geom, const Vector&lt; BoxArray &gt; &amp;a_grids, const Vector&lt; DistributionMapping &gt; &amp;a_dmap, const LPInfo &amp;a_info, const Vector&lt; EBFArrayBoxFactory const * &gt; &amp;a_factory)</argsstring>
        <name>MLEBTensorOp</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>a_geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &gt; &amp;</type>
          <declname>a_grids</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt; &amp;</type>
          <declname>a_dmap</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1LPInfo" kindref="compound">LPInfo</ref> &amp;</type>
          <declname>a_info</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1EBFArrayBoxFactory" kindref="compound">EBFArrayBoxFactory</ref> const * &gt; &amp;</type>
          <declname>a_factory</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="32" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.cpp" bodystart="19" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBTensorOp_1a5efda34c10df7a5f5d4c738a60c04e9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>amrex::MLEBTensorOp::~MLEBTensorOp</definition>
        <argsstring>()</argsstring>
        <name>~MLEBTensorOp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="38" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.cpp" bodystart="29" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBTensorOp_1af0d70e756af559a4082443914b134b0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MLEBTensorOp::MLEBTensorOp</definition>
        <argsstring>(const MLEBTensorOp &amp;)=delete</argsstring>
        <name>MLEBTensorOp</name>
        <param>
          <type>const <ref refid="classamrex_1_1MLEBTensorOp" kindref="compound">MLEBTensorOp</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="40" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBTensorOp_1a16a15944a17ebe8341932a53483ef2b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MLEBTensorOp::MLEBTensorOp</definition>
        <argsstring>(MLEBTensorOp &amp;&amp;)=delete</argsstring>
        <name>MLEBTensorOp</name>
        <param>
          <type><ref refid="classamrex_1_1MLEBTensorOp" kindref="compound">MLEBTensorOp</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="41" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBTensorOp_1ac801f35a398c39c6ae9b42b1e6c29c7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1MLEBTensorOp" kindref="compound">MLEBTensorOp</ref> &amp;</type>
        <definition>MLEBTensorOp&amp; amrex::MLEBTensorOp::operator=</definition>
        <argsstring>(const MLEBTensorOp &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classamrex_1_1MLEBTensorOp" kindref="compound">MLEBTensorOp</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="42" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBTensorOp_1a8217ea65e778d2f86a2f059ec79a6474" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1MLEBTensorOp" kindref="compound">MLEBTensorOp</ref> &amp;</type>
        <definition>MLEBTensorOp&amp; amrex::MLEBTensorOp::operator=</definition>
        <argsstring>(MLEBTensorOp &amp;&amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1MLEBTensorOp" kindref="compound">MLEBTensorOp</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="43" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBTensorOp_1ac6b1462f39aa6a60a2bfd0cd6e687aee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLEBTensorOp::define</definition>
        <argsstring>(const Vector&lt; Geometry &gt; &amp;a_geom, const Vector&lt; BoxArray &gt; &amp;a_grids, const Vector&lt; DistributionMapping &gt; &amp;a_dmap, const LPInfo &amp;a_info, const Vector&lt; EBFArrayBoxFactory const * &gt; &amp;a_factory)</argsstring>
        <name>define</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>a_geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &gt; &amp;</type>
          <declname>a_grids</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt; &amp;</type>
          <declname>a_dmap</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1LPInfo" kindref="compound">LPInfo</ref> &amp;</type>
          <declname>a_info</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1EBFArrayBoxFactory" kindref="compound">EBFArrayBoxFactory</ref> const * &gt; &amp;</type>
          <declname>a_factory</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="45" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.cpp" bodystart="33" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBTensorOp_1a6907d1c2b45662f70a24cc5deef001ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLEBTensorOp::setShearViscosity</definition>
        <argsstring>(int amrlev, const Array&lt; MultiFab const *, AMREX_SPACEDIM &gt; &amp;eta, Location a_beta_loc)</argsstring>
        <name>setShearViscosity</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> const *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>eta</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLCellABecLapT_1a97dd28df6c3a612116bc4d4f95fb98fb" kindref="member">Location</ref></type>
          <declname>a_beta_loc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="51" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.cpp" bodystart="75" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBTensorOp_1a514d2b861724430a7a0d3182bbf26d06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLEBTensorOp::setShearViscosity</definition>
        <argsstring>(int amrlev, Real eta)</argsstring>
        <name>setShearViscosity</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>eta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="53" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.cpp" bodystart="82" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBTensorOp_1a386cf912b2462e16023d9dd81c527552" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLEBTensorOp::setBulkViscosity</definition>
        <argsstring>(int amrlev, const Array&lt; MultiFab const *, AMREX_SPACEDIM &gt; &amp;kappa)</argsstring>
        <name>setBulkViscosity</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> const *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>kappa</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="55" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.cpp" bodystart="88" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBTensorOp_1a0e7d54919f40ee816e333ba1d531ecb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLEBTensorOp::setBulkViscosity</definition>
        <argsstring>(int amrlev, Real kappa)</argsstring>
        <name>setBulkViscosity</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>kappa</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="56" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.cpp" bodystart="97" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBTensorOp_1a7c8d573df03c82ad4c1bbb8cec38f6aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLEBTensorOp::setEBShearViscosity</definition>
        <argsstring>(int amrlev, MultiFab const &amp;eta)</argsstring>
        <name>setEBShearViscosity</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> const &amp;</type>
          <declname>eta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="58" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.cpp" bodystart="106" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBTensorOp_1a95ede9e3771119992924c74dbbd6a83d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLEBTensorOp::setEBShearViscosity</definition>
        <argsstring>(int amrlev, Real eta)</argsstring>
        <name>setEBShearViscosity</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>eta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="59" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.cpp" bodystart="112" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBTensorOp_1ad4578df66187d70b495bee32c9833c90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLEBTensorOp::setEBShearViscosityWithInflow</definition>
        <argsstring>(int amrlev, MultiFab const &amp;eta, MultiFab const &amp;eb_vel)</argsstring>
        <name>setEBShearViscosityWithInflow</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> const &amp;</type>
          <declname>eta</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> const &amp;</type>
          <declname>eb_vel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="60" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.cpp" bodystart="118" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBTensorOp_1a3aa0e1f0a27c29c4cf2f73d97c19e6b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLEBTensorOp::setEBBulkViscosity</definition>
        <argsstring>(int amrlev, MultiFab const &amp;kappa)</argsstring>
        <name>setEBBulkViscosity</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> const &amp;</type>
          <declname>kappa</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="62" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.cpp" bodystart="124" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBTensorOp_1a60aa035c7f58be6547e1fc06c25b55ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLEBTensorOp::setEBBulkViscosity</definition>
        <argsstring>(int amrlev, Real eta)</argsstring>
        <name>setEBBulkViscosity</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>eta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="63" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.cpp" bodystart="131" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBTensorOp_1ad5e85d6b70f2ee501328d4ec5efb0771" prot="public" static="no" const="yes" explicit="no" inline="yes" final="yes" virt="virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>virtual int amrex::MLEBTensorOp::getNComp</definition>
        <argsstring>() const final override</argsstring>
        <name>getNComp</name>
        <reimplements refid="classamrex_1_1MLEBABecLap_1a2f6702ea1b79e9775bf8937f165ec6fd">getNComp</reimplements>
        <briefdescription>
<para>Return number of components. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="65" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" bodystart="65" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBTensorOp_1a6fd32c1815462061d634ad81818e348f" prot="public" static="no" const="yes" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool amrex::MLEBTensorOp::isCrossStencil</definition>
        <argsstring>() const final override</argsstring>
        <name>isCrossStencil</name>
        <reimplements refid="classamrex_1_1MLEBABecLap_1a8d6575333ae596ac283e95b748fb84b4">isCrossStencil</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="67" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" bodystart="67" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBTensorOp_1a89e3f55449f2d482de028071c240ec8c" prot="public" static="no" const="yes" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool amrex::MLEBTensorOp::isTensorOp</definition>
        <argsstring>() const final override</argsstring>
        <name>isTensorOp</name>
        <reimplements refid="classamrex_1_1MLCellLinOpT_1aae0589f189ee2d39dadca3a308e3df9b">isTensorOp</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="68" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" bodystart="68" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBTensorOp_1ab6dd50ea71733ee23625ef3fe6634d98" prot="public" static="no" const="yes" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool amrex::MLEBTensorOp::needsUpdate</definition>
        <argsstring>() const final override</argsstring>
        <name>needsUpdate</name>
        <reimplements refid="classamrex_1_1MLEBABecLap_1a248e016a259d04af443355f6340e0898">needsUpdate</reimplements>
        <briefdescription>
<para>Does it need update if it&apos;s reused? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="70" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" bodystart="70" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBTensorOp_1a3c4aac7c4c8cec7458fd1b5b3ac8c3f4" prot="public" static="no" const="no" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex::MLEBTensorOp::update</definition>
        <argsstring>() final override</argsstring>
        <name>update</name>
        <reimplements refid="classamrex_1_1MLEBABecLap_1ad6b4be6cef1783fdb223e5aa7eb50343">update</reimplements>
        <briefdescription>
<para>Update for reuse. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="73" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" bodystart="73" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBTensorOp_1adb58fe08c96787422aaf6449a03a76e8" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLEBTensorOp::prepareForSolve</definition>
        <argsstring>() final override</argsstring>
        <name>prepareForSolve</name>
        <reimplements refid="classamrex_1_1MLEBABecLap_1a10d9a42df59b0c48c0de0bc3a2b41cca">prepareForSolve</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="77" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.cpp" bodystart="140" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBTensorOp_1abe98c1ca87f919a66405ece51d590f07" prot="public" static="no" const="yes" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool amrex::MLEBTensorOp::isSingular</definition>
        <argsstring>(int) const final override</argsstring>
        <name>isSingular</name>
        <reimplements refid="classamrex_1_1MLEBABecLap_1accc281e18237ce18823e3a1a00cbbf01">isSingular</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <briefdescription>
<para>Is it singular on given AMR level? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="78" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" bodystart="78" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBTensorOp_1a82e9a304ae27837aa45c9215df9d2b15" prot="public" static="no" const="yes" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool amrex::MLEBTensorOp::isBottomSingular</definition>
        <argsstring>() const final override</argsstring>
        <name>isBottomSingular</name>
        <reimplements refid="classamrex_1_1MLEBABecLap_1a74d6ab8dcd6375bed793437c83271aaa">isBottomSingular</reimplements>
        <briefdescription>
<para>Is the bottom of MG singular? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="79" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" bodystart="79" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBTensorOp_1a492bdb86a17eff7aa7b01a99d68eefed" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLEBTensorOp::apply</definition>
        <argsstring>(int amrlev, int mglev, MultiFab &amp;out, MultiFab &amp;in, BCMode bc_mode, StateMode s_mode, const MLMGBndry *bndry=nullptr) const final override</argsstring>
        <name>apply</name>
        <reimplements refid="classamrex_1_1MLEBABecLap_1a8e392e42b5c238124145af83776d575a">apply</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLCellLinOpT_1a5f24e3a713313778626619bfd96ebc96" kindref="member">BCMode</ref></type>
          <declname>bc_mode</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLCellLinOpT_1afaa558995ac0e6dace1b2539572250a7" kindref="member">StateMode</ref></type>
          <declname>s_mode</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a9214b7c07d9c296122f7418f73f798e9" kindref="member">MLMGBndry</ref> *</type>
          <declname>bndry</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="81" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.cpp" bodystart="201" bodyend="289"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBTensorOp_1a739281050ab5aebe8d61a56992049a58" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLEBTensorOp::compFlux</definition>
        <argsstring>(int amrlev, const Array&lt; MultiFab *, AMREX_SPACEDIM &gt; &amp;fluxes, MultiFab &amp;sol, Location loc) const override</argsstring>
        <name>compFlux</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>fluxes</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLCellABecLapT_1a97dd28df6c3a612116bc4d4f95fb98fb" kindref="member">Location</ref></type>
          <declname>loc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="83" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.cpp" bodystart="503" bodyend="610"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBTensorOp_1af68d7a6c4f6bf5075b2263eaece90f21" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLEBTensorOp::compVelGrad</definition>
        <argsstring>(int amrlev, const Array&lt; MultiFab *, AMREX_SPACEDIM &gt; &amp;fluxes, MultiFab &amp;sol, Location loc) const</argsstring>
        <name>compVelGrad</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>fluxes</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLCellABecLapT_1a97dd28df6c3a612116bc4d4f95fb98fb" kindref="member">Location</ref></type>
          <declname>loc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="86" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.cpp" bodystart="613" bodyend="842"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBTensorOp_1a6cf6cb52bc1116d3bae93ea118d55096" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLEBTensorOp::applyBCTensor</definition>
        <argsstring>(int amrlev, int mglev, MultiFab &amp;vel, BCMode bc_mode, StateMode s_mode, const MLMGBndry *bndry) const</argsstring>
        <name>applyBCTensor</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLCellLinOpT_1a5f24e3a713313778626619bfd96ebc96" kindref="member">BCMode</ref></type>
          <declname>bc_mode</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLCellLinOpT_1afaa558995ac0e6dace1b2539572250a7" kindref="member">StateMode</ref></type>
          <declname>s_mode</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a9214b7c07d9c296122f7418f73f798e9" kindref="member">MLMGBndry</ref> *</type>
          <declname>bndry</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="106" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp_bc.cpp" bodystart="8" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBTensorOp_1a786a65eb6237c5c0072d107f3670911b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLEBTensorOp::compCrossTerms</definition>
        <argsstring>(int amrlev, int mglev, MultiFab const &amp;mf, const MLMGBndry *bndry) const</argsstring>
        <name>compCrossTerms</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> const &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a9214b7c07d9c296122f7418f73f798e9" kindref="member">MLMGBndry</ref> *</type>
          <declname>bndry</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="108" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.cpp" bodystart="292" bodyend="500"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classamrex_1_1MLEBTensorOp_1a6921ed5b8a0013c3264369854a7d0f12" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLEBTensorOp::setBCoeffs</definition>
        <argsstring>(int amrlev, const Array&lt; MultiFab const *, AMREX_SPACEDIM &gt; &amp;beta, Location a_beta_loc)=delete</argsstring>
        <name>setBCoeffs</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> const *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>beta</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLCellABecLapT_1a97dd28df6c3a612116bc4d4f95fb98fb" kindref="member">Location</ref></type>
          <declname>a_beta_loc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="99" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBTensorOp_1a7f36dae9f70a37ded92faab9a89b4a52" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLEBTensorOp::setEBDirichlet</definition>
        <argsstring>(int amrlev, const MultiFab &amp;phi, const MultiFab &amp;beta)=delete</argsstring>
        <name>setEBDirichlet</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>beta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="101" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBTensorOp_1a4fd75863f9948f2fc1c82336088f1d51" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLEBTensorOp::setEBHomogDirichlet</definition>
        <argsstring>(int amrlev, const MultiFab &amp;beta)=delete</argsstring>
        <name>setEBHomogDirichlet</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>beta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="102" column="10"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>amrex::MLEBTensorOp</label>
        <link refid="classamrex_1_1MLEBTensorOp"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>amrex::MLEBABecLap</label>
        <link refid="classamrex_1_1MLEBABecLap"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>amrex::MLCellLinOpT&lt; MF &gt;</label>
        <link refid="classamrex_1_1MLCellLinOpT"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>amrex::MLLinOpT&lt; MF &gt;</label>
        <link refid="classamrex_1_1MLLinOpT"/>
      </node>
      <node id="3">
        <label>MLCellABecLap</label>
        <link refid="classamrex_1_1MLCellABecLapT"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>amrex::MLEBTensorOp</label>
        <link refid="classamrex_1_1MLEBTensorOp"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="30" relation="usage">
          <edgelabel>m_eb_kappa</edgelabel>
        </childnode>
        <childnode refid="33" relation="usage">
          <edgelabel>m_kappa</edgelabel>
          <edgelabel>m_tauflux</edgelabel>
        </childnode>
      </node>
      <node id="28">
        <label>amrex::Vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::MLCellLinOpT::BndryCondLoc &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="13">
        <label>amrex::IntVect</label>
        <link refid="classamrex_1_1IntVect"/>
        <childnode refid="13" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>T</label>
      </node>
      <node id="32">
        <label>amrex::Vector&lt; std::unique_ptr&lt; amrex::MultiFab &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11">
        <label>Real</label>
      </node>
      <node id="7">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="8" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="27">
        <label>amrex::Vector&lt; amrex::Vector&lt; RT &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="12">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::BoxArray &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="24">
        <label>amrex::Vector&lt; std::unique_ptr&lt; amrex::BndryRegisterT&lt; MF &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="14">
        <label>std::unique_ptr&lt; amrex::MLLinOpT::CommContainer &gt;</label>
      </node>
      <node id="25">
        <label>amrex::Vector&lt; std::unique_ptr&lt; amrex::MLMGBndryT&lt; MF &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="21">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::BndryRegisterT&lt; MF &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="15">
        <label>amrex::Vector&lt; int &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="22">
        <label>amrex::Vector&lt; amrex::YAFluxRegisterT&lt; MF &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::Geometry &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>amrex::RealVect</label>
        <link refid="classamrex_1_1RealVect"/>
        <childnode refid="10" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>vect</edgelabel>
        </childnode>
      </node>
      <node id="19">
        <label>amrex::Vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::FabFactory&lt; FAB &gt; &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>amrex::MLEBABecLap</label>
        <link refid="classamrex_1_1MLEBABecLap"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="30" relation="usage">
          <edgelabel>m_a_coeffs</edgelabel>
        </childnode>
        <childnode refid="31" relation="usage">
          <edgelabel>m_cc_mask</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>m_is_singular</edgelabel>
        </childnode>
        <childnode refid="32" relation="usage">
          <edgelabel>m_eb_phi</edgelabel>
        </childnode>
        <childnode refid="33" relation="usage">
          <edgelabel>m_b_coeffs</edgelabel>
        </childnode>
        <childnode refid="34" relation="usage">
          <edgelabel>m_eb_b_coeffs</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>m_a_scalar</edgelabel>
          <edgelabel>m_b_scalar</edgelabel>
        </childnode>
      </node>
      <node id="34">
        <label>amrex::Vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::MultiFab &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="16">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::DistributionMapping &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>amrex::Vector&lt; std::unique_ptr&lt; MF &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="18">
        <label>amrex::Vector&lt; amrex::IntVect &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="30">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::MultiFab &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="23">
        <label>amrex::Vector&lt; std::unique_ptr&lt; amrex::iMultiFab &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="17">
        <label>amrex::Vector&lt; Array&lt; BCType, AMREX_SPACEDIM &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>amrex::MLCellLinOpT&lt; MF &gt;</label>
        <link refid="classamrex_1_1MLCellLinOpT"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="21" relation="usage">
          <edgelabel>m_undrrelxr</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>m_robin_bcval</edgelabel>
        </childnode>
        <childnode refid="22" relation="usage">
          <edgelabel>m_fluxreg</edgelabel>
        </childnode>
        <childnode refid="23" relation="usage">
          <edgelabel>m_norm_fine_mask</edgelabel>
        </childnode>
        <childnode refid="24" relation="usage">
          <edgelabel>m_crse_cor_br</edgelabel>
          <edgelabel>m_crse_sol_br</edgelabel>
        </childnode>
        <childnode refid="25" relation="usage">
          <edgelabel>m_bndry_cor</edgelabel>
          <edgelabel>m_bndry_sol</edgelabel>
        </childnode>
        <childnode refid="26" relation="usage">
          <edgelabel>m_maskvals</edgelabel>
        </childnode>
        <childnode refid="27" relation="usage">
          <edgelabel>m_volinv</edgelabel>
        </childnode>
        <childnode refid="28" relation="usage">
          <edgelabel>m_bcondloc</edgelabel>
        </childnode>
      </node>
      <node id="20">
        <label>amrex::LPInfo</label>
        <link refid="structamrex_1_1LPInfo"/>
      </node>
      <node id="29">
        <label>amrex::Vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::iMultiFab &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>amrex::MLLinOpT&lt; MF &gt;</label>
        <link refid="classamrex_1_1MLLinOpT"/>
        <childnode refid="6" relation="usage">
          <edgelabel>levelbc_raii</edgelabel>
          <edgelabel>robin_a_raii</edgelabel>
          <edgelabel>robin_b_raii</edgelabel>
          <edgelabel>robin_f_raii</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>m_geom</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>m_coarse_bc_loc</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>m_grids</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>m_ixtype</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>m_raii_comm</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>m_amr_ref_ratio</edgelabel>
          <edgelabel>m_domain_covered</edgelabel>
          <edgelabel>m_num_mg_levels</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>m_dmap</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>m_hibc</edgelabel>
          <edgelabel>m_hibc_orig</edgelabel>
          <edgelabel>m_lobc</edgelabel>
          <edgelabel>m_lobc_orig</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>mg_coarsen_ratio_vec</edgelabel>
        </childnode>
        <childnode refid="19" relation="usage">
          <edgelabel>m_factory</edgelabel>
        </childnode>
        <childnode refid="20" relation="usage">
          <edgelabel>info</edgelabel>
        </childnode>
      </node>
      <node id="31">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::iMultiFab &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="26">
        <label>amrex::Vector&lt; amrex::Vector&lt; Array&lt; amrex::MultiMask, 2 *AMREX_SPACEDIM &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>MLCellABecLap</label>
        <link refid="classamrex_1_1MLCellABecLapT"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="29" relation="usage">
          <edgelabel>m_overset_mask</edgelabel>
        </childnode>
        <childnode refid="20" relation="usage">
          <edgelabel>m_lpinfo_arg</edgelabel>
        </childnode>
      </node>
      <node id="33">
        <label>amrex::Vector&lt; amrex::Vector&lt; Array&lt; amrex::MultiFab, AMREX_SPACEDIM &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="26" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" bodystart="28" bodyend="110"/>
    <listofallmembers>
      <member refid="classamrex_1_1MLCellABecLapT_1a2be65b6a2c0a68b5a8954d4be9ace8d7" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>addInhomogNeumannFlux</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a10ebb5d290f3579d4c3e69aa56cf6251" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>AMRRefRatio</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ae88bc615f7fa178e54ea32899aae6506" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>AMRRefRatio</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1a492bdb86a17eff7aa7b01a99d68eefed" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>apply</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a8755fe1a7a09db77e7d810dd9dfdb107" prot="public" virt="virtual" ambiguityscope="amrex::MLCellABecLapT::"><scope>amrex::MLEBTensorOp</scope><name>apply</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a0dd52a0063675d0af5cd1e3bb8576a24" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>applyBC</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a251a2f1de9fea9f0d0230e04b19c078e" prot="public" virt="virtual" ambiguityscope="amrex::MLCellABecLapT::"><scope>amrex::MLEBTensorOp</scope><name>applyBC</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1a6cf6cb52bc1116d3bae93ea118d55096" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>applyBCTensor</name></member>
      <member refid="classamrex_1_1MLCellABecLapT_1ae96c2381214550fc17f99eeac401eeee" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>applyInhomogNeumannTerm</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a87bccd5330e4295f7108cf56c0a1cd20" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>applyMetricTerm</name></member>
      <member refid="classamrex_1_1MLCellABecLapT_1a78233be19743ed1432077186937f51cc" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>applyOverset</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a118fb8de26be373907091016e1207645" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>averageDownAndSync</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a55ed8c27b04966126b3bd76c92735dbf" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>averageDownCoeffs</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a59adc33a4b8674690f5560087440126e" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>averageDownCoeffsSameAmrLevel</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a92fdeee03f9af3866563ba880cd81879" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>averageDownCoeffsToCoarseAmrLevel</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a184c8bb62e01581cfc6d1d936f7eeca0" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>averageDownSolutionRHS</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a116deee661b635f1872ac7eded5f28a7" prot="public" virt="virtual" ambiguityscope="amrex::MLCellABecLapT::"><scope>amrex::MLEBTensorOp</scope><name>averageDownSolutionRHS</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a33f2c8cbf69e58cbe60e9be048181f5d" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>avgDownResAmr</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a08f1cfd6afc79121fce39e027f15cac5" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>avgDownResMG</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a5f24e3a713313778626619bfd96ebc96" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>BCMode</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a6ce4d3fd41e76507b017ff826a52c62e" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>BCTuple</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a507cfffa6d7098331e08cc35e7c19e18" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>BCType</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a2859b0cddde955b30ccf90c0af86e897" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>BottomCommunicator</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a6b2ce3775a4c209860db63635f969640" prot="private" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>checkPoint</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a2ac85c71c7e15137bd62cbfd04cc52ed" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>Communicator</name></member>
      <member refid="classamrex_1_1MLLinOpT_1abb542d962e83dd7479852f83fd3575bf" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>compactify</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a3f7e812180f57035bfe85cb7d10b26e9" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>compactify</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1a786a65eb6237c5c0072d107f3670911b" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>compCrossTerms</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1a739281050ab5aebe8d61a56992049a58" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>compFlux</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1ae7f32e1b953ea4ef5643501e91560d32" prot="public" virt="virtual" ambiguityscope="amrex::MLEBABecLap::"><scope>amrex::MLEBTensorOp</scope><name>compFlux</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1afc09237149ffffd61a4fc209955f9ff8" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>compGrad</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a2ed74b3dc4e3c46d2cd589cbb8301e94" prot="public" virt="virtual" ambiguityscope="amrex::MLCellABecLapT::"><scope>amrex::MLEBTensorOp</scope><name>compGrad</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1af28f1c33141158bd515093c3741d7124" prot="private" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>computeVolInv</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1af68d7a6c4f6bf5075b2263eaece90f21" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>compVelGrad</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a4b8c0b3d1fd866b3b9a787bdcb056e77" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>copyNSolveSolution</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a51480d2022ad9346d6eb11f3cbfd631a" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>correctionResidual</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1ac6b1462f39aa6a60a2bfd0cd6e687aee" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>define</name></member>
      <member refid="classamrex_1_1MLCellABecLapT_1aa597fe7d39f7a3049fefccff91ddb693" prot="public" virt="non-virtual" ambiguityscope="amrex::MLCellABecLapT::"><scope>amrex::MLEBTensorOp</scope><name>define</name></member>
      <member refid="classamrex_1_1MLCellABecLapT_1acdef494a31a555b648c2eae8cdd8cbb9" prot="public" virt="non-virtual" ambiguityscope="amrex::MLCellABecLapT::"><scope>amrex::MLEBTensorOp</scope><name>define</name></member>
      <member refid="classamrex_1_1MLLinOpT_1abe69b9ebe0a04b3da502ac8606871680" prot="public" virt="non-virtual" ambiguityscope="amrex::MLLinOpT::"><scope>amrex::MLEBTensorOp</scope><name>define</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a95432ea80c81e30e58ffda678f2d926d" prot="private" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>defineAuxData</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a3b583520578b832e04ea2baf3ea48917" prot="private" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>defineBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a5aa9449241f9867021b4d5300284a76a" prot="private" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>defineGrids</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a33e77669d6f0da47f28959678db508e4" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>doAgglomeration</name></member>
      <member refid="classamrex_1_1MLLinOpT_1add56650e9ecd05e16a7f2f71bcbe7c9b" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>doConsolidation</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aa99dea32527b34287aa64542b5545256" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>doSemicoarsening</name></member>
      <member refid="classamrex_1_1MLLinOpT_1adb9b0f44a3e66fbefa2310385747427b" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>enforceSingularSolvable</name></member>
      <member refid="classamrex_1_1MLCellABecLapT_1a9e4c8149cff8a651f45c0f5b24a0db54" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>FAB</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a3ca782a47b55ca765b4fd9eeda174d36" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>Factory</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1ae757c91789ec2b174e27f330d200c8f0" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>Fapply</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a3841e981caa197033fcd74eee93f0daf" prot="public" virt="pure-virtual" ambiguityscope="amrex::MLCellABecLapT::"><scope>amrex::MLEBTensorOp</scope><name>Fapply</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a200c1fea9d1ff4f7f3f6cc97a645bce8" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>FFlux</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1af69b48f91ccf0266c5d219c0c24ea3c2" prot="public" virt="pure-virtual" ambiguityscope="amrex::MLCellABecLapT::"><scope>amrex::MLEBTensorOp</scope><name>FFlux</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1ac44f404584644c6cb3f7548de48206d0" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>fixSolvabilityByOffset</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a6d19a8694d9c4ef50a169f50822220e4" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>Fsmooth</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a628b2bdf5b3152a9d223acda5d8e17d0" prot="public" virt="pure-virtual" ambiguityscope="amrex::MLCellABecLapT::"><scope>amrex::MLEBTensorOp</scope><name>Fsmooth</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a02b3d2ea4535daf60276e9014571f955" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>Geom</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a28402657d9216f6ef38835ab562ee58b" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>get_d0</name></member>
      <member refid="classamrex_1_1MLLinOpT_1adad8c3e9a304cc409d473b2d44aa4520" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>get_d1</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1aaebd085dc9e01abe1c027b57e5c89971" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>getACoeffs</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1ad851a01b301637515a70e6902fe56d40" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>getAScalar</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1add0dbd605a9841007492a8d9c3e4b007" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>getBCoeffs</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a31195eef598735476044e840046bd295" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>getBScalar</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a5e588d148e2672c3e82c8f40d5826671" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>getDefaultBottomSolver</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a5bc7b648df895d5ff5402e2ddcf9605c" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>getEBFluxes</name></member>
      <member refid="classamrex_1_1MLLinOpT_1af823f5b435d2f329595b333c82080e35" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>getEnforceSingularSolvable</name></member>
      <member refid="classamrex_1_1MLCellABecLapT_1a47c09599ba7bee546dfb637ac8962fa0" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>getFluxes</name></member>
      <member refid="classamrex_1_1MLCellABecLapT_1ad86670e0d6ce7f6cdc72e456fad67faf" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>getFluxes</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a4e2a07d995c0fc8d2dfe5be544501eea" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>getMaxOrder</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1ad5e85d6b70f2ee501328d4ec5efb0771" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>getNComp</name></member>
      <member refid="classamrex_1_1MLLinOpT_1afe8257f1157b08104c622bedb11b0d00" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>getNGrow</name></member>
      <member refid="classamrex_1_1MLCellABecLapT_1a8ab63e064604cb872297d224250c4921" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>getOversetMask</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a08e68e2870cd7367dd09d2ef777261b3" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>getSolvabilityOffset</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a647cd4352c3719aa23545a8e0f88b562" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>hasBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a894d1f80e83452c32470d42e05947e13" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>hasHiddenDimension</name></member>
      <member refid="classamrex_1_1MLLinOpT_1afdb203f24caba5241fa95fad173cfae7" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>hasInhomogNeumannBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a40cc3ea13c4a150195a6198e33f1eac2" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>hasRobinBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ae6a081e88ffb4aafb123a7eb644ebd72" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>HiBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aa0c3b0c5a4e23b9248d18138229aec76" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>hiddenDirection</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ad0412f399e1e29e200a2451b371b0133" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>info</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1ac40a7cc1f424156f36d3d8b2f0254ae7" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>interpAssign</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a15a2cb048460b6619e61e66fb3a8e3d5" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>interpolation</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a7a7909cddc98ec2abe949ee2f043e817" prot="public" virt="virtual" ambiguityscope="amrex::MLCellABecLapT::"><scope>amrex::MLEBTensorOp</scope><name>interpolation</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1ae4108ba43d2b66494dd56578879a29a9" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>interpolationAmr</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a56ed51708c4e70b4ec224f4d0c2f2ff9" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>isBottomActive</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1a82e9a304ae27837aa45c9215df9d2b15" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>isBottomSingular</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a107c8a8b4f0b4d5209357ab3a8225671" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>isCellCentered</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1a6fd32c1815462061d634ad81818e348f" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>isCrossStencil</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a566f171eb405174c2eea99667a76cdb1" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>isEBDirichlet</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a1666fe3156e40b2fbd7a44166f70ce11" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>isMFIterSafe</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1abe98c1ca87f919a66405ece51d590f07" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>isSingular</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1a89e3f55449f2d482de028071c240ec8c" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>isTensorOp</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a3ac078eb634767e8e812746b8327a6b5" prot="private" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>levelbc_raii</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a60f337c8a71be69643d62c774a536dcd" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>LoBC</name></member>
      <member refid="classamrex_1_1MLCellABecLapT_1a97dd28df6c3a612116bc4d4f95fb98fb" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>Location</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a48c0efb6e525e5c901c1ee34fa5119ca" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_a_coeffs</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1ac43a9c8728bb7861415d80283d41e064" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_a_scalar</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a520a29dd5773acdba2c227d316e059a4" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_amr_ref_ratio</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1ad631dff72b03c8a0d629bd735a63078e" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_b_coeffs</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a1fb977f5a6b0c8682e5f658a4dc9db0c" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_b_scalar</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a8ea2fb547b5b9b37d88880948073e00c" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_bcondloc</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1afc12bcb23ed82f37ceae7da2d6f44eea" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_beta_loc</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1ac667791f6b37a42e55ef25267bc78fa9" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_bndry_cor</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a2b8a625f55f16b9c5b620a82021f17f4" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_bndry_sol</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aee13b9d32b909adb7903586bfa352855" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_bottom_comm</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a820de6c415b8f6911cf96c94788cb102" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_cc_mask</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a1a730552d4db500b99496712dec21038" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_coarse_bc_loc</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a1b5ecb2a824287420c4f6acf8540b2f6" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_coarse_data_crse_ratio</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a02f8f07d9d724566c7aea603ea1248a6" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_coarse_data_for_bc</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a3bf0a8559fbed2ec5297f97590e92cb0" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_coarse_data_for_bc_raii</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a892cce2e429f77cee7360f2859ceda4d" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_crse_cor_br</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1adf51879b81fbd24f9ccb7b9f0142d63b" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_crse_sol_br</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a52e548305943a2d3a1b1731eb5855b73" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_default_comm</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a67d38036b0d30275047637a1ab739ca6" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_dmap</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a452827d7dc1f2d84d701248f05e908af" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_do_agglomeration</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a0e1db3374227c3c6043734d42bbbc795" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_do_consolidation</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a3f65a4345945e648b7170635a33c9557" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_do_semicoarsening</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a1375eac46dcbfeb8155a251b904cc727" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_domain_bloc_hi</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a437d5bd996be47153207c90d286b336c" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_domain_bloc_lo</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aa83ed4b753b00606bcdff3573a6f0824" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_domain_covered</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a1644cbea6bac7ad1b9ae4a039cf96cc4" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_eb_b_coeffs</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1aa52b74715e6fd800ad391684b5a2321b" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_eb_kappa</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a25296274131127e2be522bd86b57be2c" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_eb_phi</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a07a2cce97f1c77f36f8a241090543b8e" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_factory</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a22cdf5d6b191ab3c883b7167e9f94ebe" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_fluxreg</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aab42ad785f4263767af0a0e7306cdf8a" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_geom</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a4458bc19263fdcf39df3665681ce3aef" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_grids</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1aed368e6d9fa6a5cb5b193e4368d39cb7" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_has_eb_kappa</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1a1ac24f61712e93b25ebcd55639f30ce2" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_has_kappa</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1ada8bf2b1964f2023282e23ac54a948f4" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_has_metric_term</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ad073f92f684b4d5ea20718fbc396ef40" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_hibc</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a2cf9f506d5cee3aeaaae8b9930e7866d" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_hibc_orig</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a11297b15320727df4d9e32d3b8085c06" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_is_eb_inhomog</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a69f0aa528f3437aed6e5fbc26d3f1820" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_is_singular</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a1144a9c3d743270ff29c8e9f582581c0" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_ixtype</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1a1ab2cb2c4fcbbbf0e3fdedad325fd6b9" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_kappa</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a9f2e0c10c385f9bee16af5fed5f4e9c9" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_lobc</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a726dec103c10ea9c84e649b9c8200767" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_lobc_orig</name></member>
      <member refid="classamrex_1_1MLCellABecLapT_1a2a4ce226902dbe904fa45173845d4cac" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_lpinfo_arg</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a9c470f145301b98fe0938ac6241284eb" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_maskvals</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a85df3961f7b0ad04d0ad1463ea1e24da" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_ncomp</name></member>
      <member refid="classamrex_1_1MLLinOpT_1abc7eaafcc5804d269386c6bdbd13181d" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_needs_coarse_data_for_bc</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1a15abc2cecf258e0967f5803ef5c5729e" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_needs_update</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1af29ed070015666e58d890685cb491900" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_norm_fine_mask</name></member>
      <member refid="classamrex_1_1MLLinOpT_1afe9761ce7b771e51e0b47d415779ce93" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_num_amr_levels</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a64262a62291404dab652353158886cce" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_num_mg_levels</name></member>
      <member refid="classamrex_1_1MLCellABecLapT_1aa1bc328cdef65e6dfab478914c2913d7" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_overset_mask</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aa96812cd049f02fe827fc1573fa0626e" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_parent</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1ae0ea21faa4cc1aeadf8641b37d8cf59f" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_phi_loc</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a3e96c4035b1315b80c6301329695f86e" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_raii_comm</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a95a0dd3f6700b3da5b020a66ef726dff" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_robin_bcval</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1abb70c0cd0ba0b1da3fe27e69bb2fe792" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_tauflux</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1ab50c53ea7ff9c53bf37ac816e0663406" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_undrrelxr</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1ad73d9eed28e8d9d32cf54327e21c5225" prot="private" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_volinv</name></member>
      <member refid="classamrex_1_1MLLinOpT_1afb48e62b81e97ddffb92d7b7cea09c55" prot="protected" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>make</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a223df72e572182f58b611c220487fe20" prot="protected" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>make</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a54590ff0d7670660d6520c753f6fbbbb" prot="private" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>makeAgglomeratedDMap</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a457c82b4259eab9916ca4e5f4493b373" prot="protected" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>makeAlias</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a44952a0322f09ae53fe7e26669f85de1" prot="protected" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>makeCoarseAmr</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a9991da8ff85055f29349c9f5b8246c65" prot="protected" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>makeCoarseMG</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a6574c3f3a840f96723f9a10ccb2eeb69" prot="private" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>makeConsolidatedDMap</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a95879abefc0ff8610b6534d919892a1a" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>makeFactory</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a1574dd8857314d9658c28c26adc6ce12" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>makeNGrids</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1acd7d1f624947d653cfb4b3ea3f2fd193" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>makeNLinOp</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ad05360dc7ba30a94505918519dea299c" prot="private" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>makeSubCommunicator</name></member>
      <member refid="classamrex_1_1MLLinOpT_1abddb56c317b794cc672b446046784d95" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>maxorder</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a958be92529c763a85a81c3fc03e1e5af" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>mg_box_min_width</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a4ab72cdcf8c7d1746bd1e03fac99d808" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>mg_coarsen_ratio</name></member>
      <member refid="classamrex_1_1MLLinOpT_1abf470fae49c59ccd4cbc058ebfdab2a2" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>mg_coarsen_ratio_vec</name></member>
      <member refid="classamrex_1_1MLLinOpT_1adb9b30d3eda7f6dd1d77740f58674c84" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>mg_domain_min_width</name></member>
      <member refid="classamrex_1_1MLCellABecLapT_1a5fb31d4d9e3190fb1c965bbaf218d733" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>MLCellABecLapT</name></member>
      <member refid="classamrex_1_1MLCellABecLapT_1a241cb451732d5ad6ab42c46ad4e1f597" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>MLCellABecLapT</name></member>
      <member refid="classamrex_1_1MLCellABecLapT_1a5f871352ed5f3af819701d945c2de871" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>MLCellABecLapT</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1ab6bc4d82971ae75fc206df8d00d15ef6" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>MLCellLinOpT</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a54558ff60dc7b62ac803e8dd8a5c1816" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>MLCellLinOpT</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1ab75b6f4249c1408041b529732b179d32" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>MLCellLinOpT</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1aa9a96f2bc072cb181d9cce454e3da098" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>MLEBABecLap</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a59f358ede4763b7153642b4e0aae8de8" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>MLEBABecLap</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a14181cc0ff70a2ed471cdb3a3fc2bdb6" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>MLEBABecLap</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a0b7f1e4cc90469a42eb10c8792eced13" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>MLEBABecLap</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1adccad5fb53a52c9b7227847cfc4a636d" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>MLEBTensorOp</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1a4f997af4135dcb79775a5d7f7ac3b678" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>MLEBTensorOp</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1af0d70e756af559a4082443914b134b0d" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>MLEBTensorOp</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1a16a15944a17ebe8341932a53483ef2b6" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>MLEBTensorOp</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ab768833f0df0eb419284243a6940153e" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>MLLinOpT</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aae73abc3efc9dcc4b381ff020e043c68" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>MLLinOpT</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a709f5c12d16e1e5e191a1d56df622173" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>MLLinOpT</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a2fb16a53d8b6d9dd08306f89a535c617" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>name</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a09c567773980f90aa59d90d3235ded9c" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>NAMRLevels</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a7e2d1058dd843b67192b1aa489e112b6" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>needsCoarseDataForBC</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1ab6dd50ea71733ee23625ef3fe6634d98" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>needsUpdate</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ad1697410f7ce33223a511796bbf9273f" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>NMGLevels</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a1ba4a6db3bd8895f95ac90ff5decc461" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>normalize</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aaa66bfea39287ead35be91ec940d0bb1" prot="public" virt="virtual" ambiguityscope="amrex::MLCellABecLapT::"><scope>amrex::MLEBTensorOp</scope><name>normalize</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a6207e307cf8edda53498feebe2abb2e3" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>normInf</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1ac801f35a398c39c6ae9b42b1e6c29c7a" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1a8217ea65e778d2f86a2f059ec79a6474" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a510cfdf6165c8a08174e71624357bbf9" prot="public" virt="non-virtual" ambiguityscope="amrex::MLEBABecLap::"><scope>amrex::MLEBTensorOp</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1aaa0d12f5f57ddf587493f2c93f516dd8" prot="public" virt="non-virtual" ambiguityscope="amrex::MLEBABecLap::"><scope>amrex::MLEBTensorOp</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLCellABecLapT_1ab5b785aa902dc8bd312b0545966bb36a" prot="public" virt="non-virtual" ambiguityscope="amrex::MLCellABecLapT::"><scope>amrex::MLEBTensorOp</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLCellABecLapT_1a53ae18ac5de6900a4a30e6de3385e25b" prot="public" virt="non-virtual" ambiguityscope="amrex::MLCellABecLapT::"><scope>amrex::MLEBTensorOp</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1abcbc29c6deeba6419b5cd5a67b553cd6" prot="public" virt="non-virtual" ambiguityscope="amrex::MLCellLinOpT::"><scope>amrex::MLEBTensorOp</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a36d76fae0e448ac86582b957eb7b5174" prot="public" virt="non-virtual" ambiguityscope="amrex::MLCellLinOpT::"><scope>amrex::MLEBTensorOp</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aba8d3e06373e96ddac7da02928522796" prot="public" virt="non-virtual" ambiguityscope="amrex::MLLinOpT::"><scope>amrex::MLEBTensorOp</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a9399276c8cadba0d0e513200ab8758c9" prot="public" virt="non-virtual" ambiguityscope="amrex::MLLinOpT::"><scope>amrex::MLEBTensorOp</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a7766bf3ef48ac5508865ef5aa3ef49be" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>postSolve</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1adb58fe08c96787422aaf6449a03a76e8" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>prepareForSolve</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a65abf3895113354dbd34041b96dfb3ba" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>RealTuple</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a35158f8a8bd840468c4dedb08d6726ff" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>reflux</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a43fcad8e24531044114e9572beb28323" prot="protected" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>resizeMultiGrid</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a4e02281f596d4f8d9fc0ccad62f8525b" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>restriction</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1ab4713a678d7c2ac9e1a9c5b027f965c5" prot="public" virt="virtual" ambiguityscope="amrex::MLCellABecLapT::"><scope>amrex::MLEBTensorOp</scope><name>restriction</name></member>
      <member refid="classamrex_1_1MLLinOpT_1afdb609a7a4b9ea229e7b9cc89a8751f7" prot="private" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>robin_a_raii</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a90e6517d0ff6dee31c92101a9249de67" prot="private" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>robin_b_raii</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a451681732629cb75f6a4a9ba29799f44" prot="private" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>robin_f_raii</name></member>
      <member refid="classamrex_1_1MLCellABecLapT_1a7294b2967cfff2e5dd03e746871646ec" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>RT</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ad86c06dbaa4556184fb4dea08186e3c9" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>scaleRHS</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a3897cf202c96a14a8d9733f25c5e750f" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>setACoeffs</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a4c998b02361b80cb5324775e3d58f90b" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>setACoeffs</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1a6921ed5b8a0013c3264369854a7d0f12" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>setBCoeffs</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1aa85c8346fd88d47cf525b9ebd2d64322" prot="public" virt="non-virtual" ambiguityscope="amrex::MLEBABecLap::"><scope>amrex::MLEBTensorOp</scope><name>setBCoeffs</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a9088117f62b7fdf5ddf44a3cccea40eb" prot="public" virt="non-virtual" ambiguityscope="amrex::MLEBABecLap::"><scope>amrex::MLEBTensorOp</scope><name>setBCoeffs</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a41a0bab0f39a7886bee16b3db3253ef7" prot="public" virt="non-virtual" ambiguityscope="amrex::MLEBABecLap::"><scope>amrex::MLEBTensorOp</scope><name>setBCoeffs</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1a386cf912b2462e16023d9dd81c527552" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>setBulkViscosity</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1a0e7d54919f40ee816e333ba1d531ecb8" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>setBulkViscosity</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a1645f2059f3e9816fedfa8b45315d484" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>setCoarseFineBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ad832dbc5dd9ed90db2136815c1c1a190" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>setCoarseFineBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a51edb661205b9d4b77b5acab32d17cd2" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>setCoarseFineBCLocation</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a065b7216ffbd4136592b893066feabc9" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>setDomainBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a472da4d3c20cee50275d2790e18bf046" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>setDomainBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a7dd25019053e84389e2d9226fc5816ed" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>setDomainBCLoc</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1a3aa0e1f0a27c29c4cf2f73d97c19e6b9" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>setEBBulkViscosity</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1a60aa035c7f58be6547e1fc06c25b55ef" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>setEBBulkViscosity</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1a7f36dae9f70a37ded92faab9a89b4a52" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>setEBDirichlet</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1aaa5d24895fc813690a700fff13302d30" prot="public" virt="non-virtual" ambiguityscope="amrex::MLEBABecLap::"><scope>amrex::MLEBTensorOp</scope><name>setEBDirichlet</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a21036dcdb342fa89b6bc11b0cf730d04" prot="public" virt="non-virtual" ambiguityscope="amrex::MLEBABecLap::"><scope>amrex::MLEBTensorOp</scope><name>setEBDirichlet</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1a4fd75863f9948f2fc1c82336088f1d51" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>setEBHomogDirichlet</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a69dc896ed1e3c373ffed1364c14b39ea" prot="public" virt="non-virtual" ambiguityscope="amrex::MLEBABecLap::"><scope>amrex::MLEBTensorOp</scope><name>setEBHomogDirichlet</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a367adfeb7192bf75233d0d3176eb8fd9" prot="public" virt="non-virtual" ambiguityscope="amrex::MLEBABecLap::"><scope>amrex::MLEBTensorOp</scope><name>setEBHomogDirichlet</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1a7c8d573df03c82ad4c1bbb8cec38f6aa" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>setEBShearViscosity</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1a95ede9e3771119992924c74dbbd6a83d" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>setEBShearViscosity</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1ad4578df66187d70b495bee32c9833c90" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>setEBShearViscosityWithInflow</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a28dec45d870edf5fba713b18c53542cf" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>setEnforceSingularSolvable</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1afaf162a4471fc9b3a7121d9579fea518" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>setLevelBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1adc2c4cd3ccc03f6c0f958429b1d1f093" prot="public" virt="non-virtual" ambiguityscope="amrex::MLLinOpT::"><scope>amrex::MLEBTensorOp</scope><name>setLevelBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a2cea879bd6717f7b2f425b1c1aeff724" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>setMaxOrder</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a1b6b64134bb5a73a43da2d2aaefbbf53" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>setPhiOnCentroid</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1ad3027675177497cdb23a984a50ebcb12" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>setScalars</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1a6907d1c2b45662f70a24cc5deef001ca" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>setShearViscosity</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1a514d2b861724430a7a0d3182bbf26d06" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>setShearViscosity</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a135bc97332faf6e4f7f864b45c2b0b69" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>setVerbose</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a04486888c630dc3e4a5258a0e174345c" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>smooth</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1ad6684ea6b055170aad353ee9a4dcc316" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>solutionResidual</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1afaa558995ac0e6dace1b2539572250a7" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>StateMode</name></member>
      <member refid="classamrex_1_1MLCellABecLapT_1ac7b687cd9603d112b33b92f2047f663f" prot="protected" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>supportInhomogNeumannBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aa9b2cbde953686aaf94f7f6442a0ea5c" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>supportNSolve</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aaa1fde319e32db3c05ca0f7fd944c111" prot="protected" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>supportRobinBC</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a8681147e6aa6a83cba4451adda7b719c" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>unapplyMetricTerm</name></member>
      <member refid="classamrex_1_1MLLinOpT_1af5258bf128c18afbb9712ad7230dad8e" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>unimposeNeumannBC</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1a3c4aac7c4c8cec7458fd1b5b3ac8c3f4" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>update</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a6bb9614b2635f9935e7cb8816074a2ef" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>updateCorBC</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a28d4c00dc8448c2c8f10dc519a42ae0f" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>updateSolBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a685caf14f09300309d306d01150eae9a" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>verbose</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a7c044db51cc603481135fb0d75e43e90" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>xdoty</name></member>
      <member refid="classamrex_1_1MLCellABecLapT_1aa3ba0c70bd176947add0ca26b477b7ff" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>~MLCellABecLapT</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1ada8b44ce7756d2d6665e0a1c53da372b" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>~MLCellLinOpT</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a1c3ebe277cdfba5a7bdafca9f0a2672f" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>~MLEBABecLap</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1a5efda34c10df7a5f5d4c738a60c04e9f" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>~MLEBTensorOp</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ac7718af80beb24d049ffad1239e31384" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>~MLLinOpT</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
