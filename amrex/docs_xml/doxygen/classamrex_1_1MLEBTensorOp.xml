<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classamrex_1_1MLEBTensorOp" kind="class" language="C++" prot="public">
    <compoundname>amrex::MLEBTensorOp</compoundname>
    <basecompoundref refid="classamrex_1_1MLEBABecLap" prot="public" virt="non-virtual">amrex::MLEBABecLap</basecompoundref>
    <includes refid="AMReX__MLEBTensorOp_8H" local="no">AMReX_MLEBTensorOp.H</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classamrex_1_1MLEBTensorOp_1a15abc2cecf258e0967f5803ef5c5729e" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::MLEBTensorOp::m_needs_update</definition>
        <argsstring></argsstring>
        <name>m_needs_update</name>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="76" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLEBTensorOp_1a1ac24f61712e93b25ebcd55639f30ce2" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::MLEBTensorOp::m_has_kappa</definition>
        <argsstring></argsstring>
        <name>m_has_kappa</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="78" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLEBTensorOp_1aed368e6d9fa6a5cb5b193e4368d39cb7" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::MLEBTensorOp::m_has_eb_kappa</definition>
        <argsstring></argsstring>
        <name>m_has_eb_kappa</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="79" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLEBTensorOp_1a1ab2cb2c4fcbbbf0e3fdedad325fd6b9" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>, AMREX_SPACEDIM &gt; &gt; &gt;</type>
        <definition>Vector&lt;Vector&lt;Array&lt;MultiFab,AMREX_SPACEDIM&gt; &gt; &gt; amrex::MLEBTensorOp::m_kappa</definition>
        <argsstring></argsstring>
        <name>m_kappa</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="80" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLEBTensorOp_1aa52b74715e6fd800ad391684b5a2321b" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &gt; &gt;</type>
        <definition>Vector&lt;Vector&lt;MultiFab&gt; &gt; amrex::MLEBTensorOp::m_eb_kappa</definition>
        <argsstring></argsstring>
        <name>m_eb_kappa</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="81" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLEBTensorOp_1abb70c0cd0ba0b1da3fe27e69bb2fe792" prot="protected" static="no" mutable="yes">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>, AMREX_SPACEDIM &gt; &gt; &gt;</type>
        <definition>Vector&lt;Vector&lt;Array&lt;MultiFab,AMREX_SPACEDIM&gt; &gt; &gt; amrex::MLEBTensorOp::m_tauflux</definition>
        <argsstring></argsstring>
        <name>m_tauflux</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="82" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" bodystart="82" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1MLEBTensorOp_1adccad5fb53a52c9b7227847cfc4a636d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MLEBTensorOp::MLEBTensorOp</definition>
        <argsstring>()</argsstring>
        <name>MLEBTensorOp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="30" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.cpp" bodystart="13" bodyend="16"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBTensorOp_1a4f997af4135dcb79775a5d7f7ac3b678" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MLEBTensorOp::MLEBTensorOp</definition>
        <argsstring>(const Vector&lt; Geometry &gt; &amp;a_geom, const Vector&lt; BoxArray &gt; &amp;a_grids, const Vector&lt; DistributionMapping &gt; &amp;a_dmap, const LPInfo &amp;a_info, const Vector&lt; EBFArrayBoxFactory const * &gt; &amp;a_factory)</argsstring>
        <name>MLEBTensorOp</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>a_geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &gt; &amp;</type>
          <declname>a_grids</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt; &amp;</type>
          <declname>a_dmap</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1LPInfo" kindref="compound">LPInfo</ref> &amp;</type>
          <declname>a_info</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1EBFArrayBoxFactory" kindref="compound">EBFArrayBoxFactory</ref> const * &gt; &amp;</type>
          <declname>a_factory</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="31" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.cpp" bodystart="18" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBTensorOp_1a5efda34c10df7a5f5d4c738a60c04e9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>amrex::MLEBTensorOp::~MLEBTensorOp</definition>
        <argsstring>()</argsstring>
        <name>~MLEBTensorOp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="37" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.cpp" bodystart="28" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBTensorOp_1af0d70e756af559a4082443914b134b0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MLEBTensorOp::MLEBTensorOp</definition>
        <argsstring>(const MLEBTensorOp &amp;)=delete</argsstring>
        <name>MLEBTensorOp</name>
        <param>
          <type>const <ref refid="classamrex_1_1MLEBTensorOp" kindref="compound">MLEBTensorOp</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="39" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBTensorOp_1a16a15944a17ebe8341932a53483ef2b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MLEBTensorOp::MLEBTensorOp</definition>
        <argsstring>(MLEBTensorOp &amp;&amp;)=delete</argsstring>
        <name>MLEBTensorOp</name>
        <param>
          <type><ref refid="classamrex_1_1MLEBTensorOp" kindref="compound">MLEBTensorOp</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="40" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBTensorOp_1ac801f35a398c39c6ae9b42b1e6c29c7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1MLEBTensorOp" kindref="compound">MLEBTensorOp</ref> &amp;</type>
        <definition>MLEBTensorOp&amp; amrex::MLEBTensorOp::operator=</definition>
        <argsstring>(const MLEBTensorOp &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classamrex_1_1MLEBTensorOp" kindref="compound">MLEBTensorOp</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="41" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBTensorOp_1a8217ea65e778d2f86a2f059ec79a6474" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1MLEBTensorOp" kindref="compound">MLEBTensorOp</ref> &amp;</type>
        <definition>MLEBTensorOp&amp; amrex::MLEBTensorOp::operator=</definition>
        <argsstring>(MLEBTensorOp &amp;&amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1MLEBTensorOp" kindref="compound">MLEBTensorOp</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="42" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBTensorOp_1ac6b1462f39aa6a60a2bfd0cd6e687aee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLEBTensorOp::define</definition>
        <argsstring>(const Vector&lt; Geometry &gt; &amp;a_geom, const Vector&lt; BoxArray &gt; &amp;a_grids, const Vector&lt; DistributionMapping &gt; &amp;a_dmap, const LPInfo &amp;a_info, const Vector&lt; EBFArrayBoxFactory const * &gt; &amp;a_factory)</argsstring>
        <name>define</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>a_geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &gt; &amp;</type>
          <declname>a_grids</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt; &amp;</type>
          <declname>a_dmap</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1LPInfo" kindref="compound">LPInfo</ref> &amp;</type>
          <declname>a_info</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1EBFArrayBoxFactory" kindref="compound">EBFArrayBoxFactory</ref> const * &gt; &amp;</type>
          <declname>a_factory</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="44" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.cpp" bodystart="32" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBTensorOp_1ad521c9e02197e28b372afcb7cc90a314" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLEBTensorOp::setShearViscosity</definition>
        <argsstring>(int amrlev, const Array&lt; MultiFab const *, AMREX_SPACEDIM &gt; &amp;eta)</argsstring>
        <name>setShearViscosity</name>
        <param>
          <type>int</type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> const *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>eta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="50" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.cpp" bodystart="74" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBTensorOp_1a386cf912b2462e16023d9dd81c527552" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLEBTensorOp::setBulkViscosity</definition>
        <argsstring>(int amrlev, const Array&lt; MultiFab const *, AMREX_SPACEDIM &gt; &amp;kappa)</argsstring>
        <name>setBulkViscosity</name>
        <param>
          <type>int</type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> const *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>kappa</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="51" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.cpp" bodystart="80" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBTensorOp_1a7c8d573df03c82ad4c1bbb8cec38f6aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLEBTensorOp::setEBShearViscosity</definition>
        <argsstring>(int amrlev, MultiFab const &amp;eta)</argsstring>
        <name>setEBShearViscosity</name>
        <param>
          <type>int</type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> const &amp;</type>
          <declname>eta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="52" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.cpp" bodystart="89" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBTensorOp_1a3aa0e1f0a27c29c4cf2f73d97c19e6b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLEBTensorOp::setEBBulkViscosity</definition>
        <argsstring>(int amrlev, MultiFab const &amp;kappa)</argsstring>
        <name>setEBBulkViscosity</name>
        <param>
          <type>int</type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> const &amp;</type>
          <declname>kappa</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="53" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.cpp" bodystart="95" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBTensorOp_1ad0816a3544ac9068766ffa765185c96a" prot="public" static="no" const="yes" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>int</type>
        <definition>virtual int amrex::MLEBTensorOp::getNComp</definition>
        <argsstring>() const finaloverride</argsstring>
        <name>getNComp</name>
        <reimplements refid="classamrex_1_1MLLinOp_1acd287b03ea1a73f47ba1f08bb10a484d">getNComp</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="55" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" bodystart="55" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBTensorOp_1ae1ac57f9a253ab644c0e252b461ddbc1" prot="public" static="no" const="yes" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool amrex::MLEBTensorOp::isCrossStencil</definition>
        <argsstring>() const finaloverride</argsstring>
        <name>isCrossStencil</name>
        <reimplements refid="classamrex_1_1MLEBABecLap_1a8d6575333ae596ac283e95b748fb84b4">isCrossStencil</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="57" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" bodystart="57" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBTensorOp_1a9a14217d06d8fde88e66beb4717a1904" prot="public" static="no" const="yes" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool amrex::MLEBTensorOp::isTensorOp</definition>
        <argsstring>() const finaloverride</argsstring>
        <name>isTensorOp</name>
        <reimplements refid="classamrex_1_1MLCellLinOp_1a994a31a96c02e31fc58c4bad8ddf0150">isTensorOp</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="58" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" bodystart="58" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBTensorOp_1aff624fcffcf28c0cb516cfbc58a29247" prot="public" static="no" const="yes" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool amrex::MLEBTensorOp::needsUpdate</definition>
        <argsstring>() const finaloverride</argsstring>
        <name>needsUpdate</name>
        <reimplements refid="classamrex_1_1MLEBABecLap_1a248e016a259d04af443355f6340e0898">needsUpdate</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="60" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" bodystart="60" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBTensorOp_1a92541ea02dfd6fbbe75711a57be748fd" prot="public" static="no" const="no" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex::MLEBTensorOp::update</definition>
        <argsstring>() finaloverride</argsstring>
        <name>update</name>
        <reimplements refid="classamrex_1_1MLEBABecLap_1ad6b4be6cef1783fdb223e5aa7eb50343">update</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="63" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" bodystart="63" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBTensorOp_1ac5b58dbd133f156387504e220e53148b" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLEBTensorOp::prepareForSolve</definition>
        <argsstring>() finaloverride</argsstring>
        <name>prepareForSolve</name>
        <reimplements refid="classamrex_1_1MLEBABecLap_1a10d9a42df59b0c48c0de0bc3a2b41cca">prepareForSolve</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="67" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.cpp" bodystart="102" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBTensorOp_1ace14a326c022d10e53a664f6a86648b8" prot="public" static="no" const="yes" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool amrex::MLEBTensorOp::isSingular</definition>
        <argsstring>(int armlev) const finaloverride</argsstring>
        <name>isSingular</name>
        <reimplements refid="classamrex_1_1MLEBABecLap_1accc281e18237ce18823e3a1a00cbbf01">isSingular</reimplements>
        <param>
          <type>int</type>
          <declname>armlev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="68" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" bodystart="68" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBTensorOp_1afda17bcb311370e54715ed7069ac87df" prot="public" static="no" const="yes" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool amrex::MLEBTensorOp::isBottomSingular</definition>
        <argsstring>() const finaloverride</argsstring>
        <name>isBottomSingular</name>
        <reimplements refid="classamrex_1_1MLEBABecLap_1a74d6ab8dcd6375bed793437c83271aaa">isBottomSingular</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="69" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" bodystart="69" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBTensorOp_1a41724f08da04298ded08c9e8d6e9bfc4" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLEBTensorOp::apply</definition>
        <argsstring>(int amrlev, int mglev, MultiFab &amp;out, MultiFab &amp;in, BCMode bc_mode, StateMode s_mode, const MLMGBndry *bndry=nullptr) const finaloverride</argsstring>
        <name>apply</name>
        <reimplements refid="classamrex_1_1MLEBABecLap_1a8e392e42b5c238124145af83776d575a">apply</reimplements>
        <param>
          <type>int</type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLLinOp_1a5aa01a1ef6b0b3a471f02f65ae4b4884" kindref="member">BCMode</ref></type>
          <declname>bc_mode</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLLinOp_1a1f2821b4a51da49d862dae1e757bb8c3" kindref="member">StateMode</ref></type>
          <declname>s_mode</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MLMGBndry" kindref="compound">MLMGBndry</ref> *</type>
          <declname>bndry</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="71" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.cpp" bodystart="163" bodyend="409"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBTensorOp_1a732136ddf1571783eb6b73aabd6a70ad" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLEBTensorOp::applyBCTensor</definition>
        <argsstring>(int amrlev, int mglev, MultiFab &amp;vel, BCMode bc_mode, const MLMGBndry *bndry) const </argsstring>
        <name>applyBCTensor</name>
        <param>
          <type>int</type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLLinOp_1a5aa01a1ef6b0b3a471f02f65ae4b4884" kindref="member">BCMode</ref></type>
          <declname>bc_mode</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MLMGBndry" kindref="compound">MLMGBndry</ref> *</type>
          <declname>bndry</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="90" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.cpp" bodystart="412" bodyend="522"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classamrex_1_1MLEBTensorOp_1ad30d448831da89124c40cbc92acfe319" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLEBTensorOp::setBCoeffs</definition>
        <argsstring>(int amrlev, const Array&lt; MultiFab const *, AMREX_SPACEDIM &gt; &amp;beta)=delete</argsstring>
        <name>setBCoeffs</name>
        <param>
          <type>int</type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> const *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>beta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="84" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBTensorOp_1a7f36dae9f70a37ded92faab9a89b4a52" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLEBTensorOp::setEBDirichlet</definition>
        <argsstring>(int amrlev, const MultiFab &amp;phi, const MultiFab &amp;beta)=delete</argsstring>
        <name>setEBDirichlet</name>
        <param>
          <type>int</type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>beta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="85" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLEBTensorOp_1a4fd75863f9948f2fc1c82336088f1d51" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLEBTensorOp::setEBHomogDirichlet</definition>
        <argsstring>(int amrlev, const MultiFab &amp;beta)=delete</argsstring>
        <name>setEBHomogDirichlet</name>
        <param>
          <type>int</type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>beta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="86" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="4710">
        <label>amrex::MLEBTensorOp</label>
        <link refid="classamrex_1_1MLEBTensorOp"/>
        <childnode refid="4711" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4711">
        <label>amrex::MLEBABecLap</label>
        <link refid="classamrex_1_1MLEBABecLap"/>
        <childnode refid="4712" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4714">
        <label>amrex::MLLinOp</label>
        <link refid="classamrex_1_1MLLinOp"/>
      </node>
      <node id="4712">
        <label>amrex::MLCellABecLap</label>
        <link refid="classamrex_1_1MLCellABecLap"/>
        <childnode refid="4713" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4713">
        <label>amrex::MLCellLinOp</label>
        <link refid="classamrex_1_1MLCellLinOp"/>
        <childnode refid="4714" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4750">
        <label>std::vector&lt; MPI_Status, std::allocator&lt; MPI_Status &gt; &gt;</label>
      </node>
      <node id="4732">
        <label>amrex::FabArrayBase::CacheStats</label>
        <link refid="structamrex_1_1FabArrayBase_1_1CacheStats"/>
        <childnode refid="4733" relation="usage">
          <edgelabel>name</edgelabel>
        </childnode>
      </node>
      <node id="4715">
        <label>amrex::MLEBTensorOp</label>
        <link refid="classamrex_1_1MLEBTensorOp"/>
        <childnode refid="4716" relation="public-inheritance">
        </childnode>
        <childnode refid="4771" relation="usage">
          <edgelabel>m_eb_kappa</edgelabel>
        </childnode>
        <childnode refid="4777" relation="usage">
          <edgelabel>m_kappa</edgelabel>
          <edgelabel>m_tauflux</edgelabel>
        </childnode>
      </node>
      <node id="4735">
        <label>amrex::FabArrayBase::FabArrayStats</label>
        <link refid="structamrex_1_1FabArrayBase_1_1FabArrayStats"/>
      </node>
      <node id="4728">
        <label>amrex::IntVect</label>
        <link refid="classamrex_1_1IntVect"/>
        <childnode refid="4728" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
      </node>
      <node id="4775">
        <label>amrex::Vector&lt; std::unique_ptr&lt; amrex::MultiFab &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4776" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4725">
        <label>Real</label>
      </node>
      <node id="4751">
        <label>amrex::Vector&lt; MPI_Request &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4752" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4772">
        <label>std::vector&lt; amrex::Vector&lt; amrex::MultiFab &gt;, std::allocator&lt; amrex::Vector&lt; amrex::MultiFab &gt; &gt; &gt;</label>
      </node>
      <node id="4757">
        <label>std::vector&lt; Array&lt; BCType, AMREX_SPACEDIM &gt;, std::allocator&lt; Array&lt; BCType, AMREX_SPACEDIM &gt; &gt; &gt;</label>
      </node>
      <node id="4745">
        <label>std::vector&lt; std::string, std::allocator&lt; std::string &gt; &gt;</label>
      </node>
      <node id="4726">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::BoxArray &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4727" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4727">
        <label>std::vector&lt; amrex::Vector&lt; amrex::BoxArray &gt;, std::allocator&lt; amrex::Vector&lt; amrex::BoxArray &gt; &gt; &gt;</label>
      </node>
      <node id="4736">
        <label>amrex::Vector&lt; int &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4737" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4733">
        <label>string</label>
      </node>
      <node id="4753">
        <label>amrex::Periodicity</label>
        <link refid="classamrex_1_1Periodicity"/>
        <childnode refid="4728" relation="usage">
          <edgelabel>period</edgelabel>
        </childnode>
      </node>
      <node id="4747">
        <label>std::vector&lt; char *, std::allocator&lt; char * &gt; &gt;</label>
      </node>
      <node id="4763">
        <label>amrex::Vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::MLCellLinOp::BndryCondLoc &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4764" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4764">
        <label>std::vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::MLCellLinOp::BndryCondLoc &gt; &gt;, std::allocator&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::MLCellLinOp::BndryCondLoc &gt; &gt; &gt; &gt;</label>
      </node>
      <node id="4746">
        <label>amrex::Vector&lt; char * &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4747" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4720">
        <label>amrex::Vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::FabFactory&lt; amrex::FArrayBox &gt; &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4721" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4723">
        <label>std::vector&lt; amrex::Vector&lt; amrex::Geometry &gt;, std::allocator&lt; amrex::Vector&lt; amrex::Geometry &gt; &gt; &gt;</label>
      </node>
      <node id="4748">
        <label>amrex::FabArray&lt; FAB &gt;::ShMem</label>
        <link refid="structamrex_1_1FabArray_1_1ShMem"/>
      </node>
      <node id="4768">
        <label>std::vector&lt; std::unique_ptr&lt; amrex::BndryRegister &gt;, std::allocator&lt; std::unique_ptr&lt; amrex::BndryRegister &gt; &gt; &gt;</label>
      </node>
      <node id="4722">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::Geometry &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4723" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4759">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::BndryRegister &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4760" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4724">
        <label>amrex::RealVect</label>
        <link refid="classamrex_1_1RealVect"/>
        <childnode refid="4724" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
        <childnode refid="4725" relation="usage">
          <edgelabel>vect</edgelabel>
        </childnode>
      </node>
      <node id="4716">
        <label>amrex::MLEBABecLap</label>
        <link refid="classamrex_1_1MLEBABecLap"/>
        <childnode refid="4717" relation="public-inheritance">
        </childnode>
        <childnode refid="4771" relation="usage">
          <edgelabel>m_a_coeffs</edgelabel>
        </childnode>
        <childnode refid="4773" relation="usage">
          <edgelabel>m_cc_mask</edgelabel>
        </childnode>
        <childnode refid="4736" relation="usage">
          <edgelabel>m_is_singular</edgelabel>
        </childnode>
        <childnode refid="4775" relation="usage">
          <edgelabel>m_eb_phi</edgelabel>
        </childnode>
        <childnode refid="4777" relation="usage">
          <edgelabel>m_b_coeffs</edgelabel>
        </childnode>
        <childnode refid="4779" relation="usage">
          <edgelabel>m_eb_b_coeffs</edgelabel>
        </childnode>
        <childnode refid="4725" relation="usage">
          <edgelabel>m_a_scalar</edgelabel>
          <edgelabel>m_b_scalar</edgelabel>
        </childnode>
      </node>
      <node id="4779">
        <label>amrex::Vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::MultiFab &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4780" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4761">
        <label>amrex::Vector&lt; amrex::YAFluxRegister &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4762" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4754">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::DistributionMapping &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4755" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4778">
        <label>std::vector&lt; amrex::Vector&lt; Array&lt; amrex::MultiFab, AMREX_SPACEDIM &gt; &gt;, std::allocator&lt; amrex::Vector&lt; Array&lt; amrex::MultiFab, AMREX_SPACEDIM &gt; &gt; &gt; &gt;</label>
      </node>
      <node id="4762">
        <label>std::vector&lt; amrex::YAFluxRegister, std::allocator&lt; amrex::YAFluxRegister &gt; &gt;</label>
      </node>
      <node id="4776">
        <label>std::vector&lt; std::unique_ptr&lt; amrex::MultiFab &gt;, std::allocator&lt; std::unique_ptr&lt; amrex::MultiFab &gt; &gt; &gt;</label>
      </node>
      <node id="4752">
        <label>std::vector&lt; MPI_Request, std::allocator&lt; MPI_Request &gt; &gt;</label>
      </node>
      <node id="4737">
        <label>std::vector&lt; int, std::allocator&lt; int &gt; &gt;</label>
      </node>
      <node id="4742">
        <label>amrex::BoxArray</label>
        <link refid="classamrex_1_1BoxArray"/>
        <childnode refid="4728" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
        </childnode>
        <childnode refid="4743" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
      </node>
      <node id="4767">
        <label>amrex::Vector&lt; std::unique_ptr&lt; amrex::BndryRegister &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4768" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4719">
        <label>amrex::MLLinOp</label>
        <link refid="classamrex_1_1MLLinOp"/>
        <childnode refid="4720" relation="usage">
          <edgelabel>m_factory</edgelabel>
        </childnode>
        <childnode refid="4722" relation="usage">
          <edgelabel>m_geom</edgelabel>
        </childnode>
        <childnode refid="4724" relation="usage">
          <edgelabel>m_coarse_bc_loc</edgelabel>
        </childnode>
        <childnode refid="4726" relation="usage">
          <edgelabel>m_grids</edgelabel>
        </childnode>
        <childnode refid="4728" relation="usage">
          <edgelabel>m_ixtype</edgelabel>
        </childnode>
        <childnode refid="4729" relation="usage">
          <edgelabel>m_coarse_data_for_bc</edgelabel>
        </childnode>
        <childnode refid="4736" relation="usage">
          <edgelabel>m_domain_covered</edgelabel>
          <edgelabel>m_amr_ref_ratio</edgelabel>
          <edgelabel>m_num_mg_levels</edgelabel>
        </childnode>
        <childnode refid="4754" relation="usage">
          <edgelabel>m_dmap</edgelabel>
        </childnode>
        <childnode refid="4756" relation="usage">
          <edgelabel>m_hibc</edgelabel>
          <edgelabel>m_lobc</edgelabel>
        </childnode>
        <childnode refid="4719" relation="usage">
          <edgelabel>m_parent</edgelabel>
        </childnode>
        <childnode refid="4758" relation="usage">
          <edgelabel>info</edgelabel>
        </childnode>
      </node>
      <node id="4771">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::MultiFab &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4772" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4774">
        <label>std::vector&lt; amrex::Vector&lt; amrex::iMultiFab &gt;, std::allocator&lt; amrex::Vector&lt; amrex::iMultiFab &gt; &gt; &gt;</label>
      </node>
      <node id="4766">
        <label>std::vector&lt; amrex::Vector&lt; Array&lt; amrex::MultiMask, 2 *AMREX_SPACEDIM &gt; &gt;, std::allocator&lt; amrex::Vector&lt; Array&lt; amrex::MultiMask, 2 *AMREX_SPACEDIM &gt; &gt; &gt; &gt;</label>
      </node>
      <node id="4756">
        <label>amrex::Vector&lt; Array&lt; BCType, AMREX_SPACEDIM &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4757" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4740">
        <label>amrex::DistributionMapping::RefID</label>
        <link refid="structamrex_1_1DistributionMapping_1_1RefID"/>
        <childnode refid="4741" relation="usage">
          <edgelabel>data</edgelabel>
        </childnode>
      </node>
      <node id="4749">
        <label>amrex::Vector&lt; MPI_Status &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4750" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4758">
        <label>amrex::LPInfo</label>
        <link refid="structamrex_1_1LPInfo"/>
      </node>
      <node id="4770">
        <label>std::vector&lt; std::unique_ptr&lt; amrex::MLMGBndry &gt;, std::allocator&lt; std::unique_ptr&lt; amrex::MLMGBndry &gt; &gt; &gt;</label>
      </node>
      <node id="4717">
        <label>amrex::MLCellABecLap</label>
        <link refid="classamrex_1_1MLCellABecLap"/>
        <childnode refid="4718" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4743">
        <label>amrex::IndexType</label>
        <link refid="classamrex_1_1IndexType"/>
      </node>
      <node id="4741">
        <label>amrex::DistributionMapping::Ref</label>
        <link refid="structamrex_1_1DistributionMapping_1_1Ref"/>
        <childnode refid="4736" relation="usage">
          <edgelabel>m_index_array</edgelabel>
          <edgelabel>m_pmap</edgelabel>
        </childnode>
      </node>
      <node id="4744">
        <label>amrex::Vector&lt; std::string &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4745" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4734">
        <label>amrex::DistributionMapping</label>
        <link refid="classamrex_1_1DistributionMapping"/>
      </node>
      <node id="4738">
        <label>amrex::FabArrayBase::BDKey</label>
        <link refid="structamrex_1_1FabArrayBase_1_1BDKey"/>
        <childnode refid="4739" relation="usage">
          <edgelabel>m_ba_id</edgelabel>
        </childnode>
        <childnode refid="4740" relation="usage">
          <edgelabel>m_dm_id</edgelabel>
        </childnode>
      </node>
      <node id="4780">
        <label>std::vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::MultiFab &gt; &gt;, std::allocator&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::MultiFab &gt; &gt; &gt; &gt;</label>
      </node>
      <node id="4773">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::iMultiFab &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4774" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4765">
        <label>amrex::Vector&lt; amrex::Vector&lt; Array&lt; amrex::MultiMask, 2 *AMREX_SPACEDIM &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4766" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4729">
        <label>amrex::MultiFab</label>
        <link refid="classamrex_1_1MultiFab"/>
        <childnode refid="4730" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4760">
        <label>std::vector&lt; amrex::Vector&lt; amrex::BndryRegister &gt;, std::allocator&lt; amrex::Vector&lt; amrex::BndryRegister &gt; &gt; &gt;</label>
      </node>
      <node id="4718">
        <label>amrex::MLCellLinOp</label>
        <link refid="classamrex_1_1MLCellLinOp"/>
        <childnode refid="4719" relation="public-inheritance">
        </childnode>
        <childnode refid="4759" relation="usage">
          <edgelabel>m_undrrelxr</edgelabel>
        </childnode>
        <childnode refid="4761" relation="usage">
          <edgelabel>m_fluxreg</edgelabel>
        </childnode>
        <childnode refid="4763" relation="usage">
          <edgelabel>m_bcondloc</edgelabel>
        </childnode>
        <childnode refid="4765" relation="usage">
          <edgelabel>m_maskvals</edgelabel>
        </childnode>
        <childnode refid="4767" relation="usage">
          <edgelabel>m_crse_sol_br</edgelabel>
          <edgelabel>m_crse_cor_br</edgelabel>
        </childnode>
        <childnode refid="4769" relation="usage">
          <edgelabel>m_bndry_sol</edgelabel>
          <edgelabel>m_bndry_cor</edgelabel>
        </childnode>
      </node>
      <node id="4730">
        <label>amrex::FabArray&lt; FArrayBox &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="4731" relation="public-inheritance">
        </childnode>
        <childnode refid="4728" relation="usage">
          <edgelabel>fb_nghost</edgelabel>
        </childnode>
        <childnode refid="4736" relation="usage">
          <edgelabel>fb_recv_size</edgelabel>
          <edgelabel>fb_recv_from</edgelabel>
        </childnode>
        <childnode refid="4744" relation="usage">
          <edgelabel>m_tags</edgelabel>
        </childnode>
        <childnode refid="4746" relation="usage">
          <edgelabel>fb_recv_data</edgelabel>
          <edgelabel>fb_send_data</edgelabel>
        </childnode>
        <childnode refid="4748" relation="usage">
          <edgelabel>shmem</edgelabel>
        </childnode>
        <childnode refid="4749" relation="usage">
          <edgelabel>fb_recv_stat</edgelabel>
        </childnode>
        <childnode refid="4751" relation="usage">
          <edgelabel>fb_send_reqs</edgelabel>
          <edgelabel>fb_recv_reqs</edgelabel>
        </childnode>
        <childnode refid="4753" relation="usage">
          <edgelabel>fb_period</edgelabel>
        </childnode>
      </node>
      <node id="4739">
        <label>amrex::BoxArray::RefID</label>
        <link refid="structamrex_1_1BoxArray_1_1RefID"/>
      </node>
      <node id="4769">
        <label>amrex::Vector&lt; std::unique_ptr&lt; amrex::MLMGBndry &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4770" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4731">
        <label>amrex::FabArrayBase</label>
        <link refid="classamrex_1_1FabArrayBase"/>
        <childnode refid="4732" relation="usage">
          <edgelabel>m_FBC_stats</edgelabel>
          <edgelabel>m_FPinfo_stats</edgelabel>
          <edgelabel>m_CFinfo_stats</edgelabel>
          <edgelabel>m_TAC_stats</edgelabel>
          <edgelabel>m_CPC_stats</edgelabel>
        </childnode>
        <childnode refid="4734" relation="usage">
          <edgelabel>distributionMap</edgelabel>
        </childnode>
        <childnode refid="4728" relation="usage">
          <edgelabel>n_grow</edgelabel>
          <edgelabel>comm_tile_size</edgelabel>
          <edgelabel>mfiter_tile_size</edgelabel>
          <edgelabel>mfghostiter_tile_size</edgelabel>
        </childnode>
        <childnode refid="4735" relation="usage">
          <edgelabel>m_FA_stats</edgelabel>
        </childnode>
        <childnode refid="4736" relation="usage">
          <edgelabel>indexArray</edgelabel>
        </childnode>
        <childnode refid="4738" relation="usage">
          <edgelabel>m_bdkey</edgelabel>
        </childnode>
        <childnode refid="4742" relation="usage">
          <edgelabel>boxarray</edgelabel>
        </childnode>
      </node>
      <node id="4777">
        <label>amrex::Vector&lt; amrex::Vector&lt; Array&lt; amrex::MultiFab, AMREX_SPACEDIM &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4778" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4755">
        <label>std::vector&lt; amrex::Vector&lt; amrex::DistributionMapping &gt;, std::allocator&lt; amrex::Vector&lt; amrex::DistributionMapping &gt; &gt; &gt;</label>
      </node>
      <node id="4721">
        <label>std::vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::FabFactory&lt; amrex::FArrayBox &gt; &gt; &gt;, std::allocator&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::FabFactory&lt; amrex::FArrayBox &gt; &gt; &gt; &gt; &gt;</label>
      </node>
    </collaborationgraph>
    <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" line="27" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H" bodystart="25" bodyend="92"/>
    <listofallmembers>
      <member refid="classamrex_1_1MLLinOp_1a8effbacb86233a5334789092372a9bde" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>AMRRefRatio</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac80a224852d40e9dd01ef9e4d52cd1c9" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>AMRRefRatio</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1a41724f08da04298ded08c9e8d6e9bfc4" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>apply</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a658470f55d4dd6f1ace94c05201074ed" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>applyBC</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1a732136ddf1571783eb6b73aabd6a70ad" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>applyBCTensor</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1af750016d817d62fec79c71777ec48b36" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>applyMetricTerm</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a55ed8c27b04966126b3bd76c92735dbf" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>averageDownCoeffs</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1ac8c66fd1d80767dce6eb87c29caaabad" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>averageDownCoeffsSameAmrLevel</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a92fdeee03f9af3866563ba880cd81879" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>averageDownCoeffsToCoarseAmrLevel</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a928e32d0caf9f0a8783cb120f4ec8135" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>averageDownSolutionRHS</name></member>
      <member refid="classamrex_1_1MLLinOp_1a5aa01a1ef6b0b3a471f02f65ae4b4884" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>BCMode</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a622b7c2ecc46a6b476aba4fb470f3dcf" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>BCTuple</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac2e55c34bf6b5c0ed53d0ef6a4625a3f" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>BCType</name></member>
      <member refid="classamrex_1_1MLLinOp_1a77b33530b316399f5fb5314a846d9b7e" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>BottomCommunicator</name></member>
      <member refid="classamrex_1_1MLLinOp_1ae56dfc1030a8066132a2cb67334b1aaa" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>Communicator</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a7537000b838b1009188ad927ce91616c" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>compFlux</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1ad0297fb6eb4f835e9ea6f964103a8258" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>compGrad</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1ac3037ce3c60a5c1a0ccb07dc5ab67197" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>correctionResidual</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1ac6b1462f39aa6a60a2bfd0cd6e687aee" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>define</name></member>
      <member refid="classamrex_1_1MLCellABecLap_1a93dbbb7204ba78212d8891ab72cb8491" prot="public" virt="non-virtual" ambiguityscope="amrex::MLCellABecLap::"><scope>amrex::MLEBTensorOp</scope><name>define</name></member>
      <member refid="classamrex_1_1MLLinOp_1a355691d7877fb9a9aabc65db76d0f2b4" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>doAgglomeration</name></member>
      <member refid="classamrex_1_1MLLinOp_1a79f98e0cf06f695dbad6052c5d53e00b" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>doConsolidation</name></member>
      <member refid="classamrex_1_1MLLinOp_1a0eb75c39ff8e715b524d79442b83a3fb" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>Factory</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a204c09583fd7fb16b0646b7cd7aa419f" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>Fapply</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a5097edbbe8f6a25bfd643dffd5650be3" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>FFlux</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1af360736b1a452aa605ea48a8b2489615" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>fillSolutionBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1ad00407760d4927438c355ba115aaad4e" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>Finalize</name></member>
      <member refid="classamrex_1_1MLLinOp_1a5137ff000c6f8940f4b07a28f3bf9375" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>fixUpResidualMask</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1ab0a1b3b7558ebbf48540d5049c85e2f6" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>Fsmooth</name></member>
      <member refid="classamrex_1_1MLLinOp_1a7b1da16499dc7b95e807a28757e0c094" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>Geom</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1aaeda180448796f412b16283ed8aabf19" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>getACoeffs</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1ac93a87b6b156bc091561d0f7a318acf6" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>getAScalar</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a51e08a16e2bcf0fcfafd15b6ca8f8526" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>getBCoeffs</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a18a96b9239f30621aa700a73b03c08a8" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>getBScalar</name></member>
      <member refid="classamrex_1_1MLLinOp_1a7c1c62615a265e25a92ce37b3b287933" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>getDefaultBottomSolver</name></member>
      <member refid="classamrex_1_1MLCellABecLap_1a913212b62872ccbdfaf19880d8114073" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>getFluxes</name></member>
      <member refid="classamrex_1_1MLLinOp_1ad2419e6b4d384edbd5695daca078e310" prot="public" virt="virtual" ambiguityscope="amrex::MLCellLinOp::"><scope>amrex::MLEBTensorOp</scope><name>getFluxes</name></member>
      <member refid="classamrex_1_1MLLinOp_1a1189e4016e7757083343a93649f102aa" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>getMaxOrder</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1ad0816a3544ac9068766ffa765185c96a" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>getNComp</name></member>
      <member refid="classamrex_1_1MLLinOp_1a10e3ecd56636236ea6c1c219630bf79b" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>getNGrow</name></member>
      <member refid="classamrex_1_1MLLinOp_1a85fa2f104bbfeaa73d55d589906ecd45" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>info</name></member>
      <member refid="classamrex_1_1MLLinOp_1a48b2fe73722eee0a1d50b6e0b9558174" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>Initialize</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a4aa7488ae178be35bccf784f59799d8d" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>interpolation</name></member>
      <member refid="classamrex_1_1MLLinOp_1aa1c6883eef4d4dc55d3a5fe5c921113a" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>isBottomActive</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1afda17bcb311370e54715ed7069ac87df" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>isBottomSingular</name></member>
      <member refid="classamrex_1_1MLLinOp_1aa42fd2dfa3b0133f2b20a99026549900" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>isCellCentered</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1ae1ac57f9a253ab644c0e252b461ddbc1" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>isCrossStencil</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a566f171eb405174c2eea99667a76cdb1" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>isEBDirichlet</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1ace14a326c022d10e53a664f6a86648b8" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>isSingular</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1a9a14217d06d8fde88e66beb4717a1904" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>isTensorOp</name></member>
      <member refid="classamrex_1_1MLLinOp_1a07cd0a7c45d6542e33a5d97aefe5bab3" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>Location</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a48c0efb6e525e5c901c1ee34fa5119ca" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_a_coeffs</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1ac43a9c8728bb7861415d80283d41e064" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_a_scalar</name></member>
      <member refid="classamrex_1_1MLLinOp_1a42ca524eb4deca1132be683805d2d7ab" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_amr_ref_ratio</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1ad631dff72b03c8a0d629bd735a63078e" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_b_coeffs</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a1fb977f5a6b0c8682e5f658a4dc9db0c" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_b_scalar</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a20a2d5349510243c481d2b6ce1992f5c" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_bcondloc</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a60785819fb0c997419c7ee7b007e4bb3" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_bndry_cor</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1ab8f93178ea3f02ba63da966de7796970" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_bndry_sol</name></member>
      <member refid="classamrex_1_1MLLinOp_1a06ea1608702e52d38c0eceaa180bad7e" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_bottom_comm</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a820de6c415b8f6911cf96c94788cb102" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_cc_mask</name></member>
      <member refid="classamrex_1_1MLLinOp_1abc7e6e6252f9ecc63c86dcbd99250e10" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_coarse_bc_loc</name></member>
      <member refid="classamrex_1_1MLLinOp_1a1ca01453776c12e634debdc6d09206c3" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_coarse_data_crse_ratio</name></member>
      <member refid="classamrex_1_1MLLinOp_1ad1382ee007387f65075acda2f46866f2" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_coarse_data_for_bc</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a871355473b2744ad7dd29d691e72e9ee" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_crse_cor_br</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1aae58b75937a141dc599d98b034be7f3c" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_crse_sol_br</name></member>
      <member refid="classamrex_1_1MLLinOp_1addb42fac68158f49c2508cf47d3b8d9d" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_default_comm</name></member>
      <member refid="classamrex_1_1MLLinOp_1a80552ba3fc7cdd6bb00739c66327ae2c" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_dmap</name></member>
      <member refid="classamrex_1_1MLLinOp_1a19bf5f2d76877e5f5777e5c44d290648" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_do_agglomeration</name></member>
      <member refid="classamrex_1_1MLLinOp_1a488b6dd5c1bfecef948b543bfa7e5154" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_do_consolidation</name></member>
      <member refid="classamrex_1_1MLLinOp_1a700409c91ec909489e19c53e601de053" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_domain_bloc_hi</name></member>
      <member refid="classamrex_1_1MLLinOp_1a0fd156d093aacd959e78666105ed6328" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_domain_bloc_lo</name></member>
      <member refid="classamrex_1_1MLLinOp_1aaba23614888f937956554945e6a2a5a0" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_domain_covered</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a1644cbea6bac7ad1b9ae4a039cf96cc4" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_eb_b_coeffs</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1aa52b74715e6fd800ad391684b5a2321b" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_eb_kappa</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a25296274131127e2be522bd86b57be2c" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_eb_phi</name></member>
      <member refid="classamrex_1_1MLLinOp_1aca26a5ef5d68cae3dcabea0a5d8c2493" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_factory</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1aeabff149eec600743faac7295cd509d2" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_fluxreg</name></member>
      <member refid="classamrex_1_1MLLinOp_1ab16551403ee1629e20ed6e6d9d4f680c" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_geom</name></member>
      <member refid="classamrex_1_1MLLinOp_1a3f9b0a7c3a91ca7e13664dbfe7115eed" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_grids</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1aed368e6d9fa6a5cb5b193e4368d39cb7" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_has_eb_kappa</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1a1ac24f61712e93b25ebcd55639f30ce2" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_has_kappa</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a9d6cdade5abfabf340b180cba282c3c1" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_has_metric_term</name></member>
      <member refid="classamrex_1_1MLLinOp_1a619323b7ef2de7c06f7c480c9bcdf3d2" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_hibc</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a11297b15320727df4d9e32d3b8085c06" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_is_eb_inhomog</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a69f0aa528f3437aed6e5fbc26d3f1820" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_is_singular</name></member>
      <member refid="classamrex_1_1MLLinOp_1a1422f7b22ae204247f5cdf20ab70e741" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_ixtype</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1a1ab2cb2c4fcbbbf0e3fdedad325fd6b9" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_kappa</name></member>
      <member refid="classamrex_1_1MLLinOp_1aac661e9e03991a16c7aca157ca2447b0" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_lobc</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1af7504eedbd467f1237874cbc10dd6d39" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_maskvals</name></member>
      <member refid="classamrex_1_1MLLinOp_1aa53a765aea0ed0c4e7410d147380079f" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_needs_coarse_data_for_bc</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1a15abc2cecf258e0967f5803ef5c5729e" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_needs_update</name></member>
      <member refid="classamrex_1_1MLLinOp_1ad6bbf49c1bdb88256721471b22b4b044" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_num_amr_levels</name></member>
      <member refid="classamrex_1_1MLLinOp_1ababf1d5df3da022563dc90ee2c81ad75" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_num_mg_levels</name></member>
      <member refid="classamrex_1_1MLLinOp_1a614164d6c8e680ccb5ac8fb9cf1558ed" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_parent</name></member>
      <member refid="classamrex_1_1MLLinOp_1a2faeb23bc1e93e2b0cd693cb94a18d08" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_raii_comm</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1abb70c0cd0ba0b1da3fe27e69bb2fe792" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_tauflux</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a2ffd8d47358983d3c013b8012eeb1b8e" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>m_undrrelxr</name></member>
      <member refid="classamrex_1_1MLLinOp_1a6249249666804079176507b88626a72c" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>make</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a25b9af37f43b13e0f16e0091673b6fba" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>makeFactory</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1acb33b0d3e94547e5e0529af6c1cb3d68" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>makeNGrids</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1ad8df3d453fa9c9ee0e4b565aa00ebe5f" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>makeNLinOp</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac516dba583aede117f89e339423f6114" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>maxorder</name></member>
      <member refid="classamrex_1_1MLLinOp_1ae871a991ef83c33044a22db383c76dcd" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>mg_box_min_width</name></member>
      <member refid="classamrex_1_1MLLinOp_1aaa5616982aef27c68c5ae5544092c7db" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>mg_coarsen_ratio</name></member>
      <member refid="classamrex_1_1MLLinOp_1a3ea5c2611e98234737157e36bae6c343" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>mg_domain_min_width</name></member>
      <member refid="classamrex_1_1MLCellABecLap_1a4645fe35e39e5f36fe87938a48ea9641" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>MLCellABecLap</name></member>
      <member refid="classamrex_1_1MLCellABecLap_1aff6a0f1c81880c9e944e725098d73a7c" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>MLCellABecLap</name></member>
      <member refid="classamrex_1_1MLCellABecLap_1a13b727caa58ea6b165dcc414b6c14bae" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>MLCellABecLap</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1acc45e2dedbc266cc717ffc2239727486" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>MLCellLinOp</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1acba5508d208bbb531ce2fe45042b4f6f" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>MLCellLinOp</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a4bb69639aa4cb08113d6d8273fca03ae" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>MLCellLinOp</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1aa9a96f2bc072cb181d9cce454e3da098" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>MLEBABecLap</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a3691f911119d9ff1739cf0a477b16b00" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>MLEBABecLap</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a14181cc0ff70a2ed471cdb3a3fc2bdb6" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>MLEBABecLap</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a0b7f1e4cc90469a42eb10c8792eced13" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>MLEBABecLap</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1adccad5fb53a52c9b7227847cfc4a636d" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>MLEBTensorOp</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1a4f997af4135dcb79775a5d7f7ac3b678" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>MLEBTensorOp</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1af0d70e756af559a4082443914b134b0d" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>MLEBTensorOp</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1a16a15944a17ebe8341932a53483ef2b6" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>MLEBTensorOp</name></member>
      <member refid="classamrex_1_1MLLinOp_1a2a75b94dc22faffec8a686f91fbfc9c1" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>MLLinOp</name></member>
      <member refid="classamrex_1_1MLLinOp_1a7dd2c530e984f58e5a04cc415e9a539b" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>MLLinOp</name></member>
      <member refid="classamrex_1_1MLLinOp_1a69fbc0ca95c18b6e954c53abb41c885c" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>MLLinOp</name></member>
      <member refid="classamrex_1_1MLLinOp_1a9f6145ef119707fa7ce4fd43542d1c24" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>name</name></member>
      <member refid="classamrex_1_1MLLinOp_1adcfe0a91f9b85388c17eee6172f02975" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>NAMRLevels</name></member>
      <member refid="classamrex_1_1MLLinOp_1a0c150481b635dccaf83cfff3d38b11c7" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>needsCoarseDataForBC</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1aff624fcffcf28c0cb516cfbc58a29247" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>needsUpdate</name></member>
      <member refid="classamrex_1_1MLLinOp_1a257d196611ba0ab9d861dc5e0dc23502" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>NMGLevels</name></member>
      <member refid="classamrex_1_1MLLinOp_1a92b49ce3cd6f8877018a284c9a05663b" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>nodalSync</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a37d0b9fecc4417af93082a652676c9bf" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>normalize</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1ac801f35a398c39c6ae9b42b1e6c29c7a" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1a8217ea65e778d2f86a2f059ec79a6474" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a510cfdf6165c8a08174e71624357bbf9" prot="public" virt="non-virtual" ambiguityscope="amrex::MLEBABecLap::"><scope>amrex::MLEBTensorOp</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1aaa0d12f5f57ddf587493f2c93f516dd8" prot="public" virt="non-virtual" ambiguityscope="amrex::MLEBABecLap::"><scope>amrex::MLEBTensorOp</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLCellABecLap_1a7fd4867774038467f97cfac185e235ac" prot="public" virt="non-virtual" ambiguityscope="amrex::MLCellABecLap::"><scope>amrex::MLEBTensorOp</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLCellABecLap_1ac72a224155e09fd10918b66384ccdb81" prot="public" virt="non-virtual" ambiguityscope="amrex::MLCellABecLap::"><scope>amrex::MLEBTensorOp</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a87fd042ed7a3004a39f75564f24264ca" prot="public" virt="non-virtual" ambiguityscope="amrex::MLCellLinOp::"><scope>amrex::MLEBTensorOp</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a4be43b4a29bd4f7092aa870804870ae2" prot="public" virt="non-virtual" ambiguityscope="amrex::MLCellLinOp::"><scope>amrex::MLEBTensorOp</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLLinOp_1ad163e1fa25935bce528783de5adb6b1a" prot="public" virt="non-virtual" ambiguityscope="amrex::MLLinOp::"><scope>amrex::MLEBTensorOp</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLLinOp_1aec2118e27e9938788a89f5dda28709f7" prot="public" virt="non-virtual" ambiguityscope="amrex::MLLinOp::"><scope>amrex::MLEBTensorOp</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1ac5b58dbd133f156387504e220e53148b" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>prepareForSolve</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1ae233eeb511516448492f38fe53fa9cd9" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>RealTuple</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a30135624482a762f12f6e66a5b3b10ce" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>reflux</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1ab9c04dc81e8745dbed91a8865edcc3d2" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>restriction</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a3897cf202c96a14a8d9733f25c5e750f" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>setACoeffs</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1ad30d448831da89124c40cbc92acfe319" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>setBCoeffs</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1a386cf912b2462e16023d9dd81c527552" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>setBulkViscosity</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac161f1d53e925b82ba5defeb9b0efe70" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>setCoarseFineBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac0c0882eb6092218dc09c5d60555ffed" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>setCoarseFineBCLocation</name></member>
      <member refid="classamrex_1_1MLLinOp_1aa034da35bd05e1fb93b8d876a9840ce3" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>setDomainBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1a2402e6343df20087a51fb653a147987d" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>setDomainBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1aeb7f6e87ab86b49cc97a248b4240d600" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>setDomainBCLoc</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1a3aa0e1f0a27c29c4cf2f73d97c19e6b9" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>setEBBulkViscosity</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1a7f36dae9f70a37ded92faab9a89b4a52" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>setEBDirichlet</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1a4fd75863f9948f2fc1c82336088f1d51" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>setEBHomogDirichlet</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1a7c8d573df03c82ad4c1bbb8cec38f6aa" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>setEBShearViscosity</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1aa3a81a04971b2edce1cb836ebaad4b87" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>setLevelBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1a45b72169ccf285c17f439c4e990c0f58" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>setMaxOrder</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1ad3027675177497cdb23a984a50ebcb12" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>setScalars</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1ad521c9e02197e28b372afcb7cc90a314" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>setShearViscosity</name></member>
      <member refid="classamrex_1_1MLLinOp_1a4d96a0475759eef80d096851fdedd411" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>setVerbose</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a5a8012e233f7f198d99be52e18a30f1a" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>smooth</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1ab18841d6aec78590a56eeaed61fe4345" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>solutionResidual</name></member>
      <member refid="classamrex_1_1MLLinOp_1a1f2821b4a51da49d862dae1e757bb8c3" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>StateMode</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1ac54e10e50b8b0a19c1424d5a7c311003" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>unapplyMetricTerm</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1a92541ea02dfd6fbbe75711a57be748fd" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>update</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a7a111e0594b82aca829a78f2bb4ccc0c" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>updateCorBC</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1aa3f690703577da48606105e0a58838f3" prot="public" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>updateSolBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1a0815357130e78962e01abdaba2b09c21" prot="protected" virt="non-virtual"><scope>amrex::MLEBTensorOp</scope><name>verbose</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a33b01ffee4faf80cdfbe14f6f7d8a6e9" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>xdoty</name></member>
      <member refid="classamrex_1_1MLCellABecLap_1aaa11148ef1cc3386414a3b3d02f9a4b2" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>~MLCellABecLap</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a4d46c85e7e43e5231e19607a868d3d0f" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>~MLCellLinOp</name></member>
      <member refid="classamrex_1_1MLEBABecLap_1a1c3ebe277cdfba5a7bdafca9f0a2672f" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>~MLEBABecLap</name></member>
      <member refid="classamrex_1_1MLEBTensorOp_1a5efda34c10df7a5f5d4c738a60c04e9f" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>~MLEBTensorOp</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac6793724d6b5c98581d42d9233fda1bd" prot="public" virt="virtual"><scope>amrex::MLEBTensorOp</scope><name>~MLLinOp</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
