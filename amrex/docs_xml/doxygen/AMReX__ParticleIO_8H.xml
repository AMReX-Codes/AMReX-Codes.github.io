<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="AMReX__ParticleIO_8H" kind="file" language="C++">
    <compoundname>AMReX_ParticleIO.H</compoundname>
    <includes local="no">AMReX_Config.H</includes>
    <includes refid="AMReX__WriteBinaryParticleData_8H" local="no">AMReX_WriteBinaryParticleData.H</includes>
    <includedby refid="AMReX__Particles_8H" local="yes">/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particles.H</includedby>
    <incdepgraph>
      <node id="79006">
        <label>list</label>
      </node>
      <node id="79108">
        <label>atomic</label>
      </node>
      <node id="79002">
        <label>AMReX_ParmParse.H</label>
        <link refid="AMReX__ParmParse_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="79003" relation="include">
        </childnode>
        <childnode refid="79004" relation="include">
        </childnode>
        <childnode refid="79005" relation="include">
        </childnode>
        <childnode refid="78991" relation="include">
        </childnode>
        <childnode refid="79006" relation="include">
        </childnode>
        <childnode refid="78996" relation="include">
        </childnode>
        <childnode refid="79007" relation="include">
        </childnode>
      </node>
      <node id="79145">
        <label>AMReX_ParticleReduce.H</label>
        <link refid="AMReX__ParticleReduce_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="79038" relation="include">
        </childnode>
        <childnode refid="79036" relation="include">
        </childnode>
        <childnode refid="79078" relation="include">
        </childnode>
        <childnode refid="79101" relation="include">
        </childnode>
        <childnode refid="79091" relation="include">
        </childnode>
        <childnode refid="78984" relation="include">
        </childnode>
        <childnode refid="78998" relation="include">
        </childnode>
      </node>
      <node id="79064">
        <label>AMReX_Periodicity.H</label>
        <link refid="AMReX__Periodicity_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="79038" relation="include">
        </childnode>
        <childnode refid="79036" relation="include">
        </childnode>
        <childnode refid="78991" relation="include">
        </childnode>
      </node>
      <node id="79031">
        <label>AMReX_Algorithm.H</label>
        <link refid="AMReX__Algorithm_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="78995" relation="include">
        </childnode>
        <childnode refid="79009" relation="include">
        </childnode>
        <childnode refid="78986" relation="include">
        </childnode>
        <childnode refid="79032" relation="include">
        </childnode>
        <childnode refid="79007" relation="include">
        </childnode>
      </node>
      <node id="79079">
        <label>AMReX_GpuKernelInfo.H</label>
        <link refid="AMReX__GpuKernelInfo_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
      </node>
      <node id="79083">
        <label>AMReX_OpenMP.H</label>
        <link refid="AMReX__OpenMP_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
      </node>
      <node id="79030">
        <label>AMReX_SPACE.H</label>
        <link refid="AMReX__SPACE_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
      </node>
      <node id="79118">
        <label>AMReX_FBI.H</label>
        <link refid="AMReX__FBI_8H"/>
      </node>
      <node id="79102">
        <label>iomanip</label>
      </node>
      <node id="79024">
        <label>functional</label>
      </node>
      <node id="79138">
        <label>AMReX_ParticleMPIUtil.H</label>
        <link refid="AMReX__ParticleMPIUtil_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="78989" relation="include">
        </childnode>
        <childnode refid="79033" relation="include">
        </childnode>
      </node>
      <node id="79123">
        <label>queue</label>
      </node>
      <node id="78998">
        <label>limits</label>
      </node>
      <node id="79046">
        <label>AMReX_BLProfiler.H</label>
        <link refid="AMReX__BLProfiler_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="79004" relation="include">
        </childnode>
        <childnode refid="79019" relation="include">
        </childnode>
      </node>
      <node id="79040">
        <label>AMReX_IndexType.H</label>
        <link refid="AMReX__IndexType_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="79005" relation="include">
        </childnode>
        <childnode refid="79014" relation="include">
        </childnode>
        <childnode refid="79038" relation="include">
        </childnode>
        <childnode refid="79030" relation="include">
        </childnode>
      </node>
      <node id="79132">
        <label>AMReX_MultiFabUtilI.H</label>
        <link refid="AMReX__MultiFabUtilI_8H"/>
      </node>
      <node id="79152">
        <label>AMReX_ParIter.H</label>
        <link refid="AMReX__ParIter_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="79114" relation="include">
        </childnode>
        <childnode refid="79078" relation="include">
        </childnode>
      </node>
      <node id="79130">
        <label>AMReX_MultiFabUtil_nd_C.H</label>
        <link refid="AMReX__MultiFabUtil__nd__C_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="79078" relation="include">
        </childnode>
        <childnode refid="79034" relation="include">
        </childnode>
        <childnode refid="79066" relation="include">
        </childnode>
        <childnode refid="79128" relation="include">
        </childnode>
        <childnode refid="79022" relation="include">
        </childnode>
      </node>
      <node id="79090">
        <label>AMReX_Functional.H</label>
        <link refid="AMReX__Functional_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="79009" relation="include">
        </childnode>
      </node>
      <node id="79055">
        <label>AMReX_BoxArray.H</label>
        <link refid="AMReX__BoxArray_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="78993" relation="include">
        </childnode>
        <childnode refid="79051" relation="include">
        </childnode>
        <childnode refid="78989" relation="include">
        </childnode>
        <childnode refid="79056" relation="include">
        </childnode>
        <childnode refid="79040" relation="include">
        </childnode>
        <childnode refid="79057" relation="include">
        </childnode>
        <childnode refid="79026" relation="include">
        </childnode>
        <childnode refid="79033" relation="include">
        </childnode>
      </node>
      <node id="79104">
        <label>iterator</label>
      </node>
      <node id="79066">
        <label>AMReX_FArrayBox.H</label>
        <link refid="AMReX__FArrayBox_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="79036" relation="include">
        </childnode>
        <childnode refid="79067" relation="include">
        </childnode>
        <childnode refid="79019" relation="include">
        </childnode>
        <childnode refid="79030" relation="include">
        </childnode>
        <childnode refid="79109" relation="include">
        </childnode>
        <childnode refid="79022" relation="include">
        </childnode>
      </node>
      <node id="79147">
        <label>AMReX_ParticleLocator.H</label>
        <link refid="AMReX__ParticleLocator_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="79025" relation="include">
        </childnode>
        <childnode refid="79103" relation="include">
        </childnode>
        <childnode refid="79092" relation="include">
        </childnode>
      </node>
      <node id="79020">
        <label>float.h</label>
      </node>
      <node id="79112">
        <label>AMReX_FabArrayBase.H</label>
        <link refid="AMReX__FabArrayBase_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="79004" relation="include">
        </childnode>
        <childnode refid="79055" relation="include">
        </childnode>
        <childnode refid="79058" relation="include">
        </childnode>
        <childnode refid="79043" relation="include">
        </childnode>
        <childnode refid="79113" relation="include">
        </childnode>
        <childnode refid="79064" relation="include">
        </childnode>
        <childnode refid="79101" relation="include">
        </childnode>
        <childnode refid="79070" relation="include">
        </childnode>
        <childnode refid="79078" relation="include">
        </childnode>
      </node>
      <node id="79095">
        <label>AMReX_GpuLaunchFunctsC.H</label>
        <link refid="AMReX__GpuLaunchFunctsC_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
      </node>
      <node id="79007">
        <label>AMReX_BLassert.H</label>
        <link refid="AMReX__BLassert_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="79008" relation="include">
        </childnode>
      </node>
      <node id="79012">
        <label>AMReX_GpuAssert.H</label>
        <link refid="AMReX__GpuAssert_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="79013" relation="include">
        </childnode>
      </node>
      <node id="79061">
        <label>cstdint</label>
      </node>
      <node id="79049">
        <label>AMReX_RealBox.H</label>
        <link refid="AMReX__RealBox_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="79005" relation="include">
        </childnode>
        <childnode refid="78996" relation="include">
        </childnode>
        <childnode refid="79026" relation="include">
        </childnode>
        <childnode refid="79033" relation="include">
        </childnode>
        <childnode refid="79019" relation="include">
        </childnode>
        <childnode refid="79036" relation="include">
        </childnode>
        <childnode refid="79050" relation="include">
        </childnode>
      </node>
      <node id="79052">
        <label>AMReX_Utility.H</label>
        <link refid="AMReX__Utility_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="79023" relation="include">
        </childnode>
        <childnode refid="78993" relation="include">
        </childnode>
        <childnode refid="79027" relation="include">
        </childnode>
        <childnode refid="79004" relation="include">
        </childnode>
        <childnode refid="78989" relation="include">
        </childnode>
        <childnode refid="79053" relation="include">
        </childnode>
        <childnode refid="78985" relation="include">
        </childnode>
        <childnode refid="79039" relation="include">
        </childnode>
        <childnode refid="78998" relation="include">
        </childnode>
        <childnode refid="79054" relation="include">
        </childnode>
        <childnode refid="79007" relation="include">
        </childnode>
        <childnode refid="79019" relation="include">
        </childnode>
        <childnode refid="79017" relation="include">
        </childnode>
        <childnode refid="79026" relation="include">
        </childnode>
        <childnode refid="79033" relation="include">
        </childnode>
        <childnode refid="79036" relation="include">
        </childnode>
        <childnode refid="79055" relation="include">
        </childnode>
        <childnode refid="79058" relation="include">
        </childnode>
        <childnode refid="79043" relation="include">
        </childnode>
        <childnode refid="79059" relation="include">
        </childnode>
        <childnode refid="79009" relation="include">
        </childnode>
        <childnode refid="79062" relation="include">
        </childnode>
      </node>
      <node id="79117">
        <label>AMReX_FabArrayCommI.H</label>
        <link refid="AMReX__FabArrayCommI_8H"/>
        <childnode refid="79118" relation="include">
        </childnode>
        <childnode refid="79119" relation="include">
        </childnode>
      </node>
      <node id="79131">
        <label>AMReX_MultiFabUtil_3D_C.H</label>
        <link refid="AMReX__MultiFabUtil__3D__C_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="79078" relation="include">
        </childnode>
        <childnode refid="79066" relation="include">
        </childnode>
        <childnode refid="79128" relation="include">
        </childnode>
        <childnode refid="79022" relation="include">
        </childnode>
      </node>
      <node id="79100">
        <label>AMReX_GpuAllocators.H</label>
        <link refid="AMReX__GpuAllocators_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="78989" relation="include">
        </childnode>
        <childnode refid="78997" relation="include">
        </childnode>
        <childnode refid="78998" relation="include">
        </childnode>
        <childnode refid="78985" relation="include">
        </childnode>
        <childnode refid="79101" relation="include">
        </childnode>
        <childnode refid="79070" relation="include">
        </childnode>
        <childnode refid="79081" relation="include">
        </childnode>
      </node>
      <node id="79088">
        <label>AMReX_GpuReduce.H</label>
        <link refid="AMReX__GpuReduce_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="79009" relation="include">
        </childnode>
        <childnode refid="79028" relation="include">
        </childnode>
        <childnode refid="79029" relation="include">
        </childnode>
        <childnode refid="79089" relation="include">
        </childnode>
        <childnode refid="79091" relation="include">
        </childnode>
        <childnode refid="79090" relation="include">
        </childnode>
      </node>
      <node id="79092">
        <label>AMReX_Tuple.H</label>
        <link refid="AMReX__Tuple_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="78996" relation="include">
        </childnode>
        <childnode refid="79000" relation="include">
        </childnode>
        <childnode refid="79024" relation="include">
        </childnode>
        <childnode refid="78985" relation="include">
        </childnode>
        <childnode refid="78999" relation="include">
        </childnode>
        <childnode refid="78984" relation="include">
        </childnode>
        <childnode refid="79093" relation="include">
        </childnode>
        <childnode refid="79090" relation="include">
        </childnode>
        <childnode refid="79009" relation="include">
        </childnode>
      </node>
      <node id="79033">
        <label>AMReX_Vector.H</label>
        <link refid="AMReX__Vector_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="78995" relation="include">
        </childnode>
        <childnode refid="78991" relation="include">
        </childnode>
        <childnode refid="78997" relation="include">
        </childnode>
        <childnode refid="79007" relation="include">
        </childnode>
        <childnode refid="78986" relation="include">
        </childnode>
        <childnode refid="79017" relation="include">
        </childnode>
      </node>
      <node id="79045">
        <label>AMReX_BLBackTrace.H</label>
        <link refid="AMReX__BLBackTrace_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="79003" relation="include">
        </childnode>
        <childnode refid="79004" relation="include">
        </childnode>
        <childnode refid="78999" relation="include">
        </childnode>
        <childnode refid="79027" relation="include">
        </childnode>
        <childnode refid="79011" relation="include">
        </childnode>
        <childnode refid="79023" relation="include">
        </childnode>
      </node>
      <node id="79151">
        <label>AMReX_ParticleTransformation.H</label>
        <link refid="AMReX__ParticleTransformation_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="79038" relation="include">
        </childnode>
        <childnode refid="79036" relation="include">
        </childnode>
        <childnode refid="79078" relation="include">
        </childnode>
        <childnode refid="79101" relation="include">
        </childnode>
        <childnode refid="79142" relation="include">
        </childnode>
        <childnode refid="79143" relation="include">
        </childnode>
      </node>
      <node id="79029">
        <label>AMReX_GpuTypes.H</label>
        <link refid="AMReX__GpuTypes_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="78986" relation="include">
        </childnode>
      </node>
      <node id="79065">
        <label>AMReX_MultiFab.H</label>
        <link refid="AMReX__MultiFab_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="79061" relation="include">
        </childnode>
        <childnode refid="79007" relation="include">
        </childnode>
        <childnode refid="79066" relation="include">
        </childnode>
        <childnode refid="79110" relation="include">
        </childnode>
        <childnode refid="79120" relation="include">
        </childnode>
        <childnode refid="79064" relation="include">
        </childnode>
      </node>
      <node id="79148">
        <label>AMReX_DenseBins.H</label>
        <link refid="AMReX__DenseBins_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="79078" relation="include">
        </childnode>
        <childnode refid="79038" relation="include">
        </childnode>
        <childnode refid="79046" relation="include">
        </childnode>
        <childnode refid="79149" relation="include">
        </childnode>
      </node>
      <node id="79022">
        <label>cmath</label>
      </node>
      <node id="79013">
        <label>cassert</label>
      </node>
      <node id="79129">
        <label>AMReX_MultiFabUtil_C.H</label>
        <link refid="AMReX__MultiFabUtil__C_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="79130" relation="include">
        </childnode>
        <childnode refid="79131" relation="include">
        </childnode>
      </node>
      <node id="79019">
        <label>AMReX_REAL.H</label>
        <link refid="AMReX__REAL_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="78986" relation="include">
        </childnode>
        <childnode refid="79020" relation="include">
        </childnode>
      </node>
      <node id="79016">
        <label>stdexcept</label>
      </node>
      <node id="79014">
        <label>AMReX_ccse-mpi.H</label>
        <link refid="AMReX__ccse-mpi_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
      </node>
      <node id="78994">
        <label>numeric</label>
      </node>
      <node id="79153">
        <label>AMReX_ParticleInit.H</label>
        <link refid="AMReX__ParticleInit_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
      </node>
      <node id="79120">
        <label>AMReX_FabArrayUtility.H</label>
        <link refid="AMReX__FabArrayUtility_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="79110" relation="include">
        </childnode>
        <childnode refid="79115" relation="include">
        </childnode>
        <childnode refid="79101" relation="include">
        </childnode>
        <childnode refid="78998" relation="include">
        </childnode>
      </node>
      <node id="79004">
        <label>string</label>
      </node>
      <node id="79149">
        <label>AMReX_BinIterator.H</label>
        <link refid="AMReX__BinIterator_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="79078" relation="include">
        </childnode>
        <childnode refid="78999" relation="include">
        </childnode>
      </node>
      <node id="79081">
        <label>AMReX_GpuDevice.H</label>
        <link refid="AMReX__GpuDevice_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="79023" relation="include">
        </childnode>
        <childnode refid="78997" relation="include">
        </childnode>
        <childnode refid="78996" relation="include">
        </childnode>
        <childnode refid="79008" relation="include">
        </childnode>
        <childnode refid="79052" relation="include">
        </childnode>
        <childnode refid="79029" relation="include">
        </childnode>
        <childnode refid="79082" relation="include">
        </childnode>
        <childnode refid="79028" relation="include">
        </childnode>
        <childnode refid="79083" relation="include">
        </childnode>
        <childnode refid="79033" relation="include">
        </childnode>
      </node>
      <node id="79125">
        <label>AMReX_AsyncOut.H</label>
        <link refid="AMReX__AsyncOut_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="79024" relation="include">
        </childnode>
      </node>
      <node id="78989">
        <label>map</label>
      </node>
      <node id="79074">
        <label>unordered_set</label>
      </node>
      <node id="79070">
        <label>AMReX_Arena.H</label>
        <link refid="AMReX__Arena_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="79007" relation="include">
        </childnode>
        <childnode refid="79051" relation="include">
        </childnode>
        <childnode refid="79023" relation="include">
        </childnode>
      </node>
      <node id="79082">
        <label>AMReX_GpuError.H</label>
        <link refid="AMReX__GpuError_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="79052" relation="include">
        </childnode>
        <childnode refid="79004" relation="include">
        </childnode>
      </node>
      <node id="79009">
        <label>AMReX_GpuQualifiers.H</label>
        <link refid="AMReX__GpuQualifiers_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
      </node>
      <node id="79054">
        <label>cfloat</label>
      </node>
      <node id="79032">
        <label>AMReX_Dim3.H</label>
        <link refid="AMReX__Dim3_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="78993" relation="include">
        </childnode>
        <childnode refid="79019" relation="include">
        </childnode>
        <childnode refid="79009" relation="include">
        </childnode>
      </node>
      <node id="79044">
        <label>AMReX_ParallelContext.H</label>
        <link refid="AMReX__ParallelContext_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="78997" relation="include">
        </childnode>
        <childnode refid="78992" relation="include">
        </childnode>
        <childnode refid="79033" relation="include">
        </childnode>
        <childnode refid="79014" relation="include">
        </childnode>
      </node>
      <node id="78992">
        <label>fstream</label>
      </node>
      <node id="79057">
        <label>AMReX_BoxList.H</label>
        <link refid="AMReX__BoxList_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="79005" relation="include">
        </childnode>
        <childnode refid="79038" relation="include">
        </childnode>
        <childnode refid="79040" relation="include">
        </childnode>
        <childnode refid="79036" relation="include">
        </childnode>
        <childnode refid="79026" relation="include">
        </childnode>
        <childnode refid="79033" relation="include">
        </childnode>
      </node>
      <node id="79143">
        <label>AMReX_ParticleUtil.H</label>
        <link refid="AMReX__ParticleUtil_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="79038" relation="include">
        </childnode>
        <childnode refid="79036" relation="include">
        </childnode>
        <childnode refid="79078" relation="include">
        </childnode>
        <childnode refid="79101" relation="include">
        </childnode>
        <childnode refid="79021" relation="include">
        </childnode>
        <childnode refid="79114" relation="include">
        </childnode>
        <childnode refid="79025" relation="include">
        </childnode>
        <childnode refid="79142" relation="include">
        </childnode>
        <childnode refid="79144" relation="include">
        </childnode>
        <childnode refid="78984" relation="include">
        </childnode>
        <childnode refid="79106" relation="include">
        </childnode>
        <childnode refid="78998" relation="include">
        </childnode>
      </node>
      <node id="79141">
        <label>AMReX_Particle.H</label>
        <link refid="AMReX__Particle_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="79004" relation="include">
        </childnode>
        <childnode refid="79019" relation="include">
        </childnode>
        <childnode refid="79066" relation="include">
        </childnode>
        <childnode refid="79038" relation="include">
        </childnode>
        <childnode refid="79050" relation="include">
        </childnode>
        <childnode refid="79002" relation="include">
        </childnode>
        <childnode refid="79034" relation="include">
        </childnode>
      </node>
      <node id="79154">
        <label>AMReX_ParticleContainerI.H</label>
        <link refid="AMReX__ParticleContainerI_8H"/>
      </node>
      <node id="79121">
        <label>AMReX_VisMF.H</label>
        <link refid="AMReX__VisMF_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="79005" relation="include">
        </childnode>
        <childnode refid="79004" relation="include">
        </childnode>
        <childnode refid="78992" relation="include">
        </childnode>
        <childnode refid="79122" relation="include">
        </childnode>
        <childnode refid="78999" relation="include">
        </childnode>
        <childnode refid="79061" relation="include">
        </childnode>
        <childnode refid="79123" relation="include">
        </childnode>
        <childnode refid="79019" relation="include">
        </childnode>
        <childnode refid="79110" relation="include">
        </childnode>
        <childnode refid="79066" relation="include">
        </childnode>
        <childnode refid="79124" relation="include">
        </childnode>
        <childnode refid="79125" relation="include">
        </childnode>
      </node>
      <node id="79086">
        <label>AMReX_GpuRange.H</label>
        <link refid="AMReX__GpuRange_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="79009" relation="include">
        </childnode>
        <childnode refid="79028" relation="include">
        </childnode>
        <childnode refid="79082" relation="include">
        </childnode>
        <childnode refid="79036" relation="include">
        </childnode>
        <childnode refid="78984" relation="include">
        </childnode>
      </node>
      <node id="79028">
        <label>AMReX_GpuControl.H</label>
        <link refid="AMReX__GpuControl_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="79009" relation="include">
        </childnode>
        <childnode refid="79029" relation="include">
        </childnode>
      </node>
      <node id="79096">
        <label>AMReX_GpuBuffer.H</label>
        <link refid="AMReX__GpuBuffer_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="79070" relation="include">
        </childnode>
        <childnode refid="78984" relation="include">
        </childnode>
        <childnode refid="79081" relation="include">
        </childnode>
        <childnode refid="78988" relation="include">
        </childnode>
        <childnode refid="79023" relation="include">
        </childnode>
        <childnode refid="79097" relation="include">
        </childnode>
        <childnode refid="78997" relation="include">
        </childnode>
      </node>
      <node id="79008">
        <label>AMReX.H</label>
        <link refid="AMReX_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="79009" relation="include">
        </childnode>
        <childnode refid="79010" relation="include">
        </childnode>
        <childnode refid="79012" relation="include">
        </childnode>
        <childnode refid="79014" relation="include">
        </childnode>
        <childnode refid="79015" relation="include">
        </childnode>
        <childnode refid="78986" relation="include">
        </childnode>
        <childnode refid="79017" relation="include">
        </childnode>
        <childnode refid="79019" relation="include">
        </childnode>
        <childnode refid="79021" relation="include">
        </childnode>
        <childnode refid="78993" relation="include">
        </childnode>
        <childnode refid="79024" relation="include">
        </childnode>
        <childnode refid="79004" relation="include">
        </childnode>
        <childnode refid="79011" relation="include">
        </childnode>
        <childnode refid="78991" relation="include">
        </childnode>
        <childnode refid="78997" relation="include">
        </childnode>
      </node>
      <node id="79133">
        <label>AMReX_NFiles.H</label>
        <link refid="AMReX__NFiles_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="79004" relation="include">
        </childnode>
        <childnode refid="78992" relation="include">
        </childnode>
        <childnode refid="79043" relation="include">
        </childnode>
        <childnode refid="79121" relation="include">
        </childnode>
      </node>
      <node id="79059">
        <label>AMReX_Random.H</label>
        <link refid="AMReX__Random_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="79008" relation="include">
        </childnode>
        <childnode refid="79009" relation="include">
        </childnode>
        <childnode refid="79043" relation="include">
        </childnode>
        <childnode refid="79060" relation="include">
        </childnode>
        <childnode refid="78998" relation="include">
        </childnode>
        <childnode refid="79061" relation="include">
        </childnode>
      </node>
      <node id="79001">
        <label>random</label>
      </node>
      <node id="78986">
        <label>AMReX_Extension.H</label>
        <link refid="AMReX__Extension_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
      </node>
      <node id="79060">
        <label>AMReX_RandomEngine.H</label>
        <link refid="AMReX__RandomEngine_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="79009" relation="include">
        </childnode>
        <childnode refid="78986" relation="include">
        </childnode>
      </node>
      <node id="79063">
        <label>sys/types.h</label>
      </node>
      <node id="79098">
        <label>AMReX_GpuAsyncArray.H</label>
        <link refid="AMReX__GpuAsyncArray_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="79051" relation="include">
        </childnode>
        <childnode refid="78988" relation="include">
        </childnode>
        <childnode refid="79023" relation="include">
        </childnode>
        <childnode refid="78997" relation="include">
        </childnode>
        <childnode refid="79070" relation="include">
        </childnode>
        <childnode refid="78984" relation="include">
        </childnode>
        <childnode refid="79081" relation="include">
        </childnode>
      </node>
      <node id="79069">
        <label>AMReX_BArena.H</label>
        <link refid="AMReX__BArena_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="79070" relation="include">
        </childnode>
      </node>
      <node id="79077">
        <label>AMReX_Reduce.H</label>
        <link refid="AMReX__Reduce_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="79078" relation="include">
        </childnode>
        <childnode refid="79070" relation="include">
        </childnode>
        <childnode refid="78995" relation="include">
        </childnode>
      </node>
      <node id="79047">
        <label>typeinfo</label>
      </node>
      <node id="79010">
        <label>AMReX_GpuPrint.H</label>
        <link refid="AMReX__GpuPrint_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="79011" relation="include">
        </childnode>
      </node>
      <node id="79034">
        <label>AMReX_Geometry.H</label>
        <link refid="AMReX__Geometry_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="79005" relation="include">
        </childnode>
        <childnode refid="78989" relation="include">
        </childnode>
        <childnode refid="79026" relation="include">
        </childnode>
        <childnode refid="79035" relation="include">
        </childnode>
        <childnode refid="79043" relation="include">
        </childnode>
        <childnode refid="79049" relation="include">
        </childnode>
        <childnode refid="79064" relation="include">
        </childnode>
      </node>
      <node id="79071">
        <label>AMReX_CArena.H</label>
        <link refid="AMReX__CArena_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="79051" relation="include">
        </childnode>
        <childnode refid="79072" relation="include">
        </childnode>
        <childnode refid="78991" relation="include">
        </childnode>
        <childnode refid="79073" relation="include">
        </childnode>
        <childnode refid="79074" relation="include">
        </childnode>
        <childnode refid="79024" relation="include">
        </childnode>
        <childnode refid="79004" relation="include">
        </childnode>
        <childnode refid="79070" relation="include">
        </childnode>
      </node>
      <node id="78982">
        <label>AMReX_Config.H</label>
      </node>
      <node id="79011">
        <label>cstdio</label>
      </node>
      <node id="79119">
        <label>AMReX_PCI.H</label>
        <link refid="AMReX__PCI_8H"/>
      </node>
      <node id="79155">
        <label>AMReX_ParticleHDF5.H</label>
        <link refid="AMReX__ParticleHDF5_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
      </node>
      <node id="79000">
        <label>tuple</label>
      </node>
      <node id="79144">
        <label>AMReX_ParticleBufferMap.H</label>
        <link refid="AMReX__ParticleBufferMap_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="79055" relation="include">
        </childnode>
        <childnode refid="79058" relation="include">
        </childnode>
        <childnode refid="79078" relation="include">
        </childnode>
        <childnode refid="79103" relation="include">
        </childnode>
        <childnode refid="79025" relation="include">
        </childnode>
      </node>
      <node id="79058">
        <label>AMReX_DistributionMapping.H</label>
        <link refid="AMReX__DistributionMapping_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="78989" relation="include">
        </childnode>
        <childnode refid="78998" relation="include">
        </childnode>
        <childnode refid="78997" relation="include">
        </childnode>
        <childnode refid="79051" relation="include">
        </childnode>
        <childnode refid="78993" relation="include">
        </childnode>
        <childnode refid="79008" relation="include">
        </childnode>
        <childnode refid="79026" relation="include">
        </childnode>
        <childnode refid="79033" relation="include">
        </childnode>
        <childnode refid="79036" relation="include">
        </childnode>
        <childnode refid="79019" relation="include">
        </childnode>
        <childnode refid="79043" relation="include">
        </childnode>
      </node>
      <node id="79042">
        <label>AMReX_Array4.H</label>
        <link refid="AMReX__Array4_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="79026" relation="include">
        </childnode>
        <childnode refid="79038" relation="include">
        </childnode>
        <childnode refid="79010" relation="include">
        </childnode>
      </node>
      <node id="79137">
        <label>AMReX_Particle_mod_K.H</label>
        <link refid="AMReX__Particle__mod__K_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="78987" relation="include">
        </childnode>
        <childnode refid="79066" relation="include">
        </childnode>
        <childnode refid="79019" relation="include">
        </childnode>
        <childnode refid="79022" relation="include">
        </childnode>
      </node>
      <node id="79043">
        <label>AMReX_ParallelDescriptor.H</label>
        <link refid="AMReX__ParallelDescriptor_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="79014" relation="include">
        </childnode>
        <childnode refid="79044" relation="include">
        </childnode>
        <childnode refid="79045" relation="include">
        </childnode>
        <childnode refid="79046" relation="include">
        </childnode>
        <childnode refid="79007" relation="include">
        </childnode>
        <childnode refid="79017" relation="include">
        </childnode>
        <childnode refid="79019" relation="include">
        </childnode>
        <childnode refid="79026" relation="include">
        </childnode>
        <childnode refid="79033" relation="include">
        </childnode>
        <childnode refid="79036" relation="include">
        </childnode>
        <childnode refid="78993" relation="include">
        </childnode>
        <childnode refid="78991" relation="include">
        </childnode>
        <childnode refid="79004" relation="include">
        </childnode>
        <childnode refid="79047" relation="include">
        </childnode>
        <childnode refid="78995" relation="include">
        </childnode>
        <childnode refid="79024" relation="include">
        </childnode>
        <childnode refid="78998" relation="include">
        </childnode>
        <childnode refid="78994" relation="include">
        </childnode>
        <childnode refid="79048" relation="include">
        </childnode>
      </node>
      <node id="79041">
        <label>AMReX_Orientation.H</label>
        <link refid="AMReX__Orientation_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="79005" relation="include">
        </childnode>
        <childnode refid="79007" relation="include">
        </childnode>
        <childnode refid="79030" relation="include">
        </childnode>
        <childnode refid="79009" relation="include">
        </childnode>
      </node>
      <node id="79135">
        <label>AMReX_FPC.H</label>
        <link refid="AMReX__FPC_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="79124" relation="include">
        </childnode>
      </node>
      <node id="79084">
        <label>AMReX_GpuLaunchGlobal.H</label>
        <link refid="AMReX__GpuLaunchGlobal_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="79009" relation="include">
        </childnode>
      </node>
      <node id="79050">
        <label>AMReX_RealVect.H</label>
        <link refid="AMReX__RealVect_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="79051" relation="include">
        </childnode>
        <childnode refid="79023" relation="include">
        </childnode>
        <childnode refid="78988" relation="include">
        </childnode>
        <childnode refid="78993" relation="include">
        </childnode>
        <childnode refid="79022" relation="include">
        </childnode>
        <childnode refid="79036" relation="include">
        </childnode>
        <childnode refid="79019" relation="include">
        </childnode>
        <childnode refid="79030" relation="include">
        </childnode>
        <childnode refid="78991" relation="include">
        </childnode>
        <childnode refid="79038" relation="include">
        </childnode>
        <childnode refid="79052" relation="include">
        </childnode>
        <childnode refid="79021" relation="include">
        </childnode>
      </node>
      <node id="79003">
        <label>stack</label>
      </node>
      <node id="78991">
        <label>vector</label>
      </node>
      <node id="79068">
        <label>AMReX_Loop.H</label>
        <link refid="AMReX__Loop_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="79036" relation="include">
        </childnode>
      </node>
      <node id="79114">
        <label>AMReX_MFIter.H</label>
        <link refid="AMReX__MFIter_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="78997" relation="include">
        </childnode>
        <childnode refid="79070" relation="include">
        </childnode>
        <childnode refid="79112" relation="include">
        </childnode>
        <childnode refid="79038" relation="include">
        </childnode>
        <childnode refid="79066" relation="include">
        </childnode>
        <childnode refid="79049" relation="include">
        </childnode>
        <childnode refid="79078" relation="include">
        </childnode>
      </node>
      <node id="79106">
        <label>AMReX_Scan.H</label>
        <link refid="AMReX__Scan_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="79078" relation="include">
        </childnode>
        <childnode refid="79070" relation="include">
        </childnode>
        <childnode refid="79061" relation="include">
        </childnode>
        <childnode refid="78985" relation="include">
        </childnode>
      </node>
      <node id="78999">
        <label>utility</label>
      </node>
      <node id="79036">
        <label>AMReX_Box.H</label>
        <link refid="AMReX__Box_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="79005" relation="include">
        </childnode>
        <childnode refid="79031" relation="include">
        </childnode>
        <childnode refid="79037" relation="include">
        </childnode>
        <childnode refid="79014" relation="include">
        </childnode>
        <childnode refid="79038" relation="include">
        </childnode>
        <childnode refid="79040" relation="include">
        </childnode>
        <childnode refid="79041" relation="include">
        </childnode>
        <childnode refid="79030" relation="include">
        </childnode>
        <childnode refid="79026" relation="include">
        </childnode>
        <childnode refid="79042" relation="include">
        </childnode>
        <childnode refid="79033" relation="include">
        </childnode>
        <childnode refid="79009" relation="include">
        </childnode>
        <childnode refid="79028" relation="include">
        </childnode>
      </node>
      <node id="79111">
        <label>AMReX_BoxDomain.H</label>
        <link refid="AMReX__BoxDomain_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="79005" relation="include">
        </childnode>
        <childnode refid="79040" relation="include">
        </childnode>
        <childnode refid="79036" relation="include">
        </childnode>
        <childnode refid="79038" relation="include">
        </childnode>
        <childnode refid="79057" relation="include">
        </childnode>
      </node>
      <node id="78996">
        <label>array</label>
      </node>
      <node id="79099">
        <label>AMReX_GpuElixir.H</label>
        <link refid="AMReX__GpuElixir_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="79070" relation="include">
        </childnode>
      </node>
      <node id="79027">
        <label>sstream</label>
      </node>
      <node id="79103">
        <label>AMReX_GpuContainers.H</label>
        <link refid="AMReX__GpuContainers_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="78994" relation="include">
        </childnode>
        <childnode refid="79104" relation="include">
        </childnode>
        <childnode refid="79033" relation="include">
        </childnode>
        <childnode refid="79105" relation="include">
        </childnode>
        <childnode refid="79100" relation="include">
        </childnode>
        <childnode refid="79106" relation="include">
        </childnode>
        <childnode refid="78985" relation="include">
        </childnode>
      </node>
      <node id="79017">
        <label>AMReX_INT.H</label>
        <link refid="AMReX__INT_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="79018" relation="include">
        </childnode>
      </node>
      <node id="79085">
        <label>AMReX_GpuLaunch.H</label>
        <link refid="AMReX__GpuLaunch_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="79009" relation="include">
        </childnode>
        <childnode refid="79079" relation="include">
        </childnode>
        <childnode refid="79028" relation="include">
        </childnode>
        <childnode refid="79029" relation="include">
        </childnode>
        <childnode refid="79082" relation="include">
        </childnode>
        <childnode refid="79086" relation="include">
        </childnode>
        <childnode refid="79081" relation="include">
        </childnode>
        <childnode refid="79087" relation="include">
        </childnode>
        <childnode refid="79088" relation="include">
        </childnode>
        <childnode refid="79080" relation="include">
        </childnode>
        <childnode refid="79092" relation="include">
        </childnode>
        <childnode refid="79036" relation="include">
        </childnode>
        <childnode refid="79068" relation="include">
        </childnode>
        <childnode refid="78986" relation="include">
        </childnode>
        <childnode refid="79007" relation="include">
        </childnode>
        <childnode refid="78984" relation="include">
        </childnode>
        <childnode refid="79084" relation="include">
        </childnode>
        <childnode refid="79060" relation="include">
        </childnode>
        <childnode refid="79031" relation="include">
        </childnode>
        <childnode refid="79051" relation="include">
        </childnode>
        <childnode refid="78998" relation="include">
        </childnode>
        <childnode refid="78995" relation="include">
        </childnode>
        <childnode refid="78999" relation="include">
        </childnode>
        <childnode refid="79094" relation="include">
        </childnode>
        <childnode refid="79095" relation="include">
        </childnode>
      </node>
      <node id="79094">
        <label>AMReX_GpuLaunchMacrosC.H</label>
        <link refid="AMReX__GpuLaunchMacrosC_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
      </node>
      <node id="79140">
        <label>AMReX_ArrayOfStructs.H</label>
        <link refid="AMReX__ArrayOfStructs_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="79141" relation="include">
        </childnode>
        <childnode refid="79103" relation="include">
        </childnode>
        <childnode refid="79033" relation="include">
        </childnode>
      </node>
      <node id="79089">
        <label>AMReX_GpuAtomic.H</label>
        <link refid="AMReX__GpuAtomic_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="79009" relation="include">
        </childnode>
        <childnode refid="79090" relation="include">
        </childnode>
      </node>
      <node id="79115">
        <label>AMReX_LayoutData.H</label>
        <link refid="AMReX__LayoutData_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="79112" relation="include">
        </childnode>
        <childnode refid="79114" relation="include">
        </childnode>
      </node>
      <node id="79025">
        <label>AMReX_ParGDB.H</label>
        <link refid="AMReX__ParGDB_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="79026" relation="include">
        </childnode>
        <childnode refid="79033" relation="include">
        </childnode>
        <childnode refid="79034" relation="include">
        </childnode>
        <childnode refid="79065" relation="include">
        </childnode>
      </node>
      <node id="79005">
        <label>iosfwd</label>
      </node>
      <node id="79023">
        <label>cstdlib</label>
      </node>
      <node id="79127">
        <label>AMReX_iMultiFab.H</label>
        <link refid="AMReX__iMultiFab_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="79007" relation="include">
        </childnode>
        <childnode refid="79128" relation="include">
        </childnode>
        <childnode refid="79110" relation="include">
        </childnode>
        <childnode refid="79120" relation="include">
        </childnode>
        <childnode refid="79034" relation="include">
        </childnode>
        <childnode refid="78997" relation="include">
        </childnode>
      </node>
      <node id="79076">
        <label>AMReX_MakeType.H</label>
        <link refid="AMReX__MakeType_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
      </node>
      <node id="79093">
        <label>AMReX_IndexSequence.H</label>
        <link refid="AMReX__IndexSequence_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="78999" relation="include">
        </childnode>
      </node>
      <node id="79067">
        <label>AMReX_BaseFab.H</label>
        <link refid="AMReX__BaseFab_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="78986" relation="include">
        </childnode>
        <childnode refid="79007" relation="include">
        </childnode>
        <childnode refid="79026" relation="include">
        </childnode>
        <childnode refid="79036" relation="include">
        </childnode>
        <childnode refid="79068" relation="include">
        </childnode>
        <childnode refid="79057" relation="include">
        </childnode>
        <childnode refid="79069" relation="include">
        </childnode>
        <childnode refid="79071" relation="include">
        </childnode>
        <childnode refid="79019" relation="include">
        </childnode>
        <childnode refid="79046" relation="include">
        </childnode>
        <childnode refid="79075" relation="include">
        </childnode>
        <childnode refid="79076" relation="include">
        </childnode>
        <childnode refid="79052" relation="include">
        </childnode>
        <childnode refid="79077" relation="include">
        </childnode>
        <childnode refid="79078" relation="include">
        </childnode>
        <childnode refid="79021" relation="include">
        </childnode>
        <childnode refid="79022" relation="include">
        </childnode>
        <childnode refid="79023" relation="include">
        </childnode>
        <childnode refid="78995" relation="include">
        </childnode>
        <childnode refid="78998" relation="include">
        </childnode>
        <childnode refid="79039" relation="include">
        </childnode>
        <childnode refid="78996" relation="include">
        </childnode>
        <childnode refid="78985" relation="include">
        </childnode>
        <childnode refid="78997" relation="include">
        </childnode>
        <childnode refid="79108" relation="include">
        </childnode>
        <childnode refid="78999" relation="include">
        </childnode>
      </node>
      <node id="79136">
        <label>AMReX_IntConv.H</label>
        <link refid="AMReX__IntConv_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="78993" relation="include">
        </childnode>
        <childnode refid="78988" relation="include">
        </childnode>
        <childnode refid="79061" relation="include">
        </childnode>
        <childnode refid="79135" relation="include">
        </childnode>
        <childnode refid="79124" relation="include">
        </childnode>
      </node>
      <node id="78993">
        <label>iostream</label>
      </node>
      <node id="79128">
        <label>AMReX_IArrayBox.H</label>
        <link refid="AMReX__IArrayBox_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="79036" relation="include">
        </childnode>
        <childnode refid="79067" relation="include">
        </childnode>
        <childnode refid="79019" relation="include">
        </childnode>
        <childnode refid="79030" relation="include">
        </childnode>
      </node>
      <node id="79026">
        <label>AMReX_Array.H</label>
        <link refid="AMReX__Array_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="78996" relation="include">
        </childnode>
        <childnode refid="78997" relation="include">
        </childnode>
        <childnode refid="78999" relation="include">
        </childnode>
        <childnode refid="79004" relation="include">
        </childnode>
        <childnode refid="78993" relation="include">
        </childnode>
        <childnode refid="79027" relation="include">
        </childnode>
        <childnode refid="79011" relation="include">
        </childnode>
        <childnode refid="78985" relation="include">
        </childnode>
        <childnode refid="79008" relation="include">
        </childnode>
        <childnode refid="79009" relation="include">
        </childnode>
        <childnode refid="79028" relation="include">
        </childnode>
        <childnode refid="79007" relation="include">
        </childnode>
        <childnode refid="79030" relation="include">
        </childnode>
        <childnode refid="79019" relation="include">
        </childnode>
        <childnode refid="79031" relation="include">
        </childnode>
        <childnode refid="79032" relation="include">
        </childnode>
      </node>
      <node id="79051">
        <label>cstddef</label>
      </node>
      <node id="79091">
        <label>AMReX_GpuUtility.H</label>
        <link refid="AMReX__GpuUtility_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="79009" relation="include">
        </childnode>
        <childnode refid="79029" relation="include">
        </childnode>
        <childnode refid="79028" relation="include">
        </childnode>
        <childnode refid="79081" relation="include">
        </childnode>
        <childnode refid="78986" relation="include">
        </childnode>
        <childnode refid="79019" relation="include">
        </childnode>
        <childnode refid="79017" relation="include">
        </childnode>
        <childnode refid="79026" relation="include">
        </childnode>
        <childnode refid="79042" relation="include">
        </childnode>
        <childnode refid="78993" relation="include">
        </childnode>
        <childnode refid="79022" relation="include">
        </childnode>
        <childnode refid="78988" relation="include">
        </childnode>
      </node>
      <node id="78990">
        <label>deque</label>
      </node>
      <node id="79056">
        <label>unordered_map</label>
      </node>
      <node id="79039">
        <label>climits</label>
      </node>
      <node id="79038">
        <label>AMReX_IntVect.H</label>
        <link refid="AMReX__IntVect_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="79017" relation="include">
        </childnode>
        <childnode refid="79014" relation="include">
        </childnode>
        <childnode refid="79030" relation="include">
        </childnode>
        <childnode refid="79026" relation="include">
        </childnode>
        <childnode refid="79033" relation="include">
        </childnode>
        <childnode refid="79032" relation="include">
        </childnode>
        <childnode refid="79007" relation="include">
        </childnode>
        <childnode refid="78986" relation="include">
        </childnode>
        <childnode refid="79009" relation="include">
        </childnode>
        <childnode refid="79021" relation="include">
        </childnode>
        <childnode refid="79005" relation="include">
        </childnode>
        <childnode refid="79023" relation="include">
        </childnode>
        <childnode refid="79022" relation="include">
        </childnode>
        <childnode refid="78998" relation="include">
        </childnode>
        <childnode refid="79039" relation="include">
        </childnode>
        <childnode refid="78995" relation="include">
        </childnode>
      </node>
      <node id="79150">
        <label>AMReX_SparseBins.H</label>
        <link refid="AMReX__SparseBins_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="79078" relation="include">
        </childnode>
        <childnode refid="79038" relation="include">
        </childnode>
        <childnode refid="79046" relation="include">
        </childnode>
        <childnode refid="79149" relation="include">
        </childnode>
      </node>
      <node id="79073">
        <label>mutex</label>
      </node>
      <node id="79134">
        <label>AMReX_VectorIO.H</label>
        <link refid="AMReX__VectorIO_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="78993" relation="include">
        </childnode>
        <childnode refid="79135" relation="include">
        </childnode>
        <childnode refid="79124" relation="include">
        </childnode>
        <childnode refid="79136" relation="include">
        </childnode>
      </node>
      <node id="79105">
        <label>AMReX_PODVector.H</label>
        <link refid="AMReX__PODVector_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="78984" relation="include">
        </childnode>
        <childnode refid="79078" relation="include">
        </childnode>
        <childnode refid="79100" relation="include">
        </childnode>
        <childnode refid="79103" relation="include">
        </childnode>
        <childnode refid="79081" relation="include">
        </childnode>
        <childnode refid="78985" relation="include">
        </childnode>
        <childnode refid="78999" relation="include">
        </childnode>
        <childnode refid="78997" relation="include">
        </childnode>
        <childnode refid="78988" relation="include">
        </childnode>
      </node>
      <node id="79053">
        <label>chrono</label>
      </node>
      <node id="79124">
        <label>AMReX_FabConv.H</label>
        <link refid="AMReX__FabConv_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="79005" relation="include">
        </childnode>
        <childnode refid="79026" relation="include">
        </childnode>
        <childnode refid="79033" relation="include">
        </childnode>
        <childnode refid="79007" relation="include">
        </childnode>
        <childnode refid="79019" relation="include">
        </childnode>
        <childnode refid="79017" relation="include">
        </childnode>
      </node>
      <node id="79048">
        <label>csignal</label>
      </node>
      <node id="79109">
        <label>AMReX_FabFactory.H</label>
        <link refid="AMReX__FabFactory_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="79036" relation="include">
        </childnode>
        <childnode refid="79101" relation="include">
        </childnode>
        <childnode refid="79076" relation="include">
        </childnode>
        <childnode refid="79033" relation="include">
        </childnode>
        <childnode refid="79070" relation="include">
        </childnode>
      </node>
      <node id="79080">
        <label>AMReX_GpuFuse.H</label>
        <link refid="AMReX__GpuFuse_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="79070" relation="include">
        </childnode>
        <childnode refid="79033" relation="include">
        </childnode>
        <childnode refid="79036" relation="include">
        </childnode>
        <childnode refid="78984" relation="include">
        </childnode>
        <childnode refid="79081" relation="include">
        </childnode>
        <childnode refid="79084" relation="include">
        </childnode>
        <childnode refid="78988" relation="include">
        </childnode>
        <childnode refid="78997" relation="include">
        </childnode>
      </node>
      <node id="79142">
        <label>AMReX_ParticleTile.H</label>
        <link refid="AMReX__ParticleTile_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="78986" relation="include">
        </childnode>
        <childnode refid="79141" relation="include">
        </childnode>
        <childnode refid="79140" relation="include">
        </childnode>
        <childnode refid="79139" relation="include">
        </childnode>
        <childnode refid="79033" relation="include">
        </childnode>
        <childnode refid="78996" relation="include">
        </childnode>
      </node>
      <node id="79122">
        <label>thread</label>
      </node>
      <node id="79113">
        <label>AMReX_ParallelReduce.H</label>
        <link refid="AMReX__ParallelReduce_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="79008" relation="include">
        </childnode>
        <childnode refid="79043" relation="include">
        </childnode>
        <childnode refid="79101" relation="include">
        </childnode>
        <childnode refid="79033" relation="include">
        </childnode>
        <childnode refid="78985" relation="include">
        </childnode>
      </node>
      <node id="78983">
        <label>AMReX_WriteBinaryParticleData.H</label>
        <link refid="AMReX__WriteBinaryParticleData_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="78984" relation="include">
        </childnode>
        <childnode refid="78987" relation="include">
        </childnode>
        <childnode refid="79143" relation="include">
        </childnode>
      </node>
      <node id="79021">
        <label>AMReX_Math.H</label>
        <link refid="AMReX__Math_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="79009" relation="include">
        </childnode>
        <childnode refid="78986" relation="include">
        </childnode>
        <childnode refid="79022" relation="include">
        </childnode>
        <childnode refid="79023" relation="include">
        </childnode>
      </node>
      <node id="79078">
        <label>AMReX_Gpu.H</label>
        <link refid="AMReX__Gpu_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="79009" relation="include">
        </childnode>
        <childnode refid="79079" relation="include">
        </childnode>
        <childnode refid="79010" relation="include">
        </childnode>
        <childnode refid="79012" relation="include">
        </childnode>
        <childnode refid="79029" relation="include">
        </childnode>
        <childnode refid="79028" relation="include">
        </childnode>
        <childnode refid="79080" relation="include">
        </childnode>
        <childnode refid="79085" relation="include">
        </childnode>
        <childnode refid="79082" relation="include">
        </childnode>
        <childnode refid="79089" relation="include">
        </childnode>
        <childnode refid="79091" relation="include">
        </childnode>
        <childnode refid="79081" relation="include">
        </childnode>
        <childnode refid="79096" relation="include">
        </childnode>
        <childnode refid="79098" relation="include">
        </childnode>
        <childnode refid="79099" relation="include">
        </childnode>
        <childnode refid="79087" relation="include">
        </childnode>
        <childnode refid="79086" relation="include">
        </childnode>
        <childnode refid="79088" relation="include">
        </childnode>
        <childnode refid="79100" relation="include">
        </childnode>
        <childnode refid="79103" relation="include">
        </childnode>
        <childnode refid="79107" relation="include">
        </childnode>
      </node>
      <node id="79146">
        <label>AMReX_ParticleCommunication.H</label>
        <link refid="AMReX__ParticleCommunication_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="79078" relation="include">
        </childnode>
        <childnode refid="79103" relation="include">
        </childnode>
        <childnode refid="79038" relation="include">
        </childnode>
        <childnode refid="79144" relation="include">
        </childnode>
        <childnode refid="79114" relation="include">
        </childnode>
        <childnode refid="78984" relation="include">
        </childnode>
        <childnode refid="78989" relation="include">
        </childnode>
      </node>
      <node id="79139">
        <label>AMReX_StructOfArrays.H</label>
        <link refid="AMReX__StructOfArrays_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="79019" relation="include">
        </childnode>
        <childnode refid="79033" relation="include">
        </childnode>
        <childnode refid="79103" relation="include">
        </childnode>
        <childnode refid="78996" relation="include">
        </childnode>
      </node>
      <node id="79087">
        <label>AMReX_GpuMemory.H</label>
        <link refid="AMReX__GpuMemory_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="79009" relation="include">
        </childnode>
        <childnode refid="79028" relation="include">
        </childnode>
        <childnode refid="79081" relation="include">
        </childnode>
        <childnode refid="78984" relation="include">
        </childnode>
        <childnode refid="79070" relation="include">
        </childnode>
        <childnode refid="79023" relation="include">
        </childnode>
      </node>
      <node id="79037">
        <label>AMReX_ArrayLim.H</label>
        <link refid="AMReX__ArrayLim_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="79019" relation="include">
        </childnode>
      </node>
      <node id="79015">
        <label>AMReX_Exception.H</label>
        <link refid="AMReX__Exception_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="79016" relation="include">
        </childnode>
      </node>
      <node id="78985">
        <label>type_traits</label>
      </node>
      <node id="79072">
        <label>set</label>
      </node>
      <node id="79035">
        <label>AMReX_CoordSys.H</label>
        <link refid="AMReX__CoordSys_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="78998" relation="include">
        </childnode>
        <childnode refid="79008" relation="include">
        </childnode>
        <childnode refid="79019" relation="include">
        </childnode>
        <childnode refid="79026" relation="include">
        </childnode>
        <childnode refid="79033" relation="include">
        </childnode>
        <childnode refid="79036" relation="include">
        </childnode>
      </node>
      <node id="78987">
        <label>AMReX_Particles.H</label>
        <link refid="AMReX__Particles_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="78988" relation="include">
        </childnode>
        <childnode refid="78989" relation="include">
        </childnode>
        <childnode refid="78990" relation="include">
        </childnode>
        <childnode refid="78991" relation="include">
        </childnode>
        <childnode refid="78992" relation="include">
        </childnode>
        <childnode refid="78993" relation="include">
        </childnode>
        <childnode refid="78994" relation="include">
        </childnode>
        <childnode refid="78995" relation="include">
        </childnode>
        <childnode refid="78996" relation="include">
        </childnode>
        <childnode refid="78997" relation="include">
        </childnode>
        <childnode refid="78998" relation="include">
        </childnode>
        <childnode refid="78999" relation="include">
        </childnode>
        <childnode refid="79000" relation="include">
        </childnode>
        <childnode refid="78985" relation="include">
        </childnode>
        <childnode refid="79001" relation="include">
        </childnode>
        <childnode refid="79002" relation="include">
        </childnode>
        <childnode refid="79025" relation="include">
        </childnode>
        <childnode refid="79019" relation="include">
        </childnode>
        <childnode refid="79038" relation="include">
        </childnode>
        <childnode refid="79026" relation="include">
        </childnode>
        <childnode refid="79033" relation="include">
        </childnode>
        <childnode refid="79052" relation="include">
        </childnode>
        <childnode refid="79034" relation="include">
        </childnode>
        <childnode refid="79121" relation="include">
        </childnode>
        <childnode refid="79049" relation="include">
        </childnode>
        <childnode refid="79101" relation="include">
        </childnode>
        <childnode refid="79126" relation="include">
        </childnode>
        <childnode refid="79133" relation="include">
        </childnode>
        <childnode refid="79134" relation="include">
        </childnode>
        <childnode refid="79137" relation="include">
        </childnode>
        <childnode refid="79138" relation="include">
        </childnode>
        <childnode refid="79139" relation="include">
        </childnode>
        <childnode refid="79140" relation="include">
        </childnode>
        <childnode refid="79141" relation="include">
        </childnode>
        <childnode refid="79142" relation="include">
        </childnode>
        <childnode refid="78984" relation="include">
        </childnode>
        <childnode refid="79103" relation="include">
        </childnode>
        <childnode refid="79143" relation="include">
        </childnode>
        <childnode refid="79145" relation="include">
        </childnode>
        <childnode refid="79144" relation="include">
        </childnode>
        <childnode refid="79146" relation="include">
        </childnode>
        <childnode refid="79147" relation="include">
        </childnode>
        <childnode refid="79106" relation="include">
        </childnode>
        <childnode refid="79148" relation="include">
        </childnode>
        <childnode refid="79150" relation="include">
        </childnode>
        <childnode refid="79151" relation="include">
        </childnode>
        <childnode refid="79152" relation="include">
        </childnode>
        <childnode refid="79083" relation="include">
        </childnode>
        <childnode refid="79153" relation="include">
        </childnode>
        <childnode refid="79154" relation="include">
        </childnode>
        <childnode refid="78981" relation="include">
        </childnode>
        <childnode refid="79155" relation="include">
        </childnode>
      </node>
      <node id="79110">
        <label>AMReX_FabArray.H</label>
        <link refid="AMReX__FabArray_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="78993" relation="include">
        </childnode>
        <childnode refid="78988" relation="include">
        </childnode>
        <childnode refid="78998" relation="include">
        </childnode>
        <childnode refid="78989" relation="include">
        </childnode>
        <childnode refid="78999" relation="include">
        </childnode>
        <childnode refid="78991" relation="include">
        </childnode>
        <childnode refid="78995" relation="include">
        </childnode>
        <childnode refid="79072" relation="include">
        </childnode>
        <childnode refid="79004" relation="include">
        </childnode>
        <childnode refid="79007" relation="include">
        </childnode>
        <childnode refid="79026" relation="include">
        </childnode>
        <childnode refid="79033" relation="include">
        </childnode>
        <childnode refid="79036" relation="include">
        </childnode>
        <childnode refid="79008" relation="include">
        </childnode>
        <childnode refid="79055" relation="include">
        </childnode>
        <childnode refid="79111" relation="include">
        </childnode>
        <childnode refid="79109" relation="include">
        </childnode>
        <childnode refid="79058" relation="include">
        </childnode>
        <childnode refid="79034" relation="include">
        </childnode>
        <childnode refid="79043" relation="include">
        </childnode>
        <childnode refid="79052" relation="include">
        </childnode>
        <childnode refid="79014" relation="include">
        </childnode>
        <childnode refid="79046" relation="include">
        </childnode>
        <childnode refid="79064" relation="include">
        </childnode>
        <childnode refid="79101" relation="include">
        </childnode>
        <childnode refid="79112" relation="include">
        </childnode>
        <childnode refid="79114" relation="include">
        </childnode>
        <childnode refid="79076" relation="include">
        </childnode>
        <childnode refid="78984" relation="include">
        </childnode>
        <childnode refid="79115" relation="include">
        </childnode>
        <childnode refid="79116" relation="include">
        </childnode>
        <childnode refid="79078" relation="include">
        </childnode>
        <childnode refid="79117" relation="include">
        </childnode>
      </node>
      <node id="78995">
        <label>algorithm</label>
      </node>
      <node id="79062">
        <label>AMReX_FileSystem.H</label>
        <link refid="AMReX__FileSystem_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="79004" relation="include">
        </childnode>
        <childnode refid="79063" relation="include">
        </childnode>
      </node>
      <node id="78981">
        <label>/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleIO.H</label>
        <link refid="AMReX__ParticleIO_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="78983" relation="include">
        </childnode>
      </node>
      <node id="79116">
        <label>AMReX_BaseFabUtility.H</label>
        <link refid="AMReX__BaseFabUtility_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="79067" relation="include">
        </childnode>
      </node>
      <node id="79126">
        <label>AMReX_MultiFabUtil.H</label>
        <link refid="AMReX__MultiFabUtil_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="79065" relation="include">
        </childnode>
        <childnode refid="79127" relation="include">
        </childnode>
        <childnode refid="79115" relation="include">
        </childnode>
        <childnode refid="79114" relation="include">
        </childnode>
        <childnode refid="79026" relation="include">
        </childnode>
        <childnode refid="79033" relation="include">
        </childnode>
        <childnode refid="79129" relation="include">
        </childnode>
        <childnode refid="79132" relation="include">
        </childnode>
      </node>
      <node id="78988">
        <label>cstring</label>
      </node>
      <node id="79107">
        <label>AMReX_CudaGraph.H</label>
        <link refid="AMReX__CudaGraph_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
      </node>
      <node id="78997">
        <label>memory</label>
      </node>
      <node id="79097">
        <label>initializer_list</label>
      </node>
      <node id="79018">
        <label>inttypes.h</label>
      </node>
      <node id="78984">
        <label>AMReX_TypeTraits.H</label>
        <link refid="AMReX__TypeTraits_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="78985" relation="include">
        </childnode>
        <childnode refid="78986" relation="include">
        </childnode>
      </node>
      <node id="79101">
        <label>AMReX_Print.H</label>
        <link refid="AMReX__Print_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="79027" relation="include">
        </childnode>
        <childnode refid="78992" relation="include">
        </childnode>
        <childnode refid="79102" relation="include">
        </childnode>
        <childnode refid="78999" relation="include">
        </childnode>
        <childnode refid="79008" relation="include">
        </childnode>
        <childnode refid="79044" relation="include">
        </childnode>
        <childnode refid="79043" relation="include">
        </childnode>
      </node>
      <node id="79075">
        <label>AMReX_BoxIterator.H</label>
        <link refid="AMReX__BoxIterator_8H"/>
        <childnode refid="78982" relation="include">
        </childnode>
        <childnode refid="79023" relation="include">
        </childnode>
        <childnode refid="79007" relation="include">
        </childnode>
        <childnode refid="79036" relation="include">
        </childnode>
        <childnode refid="79019" relation="include">
        </childnode>
        <childnode refid="79030" relation="include">
        </childnode>
        <childnode refid="79038" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="79158">
        <label>/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrParticles.H</label>
        <link refid="AMReX__AmrParticles_8H"/>
      </node>
      <node id="79163">
        <label>/home/runner/work/amrex/amrex/Src/Particle/AMReX_TracerParticle_mod_K.H</label>
        <link refid="AMReX__TracerParticle__mod__K_8H"/>
        <childnode refid="79164" relation="include">
        </childnode>
      </node>
      <node id="79159">
        <label>/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborList.H</label>
        <link refid="AMReX__NeighborList_8H"/>
        <childnode refid="79160" relation="include">
        </childnode>
      </node>
      <node id="79161">
        <label>/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle_mod_K.H</label>
        <link refid="AMReX__Particle__mod__K_8H"/>
        <childnode refid="79157" relation="include">
        </childnode>
      </node>
      <node id="79164">
        <label>/home/runner/work/amrex/amrex/Src/Particle/AMReX_TracerParticles.cpp</label>
        <link refid="AMReX__TracerParticles_8cpp"/>
      </node>
      <node id="79162">
        <label>/home/runner/work/amrex/amrex/Src/Particle/AMReX_TracerParticles.H</label>
        <link refid="AMReX__TracerParticles_8H"/>
        <childnode refid="79158" relation="include">
        </childnode>
        <childnode refid="79163" relation="include">
        </childnode>
        <childnode refid="79164" relation="include">
        </childnode>
      </node>
      <node id="79165">
        <label>/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H</label>
        <link refid="AMReX__WriteBinaryParticleData_8H"/>
        <childnode refid="79156" relation="include">
        </childnode>
      </node>
      <node id="79157">
        <label>/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particles.H</label>
        <link refid="AMReX__Particles_8H"/>
        <childnode refid="79158" relation="include">
        </childnode>
        <childnode refid="79159" relation="include">
        </childnode>
        <childnode refid="79160" relation="include">
        </childnode>
        <childnode refid="79161" relation="include">
        </childnode>
        <childnode refid="79162" relation="include">
        </childnode>
        <childnode refid="79165" relation="include">
        </childnode>
      </node>
      <node id="79156">
        <label>/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleIO.H</label>
        <link refid="AMReX__ParticleIO_8H"/>
        <childnode refid="79157" relation="include">
        </childnode>
      </node>
      <node id="79160">
        <label>/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H</label>
        <link refid="AMReX__NeighborParticles_8H"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="AMReX__Particles_8H_1afbbe0c19db3d56a82283110e97b372f2" prot="public" static="no">
        <name>AMREX_PARTICLEIO_H</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleIO.H" line="2" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particles.H" bodystart="3" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>AMREX_PARTICLEIO_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AMREX_PARTICLEIO_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;AMReX_Config.H&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="AMReX__WriteBinaryParticleData_8H" kindref="compound">AMReX_WriteBinaryParticleData.H</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NStructReal,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NStructInt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NArrayReal,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NArrayInt&gt;</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal">ParticleContainer&lt;NStructReal,<sp/>NStructInt,<sp/>NArrayReal,<sp/>NArrayInt&gt;</highlight></codeline>
<codeline lineno="10"><highlight class="normal">::WriteParticleRealData<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1Gpu_1_1range__detail_1a57949ca6008ad4fe7edb4e00741b1906" kindref="member">size</ref>,<sp/>std::ostream&amp;<sp/>os)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="11"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ParticleType::RealType)<sp/>==<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a4f9c3dd444d301063e6190234413bda4" kindref="member">writeFloatData</ref>((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*)<sp/>data,<sp/>size,<sp/>os,<sp/>ParticleRealDescriptor);</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ParticleType::RealType)<sp/>==<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a9cb2d187853bfabaaf7d74de8c950c25" kindref="member">writeDoubleData</ref>((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*)<sp/>data,<sp/>size,<sp/>os,<sp/>ParticleRealDescriptor);</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="18"><highlight class="normal">}</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NStructReal,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NStructInt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NArrayReal,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NArrayInt&gt;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal">ParticleContainer&lt;NStructReal,<sp/>NStructInt,<sp/>NArrayReal,<sp/>NArrayInt&gt;</highlight></codeline>
<codeline lineno="23"><highlight class="normal">::ReadParticleRealData<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,<sp/>std::istream&amp;<sp/>is)</highlight></codeline>
<codeline lineno="24"><highlight class="normal">{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ParticleType::RealType)<sp/>==<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a4c085d3b27d107f62bdb36f5ecc0f326" kindref="member">readFloatData</ref>((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*)<sp/>data,<sp/>size,<sp/>is,<sp/>ParticleRealDescriptor);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ParticleType::RealType)<sp/>==<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1ac590394599f7ea721cf8999331d0436e" kindref="member">readDoubleData</ref>((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*)<sp/>data,<sp/>size,<sp/>is,<sp/>ParticleRealDescriptor);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="31"><highlight class="normal">}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NStructReal,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NStructInt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NArrayReal,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NArrayInt&gt;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal">ParticleContainer&lt;NStructReal,<sp/>NStructInt,<sp/>NArrayReal,<sp/>NArrayInt&gt;</highlight></codeline>
<codeline lineno="36"><highlight class="normal">::Checkpoint<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>dir,</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*is_checkpoint*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&lt;std::string&gt;&amp;<sp/>real_comp_names,</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&lt;std::string&gt;&amp;<sp/>int_comp_names)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="40"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>Vector&lt;int&gt;<sp/>write_real_comp;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>Vector&lt;std::string&gt;<sp/>tmp_real_comp_names;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>NStructReal<sp/>+<sp/>NumRealComps();<sp/>++i<sp/>)</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>write_real_comp.push_back(1);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(real_comp_names.size()<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;real_comp&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp_real_comp_names.push_back(ss.str());</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp_real_comp_names.push_back(real_comp_names[i]);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>Vector&lt;int&gt;<sp/>write_int_comp;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>Vector&lt;std::string&gt;<sp/>tmp_int_comp_names;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>NStructInt<sp/>+<sp/>NumIntComps();<sp/>++i<sp/>)</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>write_int_comp.push_back(1);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(int_comp_names.size()<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;int_comp&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp_int_comp_names.push_back(ss.str());</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp_int_comp_names.push_back(int_comp_names[i]);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>WriteBinaryParticleData(dir,<sp/>name,<sp/>write_real_comp,<sp/>write_int_comp,</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp_real_comp_names,<sp/>tmp_int_comp_names,</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[=]<sp/><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SuperParticleType&amp;<sp/>p)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p.id()<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="81"><highlight class="normal">}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NStructReal,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NStructInt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NArrayReal,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NArrayInt&gt;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal">ParticleContainer&lt;NStructReal,<sp/>NStructInt,<sp/>NArrayReal,<sp/>NArrayInt&gt;</highlight></codeline>
<codeline lineno="86"><highlight class="normal">::Checkpoint<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>dir,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="87"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>Vector&lt;int&gt;<sp/>write_real_comp;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>Vector&lt;std::string&gt;<sp/>real_comp_names;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>NStructReal<sp/>+<sp/>NumRealComps();<sp/>++i<sp/>)</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>write_real_comp.push_back(1);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;real_comp&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>real_comp_names.push_back(ss.str());</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>Vector&lt;int&gt;<sp/>write_int_comp;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>Vector&lt;std::string&gt;<sp/>int_comp_names;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>NStructInt<sp/>+<sp/>NumIntComps();<sp/>++i<sp/>)</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>write_int_comp.push_back(1);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;int_comp&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int_comp_names.push_back(ss.str());</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>WriteBinaryParticleData(dir,<sp/>name,<sp/>write_real_comp,<sp/>write_int_comp,</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>real_comp_names,<sp/>int_comp_names,</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[=]<sp/><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SuperParticleType&amp;<sp/>p)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p.id()<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="114"><highlight class="normal">}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NStructReal,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NStructInt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NArrayReal,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NArrayInt&gt;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal">ParticleContainer&lt;NStructReal,<sp/>NStructInt,<sp/>NArrayReal,<sp/>NArrayInt&gt;</highlight></codeline>
<codeline lineno="119"><highlight class="normal">::WritePlotFile<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>dir,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="120"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>Vector&lt;int&gt;<sp/>write_real_comp;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>Vector&lt;std::string&gt;<sp/>real_comp_names;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>NStructReal<sp/>+<sp/>NumRealComps();<sp/>++i<sp/>)</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>write_real_comp.push_back(1);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;real_comp&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>real_comp_names.push_back(ss.str());</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>Vector&lt;int&gt;<sp/>write_int_comp;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>Vector&lt;std::string&gt;<sp/>int_comp_names;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>NStructInt<sp/>+<sp/>NumIntComps();<sp/>++i<sp/>)</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>write_int_comp.push_back(1);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;int_comp&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int_comp_names.push_back(ss.str());</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>WriteBinaryParticleData(dir,<sp/>name,<sp/>write_real_comp,<sp/>write_int_comp,</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>real_comp_names,<sp/>int_comp_names,</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[=]<sp/><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SuperParticleType&amp;<sp/>p)</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p.id()<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="147"><highlight class="normal">}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NStructReal,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NStructInt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NArrayReal,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NArrayInt&gt;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal">ParticleContainer&lt;NStructReal,<sp/>NStructInt,<sp/>NArrayReal,<sp/>NArrayInt&gt;</highlight></codeline>
<codeline lineno="152"><highlight class="normal">::WritePlotFile<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>dir,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name,</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&lt;std::string&gt;&amp;<sp/>real_comp_names,</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&lt;std::string&gt;&amp;<sp/>int_comp_names)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="155"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLassert_8H_1aad6450907585a147153aef621fdc6007" kindref="member">AMREX_ASSERT</ref>(real_comp_names.size()<sp/>==<sp/>NStructReal<sp/>+<sp/>NumRealComps());</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLassert_8H_1aad6450907585a147153aef621fdc6007" kindref="member">AMREX_ASSERT</ref>(<sp/>int_comp_names.size()<sp/>==<sp/>NStructInt<sp/><sp/>+<sp/>NumIntComps()<sp/>);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>Vector&lt;int&gt;<sp/>write_real_comp;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>NStructReal<sp/>+<sp/>NumRealComps();<sp/>++i)<sp/>write_real_comp.push_back(1);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>Vector&lt;int&gt;<sp/>write_int_comp;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>NStructInt<sp/>+<sp/>NumIntComps();<sp/>++i)<sp/>write_int_comp.push_back(1);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>WriteBinaryParticleData(dir,<sp/>name,</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>write_real_comp,<sp/>write_int_comp,</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>real_comp_names,<sp/>int_comp_names,</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[=]<sp/><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SuperParticleType&amp;<sp/>p)</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p.id()<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="172"><highlight class="normal">}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NStructReal,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NStructInt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NArrayReal,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NArrayInt&gt;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal">ParticleContainer&lt;NStructReal,<sp/>NStructInt,<sp/>NArrayReal,<sp/>NArrayInt&gt;</highlight></codeline>
<codeline lineno="177"><highlight class="normal">::WritePlotFile<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>dir,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name,</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&lt;std::string&gt;&amp;<sp/>real_comp_names)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="179"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLassert_8H_1aad6450907585a147153aef621fdc6007" kindref="member">AMREX_ASSERT</ref>(real_comp_names.size()<sp/>==<sp/>NStructReal<sp/>+<sp/>NumRealComps());</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>Vector&lt;int&gt;<sp/>write_real_comp;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>NStructReal<sp/>+<sp/>NumRealComps();<sp/>++i)<sp/>write_real_comp.push_back(1);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>Vector&lt;int&gt;<sp/>write_int_comp;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>NStructInt<sp/>+<sp/>NumIntComps();<sp/>++i)<sp/>write_int_comp.push_back(1);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>Vector&lt;std::string&gt;<sp/>int_comp_names;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>NStructInt<sp/>+<sp/>NumIntComps();<sp/>++i<sp/>)</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;int_comp&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int_comp_names.push_back(ss.str());</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>WriteBinaryParticleData(dir,<sp/>name,</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>write_real_comp,<sp/>write_int_comp,</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>real_comp_names,<sp/>int_comp_names,</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[=]<sp/><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ParticleType&amp;<sp/>p)</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p.id()<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="203"><highlight class="normal">}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NStructReal,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NStructInt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NArrayReal,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NArrayInt&gt;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal">ParticleContainer&lt;NStructReal,<sp/>NStructInt,<sp/>NArrayReal,<sp/>NArrayInt&gt;</highlight></codeline>
<codeline lineno="208"><highlight class="normal">::WritePlotFile<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>dir,</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name,</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&lt;int&gt;&amp;<sp/>write_real_comp,</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&lt;int&gt;&amp;<sp/>write_int_comp)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="212"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLassert_8H_1aad6450907585a147153aef621fdc6007" kindref="member">AMREX_ASSERT</ref>(write_real_comp.size()<sp/>==<sp/>NStructReal<sp/>+<sp/>NumRealComps());</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLassert_8H_1aad6450907585a147153aef621fdc6007" kindref="member">AMREX_ASSERT</ref>(write_int_comp.size()<sp/><sp/>==<sp/>NStructInt<sp/><sp/>+<sp/>NArrayInt<sp/>);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>Vector&lt;std::string&gt;<sp/>real_comp_names;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>NStructReal<sp/>+<sp/>NumRealComps();<sp/>++i<sp/>)</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;real_comp&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>real_comp_names.push_back(ss.str());</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>Vector&lt;std::string&gt;<sp/>int_comp_names;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>NStructInt<sp/>+<sp/>NumIntComps();<sp/>++i<sp/>)</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;int_comp&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int_comp_names.push_back(ss.str());</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>WriteBinaryParticleData(dir,<sp/>name,<sp/>write_real_comp,<sp/>write_int_comp,</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>real_comp_names,<sp/>int_comp_names,</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[=]<sp/><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SuperParticleType&amp;<sp/>p)</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p.id()<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="238"><highlight class="normal">}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NStructReal,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NStructInt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NArrayReal,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NArrayInt&gt;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><ref refid="classamrex_1_1ParticleContainer_1ab282bfa7fc64bfc5fceb25453569a526" kindref="member">ParticleContainer&lt;NStructReal, NStructInt, NArrayReal, NArrayInt&gt;::</ref></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><ref refid="classamrex_1_1ParticleContainer_1ab282bfa7fc64bfc5fceb25453569a526" kindref="member">WritePlotFile</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>dir,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name,</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&lt;int&gt;&amp;<sp/>write_real_comp,</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&lt;int&gt;&amp;<sp/>write_int_comp,</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&lt;std::string&gt;&amp;<sp/>real_comp_names,</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&lt;std::string&gt;&amp;<sp/><sp/>int_comp_names)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="248"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a548fbd9b2cd72a927f463003f4adb0b1" kindref="member">BL_PROFILE</ref>(</highlight><highlight class="stringliteral">&quot;ParticleContainer::WritePlotFile()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>WriteBinaryParticleData(dir,<sp/>name,</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>write_real_comp,<sp/>write_int_comp,</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>real_comp_names,<sp/>int_comp_names,</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[=]<sp/><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SuperParticleType&amp;<sp/>p)</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p.id()<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="258"><highlight class="normal">}</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NStructReal,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NStructInt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NArrayReal,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NArrayInt&gt;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>F,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;!std::is_same&lt;F,<sp/>Vector&lt;std::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&gt;&gt;::value&gt;::type*&gt;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal">ParticleContainer&lt;NStructReal,<sp/>NStructInt,<sp/>NArrayReal,<sp/>NArrayInt&gt;</highlight></codeline>
<codeline lineno="264"><highlight class="normal">::WritePlotFile<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>dir,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name,<sp/>F&amp;&amp;<sp/>f)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="265"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>Vector&lt;int&gt;<sp/>write_real_comp;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>Vector&lt;std::string&gt;<sp/>real_comp_names;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>NStructReal<sp/>+<sp/>NumRealComps();<sp/>++i<sp/>)</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>write_real_comp.push_back(1);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;real_comp&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>real_comp_names.push_back(ss.str());</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>Vector&lt;int&gt;<sp/>write_int_comp;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>Vector&lt;std::string&gt;<sp/>int_comp_names;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>NStructInt<sp/>+<sp/>NumIntComps();<sp/>++i<sp/>)</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>write_int_comp.push_back(1);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;int_comp&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int_comp_names.push_back(ss.str());</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>WriteBinaryParticleData(dir,<sp/>name,<sp/>write_real_comp,<sp/>write_int_comp,</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>real_comp_names,<sp/>int_comp_names,</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::forward&lt;F&gt;(f));</highlight></codeline>
<codeline lineno="289"><highlight class="normal">}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NStructReal,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NStructInt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NArrayReal,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NArrayInt&gt;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal">ParticleContainer&lt;NStructReal,<sp/>NStructInt,<sp/>NArrayReal,<sp/>NArrayInt&gt;</highlight></codeline>
<codeline lineno="295"><highlight class="normal">::WritePlotFile<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>dir,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name,</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&lt;std::string&gt;&amp;<sp/>real_comp_names,</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&lt;std::string&gt;&amp;<sp/>int_comp_names,<sp/>F&amp;&amp;<sp/>f)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="298"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLassert_8H_1aad6450907585a147153aef621fdc6007" kindref="member">AMREX_ASSERT</ref>(real_comp_names.size()<sp/>==<sp/>NStructReal<sp/>+<sp/>NumRealComps());</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLassert_8H_1aad6450907585a147153aef621fdc6007" kindref="member">AMREX_ASSERT</ref>(<sp/>int_comp_names.size()<sp/>==<sp/>NStructInt<sp/><sp/>+<sp/>NArrayInt<sp/>);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>Vector&lt;int&gt;<sp/>write_real_comp;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>NStructReal<sp/>+<sp/>NumRealComps();<sp/>++i)<sp/>write_real_comp.push_back(1);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>Vector&lt;int&gt;<sp/>write_int_comp;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>NStructInt<sp/>+<sp/>NumIntComps();<sp/>++i)<sp/>write_int_comp.push_back(1);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>WriteBinaryParticleData(dir,<sp/>name,</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>write_real_comp,<sp/>write_int_comp,</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>real_comp_names,<sp/>int_comp_names,</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::forward&lt;F&gt;(f));</highlight></codeline>
<codeline lineno="312"><highlight class="normal">}</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NStructReal,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NStructInt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NArrayReal,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NArrayInt&gt;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>F,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;!std::is_same&lt;F,<sp/>Vector&lt;std::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&gt;&gt;::value&gt;::type*&gt;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal">ParticleContainer&lt;NStructReal,<sp/>NStructInt,<sp/>NArrayReal,<sp/>NArrayInt&gt;</highlight></codeline>
<codeline lineno="318"><highlight class="normal">::WritePlotFile<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>dir,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name,</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&lt;std::string&gt;&amp;<sp/>real_comp_names,<sp/>F&amp;&amp;<sp/>f)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="320"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLassert_8H_1aad6450907585a147153aef621fdc6007" kindref="member">AMREX_ASSERT</ref>(real_comp_names.size()<sp/>==<sp/>NStructReal<sp/>+<sp/>NumRealComps());</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>Vector&lt;int&gt;<sp/>write_real_comp;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>NStructReal<sp/>+<sp/>NumRealComps();<sp/>++i)<sp/>write_real_comp.push_back(1);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>Vector&lt;int&gt;<sp/>write_int_comp;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>NStructInt<sp/>+<sp/>NumIntComps();<sp/>++i)<sp/>write_int_comp.push_back(1);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>Vector&lt;std::string&gt;<sp/>int_comp_names;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>NStructInt<sp/>+<sp/>NumIntComps();<sp/>++i<sp/>)</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;int_comp&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int_comp_names.push_back(ss.str());</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>WriteBinaryParticleData(dir,<sp/>name,</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>write_real_comp,<sp/>write_int_comp,</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>real_comp_names,<sp/>int_comp_names,</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::forward&lt;F&gt;(f));</highlight></codeline>
<codeline lineno="341"><highlight class="normal">}</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NStructReal,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NStructInt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NArrayReal,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NArrayInt&gt;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal">ParticleContainer&lt;NStructReal,<sp/>NStructInt,<sp/>NArrayReal,<sp/>NArrayInt&gt;</highlight></codeline>
<codeline lineno="347"><highlight class="normal">::WritePlotFile<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>dir,</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name,</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&lt;int&gt;&amp;<sp/>write_real_comp,</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&lt;int&gt;&amp;<sp/>write_int_comp,<sp/>F&amp;&amp;<sp/>f)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="351"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLassert_8H_1aad6450907585a147153aef621fdc6007" kindref="member">AMREX_ASSERT</ref>(write_real_comp.size()<sp/>==<sp/>NStructReal<sp/>+<sp/>NumRealComps());</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLassert_8H_1aad6450907585a147153aef621fdc6007" kindref="member">AMREX_ASSERT</ref>(write_int_comp.size()<sp/><sp/>==<sp/>NStructInt<sp/><sp/>+<sp/>NumIntComps()<sp/>);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>Vector&lt;std::string&gt;<sp/>real_comp_names;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>NStructReal<sp/>+<sp/>NumRealComps();<sp/>++i<sp/>)</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;real_comp&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>real_comp_names.push_back(ss.str());</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>Vector&lt;std::string&gt;<sp/>int_comp_names;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>NStructInt<sp/>+<sp/>NumIntComps();<sp/>++i<sp/>)</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;int_comp&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int_comp_names.push_back(ss.str());</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>WriteBinaryParticleData(dir,<sp/>name,<sp/>write_real_comp,<sp/>write_int_comp,</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>real_comp_names,<sp/>int_comp_names,</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::forward&lt;F&gt;(f));</highlight></codeline>
<codeline lineno="374"><highlight class="normal">}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NStructReal,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NStructInt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NArrayReal,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NArrayInt&gt;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><ref refid="classamrex_1_1ParticleContainer_1ab282bfa7fc64bfc5fceb25453569a526" kindref="member">ParticleContainer&lt;NStructReal, NStructInt, NArrayReal, NArrayInt&gt;::</ref></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><ref refid="classamrex_1_1ParticleContainer_1ab282bfa7fc64bfc5fceb25453569a526" kindref="member">WritePlotFile</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>dir,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name,</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&lt;int&gt;&amp;<sp/>write_real_comp,</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&lt;int&gt;&amp;<sp/>write_int_comp,</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&lt;std::string&gt;&amp;<sp/>real_comp_names,</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&lt;std::string&gt;&amp;<sp/><sp/>int_comp_names,</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>F&amp;&amp;<sp/>f)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="386"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a548fbd9b2cd72a927f463003f4adb0b1" kindref="member">BL_PROFILE</ref>(</highlight><highlight class="stringliteral">&quot;ParticleContainer::WritePlotFile()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>WriteBinaryParticleData(dir,<sp/>name,</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>write_real_comp,<sp/>write_int_comp,</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>real_comp_names,<sp/>int_comp_names,</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::forward&lt;F&gt;(f));</highlight></codeline>
<codeline lineno="393"><highlight class="normal">}</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NStructReal,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NStructInt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NArrayReal,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NArrayInt&gt;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal">ParticleContainer&lt;NStructReal,<sp/>NStructInt,<sp/>NArrayReal,<sp/>NArrayInt&gt;</highlight></codeline>
<codeline lineno="399"><highlight class="normal">::WriteBinaryParticleData<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>dir,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name,</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&lt;int&gt;&amp;<sp/>write_real_comp,</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&lt;int&gt;&amp;<sp/>write_int_comp,</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&lt;std::string&gt;&amp;<sp/>real_comp_names,</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&lt;std::string&gt;&amp;<sp/>int_comp_names,</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>F&amp;&amp;<sp/>f)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="405"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceamrex_1_1AsyncOut_1adbc79ec1aacd0106757683aea46b43ce" kindref="member">AsyncOut::UseAsyncOut</ref>())<sp/>{</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__WriteBinaryParticleData_8H_1a08ed7f65d7bd308974da547953f67f82" kindref="member">WriteBinaryParticleDataAsync</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>dir,<sp/>name,</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>write_real_comp,<sp/>write_int_comp,</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>real_comp_names,<sp/>int_comp_names);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__WriteBinaryParticleData_8H_1a856d819dcad423902da588200ce20a96" kindref="member">WriteBinaryParticleDataSync</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>dir,<sp/>name,</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>write_real_comp,<sp/>write_int_comp,</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>real_comp_names,<sp/>int_comp_names,</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::forward&lt;F&gt;(f));</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="417"><highlight class="normal">}</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NStructReal,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NStructInt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NArrayReal,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NArrayInt&gt;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal">ParticleContainer&lt;NStructReal,<sp/>NStructInt,<sp/>NArrayReal,<sp/>NArrayInt&gt;</highlight></codeline>
<codeline lineno="422"><highlight class="normal">::CheckpointPre<sp/>()</highlight></codeline>
<codeline lineno="423"><highlight class="normal">{</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<sp/>usePrePost)<sp/>{</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a548fbd9b2cd72a927f463003f4adb0b1" kindref="member">BL_PROFILE</ref>(</highlight><highlight class="stringliteral">&quot;ParticleContainer::CheckpointPre()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>IOProcNumber<sp/>=<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1ab734a5d614e753d28d03865ee6e4039a" kindref="member">ParallelDescriptor::IOProcessorNumber</ref>();</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/>Long<sp/>nparticles<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/>Long<sp/><sp/>maxnextid<sp/><sp/>=<sp/>ParticleType::NextID();</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lev<sp/>=<sp/>0;<sp/>lev<sp/>&lt;<sp/>m_particles.size();<sp/><sp/>lev++)<sp/>{</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>pmap<sp/>=<sp/>m_particles[lev];</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>kv<sp/>:<sp/>pmap)<sp/>{</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>aos<sp/>=<sp/>kv.second.GetArrayOfStructs();</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>aos.numParticles();<sp/>++k)<sp/>{</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ParticleType&amp;<sp/>p<sp/>=<sp/>aos[k];</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p.id()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Only<sp/>count<sp/>(and<sp/>checkpoint)<sp/>valid<sp/>particles.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nparticles++;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a98c9e67e17bd55e681d9e790611a1289" kindref="member">ParallelDescriptor::ReduceLongSum</ref>(nparticles,<sp/>IOProcNumber);</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/>ParticleType::NextID(maxnextid);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a72761a0aff0775f8f6943062a34fca31" kindref="member">ParallelDescriptor::ReduceLongMax</ref>(maxnextid,<sp/>IOProcNumber);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>nparticlesPrePost<sp/>=<sp/>nparticles;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/>maxnextidPrePost<sp/><sp/>=<sp/>maxnextid;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/>nParticlesAtLevelPrePost.clear();</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/>nParticlesAtLevelPrePost.resize(finestLevel()<sp/>+<sp/>1,<sp/>0);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lev(0);<sp/>lev<sp/>&lt;=<sp/>finestLevel();<sp/>++lev)<sp/>{</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nParticlesAtLevelPrePost[lev]<sp/>=<sp/>NumberOfParticlesAtLevel(lev);</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>whichPrePost.clear();</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>whichPrePost.resize(finestLevel()<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/>countPrePost.clear();</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/>countPrePost.resize(finestLevel()<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/>wherePrePost.clear();</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/>wherePrePost.resize(finestLevel()<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>filePrefixPrePost.clear();</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/>filePrefixPrePost.resize(finestLevel()<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="472"><highlight class="normal">}</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NStructReal,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NStructInt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NArrayReal,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NArrayInt&gt;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal">ParticleContainer&lt;NStructReal,<sp/>NStructInt,<sp/>NArrayReal,<sp/>NArrayInt&gt;</highlight></codeline>
<codeline lineno="478"><highlight class="normal">::CheckpointPost<sp/>()</highlight></codeline>
<codeline lineno="479"><highlight class="normal">{</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<sp/>usePrePost)<sp/>{</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a548fbd9b2cd72a927f463003f4adb0b1" kindref="member">BL_PROFILE</ref>(</highlight><highlight class="stringliteral">&quot;ParticleContainer::CheckpointPost()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>IOProcNumber<sp/>=<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1ab734a5d614e753d28d03865ee6e4039a" kindref="member">ParallelDescriptor::IOProcessorNumber</ref>();</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ofstream<sp/>HdrFile;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/>HdrFile.open(HdrFileNamePrePost.c_str(),<sp/>std::ios::out<sp/>|<sp/>std::ios::app);</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lev(0);<sp/>lev<sp/>&lt;=<sp/>finestLevel();<sp/>++lev)<sp/>{</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a132abb9498b1ed2f491583c1f7719afb" kindref="member">ParallelDescriptor::ReduceIntSum</ref><sp/>(whichPrePost[lev].dataPtr(),<sp/>whichPrePost[lev].<ref refid="namespaceamrex_1_1Gpu_1_1range__detail_1a57949ca6008ad4fe7edb4e00741b1906" kindref="member">size</ref>(),<sp/>IOProcNumber);</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a132abb9498b1ed2f491583c1f7719afb" kindref="member">ParallelDescriptor::ReduceIntSum</ref><sp/>(countPrePost[lev].dataPtr(),<sp/>countPrePost[lev].<ref refid="namespaceamrex_1_1Gpu_1_1range__detail_1a57949ca6008ad4fe7edb4e00741b1906" kindref="member">size</ref>(),<sp/>IOProcNumber);</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a98c9e67e17bd55e681d9e790611a1289" kindref="member">ParallelDescriptor::ReduceLongSum</ref>(wherePrePost[lev].dataPtr(),<sp/>wherePrePost[lev].<ref refid="namespaceamrex_1_1Gpu_1_1range__detail_1a57949ca6008ad4fe7edb4e00741b1906" kindref="member">size</ref>(),<sp/>IOProcNumber);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="namespaceamrex_1_1ParallelDescriptor_1ac7fb3467af4aabf15e61cb9c27e916d9" kindref="member">ParallelDescriptor::IOProcessor</ref>())<sp/>{</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j(0);<sp/>j<sp/>&lt;<sp/>whichPrePost[lev].size();<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HdrFile<sp/>&lt;&lt;<sp/>whichPrePost[lev][j]<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>countPrePost[lev][j]<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>wherePrePost[lev][j]<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>gotsome<sp/>=<sp/>(nParticlesAtLevelPrePost[lev]<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(gotsome<sp/>&amp;&amp;<sp/>doUnlink)<sp/>{</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BL_PROFILE_VAR(&quot;PC&lt;NNNN&gt;::Checkpoint:unlink&quot;,<sp/>unlink_post);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Unlink<sp/>any<sp/>zero-length<sp/>data<sp/>files.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vector&lt;Long&gt;<sp/>cnt(nOutFilesPrePost,0);</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i(0),<sp/>N<sp/>=<sp/>countPrePost[lev].<ref refid="namespaceamrex_1_1Gpu_1_1range__detail_1a57949ca6008ad4fe7edb4e00741b1906" kindref="member">size</ref>();<sp/>i<sp/>&lt;<sp/>N;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cnt[whichPrePost[lev][i]]<sp/>+=<sp/>countPrePost[lev][i];</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i(0),<sp/>N<sp/>=<sp/>cnt.size();<sp/>i<sp/>&lt;<sp/>N;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(cnt[i]<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>FullFileName<sp/>=<sp/>NFilesIter::FileName(i,<sp/>filePrefixPrePost[lev]);</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1FileSystem_1a1887698566ebd58596be3b1a96ad2e9a" kindref="member">FileSystem::Remove</ref>(FullFileName);</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="namespaceamrex_1_1ParallelDescriptor_1ac7fb3467af4aabf15e61cb9c27e916d9" kindref="member">ParallelDescriptor::IOProcessor</ref>())<sp/>{</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HdrFile.flush();</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HdrFile.close();</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<sp/>HdrFile.good())<sp/>{</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1ad26f2328bf66aa9678347a6055a25431" kindref="member">amrex::Abort</ref>(</highlight><highlight class="stringliteral">&quot;ParticleContainer::CheckpointPost():<sp/>problem<sp/>writing<sp/>HdrFile&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="528"><highlight class="normal">}</highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NStructReal,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NStructInt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NArrayReal,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NArrayInt&gt;</highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal">ParticleContainer&lt;NStructReal,<sp/>NStructInt,<sp/>NArrayReal,<sp/>NArrayInt&gt;</highlight></codeline>
<codeline lineno="533"><highlight class="normal">::WritePlotFilePre<sp/>()</highlight></codeline>
<codeline lineno="534"><highlight class="normal">{</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/>CheckpointPre();</highlight></codeline>
<codeline lineno="536"><highlight class="normal">}</highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NStructReal,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NStructInt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NArrayReal,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NArrayInt&gt;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal">ParticleContainer&lt;NStructReal,<sp/>NStructInt,<sp/>NArrayReal,<sp/>NArrayInt&gt;</highlight></codeline>
<codeline lineno="542"><highlight class="normal">::WritePlotFilePost<sp/>()</highlight></codeline>
<codeline lineno="543"><highlight class="normal">{</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/>CheckpointPost();</highlight></codeline>
<codeline lineno="545"><highlight class="normal">}</highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NStructReal,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NStructInt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NArrayReal,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NArrayInt&gt;</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal">ParticleContainer&lt;NStructReal,<sp/>NStructInt,<sp/>NArrayReal,<sp/>NArrayInt&gt;</highlight></codeline>
<codeline lineno="551"><highlight class="normal">::WriteParticles<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lev,<sp/>std::ofstream&amp;<sp/>ofs,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fnum,</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vector&lt;int&gt;&amp;<sp/>which,<sp/>Vector&lt;int&gt;&amp;<sp/>count,<sp/>Vector&lt;Long&gt;&amp;<sp/>where,</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&lt;int&gt;&amp;<sp/>write_real_comp,</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&lt;int&gt;&amp;<sp/>write_int_comp,</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&lt;std::map&lt;std::pair&lt;int,<sp/>int&gt;,<sp/>Gpu::DeviceVector&lt;int&gt;&gt;&gt;&amp;<sp/>particle_io_flags)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="556"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a548fbd9b2cd72a927f463003f4adb0b1" kindref="member">BL_PROFILE</ref>(</highlight><highlight class="stringliteral">&quot;ParticleContainer::WriteParticles()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>a<sp/>each<sp/>grid,<sp/>the<sp/>tiles<sp/>it<sp/>contains</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;int,<sp/>Vector&lt;int&gt;<sp/>&gt;<sp/>tile_map;</highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>kv<sp/>:<sp/>m_particles[lev])</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>grid<sp/>=<sp/>kv.first.first;</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tile<sp/>=<sp/>kv.first.second;</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tile_map[grid].push_back(tile);</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>pflags<sp/>=<sp/>particle_io_flags[lev].at(kv.first);</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Only<sp/>write<sp/>out<sp/>valid<sp/>particles.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>kv.second.GetArrayOfStructs().numParticles();<sp/>++k)</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pflags[k])<sp/>cnt++;</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count[grid]<sp/>+=<sp/>cnt;</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/>MFInfo<sp/>info;</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/>info.SetAlloc(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/>MultiFab<sp/>state(ParticleBoxArray(lev),<sp/>ParticleDistributionMap(lev),<sp/>1,0,info);</highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(MFIter<sp/>mfi(state);<sp/>mfi.isValid();<sp/>++mfi)</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>grid<sp/>=<sp/>mfi.index();</highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>which[grid]<sp/>=<sp/>fnum;</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>where[grid]<sp/>=<sp/>VisMF::FileOffset(ofs);</highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count[grid]<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>First<sp/>write<sp/>out<sp/>the<sp/>integer<sp/>data<sp/>in<sp/>binary.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_output_int<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>NumIntComps()<sp/>+<sp/>NStructInt;<sp/>++i)</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(write_int_comp[i])<sp/>++num_output_int;</highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iChunkSize<sp/>=<sp/>2<sp/>+<sp/>num_output_int;</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vector&lt;int&gt;<sp/>istuff(count[grid]*iChunkSize);</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>iptr<sp/>=<sp/>istuff.dataPtr();</highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>tile_map[grid].size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ptile_index<sp/>=<sp/>std::make_pair(grid,<sp/>tile_map[grid][i]);</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>pbox<sp/>=<sp/>m_particles[lev].at(ptile_index);</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>pflags<sp/>=<sp/>particle_io_flags[lev].at(ptile_index);</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pindex<sp/>=<sp/>0;<sp/>pindex<sp/>&lt;<sp/>pbox.GetArrayOfStructs().numParticles();<sp/>++pindex)<sp/>{</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>aos<sp/>=<sp/>pbox.GetArrayOfStructs();</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>p<sp/>=<sp/>aos[pindex];</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pflags[pindex])</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>always<sp/>write<sp/>these</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*iptr<sp/>=<sp/>p.id();<sp/>++iptr;</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*iptr<sp/>=<sp/>p.cpu();<sp/>++iptr;</highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>optionally<sp/>write<sp/>these</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>NStructInt;<sp/>j++)</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(write_int_comp[j])</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*iptr<sp/>=<sp/>p.idata(j);</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++iptr;</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>soa<sp/><sp/>=<sp/>pbox.GetStructOfArrays();</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>NumIntComps();<sp/>j++)</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(write_int_comp[NStructInt+j])</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*iptr<sp/>=<sp/>soa.GetIntData(j)[pindex];</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++iptr;</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a0718da697f64bda3be2152538b70d4c5" kindref="member">writeIntData</ref>(istuff.dataPtr(),<sp/>istuff.size(),<sp/>ofs);</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ofs.flush();<sp/><sp/></highlight><highlight class="comment">//<sp/>Some<sp/>systems<sp/>require<sp/>this<sp/>flush()<sp/>(probably<sp/>due<sp/>to<sp/>a<sp/>bug)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Write<sp/>the<sp/>Real<sp/>data<sp/>in<sp/>binary.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_output_real<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>NumRealComps()<sp/>+<sp/>NStructReal;<sp/>++i)</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(write_real_comp[i])<sp/>++num_output_real;</highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rChunkSize<sp/>=<sp/>AMREX_SPACEDIM<sp/>+<sp/>num_output_real;</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vector&lt;typename<sp/>ParticleType::RealType&gt;<sp/>rstuff(count[grid]*rChunkSize);</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ParticleType::RealType*<sp/>rptr<sp/>=<sp/>rstuff.dataPtr();</highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>tile_map[grid].size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ptile_index<sp/>=<sp/>std::make_pair(grid,<sp/>tile_map[grid][i]);</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>pbox<sp/>=<sp/>m_particles[lev].at(ptile_index);</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>pflags<sp/>=<sp/>particle_io_flags[lev].at(ptile_index);</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pindex<sp/>=<sp/>0;<sp/>pindex<sp/>&lt;<sp/>pbox.GetArrayOfStructs().numParticles();<sp/>++pindex)<sp/>{</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>aos<sp/>=<sp/>pbox.GetArrayOfStructs();</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>p<sp/>=<sp/>aos[pindex];</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pflags[pindex])</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>always<sp/>write<sp/>these</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>AMREX_SPACEDIM;<sp/>j++)<sp/>rptr[j]<sp/>=<sp/>p.pos(j);</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rptr<sp/>+=<sp/>AMREX_SPACEDIM;</highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>optionally<sp/>write<sp/>these</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>NStructReal;<sp/>j++)</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(write_real_comp[j])</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*rptr<sp/>=<sp/>p.rdata(j);</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++rptr;</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>soa<sp/><sp/>=<sp/>pbox.GetStructOfArrays();</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>NumRealComps();<sp/>j++)</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(write_real_comp[NStructReal+j])</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*rptr<sp/>=<sp/>(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ParticleType::RealType)<sp/>soa.GetRealData(j)[pindex];</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++rptr;</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WriteParticleRealData(rstuff.dataPtr(),<sp/>rstuff.size(),<sp/>ofs);</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ofs.flush();<sp/><sp/></highlight><highlight class="comment">//<sp/>Some<sp/>systems<sp/>require<sp/>this<sp/>flush()<sp/>(probably<sp/>due<sp/>to<sp/>a<sp/>bug)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="688"><highlight class="normal">}</highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NStructReal,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NStructInt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NArrayReal,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NArrayInt&gt;</highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal">ParticleContainer&lt;NStructReal,<sp/>NStructInt,<sp/>NArrayReal,<sp/>NArrayInt&gt;</highlight></codeline>
<codeline lineno="694"><highlight class="normal">::Restart<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>dir,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>file,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*is_checkpoint*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="695"><highlight class="normal">{</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/>Restart(dir,<sp/>file);</highlight></codeline>
<codeline lineno="697"><highlight class="normal">}</highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NStructReal,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NStructInt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NArrayReal,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NArrayInt&gt;</highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal">ParticleContainer&lt;NStructReal,<sp/>NStructInt,<sp/>NArrayReal,<sp/>NArrayInt&gt;</highlight></codeline>
<codeline lineno="702"><highlight class="normal">::Restart<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>dir,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>file)</highlight></codeline>
<codeline lineno="703"><highlight class="normal">{</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a548fbd9b2cd72a927f463003f4adb0b1" kindref="member">BL_PROFILE</ref>(</highlight><highlight class="stringliteral">&quot;ParticleContainer::Restart()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLassert_8H_1aad6450907585a147153aef621fdc6007" kindref="member">AMREX_ASSERT</ref>(!dir.empty());</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLassert_8H_1aad6450907585a147153aef621fdc6007" kindref="member">AMREX_ASSERT</ref>(!file.empty());</highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Real<sp/>strttime<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Real</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="namespaceamrex_1a6f975f843338c8eada684f0e8e2c0cb7" kindref="member">amrex::second</ref>());</highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>DATA_Digits_Read(5);</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/>ParmParse<sp/><ref refid="AMReX__HypreIJIface_8cpp_1a0f759ac05320ca5b06c49fd9501b9135" kindref="member">pp</ref>(</highlight><highlight class="stringliteral">&quot;particles&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__HypreIJIface_8cpp_1a0f759ac05320ca5b06c49fd9501b9135" kindref="member">pp</ref>.<ref refid="classamrex_1_1ParmParse_1aa98ab18bc26692876f9590316af5b1fa" kindref="member">query</ref>(</highlight><highlight class="stringliteral">&quot;datadigits_read&quot;</highlight><highlight class="normal">,DATA_Digits_Read);</highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>fullname<sp/>=<sp/>dir;</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fullname.empty()<sp/>&amp;&amp;<sp/>fullname[fullname.size()-1]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fullname<sp/>+=<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/>fullname<sp/>+=<sp/>file;</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>HdrFileName<sp/>=<sp/>fullname;</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!HdrFileName.empty()<sp/>&amp;&amp;<sp/>HdrFileName[HdrFileName.size()-1]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HdrFileName<sp/>+=<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/>HdrFileName<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;Header&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/>Vector&lt;char&gt;<sp/>fileCharPtr;</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a4736dec48acb46827a04cdca7b4045d7" kindref="member">ParallelDescriptor::ReadAndBcastFile</ref>(HdrFileName,<sp/>fileCharPtr);</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>fileCharPtrString(fileCharPtr.dataPtr());</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/>std::istringstream<sp/>HdrFile(fileCharPtrString,<sp/>std::istringstream::in);</highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>version;</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/>HdrFile<sp/>&gt;&gt;<sp/>version;</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLassert_8H_1aad6450907585a147153aef621fdc6007" kindref="member">AMREX_ASSERT</ref>(!version.empty());</highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>What<sp/>do<sp/>our<sp/>version<sp/>strings<sp/>mean?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;Version_One_Dot_Zero&quot;<sp/>--<sp/>hard-wired<sp/>to<sp/>write<sp/>out<sp/>in<sp/>double<sp/>precision.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;Version_One_Dot_One&quot;<sp/>--<sp/>can<sp/>write<sp/>out<sp/>either<sp/>as<sp/>either<sp/>single<sp/>or<sp/>double<sp/>precision.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Appended<sp/>to<sp/>the<sp/>latter<sp/>version<sp/>string<sp/>are<sp/>either<sp/>&quot;_single&quot;<sp/>or<sp/>&quot;_double&quot;<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>indicate<sp/>how<sp/>the<sp/>particles<sp/>were<sp/>written.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;Version_Two_Dot_Zero&quot;<sp/>--<sp/>this<sp/>is<sp/>the<sp/>AMReX<sp/>particle<sp/>file<sp/>format</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>how;</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(version.find(</highlight><highlight class="stringliteral">&quot;Version_One_Dot_Zero&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>std::string::npos)<sp/>{</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>how<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;double&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(version.find(</highlight><highlight class="stringliteral">&quot;Version_One_Dot_One&quot;</highlight><highlight class="normal">)<sp/><sp/>!=<sp/>std::string::npos<sp/>||</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>version.find(</highlight><highlight class="stringliteral">&quot;Version_Two_Dot_Zero&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>std::string::npos)<sp/>{</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(version.find(</highlight><highlight class="stringliteral">&quot;_single&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>std::string::npos)<sp/>{</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>how<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;single&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(version.find(</highlight><highlight class="stringliteral">&quot;_double&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>std::string::npos)<sp/>{</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>how<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;double&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>msg(</highlight><highlight class="stringliteral">&quot;ParticleContainer::Restart():<sp/>bad<sp/>version<sp/>string:<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg<sp/>+=<sp/>version;</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1aaa5d048f7bf7386b6976b10001a5f8b4" kindref="member">amrex::Error</ref>(version.c_str());</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>msg(</highlight><highlight class="stringliteral">&quot;ParticleContainer::Restart():<sp/>unknown<sp/>version<sp/>string:<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg<sp/>+=<sp/>version;</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1ad26f2328bf66aa9678347a6055a25431" kindref="member">amrex::Abort</ref>(msg.c_str());</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dm;</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/>HdrFile<sp/>&gt;&gt;<sp/>dm;</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dm<sp/>!=<sp/>AMREX_SPACEDIM)</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1ad26f2328bf66aa9678347a6055a25431" kindref="member">amrex::Abort</ref>(</highlight><highlight class="stringliteral">&quot;ParticleContainer::Restart():<sp/>dm<sp/>!=<sp/>AMREX_SPACEDIM&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nr;</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/>HdrFile<sp/>&gt;&gt;<sp/>nr;</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nr<sp/>!=<sp/>NStructReal<sp/>+<sp/>NumRealComps())</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1ad26f2328bf66aa9678347a6055a25431" kindref="member">amrex::Abort</ref>(</highlight><highlight class="stringliteral">&quot;ParticleContainer::Restart():<sp/>nr<sp/>!=<sp/>NStructReal<sp/>+<sp/>NumRealComps()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>comp_name;</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nr;<sp/>++i)</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HdrFile<sp/>&gt;&gt;<sp/>comp_name;</highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ni;</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/>HdrFile<sp/>&gt;&gt;<sp/>ni;</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ni<sp/>!=<sp/>NStructInt<sp/>+<sp/>NumIntComps())</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1ad26f2328bf66aa9678347a6055a25431" kindref="member">amrex::Abort</ref>(</highlight><highlight class="stringliteral">&quot;ParticleContainer::Restart():<sp/>ni<sp/>!=<sp/>NStructInt&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ni;<sp/>++i)</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HdrFile<sp/>&gt;&gt;<sp/>comp_name;</highlight></codeline>
<codeline lineno="783"><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>checkpoint;</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/>HdrFile<sp/>&gt;&gt;<sp/>checkpoint;</highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/>Long<sp/>nparticles;</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/>HdrFile<sp/>&gt;&gt;<sp/>nparticles;</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLassert_8H_1aad6450907585a147153aef621fdc6007" kindref="member">AMREX_ASSERT</ref>(nparticles<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="790"><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/>Long<sp/>maxnextid;</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/>HdrFile<sp/>&gt;&gt;<sp/>maxnextid;</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLassert_8H_1aad6450907585a147153aef621fdc6007" kindref="member">AMREX_ASSERT</ref>(maxnextid<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/>ParticleType::NextID(maxnextid);</highlight></codeline>
<codeline lineno="795"><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>finest_level_in_file;</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/>HdrFile<sp/>&gt;&gt;<sp/>finest_level_in_file;</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLassert_8H_1aad6450907585a147153aef621fdc6007" kindref="member">AMREX_ASSERT</ref>(finest_level_in_file<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="799"><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Determine<sp/>whether<sp/>this<sp/>is<sp/>a<sp/>dual-grid<sp/>restart<sp/>or<sp/>not.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/>Vector&lt;BoxArray&gt;<sp/>particle_box_arrays(finest_level_in_file<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>dual_grid<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>have_pheaders<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lev<sp/>=<sp/>0;<sp/>lev<sp/>&lt;=<sp/>finest_level_in_file;<sp/>lev++)</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>phdr_name<sp/>=<sp/>fullname;</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>phdr_name<sp/>=<sp/><ref refid="namespaceamrex_1a6e3a82e54e91d8c7543596b2c2476250" kindref="member">amrex::Concatenate</ref>(phdr_name<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/Level_&quot;</highlight><highlight class="normal">,<sp/>lev,<sp/>1);</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>phdr_name<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;/Particle_H&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceamrex_1a51791a9a04ee140c71cee50d3615ed35" kindref="member">amrex::FileExists</ref>(phdr_name))<sp/>{</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>have_pheaders<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(have_pheaders)</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lev<sp/>=<sp/>0;<sp/>lev<sp/>&lt;=<sp/>finest_level_in_file;<sp/>lev++)</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>phdr_name<sp/>=<sp/>fullname;</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>phdr_name<sp/>=<sp/><ref refid="namespaceamrex_1a6e3a82e54e91d8c7543596b2c2476250" kindref="member">amrex::Concatenate</ref>(phdr_name<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/Level_&quot;</highlight><highlight class="normal">,<sp/>lev,<sp/>1);</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>phdr_name<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;/Particle_H&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="824"><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/><ref refid="namespaceamrex_1a51791a9a04ee140c71cee50d3615ed35" kindref="member">amrex::FileExists</ref>(phdr_name))<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="826"><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vector&lt;char&gt;<sp/>phdr_chars;</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a4736dec48acb46827a04cdca7b4045d7" kindref="member">ParallelDescriptor::ReadAndBcastFile</ref>(phdr_name,<sp/>phdr_chars);</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>phdr_string(phdr_chars.dataPtr());</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::istringstream<sp/>phdr_file(phdr_string,<sp/>std::istringstream::in);</highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lev<sp/>&gt;<sp/>finestLevel())</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dual_grid<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="837"><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>particle_box_arrays[lev].readFrom(phdr_file);</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>particle_box_arrays[lev].CellEqual(ParticleBoxArray(lev)))<sp/>dual_grid<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>if<sp/>no<sp/>particle<sp/>box<sp/>array<sp/>information<sp/>exists<sp/>in<sp/>the<sp/>file,<sp/>we<sp/>assume<sp/>a<sp/>single<sp/>grid<sp/>restart</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dual_grid<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dual_grid)<sp/>{</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lev<sp/>=<sp/>0;<sp/>lev<sp/>&lt;=<sp/>finestLevel();<sp/>lev++)<sp/>{</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetParticleBoxArray(lev,<sp/>particle_box_arrays[lev]);</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DistributionMapping<sp/>pdm(particle_box_arrays[lev]);</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetParticleDistributionMap(lev,<sp/>pdm);</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/>Vector&lt;int&gt;<sp/>ngrids(finest_level_in_file+1);</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lev<sp/>=<sp/>0;<sp/>lev<sp/>&lt;=<sp/>finest_level_in_file;<sp/>lev++)<sp/>{</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HdrFile<sp/>&gt;&gt;<sp/>ngrids[lev];</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__BLassert_8H_1aad6450907585a147153aef621fdc6007" kindref="member">AMREX_ASSERT</ref>(ngrids[lev]<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lev<sp/>&lt;=<sp/>finestLevel())<sp/>{</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__BLassert_8H_1aad6450907585a147153aef621fdc6007" kindref="member">AMREX_ASSERT</ref>(ngrids[lev]<sp/>==<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(ParticleBoxArray(lev).<ref refid="namespaceamrex_1_1Gpu_1_1range__detail_1a57949ca6008ad4fe7edb4e00741b1906" kindref="member">size</ref>()));</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/>resizeData();</highlight></codeline>
<codeline lineno="864"><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(finest_level_in_file<sp/>&gt;<sp/>finestLevel())<sp/>{</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_particles.resize(finest_level_in_file+1);</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="868"><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lev<sp/>=<sp/>0;<sp/>lev<sp/>&lt;=<sp/>finest_level_in_file;<sp/>lev++)<sp/>{</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vector&lt;int&gt;<sp/><sp/>which(ngrids[lev]);</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vector&lt;int&gt;<sp/><sp/>count(ngrids[lev]);</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vector&lt;Long&gt;<sp/>where(ngrids[lev]);</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ngrids[lev];<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HdrFile<sp/>&gt;&gt;<sp/>which[i]<sp/>&gt;&gt;<sp/>count[i]<sp/>&gt;&gt;<sp/>where[i];</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="876"><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vector&lt;int&gt;<sp/>grids_to_read;</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lev<sp/>&lt;=<sp/>finestLevel())<sp/>{</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(MFIter<sp/>mfi(*m_dummy_mf[lev]);<sp/>mfi.isValid();<sp/>++mfi)<sp/>{</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>grids_to_read.push_back(mfi.index());</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="883"><highlight class="normal"></highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>lost<sp/>a<sp/>level<sp/>on<sp/>restart.<sp/>we<sp/>still<sp/>need<sp/>to<sp/>read<sp/>in<sp/>particles</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>on<sp/>finer<sp/>levels,<sp/>and<sp/>put<sp/>them<sp/>in<sp/>the<sp/>right<sp/>place<sp/>via<sp/>Redistribute()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rank<sp/>=<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a33162ef233c092e9e6fd75ab291b9b29" kindref="member">ParallelDescriptor::MyProc</ref>();</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NReaders<sp/>=<sp/>ParticleType::MaxReaders();</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rank<sp/>&gt;=<sp/>NReaders)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="890"><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Navg<sp/>=<sp/>ngrids[lev]<sp/>/<sp/>NReaders;</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Nleft<sp/>=<sp/>ngrids[lev]<sp/>-<sp/>Navg<sp/>*<sp/>NReaders;</highlight></codeline>
<codeline lineno="893"><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lo,<sp/>hi;</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rank<sp/>&lt;<sp/>Nleft)<sp/>{</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lo<sp/>=<sp/>rank*(Navg<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hi<sp/>=<sp/>lo<sp/>+<sp/>Navg<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lo<sp/>=<sp/>rank<sp/>*<sp/>Navg<sp/>+<sp/>Nleft;</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hi<sp/>=<sp/>lo<sp/>+<sp/>Navg;</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="903"><highlight class="normal"></highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>lo;<sp/>i<sp/>&lt;<sp/>hi;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>grids_to_read.push_back(i);</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="908"><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>igrid<sp/>=<sp/>0;<sp/>igrid<sp/>&lt;<sp/>static_cast&lt;int&gt;(grids_to_read.size());<sp/>++igrid)<sp/>{</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>grid<sp/>=<sp/>grids_to_read[igrid];</highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count[grid]<sp/>&lt;=<sp/>0)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="913"><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>file<sp/>names<sp/>in<sp/>the<sp/>header<sp/>file<sp/>are<sp/>relative.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>name<sp/>=<sp/>fullname;</highlight></codeline>
<codeline lineno="916"><highlight class="normal"></highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!name.empty()<sp/>&amp;&amp;<sp/>name[name.size()-1]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/>+=<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="919"><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;Level_&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/>+=<sp/><ref refid="namespaceamrex_1a6e3a82e54e91d8c7543596b2c2476250" kindref="member">amrex::Concatenate</ref>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>lev,<sp/>1);</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/>+=<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/>+=<sp/>ParticleType::DataPrefix();</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/>+=<sp/><ref refid="namespaceamrex_1a6e3a82e54e91d8c7543596b2c2476250" kindref="member">amrex::Concatenate</ref>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>which[grid],<sp/>DATA_Digits_Read);</highlight></codeline>
<codeline lineno="925"><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ifstream<sp/>ParticleFile;</highlight></codeline>
<codeline lineno="927"><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ParticleFile.open(name.c_str(),<sp/>std::ios::in<sp/>|<sp/>std::ios::binary);</highlight></codeline>
<codeline lineno="929"><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ParticleFile.good())</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1ac40a8be1926370de761ddd49c765d971" kindref="member">amrex::FileOpenFailed</ref>(name);</highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ParticleFile.seekg(where[grid],<sp/>std::ios::beg);</highlight></codeline>
<codeline lineno="934"><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(how<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;single&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ReadParticles&lt;float&gt;(count[grid],<sp/>grid,<sp/>lev,<sp/>ParticleFile,<sp/>finest_level_in_file);</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(how<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;double&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ReadParticles&lt;double&gt;(count[grid],<sp/>grid,<sp/>lev,<sp/>ParticleFile,<sp/>finest_level_in_file);</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>msg(</highlight><highlight class="stringliteral">&quot;ParticleContainer::Restart():<sp/>bad<sp/>parameter:<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg<sp/>+=<sp/>how;</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1aaa5d048f7bf7386b6976b10001a5f8b4" kindref="member">amrex::Error</ref>(msg.c_str());</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="946"><highlight class="normal"></highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ParticleFile.close();</highlight></codeline>
<codeline lineno="948"><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ParticleFile.good())</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1ad26f2328bf66aa9678347a6055a25431" kindref="member">amrex::Abort</ref>(</highlight><highlight class="stringliteral">&quot;ParticleContainer::Restart():<sp/>problem<sp/>reading<sp/>particles&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="953"><highlight class="normal"></highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/>Redistribute();</highlight></codeline>
<codeline lineno="955"><highlight class="normal"></highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLassert_8H_1aad6450907585a147153aef621fdc6007" kindref="member">AMREX_ASSERT</ref>(OK());</highlight></codeline>
<codeline lineno="957"><highlight class="normal"></highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_verbose<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Real<sp/>stoptime<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Real</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="namespaceamrex_1a6f975f843338c8eada684f0e8e2c0cb7" kindref="member">amrex::second</ref>()<sp/>-<sp/>strttime);</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a348148608639b17ff12dcda5fb94bfcc" kindref="member">ParallelDescriptor::ReduceRealMax</ref>(stoptime,<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1ab734a5d614e753d28d03865ee6e4039a" kindref="member">ParallelDescriptor::IOProcessorNumber</ref>());</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Print" kindref="compound">amrex::Print</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;ParticleContainer::Restart()<sp/>time:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>stoptime<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="963"><highlight class="normal">}</highlight></codeline>
<codeline lineno="964"><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Read<sp/>a<sp/>batch<sp/>of<sp/>particles<sp/>from<sp/>the<sp/>checkpoint<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NStructReal,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NStructInt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NArrayReal,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NArrayInt&gt;</highlight></codeline>
<codeline lineno="967"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>RTYPE&gt;</highlight></codeline>
<codeline lineno="968"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal">ParticleContainer&lt;NStructReal,<sp/>NStructInt,<sp/>NArrayReal,<sp/>NArrayInt&gt;</highlight></codeline>
<codeline lineno="970"><highlight class="normal">::ReadParticles<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>grd,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lev,<sp/>std::ifstream&amp;<sp/>ifs,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>finest_level_in_file)</highlight></codeline>
<codeline lineno="971"><highlight class="normal">{</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a548fbd9b2cd72a927f463003f4adb0b1" kindref="member">BL_PROFILE</ref>(</highlight><highlight class="stringliteral">&quot;ParticleContainer::ReadParticles()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLassert_8H_1aad6450907585a147153aef621fdc6007" kindref="member">AMREX_ASSERT</ref>(cnt<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLassert_8H_1aad6450907585a147153aef621fdc6007" kindref="member">AMREX_ASSERT</ref>(lev<sp/>&lt;<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(m_particles.size()));</highlight></codeline>
<codeline lineno="975"><highlight class="normal"></highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>First<sp/>read<sp/>in<sp/>the<sp/>integer<sp/>data<sp/>in<sp/>binary.<sp/><sp/>We<sp/>do<sp/>not<sp/>store</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>m_lev<sp/>and<sp/>m_grid<sp/>data<sp/>on<sp/>disk.<sp/><sp/>We<sp/>can<sp/>easily<sp/>recreate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>given<sp/>the<sp/>structure<sp/>of<sp/>the<sp/>checkpoint<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iChunkSize<sp/>=<sp/>2<sp/>+<sp/>NStructInt<sp/>+<sp/>NumIntComps();</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/>Vector&lt;int&gt;<sp/>istuff(cnt*iChunkSize);</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1af8ec915a2cffc7c342e1f15e52cbd697" kindref="member">readIntData</ref>(istuff.dataPtr(),<sp/>istuff.size(),<sp/>ifs,<sp/>FPC::NativeIntDescriptor());</highlight></codeline>
<codeline lineno="982"><highlight class="normal"></highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Then<sp/>the<sp/>real<sp/>data<sp/>in<sp/>binary.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rChunkSize<sp/>=<sp/>AMREX_SPACEDIM<sp/>+<sp/>NStructReal<sp/>+<sp/>NumRealComps();</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/>Vector&lt;RTYPE&gt;<sp/>rstuff(cnt*rChunkSize);</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/>ReadParticleRealData(rstuff.dataPtr(),<sp/>rstuff.size(),<sp/>ifs);</highlight></codeline>
<codeline lineno="987"><highlight class="normal"></highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>reassemble<sp/>the<sp/>particles.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/>iptr<sp/>=<sp/>istuff.dataPtr();</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/>RTYPE*<sp/>rptr<sp/>=<sp/>rstuff.dataPtr();</highlight></codeline>
<codeline lineno="991"><highlight class="normal"></highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/>ParticleType<sp/>p;</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/>ParticleLocData<sp/>pld;</highlight></codeline>
<codeline lineno="994"><highlight class="normal"></highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/>Vector&lt;std::map&lt;std::pair&lt;int,<sp/>int&gt;,<sp/>Gpu::HostVector&lt;ParticleType&gt;<sp/>&gt;<sp/>&gt;<sp/>host_particles;</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/>host_particles.reserve(15);</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/>host_particles.resize(finest_level_in_file+1);</highlight></codeline>
<codeline lineno="998"><highlight class="normal"></highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/>Vector&lt;std::map&lt;std::pair&lt;int,<sp/>int&gt;,</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;Gpu::HostVector&lt;Real&gt;<sp/>&gt;<sp/>&gt;<sp/>&gt;<sp/>host_real_attribs;</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/>host_real_attribs.reserve(15);</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/>host_real_attribs.resize(finest_level_in_file+1);</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/>Vector&lt;std::map&lt;std::pair&lt;int,<sp/>int&gt;,</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;Gpu::HostVector&lt;int&gt;<sp/>&gt;<sp/>&gt;<sp/>&gt;<sp/>host_int_attribs;</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/>host_int_attribs.reserve(15);</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/>host_int_attribs.resize(finest_level_in_file+1);</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"></highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>cnt;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p.id()<sp/><sp/><sp/>=<sp/>iptr[0];</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p.cpu()<sp/><sp/>=<sp/>iptr[1];</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iptr<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"></highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>NStructInt;<sp/>j++)</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p.idata(j)<sp/>=<sp/>*iptr;</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++iptr;</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__BLassert_8H_1aad6450907585a147153aef621fdc6007" kindref="member">AMREX_ASSERT</ref>(p.id()<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"></highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AMREX_D_TERM(p.pos(0)<sp/>=<sp/>ParticleReal(rptr[0]);,</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p.pos(1)<sp/>=<sp/>ParticleReal(rptr[1]);,</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p.pos(2)<sp/>=<sp/>ParticleReal(rptr[2]););</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"></highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rptr<sp/>+=<sp/>AMREX_SPACEDIM;</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"></highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>NStructReal;<sp/>j++)</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p.rdata(j)<sp/>=<sp/>ParticleReal(*rptr);</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++rptr;</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"></highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>locateParticle(p,<sp/>pld,<sp/>0,<sp/>finestLevel(),<sp/>0);</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"></highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/>std::pair&lt;int,<sp/>int&gt;<sp/>ind(grd,<sp/>pld.m_tile);</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>host_real_attribs[lev][ind].resize(NumRealComps());</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>host_int_attribs[lev][ind].resize(NumIntComps());</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"></highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>the<sp/>struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/>host_particles[lev][ind].push_back(p);</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"></highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>the<sp/>real...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>icomp<sp/>=<sp/>0;<sp/>icomp<sp/>&lt;<sp/>NumRealComps();<sp/>icomp++)<sp/>{</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>host_real_attribs[lev][ind][icomp].push_back(ParticleReal(*rptr));</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++rptr;</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"></highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>...<sp/>and<sp/>int<sp/>array<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>icomp<sp/>=<sp/>0;<sp/>icomp<sp/>&lt;<sp/>NumIntComps();<sp/>icomp++)<sp/>{</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>host_int_attribs[lev][ind][icomp].push_back(*iptr);</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++iptr;</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"></highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>host_lev<sp/>=<sp/>0;<sp/>host_lev<sp/>&lt;<sp/>static_cast&lt;int&gt;(host_particles.size());<sp/>++host_lev)</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>kv<sp/>:<sp/>host_particles[host_lev])<sp/>{</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>grid<sp/>=<sp/>kv.first.first;</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tile<sp/>=<sp/>kv.first.second;</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>src_tile<sp/>=<sp/>kv.second;</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>dst_tile<sp/>=<sp/>DefineAndReturnParticleTile(host_lev,<sp/>grid,<sp/>tile);</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>old_size<sp/>=<sp/>dst_tile.GetArrayOfStructs().size();</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>new_size<sp/>=<sp/>old_size<sp/>+<sp/>src_tile.size();</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dst_tile.resize(new_size);</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1Gpu_1a2c1110b22670288daa9e2a01cbb70fbb" kindref="member">Gpu::copy</ref>(<ref refid="namespaceamrex_1_1Gpu_1a4ffc2b3090d34803c0b78ee6f53d22a9" kindref="member">Gpu::hostToDevice</ref>,<sp/>src_tile.begin(),<sp/>src_tile.end(),</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst_tile.GetArrayOfStructs().begin()<sp/>+<sp/>old_size);</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"></highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>NumRealComps();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1Gpu_1a2c1110b22670288daa9e2a01cbb70fbb" kindref="member">Gpu::copy</ref>(<ref refid="namespaceamrex_1_1Gpu_1a4ffc2b3090d34803c0b78ee6f53d22a9" kindref="member">Gpu::hostToDevice</ref>,</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>host_real_attribs[host_lev][std::make_pair(grid,tile)][i].<ref refid="namespaceamrex_1a43103621a410a27f2e8b9607f4ae6f34" kindref="member">begin</ref>(),</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>host_real_attribs[host_lev][std::make_pair(grid,tile)][i].<ref refid="namespaceamrex_1a199ea36f687fd4271b73c72b56fd3279" kindref="member">end</ref>(),</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst_tile.GetStructOfArrays().GetRealData(i).begin()<sp/>+<sp/>old_size);</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"></highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>NumIntComps();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1Gpu_1a2c1110b22670288daa9e2a01cbb70fbb" kindref="member">Gpu::copy</ref>(<ref refid="namespaceamrex_1_1Gpu_1a4ffc2b3090d34803c0b78ee6f53d22a9" kindref="member">Gpu::hostToDevice</ref>,</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>host_int_attribs[host_lev][std::make_pair(grid,tile)][i].<ref refid="namespaceamrex_1a43103621a410a27f2e8b9607f4ae6f34" kindref="member">begin</ref>(),</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>host_int_attribs[host_lev][std::make_pair(grid,tile)][i].<ref refid="namespaceamrex_1a199ea36f687fd4271b73c72b56fd3279" kindref="member">end</ref>(),</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst_tile.GetStructOfArrays().GetIntData(i).begin()<sp/>+<sp/>old_size);</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"></highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1Gpu_1a67a618504ee5fb94bd65a5d393e344b4" kindref="member">Gpu::streamSynchronize</ref>();</highlight></codeline>
<codeline lineno="1090"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NStructReal,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NStructInt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NArrayReal,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NArrayInt&gt;</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><ref refid="classamrex_1_1ParticleContainer_1afa652b6ccee3292f1567ac82d3e3ebab" kindref="member">ParticleContainer&lt;NStructReal, NStructInt, NArrayReal, NArrayInt&gt;::WriteAsciiFile</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>filename)</highlight></codeline>
<codeline lineno="1095"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a548fbd9b2cd72a927f463003f4adb0b1" kindref="member">BL_PROFILE</ref>(</highlight><highlight class="stringliteral">&quot;ParticleContainer::WriteAsciiFile()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLassert_8H_1aad6450907585a147153aef621fdc6007" kindref="member">AMREX_ASSERT</ref>(!filename.empty());</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"></highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Real<sp/>strttime<sp/>=<sp/><ref refid="namespaceamrex_1a6f975f843338c8eada684f0e8e2c0cb7" kindref="member">amrex::second</ref>();</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Count<sp/>#<sp/>of<sp/>valid<sp/>particles.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/>Long<sp/>nparticles<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"></highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lev<sp/>=<sp/>0;<sp/>lev<sp/>&lt;<sp/>m_particles.size();<sp/><sp/>lev++)<sp/>{</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>pmap<sp/>=<sp/>m_particles[lev];</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>kv<sp/>:<sp/>pmap)<sp/>{</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>aos<sp/>=<sp/>kv.second.GetArrayOfStructs();</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>np<sp/>=<sp/>aos.numParticles();</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Gpu::HostVector&lt;ParticleType&gt;<sp/>host_aos(np);</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1Gpu_1a2c1110b22670288daa9e2a01cbb70fbb" kindref="member">Gpu::copy</ref>(<ref refid="namespaceamrex_1_1Gpu_1a4cb810463e0c04bdea932a011e77b548" kindref="member">Gpu::deviceToHost</ref>,<sp/>aos.begin(),<sp/>aos.begin()<sp/>+<sp/>np,<sp/>host_aos.begin());</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>np;<sp/>++k)<sp/>{</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ParticleType&amp;<sp/>p<sp/>=<sp/>host_aos[k];</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p.id()<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Only<sp/>count<sp/>(and<sp/>checkpoint)<sp/>valid<sp/>particles.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nparticles++;</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"></highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>And<sp/>send<sp/>count<sp/>to<sp/>I/O<sp/>processor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a98c9e67e17bd55e681d9e790611a1289" kindref="member">ParallelDescriptor::ReduceLongSum</ref>(nparticles,<ref refid="namespaceamrex_1_1ParallelDescriptor_1ab734a5d614e753d28d03865ee6e4039a" kindref="member">ParallelDescriptor::IOProcessorNumber</ref>());</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"></highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceamrex_1_1ParallelDescriptor_1ac7fb3467af4aabf15e61cb9c27e916d9" kindref="member">ParallelDescriptor::IOProcessor</ref>())</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Have<sp/>I/O<sp/>processor<sp/>open<sp/>file<sp/>and<sp/>write<sp/>out<sp/>particle<sp/>metadata.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ofstream<sp/>File;</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"></highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>File.open(filename.c_str(),<sp/>std::ios::out|std::ios::trunc);</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"></highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!File.good())</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1ac40a8be1926370de761ddd49c765d971" kindref="member">amrex::FileOpenFailed</ref>(filename);</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"></highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>File<sp/>&lt;&lt;<sp/>nparticles<sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>File<sp/>&lt;&lt;<sp/>NStructReal<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>File<sp/>&lt;&lt;<sp/>NStructInt<sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>File<sp/>&lt;&lt;<sp/>NumRealComps()<sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>File<sp/>&lt;&lt;<sp/>NumIntComps()<sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"></highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>File.flush();</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"></highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>File.close();</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"></highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!File.good())</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1ad26f2328bf66aa9678347a6055a25431" kindref="member">amrex::Abort</ref>(</highlight><highlight class="stringliteral">&quot;ParticleContainer::WriteAsciiFile():<sp/>problem<sp/>writing<sp/>file&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"></highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1ac0861548eabcd3f4b4c72a8826f83f8e" kindref="member">ParallelDescriptor::Barrier</ref>();</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"></highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a33162ef233c092e9e6fd75ab291b9b29" kindref="member">MyProc</ref><sp/>=<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a33162ef233c092e9e6fd75ab291b9b29" kindref="member">ParallelDescriptor::MyProc</ref>();</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"></highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>proc<sp/>=<sp/>0;<sp/>proc<sp/>&lt;<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1aa191723b5d24ceaf64e9d49f542cfcc2" kindref="member">ParallelDescriptor::NProcs</ref>();<sp/>proc++)</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(MyProc<sp/>==<sp/>proc)</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Each<sp/>CPU<sp/>opens<sp/>the<sp/>file<sp/>for<sp/>appending<sp/>and<sp/>adds<sp/>its<sp/>particles.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VisMF::IO_Buffer<sp/>io_buffer(VisMF::IO_Buffer_Size);</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"></highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ofstream<sp/>File;</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"></highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>File.rdbuf()-&gt;pubsetbuf(io_buffer.dataPtr(),<sp/>io_buffer.size());</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"></highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>File.open(filename.c_str(),<sp/>std::ios::out|std::ios::app);</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"></highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>File.precision(15);</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"></highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!File.good())</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1ac40a8be1926370de761ddd49c765d971" kindref="member">amrex::FileOpenFailed</ref>(filename);</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"></highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lev<sp/>=<sp/>0;<sp/>lev<sp/>&lt;<sp/>m_particles.size();<sp/><sp/>lev++)<sp/>{</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>pmap<sp/>=<sp/>m_particles[lev];</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>kv<sp/>:<sp/>pmap)<sp/>{</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>aos<sp/>=<sp/>kv.second.GetArrayOfStructs();</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>soa<sp/>=<sp/>kv.second.GetStructOfArrays();</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"></highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>np<sp/>=<sp/>aos.numParticles();</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Gpu::HostVector&lt;ParticleType&gt;<sp/>host_aos(np);</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1Gpu_1a2c1110b22670288daa9e2a01cbb70fbb" kindref="member">Gpu::copy</ref>(<ref refid="namespaceamrex_1_1Gpu_1a4cb810463e0c04bdea932a011e77b548" kindref="member">Gpu::deviceToHost</ref>,<sp/>aos.begin(),<sp/>aos.end(),<sp/>host_aos.begin());</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"></highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>0;<sp/>index<sp/>&lt;<sp/>np;<sp/>++index)<sp/>{</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ParticleType*<sp/>it<sp/>=<sp/>&amp;host_aos[index];</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it-&gt;id()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"></highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>write<sp/>out<sp/>the<sp/>particle<sp/>struct<sp/>first...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AMREX_D_TERM(File<sp/>&lt;&lt;<sp/>it-&gt;pos(0)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>it-&gt;pos(1)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>it-&gt;pos(2)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"></highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>NStructReal;<sp/>i++)</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>File<sp/>&lt;&lt;<sp/>it-&gt;rdata(i)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"></highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>File<sp/>&lt;&lt;<sp/>it-&gt;id()<sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>File<sp/>&lt;&lt;<sp/>it-&gt;cpu()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"></highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>NStructInt;<sp/>i++)</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>File<sp/>&lt;&lt;<sp/>it-&gt;idata(i)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"></highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>then<sp/>the<sp/>particle<sp/>attributes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>NumRealComps();<sp/>i++)</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>File<sp/>&lt;&lt;<sp/>soa.GetRealData(i)[index]<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"></highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>NumIntComps();<sp/>i++)</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>File<sp/>&lt;&lt;<sp/>soa.GetIntData(i)[index]<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"></highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>File<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"></highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>File.flush();</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"></highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>File.close();</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"></highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!File.good())</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1ad26f2328bf66aa9678347a6055a25431" kindref="member">amrex::Abort</ref>(</highlight><highlight class="stringliteral">&quot;ParticleContainer::WriteAsciiFile():<sp/>problem<sp/>writing<sp/>file&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"></highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"></highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1ac0861548eabcd3f4b4c72a8826f83f8e" kindref="member">ParallelDescriptor::Barrier</ref>();</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"></highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_verbose<sp/>&gt;<sp/>1)</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Real<sp/>stoptime<sp/>=<sp/><ref refid="namespaceamrex_1a6f975f843338c8eada684f0e8e2c0cb7" kindref="member">amrex::second</ref>()<sp/>-<sp/>strttime;</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"></highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a348148608639b17ff12dcda5fb94bfcc" kindref="member">ParallelDescriptor::ReduceRealMax</ref>(stoptime,<ref refid="namespaceamrex_1_1ParallelDescriptor_1ab734a5d614e753d28d03865ee6e4039a" kindref="member">ParallelDescriptor::IOProcessorNumber</ref>());</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"></highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Print" kindref="compound">amrex::Print</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;ParticleContainer::WriteAsciiFile()<sp/>time:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>stoptime<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1239"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"></highlight></codeline>
<codeline lineno="1241"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*AMREX_PARTICLEIO_H*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleIO.H"/>
  </compounddef>
</doxygen>
