<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classamrex_1_1MLCurlCurl" kind="class" language="C++" prot="public">
    <compoundname>amrex::MLCurlCurl</compoundname>
    <basecompoundref refid="classamrex_1_1MLLinOpT" prot="public" virt="non-virtual">amrex::MLLinOpT&lt; Array&lt; MultiFab, 3 &gt; &gt;</basecompoundref>
    <includes refid="AMReX__MLCurlCurl_8H" local="no">AMReX_MLCurlCurl.H</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classamrex_1_1MLCurlCurl_1ad3b325a1dc81c636a9d7bca822aabe05" prot="public" static="no">
        <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>, 3 &gt;</type>
        <definition>using amrex::MLCurlCurl::MF =  Array&lt;MultiFab,3&gt;</definition>
        <argsstring></argsstring>
        <name>MF</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCurlCurl.H" line="28" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCurlCurl.H" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1MLCurlCurl_1a4771d48d0bafc31e4a8273b1e06da376" prot="public" static="no">
        <type>typename <ref refid="classamrex_1_1MLLinOpT" kindref="compound">MLLinOpT</ref>&lt; <ref refid="classamrex_1_1MLCurlCurl_1ad3b325a1dc81c636a9d7bca822aabe05" kindref="member">MF</ref> &gt;::<ref refid="classamrex_1_1MLCurlCurl_1a4771d48d0bafc31e4a8273b1e06da376" kindref="member">RT</ref></type>
        <definition>using amrex::MLCurlCurl::RT =  typename MLLinOpT&lt;MF&gt;::RT</definition>
        <argsstring></argsstring>
        <name>RT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCurlCurl.H" line="29" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCurlCurl.H" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1MLCurlCurl_1a417c10c0be808ec849890def26af4fee" prot="public" static="no">
        <type>typename <ref refid="classamrex_1_1MLLinOpT" kindref="compound">MLLinOpT</ref>&lt; <ref refid="classamrex_1_1MLCurlCurl_1ad3b325a1dc81c636a9d7bca822aabe05" kindref="member">MF</ref> &gt;::<ref refid="classamrex_1_1MLCurlCurl_1a417c10c0be808ec849890def26af4fee" kindref="member">BCType</ref></type>
        <definition>using amrex::MLCurlCurl::BCType =  typename MLLinOpT&lt;MF&gt;::BCType</definition>
        <argsstring></argsstring>
        <name>BCType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCurlCurl.H" line="30" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCurlCurl.H" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1MLCurlCurl_1ac9899bfb41cbcbf7f462d272047552e0" prot="public" static="no">
        <type>typename <ref refid="classamrex_1_1MLLinOpT" kindref="compound">MLLinOpT</ref>&lt; <ref refid="classamrex_1_1MLCurlCurl_1ad3b325a1dc81c636a9d7bca822aabe05" kindref="member">MF</ref> &gt;::<ref refid="classamrex_1_1MLCurlCurl_1ac9899bfb41cbcbf7f462d272047552e0" kindref="member">BCMode</ref></type>
        <definition>using amrex::MLCurlCurl::BCMode =  typename MLLinOpT&lt;MF&gt;::BCMode</definition>
        <argsstring></argsstring>
        <name>BCMode</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCurlCurl.H" line="31" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCurlCurl.H" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1MLCurlCurl_1aa4c0f4d5b84c079cc96ab6b0c0fb276e" prot="public" static="no">
        <type>typename <ref refid="classamrex_1_1MLLinOpT" kindref="compound">MLLinOpT</ref>&lt; <ref refid="classamrex_1_1MLCurlCurl_1ad3b325a1dc81c636a9d7bca822aabe05" kindref="member">MF</ref> &gt;::<ref refid="classamrex_1_1MLCurlCurl_1aa4c0f4d5b84c079cc96ab6b0c0fb276e" kindref="member">StateMode</ref></type>
        <definition>using amrex::MLCurlCurl::StateMode =  typename MLLinOpT&lt;MF&gt;::StateMode</definition>
        <argsstring></argsstring>
        <name>StateMode</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCurlCurl.H" line="32" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCurlCurl.H" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1MLCurlCurl_1aa0d2dff0a1bfbad55c5f6e3a31d16652" prot="public" static="no">
        <type>typename <ref refid="classamrex_1_1MLLinOpT" kindref="compound">MLLinOpT</ref>&lt; <ref refid="classamrex_1_1MLCurlCurl_1ad3b325a1dc81c636a9d7bca822aabe05" kindref="member">MF</ref> &gt;::<ref refid="classamrex_1_1MLCurlCurl_1aa0d2dff0a1bfbad55c5f6e3a31d16652" kindref="member">Location</ref></type>
        <definition>using amrex::MLCurlCurl::Location =  typename MLLinOpT&lt;MF&gt;::Location</definition>
        <argsstring></argsstring>
        <name>Location</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCurlCurl.H" line="33" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCurlCurl.H" bodystart="33" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1MLCurlCurl_1a8e3436cc293f45df20b351de804af2fd" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1MLCurlCurl_1a4771d48d0bafc31e4a8273b1e06da376" kindref="member">RT</ref></type>
        <definition>RT amrex::MLCurlCurl::m_alpha</definition>
        <argsstring></argsstring>
        <name>m_alpha</name>
        <initializer>= std::numeric_limits&lt;<ref refid="classamrex_1_1MLCurlCurl_1a4771d48d0bafc31e4a8273b1e06da376" kindref="member">RT</ref>&gt;::lowest()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCurlCurl.H" line="122" column="8" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCurlCurl.H" bodystart="122" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLCurlCurl_1a7b83a2461e9903530a1903a12ddec15b" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1MLCurlCurl_1a4771d48d0bafc31e4a8273b1e06da376" kindref="member">RT</ref></type>
        <definition>RT amrex::MLCurlCurl::m_beta</definition>
        <argsstring></argsstring>
        <name>m_beta</name>
        <initializer>= std::numeric_limits&lt;<ref refid="classamrex_1_1MLCurlCurl_1a4771d48d0bafc31e4a8273b1e06da376" kindref="member">RT</ref>&gt;::lowest()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCurlCurl.H" line="123" column="8" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCurlCurl.H" bodystart="123" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLCurlCurl_1ae73e6c0e2000bd5397e42f8fd8e42cba" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref>, 3 &gt;</type>
        <definition>Array&lt;IntVect,3&gt; amrex::MLCurlCurl::m_etype</definition>
        <argsstring></argsstring>
        <name>m_etype</name>
        <initializer>{<ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref>(0,1), <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref>(1,0), <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref>(1,1)}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCurlCurl.H" line="125" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCurlCurl.H" bodystart="129" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLCurlCurl_1a5e1b51f776e54426d9a92e0101b75066" prot="private" static="no" mutable="yes">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; std::unique_ptr&lt; <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &gt;, 3 &gt; &gt; &gt;</type>
        <definition>Vector&lt;Vector&lt;Array&lt;std::unique_ptr&lt;iMultiFab&gt;,3&gt; &gt; &gt; amrex::MLCurlCurl::m_dotmask</definition>
        <argsstring></argsstring>
        <name>m_dotmask</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCurlCurl.H" line="132" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCurlCurl.H" bodystart="132" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLCurlCurl_1a194ba25b27e4f357966eb10f008566d2" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::unique_ptr&lt; <ref refid="structamrex_1_1Gpu_1_1DeviceScalar" kindref="compound">Gpu::DeviceScalar</ref>&lt; <ref refid="classamrex_1_1LUSolver" kindref="compound">LUSolver</ref>&lt; AMREX_SPACEDIM *2, <ref refid="classamrex_1_1MLCurlCurl_1a4771d48d0bafc31e4a8273b1e06da376" kindref="member">RT</ref> &gt; &gt; &gt; &gt; &gt;</type>
        <definition>Vector&lt;Vector&lt;std::unique_ptr&lt;Gpu::DeviceScalar &lt;LUSolver&lt;AMREX_SPACEDIM*2,RT&gt; &gt; &gt; &gt; &gt; amrex::MLCurlCurl::m_lusolver</definition>
        <argsstring></argsstring>
        <name>m_lusolver</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCurlCurl.H" line="135" column="2" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCurlCurl.H" bodystart="135" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classamrex_1_1MLCurlCurl_1a85d721f72de7a13036fb1ce5bc77d452" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>constexpr int amrex::MLCurlCurl::m_ncomp</definition>
        <argsstring></argsstring>
        <name>m_ncomp</name>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCurlCurl.H" line="133" column="26" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCurlCurl.H" bodystart="133" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1MLCurlCurl_1a890a339d109993f9e6b102a61af0a2da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MLCurlCurl::MLCurlCurl</definition>
        <argsstring>()=default</argsstring>
        <name>MLCurlCurl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCurlCurl.H" line="35" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCurlCurl_1ad41266ab9f9d45383b54320911ac53fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MLCurlCurl::MLCurlCurl</definition>
        <argsstring>(const Vector&lt; Geometry &gt; &amp;a_geom, const Vector&lt; BoxArray &gt; &amp;a_grids, const Vector&lt; DistributionMapping &gt; &amp;a_dmap, const LPInfo &amp;a_info=LPInfo())</argsstring>
        <name>MLCurlCurl</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>a_geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &gt; &amp;</type>
          <declname>a_grids</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt; &amp;</type>
          <declname>a_dmap</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1LPInfo" kindref="compound">LPInfo</ref> &amp;</type>
          <declname>a_info</declname>
          <defval><ref refid="structamrex_1_1LPInfo" kindref="compound">LPInfo</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCurlCurl.H" line="36" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCurlCurl.cpp" bodystart="5" bodyend="11"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCurlCurl_1a9d94e9fa0d0ed2ebadf1428023d95809" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLCurlCurl::define</definition>
        <argsstring>(const Vector&lt; Geometry &gt; &amp;a_geom, const Vector&lt; BoxArray &gt; &amp;a_grids, const Vector&lt; DistributionMapping &gt; &amp;a_dmap, const LPInfo &amp;a_info=LPInfo())</argsstring>
        <name>define</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>a_geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &gt; &amp;</type>
          <declname>a_grids</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt; &amp;</type>
          <declname>a_dmap</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1LPInfo" kindref="compound">LPInfo</ref> &amp;</type>
          <declname>a_info</declname>
          <defval><ref refid="structamrex_1_1LPInfo" kindref="compound">LPInfo</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCurlCurl.H" line="41" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCurlCurl.cpp" bodystart="13" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCurlCurl_1a6ec4dbd1f4658dc7cd6ef708b3968c4c" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLCurlCurl::setScalars</definition>
        <argsstring>(RT a_alpha, RT a_beta) noexcept</argsstring>
        <name>setScalars</name>
        <param>
          <type><ref refid="classamrex_1_1MLCurlCurl_1a4771d48d0bafc31e4a8273b1e06da376" kindref="member">RT</ref></type>
          <declname>a_alpha</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLCurlCurl_1a4771d48d0bafc31e4a8273b1e06da376" kindref="member">RT</ref></type>
          <declname>a_beta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCurlCurl.H" line="46" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCurlCurl.cpp" bodystart="31" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCurlCurl_1acbc4efc38bffb2ceab5d5bf004cf6dc6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLCurlCurl::prepareRHS</definition>
        <argsstring>(Vector&lt; MF * &gt; const &amp;rhs) const</argsstring>
        <name>prepareRHS</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MLCurlCurl_1ad3b325a1dc81c636a9d7bca822aabe05" kindref="member">MF</ref> * &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Synchronize RHS on nodal points and set to zero on Dirichlet boundaries. If the user can guarantee these requirements on RHS, this function does not need to be called. If this is called, it should only be called after setDomainBC is called. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCurlCurl.H" line="52" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCurlCurl.cpp" bodystart="38" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCurlCurl_1a90ed4bd36cb7bb9fc00d6080ff823d64" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::string</type>
        <definition>std::string amrex::MLCurlCurl::name</definition>
        <argsstring>() const override</argsstring>
        <name>name</name>
        <reimplements refid="classamrex_1_1MLLinOpT_1a2fb16a53d8b6d9dd08306f89a535c617">name</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCurlCurl.H" line="54" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCurlCurl.H" bodystart="54" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCurlCurl_1a06eca5d2d85df13a44bec68fb491e02d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLCurlCurl::setLevelBC</definition>
        <argsstring>(int amrlev, const MF *levelbcdata, const MF *robinbc_a=nullptr, const MF *robinbc_b=nullptr, const MF *robinbc_f=nullptr) override</argsstring>
        <name>setLevelBC</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MLCurlCurl_1ad3b325a1dc81c636a9d7bca822aabe05" kindref="member">MF</ref> *</type>
          <declname>levelbcdata</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MLCurlCurl_1ad3b325a1dc81c636a9d7bca822aabe05" kindref="member">MF</ref> *</type>
          <declname>robinbc_a</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MLCurlCurl_1ad3b325a1dc81c636a9d7bca822aabe05" kindref="member">MF</ref> *</type>
          <declname>robinbc_b</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MLCurlCurl_1ad3b325a1dc81c636a9d7bca822aabe05" kindref="member">MF</ref> *</type>
          <declname>robinbc_f</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCurlCurl.H" line="58" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCurlCurl.cpp" bodystart="93" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCurlCurl_1a169c302d0fe1a37135eb60b015b25c95" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLCurlCurl::restriction</definition>
        <argsstring>(int amrlev, int cmglev, MF &amp;crse, MF &amp;fine) const override</argsstring>
        <name>restriction</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cmglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLCurlCurl_1ad3b325a1dc81c636a9d7bca822aabe05" kindref="member">MF</ref> &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLCurlCurl_1ad3b325a1dc81c636a9d7bca822aabe05" kindref="member">MF</ref> &amp;</type>
          <declname>fine</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCurlCurl.H" line="63" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCurlCurl.cpp" bodystart="100" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCurlCurl_1a259409e41902c718a2c04c81d91648c4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLCurlCurl::interpolation</definition>
        <argsstring>(int amrlev, int fmglev, MF &amp;fine, const MF &amp;crse) const override</argsstring>
        <name>interpolation</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fmglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLCurlCurl_1ad3b325a1dc81c636a9d7bca822aabe05" kindref="member">MF</ref> &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MLCurlCurl_1ad3b325a1dc81c636a9d7bca822aabe05" kindref="member">MF</ref> &amp;</type>
          <declname>crse</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCurlCurl.H" line="65" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCurlCurl.cpp" bodystart="133" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCurlCurl_1aad3bf0c581e04684d7ecbe73942226e0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLCurlCurl::apply</definition>
        <argsstring>(int amrlev, int mglev, MF &amp;out, MF &amp;in, BCMode bc_mode, StateMode s_mode, const MLMGBndryT&lt; MF &gt; *bndry=nullptr) const override</argsstring>
        <name>apply</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLCurlCurl_1ad3b325a1dc81c636a9d7bca822aabe05" kindref="member">MF</ref> &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLCurlCurl_1ad3b325a1dc81c636a9d7bca822aabe05" kindref="member">MF</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLCurlCurl_1ac9899bfb41cbcbf7f462d272047552e0" kindref="member">BCMode</ref></type>
          <declname>bc_mode</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLCurlCurl_1aa4c0f4d5b84c079cc96ab6b0c0fb276e" kindref="member">StateMode</ref></type>
          <declname>s_mode</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MLMGBndryT" kindref="compound">MLMGBndryT</ref>&lt; <ref refid="classamrex_1_1MLCurlCurl_1ad3b325a1dc81c636a9d7bca822aabe05" kindref="member">MF</ref> &gt; *</type>
          <declname>bndry</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCurlCurl.H" line="67" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCurlCurl.cpp" bodystart="164" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCurlCurl_1a11d08332baaab14e6c7cd45597aef245" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLCurlCurl::smooth</definition>
        <argsstring>(int amrlev, int mglev, MF &amp;sol, const MF &amp;rhs, bool skip_fillboundary=false) const override</argsstring>
        <name>smooth</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLCurlCurl_1ad3b325a1dc81c636a9d7bca822aabe05" kindref="member">MF</ref> &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MLCurlCurl_1ad3b325a1dc81c636a9d7bca822aabe05" kindref="member">MF</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>skip_fillboundary</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCurlCurl.H" line="70" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCurlCurl.cpp" bodystart="219" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCurlCurl_1a68c7fc765c4f93349326b9a7cd3d038e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLCurlCurl::solutionResidual</definition>
        <argsstring>(int amrlev, MF &amp;resid, MF &amp;x, const MF &amp;b, const MF *crse_bcdata=nullptr) override</argsstring>
        <name>solutionResidual</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLCurlCurl_1ad3b325a1dc81c636a9d7bca822aabe05" kindref="member">MF</ref> &amp;</type>
          <declname>resid</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLCurlCurl_1ad3b325a1dc81c636a9d7bca822aabe05" kindref="member">MF</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MLCurlCurl_1ad3b325a1dc81c636a9d7bca822aabe05" kindref="member">MF</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MLCurlCurl_1ad3b325a1dc81c636a9d7bca822aabe05" kindref="member">MF</ref> *</type>
          <declname>crse_bcdata</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCurlCurl.H" line="73" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCurlCurl.cpp" bodystart="272" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCurlCurl_1aa1edcbe0e894ecd697d47e504640a162" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLCurlCurl::correctionResidual</definition>
        <argsstring>(int amrlev, int mglev, MF &amp;resid, MF &amp;x, const MF &amp;b, BCMode bc_mode, const MF *crse_bcdata=nullptr) override</argsstring>
        <name>correctionResidual</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLCurlCurl_1ad3b325a1dc81c636a9d7bca822aabe05" kindref="member">MF</ref> &amp;</type>
          <declname>resid</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLCurlCurl_1ad3b325a1dc81c636a9d7bca822aabe05" kindref="member">MF</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MLCurlCurl_1ad3b325a1dc81c636a9d7bca822aabe05" kindref="member">MF</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLCurlCurl_1ac9899bfb41cbcbf7f462d272047552e0" kindref="member">BCMode</ref></type>
          <declname>bc_mode</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MLCurlCurl_1ad3b325a1dc81c636a9d7bca822aabe05" kindref="member">MF</ref> *</type>
          <declname>crse_bcdata</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCurlCurl.H" line="76" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCurlCurl.cpp" bodystart="281" bodyend="288"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCurlCurl_1a5c54cb4e1ea4c2b1818db0cf82741c30" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLCurlCurl::prepareForSolve</definition>
        <argsstring>() override</argsstring>
        <name>prepareForSolve</name>
        <reimplements refid="classamrex_1_1MLLinOpT_1af8740f5bcf25e80b3e074a99be681c47">prepareForSolve</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCurlCurl.H" line="80" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCurlCurl.cpp" bodystart="336" bodyend="419"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCurlCurl_1a29a695e894b100f9ee670ec7dcc15926" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool amrex::MLCurlCurl::isSingular</definition>
        <argsstring>(int) const override</argsstring>
        <name>isSingular</name>
        <reimplements refid="classamrex_1_1MLLinOpT_1ae4208159e7121c341be4c40f148563ad">isSingular</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <briefdescription>
<para>Is it singular on given AMR level? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCurlCurl.H" line="82" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCurlCurl.H" bodystart="82" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCurlCurl_1afeb4c3dbad1399f4576352234f02a159" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool amrex::MLCurlCurl::isBottomSingular</definition>
        <argsstring>() const override</argsstring>
        <name>isBottomSingular</name>
        <reimplements refid="classamrex_1_1MLLinOpT_1a8a5fce59ba5bb0e9eb9d65e8615050ea">isBottomSingular</reimplements>
        <briefdescription>
<para>Is the bottom of MG singular? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCurlCurl.H" line="83" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCurlCurl.H" bodystart="83" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCurlCurl_1aafe03e36ef3a7d8c99466b3762358794" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1MLCurlCurl_1a4771d48d0bafc31e4a8273b1e06da376" kindref="member">RT</ref></type>
        <definition>Real amrex::MLCurlCurl::xdoty</definition>
        <argsstring>(int amrlev, int mglev, const MF &amp;x, const MF &amp;y, bool local) const override</argsstring>
        <name>xdoty</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MLCurlCurl_1ad3b325a1dc81c636a9d7bca822aabe05" kindref="member">MF</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MLCurlCurl_1ad3b325a1dc81c636a9d7bca822aabe05" kindref="member">MF</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCurlCurl.H" line="85" column="8" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCurlCurl.cpp" bodystart="421" bodyend="434"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCurlCurl_1a54b8f0a39566eee4ef913f6bad712d9f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1MLCurlCurl_1a4771d48d0bafc31e4a8273b1e06da376" kindref="member">RT</ref></type>
        <definition>Real amrex::MLCurlCurl::normInf</definition>
        <argsstring>(int amrlev, MF const &amp;mf, bool local) const override</argsstring>
        <name>normInf</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLCurlCurl_1ad3b325a1dc81c636a9d7bca822aabe05" kindref="member">MF</ref> const &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCurlCurl.H" line="87" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCurlCurl.cpp" bodystart="436" bodyend="439"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCurlCurl_1a6314d1e7aac1a0cfd494729ca93aab43" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLCurlCurl::averageDownAndSync</definition>
        <argsstring>(Vector&lt; MF &gt; &amp;sol) const override</argsstring>
        <name>averageDownAndSync</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MLCurlCurl_1ad3b325a1dc81c636a9d7bca822aabe05" kindref="member">MF</ref> &gt; &amp;</type>
          <declname>sol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCurlCurl.H" line="89" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCurlCurl.cpp" bodystart="441" bodyend="451"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCurlCurl_1a808d167add048ec3c4c1d299468777b4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>IntVect amrex::MLCurlCurl::getNGrowVectRestriction</definition>
        <argsstring>() const override</argsstring>
        <name>getNGrowVectRestriction</name>
        <reimplements refid="classamrex_1_1MLLinOpT_1a8f0f9865915b5d7c47bbff26bc46d442">getNGrowVectRestriction</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCurlCurl.H" line="91" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCurlCurl.H" bodystart="91" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCurlCurl_1a7676ba4a8f0f7e18be2366dd33ef322f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLCurlCurl::make</definition>
        <argsstring>(Vector&lt; Vector&lt; MF &gt; &gt; &amp;mf, IntVect const &amp;ng) const override</argsstring>
        <name>make</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MLCurlCurl_1ad3b325a1dc81c636a9d7bca822aabe05" kindref="member">MF</ref> &gt; &gt; &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ng</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCurlCurl.H" line="95" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCurlCurl.cpp" bodystart="453" bodyend="456"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCurlCurl_1ace16dcafe1f3dc9c2c37b18bb6437986" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classamrex_1_1MLCurlCurl_1ad3b325a1dc81c636a9d7bca822aabe05" kindref="member">MF</ref></type>
        <definition>Array&lt; MultiFab, 3 &gt; amrex::MLCurlCurl::make</definition>
        <argsstring>(int amrlev, int mglev, IntVect const &amp;ng) const override</argsstring>
        <name>make</name>
        <reimplements refid="classamrex_1_1MLLinOpT_1a223df72e572182f58b611c220487fe20">make</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ng</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCurlCurl.H" line="97" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCurlCurl.cpp" bodystart="459" bodyend="468"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCurlCurl_1aaf764f3b83bb093cc40ce4c7a2bb6d59" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1MLCurlCurl_1ad3b325a1dc81c636a9d7bca822aabe05" kindref="member">MF</ref></type>
        <definition>Array&lt; MultiFab, 3 &gt; amrex::MLCurlCurl::makeAlias</definition>
        <argsstring>(MF const &amp;mf) const override</argsstring>
        <name>makeAlias</name>
        <param>
          <type><ref refid="classamrex_1_1MLCurlCurl_1ad3b325a1dc81c636a9d7bca822aabe05" kindref="member">MF</ref> const &amp;</type>
          <declname>mf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCurlCurl.H" line="99" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCurlCurl.cpp" bodystart="471" bodyend="478"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCurlCurl_1ac1291ffd5a7c279cd34ce48de928e550" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classamrex_1_1MLCurlCurl_1ad3b325a1dc81c636a9d7bca822aabe05" kindref="member">MF</ref></type>
        <definition>Array&lt; MultiFab, 3 &gt; amrex::MLCurlCurl::makeCoarseMG</definition>
        <argsstring>(int amrlev, int mglev, IntVect const &amp;ng) const override</argsstring>
        <name>makeCoarseMG</name>
        <reimplements refid="classamrex_1_1MLLinOpT_1a9991da8ff85055f29349c9f5b8246c65">makeCoarseMG</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ng</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCurlCurl.H" line="101" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCurlCurl.cpp" bodystart="481" bodyend="493"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCurlCurl_1af6f2d3f064b878b9d56bba0f7ddce029" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classamrex_1_1MLCurlCurl_1ad3b325a1dc81c636a9d7bca822aabe05" kindref="member">MF</ref></type>
        <definition>Array&lt; MultiFab, 3 &gt; amrex::MLCurlCurl::makeCoarseAmr</definition>
        <argsstring>(int famrlev, IntVect const &amp;ng) const override</argsstring>
        <name>makeCoarseAmr</name>
        <reimplements refid="classamrex_1_1MLLinOpT_1a44952a0322f09ae53fe7e26669f85de1">makeCoarseAmr</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>famrlev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ng</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCurlCurl.H" line="103" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCurlCurl.cpp" bodystart="496" bodyend="508"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCurlCurl_1a7b8448ec4cebb216a725c03e0bb37bee" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLCurlCurl::smooth4</definition>
        <argsstring>(int amrlev, int mglev, MF &amp;sol, MF const &amp;rhs, int color) const</argsstring>
        <name>smooth4</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLCurlCurl_1ad3b325a1dc81c636a9d7bca822aabe05" kindref="member">MF</ref> &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLCurlCurl_1ad3b325a1dc81c636a9d7bca822aabe05" kindref="member">MF</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>color</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCurlCurl.H" line="107" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCurlCurl.cpp" bodystart="235" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCurlCurl_1aa9711f51c0d096909b5a26fbc7a9657b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLCurlCurl::compresid</definition>
        <argsstring>(int amrlev, int mglev, MF &amp;resid, MF const &amp;b) const</argsstring>
        <name>compresid</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLCurlCurl_1ad3b325a1dc81c636a9d7bca822aabe05" kindref="member">MF</ref> &amp;</type>
          <declname>resid</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLCurlCurl_1ad3b325a1dc81c636a9d7bca822aabe05" kindref="member">MF</ref> const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCurlCurl.H" line="109" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCurlCurl.cpp" bodystart="290" bodyend="334"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCurlCurl_1ad44c8c31ad16ad5e8ece7bf38421361c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLCurlCurl::applyPhysBC</definition>
        <argsstring>(int amrlev, int mglev, MultiFab &amp;mf, CurlCurlStateType type) const</argsstring>
        <name>applyPhysBC</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a2b273526dd4d27047e455ab7a5a8dcd3" kindref="member">CurlCurlStateType</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCurlCurl.H" line="111" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCurlCurl.cpp" bodystart="548" bodyend="679"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classamrex_1_1MLCurlCurl_1a10b37b198807f386acf45ea68c73b87c" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLCurlCurl::applyBC</definition>
        <argsstring>(int amrlev, int mglev, MF &amp;in, CurlCurlStateType type) const</argsstring>
        <name>applyBC</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLCurlCurl_1ad3b325a1dc81c636a9d7bca822aabe05" kindref="member">MF</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a2b273526dd4d27047e455ab7a5a8dcd3" kindref="member">CurlCurlStateType</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCurlCurl.H" line="115" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCurlCurl.cpp" bodystart="510" bodyend="526"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCurlCurl_1a9811ec018bd16f4e6d09709a539c576c" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> const  &amp;</type>
        <definition>iMultiFab const  &amp; amrex::MLCurlCurl::getDotMask</definition>
        <argsstring>(int amrlev, int mglev, int idim) const</argsstring>
        <name>getDotMask</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>idim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCurlCurl.H" line="117" column="22" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCurlCurl.cpp" bodystart="681" bodyend="690"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCurlCurl_1a3c262e8635218f88ca186c613bdc9c9c" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structamrex_1_1CurlCurlDirichletInfo" kindref="compound">CurlCurlDirichletInfo</ref></type>
        <definition>CurlCurlDirichletInfo amrex::MLCurlCurl::getDirichletInfo</definition>
        <argsstring>(int amrlev, int mglev) const</argsstring>
        <name>getDirichletInfo</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCurlCurl.H" line="119" column="28" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCurlCurl.cpp" bodystart="692" bodyend="724"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLCurlCurl_1a32545ca23bf840257ec3ff0321f0cc28" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structamrex_1_1CurlCurlSymmetryInfo" kindref="compound">CurlCurlSymmetryInfo</ref></type>
        <definition>CurlCurlSymmetryInfo amrex::MLCurlCurl::getSymmetryInfo</definition>
        <argsstring>(int amrlev, int mglev) const</argsstring>
        <name>getSymmetryInfo</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCurlCurl.H" line="120" column="27" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCurlCurl.cpp" bodystart="726" bodyend="758"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>curl (alpha curl E) + beta E = rhs </para>
    </briefdescription>
    <detaileddescription>
<para>Here E is an Array of 3 MultiFabs on staggered grid, alpha is a positive scalar, and beta is a non-negative scalar.</para>
<para>It&apos;s the caller&apos;s responsibility to make sure rhs has consistent nodal data. If needed, one could call prepareRHS for this.</para>
<para>The smoother is based on the 4-color Gauss-Seidel smoother of Li et. al. 2020. "An Efficient Preconditioner for 3-D Finite Difference Modeling of the Electromagnetic Diffusion Process in the Frequency Domain", IEEE Transactions on Geoscience and Remote Sensing, 58, 500-509. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>amrex::MLLinOpT&lt; Array&lt; MultiFab, 3 &gt; &gt;</label>
        <link refid="classamrex_1_1MLLinOpT"/>
      </node>
      <node id="1">
        <label>amrex::MLCurlCurl</label>
        <link refid="classamrex_1_1MLCurlCurl"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="9">
        <label>amrex::IntVect</label>
        <link refid="classamrex_1_1IntVect"/>
        <childnode refid="9" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>T</label>
      </node>
      <node id="18">
        <label>amrex::Vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::Gpu::DeviceScalar&lt; amrex::LUSolver&lt; AMREX_SPACEDIM *2, RT &gt; &gt; &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>Real</label>
      </node>
      <node id="4">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::BoxArray &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>std::unique_ptr&lt; amrex::MLLinOpT::CommContainer &gt;</label>
      </node>
      <node id="11">
        <label>amrex::Vector&lt; int &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::Geometry &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>amrex::RealVect</label>
        <link refid="classamrex_1_1RealVect"/>
        <childnode refid="6" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>vect</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>amrex::MLLinOpT&lt; Array&lt; MultiFab, 3 &gt; &gt;</label>
        <link refid="classamrex_1_1MLLinOpT"/>
        <childnode refid="3" relation="usage">
          <edgelabel>m_geom</edgelabel>
        </childnode>
        <childnode refid="2" relation="usage">
          <edgelabel>m_parent</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>m_coarse_bc_loc</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>m_grids</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>m_ixtype</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>m_raii_comm</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>m_amr_ref_ratio</edgelabel>
          <edgelabel>m_domain_covered</edgelabel>
          <edgelabel>m_num_mg_levels</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>m_dmap</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>m_hibc</edgelabel>
          <edgelabel>m_hibc_orig</edgelabel>
          <edgelabel>m_lobc</edgelabel>
          <edgelabel>m_lobc_orig</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>mg_coarsen_ratio_vec</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>levelbc_raii</edgelabel>
          <edgelabel>robin_a_raii</edgelabel>
          <edgelabel>robin_b_raii</edgelabel>
          <edgelabel>robin_f_raii</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>m_factory</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>info</edgelabel>
        </childnode>
      </node>
      <node id="16">
        <label>amrex::Vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::FabFactory&lt; FAB &gt; &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>amrex::MLCurlCurl</label>
        <link refid="classamrex_1_1MLCurlCurl"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>m_lusolver</edgelabel>
        </childnode>
        <childnode refid="19" relation="usage">
          <edgelabel>m_dotmask</edgelabel>
        </childnode>
      </node>
      <node id="12">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::DistributionMapping &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="14">
        <label>amrex::Vector&lt; amrex::IntVect &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="13">
        <label>amrex::Vector&lt; Array&lt; BCType, AMREX_SPACEDIM &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="17">
        <label>amrex::LPInfo</label>
        <link refid="structamrex_1_1LPInfo"/>
      </node>
      <node id="15">
        <label>amrex::Vector&lt; std::unique_ptr&lt; Array&lt; MultiFab, 3 &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="19">
        <label>amrex::Vector&lt; amrex::Vector&lt; Array&lt; std::unique_ptr&lt; amrex::iMultiFab &gt;, 3 &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCurlCurl.H" line="24" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCurlCurl.H" bodystart="26" bodyend="136"/>
    <listofallmembers>
      <member refid="classamrex_1_1MLLinOpT_1a10ebb5d290f3579d4c3e69aa56cf6251" prot="protected" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>AMRRefRatio</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ae88bc615f7fa178e54ea32899aae6506" prot="protected" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>AMRRefRatio</name></member>
      <member refid="classamrex_1_1MLCurlCurl_1aad3bf0c581e04684d7ecbe73942226e0" prot="public" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>apply</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a7aea888ca18e54df62e7dffc8378d872" prot="public" virt="pure-virtual" ambiguityscope="MLLinOpT&lt; Array&lt; MultiFab, 3 &gt; &gt;::"><scope>amrex::MLCurlCurl</scope><name>apply</name></member>
      <member refid="classamrex_1_1MLCurlCurl_1a10b37b198807f386acf45ea68c73b87c" prot="private" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>applyBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aaa73c9a5abc4c1289c181dc297906221" prot="public" virt="virtual"><scope>amrex::MLCurlCurl</scope><name>applyInhomogNeumannTerm</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a862b45e632c8fa045d0857e13843481d" prot="public" virt="virtual"><scope>amrex::MLCurlCurl</scope><name>applyMetricTerm</name></member>
      <member refid="classamrex_1_1MLLinOpT_1af3ef819a79d23afc7993a4f6750d7a1d" prot="public" virt="virtual"><scope>amrex::MLCurlCurl</scope><name>applyOverset</name></member>
      <member refid="classamrex_1_1MLCurlCurl_1ad44c8c31ad16ad5e8ece7bf38421361c" prot="public" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>applyPhysBC</name></member>
      <member refid="classamrex_1_1MLCurlCurl_1a6314d1e7aac1a0cfd494729ca93aab43" prot="public" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>averageDownAndSync</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aaef6b6d5b5aa06ad781f7c81b996ad78" prot="public" virt="pure-virtual" ambiguityscope="MLLinOpT&lt; Array&lt; MultiFab, 3 &gt; &gt;::"><scope>amrex::MLCurlCurl</scope><name>averageDownAndSync</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ac933a7f88c4daa600f3737080c18a09e" prot="public" virt="virtual"><scope>amrex::MLCurlCurl</scope><name>averageDownSolutionRHS</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aab2a0d1464333955b58343210d15bbb8" prot="public" virt="virtual"><scope>amrex::MLCurlCurl</scope><name>avgDownResAmr</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a08f1cfd6afc79121fce39e027f15cac5" prot="public" virt="virtual"><scope>amrex::MLCurlCurl</scope><name>avgDownResMG</name></member>
      <member refid="classamrex_1_1MLCurlCurl_1ac9899bfb41cbcbf7f462d272047552e0" prot="public" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>BCMode</name></member>
      <member refid="classamrex_1_1MLCurlCurl_1a417c10c0be808ec849890def26af4fee" prot="public" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>BCType</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a2859b0cddde955b30ccf90c0af86e897" prot="protected" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>BottomCommunicator</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a6b2ce3775a4c209860db63635f969640" prot="private" virt="virtual"><scope>amrex::MLCurlCurl</scope><name>checkPoint</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a2ac85c71c7e15137bd62cbfd04cc52ed" prot="protected" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>Communicator</name></member>
      <member refid="classamrex_1_1MLLinOpT_1abb542d962e83dd7479852f83fd3575bf" prot="protected" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>compactify</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a3f7e812180f57035bfe85cb7d10b26e9" prot="protected" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>compactify</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a6f26e44f0e91bdfd3f6e9830c71a2ec6" prot="public" virt="virtual"><scope>amrex::MLCurlCurl</scope><name>compFlux</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a1044f61a2f9270efa01fce0898988ec6" prot="public" virt="virtual"><scope>amrex::MLCurlCurl</scope><name>compGrad</name></member>
      <member refid="classamrex_1_1MLCurlCurl_1aa9711f51c0d096909b5a26fbc7a9657b" prot="public" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>compresid</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a4b8c0b3d1fd866b3b9a787bdcb056e77" prot="public" virt="virtual"><scope>amrex::MLCurlCurl</scope><name>copyNSolveSolution</name></member>
      <member refid="classamrex_1_1MLCurlCurl_1aa1edcbe0e894ecd697d47e504640a162" prot="public" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>correctionResidual</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a6f18465de0228f8ec4609e9e45367e5d" prot="public" virt="pure-virtual" ambiguityscope="MLLinOpT&lt; Array&lt; MultiFab, 3 &gt; &gt;::"><scope>amrex::MLCurlCurl</scope><name>correctionResidual</name></member>
      <member refid="classamrex_1_1MLCurlCurl_1a9d94e9fa0d0ed2ebadf1428023d95809" prot="public" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>define</name></member>
      <member refid="classamrex_1_1MLLinOpT_1abe69b9ebe0a04b3da502ac8606871680" prot="public" virt="non-virtual" ambiguityscope="MLLinOpT&lt; Array&lt; MultiFab, 3 &gt; &gt;::"><scope>amrex::MLCurlCurl</scope><name>define</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a50ba282a5c21fc37d3b1c286e726abc8" prot="private" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>defineBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a5aa9449241f9867021b4d5300284a76a" prot="private" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>defineGrids</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a33e77669d6f0da47f28959678db508e4" prot="protected" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>doAgglomeration</name></member>
      <member refid="classamrex_1_1MLLinOpT_1add56650e9ecd05e16a7f2f71bcbe7c9b" prot="protected" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>doConsolidation</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aa99dea32527b34287aa64542b5545256" prot="protected" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>doSemicoarsening</name></member>
      <member refid="classamrex_1_1MLLinOpT_1adb9b0f44a3e66fbefa2310385747427b" prot="protected" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>enforceSingularSolvable</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a6266e785b547d5c2632730beeedbd91c" prot="public" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>FAB</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a3ca782a47b55ca765b4fd9eeda174d36" prot="protected" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>Factory</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a9b6ac2fe55b5951ef0aee9cfdf3e56c0" prot="public" virt="virtual"><scope>amrex::MLCurlCurl</scope><name>fixSolvabilityByOffset</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a02b3d2ea4535daf60276e9014571f955" prot="public" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>Geom</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a28402657d9216f6ef38835ab562ee58b" prot="protected" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>get_d0</name></member>
      <member refid="classamrex_1_1MLLinOpT_1adad8c3e9a304cc409d473b2d44aa4520" prot="protected" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>get_d1</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a5e588d148e2672c3e82c8f40d5826671" prot="public" virt="virtual"><scope>amrex::MLCurlCurl</scope><name>getDefaultBottomSolver</name></member>
      <member refid="classamrex_1_1MLCurlCurl_1a3c262e8635218f88ca186c613bdc9c9c" prot="private" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>getDirichletInfo</name></member>
      <member refid="classamrex_1_1MLCurlCurl_1a9811ec018bd16f4e6d09709a539c576c" prot="private" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>getDotMask</name></member>
      <member refid="classamrex_1_1MLLinOpT_1af823f5b435d2f329595b333c82080e35" prot="public" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>getEnforceSingularSolvable</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a2ae10763b783ce6190c161927125dd63" prot="public" virt="virtual"><scope>amrex::MLCurlCurl</scope><name>getFluxes</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a4fc56d4aef22e014e4743cc6745f92e9" prot="public" virt="virtual"><scope>amrex::MLCurlCurl</scope><name>getFluxes</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a4e2a07d995c0fc8d2dfe5be544501eea" prot="public" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>getMaxOrder</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a4f45234f33332dbaf9406e4daa01b475" prot="public" virt="virtual"><scope>amrex::MLCurlCurl</scope><name>getNComp</name></member>
      <member refid="classamrex_1_1MLLinOpT_1afe8257f1157b08104c622bedb11b0d00" prot="public" virt="virtual"><scope>amrex::MLCurlCurl</scope><name>getNGrow</name></member>
      <member refid="classamrex_1_1MLCurlCurl_1a808d167add048ec3c4c1d299468777b4" prot="public" virt="virtual"><scope>amrex::MLCurlCurl</scope><name>getNGrowVectRestriction</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a94c2f24c3e40ca7b09e7757d94d009af" prot="public" virt="virtual"><scope>amrex::MLCurlCurl</scope><name>getSolvabilityOffset</name></member>
      <member refid="classamrex_1_1MLCurlCurl_1a32545ca23bf840257ec3ff0321f0cc28" prot="private" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>getSymmetryInfo</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a647cd4352c3719aa23545a8e0f88b562" prot="protected" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>hasBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a894d1f80e83452c32470d42e05947e13" prot="protected" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>hasHiddenDimension</name></member>
      <member refid="classamrex_1_1MLLinOpT_1afdb203f24caba5241fa95fad173cfae7" prot="protected" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>hasInhomogNeumannBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a40cc3ea13c4a150195a6198e33f1eac2" prot="protected" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>hasRobinBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ae6a081e88ffb4aafb123a7eb644ebd72" prot="protected" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>HiBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aa0c3b0c5a4e23b9248d18138229aec76" prot="protected" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>hiddenDirection</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ad0412f399e1e29e200a2451b371b0133" prot="protected" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>info</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a2f7c32a95d9e511ccee3f3f256341141" prot="public" virt="virtual"><scope>amrex::MLCurlCurl</scope><name>interpAssign</name></member>
      <member refid="classamrex_1_1MLCurlCurl_1a259409e41902c718a2c04c81d91648c4" prot="public" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>interpolation</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a1c8739b0c8b387f82d1c4cb3ba3ea509" prot="public" virt="pure-virtual" ambiguityscope="MLLinOpT&lt; Array&lt; MultiFab, 3 &gt; &gt;::"><scope>amrex::MLCurlCurl</scope><name>interpolation</name></member>
      <member refid="classamrex_1_1MLLinOpT_1add47eb9821c3b08db62d7f0f68554a4f" prot="public" virt="virtual"><scope>amrex::MLCurlCurl</scope><name>interpolationAmr</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a56ed51708c4e70b4ec224f4d0c2f2ff9" prot="protected" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>isBottomActive</name></member>
      <member refid="classamrex_1_1MLCurlCurl_1afeb4c3dbad1399f4576352234f02a159" prot="public" virt="virtual"><scope>amrex::MLCurlCurl</scope><name>isBottomSingular</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a107c8a8b4f0b4d5209357ab3a8225671" prot="protected" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>isCellCentered</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a1666fe3156e40b2fbd7a44166f70ce11" prot="public" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>isMFIterSafe</name></member>
      <member refid="classamrex_1_1MLCurlCurl_1a29a695e894b100f9ee670ec7dcc15926" prot="public" virt="virtual"><scope>amrex::MLCurlCurl</scope><name>isSingular</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a3ac078eb634767e8e812746b8327a6b5" prot="private" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>levelbc_raii</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a60f337c8a71be69643d62c774a536dcd" prot="protected" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>LoBC</name></member>
      <member refid="classamrex_1_1MLCurlCurl_1aa0d2dff0a1bfbad55c5f6e3a31d16652" prot="public" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>Location</name></member>
      <member refid="classamrex_1_1MLCurlCurl_1a8e3436cc293f45df20b351de804af2fd" prot="private" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>m_alpha</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a520a29dd5773acdba2c227d316e059a4" prot="protected" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>m_amr_ref_ratio</name></member>
      <member refid="classamrex_1_1MLCurlCurl_1a7b83a2461e9903530a1903a12ddec15b" prot="private" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>m_beta</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aee13b9d32b909adb7903586bfa352855" prot="protected" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>m_bottom_comm</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a1a730552d4db500b99496712dec21038" prot="protected" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>m_coarse_bc_loc</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a1b5ecb2a824287420c4f6acf8540b2f6" prot="protected" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>m_coarse_data_crse_ratio</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a02f8f07d9d724566c7aea603ea1248a6" prot="protected" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>m_coarse_data_for_bc</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a3bf0a8559fbed2ec5297f97590e92cb0" prot="protected" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>m_coarse_data_for_bc_raii</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a52e548305943a2d3a1b1731eb5855b73" prot="protected" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>m_default_comm</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a67d38036b0d30275047637a1ab739ca6" prot="protected" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>m_dmap</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a452827d7dc1f2d84d701248f05e908af" prot="protected" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>m_do_agglomeration</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a0e1db3374227c3c6043734d42bbbc795" prot="protected" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>m_do_consolidation</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a3f65a4345945e648b7170635a33c9557" prot="protected" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>m_do_semicoarsening</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a1375eac46dcbfeb8155a251b904cc727" prot="protected" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>m_domain_bloc_hi</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a437d5bd996be47153207c90d286b336c" prot="protected" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>m_domain_bloc_lo</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aa83ed4b753b00606bcdff3573a6f0824" prot="protected" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>m_domain_covered</name></member>
      <member refid="classamrex_1_1MLCurlCurl_1a5e1b51f776e54426d9a92e0101b75066" prot="private" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>m_dotmask</name></member>
      <member refid="classamrex_1_1MLCurlCurl_1ae73e6c0e2000bd5397e42f8fd8e42cba" prot="private" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>m_etype</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a07a2cce97f1c77f36f8a241090543b8e" prot="protected" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>m_factory</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aab42ad785f4263767af0a0e7306cdf8a" prot="protected" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>m_geom</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a4458bc19263fdcf39df3665681ce3aef" prot="protected" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>m_grids</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ad073f92f684b4d5ea20718fbc396ef40" prot="public" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>m_hibc</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a2cf9f506d5cee3aeaaae8b9930e7866d" prot="public" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>m_hibc_orig</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a1144a9c3d743270ff29c8e9f582581c0" prot="protected" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>m_ixtype</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a9f2e0c10c385f9bee16af5fed5f4e9c9" prot="public" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>m_lobc</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a726dec103c10ea9c84e649b9c8200767" prot="public" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>m_lobc_orig</name></member>
      <member refid="classamrex_1_1MLCurlCurl_1a194ba25b27e4f357966eb10f008566d2" prot="private" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>m_lusolver</name></member>
      <member refid="classamrex_1_1MLCurlCurl_1a85d721f72de7a13036fb1ce5bc77d452" prot="private" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>m_ncomp</name></member>
      <member refid="classamrex_1_1MLLinOpT_1abc7eaafcc5804d269386c6bdbd13181d" prot="protected" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>m_needs_coarse_data_for_bc</name></member>
      <member refid="classamrex_1_1MLLinOpT_1afe9761ce7b771e51e0b47d415779ce93" prot="protected" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>m_num_amr_levels</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a64262a62291404dab652353158886cce" prot="protected" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>m_num_mg_levels</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aa96812cd049f02fe827fc1573fa0626e" prot="protected" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>m_parent</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a3e96c4035b1315b80c6301329695f86e" prot="protected" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>m_raii_comm</name></member>
      <member refid="classamrex_1_1MLCurlCurl_1a7676ba4a8f0f7e18be2366dd33ef322f" prot="public" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>make</name></member>
      <member refid="classamrex_1_1MLCurlCurl_1ace16dcafe1f3dc9c2c37b18bb6437986" prot="public" virt="virtual"><scope>amrex::MLCurlCurl</scope><name>make</name></member>
      <member refid="classamrex_1_1MLLinOpT_1afb48e62b81e97ddffb92d7b7cea09c55" prot="protected" virt="virtual" ambiguityscope="MLLinOpT&lt; Array&lt; MultiFab, 3 &gt; &gt;::"><scope>amrex::MLCurlCurl</scope><name>make</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a54590ff0d7670660d6520c753f6fbbbb" prot="private" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>makeAgglomeratedDMap</name></member>
      <member refid="classamrex_1_1MLCurlCurl_1aaf764f3b83bb093cc40ce4c7a2bb6d59" prot="public" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>makeAlias</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a457c82b4259eab9916ca4e5f4493b373" prot="protected" virt="virtual" ambiguityscope="MLLinOpT&lt; Array&lt; MultiFab, 3 &gt; &gt;::"><scope>amrex::MLCurlCurl</scope><name>makeAlias</name></member>
      <member refid="classamrex_1_1MLCurlCurl_1af6f2d3f064b878b9d56bba0f7ddce029" prot="public" virt="virtual"><scope>amrex::MLCurlCurl</scope><name>makeCoarseAmr</name></member>
      <member refid="classamrex_1_1MLCurlCurl_1ac1291ffd5a7c279cd34ce48de928e550" prot="public" virt="virtual"><scope>amrex::MLCurlCurl</scope><name>makeCoarseMG</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a6574c3f3a840f96723f9a10ccb2eeb69" prot="private" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>makeConsolidatedDMap</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a46477d4e418960292da4f442741541b6" prot="protected" virt="virtual"><scope>amrex::MLCurlCurl</scope><name>makeFactory</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a1170a5be1e22a4168e341b9edff1ff76" prot="public" virt="virtual"><scope>amrex::MLCurlCurl</scope><name>makeNLinOp</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ad05360dc7ba30a94505918519dea299c" prot="private" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>makeSubCommunicator</name></member>
      <member refid="classamrex_1_1MLLinOpT_1abddb56c317b794cc672b446046784d95" prot="protected" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>maxorder</name></member>
      <member refid="classamrex_1_1MLCurlCurl_1ad3b325a1dc81c636a9d7bca822aabe05" prot="public" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>MF</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ac42612ebc576bd674db633fd6d0363db" prot="public" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>MFType</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a958be92529c763a85a81c3fc03e1e5af" prot="protected" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>mg_box_min_width</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a4ab72cdcf8c7d1746bd1e03fac99d808" prot="protected" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>mg_coarsen_ratio</name></member>
      <member refid="classamrex_1_1MLLinOpT_1abf470fae49c59ccd4cbc058ebfdab2a2" prot="protected" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>mg_coarsen_ratio_vec</name></member>
      <member refid="classamrex_1_1MLLinOpT_1adb9b30d3eda7f6dd1d77740f58674c84" prot="protected" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>mg_domain_min_width</name></member>
      <member refid="classamrex_1_1MLCurlCurl_1a890a339d109993f9e6b102a61af0a2da" prot="public" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>MLCurlCurl</name></member>
      <member refid="classamrex_1_1MLCurlCurl_1ad41266ab9f9d45383b54320911ac53fe" prot="public" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>MLCurlCurl</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ab768833f0df0eb419284243a6940153e" prot="public" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>MLLinOpT</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aae73abc3efc9dcc4b381ff020e043c68" prot="public" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>MLLinOpT</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a709f5c12d16e1e5e191a1d56df622173" prot="public" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>MLLinOpT</name></member>
      <member refid="classamrex_1_1MLCurlCurl_1a90ed4bd36cb7bb9fc00d6080ff823d64" prot="public" virt="virtual"><scope>amrex::MLCurlCurl</scope><name>name</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a09c567773980f90aa59d90d3235ded9c" prot="public" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>NAMRLevels</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a7e2d1058dd843b67192b1aa489e112b6" prot="public" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>needsCoarseDataForBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a1aeab1e2fe2f589ecdc3b9751208a22a" prot="public" virt="virtual"><scope>amrex::MLCurlCurl</scope><name>needsUpdate</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ad1697410f7ce33223a511796bbf9273f" prot="public" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>NMGLevels</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aaa66bfea39287ead35be91ec940d0bb1" prot="public" virt="virtual"><scope>amrex::MLCurlCurl</scope><name>normalize</name></member>
      <member refid="classamrex_1_1MLCurlCurl_1a54b8f0a39566eee4ef913f6bad712d9f" prot="public" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>normInf</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a637cc2c475b32f4606119af00617d840" prot="public" virt="pure-virtual" ambiguityscope="MLLinOpT&lt; Array&lt; MultiFab, 3 &gt; &gt;::"><scope>amrex::MLCurlCurl</scope><name>normInf</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aba8d3e06373e96ddac7da02928522796" prot="public" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a9399276c8cadba0d0e513200ab8758c9" prot="public" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a7766bf3ef48ac5508865ef5aa3ef49be" prot="public" virt="virtual"><scope>amrex::MLCurlCurl</scope><name>postSolve</name></member>
      <member refid="classamrex_1_1MLCurlCurl_1a5c54cb4e1ea4c2b1818db0cf82741c30" prot="public" virt="virtual"><scope>amrex::MLCurlCurl</scope><name>prepareForSolve</name></member>
      <member refid="classamrex_1_1MLCurlCurl_1acbc4efc38bffb2ceab5d5bf004cf6dc6" prot="public" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>prepareRHS</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a8b1c71665134af1b1ceccc4d17df2615" prot="public" virt="virtual"><scope>amrex::MLCurlCurl</scope><name>reflux</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a43fcad8e24531044114e9572beb28323" prot="protected" virt="virtual"><scope>amrex::MLCurlCurl</scope><name>resizeMultiGrid</name></member>
      <member refid="classamrex_1_1MLCurlCurl_1a169c302d0fe1a37135eb60b015b25c95" prot="public" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>restriction</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aee3f3df0d83ef41c04eb1eef68f41797" prot="public" virt="pure-virtual" ambiguityscope="MLLinOpT&lt; Array&lt; MultiFab, 3 &gt; &gt;::"><scope>amrex::MLCurlCurl</scope><name>restriction</name></member>
      <member refid="classamrex_1_1MLLinOpT_1afdb609a7a4b9ea229e7b9cc89a8751f7" prot="private" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>robin_a_raii</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a90e6517d0ff6dee31c92101a9249de67" prot="private" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>robin_b_raii</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a451681732629cb75f6a4a9ba29799f44" prot="private" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>robin_f_raii</name></member>
      <member refid="classamrex_1_1MLCurlCurl_1a4771d48d0bafc31e4a8273b1e06da376" prot="public" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>RT</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ad86c06dbaa4556184fb4dea08186e3c9" prot="public" virt="virtual"><scope>amrex::MLCurlCurl</scope><name>scaleRHS</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a1645f2059f3e9816fedfa8b45315d484" prot="public" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>setCoarseFineBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ad832dbc5dd9ed90db2136815c1c1a190" prot="public" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>setCoarseFineBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a51edb661205b9d4b77b5acab32d17cd2" prot="protected" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>setCoarseFineBCLocation</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a065b7216ffbd4136592b893066feabc9" prot="public" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>setDomainBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a472da4d3c20cee50275d2790e18bf046" prot="public" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>setDomainBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a7dd25019053e84389e2d9226fc5816ed" prot="public" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>setDomainBCLoc</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a28dec45d870edf5fba713b18c53542cf" prot="public" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>setEnforceSingularSolvable</name></member>
      <member refid="classamrex_1_1MLCurlCurl_1a06eca5d2d85df13a44bec68fb491e02d" prot="public" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>setLevelBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a1ca9d659068ffdf4e8d78d035aa9450c" prot="public" virt="pure-virtual" ambiguityscope="MLLinOpT&lt; Array&lt; MultiFab, 3 &gt; &gt;::"><scope>amrex::MLCurlCurl</scope><name>setLevelBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1adc2c4cd3ccc03f6c0f958429b1d1f093" prot="public" virt="non-virtual" ambiguityscope="MLLinOpT&lt; Array&lt; MultiFab, 3 &gt; &gt;::"><scope>amrex::MLCurlCurl</scope><name>setLevelBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a2cea879bd6717f7b2f425b1c1aeff724" prot="public" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>setMaxOrder</name></member>
      <member refid="classamrex_1_1MLCurlCurl_1a6ec4dbd1f4658dc7cd6ef708b3968c4c" prot="public" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>setScalars</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a135bc97332faf6e4f7f864b45c2b0b69" prot="public" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>setVerbose</name></member>
      <member refid="classamrex_1_1MLCurlCurl_1a11d08332baaab14e6c7cd45597aef245" prot="public" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>smooth</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a03189718c2f8cd40c34158bb4ddf6120" prot="public" virt="pure-virtual" ambiguityscope="MLLinOpT&lt; Array&lt; MultiFab, 3 &gt; &gt;::"><scope>amrex::MLCurlCurl</scope><name>smooth</name></member>
      <member refid="classamrex_1_1MLCurlCurl_1a7b8448ec4cebb216a725c03e0bb37bee" prot="public" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>smooth4</name></member>
      <member refid="classamrex_1_1MLCurlCurl_1a68c7fc765c4f93349326b9a7cd3d038e" prot="public" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>solutionResidual</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a4c4d498e615acd98b90da20eaee2a529" prot="public" virt="pure-virtual" ambiguityscope="MLLinOpT&lt; Array&lt; MultiFab, 3 &gt; &gt;::"><scope>amrex::MLCurlCurl</scope><name>solutionResidual</name></member>
      <member refid="classamrex_1_1MLCurlCurl_1aa4c0f4d5b84c079cc96ab6b0c0fb276e" prot="public" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>StateMode</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ae0ca480e28c3c9c318f0e4d5beee0143" prot="protected" virt="virtual"><scope>amrex::MLCurlCurl</scope><name>supportInhomogNeumannBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aa9b2cbde953686aaf94f7f6442a0ea5c" prot="public" virt="virtual"><scope>amrex::MLCurlCurl</scope><name>supportNSolve</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aaa1fde319e32db3c05ca0f7fd944c111" prot="protected" virt="virtual"><scope>amrex::MLCurlCurl</scope><name>supportRobinBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a87aa267936bffcd4ed6387b3138bd9d5" prot="public" virt="virtual"><scope>amrex::MLCurlCurl</scope><name>unapplyMetricTerm</name></member>
      <member refid="classamrex_1_1MLLinOpT_1af5258bf128c18afbb9712ad7230dad8e" prot="public" virt="virtual"><scope>amrex::MLCurlCurl</scope><name>unimposeNeumannBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a81443deada65588ba7a71e191def4aa0" prot="public" virt="virtual"><scope>amrex::MLCurlCurl</scope><name>update</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a685caf14f09300309d306d01150eae9a" prot="protected" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>verbose</name></member>
      <member refid="classamrex_1_1MLCurlCurl_1aafe03e36ef3a7d8c99466b3762358794" prot="public" virt="non-virtual"><scope>amrex::MLCurlCurl</scope><name>xdoty</name></member>
      <member refid="classamrex_1_1MLLinOpT_1adc521ed02a450f7efc4d24f18d8ee7aa" prot="public" virt="pure-virtual" ambiguityscope="MLLinOpT&lt; Array&lt; MultiFab, 3 &gt; &gt;::"><scope>amrex::MLCurlCurl</scope><name>xdoty</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ac7718af80beb24d049ffad1239e31384" prot="public" virt="virtual"><scope>amrex::MLCurlCurl</scope><name>~MLLinOpT</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
