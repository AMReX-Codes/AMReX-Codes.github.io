<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classamrex_1_1MLABecLaplacian" kind="class" language="C++" prot="public">
    <compoundname>amrex::MLABecLaplacian</compoundname>
    <basecompoundref refid="classamrex_1_1MLCellABecLap" prot="public" virt="non-virtual">amrex::MLCellABecLap</basecompoundref>
    <derivedcompoundref refid="classamrex_1_1MLTensorOp" prot="public" virt="non-virtual">amrex::MLTensorOp</derivedcompoundref>
    <includes refid="AMReX__MLABecLaplacian_8H" local="no">AMReX_MLABecLaplacian.H</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classamrex_1_1MLABecLaplacian_1abd0d6b7a15c37884721f1492fbfc11ed" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::MLABecLaplacian::m_needs_update</definition>
        <argsstring></argsstring>
        <name>m_needs_update</name>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="100" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLABecLaplacian_1a56c309c11b2dfa0ae7b4153cbf352329" prot="protected" static="no" mutable="no">
        <type>Real</type>
        <definition>Real amrex::MLABecLaplacian::m_a_scalar</definition>
        <argsstring></argsstring>
        <name>m_a_scalar</name>
        <initializer>= std::numeric_limits&lt;Real&gt;::quiet_NaN()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="102" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLABecLaplacian_1a431b88eacbb25a6fc2704cca95790b1b" prot="protected" static="no" mutable="no">
        <type>Real</type>
        <definition>Real amrex::MLABecLaplacian::m_b_scalar</definition>
        <argsstring></argsstring>
        <name>m_b_scalar</name>
        <initializer>= std::numeric_limits&lt;Real&gt;::quiet_NaN()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="103" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLABecLaplacian_1a4f2dd2fecc4cbd8df8cdf264330b6cee" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &gt; &gt;</type>
        <definition>Vector&lt;Vector&lt;MultiFab&gt; &gt; amrex::MLABecLaplacian::m_a_coeffs</definition>
        <argsstring></argsstring>
        <name>m_a_coeffs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="104" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLABecLaplacian_1a690294478b3f4e211d738879fcc2d487" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>, AMREX_SPACEDIM &gt; &gt; &gt;</type>
        <definition>Vector&lt;Vector&lt;Array&lt;MultiFab,AMREX_SPACEDIM&gt; &gt; &gt; amrex::MLABecLaplacian::m_b_coeffs</definition>
        <argsstring></argsstring>
        <name>m_b_coeffs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="105" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLABecLaplacian_1a225329bffa463bc382ff2bc473a21098" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
        <definition>Vector&lt;int&gt; amrex::MLABecLaplacian::m_is_singular</definition>
        <argsstring></argsstring>
        <name>m_is_singular</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="107" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" bodystart="107" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1MLABecLaplacian_1abf3b9bd60c5bffecca969aae4b710744" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::MLABecLaplacian::MLABecLaplacian</definition>
        <argsstring>()</argsstring>
        <name>MLABecLaplacian</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="18" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" bodystart="18" bodyend="18"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLABecLaplacian_1a9689c471d20bcd84b469530512a223d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MLABecLaplacian::MLABecLaplacian</definition>
        <argsstring>(const Vector&lt; Geometry &gt; &amp;a_geom, const Vector&lt; BoxArray &gt; &amp;a_grids, const Vector&lt; DistributionMapping &gt; &amp;a_dmap, const LPInfo &amp;a_info=LPInfo(), const Vector&lt; FabFactory&lt; FArrayBox &gt; const *&gt; &amp;a_factory={})</argsstring>
        <name>MLABecLaplacian</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>a_geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; BoxArray &gt; &amp;</type>
          <declname>a_grids</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt; &amp;</type>
          <declname>a_dmap</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1LPInfo" kindref="compound">LPInfo</ref> &amp;</type>
          <declname>a_info</declname>
          <defval><ref refid="structamrex_1_1LPInfo" kindref="compound">LPInfo</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &gt; const *&gt; &amp;</type>
          <declname>a_factory</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="19" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.cpp" bodystart="9" bodyend="16"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLABecLaplacian_1aa451e5963191f5eed1b2ebf09bae8dd8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MLABecLaplacian::MLABecLaplacian</definition>
        <argsstring>(const Vector&lt; Geometry &gt; &amp;a_geom, const Vector&lt; BoxArray &gt; &amp;a_grids, const Vector&lt; DistributionMapping &gt; &amp;a_dmap, const Vector&lt; iMultiFab const *&gt; &amp;a_overset_mask, const LPInfo &amp;a_info=LPInfo(), const Vector&lt; FabFactory&lt; FArrayBox &gt; const *&gt; &amp;a_factory={})</argsstring>
        <name>MLABecLaplacian</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>a_geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; BoxArray &gt; &amp;</type>
          <declname>a_grids</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt; &amp;</type>
          <declname>a_dmap</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> const *&gt; &amp;</type>
          <declname>a_overset_mask</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1LPInfo" kindref="compound">LPInfo</ref> &amp;</type>
          <declname>a_info</declname>
          <defval><ref refid="structamrex_1_1LPInfo" kindref="compound">LPInfo</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &gt; const *&gt; &amp;</type>
          <declname>a_factory</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="24" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.cpp" bodystart="18" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLABecLaplacian_1aa1a6fbbfa155e18723eae717876eb6f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>amrex::MLABecLaplacian::~MLABecLaplacian</definition>
        <argsstring>()</argsstring>
        <name>~MLABecLaplacian</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="30" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.cpp" bodystart="81" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLABecLaplacian_1aad8f38a834cb6fcdddc0912b64431300" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MLABecLaplacian::MLABecLaplacian</definition>
        <argsstring>(const MLABecLaplacian &amp;)=delete</argsstring>
        <name>MLABecLaplacian</name>
        <param>
          <type>const <ref refid="classamrex_1_1MLABecLaplacian" kindref="compound">MLABecLaplacian</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="32" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLABecLaplacian_1a2b96df8bcb57809c6f292d39cf5713d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MLABecLaplacian::MLABecLaplacian</definition>
        <argsstring>(MLABecLaplacian &amp;&amp;)=delete</argsstring>
        <name>MLABecLaplacian</name>
        <param>
          <type><ref refid="classamrex_1_1MLABecLaplacian" kindref="compound">MLABecLaplacian</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="33" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLABecLaplacian_1a79b784fd330fd2b4d0c60b7494800802" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1MLABecLaplacian" kindref="compound">MLABecLaplacian</ref> &amp;</type>
        <definition>MLABecLaplacian&amp; amrex::MLABecLaplacian::operator=</definition>
        <argsstring>(const MLABecLaplacian &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classamrex_1_1MLABecLaplacian" kindref="compound">MLABecLaplacian</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="34" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLABecLaplacian_1acfd96476126334e014e13143f1289cf7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1MLABecLaplacian" kindref="compound">MLABecLaplacian</ref> &amp;</type>
        <definition>MLABecLaplacian&amp; amrex::MLABecLaplacian::operator=</definition>
        <argsstring>(MLABecLaplacian &amp;&amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1MLABecLaplacian" kindref="compound">MLABecLaplacian</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="35" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLABecLaplacian_1a39873cb70724416fed4a16a80ac1953a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLABecLaplacian::define</definition>
        <argsstring>(const Vector&lt; Geometry &gt; &amp;a_geom, const Vector&lt; BoxArray &gt; &amp;a_grids, const Vector&lt; DistributionMapping &gt; &amp;a_dmap, const LPInfo &amp;a_info=LPInfo(), const Vector&lt; FabFactory&lt; FArrayBox &gt; const *&gt; &amp;a_factory={})</argsstring>
        <name>define</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>a_geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; BoxArray &gt; &amp;</type>
          <declname>a_grids</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt; &amp;</type>
          <declname>a_dmap</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1LPInfo" kindref="compound">LPInfo</ref> &amp;</type>
          <declname>a_info</declname>
          <defval><ref refid="structamrex_1_1LPInfo" kindref="compound">LPInfo</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &gt; const *&gt; &amp;</type>
          <declname>a_factory</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="37" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.cpp" bodystart="29" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLABecLaplacian_1af8e38ab202bd6c1afb32a79da33e7be5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLABecLaplacian::define</definition>
        <argsstring>(const Vector&lt; Geometry &gt; &amp;a_geom, const Vector&lt; BoxArray &gt; &amp;a_grids, const Vector&lt; DistributionMapping &gt; &amp;a_dmap, const Vector&lt; iMultiFab const *&gt; &amp;a_overset_mask, const LPInfo &amp;a_info=LPInfo(), const Vector&lt; FabFactory&lt; FArrayBox &gt; const *&gt; &amp;a_factory={})</argsstring>
        <name>define</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>a_geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; BoxArray &gt; &amp;</type>
          <declname>a_grids</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt; &amp;</type>
          <declname>a_dmap</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> const *&gt; &amp;</type>
          <declname>a_overset_mask</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1LPInfo" kindref="compound">LPInfo</ref> &amp;</type>
          <declname>a_info</declname>
          <defval><ref refid="structamrex_1_1LPInfo" kindref="compound">LPInfo</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &gt; const *&gt; &amp;</type>
          <declname>a_factory</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="43" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.cpp" bodystart="41" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLABecLaplacian_1a0c9623cbb85811d65268b7462e09764a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLABecLaplacian::setScalars</definition>
        <argsstring>(Real a, Real b) noexcept</argsstring>
        <name>setScalars</name>
        <param>
          <type>Real</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="50" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.cpp" bodystart="85" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLABecLaplacian_1a2dc08f7d45b41d0b9b88c7a96f95b23d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLABecLaplacian::setACoeffs</definition>
        <argsstring>(int amrlev, const MultiFab &amp;alpha)</argsstring>
        <name>setACoeffs</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>alpha</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="51" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.cpp" bodystart="99" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLABecLaplacian_1a992fd553ade4720189014453615b28b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLABecLaplacian::setACoeffs</definition>
        <argsstring>(int amrlev, Real alpha)</argsstring>
        <name>setACoeffs</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>alpha</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="52" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.cpp" bodystart="106" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLABecLaplacian_1a4746800064d0d00e8318a4e61fa59f22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLABecLaplacian::setBCoeffs</definition>
        <argsstring>(int amrlev, const Array&lt; MultiFab const *, AMREX_SPACEDIM &gt; &amp;beta)</argsstring>
        <name>setBCoeffs</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> const *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>beta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="53" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.cpp" bodystart="113" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLABecLaplacian_1a34c3b1b0d5cbc79985def0003fe8c53d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLABecLaplacian::setBCoeffs</definition>
        <argsstring>(int amrlev, Real beta)</argsstring>
        <name>setBCoeffs</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>beta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="54" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.cpp" bodystart="134" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLABecLaplacian_1a7e78a84b10a437a183500c3134b25459" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLABecLaplacian::setBCoeffs</definition>
        <argsstring>(int amrlev, Vector&lt; Real &gt; const &amp;beta)</argsstring>
        <name>setBCoeffs</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; const &amp;</type>
          <declname>beta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="55" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.cpp" bodystart="143" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLABecLaplacian_1acf27ddd13356c7c675ec2527d8e80223" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool amrex::MLABecLaplacian::needsUpdate</definition>
        <argsstring>() const override</argsstring>
        <name>needsUpdate</name>
        <reimplements refid="classamrex_1_1MLCellABecLap_1adb891ed98442838db52ab71e703ff752">needsUpdate</reimplements>
        <reimplementedby refid="classamrex_1_1MLTensorOp_1a65030fea7dc90010188af0e7b33fb6ab">needsUpdate</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="57" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" bodystart="57" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLABecLaplacian_1a7e612906bd561e6b5db7ce47ea0e7d14" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLABecLaplacian::update</definition>
        <argsstring>() override</argsstring>
        <name>update</name>
        <reimplements refid="classamrex_1_1MLCellABecLap_1aa107a7270bd64cf582e25812c5e5cbab">update</reimplements>
        <reimplementedby refid="classamrex_1_1MLTensorOp_1a2974162f8c208ea9130dbe20a99a76e1">update</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="60" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.cpp" bodystart="613" bodyend="649"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLABecLaplacian_1a627779ad059394a0bd2b3bede177e12a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLABecLaplacian::prepareForSolve</definition>
        <argsstring>() override</argsstring>
        <name>prepareForSolve</name>
        <reimplements refid="classamrex_1_1MLCellABecLap_1a7d6d2646e9f6afaf7ed70bf0c86fa762">prepareForSolve</reimplements>
        <reimplementedby refid="classamrex_1_1MLTensorOp_1a7d6264e24870296cd61ca4ce20b118df">prepareForSolve</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="62" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.cpp" bodystart="271" bodyend="309"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLABecLaplacian_1a4304750fa837f09df7c0d400b147fe2f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool amrex::MLABecLaplacian::isSingular</definition>
        <argsstring>(int amrlev) const override</argsstring>
        <name>isSingular</name>
        <reimplements refid="classamrex_1_1MLLinOp_1aa8d6ef9e77180f9076ef5cb83f48bb50">isSingular</reimplements>
        <reimplementedby refid="classamrex_1_1MLTensorOp_1abb68b7b79b8bb488979e6b25b05f6d82">isSingular</reimplementedby>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="63" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" bodystart="63" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLABecLaplacian_1aa0ead02bedca70191f223b455654b49b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool amrex::MLABecLaplacian::isBottomSingular</definition>
        <argsstring>() const override</argsstring>
        <name>isBottomSingular</name>
        <reimplements refid="classamrex_1_1MLLinOp_1aa6ff4935f1246d7c94ac38dc65c25d7d">isBottomSingular</reimplements>
        <reimplementedby refid="classamrex_1_1MLTensorOp_1a1ebac1979e56e1354afa11b556bf074a">isBottomSingular</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="64" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" bodystart="64" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLABecLaplacian_1a4e48dde7f389a14c76aef25361384a12" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLABecLaplacian::Fapply</definition>
        <argsstring>(int amrlev, int mglev, MultiFab &amp;out, const MultiFab &amp;in) const final override</argsstring>
        <name>Fapply</name>
        <reimplements refid="classamrex_1_1MLCellLinOp_1a34a85d0cc1fc408ad4dc4b3509cb9917">Fapply</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="65" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.cpp" bodystart="312" bodyend="355"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLABecLaplacian_1a32f30f88fc7763cc7c6f378e91761e6f" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLABecLaplacian::Fsmooth</definition>
        <argsstring>(int amrlev, int mglev, MultiFab &amp;sol, const MultiFab &amp;rhs, int redblack) const final override</argsstring>
        <name>Fsmooth</name>
        <reimplements refid="classamrex_1_1MLCellLinOp_1a6f2e4279fbe6ebbea1e903fb0aafc745">Fsmooth</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>redblack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="66" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.cpp" bodystart="395" bodyend="523"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLABecLaplacian_1a6e3cc0a31d52d1bb18ebf5c43dac89eb" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLABecLaplacian::FFlux</definition>
        <argsstring>(int amrlev, const MFIter &amp;mfi, const Array&lt; FArrayBox *, AMREX_SPACEDIM &gt; &amp;flux, const FArrayBox &amp;sol, Location, const int face_only=0) const final override</argsstring>
        <name>FFlux</name>
        <reimplements refid="classamrex_1_1MLCellLinOp_1a984719ccb019be3050750f57138557b0">FFlux</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>flux</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLLinOp_1a07cd0a7c45d6542e33a5d97aefe5bab3" kindref="member">Location</ref></type>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>face_only</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="67" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.cpp" bodystart="526" bodyend="541"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLABecLaplacian_1af3a38005298c98dec1874957bccc31a6" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLABecLaplacian::normalize</definition>
        <argsstring>(int amrlev, int mglev, MultiFab &amp;mf) const final override</argsstring>
        <name>normalize</name>
        <reimplements refid="classamrex_1_1MLLinOp_1a86207e36440100ba012296cb95b51713">normalize</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="72" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.cpp" bodystart="358" bodyend="392"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLABecLaplacian_1aeaca483e0d98821830a050a124c78df4" prot="public" static="no" const="yes" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>Real</type>
        <definition>virtual Real amrex::MLABecLaplacian::getAScalar</definition>
        <argsstring>() const final override</argsstring>
        <name>getAScalar</name>
        <reimplements refid="classamrex_1_1MLCellABecLap_1a7c4aeebd8ef17280170ed19e619f076a">getAScalar</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="74" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" bodystart="74" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLABecLaplacian_1ac70584251b5d47dd91ab030bfa1b871c" prot="public" static="no" const="yes" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>Real</type>
        <definition>virtual Real amrex::MLABecLaplacian::getBScalar</definition>
        <argsstring>() const final override</argsstring>
        <name>getBScalar</name>
        <reimplements refid="classamrex_1_1MLCellABecLap_1a0e67dc87e4b048beb5f44d38b3ccebfe">getBScalar</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="75" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" bodystart="75" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLABecLaplacian_1ae12be3a3c5d40ddfbe6545102d337467" prot="public" static="no" const="yes" explicit="no" inline="yes" final="yes" virt="virtual">
        <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> const  *</type>
        <definition>virtual MultiFab const* amrex::MLABecLaplacian::getACoeffs</definition>
        <argsstring>(int amrlev, int mglev) const final override</argsstring>
        <name>getACoeffs</name>
        <reimplements refid="classamrex_1_1MLCellABecLap_1a066785981b2814b49cd7ccc98ff01831">getACoeffs</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="76" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" bodystart="76" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLABecLaplacian_1ace4be849d71ce58b8a9821f27258a167" prot="public" static="no" const="yes" explicit="no" inline="yes" final="yes" virt="virtual">
        <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> const  *, AMREX_SPACEDIM &gt;</type>
        <definition>virtual Array&lt;MultiFab const*,AMREX_SPACEDIM&gt; amrex::MLABecLaplacian::getBCoeffs</definition>
        <argsstring>(int amrlev, int mglev) const final override</argsstring>
        <name>getBCoeffs</name>
        <reimplements refid="classamrex_1_1MLCellABecLap_1aacb5d55dc92f8d82e56fa0636c9d5a3e">getBCoeffs</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="78" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" bodystart="78" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLABecLaplacian_1a6c29c456c300b9376e44182204234ffa" prot="public" static="no" const="yes" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1MLLinOp" kindref="compound">MLLinOp</ref> &gt;</type>
        <definition>virtual std::unique_ptr&lt;MLLinOp&gt; amrex::MLABecLaplacian::makeNLinOp</definition>
        <argsstring>(int) const final override</argsstring>
        <name>makeNLinOp</name>
        <reimplements refid="classamrex_1_1MLLinOp_1af7992c664d65948c99e3661e6d23a646">makeNLinOp</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="81" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" bodystart="81" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLABecLaplacian_1a703ad22ae8672c91ab5c7f044530202a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLABecLaplacian::averageDownCoeffsSameAmrLevel</definition>
        <argsstring>(int amrlev, Vector&lt; MultiFab &gt; &amp;a, Vector&lt; Array&lt; MultiFab, AMREX_SPACEDIM &gt; &gt; &amp;b)</argsstring>
        <name>averageDownCoeffsSameAmrLevel</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>, AMREX_SPACEDIM &gt; &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="86" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.cpp" bodystart="172" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLABecLaplacian_1a850f02af43a26190e332319b9ddb8942" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLABecLaplacian::averageDownCoeffs</definition>
        <argsstring>()</argsstring>
        <name>averageDownCoeffs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="88" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.cpp" bodystart="155" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLABecLaplacian_1a9f80d265602f986fc8e4a4255ff3a525" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLABecLaplacian::averageDownCoeffsToCoarseAmrLevel</definition>
        <argsstring>(int flev)</argsstring>
        <name>averageDownCoeffsToCoarseAmrLevel</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>flev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="89" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.cpp" bodystart="236" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLABecLaplacian_1a4c648c8c2131afb622bc29f4aed80f8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLABecLaplacian::applyMetricTermsCoeffs</definition>
        <argsstring>()</argsstring>
        <name>applyMetricTermsCoeffs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="91" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.cpp" bodystart="255" bodyend="268"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classamrex_1_1MLABecLaplacian_1a6af504f34d971e15df085a16446327d0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLABecLaplacian::FFlux</definition>
        <argsstring>(Box const &amp;box, Real const *dxinv, Real bscalar, Array&lt; FArrayBox const *, AMREX_SPACEDIM &gt; const &amp;bcoef, Array&lt; FArrayBox *, AMREX_SPACEDIM &gt; const &amp;flux, FArrayBox const &amp;sol, int face_only, int ncomp)</argsstring>
        <name>FFlux</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>Real const *</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>bscalar</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> const *, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>bcoef</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> *, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>flux</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>face_only</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="93" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.cpp" bodystart="544" bodyend="610"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classamrex_1_1MLABecLaplacian_1a283853eeb0e1f06102254ba76a76c7cc" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLABecLaplacian::define_ab_coeffs</definition>
        <argsstring>()</argsstring>
        <name>define_ab_coeffs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="110" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.cpp" bodystart="54" bodyend="79"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2735">
        <label>amrex::MLTensorOp</label>
        <link refid="classamrex_1_1MLTensorOp"/>
        <childnode refid="2731" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2731">
        <label>amrex::MLABecLaplacian</label>
        <link refid="classamrex_1_1MLABecLaplacian"/>
        <childnode refid="2732" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2734">
        <label>amrex::MLLinOp</label>
        <link refid="classamrex_1_1MLLinOp"/>
      </node>
      <node id="2732">
        <label>amrex::MLCellABecLap</label>
        <link refid="classamrex_1_1MLCellABecLap"/>
        <childnode refid="2733" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2733">
        <label>amrex::MLCellLinOp</label>
        <link refid="classamrex_1_1MLCellLinOp"/>
        <childnode refid="2734" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2772">
        <label>std::vector&lt; MPI_Status, std::allocator&lt; MPI_Status &gt; &gt;</label>
      </node>
      <node id="2752">
        <label>amrex::FabArrayBase::CacheStats</label>
        <link refid="structamrex_1_1FabArrayBase_1_1CacheStats"/>
        <childnode refid="2753" relation="usage">
          <edgelabel>name</edgelabel>
        </childnode>
      </node>
      <node id="2755">
        <label>amrex::FabArrayBase::FabArrayStats</label>
        <link refid="structamrex_1_1FabArrayBase_1_1FabArrayStats"/>
      </node>
      <node id="2767">
        <label>amrex::ArenaInfo</label>
        <link refid="structamrex_1_1ArenaInfo"/>
      </node>
      <node id="2748">
        <label>amrex::IntVect</label>
        <link refid="classamrex_1_1IntVect"/>
        <childnode refid="2748" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
      </node>
      <node id="2747">
        <label>Real</label>
      </node>
      <node id="2773">
        <label>amrex::Vector&lt; MPI_Request &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="2774" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2765">
        <label>amrex::DataAllocator</label>
        <link refid="structamrex_1_1DataAllocator"/>
        <childnode refid="2766" relation="usage">
          <edgelabel>m_arena</edgelabel>
        </childnode>
      </node>
      <node id="2800">
        <label>std::vector&lt; amrex::Vector&lt; amrex::MultiFab &gt;, std::allocator&lt; amrex::Vector&lt; amrex::MultiFab &gt; &gt; &gt;</label>
      </node>
      <node id="2764">
        <label>std::vector&lt; char *, std::allocator&lt; char *&gt; &gt;</label>
      </node>
      <node id="2781">
        <label>std::vector&lt; Array&lt; BCType, AMREX_SPACEDIM &gt;, std::allocator&lt; Array&lt; BCType, AMREX_SPACEDIM &gt; &gt; &gt;</label>
      </node>
      <node id="2769">
        <label>std::vector&lt; std::string, std::allocator&lt; std::string &gt; &gt;</label>
      </node>
      <node id="2736">
        <label>amrex::MLABecLaplacian</label>
        <link refid="classamrex_1_1MLABecLaplacian"/>
        <childnode refid="2737" relation="public-inheritance">
        </childnode>
        <childnode refid="2799" relation="usage">
          <edgelabel>m_a_coeffs</edgelabel>
        </childnode>
        <childnode refid="2756" relation="usage">
          <edgelabel>m_is_singular</edgelabel>
        </childnode>
        <childnode refid="2801" relation="usage">
          <edgelabel>m_b_coeffs</edgelabel>
        </childnode>
        <childnode refid="2747" relation="usage">
          <edgelabel>m_a_scalar</edgelabel>
          <edgelabel>m_b_scalar</edgelabel>
        </childnode>
      </node>
      <node id="2766">
        <label>amrex::Arena</label>
        <link refid="classamrex_1_1Arena"/>
        <childnode refid="2767" relation="usage">
          <edgelabel>arena_info</edgelabel>
        </childnode>
      </node>
      <node id="2756">
        <label>amrex::Vector&lt; int &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="2757" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2753">
        <label>string</label>
      </node>
      <node id="2775">
        <label>amrex::Periodicity</label>
        <link refid="classamrex_1_1Periodicity"/>
        <childnode refid="2748" relation="usage">
          <edgelabel>period</edgelabel>
        </childnode>
      </node>
      <node id="2789">
        <label>amrex::Vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::MLCellLinOp::BndryCondLoc &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="2790" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2777">
        <label>std::vector&lt; Array&lt; int, AMREX_SPACEDIM &gt;, std::allocator&lt; Array&lt; int, AMREX_SPACEDIM &gt; &gt; &gt;</label>
      </node>
      <node id="2790">
        <label>std::vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::MLCellLinOp::BndryCondLoc &gt; &gt;, std::allocator&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::MLCellLinOp::BndryCondLoc &gt; &gt; &gt; &gt;</label>
      </node>
      <node id="2742">
        <label>amrex::Vector&lt; amrex::Vector&lt; BoxArray &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="2743" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2740">
        <label>amrex::Vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::FabFactory&lt; amrex::FArrayBox &gt; &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="2741" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2745">
        <label>std::vector&lt; amrex::Vector&lt; amrex::Geometry &gt;, std::allocator&lt; amrex::Vector&lt; amrex::Geometry &gt; &gt; &gt;</label>
      </node>
      <node id="2770">
        <label>amrex::FabArray&lt; FAB &gt;::ShMem</label>
        <link refid="structamrex_1_1FabArray_1_1ShMem"/>
      </node>
      <node id="2794">
        <label>std::vector&lt; std::unique_ptr&lt; amrex::BndryRegister &gt;, std::allocator&lt; std::unique_ptr&lt; amrex::BndryRegister &gt; &gt; &gt;</label>
      </node>
      <node id="2744">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::Geometry &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="2745" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2785">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::BndryRegister &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="2786" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2746">
        <label>amrex::RealVect</label>
        <link refid="classamrex_1_1RealVect"/>
        <childnode refid="2746" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
        <childnode refid="2747" relation="usage">
          <edgelabel>vect</edgelabel>
        </childnode>
      </node>
      <node id="2763">
        <label>amrex::Vector&lt; char *&gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="2764" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2787">
        <label>amrex::Vector&lt; amrex::YAFluxRegister &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="2788" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2778">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::DistributionMapping &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="2779" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2802">
        <label>std::vector&lt; amrex::Vector&lt; Array&lt; amrex::MultiFab, AMREX_SPACEDIM &gt; &gt;, std::allocator&lt; amrex::Vector&lt; Array&lt; amrex::MultiFab, AMREX_SPACEDIM &gt; &gt; &gt; &gt;</label>
      </node>
      <node id="2788">
        <label>std::vector&lt; amrex::YAFluxRegister, std::allocator&lt; amrex::YAFluxRegister &gt; &gt;</label>
      </node>
      <node id="2782">
        <label>amrex::Vector&lt; amrex::IntVect &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="2783" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2774">
        <label>std::vector&lt; MPI_Request, std::allocator&lt; MPI_Request &gt; &gt;</label>
      </node>
      <node id="2757">
        <label>std::vector&lt; int, std::allocator&lt; int &gt; &gt;</label>
      </node>
      <node id="2793">
        <label>amrex::Vector&lt; std::unique_ptr&lt; amrex::BndryRegister &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="2794" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2739">
        <label>amrex::MLLinOp</label>
        <link refid="classamrex_1_1MLLinOp"/>
        <childnode refid="2740" relation="usage">
          <edgelabel>m_factory</edgelabel>
        </childnode>
        <childnode refid="2742" relation="usage">
          <edgelabel>m_grids</edgelabel>
        </childnode>
        <childnode refid="2744" relation="usage">
          <edgelabel>m_geom</edgelabel>
        </childnode>
        <childnode refid="2746" relation="usage">
          <edgelabel>m_coarse_bc_loc</edgelabel>
        </childnode>
        <childnode refid="2748" relation="usage">
          <edgelabel>m_ixtype</edgelabel>
        </childnode>
        <childnode refid="2749" relation="usage">
          <edgelabel>m_coarse_data_for_bc</edgelabel>
        </childnode>
        <childnode refid="2756" relation="usage">
          <edgelabel>m_domain_covered</edgelabel>
          <edgelabel>m_amr_ref_ratio</edgelabel>
          <edgelabel>m_num_mg_levels</edgelabel>
        </childnode>
        <childnode refid="2776" relation="usage">
          <edgelabel>m_hi_inhomog_neumann</edgelabel>
          <edgelabel>m_lo_inhomog_neumann</edgelabel>
        </childnode>
        <childnode refid="2778" relation="usage">
          <edgelabel>m_dmap</edgelabel>
        </childnode>
        <childnode refid="2780" relation="usage">
          <edgelabel>m_hibc</edgelabel>
          <edgelabel>m_lobc</edgelabel>
        </childnode>
        <childnode refid="2782" relation="usage">
          <edgelabel>mg_coarsen_ratio_vec</edgelabel>
        </childnode>
        <childnode refid="2739" relation="usage">
          <edgelabel>m_parent</edgelabel>
        </childnode>
        <childnode refid="2784" relation="usage">
          <edgelabel>info</edgelabel>
        </childnode>
      </node>
      <node id="2799">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::MultiFab &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="2800" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2792">
        <label>std::vector&lt; amrex::Vector&lt; Array&lt; amrex::MultiMask, 2 *AMREX_SPACEDIM &gt; &gt;, std::allocator&lt; amrex::Vector&lt; Array&lt; amrex::MultiMask, 2 *AMREX_SPACEDIM &gt; &gt; &gt; &gt;</label>
      </node>
      <node id="2780">
        <label>amrex::Vector&lt; Array&lt; BCType, AMREX_SPACEDIM &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="2781" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2759">
        <label>amrex::DistributionMapping::RefID</label>
        <link refid="structamrex_1_1DistributionMapping_1_1RefID"/>
        <childnode refid="2760" relation="usage">
          <edgelabel>data</edgelabel>
        </childnode>
      </node>
      <node id="2771">
        <label>amrex::Vector&lt; MPI_Status &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="2772" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2784">
        <label>amrex::LPInfo</label>
        <link refid="structamrex_1_1LPInfo"/>
      </node>
      <node id="2796">
        <label>std::vector&lt; std::unique_ptr&lt; amrex::MLMGBndry &gt;, std::allocator&lt; std::unique_ptr&lt; amrex::MLMGBndry &gt; &gt; &gt;</label>
      </node>
      <node id="2737">
        <label>amrex::MLCellABecLap</label>
        <link refid="classamrex_1_1MLCellABecLap"/>
        <childnode refid="2738" relation="public-inheritance">
        </childnode>
        <childnode refid="2797" relation="usage">
          <edgelabel>m_overset_mask</edgelabel>
        </childnode>
      </node>
      <node id="2760">
        <label>amrex::DistributionMapping::Ref</label>
        <link refid="structamrex_1_1DistributionMapping_1_1Ref"/>
        <childnode refid="2756" relation="usage">
          <edgelabel>m_index_array</edgelabel>
          <edgelabel>m_pmap</edgelabel>
        </childnode>
      </node>
      <node id="2768">
        <label>amrex::Vector&lt; std::string &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="2769" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2776">
        <label>amrex::Vector&lt; Array&lt; int, AMREX_SPACEDIM &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="2777" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2797">
        <label>amrex::Vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::iMultiFab &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="2798" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2754">
        <label>amrex::DistributionMapping</label>
        <link refid="classamrex_1_1DistributionMapping"/>
      </node>
      <node id="2758">
        <label>amrex::FabArrayBase::BDKey</label>
        <link refid="structamrex_1_1FabArrayBase_1_1BDKey"/>
        <childnode refid="2759" relation="usage">
          <edgelabel>m_dm_id</edgelabel>
        </childnode>
      </node>
      <node id="2783">
        <label>std::vector&lt; amrex::IntVect, std::allocator&lt; amrex::IntVect &gt; &gt;</label>
      </node>
      <node id="2791">
        <label>amrex::Vector&lt; amrex::Vector&lt; Array&lt; amrex::MultiMask, 2 *AMREX_SPACEDIM &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="2792" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2749">
        <label>amrex::MultiFab</label>
        <link refid="classamrex_1_1MultiFab"/>
        <childnode refid="2750" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2786">
        <label>std::vector&lt; amrex::Vector&lt; amrex::BndryRegister &gt;, std::allocator&lt; amrex::Vector&lt; amrex::BndryRegister &gt; &gt; &gt;</label>
      </node>
      <node id="2738">
        <label>amrex::MLCellLinOp</label>
        <link refid="classamrex_1_1MLCellLinOp"/>
        <childnode refid="2739" relation="public-inheritance">
        </childnode>
        <childnode refid="2785" relation="usage">
          <edgelabel>m_undrrelxr</edgelabel>
        </childnode>
        <childnode refid="2787" relation="usage">
          <edgelabel>m_fluxreg</edgelabel>
        </childnode>
        <childnode refid="2789" relation="usage">
          <edgelabel>m_bcondloc</edgelabel>
        </childnode>
        <childnode refid="2791" relation="usage">
          <edgelabel>m_maskvals</edgelabel>
        </childnode>
        <childnode refid="2793" relation="usage">
          <edgelabel>m_crse_sol_br</edgelabel>
          <edgelabel>m_crse_cor_br</edgelabel>
        </childnode>
        <childnode refid="2795" relation="usage">
          <edgelabel>m_bndry_sol</edgelabel>
          <edgelabel>m_bndry_cor</edgelabel>
        </childnode>
      </node>
      <node id="2750">
        <label>amrex::FabArray&lt; FArrayBox &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="2751" relation="public-inheritance">
        </childnode>
        <childnode refid="2761" relation="usage">
          <edgelabel>pc_recv_size</edgelabel>
          <edgelabel>fb_recv_size</edgelabel>
        </childnode>
        <childnode refid="2763" relation="usage">
          <edgelabel>fb_recv_data</edgelabel>
          <edgelabel>fb_send_data</edgelabel>
          <edgelabel>pc_recv_data</edgelabel>
        </childnode>
        <childnode refid="2748" relation="usage">
          <edgelabel>fb_nghost</edgelabel>
          <edgelabel>pc_dnghost</edgelabel>
          <edgelabel>pc_snghost</edgelabel>
        </childnode>
        <childnode refid="2765" relation="usage">
          <edgelabel>m_dallocator</edgelabel>
        </childnode>
        <childnode refid="2756" relation="usage">
          <edgelabel>pc_recv_from</edgelabel>
          <edgelabel>fb_recv_from</edgelabel>
        </childnode>
        <childnode refid="2768" relation="usage">
          <edgelabel>m_tags</edgelabel>
        </childnode>
        <childnode refid="2770" relation="usage">
          <edgelabel>shmem</edgelabel>
        </childnode>
        <childnode refid="2750" relation="usage">
          <edgelabel>pc_src</edgelabel>
        </childnode>
        <childnode refid="2771" relation="usage">
          <edgelabel>fb_recv_stat</edgelabel>
        </childnode>
        <childnode refid="2773" relation="usage">
          <edgelabel>fb_send_reqs</edgelabel>
          <edgelabel>pc_recv_reqs</edgelabel>
          <edgelabel>fb_recv_reqs</edgelabel>
          <edgelabel>pc_send_reqs</edgelabel>
        </childnode>
        <childnode refid="2775" relation="usage">
          <edgelabel>fb_period</edgelabel>
          <edgelabel>pc_period</edgelabel>
        </childnode>
      </node>
      <node id="2761">
        <label>amrex::Vector&lt; std::size_t &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="2762" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2795">
        <label>amrex::Vector&lt; std::unique_ptr&lt; amrex::MLMGBndry &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="2796" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2751">
        <label>amrex::FabArrayBase</label>
        <link refid="classamrex_1_1FabArrayBase"/>
        <childnode refid="2752" relation="usage">
          <edgelabel>m_FBC_stats</edgelabel>
          <edgelabel>m_FPinfo_stats</edgelabel>
          <edgelabel>m_CFinfo_stats</edgelabel>
          <edgelabel>m_TAC_stats</edgelabel>
          <edgelabel>m_CPC_stats</edgelabel>
        </childnode>
        <childnode refid="2754" relation="usage">
          <edgelabel>distributionMap</edgelabel>
        </childnode>
        <childnode refid="2748" relation="usage">
          <edgelabel>n_filled</edgelabel>
          <edgelabel>n_grow</edgelabel>
          <edgelabel>comm_tile_size</edgelabel>
          <edgelabel>mfiter_tile_size</edgelabel>
          <edgelabel>mfghostiter_tile_size</edgelabel>
        </childnode>
        <childnode refid="2755" relation="usage">
          <edgelabel>m_FA_stats</edgelabel>
        </childnode>
        <childnode refid="2756" relation="usage">
          <edgelabel>indexArray</edgelabel>
        </childnode>
        <childnode refid="2758" relation="usage">
          <edgelabel>m_bdkey</edgelabel>
        </childnode>
      </node>
      <node id="2801">
        <label>amrex::Vector&lt; amrex::Vector&lt; Array&lt; amrex::MultiFab, AMREX_SPACEDIM &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="2802" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2798">
        <label>std::vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::iMultiFab &gt; &gt;, std::allocator&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::iMultiFab &gt; &gt; &gt; &gt;</label>
      </node>
      <node id="2762">
        <label>std::vector&lt; std::size_t, std::allocator&lt; std::size_t &gt; &gt;</label>
      </node>
      <node id="2743">
        <label>std::vector&lt; amrex::Vector&lt; BoxArray &gt;, std::allocator&lt; amrex::Vector&lt; BoxArray &gt; &gt; &gt;</label>
      </node>
      <node id="2779">
        <label>std::vector&lt; amrex::Vector&lt; amrex::DistributionMapping &gt;, std::allocator&lt; amrex::Vector&lt; amrex::DistributionMapping &gt; &gt; &gt;</label>
      </node>
      <node id="2741">
        <label>std::vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::FabFactory&lt; amrex::FArrayBox &gt; &gt; &gt;, std::allocator&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::FabFactory&lt; amrex::FArrayBox &gt; &gt; &gt; &gt; &gt;</label>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="15" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" bodystart="13" bodyend="111"/>
    <listofallmembers>
      <member refid="classamrex_1_1MLLinOp_1a8effbacb86233a5334789092372a9bde" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>AMRRefRatio</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac80a224852d40e9dd01ef9e4d52cd1c9" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>AMRRefRatio</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a62ea55fae7824c00b3237cf57616dd1d" prot="public" virt="virtual"><scope>amrex::MLABecLaplacian</scope><name>apply</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1ae77f68c02a722cf55b176d17e2c49a90" prot="public" virt="virtual"><scope>amrex::MLABecLaplacian</scope><name>applyBC</name></member>
      <member refid="classamrex_1_1MLCellABecLap_1a576364fc5fcadf5eb1b23a7a693fa3ba" prot="public" virt="virtual"><scope>amrex::MLABecLaplacian</scope><name>applyInhomogNeumannTerm</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1af6190fe1b9d2ed218129e7ad6f4b4f64" prot="public" virt="virtual"><scope>amrex::MLABecLaplacian</scope><name>applyMetricTerm</name></member>
      <member refid="classamrex_1_1MLABecLaplacian_1a4c648c8c2131afb622bc29f4aed80f8a" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>applyMetricTermsCoeffs</name></member>
      <member refid="classamrex_1_1MLCellABecLap_1ad9c4081306f2882750345d3161ca2261" prot="public" virt="virtual"><scope>amrex::MLABecLaplacian</scope><name>applyOverset</name></member>
      <member refid="classamrex_1_1MLABecLaplacian_1a850f02af43a26190e332319b9ddb8942" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>averageDownCoeffs</name></member>
      <member refid="classamrex_1_1MLABecLaplacian_1a703ad22ae8672c91ab5c7f044530202a" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>averageDownCoeffsSameAmrLevel</name></member>
      <member refid="classamrex_1_1MLABecLaplacian_1a9f80d265602f986fc8e4a4255ff3a525" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>averageDownCoeffsToCoarseAmrLevel</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1adfefa1b34d6988c4bf97957616b61c8f" prot="public" virt="virtual"><scope>amrex::MLABecLaplacian</scope><name>averageDownSolutionRHS</name></member>
      <member refid="classamrex_1_1MLLinOp_1a5aa01a1ef6b0b3a471f02f65ae4b4884" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>BCMode</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a622b7c2ecc46a6b476aba4fb470f3dcf" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>BCTuple</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac2e55c34bf6b5c0ed53d0ef6a4625a3f" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>BCType</name></member>
      <member refid="classamrex_1_1MLLinOp_1a77b33530b316399f5fb5314a846d9b7e" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>BottomCommunicator</name></member>
      <member refid="classamrex_1_1MLLinOp_1a941ddfa6ec11cbd0a1c835007494b057" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>Communicator</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1acd6c78c0e6307234b1539ba81caadb9c" prot="public" virt="virtual"><scope>amrex::MLABecLaplacian</scope><name>compFlux</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1aead98967987fb3826008fc69f3270247" prot="public" virt="virtual"><scope>amrex::MLABecLaplacian</scope><name>compGrad</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a3c1832912375e08e8bd38775b6b532b3" prot="public" virt="virtual"><scope>amrex::MLABecLaplacian</scope><name>correctionResidual</name></member>
      <member refid="classamrex_1_1MLABecLaplacian_1a39873cb70724416fed4a16a80ac1953a" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>define</name></member>
      <member refid="classamrex_1_1MLABecLaplacian_1af8e38ab202bd6c1afb32a79da33e7be5" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>define</name></member>
      <member refid="classamrex_1_1MLLinOp_1a2940aad54767b9998943db75ae57dfba" prot="public" virt="non-virtual" ambiguityscope="amrex::MLLinOp::"><scope>amrex::MLABecLaplacian</scope><name>define</name></member>
      <member refid="classamrex_1_1MLABecLaplacian_1a283853eeb0e1f06102254ba76a76c7cc" prot="private" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>define_ab_coeffs</name></member>
      <member refid="classamrex_1_1MLLinOp_1a355691d7877fb9a9aabc65db76d0f2b4" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>doAgglomeration</name></member>
      <member refid="classamrex_1_1MLLinOp_1a79f98e0cf06f695dbad6052c5d53e00b" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>doConsolidation</name></member>
      <member refid="classamrex_1_1MLLinOp_1ae920d0e3602dd26d57876b6d6a6843e4" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>doSemicoarsening</name></member>
      <member refid="classamrex_1_1MLLinOp_1a831ab67f9a58e0f452f52b176219c1a0" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>enforceSingularSolvable</name></member>
      <member refid="classamrex_1_1MLLinOp_1a0eb75c39ff8e715b524d79442b83a3fb" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>Factory</name></member>
      <member refid="classamrex_1_1MLABecLaplacian_1a4e48dde7f389a14c76aef25361384a12" prot="public" virt="virtual"><scope>amrex::MLABecLaplacian</scope><name>Fapply</name></member>
      <member refid="classamrex_1_1MLABecLaplacian_1a6e3cc0a31d52d1bb18ebf5c43dac89eb" prot="public" virt="virtual"><scope>amrex::MLABecLaplacian</scope><name>FFlux</name></member>
      <member refid="classamrex_1_1MLABecLaplacian_1a6af504f34d971e15df085a16446327d0" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>FFlux</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a10b043a8a06133e0f36f81231a7519d9" prot="public" virt="virtual"><scope>amrex::MLABecLaplacian</scope><name>fillSolutionBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1ad00407760d4927438c355ba115aaad4e" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>Finalize</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac94ee917e5350722a537af7e127984d3" prot="public" virt="virtual"><scope>amrex::MLABecLaplacian</scope><name>fixUpResidualMask</name></member>
      <member refid="classamrex_1_1MLABecLaplacian_1a32f30f88fc7763cc7c6f378e91761e6f" prot="public" virt="virtual"><scope>amrex::MLABecLaplacian</scope><name>Fsmooth</name></member>
      <member refid="classamrex_1_1MLLinOp_1a7b1da16499dc7b95e807a28757e0c094" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>Geom</name></member>
      <member refid="classamrex_1_1MLABecLaplacian_1ae12be3a3c5d40ddfbe6545102d337467" prot="public" virt="virtual"><scope>amrex::MLABecLaplacian</scope><name>getACoeffs</name></member>
      <member refid="classamrex_1_1MLABecLaplacian_1aeaca483e0d98821830a050a124c78df4" prot="public" virt="virtual"><scope>amrex::MLABecLaplacian</scope><name>getAScalar</name></member>
      <member refid="classamrex_1_1MLABecLaplacian_1ace4be849d71ce58b8a9821f27258a167" prot="public" virt="virtual"><scope>amrex::MLABecLaplacian</scope><name>getBCoeffs</name></member>
      <member refid="classamrex_1_1MLABecLaplacian_1ac70584251b5d47dd91ab030bfa1b871c" prot="public" virt="virtual"><scope>amrex::MLABecLaplacian</scope><name>getBScalar</name></member>
      <member refid="classamrex_1_1MLLinOp_1a6d1ed393d8e089b8af021e80ead4267b" prot="public" virt="virtual"><scope>amrex::MLABecLaplacian</scope><name>getDefaultBottomSolver</name></member>
      <member refid="classamrex_1_1MLLinOp_1a29c32b42500a25348ee5331f44ab94ba" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>getEnforceSingularSolvable</name></member>
      <member refid="classamrex_1_1MLCellABecLap_1a4dd161c7a7e335d397af47ec8a51f0d4" prot="public" virt="virtual"><scope>amrex::MLABecLaplacian</scope><name>getFluxes</name></member>
      <member refid="classamrex_1_1MLCellABecLap_1a9879a1ecf8cb211813eda42fa2d616ab" prot="public" virt="virtual"><scope>amrex::MLABecLaplacian</scope><name>getFluxes</name></member>
      <member refid="classamrex_1_1MLLinOp_1a1189e4016e7757083343a93649f102aa" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>getMaxOrder</name></member>
      <member refid="classamrex_1_1MLLinOp_1a525b102eb592e2b44a864c62e64e9566" prot="public" virt="virtual"><scope>amrex::MLABecLaplacian</scope><name>getNComp</name></member>
      <member refid="classamrex_1_1MLLinOp_1a53fabf0ebd4dd86e92a3c7e5a161f5a6" prot="public" virt="virtual"><scope>amrex::MLABecLaplacian</scope><name>getNGrow</name></member>
      <member refid="classamrex_1_1MLCellABecLap_1acb4d23e32365a814323cdd4787884420" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>getOversetMask</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac313a2de49bd67c23fad23d5c4045e70" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>HiBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1a85fa2f104bbfeaa73d55d589906ecd45" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>info</name></member>
      <member refid="classamrex_1_1MLLinOp_1a48b2fe73722eee0a1d50b6e0b9558174" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>Initialize</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a0044458b3dd79241c2b74483b70cb7e7" prot="public" virt="virtual"><scope>amrex::MLABecLaplacian</scope><name>interpolation</name></member>
      <member refid="classamrex_1_1MLLinOp_1aa1c6883eef4d4dc55d3a5fe5c921113a" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>isBottomActive</name></member>
      <member refid="classamrex_1_1MLABecLaplacian_1aa0ead02bedca70191f223b455654b49b" prot="public" virt="virtual"><scope>amrex::MLABecLaplacian</scope><name>isBottomSingular</name></member>
      <member refid="classamrex_1_1MLLinOp_1aa42fd2dfa3b0133f2b20a99026549900" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>isCellCentered</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1af6f760fa4c14171371737ac10d0e2c02" prot="public" virt="virtual"><scope>amrex::MLABecLaplacian</scope><name>isCrossStencil</name></member>
      <member refid="classamrex_1_1MLABecLaplacian_1a4304750fa837f09df7c0d400b147fe2f" prot="public" virt="virtual"><scope>amrex::MLABecLaplacian</scope><name>isSingular</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a0152cd38e35f6a41dc3da2814b910f2b" prot="public" virt="virtual"><scope>amrex::MLABecLaplacian</scope><name>isTensorOp</name></member>
      <member refid="classamrex_1_1MLLinOp_1a7ef6c8434223ac6e052359cd4f27fbe6" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>LoBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1a07cd0a7c45d6542e33a5d97aefe5bab3" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>Location</name></member>
      <member refid="classamrex_1_1MLABecLaplacian_1a4f2dd2fecc4cbd8df8cdf264330b6cee" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>m_a_coeffs</name></member>
      <member refid="classamrex_1_1MLABecLaplacian_1a56c309c11b2dfa0ae7b4153cbf352329" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>m_a_scalar</name></member>
      <member refid="classamrex_1_1MLLinOp_1a42ca524eb4deca1132be683805d2d7ab" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>m_amr_ref_ratio</name></member>
      <member refid="classamrex_1_1MLABecLaplacian_1a690294478b3f4e211d738879fcc2d487" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>m_b_coeffs</name></member>
      <member refid="classamrex_1_1MLABecLaplacian_1a431b88eacbb25a6fc2704cca95790b1b" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>m_b_scalar</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a20a2d5349510243c481d2b6ce1992f5c" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>m_bcondloc</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a60785819fb0c997419c7ee7b007e4bb3" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>m_bndry_cor</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1ab8f93178ea3f02ba63da966de7796970" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>m_bndry_sol</name></member>
      <member refid="classamrex_1_1MLLinOp_1a06ea1608702e52d38c0eceaa180bad7e" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>m_bottom_comm</name></member>
      <member refid="classamrex_1_1MLLinOp_1abc7e6e6252f9ecc63c86dcbd99250e10" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>m_coarse_bc_loc</name></member>
      <member refid="classamrex_1_1MLLinOp_1a1ca01453776c12e634debdc6d09206c3" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>m_coarse_data_crse_ratio</name></member>
      <member refid="classamrex_1_1MLLinOp_1ad1382ee007387f65075acda2f46866f2" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>m_coarse_data_for_bc</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a871355473b2744ad7dd29d691e72e9ee" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>m_crse_cor_br</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1aae58b75937a141dc599d98b034be7f3c" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>m_crse_sol_br</name></member>
      <member refid="classamrex_1_1MLLinOp_1addb42fac68158f49c2508cf47d3b8d9d" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>m_default_comm</name></member>
      <member refid="classamrex_1_1MLLinOp_1a80552ba3fc7cdd6bb00739c66327ae2c" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>m_dmap</name></member>
      <member refid="classamrex_1_1MLLinOp_1a19bf5f2d76877e5f5777e5c44d290648" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>m_do_agglomeration</name></member>
      <member refid="classamrex_1_1MLLinOp_1a488b6dd5c1bfecef948b543bfa7e5154" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>m_do_consolidation</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac5eeb189073e311245243a3292b8377d" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>m_do_semicoarsening</name></member>
      <member refid="classamrex_1_1MLLinOp_1a700409c91ec909489e19c53e601de053" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>m_domain_bloc_hi</name></member>
      <member refid="classamrex_1_1MLLinOp_1a0fd156d093aacd959e78666105ed6328" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>m_domain_bloc_lo</name></member>
      <member refid="classamrex_1_1MLLinOp_1aaba23614888f937956554945e6a2a5a0" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>m_domain_covered</name></member>
      <member refid="classamrex_1_1MLLinOp_1aca26a5ef5d68cae3dcabea0a5d8c2493" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>m_factory</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1aeabff149eec600743faac7295cd509d2" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>m_fluxreg</name></member>
      <member refid="classamrex_1_1MLLinOp_1ab16551403ee1629e20ed6e6d9d4f680c" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>m_geom</name></member>
      <member refid="classamrex_1_1MLLinOp_1a3f9b0a7c3a91ca7e13664dbfe7115eed" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>m_grids</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a9d6cdade5abfabf340b180cba282c3c1" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>m_has_metric_term</name></member>
      <member refid="classamrex_1_1MLLinOp_1a885bd2d76204604e07a5ce06e92da271" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>m_hi_inhomog_neumann</name></member>
      <member refid="classamrex_1_1MLLinOp_1a619323b7ef2de7c06f7c480c9bcdf3d2" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>m_hibc</name></member>
      <member refid="classamrex_1_1MLABecLaplacian_1a225329bffa463bc382ff2bc473a21098" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>m_is_singular</name></member>
      <member refid="classamrex_1_1MLLinOp_1a1422f7b22ae204247f5cdf20ab70e741" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>m_ixtype</name></member>
      <member refid="classamrex_1_1MLLinOp_1aa91c1d6bf82658c8668b2ffcfa5ab4f1" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>m_lo_inhomog_neumann</name></member>
      <member refid="classamrex_1_1MLLinOp_1aac661e9e03991a16c7aca157ca2447b0" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>m_lobc</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1af7504eedbd467f1237874cbc10dd6d39" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>m_maskvals</name></member>
      <member refid="classamrex_1_1MLLinOp_1aa53a765aea0ed0c4e7410d147380079f" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>m_needs_coarse_data_for_bc</name></member>
      <member refid="classamrex_1_1MLABecLaplacian_1abd0d6b7a15c37884721f1492fbfc11ed" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>m_needs_update</name></member>
      <member refid="classamrex_1_1MLLinOp_1ad6bbf49c1bdb88256721471b22b4b044" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>m_num_amr_levels</name></member>
      <member refid="classamrex_1_1MLLinOp_1ababf1d5df3da022563dc90ee2c81ad75" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>m_num_mg_levels</name></member>
      <member refid="classamrex_1_1MLCellABecLap_1aeee38af8d207ad6bc70087b4c6ec4215" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>m_overset_mask</name></member>
      <member refid="classamrex_1_1MLLinOp_1a614164d6c8e680ccb5ac8fb9cf1558ed" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>m_parent</name></member>
      <member refid="classamrex_1_1MLLinOp_1a2faeb23bc1e93e2b0cd693cb94a18d08" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>m_raii_comm</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a2ffd8d47358983d3c013b8012eeb1b8e" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>m_undrrelxr</name></member>
      <member refid="classamrex_1_1MLLinOp_1af41b89817b39bbd605ee94ee5d47d72f" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>make</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac31926ba837b440475e0715a8fa4b87b" prot="protected" virt="virtual"><scope>amrex::MLABecLaplacian</scope><name>makeFactory</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a3bbfff6e733b7883fffacffb363569aa" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>makeNGrids</name></member>
      <member refid="classamrex_1_1MLABecLaplacian_1a6c29c456c300b9376e44182204234ffa" prot="public" virt="virtual"><scope>amrex::MLABecLaplacian</scope><name>makeNLinOp</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac516dba583aede117f89e339423f6114" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>maxorder</name></member>
      <member refid="classamrex_1_1MLLinOp_1ae871a991ef83c33044a22db383c76dcd" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>mg_box_min_width</name></member>
      <member refid="classamrex_1_1MLLinOp_1aaa5616982aef27c68c5ae5544092c7db" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>mg_coarsen_ratio</name></member>
      <member refid="classamrex_1_1MLLinOp_1a2023b3b3881d5aff49c7a3b995a03993" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>mg_coarsen_ratio_vec</name></member>
      <member refid="classamrex_1_1MLLinOp_1a3ea5c2611e98234737157e36bae6c343" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>mg_domain_min_width</name></member>
      <member refid="classamrex_1_1MLABecLaplacian_1abf3b9bd60c5bffecca969aae4b710744" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>MLABecLaplacian</name></member>
      <member refid="classamrex_1_1MLABecLaplacian_1a9689c471d20bcd84b469530512a223d5" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>MLABecLaplacian</name></member>
      <member refid="classamrex_1_1MLABecLaplacian_1aa451e5963191f5eed1b2ebf09bae8dd8" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>MLABecLaplacian</name></member>
      <member refid="classamrex_1_1MLABecLaplacian_1aad8f38a834cb6fcdddc0912b64431300" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>MLABecLaplacian</name></member>
      <member refid="classamrex_1_1MLABecLaplacian_1a2b96df8bcb57809c6f292d39cf5713d3" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>MLABecLaplacian</name></member>
      <member refid="classamrex_1_1MLCellABecLap_1a4645fe35e39e5f36fe87938a48ea9641" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>MLCellABecLap</name></member>
      <member refid="classamrex_1_1MLCellABecLap_1aff6a0f1c81880c9e944e725098d73a7c" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>MLCellABecLap</name></member>
      <member refid="classamrex_1_1MLCellABecLap_1a13b727caa58ea6b165dcc414b6c14bae" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>MLCellABecLap</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1acc45e2dedbc266cc717ffc2239727486" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>MLCellLinOp</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1acba5508d208bbb531ce2fe45042b4f6f" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>MLCellLinOp</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a4bb69639aa4cb08113d6d8273fca03ae" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>MLCellLinOp</name></member>
      <member refid="classamrex_1_1MLLinOp_1a2a75b94dc22faffec8a686f91fbfc9c1" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>MLLinOp</name></member>
      <member refid="classamrex_1_1MLLinOp_1a7dd2c530e984f58e5a04cc415e9a539b" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>MLLinOp</name></member>
      <member refid="classamrex_1_1MLLinOp_1a69fbc0ca95c18b6e954c53abb41c885c" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>MLLinOp</name></member>
      <member refid="classamrex_1_1MLLinOp_1ab0e25c7ee0f264b36146fa77ee2bf1c4" prot="public" virt="virtual"><scope>amrex::MLABecLaplacian</scope><name>name</name></member>
      <member refid="classamrex_1_1MLLinOp_1adcfe0a91f9b85388c17eee6172f02975" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>NAMRLevels</name></member>
      <member refid="classamrex_1_1MLLinOp_1a0c150481b635dccaf83cfff3d38b11c7" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>needsCoarseDataForBC</name></member>
      <member refid="classamrex_1_1MLABecLaplacian_1acf27ddd13356c7c675ec2527d8e80223" prot="public" virt="virtual"><scope>amrex::MLABecLaplacian</scope><name>needsUpdate</name></member>
      <member refid="classamrex_1_1MLLinOp_1a257d196611ba0ab9d861dc5e0dc23502" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>NMGLevels</name></member>
      <member refid="classamrex_1_1MLLinOp_1a8f43837a5a495425a72840dc811fc230" prot="public" virt="virtual"><scope>amrex::MLABecLaplacian</scope><name>nodalSync</name></member>
      <member refid="classamrex_1_1MLABecLaplacian_1af3a38005298c98dec1874957bccc31a6" prot="public" virt="virtual"><scope>amrex::MLABecLaplacian</scope><name>normalize</name></member>
      <member refid="classamrex_1_1MLABecLaplacian_1a79b784fd330fd2b4d0c60b7494800802" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLABecLaplacian_1acfd96476126334e014e13143f1289cf7" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLCellABecLap_1a7fd4867774038467f97cfac185e235ac" prot="public" virt="non-virtual" ambiguityscope="amrex::MLCellABecLap::"><scope>amrex::MLABecLaplacian</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLCellABecLap_1ac72a224155e09fd10918b66384ccdb81" prot="public" virt="non-virtual" ambiguityscope="amrex::MLCellABecLap::"><scope>amrex::MLABecLaplacian</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a87fd042ed7a3004a39f75564f24264ca" prot="public" virt="non-virtual" ambiguityscope="amrex::MLCellLinOp::"><scope>amrex::MLABecLaplacian</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a4be43b4a29bd4f7092aa870804870ae2" prot="public" virt="non-virtual" ambiguityscope="amrex::MLCellLinOp::"><scope>amrex::MLABecLaplacian</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLLinOp_1ad163e1fa25935bce528783de5adb6b1a" prot="public" virt="non-virtual" ambiguityscope="amrex::MLLinOp::"><scope>amrex::MLABecLaplacian</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLLinOp_1aec2118e27e9938788a89f5dda28709f7" prot="public" virt="non-virtual" ambiguityscope="amrex::MLLinOp::"><scope>amrex::MLABecLaplacian</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLABecLaplacian_1a627779ad059394a0bd2b3bede177e12a" prot="public" virt="virtual"><scope>amrex::MLABecLaplacian</scope><name>prepareForSolve</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1ae233eeb511516448492f38fe53fa9cd9" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>RealTuple</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1afc76c452e2704200c3b596ba1c1cb1a2" prot="public" virt="virtual"><scope>amrex::MLABecLaplacian</scope><name>reflux</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1aa95312f91d2baeeba018a231d162ad9a" prot="public" virt="virtual"><scope>amrex::MLABecLaplacian</scope><name>restriction</name></member>
      <member refid="classamrex_1_1MLABecLaplacian_1a2dc08f7d45b41d0b9b88c7a96f95b23d" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>setACoeffs</name></member>
      <member refid="classamrex_1_1MLABecLaplacian_1a992fd553ade4720189014453615b28b6" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>setACoeffs</name></member>
      <member refid="classamrex_1_1MLABecLaplacian_1a4746800064d0d00e8318a4e61fa59f22" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>setBCoeffs</name></member>
      <member refid="classamrex_1_1MLABecLaplacian_1a34c3b1b0d5cbc79985def0003fe8c53d" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>setBCoeffs</name></member>
      <member refid="classamrex_1_1MLABecLaplacian_1a7e78a84b10a437a183500c3134b25459" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>setBCoeffs</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac161f1d53e925b82ba5defeb9b0efe70" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>setCoarseFineBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac0c0882eb6092218dc09c5d60555ffed" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>setCoarseFineBCLocation</name></member>
      <member refid="classamrex_1_1MLLinOp_1aa034da35bd05e1fb93b8d876a9840ce3" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>setDomainBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1a2402e6343df20087a51fb653a147987d" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>setDomainBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1aeb7f6e87ab86b49cc97a248b4240d600" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>setDomainBCLoc</name></member>
      <member refid="classamrex_1_1MLLinOp_1a8225491c35d71e1fb7edb6355f44ac5a" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>setEnforceSingularSolvable</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a2da9b07a1fb449ee9ffd1250cce4b74d" prot="public" virt="virtual"><scope>amrex::MLABecLaplacian</scope><name>setLevelBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1a45b72169ccf285c17f439c4e990c0f58" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>setMaxOrder</name></member>
      <member refid="classamrex_1_1MLABecLaplacian_1a0c9623cbb85811d65268b7462e09764a" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>setScalars</name></member>
      <member refid="classamrex_1_1MLLinOp_1a4d96a0475759eef80d096851fdedd411" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>setVerbose</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a240eadd9886e8df70f955fecb56bcdfe" prot="public" virt="virtual"><scope>amrex::MLABecLaplacian</scope><name>smooth</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1ab18841d6aec78590a56eeaed61fe4345" prot="public" virt="virtual"><scope>amrex::MLABecLaplacian</scope><name>solutionResidual</name></member>
      <member refid="classamrex_1_1MLLinOp_1a1f2821b4a51da49d862dae1e757bb8c3" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>StateMode</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a4ee573102053163e673153f3334153fe" prot="public" virt="virtual"><scope>amrex::MLABecLaplacian</scope><name>unapplyMetricTerm</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac62698656785dd3261f05e9dc76cd8fa" prot="public" virt="virtual"><scope>amrex::MLABecLaplacian</scope><name>unimposeNeumannBC</name></member>
      <member refid="classamrex_1_1MLABecLaplacian_1a7e612906bd561e6b5db7ce47ea0e7d14" prot="public" virt="virtual"><scope>amrex::MLABecLaplacian</scope><name>update</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a73212ed387925f27b0ebeaed21e4a00a" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>updateCorBC</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1aec26fa3ea4e35bd1a02b8972fc392493" prot="public" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>updateSolBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1a0815357130e78962e01abdaba2b09c21" prot="protected" virt="non-virtual"><scope>amrex::MLABecLaplacian</scope><name>verbose</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a2d3d01dcb4fddb4f2df39484b6f58f97" prot="public" virt="virtual"><scope>amrex::MLABecLaplacian</scope><name>xdoty</name></member>
      <member refid="classamrex_1_1MLABecLaplacian_1aa1a6fbbfa155e18723eae717876eb6f5" prot="public" virt="virtual"><scope>amrex::MLABecLaplacian</scope><name>~MLABecLaplacian</name></member>
      <member refid="classamrex_1_1MLCellABecLap_1aaa11148ef1cc3386414a3b3d02f9a4b2" prot="public" virt="virtual"><scope>amrex::MLABecLaplacian</scope><name>~MLCellABecLap</name></member>
      <member refid="classamrex_1_1MLCellLinOp_1a4d46c85e7e43e5231e19607a868d3d0f" prot="public" virt="virtual"><scope>amrex::MLABecLaplacian</scope><name>~MLCellLinOp</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac6793724d6b5c98581d42d9233fda1bd" prot="public" virt="virtual"><scope>amrex::MLABecLaplacian</scope><name>~MLLinOp</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
