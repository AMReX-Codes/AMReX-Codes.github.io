<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classamrex_1_1NeighborParticleContainer" kind="class" language="C++" prot="public">
    <compoundname>amrex::NeighborParticleContainer</compoundname>
    <basecompoundref refid="classamrex_1_1ParticleContainer" prot="public" virt="non-virtual">amrex::ParticleContainer&lt; NStructReal, NStructInt, 0, 0 &gt;</basecompoundref>
    <includes refid="AMReX__NeighborParticles_8H" local="no">AMReX_NeighborParticles.H</includes>
    <innerclass refid="structamrex_1_1NeighborParticleContainer_1_1InverseCopyTag" prot="private">amrex::NeighborParticleContainer::InverseCopyTag</innerclass>
    <innerclass refid="structamrex_1_1NeighborParticleContainer_1_1MaskComps" prot="private">amrex::NeighborParticleContainer::MaskComps</innerclass>
    <innerclass refid="structamrex_1_1NeighborParticleContainer_1_1NeighborCommTag" prot="private">amrex::NeighborParticleContainer::NeighborCommTag</innerclass>
    <innerclass refid="structamrex_1_1NeighborParticleContainer_1_1NeighborCopyTag" prot="private">amrex::NeighborParticleContainer::NeighborCopyTag</innerclass>
    <innerclass refid="structamrex_1_1NeighborParticleContainer_1_1NeighborIndexMap" prot="private">amrex::NeighborParticleContainer::NeighborIndexMap</innerclass>
    <innerclass refid="structamrex_1_1NeighborParticleContainer_1_1NeighborTask" prot="protected">amrex::NeighborParticleContainer::NeighborTask</innerclass>
    <templateparamlist>
      <param>
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <declname>NStructReal</declname>
        <defname>NStructReal</defname>
      </param>
      <param>
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <declname>NStructInt</declname>
        <defname>NStructInt</defname>
      </param>
      <param>
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <declname>NArrayReal</declname>
        <defname>NArrayReal</defname>
        <defval>0</defval>
      </param>
      <param>
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <declname>NArrayInt</declname>
        <defname>NArrayInt</defname>
        <defval>0</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classamrex_1_1NeighborParticleContainer_1aa454b3f1c4a133faaa1d28b9c8c254d8" prot="public" static="no">
        <type><ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref>&lt; <ref refid="classamrex_1_1ParticleContainer_1ae71c7d35ab833b43cef08cf6aa9944b2" kindref="member">NStructReal</ref>, <ref refid="classamrex_1_1ParticleContainer_1a0126c339846650d2b30069c08da01fce" kindref="member">NStructInt</ref>, <ref refid="classamrex_1_1ParticleContainer_1a7f4ed428087667aa857bd631b97eb5e6" kindref="member">NArrayReal</ref>, <ref refid="classamrex_1_1ParticleContainer_1a1c40700b0202582a3102befdf84451ae" kindref="member">NArrayInt</ref> &gt;</type>
        <definition>using amrex::NeighborParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::ParticleContainerType =  ParticleContainer&lt;NStructReal, NStructInt, NArrayReal, NArrayInt&gt;</definition>
        <argsstring></argsstring>
        <name>ParticleContainerType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="37" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1NeighborParticleContainer_1ab9497648313d317adc40bc7bebb5ca2d" prot="public" static="no">
        <type>typename <ref refid="classamrex_1_1ParticleContainer_1a8f2c6c0bd73cc3e08c6a93759082b712" kindref="member">ParticleContainerType::ParticleType</ref></type>
        <definition>using amrex::NeighborParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::ParticleType =  typename ParticleContainerType::ParticleType</definition>
        <argsstring></argsstring>
        <name>ParticleType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="38" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1NeighborParticleContainer_1a1c6baf08ed7bdeb1d7a7acf30eefad52" prot="public" static="no">
        <type>typename <ref refid="classamrex_1_1ParticleContainer_1aeb775c5511301974b2a3e78e67466727" kindref="member">ParticleContainerType::SuperParticleType</ref></type>
        <definition>using amrex::NeighborParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::SuperParticleType =  typename ParticleContainerType::SuperParticleType</definition>
        <argsstring></argsstring>
        <name>SuperParticleType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="39" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1NeighborParticleContainer_1a43409db639b332ea93f0ad257dc54bc7" prot="public" static="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::map&lt; std::pair&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;, <ref refid="classamrex_1_1NeighborList" kindref="compound">amrex::NeighborList</ref>&lt; <ref refid="classamrex_1_1NeighborParticleContainer_1ab9497648313d317adc40bc7bebb5ca2d" kindref="member">ParticleType</ref> &gt; &gt; &gt;</type>
        <definition>using amrex::NeighborParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::NeighborListContainerType =  Vector&lt;std::map&lt;std::pair&lt;int, int&gt;, amrex::NeighborList&lt;ParticleType&gt; &gt; &gt;</definition>
        <argsstring></argsstring>
        <name>NeighborListContainerType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="40" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1NeighborParticleContainer_1a4f7f3ca7bf951e7ec6fce594005694da" prot="public" static="no">
        <type><ref refid="classamrex_1_1ParIter" kindref="compound">ParIter</ref>&lt; <ref refid="classamrex_1_1ParticleContainer_1ae71c7d35ab833b43cef08cf6aa9944b2" kindref="member">NStructReal</ref>, <ref refid="classamrex_1_1ParticleContainer_1a0126c339846650d2b30069c08da01fce" kindref="member">NStructInt</ref>, <ref refid="classamrex_1_1ParticleContainer_1a7f4ed428087667aa857bd631b97eb5e6" kindref="member">NArrayReal</ref>, <ref refid="classamrex_1_1ParticleContainer_1a1c40700b0202582a3102befdf84451ae" kindref="member">NArrayInt</ref> &gt;</type>
        <definition>using amrex::NeighborParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::MyParIter =  ParIter&lt;NStructReal, NStructInt, NArrayReal, NArrayInt&gt;</definition>
        <argsstring></argsstring>
        <name>MyParIter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="192" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" bodystart="192" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1NeighborParticleContainer_1a0c2a28aef7db24fbfccc53f46637a582" prot="public" static="no">
        <type>std::pair&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
        <definition>using amrex::NeighborParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::PairIndex =  std::pair&lt;int, int&gt;</definition>
        <argsstring></argsstring>
        <name>PairIndex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="193" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" bodystart="193" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1NeighborParticleContainer_1ae77c84d55fb9e147fc49a60bd44d42d6" prot="public" static="no">
        <type>std::map&lt; <ref refid="structamrex_1_1NeighborParticleContainer_1_1NeighborCommTag" kindref="compound">NeighborCommTag</ref>, <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; char &gt; &gt;</type>
        <definition>using amrex::NeighborParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::NeighborCommMap =  std::map&lt;NeighborCommTag, Vector&lt;char&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>NeighborCommMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="194" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" bodystart="194" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1NeighborParticleContainer_1a41c79512efbfbf1a4145948c6a680d5c" prot="public" static="no">
        <type>typename <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref>&lt; <ref refid="classamrex_1_1ParticleContainer_1ae71c7d35ab833b43cef08cf6aa9944b2" kindref="member">NStructReal</ref>, <ref refid="classamrex_1_1ParticleContainer_1a0126c339846650d2b30069c08da01fce" kindref="member">NStructInt</ref>, <ref refid="classamrex_1_1ParticleContainer_1a7f4ed428087667aa857bd631b97eb5e6" kindref="member">NArrayReal</ref>, <ref refid="classamrex_1_1ParticleContainer_1a1c40700b0202582a3102befdf84451ae" kindref="member">NArrayInt</ref> &gt;::<ref refid="classamrex_1_1NeighborParticleContainer_1a41c79512efbfbf1a4145948c6a680d5c" kindref="member">AoS</ref></type>
        <definition>using amrex::NeighborParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::AoS =  typename ParticleContainer&lt;NStructReal, NStructInt, NArrayReal, NArrayInt&gt;::AoS</definition>
        <argsstring></argsstring>
        <name>AoS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="195" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" bodystart="195" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1NeighborParticleContainer_1ade2385ed6d6005f38a31d3709b55fc4c" prot="public" static="no">
        <type>typename <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref>&lt; <ref refid="classamrex_1_1ParticleContainer_1ae71c7d35ab833b43cef08cf6aa9944b2" kindref="member">NStructReal</ref>, <ref refid="classamrex_1_1ParticleContainer_1a0126c339846650d2b30069c08da01fce" kindref="member">NStructInt</ref>, <ref refid="classamrex_1_1ParticleContainer_1a7f4ed428087667aa857bd631b97eb5e6" kindref="member">NArrayReal</ref>, <ref refid="classamrex_1_1ParticleContainer_1a1c40700b0202582a3102befdf84451ae" kindref="member">NArrayInt</ref> &gt;::<ref refid="classamrex_1_1NeighborParticleContainer_1ade2385ed6d6005f38a31d3709b55fc4c" kindref="member">ParticleVector</ref></type>
        <definition>using amrex::NeighborParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::ParticleVector =  typename ParticleContainer&lt;NStructReal, NStructInt, NArrayReal, NArrayInt&gt;::ParticleVector</definition>
        <argsstring></argsstring>
        <name>ParticleVector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="196" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" bodystart="196" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1NeighborParticleContainer_1a88e27f1bb35a55e5fb6555057e1e25ac" prot="public" static="no">
        <type>typename <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref>&lt; <ref refid="classamrex_1_1ParticleContainer_1ae71c7d35ab833b43cef08cf6aa9944b2" kindref="member">NStructReal</ref>, <ref refid="classamrex_1_1ParticleContainer_1a0126c339846650d2b30069c08da01fce" kindref="member">NStructInt</ref>, <ref refid="classamrex_1_1ParticleContainer_1a7f4ed428087667aa857bd631b97eb5e6" kindref="member">NArrayReal</ref>, <ref refid="classamrex_1_1ParticleContainer_1a1c40700b0202582a3102befdf84451ae" kindref="member">NArrayInt</ref> &gt;::<ref refid="classamrex_1_1ParticleContainer_1a71a0cf043ed329a849e9a33c5e1515fc" kindref="member">ParticleTileType</ref></type>
        <definition>using amrex::NeighborParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::ParticleTile =  typename ParticleContainer&lt;NStructReal, NStructInt, NArrayReal, NArrayInt&gt;::ParticleTileType</definition>
        <argsstring></argsstring>
        <name>ParticleTile</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="197" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" bodystart="197" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1NeighborParticleContainer_1a60a40e557410a932b8adc0275a5d019f" prot="public" static="no">
        <type>typename <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref>&lt; <ref refid="classamrex_1_1ParticleContainer_1ae71c7d35ab833b43cef08cf6aa9944b2" kindref="member">NStructReal</ref>, <ref refid="classamrex_1_1ParticleContainer_1a0126c339846650d2b30069c08da01fce" kindref="member">NStructInt</ref>, <ref refid="classamrex_1_1ParticleContainer_1a7f4ed428087667aa857bd631b97eb5e6" kindref="member">NArrayReal</ref>, <ref refid="classamrex_1_1ParticleContainer_1a1c40700b0202582a3102befdf84451ae" kindref="member">NArrayInt</ref> &gt;::<ref refid="classamrex_1_1NeighborParticleContainer_1a60a40e557410a932b8adc0275a5d019f" kindref="member">IntVector</ref></type>
        <definition>using amrex::NeighborParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::IntVector =  typename ParticleContainer&lt;NStructReal, NStructInt, NArrayReal, NArrayInt&gt;::IntVector</definition>
        <argsstring></argsstring>
        <name>IntVector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="198" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" bodystart="198" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1NeighborParticleContainer_1afcfe4393ad4cb1e555c5dff902c6901d" prot="public" static="no">
        <type>typename <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref>&lt; <ref refid="classamrex_1_1ParticleContainer_1ae71c7d35ab833b43cef08cf6aa9944b2" kindref="member">NStructReal</ref>, <ref refid="classamrex_1_1ParticleContainer_1a0126c339846650d2b30069c08da01fce" kindref="member">NStructInt</ref>, <ref refid="classamrex_1_1ParticleContainer_1a7f4ed428087667aa857bd631b97eb5e6" kindref="member">NArrayReal</ref>, <ref refid="classamrex_1_1ParticleContainer_1a1c40700b0202582a3102befdf84451ae" kindref="member">NArrayInt</ref> &gt;::<ref refid="classamrex_1_1NeighborParticleContainer_1afcfe4393ad4cb1e555c5dff902c6901d" kindref="member">SendBuffer</ref></type>
        <definition>using amrex::NeighborParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::SendBuffer =  typename ParticleContainer&lt;NStructReal, NStructInt, NArrayReal, NArrayInt&gt;::SendBuffer</definition>
        <argsstring></argsstring>
        <name>SendBuffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="199" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" bodystart="199" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classamrex_1_1NeighborParticleContainer_1ab2ef89d2bc69cbfa4ca8f26175d2ce1c" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::map&lt; <ref refid="classamrex_1_1NeighborParticleContainer_1a0c2a28aef7db24fbfccc53f46637a582" kindref="member">PairIndex</ref>, <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="structamrex_1_1NeighborParticleContainer_1_1InverseCopyTag" kindref="compound">InverseCopyTag</ref> &gt; &gt; &gt;</type>
        <definition>Vector&lt;std::map&lt;PairIndex, Vector&lt;InverseCopyTag&gt; &gt; &gt; amrex::NeighborParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::inverse_tags</definition>
        <argsstring></argsstring>
        <name>inverse_tags</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="392" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" bodystart="392" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1NeighborParticleContainer_1a2db2fa1d27368a0d8f2a783f215cd93b" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::map&lt; <ref refid="classamrex_1_1NeighborParticleContainer_1a0c2a28aef7db24fbfccc53f46637a582" kindref="member">PairIndex</ref>, <ref refid="classamrex_1_1NeighborParticleContainer_1a88e27f1bb35a55e5fb6555057e1e25ac" kindref="member">ParticleTile</ref> &gt; &gt;</type>
        <definition>Vector&lt;std::map&lt;PairIndex, ParticleTile&gt; &gt; amrex::NeighborParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::neighbors</definition>
        <argsstring></argsstring>
        <name>neighbors</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="393" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" bodystart="393" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1NeighborParticleContainer_1a68d92607a1d43f215ae6af8ff8d3e3af" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::map&lt; <ref refid="classamrex_1_1NeighborParticleContainer_1a0c2a28aef7db24fbfccc53f46637a582" kindref="member">PairIndex</ref>, <ref refid="classamrex_1_1NeighborParticleContainer_1a60a40e557410a932b8adc0275a5d019f" kindref="member">IntVector</ref> &gt; &gt;</type>
        <definition>Vector&lt;std::map&lt;PairIndex, IntVector&gt; &gt; amrex::NeighborParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::neighbor_list</definition>
        <argsstring></argsstring>
        <name>neighbor_list</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="394" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" bodystart="394" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1NeighborParticleContainer_1a36651cd2e655c49f9d9c57c865223fa2" prot="protected" static="no" mutable="no">
        <type>const size_t</type>
        <definition>const size_t amrex::NeighborParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::pdata_size</definition>
        <argsstring></argsstring>
        <name>pdata_size</name>
        <initializer>= sizeof(<ref refid="classamrex_1_1NeighborParticleContainer_1ab9497648313d317adc40bc7bebb5ca2d" kindref="member">ParticleType</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="395" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" bodystart="395" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1NeighborParticleContainer_1a0bc1ebc16494317aa1ee91983ac667e4" prot="protected" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t amrex::NeighborParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::cdata_size</definition>
        <argsstring></argsstring>
        <name>cdata_size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="398" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" bodystart="398" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1NeighborParticleContainer_1a9c12404dedc750595ce4d68731d6fc29" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::NeighborParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::m_num_neighbor_cells</definition>
        <argsstring></argsstring>
        <name>m_num_neighbor_cells</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="399" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" bodystart="399" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1NeighborParticleContainer_1a36b78bd6fa71f934871cf953892ef4f8" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="structamrex_1_1NeighborParticleContainer_1_1NeighborCommTag" kindref="compound">NeighborCommTag</ref> &gt;</type>
        <definition>Vector&lt;NeighborCommTag&gt; amrex::NeighborParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::local_neighbors</definition>
        <argsstring></argsstring>
        <name>local_neighbors</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="400" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" bodystart="400" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1NeighborParticleContainer_1ad8787f8726e711a8d7a8e0dce3fb8624" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::unique_ptr&lt; <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &gt; &gt;</type>
        <definition>Vector&lt;std::unique_ptr&lt;iMultiFab&gt; &gt; amrex::NeighborParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::mask_ptr</definition>
        <argsstring></argsstring>
        <name>mask_ptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="401" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" bodystart="401" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1NeighborParticleContainer_1a82a5acd18d78404acab9c6f310411369" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::map&lt; <ref refid="classamrex_1_1NeighborParticleContainer_1a0c2a28aef7db24fbfccc53f46637a582" kindref="member">PairIndex</ref>, <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="structamrex_1_1NeighborParticleContainer_1_1NeighborCopyTag" kindref="compound">NeighborCopyTag</ref> &gt; &gt; &gt; &gt;</type>
        <definition>Vector&lt;std::map&lt;PairIndex, Vector&lt;Vector&lt;NeighborCopyTag&gt; &gt; &gt; &gt; amrex::NeighborParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::buffer_tag_cache</definition>
        <argsstring></argsstring>
        <name>buffer_tag_cache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="403" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" bodystart="403" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1NeighborParticleContainer_1abbb2992e59999ae9c2866da0b90a7378" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::map&lt; <ref refid="classamrex_1_1NeighborParticleContainer_1a0c2a28aef7db24fbfccc53f46637a582" kindref="member">PairIndex</ref>, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &gt;</type>
        <definition>Vector&lt;std::map&lt;PairIndex, int&gt; &gt; amrex::NeighborParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::local_neighbor_sizes</definition>
        <argsstring></argsstring>
        <name>local_neighbor_sizes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="404" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" bodystart="404" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1NeighborParticleContainer_1a704c1b5b30612c4f5a09378f0a63b221" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
        <definition>Vector&lt;int&gt; amrex::NeighborParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::neighbor_procs</definition>
        <argsstring></argsstring>
        <name>neighbor_procs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>each proc knows how many sends it will do, and how many bytes it will rcv from each other proc. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="408" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" bodystart="408" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1NeighborParticleContainer_1a6d6260836577412b1a3a17c7f8d09bc4" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Long &gt;</type>
        <definition>Vector&lt;Long&gt; amrex::NeighborParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::rcvs</definition>
        <argsstring></argsstring>
        <name>rcvs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="409" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" bodystart="409" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1NeighborParticleContainer_1a9c0cf5742a0014b73afe38a75f02534e" prot="protected" static="no" mutable="no">
        <type>Long</type>
        <definition>Long amrex::NeighborParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::num_snds</definition>
        <argsstring></argsstring>
        <name>num_snds</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="410" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" bodystart="410" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1NeighborParticleContainer_1a5ba336738781f2d529bbb68a7f297e17" prot="protected" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; char &gt; &gt;</type>
        <definition>std::map&lt;int, Vector&lt;char&gt; &gt; amrex::NeighborParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::send_data</definition>
        <argsstring></argsstring>
        <name>send_data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="411" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" bodystart="411" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1NeighborParticleContainer_1abaca3cff5c84aa26d0e6c4a454af00cd" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
        <definition>Vector&lt;int&gt; amrex::NeighborParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::ghost_real_comp</definition>
        <argsstring></argsstring>
        <name>ghost_real_comp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="413" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" bodystart="413" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1NeighborParticleContainer_1a686b95f083fdf17811b9933e189326db" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
        <definition>Vector&lt;int&gt; amrex::NeighborParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::ghost_int_comp</definition>
        <argsstring></argsstring>
        <name>ghost_int_comp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="414" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" bodystart="414" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1NeighborParticleContainer_1a68fedc2fd57b0e5efccdf65617f930ff" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::NeighborParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::m_neighbor_mask_initialized</definition>
        <argsstring></argsstring>
        <name>m_neighbor_mask_initialized</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="446" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" bodystart="446" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1NeighborParticleContainer_1a0f3bc83f8fdf1b3468248103a0000a49" prot="protected" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1iMultiFab" kindref="compound">amrex::iMultiFab</ref> &gt;</type>
        <definition>std::unique_ptr&lt;amrex::iMultiFab&gt; amrex::NeighborParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::m_neighbor_mask_ptr</definition>
        <argsstring></argsstring>
        <name>m_neighbor_mask_ptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="447" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" bodystart="447" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1NeighborParticleContainer_1a6aafab3c8c1565c5457b08400f0c7984" prot="protected" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, std::vector&lt; std::vector&lt; <ref refid="structamrex_1_1NeighborCode" kindref="compound">NeighborCode</ref> &gt; &gt; &gt;</type>
        <definition>std::map&lt;int, std::vector&lt;std::vector&lt;NeighborCode&gt; &gt; &gt; amrex::NeighborParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::m_grid_map</definition>
        <argsstring></argsstring>
        <name>m_grid_map</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="449" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" bodystart="449" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1NeighborParticleContainer_1adc6fa317f2580d5b4eaf5e7e156694e8" prot="protected" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, <ref refid="namespaceamrex_1_1Gpu_1a99e1f048890efc1c275606cb9bdc41c7" kindref="member">amrex::Gpu::DeviceVector</ref>&lt; <ref refid="structamrex_1_1NeighborCode" kindref="compound">NeighborCode</ref> &gt; &gt;</type>
        <definition>std::map&lt;int, amrex::Gpu::DeviceVector&lt;NeighborCode&gt; &gt; amrex::NeighborParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::m_code_array</definition>
        <argsstring></argsstring>
        <name>m_code_array</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="452" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" bodystart="452" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1NeighborParticleContainer_1a8cec5f0f49ca18e99496c3530716772b" prot="protected" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, <ref refid="namespaceamrex_1_1Gpu_1a99e1f048890efc1c275606cb9bdc41c7" kindref="member">amrex::Gpu::DeviceVector</ref>&lt; <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &gt; &gt;</type>
        <definition>std::map&lt;int, amrex::Gpu::DeviceVector&lt;Box&gt; &gt; amrex::NeighborParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::m_isec_boxes</definition>
        <argsstring></argsstring>
        <name>m_isec_boxes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="454" column="23" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" bodystart="454" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1NeighborParticleContainer_1adc56d3fa06a368656ba30775e6af57d5" prot="protected" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, <ref refid="namespaceamrex_1_1Gpu_1a99e1f048890efc1c275606cb9bdc41c7" kindref="member">amrex::Gpu::DeviceVector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &gt;</type>
        <definition>std::map&lt;int, amrex::Gpu::DeviceVector&lt;int&gt; &gt; amrex::NeighborParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::m_code_offsets</definition>
        <argsstring></argsstring>
        <name>m_code_offsets</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="455" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" bodystart="455" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1NeighborParticleContainer_1a42b4110915286223007d92bbcf580d89" prot="protected" static="no" mutable="no">
        <type><ref refid="structamrex_1_1ParticleCopyOp" kindref="compound">ParticleCopyOp</ref></type>
        <definition>ParticleCopyOp amrex::NeighborParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::neighbor_copy_op</definition>
        <argsstring></argsstring>
        <name>neighbor_copy_op</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="457" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" bodystart="457" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1NeighborParticleContainer_1a4057e1a1eaeca59b1c87cec0720343d6" prot="protected" static="no" mutable="no">
        <type><ref refid="structamrex_1_1ParticleCopyPlan" kindref="compound">ParticleCopyPlan</ref></type>
        <definition>ParticleCopyPlan amrex::NeighborParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::neighbor_copy_plan</definition>
        <argsstring></argsstring>
        <name>neighbor_copy_plan</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="458" column="22" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" bodystart="458" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1NeighborParticleContainer_1a8fd0536bf961bc912c1a380d93b077dd" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1PODVector" kindref="compound">amrex::PODVector</ref>&lt; char, <ref refid="classamrex_1_1PolymorphicArenaAllocator" kindref="compound">PolymorphicArenaAllocator</ref>&lt; char &gt; &gt;</type>
        <definition>amrex::PODVector&lt;char, PolymorphicArenaAllocator&lt;char&gt; &gt; amrex::NeighborParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::snd_buffer</definition>
        <argsstring></argsstring>
        <name>snd_buffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="460" column="22" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" bodystart="460" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1NeighborParticleContainer_1a2f7e6baa209278afea162548a1425bf2" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1_1Gpu_1a99e1f048890efc1c275606cb9bdc41c7" kindref="member">amrex::Gpu::DeviceVector</ref>&lt; char &gt;</type>
        <definition>amrex::Gpu::DeviceVector&lt;char&gt; amrex::NeighborParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::rcv_buffer</definition>
        <argsstring></argsstring>
        <name>rcv_buffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="461" column="30" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" bodystart="461" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1NeighborParticleContainer_1a1f7704df7069ec0df0e84a649babf620" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1_1Gpu_1a6e76d121ad2e1030d86ccbc9a47f6fde" kindref="member">Gpu::PinnedVector</ref>&lt; char &gt;</type>
        <definition>Gpu::PinnedVector&lt;char&gt; amrex::NeighborParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::pinned_snd_buffer</definition>
        <argsstring></argsstring>
        <name>pinned_snd_buffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="463" column="23" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" bodystart="463" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1NeighborParticleContainer_1a57f27a8f270653d1a738490e32dffe4b" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1_1Gpu_1a6e76d121ad2e1030d86ccbc9a47f6fde" kindref="member">Gpu::PinnedVector</ref>&lt; char &gt;</type>
        <definition>Gpu::PinnedVector&lt;char&gt; amrex::NeighborParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::pinned_rcv_buffer</definition>
        <argsstring></argsstring>
        <name>pinned_rcv_buffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="464" column="23" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" bodystart="464" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1NeighborParticleContainer_1a739c2408e1c55081d20e737f6bf7ec8f" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1NeighborParticleContainer_1a43409db639b332ea93f0ad257dc54bc7" kindref="member">NeighborListContainerType</ref></type>
        <definition>NeighborListContainerType amrex::NeighborParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::m_neighbor_list</definition>
        <argsstring></argsstring>
        <name>m_neighbor_list</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="467" column="31" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" bodystart="467" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1NeighborParticleContainer_1a71350435dff09e0768bdc74d0f943655" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::map&lt; std::pair&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;, <ref refid="namespaceamrex_1_1Gpu_1a99e1f048890efc1c275606cb9bdc41c7" kindref="member">amrex::Gpu::DeviceVector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &gt; &gt;</type>
        <definition>Vector&lt;std::map&lt;std::pair&lt;int, int&gt;, amrex::Gpu::DeviceVector&lt;int&gt; &gt; &gt; amrex::NeighborParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::m_boundary_particle_ids</definition>
        <argsstring></argsstring>
        <name>m_boundary_particle_ids</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="469" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" bodystart="469" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1NeighborParticleContainer_1a027a8bd9c7726edd5ab979a6ee716fa8" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::NeighborParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::m_has_neighbors</definition>
        <argsstring></argsstring>
        <name>m_has_neighbors</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="473" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" bodystart="473" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-static-attrib">
      <memberdef kind="variable" id="classamrex_1_1NeighborParticleContainer_1aebe05d83866295fa66cd195bfd2ccc44" prot="protected" static="yes" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>constexpr int amrex::NeighborParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::num_mask_comps</definition>
        <argsstring></argsstring>
        <name>num_mask_comps</name>
        <initializer>= 3</initializer>
        <briefdescription>
<para>grid, tile, level </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="397" column="26" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" bodystart="397" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1NeighborParticleContainer_1a21bd4a08b87b0afeeb0d8889c619c86c" prot="protected" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool NeighborParticleContainer::use_mask</definition>
        <argsstring></argsstring>
        <name>use_mask</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="416" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" bodystart="416" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1NeighborParticleContainer_1a253931bb13b740bcdf8da45fe68a4591" prot="protected" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool NeighborParticleContainer::enable_inverse</definition>
        <argsstring></argsstring>
        <name>enable_inverse</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="418" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" bodystart="418" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classamrex_1_1NeighborParticleContainer_1af2dd70e123c4708809ddc29dc04124e9" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const InverseCopyTag &amp;tag)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1NeighborParticleContainer_1_1InverseCopyTag" kindref="compound">InverseCopyTag</ref> &amp;</type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="142" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" bodystart="142" bodyend="148"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1NeighborParticleContainer_1aec6aa68d7cccf38bf8f2ece89e2e47ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>NeighborParticleContainer::NeighborParticleContainer</definition>
        <argsstring>(ParGDBBase *gdb, int ncells)</argsstring>
        <name>NeighborParticleContainer</name>
        <param>
          <type><ref refid="classamrex_1_1ParGDBBase" kindref="compound">ParGDBBase</ref> *</type>
          <declname>gdb</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncells</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="201" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticlesI.H" bodystart="10" bodyend="15"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1NeighborParticleContainer_1a04cedff11be23a14eb5b47dfb818695f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::NeighborParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::NeighborParticleContainer</definition>
        <argsstring>(const Geometry &amp;geom, const DistributionMapping &amp;dmap, const BoxArray &amp;ba, int nneighbor)</argsstring>
        <name>NeighborParticleContainer</name>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dmap</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nneighbor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="203" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1NeighborParticleContainer_1a7ce8a903b6da41ecd366aaaa48d6ee9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::NeighborParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::NeighborParticleContainer</definition>
        <argsstring>(const Vector&lt; Geometry &gt; &amp;geom, const Vector&lt; DistributionMapping &gt; &amp;dmap, const Vector&lt; BoxArray &gt; &amp;ba, const Vector&lt; int &gt; &amp;rr, int nneighbor)</argsstring>
        <name>NeighborParticleContainer</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt; &amp;</type>
          <declname>dmap</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &gt; &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>rr</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nneighbor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="208" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1NeighborParticleContainer_1adff18120eea0cf9a843f2779fa7afb80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::NeighborParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::NeighborParticleContainer</definition>
        <argsstring>(const NeighborParticleContainer &amp;)=delete</argsstring>
        <name>NeighborParticleContainer</name>
        <param>
          <type>const <ref refid="classamrex_1_1NeighborParticleContainer" kindref="compound">NeighborParticleContainer</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="214" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1NeighborParticleContainer_1a442d7b34e588606cf0ddb1c5184c3af6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1NeighborParticleContainer" kindref="compound">NeighborParticleContainer</ref> &amp;</type>
        <definition>NeighborParticleContainer&amp; amrex::NeighborParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::operator=</definition>
        <argsstring>(const NeighborParticleContainer &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classamrex_1_1NeighborParticleContainer" kindref="compound">NeighborParticleContainer</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="215" column="31"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1NeighborParticleContainer_1a8e16762fd9648d7b623cff439d75e888" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::NeighborParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::NeighborParticleContainer</definition>
        <argsstring>(NeighborParticleContainer &amp;&amp;)=default</argsstring>
        <name>NeighborParticleContainer</name>
        <param>
          <type><ref refid="classamrex_1_1NeighborParticleContainer" kindref="compound">NeighborParticleContainer</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="217" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1NeighborParticleContainer_1af187b3c1e4f0d96810f5ea4cdb6fec43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1NeighborParticleContainer" kindref="compound">NeighborParticleContainer</ref> &amp;</type>
        <definition>NeighborParticleContainer&amp; amrex::NeighborParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::operator=</definition>
        <argsstring>(NeighborParticleContainer &amp;&amp;)=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1NeighborParticleContainer" kindref="compound">NeighborParticleContainer</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="218" column="31"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1NeighborParticleContainer_1adbf6915c6877b366e0bda3e6f268eb30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NeighborParticleContainer::Regrid</definition>
        <argsstring>(const DistributionMapping &amp;dmap, const BoxArray &amp;ba)</argsstring>
        <name>Regrid</name>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dmap</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>ba</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Regrid functions </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="223" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticlesI.H" bodystart="91" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1NeighborParticleContainer_1aee1b7c1708cd7d226db64b05d590d1fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NeighborParticleContainer::Regrid</definition>
        <argsstring>(const DistributionMapping &amp;dmap, const BoxArray &amp;ba, const int lev)</argsstring>
        <name>Regrid</name>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dmap</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="224" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticlesI.H" bodystart="102" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1NeighborParticleContainer_1a991c2e4f486d6cbb9cf74c326c1ad357" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NeighborParticleContainer::Regrid</definition>
        <argsstring>(const Vector&lt; DistributionMapping &gt; &amp;dmap, const Vector&lt; BoxArray &gt; &amp;ba)</argsstring>
        <name>Regrid</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt; &amp;</type>
          <declname>dmap</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &gt; &amp;</type>
          <declname>ba</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="225" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticlesI.H" bodystart="112" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1NeighborParticleContainer_1a2c1bf28f2552627e93d1587e977dd22a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NeighborParticleContainer::fillNeighbors</definition>
        <argsstring>()</argsstring>
        <name>fillNeighbors</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This fills the neighbor buffers for each tile with the proper data </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="230" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticlesI.H" bodystart="632" bodyend="639"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1NeighborParticleContainer_1a881b90e85491b4c0a7bb25425cc38641" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NeighborParticleContainer::sumNeighbors</definition>
        <argsstring>(int real_start_comp, int real_num_comp, int int_start_comp, int int_num_comp)</argsstring>
        <name>sumNeighbors</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>real_start_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>real_num_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>int_start_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>int_num_comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This does an &quot;inverse&quot; fillNeighbors operation, meaning that it adds data from the ghost particles to the corresponding real ones. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="236" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticlesI.H" bodystart="644" bodyend="652"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1NeighborParticleContainer_1a6aeacb4e33f4b1946b8b7a5434a77f6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NeighborParticleContainer::updateNeighbors</definition>
        <argsstring>(bool boundary_neighbors_only=false)</argsstring>
        <name>updateNeighbors</name>
        <param>
          <type>bool</type>
          <declname>boundary_neighbors_only</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This updates the neighbors with their current particle data. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="242" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticlesI.H" bodystart="657" bodyend="669"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1NeighborParticleContainer_1a287e510b67bfbb6bd4d500e5281e3329" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NeighborParticleContainer::clearNeighbors</definition>
        <argsstring>()</argsstring>
        <name>clearNeighbors</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Each tile clears its neighbors, freeing the memory </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="247" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticlesI.H" bodystart="674" bodyend="682"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1NeighborParticleContainer_1ab3f15c1b66190b5ff6d895d6ab0b63e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class CheckPair</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::NeighborParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::buildNeighborList</definition>
        <argsstring>(CheckPair &amp;&amp;check_pair, bool sort=false)</argsstring>
        <name>buildNeighborList</name>
        <param>
          <type>CheckPair &amp;&amp;</type>
          <declname>check_pair</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>sort</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Build a Neighbor List for each tile </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="253" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1NeighborParticleContainer_1a5253547af8cc34bf092433fff36ccddb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class CheckPair</type>
          </param>
          <param>
            <type>class OtherPCType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::NeighborParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::buildNeighborList</definition>
        <argsstring>(CheckPair &amp;&amp;check_pair, OtherPCType &amp;other, Vector&lt; std::map&lt; std::pair&lt; int, int &gt;, amrex::NeighborList&lt; typename OtherPCType::ParticleType &gt; &gt; &gt; &amp;neighbor_lists, bool sort=false)</argsstring>
        <name>buildNeighborList</name>
        <param>
          <type>CheckPair &amp;&amp;</type>
          <declname>check_pair</declname>
        </param>
        <param>
          <type>OtherPCType &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::map&lt; std::pair&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;, <ref refid="classamrex_1_1NeighborList" kindref="compound">amrex::NeighborList</ref>&lt; typename OtherPCType::ParticleType &gt; &gt; &gt; &amp;</type>
          <declname>neighbor_lists</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>sort</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Build a Neighbor List for each tile </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="259" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1NeighborParticleContainer_1ac12ee34811362ffe3b5419d304b1204a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class CheckPair</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::NeighborParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::selectActualNeighbors</definition>
        <argsstring>(CheckPair &amp;&amp;check_pair, int num_cells=1)</argsstring>
        <name>selectActualNeighbors</name>
        <param>
          <type>CheckPair &amp;&amp;</type>
          <declname>check_pair</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_cells</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="264" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1NeighborParticleContainer_1aac13e1f1c324181ce01a8f50fe3897d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NeighborParticleContainer::printNeighborList</definition>
        <argsstring>()</argsstring>
        <name>printNeighborList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="266" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticlesI.H" bodystart="924" bodyend="938"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1NeighborParticleContainer_1a9c5eaf4a73e02b631f586b8d9eaa9b44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NeighborParticleContainer::setRealCommComp</definition>
        <argsstring>(int i, bool value)</argsstring>
        <name>setRealCommComp</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="268" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticlesI.H" bodystart="56" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1NeighborParticleContainer_1a63cbb0b5b6c81df9e4321148bc960f32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NeighborParticleContainer::setIntCommComp</definition>
        <argsstring>(int i, bool value)</argsstring>
        <name>setIntCommComp</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="269" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticlesI.H" bodystart="64" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1NeighborParticleContainer_1a662f2650bebba90cebfd2f314bce4585" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1NeighborParticleContainer_1a88e27f1bb35a55e5fb6555057e1e25ac" kindref="member">ParticleTile</ref> &amp;</type>
        <definition>ParticleTile&amp; amrex::NeighborParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::GetNeighbors</definition>
        <argsstring>(int lev, int grid, int tile)</argsstring>
        <name>GetNeighbors</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>grid</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>tile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="271" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" bodystart="271" bodyend="274"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1NeighborParticleContainer_1a0d80b42fa8c4fa92b49b26301ea8e205" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1NeighborParticleContainer_1a88e27f1bb35a55e5fb6555057e1e25ac" kindref="member">ParticleTile</ref> &amp;</type>
        <definition>const ParticleTile&amp; amrex::NeighborParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::GetNeighbors</definition>
        <argsstring>(int lev, int grid, int tile) const</argsstring>
        <name>GetNeighbors</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>grid</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>tile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="276" column="24" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" bodystart="276" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1NeighborParticleContainer_1a394a5717e0621cf4e2250d432950cd8a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_same&lt; T, bool &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::NeighborParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::AddRealComp</definition>
        <argsstring>(T communicate=true)</argsstring>
        <name>AddRealComp</name>
        <param>
          <type>T</type>
          <declname>communicate</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="283" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" bodystart="283" bodyend="289"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1NeighborParticleContainer_1a495d805bcf68681c718d5316bac80c07" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_same&lt; T, bool &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::NeighborParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::AddIntComp</definition>
        <argsstring>(T communicate=true)</argsstring>
        <name>AddIntComp</name>
        <param>
          <type>T</type>
          <declname>communicate</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="293" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" bodystart="293" bodyend="299"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1NeighborParticleContainer_1a1dadb49a29f4ad711fb369db84b2eb54" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::NeighborParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::Redistribute</definition>
        <argsstring>(int lev_min=0, int lev_max=-1, int nGrow=0, int local=0)</argsstring>
        <name>Redistribute</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev_min</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev_max</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nGrow</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>local</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="301" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" bodystart="301" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1NeighborParticleContainer_1a098b72559cacc3ab8b2455a36137fd06" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::NeighborParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::RedistributeLocal</definition>
        <argsstring>()</argsstring>
        <name>RedistributeLocal</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="308" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" bodystart="308" bodyend="316"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1NeighborParticleContainer_1a4dbc10fb057262215b756a2b4289b33c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NeighborParticleContainer::fillNeighborsGPU</definition>
        <argsstring>()</argsstring>
        <name>fillNeighborsGPU</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="319" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticlesGPUImpl.H" bodystart="225" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1NeighborParticleContainer_1a0f70a3eeb349ea4d713b581c5beebc82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NeighborParticleContainer::updateNeighborsGPU</definition>
        <argsstring>(bool boundary_neighbors_only=false)</argsstring>
        <name>updateNeighborsGPU</name>
        <param>
          <type>bool</type>
          <declname>boundary_neighbors_only</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="320" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticlesGPUImpl.H" bodystart="245" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1NeighborParticleContainer_1acfd5f04cd8c4ccc1624a2800908ab823" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NeighborParticleContainer::clearNeighborsGPU</definition>
        <argsstring>()</argsstring>
        <name>clearNeighborsGPU</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="321" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticlesGPUImpl.H" bodystart="295" bodyend="309"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1NeighborParticleContainer_1a9fd86ef6591da68553312d8cc6321034" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::NeighborParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::setEnableInverse</definition>
        <argsstring>(bool flag)</argsstring>
        <name>setEnableInverse</name>
        <param>
          <type>bool</type>
          <declname>flag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="330" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" bodystart="330" bodyend="334"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1NeighborParticleContainer_1a10946f0902af75ab296818655fa6b388" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::NeighborParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::enableInverse</definition>
        <argsstring>()</argsstring>
        <name>enableInverse</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="336" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" bodystart="336" bodyend="336"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1NeighborParticleContainer_1ad01b79b58df596f16982763a74e34d70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NeighborParticleContainer::buildNeighborMask</definition>
        <argsstring>()</argsstring>
        <name>buildNeighborMask</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="338" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticlesGPUImpl.H" bodystart="51" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1NeighborParticleContainer_1a429842d84ae93439634d8953d71b63bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NeighborParticleContainer::buildNeighborCopyOp</definition>
        <argsstring>(bool use_boundary_neighbor=false)</argsstring>
        <name>buildNeighborCopyOp</name>
        <param>
          <type>bool</type>
          <declname>use_boundary_neighbor</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="340" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticlesGPUImpl.H" bodystart="120" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1NeighborParticleContainer_1a099c7b4442243afbac09ed42e80e9774" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class CheckPair</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::NeighborParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::buildNeighborList</definition>
        <argsstring>(CheckPair &amp;&amp;check_pair, bool)</argsstring>
        <name>buildNeighborList</name>
        <param>
          <type>CheckPair &amp;&amp;</type>
          <declname>check_pair</declname>
        </param>
        <param>
          <type>bool</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticlesI.H" line="687" column="27" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticlesI.H" bodystart="688" bodyend="752"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1NeighborParticleContainer_1a28c398b503c3b86556754980e739cd0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class CheckPair</type>
          </param>
          <param>
            <type>class OtherPCType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::NeighborParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::buildNeighborList</definition>
        <argsstring>(CheckPair &amp;&amp;check_pair, OtherPCType &amp;other, Vector&lt; std::map&lt; std::pair&lt; int, int &gt;, amrex::NeighborList&lt; typename OtherPCType::ParticleType &gt; &gt; &gt; &amp;neighbor_lists, bool)</argsstring>
        <name>buildNeighborList</name>
        <param>
          <type>CheckPair &amp;&amp;</type>
          <declname>check_pair</declname>
        </param>
        <param>
          <type>OtherPCType &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::map&lt; std::pair&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;, <ref refid="classamrex_1_1NeighborList" kindref="compound">amrex::NeighborList</ref>&lt; typename OtherPCType::ParticleType &gt; &gt; &gt; &amp;</type>
          <declname>neighbor_lists</declname>
        </param>
        <param>
          <type>bool</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticlesI.H" line="757" column="27" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticlesI.H" bodystart="758" bodyend="807"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1NeighborParticleContainer_1a273b3dd3de4a9be9b3fed863080d9ad3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class CheckPair</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::NeighborParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::selectActualNeighbors</definition>
        <argsstring>(CheckPair &amp;&amp;check_pair, int num_cells)</argsstring>
        <name>selectActualNeighbors</name>
        <param>
          <type>CheckPair &amp;&amp;</type>
          <declname>check_pair</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_cells</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticlesI.H" line="812" column="27" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticlesI.H" bodystart="813" bodyend="920"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classamrex_1_1NeighborParticleContainer_1a497db0eca21eb270f545e60f034aeb6a" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NeighborParticleContainer::cacheNeighborInfo</definition>
        <argsstring>()</argsstring>
        <name>cacheNeighborInfo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="344" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticlesI.H" bodystart="308" bodyend="526"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1NeighborParticleContainer_1af79112d043b45868fb00cf720d61b0a5" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NeighborParticleContainer::BuildMasks</definition>
        <argsstring>()</argsstring>
        <name>BuildMasks</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This builds the internal mask data structure used for looking up neighbors </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="349" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticlesI.H" bodystart="149" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1NeighborParticleContainer_1a1be3305131595afe235881caad842d14" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NeighborParticleContainer::areMasksValid</definition>
        <argsstring>()</argsstring>
        <name>areMasksValid</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Are the masks computed by the above function still valid? </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="354" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticlesI.H" bodystart="125" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1NeighborParticleContainer_1a01f3711526aa5aff0183fc0eeee6a866" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NeighborParticleContainer::GetNeighborCommTags</definition>
        <argsstring>()</argsstring>
        <name>GetNeighborCommTags</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="356" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticlesI.H" bodystart="188" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1NeighborParticleContainer_1ace4a68e9536f7e36dd141825cdc04519" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NeighborParticleContainer::GetCommTagsBox</definition>
        <argsstring>(Vector&lt; NeighborCommTag &gt; &amp;tags, const int lev, const Box &amp;in_box)</argsstring>
        <name>GetCommTagsBox</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="structamrex_1_1NeighborParticleContainer_1_1NeighborCommTag" kindref="compound">NeighborCommTag</ref> &gt; &amp;</type>
          <declname>tags</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>in_box</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="358" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticlesI.H" bodystart="261" bodyend="303"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1NeighborParticleContainer_1af03a2d960e9c4975823cee72793a6410" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NeighborParticleContainer::resizeContainers</definition>
        <argsstring>(const int lev)</argsstring>
        <name>resizeContainers</name>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="360" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticlesI.H" bodystart="943" bodyend="960"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1NeighborParticleContainer_1a9fc777a6611729b79c56fc8f1782c830" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NeighborParticleContainer::initializeCommComps</definition>
        <argsstring>()</argsstring>
        <name>initializeCommComps</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="362" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticlesI.H" bodystart="45" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1NeighborParticleContainer_1a9fea3b7765226c9483a81c772e3cfcd0" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NeighborParticleContainer::calcCommSize</definition>
        <argsstring>()</argsstring>
        <name>calcCommSize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="364" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticlesI.H" bodystart="72" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1NeighborParticleContainer_1af3b5f685680bc88ad15c0f2cd5ee44c8" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NeighborParticleContainer::fillNeighborsMPI</definition>
        <argsstring>(bool reuse_rcv_counts)</argsstring>
        <name>fillNeighborsMPI</name>
        <param>
          <type>bool</type>
          <declname>reuse_rcv_counts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Perform the MPI communication necessary to fill neighbor buffers </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="369" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticlesCPUImpl.H" bodystart="502" bodyend="649"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1NeighborParticleContainer_1a832b5eccef2ae5ed7bb83a92653b793e" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NeighborParticleContainer::sumNeighborsMPI</definition>
        <argsstring>(std::map&lt; int, Vector&lt; char &gt; &gt; &amp;not_ours, int real_start_comp, int real_num_comp, int int_start_comp, int int_num_comp)</argsstring>
        <name>sumNeighborsMPI</name>
        <param>
          <type>std::map&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; char &gt; &gt; &amp;</type>
          <declname>not_ours</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>real_start_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>real_num_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>int_start_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>int_num_comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="371" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticlesCPUImpl.H" bodystart="108" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1NeighborParticleContainer_1a78a0bf763811ffa755a8a562f2cdede1" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NeighborParticleContainer::getRcvCountsMPI</definition>
        <argsstring>()</argsstring>
        <name>getRcvCountsMPI</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Perform handshake to figure out how many bytes each proc should receive </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="378" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticlesCPUImpl.H" bodystart="442" bodyend="497"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1NeighborParticleContainer_1aeac938e58c39ed30aa59d2fd709583dc" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::NeighborParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::GetNeighborCommTags</definition>
        <argsstring>(Vector&lt; NeighborCommTag &gt; &amp;tags, const int lev, Box box)</argsstring>
        <name>GetNeighborCommTags</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="structamrex_1_1NeighborParticleContainer_1_1NeighborCommTag" kindref="compound">NeighborCommTag</ref> &gt; &amp;</type>
          <declname>tags</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
          <declname>box</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="380" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1NeighborParticleContainer_1a06c94b36af8bed58f1c6c0b4ad62e182" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NeighborParticleContainer::getNeighborTags</definition>
        <argsstring>(Vector&lt; NeighborCopyTag &gt; &amp;tags, const ParticleType &amp;p, const int nGrow, const NeighborCopyTag &amp;src_tag, const MyParIter &amp;pti)</argsstring>
        <name>getNeighborTags</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="structamrex_1_1NeighborParticleContainer_1_1NeighborCopyTag" kindref="compound">NeighborCopyTag</ref> &gt; &amp;</type>
          <declname>tags</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1NeighborParticleContainer_1ab9497648313d317adc40bc7bebb5ca2d" kindref="member">ParticleType</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nGrow</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1NeighborParticleContainer_1_1NeighborCopyTag" kindref="compound">NeighborCopyTag</ref> &amp;</type>
          <declname>src_tag</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1NeighborParticleContainer_1a4f7f3ca7bf951e7ec6fce594005694da" kindref="member">MyParIter</ref> &amp;</type>
          <declname>pti</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="382" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticlesI.H" bodystart="531" bodyend="535"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1NeighborParticleContainer_1a98b93307f7df6a29e8e1b84bfdcda458" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NeighborParticleContainer::getNeighborTags</definition>
        <argsstring>(Vector&lt; NeighborCopyTag &gt; &amp;tags, const ParticleType &amp;p, const IntVect &amp;nGrow, const NeighborCopyTag &amp;src_tag, const MyParIter &amp;pti)</argsstring>
        <name>getNeighborTags</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="structamrex_1_1NeighborParticleContainer_1_1NeighborCopyTag" kindref="compound">NeighborCopyTag</ref> &gt; &amp;</type>
          <declname>tags</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1NeighborParticleContainer_1ab9497648313d317adc40bc7bebb5ca2d" kindref="member">ParticleType</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>nGrow</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1NeighborParticleContainer_1_1NeighborCopyTag" kindref="compound">NeighborCopyTag</ref> &amp;</type>
          <declname>src_tag</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1NeighborParticleContainer_1a4f7f3ca7bf951e7ec6fce594005694da" kindref="member">MyParIter</ref> &amp;</type>
          <declname>pti</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="386" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticlesI.H" bodystart="540" bodyend="627"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1NeighborParticleContainer_1a9ceb44fa50f3d21117cd9f180ca28eb0" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>IntVect NeighborParticleContainer::computeRefFac</definition>
        <argsstring>(const int src_lev, const int lev)</argsstring>
        <name>computeRefFac</name>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>src_lev</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="390" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticlesI.H" bodystart="242" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1NeighborParticleContainer_1a5bde7ea76f99ed274bef3626dc3f833b" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::NeighborParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::hasNeighbors</definition>
        <argsstring>() const</argsstring>
        <name>hasNeighbors</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="471" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" bodystart="471" bodyend="471"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>This is a container for particles that undergo short-range interations. In addition to the normal <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> methods, each tile contains a &quot;neighbor
buffer&quot; that is filled with data corresponding to the particles within 1 neighbor cell of the tile boundaries. This allows the N^2 search over each pair of particles to proceed locally, instead of over the entire domain.</para>
<para>Note that neighbor particles are different than &quot;ghost&quot; particles, which are used in AMR subcycling to keep track of coarse level particles that may move on to fine levels during a fine level time step. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>amrex::ParticleContainer&lt; NStructReal, NStructInt, 0, 0 &gt;</label>
        <link refid="classamrex_1_1ParticleContainer"/>
      </node>
      <node id="1">
        <label>amrex::NeighborParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;</label>
        <link refid="classamrex_1_1NeighborParticleContainer"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="107">
        <label>amrex::BaseFab&lt; int &gt;</label>
        <link refid="classamrex_1_1BaseFab"/>
        <childnode refid="56" relation="public-inheritance">
        </childnode>
        <childnode refid="75" relation="usage">
          <edgelabel>domain</edgelabel>
        </childnode>
      </node>
      <node id="101">
        <label>std::vector&lt; MPI_Status, std::allocator&lt; MPI_Status &gt; &gt;</label>
        <childnode refid="8" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="124">
        <label>std::allocator&lt; unsigned int &gt;</label>
        <childnode refid="8" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="121">
        <label>std::vector&lt; std::map&lt; PairIndex, int &gt;, std::allocator&lt; std::map&lt; PairIndex, int &gt; &gt; &gt;</label>
        <childnode refid="8" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="46">
        <label>std::vector&lt; std::map&lt; PairIndex, ParticleTile &gt;, std::allocator&lt; std::map&lt; PairIndex, ParticleTile &gt; &gt; &gt;</label>
        <childnode refid="8" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="48">
        <label>amrex::iMultiFab</label>
        <link refid="classamrex_1_1iMultiFab"/>
        <childnode refid="49" relation="public-inheritance">
        </childnode>
      </node>
      <node id="44">
        <label>std::vector&lt; char, std::allocator&lt; char &gt; &gt;</label>
        <childnode refid="8" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="83">
        <label>amrex::BoxList</label>
        <link refid="classamrex_1_1BoxList"/>
        <childnode refid="73" relation="usage">
          <edgelabel>m_lbox</edgelabel>
        </childnode>
        <childnode refid="76" relation="usage">
          <edgelabel>btype</edgelabel>
        </childnode>
      </node>
      <node id="35">
        <label>amrex::ArenaInfo</label>
        <link refid="structamrex_1_1ArenaInfo"/>
      </node>
      <node id="89">
        <label>amrex::BATindexType</label>
        <link refid="structamrex_1_1BATindexType"/>
        <childnode refid="76" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
      </node>
      <node id="118">
        <label>amrex::PODVector&lt; amrex::Box &gt;</label>
        <link refid="classamrex_1_1PODVector"/>
        <childnode refid="119" relation="public-inheritance">
        </childnode>
        <childnode refid="75" relation="usage">
          <edgelabel>const_reference</edgelabel>
          <edgelabel>const_iterator</edgelabel>
          <edgelabel>const_pointer</edgelabel>
          <edgelabel>m_data</edgelabel>
        </childnode>
      </node>
      <node id="74">
        <label>std::vector&lt; amrex::Box, std::allocator&lt; amrex::Box &gt; &gt;</label>
        <childnode refid="8" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="112">
        <label>amrex::Vector&lt; amrex::NeighborParticleContainer::NeighborCommTag &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="113" relation="public-inheritance">
        </childnode>
      </node>
      <node id="127">
        <label>amrex::PODVector&lt; std::size_t &gt;</label>
        <link refid="classamrex_1_1PODVector"/>
        <childnode refid="128" relation="public-inheritance">
        </childnode>
      </node>
      <node id="18">
        <label>std::vector&lt; Long, std::allocator&lt; Long &gt; &gt;</label>
        <childnode refid="8" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="42">
        <label>std::map&lt; int, amrex::Vector&lt; char &gt; &gt;</label>
        <childnode refid="43" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="91">
        <label>amrex::BATindexType_coarsenRatio</label>
        <link refid="structamrex_1_1BATindexType__coarsenRatio"/>
        <childnode refid="30" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
        </childnode>
        <childnode refid="76" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
      </node>
      <node id="108">
        <label>std::unique_ptr&lt; amrex::IFABio &gt;</label>
        <childnode refid="109" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="65">
        <label>K</label>
      </node>
      <node id="90">
        <label>amrex::BATnull</label>
        <link refid="structamrex_1_1BATnull"/>
      </node>
      <node id="128">
        <label>std::allocator&lt; std::size_t &gt;</label>
        <childnode refid="8" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="30">
        <label>amrex::IntVect</label>
        <link refid="classamrex_1_1IntVect"/>
        <childnode refid="30" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>T</label>
      </node>
      <node id="62">
        <label>amrex::FabArrayBase::CommMetaData</label>
        <link refid="structamrex_1_1FabArrayBase_1_1CommMetaData"/>
        <childnode refid="63" relation="usage">
          <edgelabel>m_RcvTags</edgelabel>
          <edgelabel>m_SndTags</edgelabel>
        </childnode>
        <childnode refid="66" relation="usage">
          <edgelabel>m_LocTags</edgelabel>
        </childnode>
      </node>
      <node id="117">
        <label>std::map&lt; int, amrex::PODVector&lt; amrex::Box &gt; &gt;</label>
        <childnode refid="118" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="26">
        <label>std::map&lt; int, amrex::PODVector&lt; amrex::NeighborCode &gt; &gt;</label>
        <childnode refid="27" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="45">
        <label>amrex::Vector&lt; std::map&lt; PairIndex, ParticleTile &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="46" relation="public-inheritance">
        </childnode>
      </node>
      <node id="28">
        <label>std::allocator&lt; amrex::NeighborCode &gt;</label>
        <childnode refid="8" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="24">
        <label>amrex::Vector&lt; std::map&lt; std::pair&lt; int, int &gt;, amrex::NeighborList&lt; ParticleType &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="25" relation="public-inheritance">
        </childnode>
      </node>
      <node id="105">
        <label>std::vector&lt; IArrayBox * &gt;</label>
        <childnode refid="106" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="135">
        <label>std::vector&lt; std::map&lt; PairIndex, IntVector &gt;, std::allocator&lt; std::map&lt; PairIndex, IntVector &gt; &gt; &gt;</label>
        <childnode refid="8" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="67">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="8" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="95">
        <label>amrex::Vector&lt; MPI_Request &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="96" relation="public-inheritance">
        </childnode>
      </node>
      <node id="103">
        <label>amrex::MultiArray4&lt; value_type &gt;</label>
        <link refid="structamrex_1_1MultiArray4"/>
        <childnode refid="104" relation="usage">
          <edgelabel>hp</edgelabel>
          <edgelabel>dp</edgelabel>
        </childnode>
      </node>
      <node id="98">
        <label>std::unique_ptr&lt; amrex::FBData&lt; IArrayBox &gt; &gt;</label>
        <childnode refid="99" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="71">
        <label>std::unordered_map&lt; IntVect, std::vector&lt; int &gt;, IntVect::shift_hasher &gt;</label>
        <childnode refid="30" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="72" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="56">
        <label>amrex::DataAllocator</label>
        <link refid="structamrex_1_1DataAllocator"/>
        <childnode refid="34" relation="usage">
          <edgelabel>m_arena</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>amrex::Particle&lt; T_NReal, T_NInt &gt;</label>
        <link refid="structamrex_1_1Particle"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="52">
        <label>amrex::MultiArray4&lt; value_type const &gt;</label>
        <link refid="structamrex_1_1MultiArray4"/>
        <childnode refid="53" relation="usage">
          <edgelabel>hp</edgelabel>
          <edgelabel>dp</edgelabel>
        </childnode>
      </node>
      <node id="12">
        <label>std::vector&lt; std::string, std::allocator&lt; std::string &gt; &gt;</label>
        <childnode refid="8" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="104">
        <label>amrex::Array4&lt; value_type &gt;</label>
        <link refid="structamrex_1_1Array4"/>
        <childnode refid="54" relation="usage">
          <edgelabel>begin</edgelabel>
          <edgelabel>end</edgelabel>
        </childnode>
      </node>
      <node id="37">
        <label>std::vector&lt; std::map&lt; std::pair&lt; int, int &gt;, amrex::PODVector&lt; int &gt; &gt;, std::allocator&lt; std::map&lt; std::pair&lt; int, int &gt;, amrex::PODVector&lt; int &gt; &gt; &gt; &gt;</label>
        <childnode refid="8" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="22">
        <label>amrex::Vector&lt; amrex::Vector&lt; int &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="23" relation="public-inheritance">
        </childnode>
      </node>
      <node id="64">
        <label>std::map&lt; K, T &gt;</label>
        <childnode refid="65" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="119">
        <label>std::allocator&lt; amrex::Box &gt;</label>
        <childnode refid="8" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="34">
        <label>amrex::Arena</label>
        <link refid="classamrex_1_1Arena"/>
        <childnode refid="35" relation="usage">
          <edgelabel>arena_info</edgelabel>
        </childnode>
      </node>
      <node id="13">
        <label>amrex::Vector&lt; int &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="14" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>amrex::ParticleContainer&lt; NStructReal, NStructInt, 0, 0 &gt;</label>
        <link refid="classamrex_1_1ParticleContainer"/>
        <childnode refid="3" relation="usage">
          <edgelabel>m_bins</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>wherePrePost</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>filePrefixPrePost</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>h_redistribute_int_comp</edgelabel>
          <edgelabel>h_redistribute_real_comp</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>HdrFileNamePrePost</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>nParticlesAtLevelPrePost</edgelabel>
        </childnode>
        <childnode refid="19" relation="usage">
          <edgelabel>ParticleRealDescriptor</edgelabel>
        </childnode>
        <childnode refid="20" relation="usage">
          <edgelabel>m_particles</edgelabel>
        </childnode>
        <childnode refid="22" relation="usage">
          <edgelabel>whichPrePost</edgelabel>
          <edgelabel>countPrePost</edgelabel>
        </childnode>
      </node>
      <node id="92">
        <label>amrex::Periodicity</label>
        <link refid="classamrex_1_1Periodicity"/>
        <childnode refid="30" relation="usage">
          <edgelabel>period</edgelabel>
        </childnode>
      </node>
      <node id="94">
        <label>std::vector&lt; char *, std::allocator&lt; char * &gt; &gt;</label>
        <childnode refid="8" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="38">
        <label>amrex::Vector&lt; std::map&lt; PairIndex, amrex::Vector&lt; amrex::Vector&lt; amrex::NeighborParticleContainer::NeighborCopyTag &gt; &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="39" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>std::vector&lt; amrex::Vector&lt; Long &gt;, std::allocator&lt; amrex::Vector&lt; Long &gt; &gt; &gt;</label>
        <childnode refid="8" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="87">
        <label>amrex::Orientation</label>
        <link refid="classamrex_1_1Orientation"/>
      </node>
      <node id="70">
        <label>amrex::BARef</label>
        <link refid="structamrex_1_1BARef"/>
        <childnode refid="30" relation="usage">
          <edgelabel>crsn</edgelabel>
        </childnode>
        <childnode refid="71" relation="usage">
          <edgelabel>hash</edgelabel>
        </childnode>
        <childnode refid="73" relation="usage">
          <edgelabel>m_abox</edgelabel>
        </childnode>
        <childnode refid="75" relation="usage">
          <edgelabel>bbox</edgelabel>
        </childnode>
      </node>
      <node id="99">
        <label>amrex::FBData&lt; IArrayBox &gt;</label>
        <link refid="structamrex_1_1FBData"/>
        <childnode refid="59" relation="usage">
          <edgelabel>recv_size</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>recv_from</edgelabel>
        </childnode>
        <childnode refid="93" relation="usage">
          <edgelabel>recv_data</edgelabel>
          <edgelabel>send_data</edgelabel>
        </childnode>
        <childnode refid="100" relation="usage">
          <edgelabel>recv_stat</edgelabel>
        </childnode>
        <childnode refid="95" relation="usage">
          <edgelabel>send_reqs</edgelabel>
          <edgelabel>recv_reqs</edgelabel>
        </childnode>
        <childnode refid="102" relation="usage">
          <edgelabel>fb</edgelabel>
        </childnode>
      </node>
      <node id="137">
        <label>std::vector&lt; std::map&lt; PairIndex, amrex::Vector&lt; amrex::NeighborParticleContainer::InverseCopyTag &gt; &gt;, std::allocator&lt; std::map&lt; PairIndex, amrex::Vector&lt; amrex::NeighborParticleContainer::InverseCopyTag &gt; &gt; &gt; &gt;</label>
        <childnode refid="8" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="102">
        <label>amrex::FabArrayBase::FB</label>
        <link refid="structamrex_1_1FabArrayBase_1_1FB"/>
        <childnode refid="62" relation="public-inheritance">
        </childnode>
        <childnode refid="30" relation="usage">
          <edgelabel>m_ngrow</edgelabel>
          <edgelabel>m_crse_ratio</edgelabel>
        </childnode>
        <childnode refid="76" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
        <childnode refid="92" relation="usage">
          <edgelabel>m_period</edgelabel>
        </childnode>
      </node>
      <node id="25">
        <label>std::vector&lt; std::map&lt; std::pair&lt; int, int &gt;, amrex::NeighborList&lt; ParticleType &gt; &gt;, std::allocator&lt; std::map&lt; std::pair&lt; int, int &gt;, amrex::NeighborList&lt; ParticleType &gt; &gt; &gt; &gt;</label>
        <childnode refid="8" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="93">
        <label>amrex::Vector&lt; char * &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="94" relation="public-inheritance">
        </childnode>
      </node>
      <node id="33">
        <label>amrex::ArenaAllocatorTraits</label>
        <link refid="structamrex_1_1ArenaAllocatorTraits"/>
      </node>
      <node id="84">
        <label>amrex::BATransformer</label>
        <link refid="structamrex_1_1BATransformer"/>
        <childnode refid="85" relation="usage">
          <edgelabel>m_op</edgelabel>
        </childnode>
      </node>
      <node id="39">
        <label>std::vector&lt; std::map&lt; PairIndex, amrex::Vector&lt; amrex::Vector&lt; amrex::NeighborParticleContainer::NeighborCopyTag &gt; &gt; &gt;, std::allocator&lt; std::map&lt; PairIndex, amrex::Vector&lt; amrex::Vector&lt; amrex::NeighborParticleContainer::NeighborCopyTag &gt; &gt; &gt; &gt; &gt;</label>
        <childnode refid="8" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="41">
        <label>std::allocator&lt; char &gt;</label>
        <childnode refid="8" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="32">
        <label>amrex::PolymorphicArenaAllocator&lt; char &gt;</label>
        <link refid="classamrex_1_1PolymorphicArenaAllocator"/>
        <childnode refid="33" relation="public-inheritance">
        </childnode>
        <childnode refid="34" relation="usage">
          <edgelabel>m_arena</edgelabel>
        </childnode>
      </node>
      <node id="132">
        <label>amrex::Vector&lt; std::map&lt; int, amrex::PODVector&lt; amrex::IntVect &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="133" relation="public-inheritance">
        </childnode>
      </node>
      <node id="113">
        <label>std::vector&lt; amrex::NeighborParticleContainer::NeighborCommTag, std::allocator&lt; amrex::NeighborParticleContainer::NeighborCommTag &gt; &gt;</label>
        <childnode refid="8" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="88">
        <label>amrex::BATcoarsenRatio</label>
        <link refid="structamrex_1_1BATcoarsenRatio"/>
        <childnode refid="30" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
        </childnode>
      </node>
      <node id="97">
        <label>amrex::FabArray&lt; FAB &gt;::ShMem</label>
        <link refid="structamrex_1_1FabArray_1_1ShMem"/>
      </node>
      <node id="21">
        <label>std::vector&lt; ParticleLevel, std::allocator&lt; ParticleLevel &gt; &gt;</label>
        <childnode refid="8" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="130">
        <label>std::vector&lt; std::vector&lt; amrex::NeighborCode &gt; &gt;</label>
      </node>
      <node id="123">
        <label>amrex::PODVector&lt; unsigned int &gt;</label>
        <link refid="classamrex_1_1PODVector"/>
        <childnode refid="124" relation="public-inheritance">
        </childnode>
      </node>
      <node id="125">
        <label>amrex::Vector&lt; std::map&lt; int, amrex::PODVector&lt; int &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="126" relation="public-inheritance">
        </childnode>
      </node>
      <node id="85">
        <label>amrex::BATransformer::BATOp</label>
        <link refid="unionamrex_1_1BATransformer_1_1BATOp"/>
        <childnode refid="86" relation="usage">
          <edgelabel>m_bndryReg</edgelabel>
        </childnode>
        <childnode refid="88" relation="usage">
          <edgelabel>m_coarsenRatio</edgelabel>
        </childnode>
        <childnode refid="89" relation="usage">
          <edgelabel>m_indexType</edgelabel>
        </childnode>
        <childnode refid="90" relation="usage">
          <edgelabel>m_null</edgelabel>
        </childnode>
        <childnode refid="91" relation="usage">
          <edgelabel>m_indexType_coarsenRatio</edgelabel>
        </childnode>
      </node>
      <node id="61">
        <label>amrex::FabArrayBase::CPC</label>
        <link refid="structamrex_1_1FabArrayBase_1_1CPC"/>
        <childnode refid="62" relation="public-inheritance">
        </childnode>
        <childnode refid="30" relation="usage">
          <edgelabel>m_srcng</edgelabel>
          <edgelabel>m_dstng</edgelabel>
        </childnode>
        <childnode refid="68" relation="usage">
          <edgelabel>m_dstbdk</edgelabel>
          <edgelabel>m_srcbdk</edgelabel>
        </childnode>
        <childnode refid="80" relation="usage">
          <edgelabel>m_srcba</edgelabel>
          <edgelabel>m_dstba</edgelabel>
        </childnode>
        <childnode refid="92" relation="usage">
          <edgelabel>m_period</edgelabel>
        </childnode>
      </node>
      <node id="134">
        <label>amrex::Vector&lt; std::map&lt; PairIndex, IntVector &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="135" relation="public-inheritance">
        </childnode>
      </node>
      <node id="36">
        <label>amrex::Vector&lt; std::map&lt; std::pair&lt; int, int &gt;, amrex::PODVector&lt; int &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="37" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>std::allocator&lt; index_type &gt;</label>
        <childnode refid="8" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="54">
        <label>amrex::Dim3</label>
        <link refid="structamrex_1_1Dim3"/>
      </node>
      <node id="9">
        <label>amrex::Vector&lt; amrex::Vector&lt; Long &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="10" relation="public-inheritance">
        </childnode>
      </node>
      <node id="16">
        <label>std::basic_string&lt; char &gt;</label>
      </node>
      <node id="43">
        <label>amrex::Vector&lt; char &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="44" relation="public-inheritance">
        </childnode>
      </node>
      <node id="96">
        <label>std::vector&lt; MPI_Request, std::allocator&lt; MPI_Request &gt; &gt;</label>
        <childnode refid="8" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="136">
        <label>amrex::Vector&lt; std::map&lt; PairIndex, amrex::Vector&lt; amrex::NeighborParticleContainer::InverseCopyTag &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="137" relation="public-inheritance">
        </childnode>
      </node>
      <node id="14">
        <label>std::vector&lt; int, std::allocator&lt; int &gt; &gt;</label>
        <childnode refid="8" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="55">
        <label>std::unique_ptr&lt; amrex::FabArray&lt; IArrayBox &gt; &gt;</label>
        <childnode refid="49" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="49">
        <label>amrex::FabArray&lt; IArrayBox &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="50" relation="usage">
          <edgelabel>m_factory</edgelabel>
        </childnode>
        <childnode refid="52" relation="usage">
          <edgelabel>m_const_arrays</edgelabel>
        </childnode>
        <childnode refid="55" relation="usage">
          <edgelabel>os_temp</edgelabel>
        </childnode>
        <childnode refid="56" relation="usage">
          <edgelabel>m_dallocator</edgelabel>
        </childnode>
        <childnode refid="57" relation="usage">
          <edgelabel>pcd</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>m_tags</edgelabel>
        </childnode>
        <childnode refid="97" relation="usage">
          <edgelabel>shmem</edgelabel>
        </childnode>
        <childnode refid="98" relation="usage">
          <edgelabel>fbd</edgelabel>
        </childnode>
        <childnode refid="103" relation="usage">
          <edgelabel>m_arrays</edgelabel>
        </childnode>
        <childnode refid="105" relation="usage">
          <edgelabel>m_fabs_v</edgelabel>
        </childnode>
      </node>
      <node id="80">
        <label>amrex::BoxArray</label>
        <link refid="classamrex_1_1BoxArray"/>
        <childnode refid="81" relation="usage">
          <edgelabel>m_ref</edgelabel>
        </childnode>
        <childnode refid="82" relation="usage">
          <edgelabel>m_simplified_list</edgelabel>
        </childnode>
        <childnode refid="84" relation="usage">
          <edgelabel>m_bat</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>amrex::PODVector&lt; index_type &gt;</label>
        <link refid="classamrex_1_1PODVector"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="27">
        <label>amrex::PODVector&lt; amrex::NeighborCode &gt;</label>
        <link refid="classamrex_1_1PODVector"/>
        <childnode refid="28" relation="public-inheritance">
        </childnode>
        <childnode refid="29" relation="usage">
          <edgelabel>const_reference</edgelabel>
          <edgelabel>const_iterator</edgelabel>
          <edgelabel>const_pointer</edgelabel>
          <edgelabel>m_data</edgelabel>
        </childnode>
      </node>
      <node id="53">
        <label>amrex::Array4&lt; value_type const &gt;</label>
        <link refid="structamrex_1_1Array4"/>
        <childnode refid="54" relation="usage">
          <edgelabel>begin</edgelabel>
          <edgelabel>end</edgelabel>
        </childnode>
      </node>
      <node id="47">
        <label>std::unique_ptr&lt; amrex::iMultiFab &gt;</label>
        <childnode refid="48" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="19">
        <label>amrex::RealDescriptor</label>
        <link refid="classamrex_1_1RealDescriptor"/>
        <childnode refid="13" relation="usage">
          <edgelabel>ord</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>fr</edgelabel>
        </childnode>
      </node>
      <node id="75">
        <label>amrex::Box</label>
        <link refid="classamrex_1_1Box"/>
        <childnode refid="30" relation="usage">
          <edgelabel>bigend</edgelabel>
          <edgelabel>smallend</edgelabel>
        </childnode>
        <childnode refid="76" relation="usage">
          <edgelabel>btype</edgelabel>
        </childnode>
      </node>
      <node id="110">
        <label>amrex::Vector&lt; std::unique_ptr&lt; amrex::iMultiFab &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="111" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>amrex::ParticleBase&lt; ParticleReal, T_NReal, 0 &gt;</label>
        <link refid="structamrex_1_1ParticleBase"/>
      </node>
      <node id="106">
        <label>amrex::IArrayBox</label>
        <link refid="classamrex_1_1IArrayBox"/>
        <childnode refid="107" relation="public-inheritance">
        </childnode>
        <childnode refid="108" relation="usage">
          <edgelabel>ifabio</edgelabel>
        </childnode>
      </node>
      <node id="81">
        <label>std::shared_ptr&lt; amrex::BARef &gt;</label>
        <childnode refid="70" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="129">
        <label>std::map&lt; int, std::vector&lt; std::vector&lt; amrex::NeighborCode &gt; &gt; &gt;</label>
        <childnode refid="130" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="77">
        <label>amrex::DistributionMapping::RefID</label>
        <link refid="structamrex_1_1DistributionMapping_1_1RefID"/>
        <childnode refid="78" relation="usage">
          <edgelabel>data</edgelabel>
        </childnode>
      </node>
      <node id="50">
        <label>std::unique_ptr&lt; amrex::FabFactory&lt; IArrayBox &gt; &gt;</label>
        <childnode refid="51" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="100">
        <label>amrex::Vector&lt; MPI_Status &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="101" relation="public-inheritance">
        </childnode>
      </node>
      <node id="86">
        <label>amrex::BATbndryReg</label>
        <link refid="structamrex_1_1BATbndryReg"/>
        <childnode refid="30" relation="usage">
          <edgelabel>m_doihi</edgelabel>
          <edgelabel>m_doilo</edgelabel>
          <edgelabel>m_hishft</edgelabel>
          <edgelabel>m_crse_ratio</edgelabel>
          <edgelabel>m_loshft</edgelabel>
        </childnode>
        <childnode refid="87" relation="usage">
          <edgelabel>m_face</edgelabel>
        </childnode>
        <childnode refid="76" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
      </node>
      <node id="31">
        <label>amrex::PODVector&lt; char, amrex::PolymorphicArenaAllocator&lt; char &gt; &gt;</label>
        <link refid="classamrex_1_1PODVector"/>
        <childnode refid="32" relation="public-inheritance">
        </childnode>
      </node>
      <node id="40">
        <label>amrex::PODVector&lt; char &gt;</label>
        <link refid="classamrex_1_1PODVector"/>
        <childnode refid="41" relation="public-inheritance">
        </childnode>
      </node>
      <node id="17">
        <label>amrex::Vector&lt; Long &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="18" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>amrex::NeighborParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;</label>
        <link refid="classamrex_1_1NeighborParticleContainer"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="24" relation="usage">
          <edgelabel>m_neighbor_list</edgelabel>
        </childnode>
        <childnode refid="26" relation="usage">
          <edgelabel>m_code_array</edgelabel>
        </childnode>
        <childnode refid="31" relation="usage">
          <edgelabel>snd_buffer</edgelabel>
        </childnode>
        <childnode refid="36" relation="usage">
          <edgelabel>m_boundary_particle_ids</edgelabel>
        </childnode>
        <childnode refid="38" relation="usage">
          <edgelabel>buffer_tag_cache</edgelabel>
        </childnode>
        <childnode refid="40" relation="usage">
          <edgelabel>pinned_snd_buffer</edgelabel>
          <edgelabel>rcv_buffer</edgelabel>
          <edgelabel>pinned_rcv_buffer</edgelabel>
        </childnode>
        <childnode refid="42" relation="usage">
          <edgelabel>send_data</edgelabel>
        </childnode>
        <childnode refid="45" relation="usage">
          <edgelabel>neighbors</edgelabel>
        </childnode>
        <childnode refid="47" relation="usage">
          <edgelabel>m_neighbor_mask_ptr</edgelabel>
        </childnode>
        <childnode refid="110" relation="usage">
          <edgelabel>mask_ptr</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>ghost_int_comp</edgelabel>
          <edgelabel>neighbor_procs</edgelabel>
          <edgelabel>ghost_real_comp</edgelabel>
        </childnode>
        <childnode refid="112" relation="usage">
          <edgelabel>local_neighbors</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>rcvs</edgelabel>
        </childnode>
        <childnode refid="114" relation="usage">
          <edgelabel>m_code_offsets</edgelabel>
        </childnode>
        <childnode refid="117" relation="usage">
          <edgelabel>m_isec_boxes</edgelabel>
        </childnode>
        <childnode refid="120" relation="usage">
          <edgelabel>local_neighbor_sizes</edgelabel>
        </childnode>
        <childnode refid="122" relation="usage">
          <edgelabel>neighbor_copy_plan</edgelabel>
        </childnode>
        <childnode refid="129" relation="usage">
          <edgelabel>m_grid_map</edgelabel>
        </childnode>
        <childnode refid="131" relation="usage">
          <edgelabel>neighbor_copy_op</edgelabel>
        </childnode>
        <childnode refid="134" relation="usage">
          <edgelabel>neighbor_list</edgelabel>
        </childnode>
        <childnode refid="136" relation="usage">
          <edgelabel>inverse_tags</edgelabel>
        </childnode>
      </node>
      <node id="115">
        <label>amrex::PODVector&lt; int &gt;</label>
        <link refid="classamrex_1_1PODVector"/>
        <childnode refid="116" relation="public-inheritance">
        </childnode>
      </node>
      <node id="109">
        <label>amrex::IFABio</label>
        <link refid="classamrex_1_1IFABio"/>
      </node>
      <node id="63">
        <label>std::unique_ptr&lt; MapOfCopyComTagContainers &gt;</label>
        <childnode refid="64" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="126">
        <label>std::vector&lt; std::map&lt; int, amrex::PODVector&lt; int &gt; &gt;, std::allocator&lt; std::map&lt; int, amrex::PODVector&lt; int &gt; &gt; &gt; &gt;</label>
        <childnode refid="8" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="131">
        <label>amrex::ParticleCopyOp</label>
        <link refid="structamrex_1_1ParticleCopyOp"/>
        <childnode refid="125" relation="usage">
          <edgelabel>m_levels</edgelabel>
          <edgelabel>m_boxes</edgelabel>
          <edgelabel>m_src_indices</edgelabel>
        </childnode>
        <childnode refid="132" relation="usage">
          <edgelabel>m_periodic_shift</edgelabel>
        </childnode>
      </node>
      <node id="29">
        <label>amrex::NeighborCode</label>
        <link refid="structamrex_1_1NeighborCode"/>
        <childnode refid="30" relation="usage">
          <edgelabel>periodic_shift</edgelabel>
        </childnode>
      </node>
      <node id="76">
        <label>amrex::IndexType</label>
        <link refid="classamrex_1_1IndexType"/>
      </node>
      <node id="116">
        <label>std::allocator&lt; int &gt;</label>
        <childnode refid="8" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="78">
        <label>amrex::DistributionMapping::Ref</label>
        <link refid="structamrex_1_1DistributionMapping_1_1Ref"/>
        <childnode refid="13" relation="usage">
          <edgelabel>m_index_array</edgelabel>
          <edgelabel>m_pmap</edgelabel>
        </childnode>
        <childnode refid="79" relation="usage">
          <edgelabel>m_ownership</edgelabel>
        </childnode>
      </node>
      <node id="11">
        <label>amrex::Vector&lt; std::string &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="12" relation="public-inheritance">
        </childnode>
      </node>
      <node id="114">
        <label>std::map&lt; int, amrex::PODVector&lt; int &gt; &gt;</label>
        <childnode refid="115" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="57">
        <label>std::unique_ptr&lt; amrex::PCData&lt; IArrayBox &gt; &gt;</label>
        <childnode refid="58" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="68">
        <label>amrex::FabArrayBase::BDKey</label>
        <link refid="structamrex_1_1FabArrayBase_1_1BDKey"/>
        <childnode refid="69" relation="usage">
          <edgelabel>m_ba_id</edgelabel>
        </childnode>
        <childnode refid="77" relation="usage">
          <edgelabel>m_dm_id</edgelabel>
        </childnode>
      </node>
      <node id="79">
        <label>std::vector&lt; bool &gt;</label>
      </node>
      <node id="133">
        <label>std::vector&lt; std::map&lt; int, amrex::PODVector&lt; amrex::IntVect &gt; &gt;, std::allocator&lt; std::map&lt; int, amrex::PODVector&lt; amrex::IntVect &gt; &gt; &gt; &gt;</label>
        <childnode refid="8" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="111">
        <label>std::vector&lt; std::unique_ptr&lt; amrex::iMultiFab &gt;, std::allocator&lt; std::unique_ptr&lt; amrex::iMultiFab &gt; &gt; &gt;</label>
        <childnode refid="8" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="20">
        <label>amrex::Vector&lt; ParticleLevel &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="21" relation="public-inheritance">
        </childnode>
      </node>
      <node id="82">
        <label>std::shared_ptr&lt; amrex::BoxList &gt;</label>
        <childnode refid="83" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="51">
        <label>amrex::FabFactory&lt; IArrayBox &gt;</label>
        <link refid="classamrex_1_1FabFactory"/>
      </node>
      <node id="3">
        <label>amrex::DenseBins&lt; amrex::Particle &gt;</label>
        <link refid="classamrex_1_1DenseBins"/>
        <childnode refid="4" relation="usage">
          <edgelabel>m_items</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>m_counts</edgelabel>
          <edgelabel>m_perm</edgelabel>
          <edgelabel>m_local_offsets</edgelabel>
          <edgelabel>m_offsets</edgelabel>
          <edgelabel>m_bins</edgelabel>
        </childnode>
      </node>
      <node id="23">
        <label>std::vector&lt; amrex::Vector&lt; int &gt;, std::allocator&lt; amrex::Vector&lt; int &gt; &gt; &gt;</label>
        <childnode refid="8" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="59">
        <label>amrex::Vector&lt; std::size_t &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="60" relation="public-inheritance">
        </childnode>
      </node>
      <node id="69">
        <label>amrex::BoxArray::RefID</label>
        <link refid="structamrex_1_1BoxArray_1_1RefID"/>
        <childnode refid="70" relation="usage">
          <edgelabel>data</edgelabel>
        </childnode>
      </node>
      <node id="73">
        <label>amrex::Vector&lt; amrex::Box &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="74" relation="public-inheritance">
        </childnode>
      </node>
      <node id="120">
        <label>amrex::Vector&lt; std::map&lt; PairIndex, int &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="121" relation="public-inheritance">
        </childnode>
      </node>
      <node id="60">
        <label>std::vector&lt; std::size_t, std::allocator&lt; std::size_t &gt; &gt;</label>
        <childnode refid="8" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="72">
        <label>std::vector&lt; int &gt;</label>
      </node>
      <node id="58">
        <label>amrex::PCData&lt; IArrayBox &gt;</label>
        <link refid="structamrex_1_1PCData"/>
        <childnode refid="59" relation="usage">
          <edgelabel>recv_size</edgelabel>
        </childnode>
        <childnode refid="61" relation="usage">
          <edgelabel>cpc</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>recv_from</edgelabel>
        </childnode>
        <childnode refid="93" relation="usage">
          <edgelabel>recv_data</edgelabel>
        </childnode>
        <childnode refid="49" relation="usage">
          <edgelabel>src</edgelabel>
        </childnode>
        <childnode refid="95" relation="usage">
          <edgelabel>send_reqs</edgelabel>
          <edgelabel>recv_reqs</edgelabel>
        </childnode>
      </node>
      <node id="122">
        <label>amrex::ParticleCopyPlan</label>
        <link refid="structamrex_1_1ParticleCopyPlan"/>
        <childnode refid="59" relation="usage">
          <edgelabel>m_snd_pad_correction_h</edgelabel>
          <edgelabel>m_snd_offsets</edgelabel>
          <edgelabel>m_rOffset</edgelabel>
          <edgelabel>m_snd_counts</edgelabel>
          <edgelabel>m_rcv_pad_correction_h</edgelabel>
        </childnode>
        <childnode refid="123" relation="usage">
          <edgelabel>m_box_offsets</edgelabel>
          <edgelabel>m_box_counts_h</edgelabel>
          <edgelabel>m_box_counts_d</edgelabel>
        </childnode>
        <childnode refid="125" relation="usage">
          <edgelabel>m_dst_indices</edgelabel>
        </childnode>
        <childnode refid="115" relation="usage">
          <edgelabel>m_rcv_data</edgelabel>
          <edgelabel>d_real_comp_mask</edgelabel>
          <edgelabel>d_int_comp_mask</edgelabel>
        </childnode>
        <childnode refid="127" relation="usage">
          <edgelabel>m_snd_pad_correction_d</edgelabel>
          <edgelabel>m_rcv_pad_correction_d</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>m_rcv_box_ids</edgelabel>
          <edgelabel>m_rcv_box_counts</edgelabel>
          <edgelabel>m_rcv_box_pids</edgelabel>
          <edgelabel>m_RcvProc</edgelabel>
          <edgelabel>m_rcv_box_offsets</edgelabel>
          <edgelabel>m_rcv_box_levs</edgelabel>
          <edgelabel>m_neighbor_procs</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>m_Rcvs</edgelabel>
          <edgelabel>m_Snds</edgelabel>
          <edgelabel>m_rcv_num_particles</edgelabel>
          <edgelabel>m_snd_num_particles</edgelabel>
        </childnode>
        <childnode refid="100" relation="usage">
          <edgelabel>m_particle_stats</edgelabel>
          <edgelabel>m_build_stats</edgelabel>
        </childnode>
        <childnode refid="95" relation="usage">
          <edgelabel>m_build_rreqs</edgelabel>
          <edgelabel>m_particle_rreqs</edgelabel>
        </childnode>
      </node>
      <node id="15">
        <label>std::string</label>
        <childnode refid="16" relation="public-inheritance">
        </childnode>
      </node>
      <node id="66">
        <label>std::unique_ptr&lt; CopyComTagsContainer &gt;</label>
        <childnode refid="67" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" line="35" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborParticles.H" bodystart="33" bodyend="474"/>
    <listofallmembers>
      <member refid="classamrex_1_1NeighborParticleContainer_1a495d805bcf68681c718d5316bac80c07" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>AddIntComp</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a15a0822c8e9ab7e6e1c81fd57945b2e1" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>addParticles</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a690524574f10b59f9171c7c71f9f0896" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>addParticles</name></member>
      <member refid="classamrex_1_1ParticleContainer_1ac7b7f0e1b59f64943f3fbb57642b027f" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>addParticles</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a579c73fe0e3815a17b0cb7136a5d3788" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>addParticles</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a5e496eb6c5eb9044efccf3405802d0ab" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>AddParticlesAtLevel</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a1e5edb9dcc7ecd29dda29c2f11b219c6" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>AddParticlesAtLevel</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1a394a5717e0621cf4e2250d432950cd8a" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>AddRealComp</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a9995e5d70eb54ec2ce181516897c3d7e" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>AllocatorType</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1a41c79512efbfbf1a4145948c6a680d5c" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>AoS</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1a1be3305131595afe235881caad842d14" prot="protected" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>areMasksValid</name></member>
      <member refid="classamrex_1_1ParticleContainer_1acc4644f70b3a2b0774d2643061c1e627" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>AssignCellDensitySingleLevel</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a9cf5606a50223dbd69895cb4e2fb6a6a" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>AssignDensity</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1a82a5acd18d78404acab9c6f310411369" prot="protected" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>buffer_tag_cache</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1af79112d043b45868fb00cf720d61b0a5" prot="protected" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>BuildMasks</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1a429842d84ae93439634d8953d71b63bf" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>buildNeighborCopyOp</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1ab3f15c1b66190b5ff6d895d6ab0b63e2" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>buildNeighborList</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1a5253547af8cc34bf092433fff36ccddb" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>buildNeighborList</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1a099c7b4442243afbac09ed42e80e9774" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>buildNeighborList</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1a28c398b503c3b86556754980e739cd0f" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>buildNeighborList</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1ad01b79b58df596f16982763a74e34d70" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>buildNeighborMask</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a8b99d8d6636ac0957e6274f36b2d44f7" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>ByteSpread</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1a497db0eca21eb270f545e60f034aeb6a" prot="protected" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>cacheNeighborInfo</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1a9fea3b7765226c9483a81c772e3cfcd0" prot="protected" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>calcCommSize</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1a0bc1ebc16494317aa1ee91983ac667e4" prot="protected" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>cdata_size</name></member>
      <member refid="classamrex_1_1ParticleContainer_1ae7412e40e001b22e79674559db78518c" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>CharVector</name></member>
      <member refid="classamrex_1_1ParticleContainer_1ad86b6f93d8e1ead1ab4137b949371ea1" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>Checkpoint</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a5df9334c2851642312c784c5e218c2b6" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>Checkpoint</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a56a586c50e7e206bc8b6fe4e42236ab5" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>CheckpointPost</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a0e505f93fc9e92c5de2b23f240b5e8e9" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>CheckpointPre</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1a287e510b67bfbb6bd4d500e5281e3329" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>clearNeighbors</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1acfd5f04cd8c4ccc1624a2800908ab823" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>clearNeighborsGPU</name></member>
      <member refid="classamrex_1_1ParticleContainer_1ae3e43a24a2d123987dff0e247386eca6" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>clearParticles</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1a9ceb44fa50f3d21117cd9f180ca28eb0" prot="protected" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>computeRefFac</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a2884856a939480e912f0745fa196abee" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>ContainerLike</name></member>
      <member refid="classamrex_1_1ParticleContainer_1aa439adf0d7c6d4d2b0ab1e69b3f953f2" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>copyParticles</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a0c78636f51794b4a1278b7ec2fb228d4" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>copyParticles</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a8ddf335f9303483f96b8d877f3ca0880" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>copyParticles</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a997ff34394c4e94d45f35a8d096ad68c" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>copyParticles</name></member>
      <member refid="classamrex_1_1ParticleContainer_1aed1e16087eecd5c4a580c3355b2c34e3" prot="private" virt="virtual"><scope>amrex::NeighborParticleContainer</scope><name>correctCellVectors</name></member>
      <member refid="classamrex_1_1ParticleContainer_1aad53a5d113c1421b521daa8597d812f5" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>countPrePost</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a9376474a48195407b9ee0f8db7d25027" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>CreateGhostParticles</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a2a8bc552a4b8277581ccca9399a023eb" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>CreateGhostParticles</name></member>
      <member refid="classamrex_1_1ParticleContainer_1af022a8f9d07c1f2c2eb448dfc500bbc8" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>CreateVirtualParticles</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a13c9702fc016f3d6521f173115b94ec2" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>CreateVirtualParticles</name></member>
      <member refid="classamrex_1_1ParticleContainer_1ae4ec7278685f0bdc307a4a5119f3768d" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>Define</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a3b3abd75c81fdb90bd1c0219404f2abb" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>Define</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a5d9a132b45d62f770b786771fd69e959" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>Define</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a85e5cdc6192f3faef023cfae20044f4e" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>Define</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a08836ef61a1fb5f718f5684eeb6a5a2c" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>DefineAndReturnParticleTile</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a86bb7b9d5d63abaaa52210f103b99f49" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>DefineAndReturnParticleTile</name></member>
      <member refid="classamrex_1_1ParticleContainer_1af397a66c3849926e09fd03b1dd1acc1b" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>doUnlink</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1a253931bb13b740bcdf8da45fe68a4591" prot="protected" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>enable_inverse</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1a10946f0902af75ab296818655fa6b388" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>enableInverse</name></member>
      <member refid="classamrex_1_1ParticleContainer_1aea2134948d1fb5fd85656dc6bc1cc3cd" prot="protected" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>EnforcePeriodicWhere</name></member>
      <member refid="classamrex_1_1ParticleContainer_1af0a6de8f8e2b2bf3ce5cdf18d906cdc4" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>filePrefixPrePost</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1a2c1bf28f2552627e93d1587e977dd22a" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>fillNeighbors</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1a4dbc10fb057262215b756a2b4289b33c" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>fillNeighborsGPU</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1af3b5f685680bc88ad15c0f2cd5ee44c8" prot="protected" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>fillNeighborsMPI</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1ace4a68e9536f7e36dd141825cdc04519" prot="protected" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>GetCommTagsBox</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a30fd89965e6fb6402876b7dcfa01f8ca" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>GetLevelDirectoriesCreated</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a8075f4c73f94879be1b12ad173aee797" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>GetMaxNextIDPrePost</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1a01f3711526aa5aff0183fc0eeee6a866" prot="protected" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>GetNeighborCommTags</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1aeac938e58c39ed30aa59d2fd709583dc" prot="protected" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>GetNeighborCommTags</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1a662f2650bebba90cebfd2f314bce4585" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>GetNeighbors</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1a0d80b42fa8c4fa92b49b26301ea8e205" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>GetNeighbors</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1a06c94b36af8bed58f1c6c0b4ad62e182" prot="protected" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>getNeighborTags</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1a98b93307f7df6a29e8e1b84bfdcda458" prot="protected" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>getNeighborTags</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a856d46535b4c90f9ee3fc340d4538614" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>GetNParticlesPrePost</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a09c025ce534ccfa2cd24373e610e515b" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>GetParticles</name></member>
      <member refid="classamrex_1_1ParticleContainer_1adb45c348f51c3f8bdb8ce8d0311f0a68" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>GetParticles</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a68df62514178f380d273bdb2b416546c" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>GetParticles</name></member>
      <member refid="classamrex_1_1ParticleContainer_1ad198a9136fbfb0e6849f9e7bdf45b634" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>GetParticles</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1a78a0bf763811ffa755a8a562f2cdede1" prot="protected" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>getRcvCountsMPI</name></member>
      <member refid="classamrex_1_1ParticleContainer_1aefcf7e48799c62c1b80f3c52d3f3e434" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>GetUsePrePost</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a8ad5cf3e3f03e384ff513c2637416266" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>GetUseUnlink</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1a686b95f083fdf17811b9933e189326db" prot="protected" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>ghost_int_comp</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1abaca3cff5c84aa26d0e6c4a454af00cd" prot="protected" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>ghost_real_comp</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a4bb20f2bc8c95d6b39ab84d0711b5253" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>h_redistribute_int_comp</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a04ea1d50636374a2e6da9dff4dc64226" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>h_redistribute_real_comp</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1a5bde7ea76f99ed274bef3626dc3f833b" prot="protected" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>hasNeighbors</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a5c5bc8d9f109d1b7fa0c5d0a2dce0aad" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>HdrFileNamePrePost</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a4ca25205b38289b99635bca7322ec408" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>Increment</name></member>
      <member refid="classamrex_1_1ParticleContainer_1ae2363a1d5e37bd0c82e95173e378534f" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>IncrementWithTotal</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a889e1d0c3597001efe0ec89d63705218" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>Index</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a889e1d0c3597001efe0ec89d63705218" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>Index</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a6e554af95d9d580b66f94d3b37f99568" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>InitFromAsciiFile</name></member>
      <member refid="classamrex_1_1ParticleContainer_1ade8d11eedc5db1492c0893ac05469599" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>InitFromBinaryFile</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a0df683cd0dda825685b3f80629a4a079" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>InitFromBinaryMetaFile</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a81d71f119e4075192d676f172b8d5fd9" prot="private" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>Initialize</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1a9fc777a6611729b79c56fc8f1782c830" prot="protected" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>initializeCommComps</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a4b0ad0b1f46af2f8c2c0eccce8988d55" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>InitNRandomPerCell</name></member>
      <member refid="classamrex_1_1ParticleContainer_1ad676fea7b20685d691d59c48031c2757" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>InitOnePerCell</name></member>
      <member refid="classamrex_1_1ParticleContainer_1ad326acd6525e2fe2a3a7599b2328cc57" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>InitRandom</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a5acc25ad217c4480c4c38e19d6ef8cf1" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>InitRandomPerBox</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a4cf0720503d5b0d7147b4df5f0770157" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>Interpolate</name></member>
      <member refid="classamrex_1_1ParticleContainer_1ab6fe1354bebdec9053da22c56707dd4d" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>InterpolateSingleLevel</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1a60a40e557410a932b8adc0275a5d019f" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>IntVector</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1ab2ef89d2bc69cbfa4ca8f26175d2ce1c" prot="protected" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>inverse_tags</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a3c0331bb4661f65348efaa7e59b6b9be" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>levelDirectoriesCreated</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1abbb2992e59999ae9c2866da0b90a7378" prot="protected" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>local_neighbor_sizes</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1a36b78bd6fa71f934871cf953892ef4f8" prot="protected" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>local_neighbors</name></member>
      <member refid="classamrex_1_1ParticleContainer_1afd7e9ee344396bfc602657e79be8dbe4" prot="private" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>locateParticle</name></member>
      <member refid="classamrex_1_1ParticleContainer_1acd7f0ad77ca7d383ba1c86815bc83191" prot="protected" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>m_bins</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1a71350435dff09e0768bdc74d0f943655" prot="protected" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>m_boundary_particle_ids</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1adc6fa317f2580d5b4eaf5e7e156694e8" prot="protected" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>m_code_array</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1adc56d3fa06a368656ba30775e6af57d5" prot="protected" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>m_code_offsets</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1a6aafab3c8c1565c5457b08400f0c7984" prot="protected" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>m_grid_map</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1a027a8bd9c7726edd5ab979a6ee716fa8" prot="protected" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>m_has_neighbors</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1a8cec5f0f49ca18e99496c3530716772b" prot="protected" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>m_isec_boxes</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1a739c2408e1c55081d20e737f6bf7ec8f" prot="protected" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>m_neighbor_list</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1a68fedc2fd57b0e5efccdf65617f930ff" prot="protected" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>m_neighbor_mask_initialized</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1a0f3bc83f8fdf1b3468248103a0000a49" prot="protected" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>m_neighbor_mask_ptr</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1a9c12404dedc750595ce4d68731d6fc29" prot="protected" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>m_num_neighbor_cells</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a48886f9e061ef86f4820d5ec9ced3d36" prot="private" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>m_num_runtime_int</name></member>
      <member refid="classamrex_1_1ParticleContainer_1ab9dcae9c6a09bc603f2044989d1ace74" prot="private" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>m_num_runtime_real</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a3fe69cdcf81f6bad55051d89bdd62329" prot="private" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>m_particles</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a8b58bab555b7890689fb5e001c4cd197" prot="private" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>m_runtime_comps_defined</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a213daa43f33bda360b09d1fcb6e9a62b" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>make_alike</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1ad8787f8726e711a8d7a8e0dce3fb8624" prot="protected" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>mask_ptr</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a7f05cc5817ae609dd414fe58e9775b0b" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>maxnextidPrePost</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1a4f7f3ca7bf951e7ec6fce594005694da" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>MyParIter</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a1c40700b0202582a3102befdf84451ae" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>NArrayInt</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a7f4ed428087667aa857bd631b97eb5e6" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>NArrayReal</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1a42b4110915286223007d92bbcf580d89" prot="protected" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>neighbor_copy_op</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1a4057e1a1eaeca59b1c87cec0720343d6" prot="protected" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>neighbor_copy_plan</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1a68d92607a1d43f215ae6af8ff8d3e3af" prot="protected" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>neighbor_list</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1a704c1b5b30612c4f5a09378f0a63b221" prot="protected" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>neighbor_procs</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1ae77c84d55fb9e147fc49a60bd44d42d6" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>NeighborCommMap</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1a43409db639b332ea93f0ad257dc54bc7" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>NeighborListContainerType</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1aec6aa68d7cccf38bf8f2ece89e2e47ad" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>NeighborParticleContainer</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1a04cedff11be23a14eb5b47dfb818695f" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>NeighborParticleContainer</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1a7ce8a903b6da41ecd366aaaa48d6ee9d" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>NeighborParticleContainer</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1adff18120eea0cf9a843f2779fa7afb80" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>NeighborParticleContainer</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1a8e16762fd9648d7b623cff439d75e888" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>NeighborParticleContainer</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1a2db2fa1d27368a0d8f2a783f215cd93b" prot="protected" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>neighbors</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a238a0adb9e543fa2e30a605ba1069e30" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>nOutFilesPrePost</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a61598ca5de5b385950c7d8b6b65e52a9" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>nParticlesAtLevelPrePost</name></member>
      <member refid="classamrex_1_1ParticleContainer_1ac432316e8be4314c8fed30fdbd9f906f" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>nparticlesPrePost</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a0126c339846650d2b30069c08da01fce" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>NStructInt</name></member>
      <member refid="classamrex_1_1ParticleContainer_1ae71c7d35ab833b43cef08cf6aa9944b2" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>NStructReal</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a5e23c21e31da601d9d25c4dceda100a5" prot="private" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>num_int_comm_comps</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1aebe05d83866295fa66cd195bfd2ccc44" prot="protected" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>num_mask_comps</name></member>
      <member refid="classamrex_1_1ParticleContainer_1ae3a3bf13e3cafd9e356fb1c3ddb485cc" prot="private" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>num_real_comm_comps</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1a9c0cf5742a0014b73afe38a75f02534e" prot="protected" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>num_snds</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a12fd544079a9f16e65a4de296b5c2f14" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>NumberOfParticlesAtLevel</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a2829099beff606681731396ac7481f08" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>NumberOfParticlesInGrid</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a910c95ab40f4874412aee9ff9470ac92" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>NumIntComps</name></member>
      <member refid="classamrex_1_1ParticleContainer_1aee9786e29cf06e42c740f713b2628e00" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>numLocalTilesAtLevel</name></member>
      <member refid="classamrex_1_1ParticleContainer_1ac0fe5d8afe82ea857da8657a1831916c" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>NumRealComps</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a37db914362cb2c0215cea00016c7027d" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>NumRuntimeIntComps</name></member>
      <member refid="classamrex_1_1ParticleContainer_1ab242e953519e01e7216df57939e6cc52" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>NumRuntimeRealComps</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a8335f1a4f578b1c704a861c015161630" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>OK</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1af2dd70e123c4708809ddc29dc04124e9" prot="private" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>operator&lt;&lt;</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1a442d7b34e588606cf0ddb1c5184c3af6" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>operator=</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1af187b3c1e4f0d96810f5ea4cdb6fec43" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>operator=</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a26e79db7607c3457fb992c06b32eeac9" prot="public" virt="non-virtual" ambiguityscope="ParticleContainer&lt; NStructReal, NStructInt, 0, 0 &gt;::"><scope>amrex::NeighborParticleContainer</scope><name>operator=</name></member>
      <member refid="classamrex_1_1ParticleContainer_1af554a71a38abcbf8dac83f89117f8c70" prot="public" virt="non-virtual" ambiguityscope="ParticleContainer&lt; NStructReal, NStructInt, 0, 0 &gt;::"><scope>amrex::NeighborParticleContainer</scope><name>operator=</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1a0c2a28aef7db24fbfccc53f46637a582" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>PairIndex</name></member>
      <member refid="classamrex_1_1ParticleContainer_1aed980f0e76a528207023adb36734a107" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>ParConstIterType</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a81c80eb8543dfbd48bbccd92971ddb78" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>ParIterType</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a3eca54e3796067e16dfd915088236097" prot="private" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>particle_size</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a9f1682afb446e3b9f21c666ed16f9c0d" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>ParticleContainer</name></member>
      <member refid="classamrex_1_1ParticleContainer_1accfab0ba16c9bdb72053c1473e0973fd" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>ParticleContainer</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a0e574f8367c158cd1acda01b3e28bd2f" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>ParticleContainer</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a706e09d049ad79faab25e2a87cb442a5" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>ParticleContainer</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a3f6a321aac01f3dfef8995b7eb2ef9d6" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>ParticleContainer</name></member>
      <member refid="classamrex_1_1ParticleContainer_1abf3eff1066923118f7660a405b1ef655" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>ParticleContainer</name></member>
      <member refid="classamrex_1_1ParticleContainer_1ae64034c43f4202075731759389a07202" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>ParticleContainer</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1aa454b3f1c4a133faaa1d28b9c8c254d8" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>ParticleContainerType</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a231bce1a3e6c62d162a50a43cacb26f6" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>ParticleInitData</name></member>
      <member refid="classamrex_1_1ParticleContainer_1acccb7e93f178fb8efd37ca0b43ac2013" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>ParticleLevel</name></member>
      <member refid="classamrex_1_1ParticleContainer_1af087e1154abe3c8c7aed9c7bc5e433b3" prot="private" virt="virtual"><scope>amrex::NeighborParticleContainer</scope><name>particlePostLocate</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a34d81cb6db969ef60c5440df7925c904" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>ParticleRealDescriptor</name></member>
      <member refid="classamrex_1_1ParticleContainer_1ad83a1bbb70eea2673069ddfebf7bdf04" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>ParticlesAt</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a847a9ee58a4022c53048f72df9579547" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>ParticlesAt</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a3d7725f3c6eaf600859cf3817f15f814" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>ParticlesAt</name></member>
      <member refid="classamrex_1_1ParticleContainer_1aad4d250da468d5bf52c5ec23bf0b7a5f" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>ParticlesAt</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1a88e27f1bb35a55e5fb6555057e1e25ac" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>ParticleTile</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a71a0cf043ed329a849e9a33c5e1515fc" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>ParticleTileType</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1ab9497648313d317adc40bc7bebb5ca2d" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>ParticleType</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1ade2385ed6d6005f38a31d3709b55fc4c" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>ParticleVector</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1a36651cd2e655c49f9d9c57c865223fa2" prot="protected" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>pdata_size</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a47f67390d8d8c825464f861df6359cb2" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>PeriodicShift</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1a57f27a8f270653d1a738490e32dffe4b" prot="protected" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>pinned_rcv_buffer</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1a1f7704df7069ec0df0e84a649babf620" prot="protected" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>pinned_snd_buffer</name></member>
      <member refid="classamrex_1_1ParticleContainer_1aeb21fa0aa5adb6064501c98d03699f83" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>PrintCapacity</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1aac13e1f1c324181ce01a8f50fe3897d9" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>printNeighborList</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1a2f7e6baa209278afea162548a1425bf2" prot="protected" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>rcv_buffer</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1a6d6260836577412b1a3a17c7f8d09bc4" prot="protected" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>rcvs</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a75cec62d0988157c36c1cad225236a9d" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>ReadParticleRealData</name></member>
      <member refid="classamrex_1_1ParticleContainer_1abca7b579b46563636a76dbc73c071a61" prot="protected" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>ReadParticles</name></member>
      <member refid="classamrex_1_1ParticleContainer_1abca7b579b46563636a76dbc73c071a61" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>ReadParticles</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a83834de1d741f5be6f07814c570d122d" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>RealType</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a3228f60a39f554b66ca355f59baa0e28" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>RealVector</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1a1dadb49a29f4ad711fb369db84b2eb54" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>Redistribute</name></member>
      <member refid="classamrex_1_1ParticleContainer_1ac966982633d558c1421d83b5b64e07db" prot="public" virt="non-virtual" ambiguityscope="ParticleContainer&lt; NStructReal, NStructInt, 0, 0 &gt;::"><scope>amrex::NeighborParticleContainer</scope><name>Redistribute</name></member>
      <member refid="classamrex_1_1ParticleContainer_1ae41747ca45a65246f359f816a356bcef" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>RedistributeCPU</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a8e703dcee10b09d0bcee9b7b9ca783dd" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>RedistributeGPU</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1a098b72559cacc3ab8b2455a36137fd06" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>RedistributeLocal</name></member>
      <member refid="classamrex_1_1ParticleContainer_1aa20ae6b6bfa59d094d454159050c1d53" prot="private" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>RedistributeMPI</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1adbf6915c6877b366e0bda3e6f268eb30" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>Regrid</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1aee1b7c1708cd7d226db64b05d590d1fd" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>Regrid</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1a991c2e4f486d6cbb9cf74c326c1ad357" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>Regrid</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a6e46853104a175c92f75bc90a3bbbc75" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>RemoveParticlesAtLevel</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a74b71d342d1e9deae8f7fe1e3bf41b90" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>RemoveParticlesNotAtFinestLevel</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a0e98d8607c64975b15e782c6c446228e" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>reserveData</name></member>
      <member refid="classamrex_1_1ParticleContainer_1abfae5d5f8542b20a84462bc91073d424" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>Reset</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1af03a2d960e9c4975823cee72793a6410" prot="protected" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>resizeContainers</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a5426a68c091fe10949b169a3a91cd6e0" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>resizeData</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a471e8dc79b6f170e96c6022938ce21a1" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>Restart</name></member>
      <member refid="classamrex_1_1ParticleContainer_1ae8a0e12f918ea400911afe914aacad95" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>Restart</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1ac12ee34811362ffe3b5419d304b1204a" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>selectActualNeighbors</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1a273b3dd3de4a9be9b3fed863080d9ad3" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>selectActualNeighbors</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1a5ba336738781f2d529bbb68a7f297e17" prot="protected" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>send_data</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1afcfe4393ad4cb1e555c5dff902c6901d" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>SendBuffer</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1a9fd86ef6591da68553312d8cc6321034" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>setEnableInverse</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1a63cbb0b5b6c81df9e4321148bc960f32" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>setIntCommComp</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a1805463ec66ddf9afc4f502fffa3db83" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>SetLevelDirectoriesCreated</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a5676109ef51af94b23778d2c2d277c68" prot="protected" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>SetParticleSize</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1a9c5eaf4a73e02b631f586b8d9eaa9b44" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>setRealCommComp</name></member>
      <member refid="classamrex_1_1ParticleContainer_1ae2a1861e41d8404ce67129bb77b8ff79" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>SetUsePrePost</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a37a5b5b9403a813c8a62dae4dc47ed7f" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>SetUseUnlink</name></member>
      <member refid="classamrex_1_1ParticleContainer_1afe6dd326d79c3169d35d540f65f6d4f4" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>ShrinkToFit</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1a8fd0536bf961bc912c1a380d93b077dd" prot="protected" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>snd_buffer</name></member>
      <member refid="classamrex_1_1ParticleContainer_1aec513fd16f52bafcec98962f1a904d18" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>SoA</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a2ab99fc115d419fb90bc42e69f60e7d6" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>SortParticlesByBin</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a7af39cfe3a9d135aa624798a31762da7" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>SortParticlesByCell</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1a881b90e85491b4c0a7bb25425cc38641" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>sumNeighbors</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1a832b5eccef2ae5ed7bb83a92653b793e" prot="protected" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>sumNeighborsMPI</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a71a5c1448096fb5347f01ee164e70456" prot="private" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>superparticle_size</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a963f1148018a102d01095f71d4a0e65b" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>superParticleSize</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1a1c6baf08ed7bdeb1d7a7acf30eefad52" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>SuperParticleType</name></member>
      <member refid="classamrex_1_1ParticleContainer_1ac807eaeb5b61de74bab2eddd98f763c6" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>TotalNumberOfParticles</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1a6aeacb4e33f4b1946b8b7a5434a77f6d" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>updateNeighbors</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1a0f70a3eeb349ea4d713b581c5beebc82" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>updateNeighborsGPU</name></member>
      <member refid="classamrex_1_1NeighborParticleContainer_1a21bd4a08b87b0afeeb0d8889c619c86c" prot="protected" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>use_mask</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a5379ae495140bc0763c163fac9eff177" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>usePrePost</name></member>
      <member refid="classamrex_1_1ParticleContainer_1ada3cfea616aaa17a688c5b26884ac6ad" prot="protected" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>Where</name></member>
      <member refid="classamrex_1_1ParticleContainer_1aca255b5b2ffba8c978d33aa087ef69de" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>Where</name></member>
      <member refid="classamrex_1_1ParticleContainer_1aab02fddae93b85695d6a0bb37691b5d0" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>wherePrePost</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a9e5dfe5c973c51b24bb4260ffb5122fb" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>whichPrePost</name></member>
      <member refid="classamrex_1_1ParticleContainer_1aa844fae29584f23e9af9457a1b248b2b" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>WriteAsciiFile</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a46517647e848cf57bf682a677ef398b3" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>WriteBinaryParticleData</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a5cfb00456b6f54bf8be825a7ebed5cb4" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>WriteBinaryParticleData</name></member>
      <member refid="classamrex_1_1ParticleContainer_1ab73a81949960df2b97ddffaec46491b7" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>WriteParticleRealData</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a72d11fce8acf941dfca9b363582c5139" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>WriteParticles</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a03f7777b10381a804dec6ebfd4d80539" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>WritePlotFile</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a1d348d13ab6055c04952389e33274fe9" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>WritePlotFile</name></member>
      <member refid="classamrex_1_1ParticleContainer_1ae6b5ae78b3e63e7e8437e4ac42126b2e" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>WritePlotFile</name></member>
      <member refid="classamrex_1_1ParticleContainer_1ac70a5d6f4a511c728e61c1c0e0f825eb" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>WritePlotFile</name></member>
      <member refid="classamrex_1_1ParticleContainer_1adfff4f76c09775c81000065854225590" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>WritePlotFile</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a4486888245ce148040c6ba2c063b9727" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>WritePlotFile</name></member>
      <member refid="classamrex_1_1ParticleContainer_1af6179b66026582beae80c33be1c9cac5" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>WritePlotFile</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a0cd1371544e14d13f7ec3055354b1ddd" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>WritePlotFile</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a10396d3ecdfb69e187092d6c5043fa2b" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>WritePlotFile</name></member>
      <member refid="classamrex_1_1ParticleContainer_1ac36c77d73a87b5523fb5b33e7edfeef0" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>WritePlotFile</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a1d348d13ab6055c04952389e33274fe9" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>WritePlotFile</name></member>
      <member refid="classamrex_1_1ParticleContainer_1ac70a5d6f4a511c728e61c1c0e0f825eb" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>WritePlotFile</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a4486888245ce148040c6ba2c063b9727" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>WritePlotFile</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a0cd1371544e14d13f7ec3055354b1ddd" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>WritePlotFile</name></member>
      <member refid="classamrex_1_1ParticleContainer_1ac36c77d73a87b5523fb5b33e7edfeef0" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>WritePlotFile</name></member>
      <member refid="classamrex_1_1ParticleContainer_1acfd42ea6e5478cb242aa1173ff3f2600" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>WritePlotFilePost</name></member>
      <member refid="classamrex_1_1ParticleContainer_1af2a7013064975d755dfca3ae72ab4504" prot="public" virt="non-virtual"><scope>amrex::NeighborParticleContainer</scope><name>WritePlotFilePre</name></member>
      <member refid="classamrex_1_1ParticleContainer_1ad9adcb33d1edaf181f17f3c02caebf24" prot="public" virt="virtual"><scope>amrex::NeighborParticleContainer</scope><name>~ParticleContainer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
