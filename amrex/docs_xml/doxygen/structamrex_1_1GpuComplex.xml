<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="structamrex_1_1GpuComplex" kind="struct" language="C++" prot="public">
    <compoundname>amrex::GpuComplex</compoundname>
    <includes refid="AMReX__GpuComplex_8H" local="no">AMReX_GpuComplex.H</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structamrex_1_1GpuComplex_1a901c79bd919c5c61745c980b480a9422" prot="public" static="no">
        <type>T</type>
        <definition>using amrex::GpuComplex&lt; T &gt;::value_type =  T</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" line="26" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" bodystart="26" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structamrex_1_1GpuComplex_1abe7e2332d46ea24486dfe52e6aaf0e84" prot="public" static="no" mutable="no">
        <type>T</type>
        <definition>T amrex::GpuComplex&lt; T &gt;::m_real</definition>
        <argsstring></argsstring>
        <name>m_real</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" line="28" column="7" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structamrex_1_1GpuComplex_1a50e77be424412b0789610d627520c151" prot="public" static="no" mutable="no">
        <type>T</type>
        <definition>T amrex::GpuComplex&lt; T &gt;::m_imag</definition>
        <argsstring></argsstring>
        <name>m_imag</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" line="28" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" bodystart="28" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structamrex_1_1GpuComplex_1a124d2191f873eb1bb9f4b6ae4fc95544" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> constexpr <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE constexpr AMREX_FORCE_INLINE amrex::GpuComplex&lt; T &gt;::GpuComplex</definition>
        <argsstring>(const T &amp;a_r=T(), const T &amp;a_i=T()) noexcept</argsstring>
        <name>GpuComplex</name>
        <param>
          <type>const T &amp;</type>
          <declname>a_r</declname>
          <defval>T()</defval>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>a_i</declname>
          <defval>T()</defval>
        </param>
        <briefdescription>
<para>Construct a complex number given the real and imaginary part. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" line="34" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" bodystart="34" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1GpuComplex_1a150666baa5a509c2fe563c507627c038" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> constexpr <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T</type>
        <definition>AMREX_GPU_HOST_DEVICE constexpr AMREX_FORCE_INLINE T amrex::GpuComplex&lt; T &gt;::real</definition>
        <argsstring>() const noexcept</argsstring>
        <name>real</name>
        <briefdescription>
<para>Return the real part. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" line="41" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" bodystart="41" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1GpuComplex_1adc42fb08c670f0f7127d886bc3e28435" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> constexpr <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T</type>
        <definition>AMREX_GPU_HOST_DEVICE constexpr AMREX_FORCE_INLINE T amrex::GpuComplex&lt; T &gt;::imag</definition>
        <argsstring>() const noexcept</argsstring>
        <name>imag</name>
        <briefdescription>
<para>Return the imaginary part. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" line="47" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" bodystart="47" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1GpuComplex_1ae2a818d0a7964627c0273d2cc9f85bb5" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE GpuComplex&lt;T&gt;&amp; amrex::GpuComplex&lt; T &gt;::operator+=</definition>
        <argsstring>(const T &amp;a_t) noexcept</argsstring>
        <name>operator+=</name>
        <param>
          <type>const T &amp;</type>
          <declname>a_t</declname>
        </param>
        <briefdescription>
<para>Add a real number to this complex number. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" line="53" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" bodystart="53" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1GpuComplex_1a2db95eb3b93c7d19e60e220d3c61fa74" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE GpuComplex&lt;T&gt;&amp; amrex::GpuComplex&lt; T &gt;::operator-=</definition>
        <argsstring>(const T &amp;a_t) noexcept</argsstring>
        <name>operator-=</name>
        <param>
          <type>const T &amp;</type>
          <declname>a_t</declname>
        </param>
        <briefdescription>
<para>Subtract a real number from this complex number. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" line="63" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" bodystart="63" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1GpuComplex_1ab5da719fa0c6a5d6e62e3ce73cc949df" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE GpuComplex&lt;T&gt;&amp; amrex::GpuComplex&lt; T &gt;::operator*=</definition>
        <argsstring>(const T &amp;a_t) noexcept</argsstring>
        <name>operator*=</name>
        <param>
          <type>const T &amp;</type>
          <declname>a_t</declname>
        </param>
        <briefdescription>
<para>Multiply this complex number by a real. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" line="73" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" bodystart="73" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1GpuComplex_1aa3ec285342921544d308aa9e7fb93470" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE GpuComplex&lt;T&gt;&amp; amrex::GpuComplex&lt; T &gt;::operator/=</definition>
        <argsstring>(const T &amp;a_t) noexcept</argsstring>
        <name>operator/=</name>
        <param>
          <type>const T &amp;</type>
          <declname>a_t</declname>
        </param>
        <briefdescription>
<para>Divide this complex number by a real. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" line="84" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" bodystart="84" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1GpuComplex_1ae13156133f8fd02f878a7992e0754217" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE GpuComplex&lt;T&gt;&amp; amrex::GpuComplex&lt; T &gt;::operator+=</definition>
        <argsstring>(const GpuComplex&lt; U &gt; &amp;a_z) noexcept</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; U &gt; &amp;</type>
          <declname>a_z</declname>
        </param>
        <briefdescription>
<para>Add another complex number to this one. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" line="96" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" bodystart="96" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1GpuComplex_1a2fa2ed5a6027135dafd7c96e64628153" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE GpuComplex&lt;T&gt;&amp; amrex::GpuComplex&lt; T &gt;::operator-=</definition>
        <argsstring>(const GpuComplex&lt; U &gt; &amp;a_z) noexcept</argsstring>
        <name>operator-=</name>
        <param>
          <type>const <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; U &gt; &amp;</type>
          <declname>a_z</declname>
        </param>
        <briefdescription>
<para>Subtract another complex number from this one. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" line="108" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" bodystart="108" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1GpuComplex_1a33b76e08a00922aa6e92853e71dca58e" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE GpuComplex&lt;T&gt;&amp; amrex::GpuComplex&lt; T &gt;::operator*=</definition>
        <argsstring>(const GpuComplex&lt; U &gt; &amp;a_z) noexcept</argsstring>
        <name>operator*=</name>
        <param>
          <type>const <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; U &gt; &amp;</type>
          <declname>a_z</declname>
        </param>
        <briefdescription>
<para>Multiply this complex number by another one. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" line="120" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" bodystart="120" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1GpuComplex_1a7903cf4d3b219578d8fe6d4981d25c8b" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt; &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE GpuComplex&lt;T&gt;&amp; amrex::GpuComplex&lt; T &gt;::operator/=</definition>
        <argsstring>(const GpuComplex&lt; U &gt; &amp;a_z) noexcept</argsstring>
        <name>operator/=</name>
        <param>
          <type>const <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; U &gt; &amp;</type>
          <declname>a_z</declname>
        </param>
        <briefdescription>
<para>Divide this complex number by another one. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" line="133" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" bodystart="133" bodyend="140"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="structamrex_1_1GpuComplex_1a3b27edee0d47b21f23f1d8640dbaa2e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>friend std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const GpuComplex&lt; U &gt; &amp;c)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; U &gt; &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para><ref refid="classamrex_1_1Print" kindref="compound">Print</ref> this complex number to an ostream. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" line="146" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" bodystart="150" bodyend="155"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A host / device complex number type, because std::complex doesn&apos;t work in device code with <ref refid="namespaceamrex_1_1Cuda" kindref="compound">Cuda</ref> yet. </para>
    </briefdescription>
    <detaileddescription>
<para>Should be bit-wise compatible with std::complex. </para>
    </detaileddescription>
    <collaborationgraph>
      <node id="2">
        <label>T</label>
      </node>
      <node id="1">
        <label>amrex::GpuComplex&lt; T &gt;</label>
        <link refid="structamrex_1_1GpuComplex"/>
        <childnode refid="2" relation="usage">
          <edgelabel>m_real</edgelabel>
          <edgelabel>m_imag</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" line="11" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" bodystart="11" bodyend="-1"/>
    <listofallmembers>
      <member refid="structamrex_1_1GpuComplex_1a124d2191f873eb1bb9f4b6ae4fc95544" prot="public" virt="non-virtual"><scope>amrex::GpuComplex</scope><name>GpuComplex</name></member>
      <member refid="structamrex_1_1GpuComplex_1adc42fb08c670f0f7127d886bc3e28435" prot="public" virt="non-virtual"><scope>amrex::GpuComplex</scope><name>imag</name></member>
      <member refid="structamrex_1_1GpuComplex_1a50e77be424412b0789610d627520c151" prot="public" virt="non-virtual"><scope>amrex::GpuComplex</scope><name>m_imag</name></member>
      <member refid="structamrex_1_1GpuComplex_1abe7e2332d46ea24486dfe52e6aaf0e84" prot="public" virt="non-virtual"><scope>amrex::GpuComplex</scope><name>m_real</name></member>
      <member refid="structamrex_1_1GpuComplex_1ab5da719fa0c6a5d6e62e3ce73cc949df" prot="public" virt="non-virtual"><scope>amrex::GpuComplex</scope><name>operator*=</name></member>
      <member refid="structamrex_1_1GpuComplex_1a33b76e08a00922aa6e92853e71dca58e" prot="public" virt="non-virtual"><scope>amrex::GpuComplex</scope><name>operator*=</name></member>
      <member refid="structamrex_1_1GpuComplex_1ae2a818d0a7964627c0273d2cc9f85bb5" prot="public" virt="non-virtual"><scope>amrex::GpuComplex</scope><name>operator+=</name></member>
      <member refid="structamrex_1_1GpuComplex_1ae13156133f8fd02f878a7992e0754217" prot="public" virt="non-virtual"><scope>amrex::GpuComplex</scope><name>operator+=</name></member>
      <member refid="structamrex_1_1GpuComplex_1a2db95eb3b93c7d19e60e220d3c61fa74" prot="public" virt="non-virtual"><scope>amrex::GpuComplex</scope><name>operator-=</name></member>
      <member refid="structamrex_1_1GpuComplex_1a2fa2ed5a6027135dafd7c96e64628153" prot="public" virt="non-virtual"><scope>amrex::GpuComplex</scope><name>operator-=</name></member>
      <member refid="structamrex_1_1GpuComplex_1aa3ec285342921544d308aa9e7fb93470" prot="public" virt="non-virtual"><scope>amrex::GpuComplex</scope><name>operator/=</name></member>
      <member refid="structamrex_1_1GpuComplex_1a7903cf4d3b219578d8fe6d4981d25c8b" prot="public" virt="non-virtual"><scope>amrex::GpuComplex</scope><name>operator/=</name></member>
      <member refid="structamrex_1_1GpuComplex_1a3b27edee0d47b21f23f1d8640dbaa2e6" prot="public" virt="non-virtual"><scope>amrex::GpuComplex</scope><name>operator&lt;&lt;</name></member>
      <member refid="structamrex_1_1GpuComplex_1a150666baa5a509c2fe563c507627c038" prot="public" virt="non-virtual"><scope>amrex::GpuComplex</scope><name>real</name></member>
      <member refid="structamrex_1_1GpuComplex_1a901c79bd919c5c61745c980b480a9422" prot="public" virt="non-virtual"><scope>amrex::GpuComplex</scope><name>value_type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
