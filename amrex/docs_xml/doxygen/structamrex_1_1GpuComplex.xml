<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="structamrex_1_1GpuComplex" kind="struct" language="C++" prot="public">
    <compoundname>amrex::GpuComplex</compoundname>
    <includes refid="AMReX__GpuComplex_8H" local="no">AMReX_GpuComplex.H</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structamrex_1_1GpuComplex_1a901c79bd919c5c61745c980b480a9422" prot="public" static="no">
        <type>T</type>
        <definition>using amrex::GpuComplex&lt; T &gt;::value_type =  T</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <qualifiedname>amrex::GpuComplex::value_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" line="30" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" bodystart="30" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structamrex_1_1GpuComplex_1abe7e2332d46ea24486dfe52e6aaf0e84" prot="public" static="no" mutable="no">
        <type>T</type>
        <definition>T amrex::GpuComplex&lt; T &gt;::m_real</definition>
        <argsstring></argsstring>
        <name>m_real</name>
        <qualifiedname>amrex::GpuComplex::m_real</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" line="32" column="7" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structamrex_1_1GpuComplex_1a50e77be424412b0789610d627520c151" prot="public" static="no" mutable="no">
        <type>T</type>
        <definition>T amrex::GpuComplex&lt; T &gt;::m_imag</definition>
        <argsstring></argsstring>
        <name>m_imag</name>
        <qualifiedname>amrex::GpuComplex::m_imag</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" line="32" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" bodystart="32" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="structamrex_1_1GpuComplex_1a8b46879e04e30d2c234174fda9707aef" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ constexpr</type>
        <definition>__host__ __device__ constexpr amrex::GpuComplex&lt; T &gt;::GpuComplex</definition>
        <argsstring>(const T &amp;a_r=T(), const T &amp;a_i=T()) noexcept</argsstring>
        <name>GpuComplex</name>
        <qualifiedname>amrex::GpuComplex::GpuComplex</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>a_r</declname>
          <defval>T()</defval>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>a_i</declname>
          <defval>T()</defval>
        </param>
        <briefdescription>
<para>Construct a complex number given the real and imaginary part. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" line="38" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" bodystart="38" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1GpuComplex_1aa41b15c41ecf66c282ea286f879a1575" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ constexpr T</type>
        <definition>__host__ __device__ constexpr T amrex::GpuComplex&lt; T &gt;::real</definition>
        <argsstring>() const noexcept</argsstring>
        <name>real</name>
        <qualifiedname>amrex::GpuComplex::real</qualifiedname>
        <briefdescription>
<para>Return the real part. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" line="45" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" bodystart="45" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1GpuComplex_1adbb07e0a387dabb162e0586acac0f358" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ constexpr T</type>
        <definition>__host__ __device__ constexpr T amrex::GpuComplex&lt; T &gt;::imag</definition>
        <argsstring>() const noexcept</argsstring>
        <name>imag</name>
        <qualifiedname>amrex::GpuComplex::imag</qualifiedname>
        <briefdescription>
<para>Return the imaginary part. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" line="51" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" bodystart="51" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1GpuComplex_1a759a91909ff505d811dc417d85a33796" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>__host__ __device__ <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt; &amp;</type>
        <definition>__host__ __device__ GpuComplex&lt; T &gt; &amp; amrex::GpuComplex&lt; T &gt;::operator+=</definition>
        <argsstring>(const U &amp;a_t) noexcept</argsstring>
        <name>operator+=</name>
        <qualifiedname>amrex::GpuComplex::operator+=</qualifiedname>
        <param>
          <type>const U &amp;</type>
          <declname>a_t</declname>
        </param>
        <briefdescription>
<para>Add a real number to this complex number. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" line="58" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" bodystart="58" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1GpuComplex_1aee53038fb181a03bbf5ca2a559ae0e7e" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>__host__ __device__ <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt; &amp;</type>
        <definition>__host__ __device__ GpuComplex&lt; T &gt; &amp; amrex::GpuComplex&lt; T &gt;::operator-=</definition>
        <argsstring>(const U &amp;a_t) noexcept</argsstring>
        <name>operator-=</name>
        <qualifiedname>amrex::GpuComplex::operator-=</qualifiedname>
        <param>
          <type>const U &amp;</type>
          <declname>a_t</declname>
        </param>
        <briefdescription>
<para>Subtract a real number from this complex number. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" line="69" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" bodystart="69" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1GpuComplex_1a0a7ba644a6fe0c2e3442f1f50d2d4bb4" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>__host__ __device__ <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt; &amp;</type>
        <definition>__host__ __device__ GpuComplex&lt; T &gt; &amp; amrex::GpuComplex&lt; T &gt;::operator*=</definition>
        <argsstring>(const U &amp;a_t) noexcept</argsstring>
        <name>operator*=</name>
        <qualifiedname>amrex::GpuComplex::operator*=</qualifiedname>
        <param>
          <type>const U &amp;</type>
          <declname>a_t</declname>
        </param>
        <briefdescription>
<para>Multiply this complex number by a real. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" line="80" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" bodystart="80" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1GpuComplex_1a3c286550d6545b8e1d9be9ebd829fdec" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>__host__ __device__ <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt; &amp;</type>
        <definition>__host__ __device__ GpuComplex&lt; T &gt; &amp; amrex::GpuComplex&lt; T &gt;::operator/=</definition>
        <argsstring>(const U &amp;a_t) noexcept</argsstring>
        <name>operator/=</name>
        <qualifiedname>amrex::GpuComplex::operator/=</qualifiedname>
        <param>
          <type>const U &amp;</type>
          <declname>a_t</declname>
        </param>
        <briefdescription>
<para>Divide this complex number by a real. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" line="92" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" bodystart="92" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1GpuComplex_1a558c7d57a048f2285daa00f7c73d0f6f" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>__host__ __device__ <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt; &amp;</type>
        <definition>__host__ __device__ GpuComplex&lt; T &gt; &amp; amrex::GpuComplex&lt; T &gt;::operator+=</definition>
        <argsstring>(const GpuComplex&lt; U &gt; &amp;a_z) noexcept</argsstring>
        <name>operator+=</name>
        <qualifiedname>amrex::GpuComplex::operator+=</qualifiedname>
        <param>
          <type>const <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; U &gt; &amp;</type>
          <declname>a_z</declname>
        </param>
        <briefdescription>
<para>Add another complex number to this one. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" line="104" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" bodystart="104" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1GpuComplex_1a2e50fef306db28d7271ce8e7f99ae3aa" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>__host__ __device__ <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt; &amp;</type>
        <definition>__host__ __device__ GpuComplex&lt; T &gt; &amp; amrex::GpuComplex&lt; T &gt;::operator-=</definition>
        <argsstring>(const GpuComplex&lt; U &gt; &amp;a_z) noexcept</argsstring>
        <name>operator-=</name>
        <qualifiedname>amrex::GpuComplex::operator-=</qualifiedname>
        <param>
          <type>const <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; U &gt; &amp;</type>
          <declname>a_z</declname>
        </param>
        <briefdescription>
<para>Subtract another complex number from this one. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" line="116" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" bodystart="116" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1GpuComplex_1a3912bc2e2faed6fe23792265b3144f0b" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>__host__ __device__ <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt; &amp;</type>
        <definition>__host__ __device__ GpuComplex&lt; T &gt; &amp; amrex::GpuComplex&lt; T &gt;::operator*=</definition>
        <argsstring>(const GpuComplex&lt; U &gt; &amp;a_z) noexcept</argsstring>
        <name>operator*=</name>
        <qualifiedname>amrex::GpuComplex::operator*=</qualifiedname>
        <param>
          <type>const <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; U &gt; &amp;</type>
          <declname>a_z</declname>
        </param>
        <briefdescription>
<para>Multiply this complex number by another one. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" line="128" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" bodystart="128" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1GpuComplex_1a2f73865242be0d92b372575f9c0245c6" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>__host__ __device__ <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt; &amp;</type>
        <definition>__host__ __device__ GpuComplex&lt; T &gt; &amp; amrex::GpuComplex&lt; T &gt;::operator/=</definition>
        <argsstring>(const GpuComplex&lt; U &gt; &amp;a_z) noexcept</argsstring>
        <name>operator/=</name>
        <qualifiedname>amrex::GpuComplex::operator/=</qualifiedname>
        <param>
          <type>const <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; U &gt; &amp;</type>
          <declname>a_z</declname>
        </param>
        <briefdescription>
<para>Divide this complex number by another one. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" line="141" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" bodystart="141" bodyend="148"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="friend">
      <memberdef kind="friend" id="structamrex_1_1GpuComplex_1a5d5b68d38eacb8a2ab0959c2ef17bbd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const GpuComplex&lt; U &gt; &amp;c)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>amrex::GpuComplex::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; U &gt; &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para><ref refid="classamrex_1_1Print" kindref="compound">Print</ref> this complex number to an ostream. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" line="154" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" bodystart="158" bodyend="163"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>A host / device complex number type, because std::complex doesn&apos;t work in device code with <ref refid="namespaceamrex_1_1Cuda" kindref="compound">Cuda</ref> yet. </para>
    </briefdescription>
    <detaileddescription>
<para>Should be bit-wise compatible with std::complex.</para>
<para><ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref> is aligned to its size (stricter than std::complex) to allow for coalesced memory accesses with nvidia GPUs. </para>
    </detaileddescription>
    <collaborationgraph>
      <node id="2">
        <label>T</label>
      </node>
      <node id="1">
        <label>amrex::GpuComplex&lt; T &gt;</label>
        <link refid="structamrex_1_1GpuComplex"/>
        <childnode refid="2" relation="usage">
          <edgelabel>m_imag</edgelabel>
          <edgelabel>m_real</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" line="28" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" bodystart="29" bodyend="155"/>
    <listofallmembers>
      <member refid="structamrex_1_1GpuComplex_1a8b46879e04e30d2c234174fda9707aef" prot="public" virt="non-virtual"><scope>amrex::GpuComplex</scope><name>GpuComplex</name></member>
      <member refid="structamrex_1_1GpuComplex_1adbb07e0a387dabb162e0586acac0f358" prot="public" virt="non-virtual"><scope>amrex::GpuComplex</scope><name>imag</name></member>
      <member refid="structamrex_1_1GpuComplex_1a50e77be424412b0789610d627520c151" prot="public" virt="non-virtual"><scope>amrex::GpuComplex</scope><name>m_imag</name></member>
      <member refid="structamrex_1_1GpuComplex_1abe7e2332d46ea24486dfe52e6aaf0e84" prot="public" virt="non-virtual"><scope>amrex::GpuComplex</scope><name>m_real</name></member>
      <member refid="structamrex_1_1GpuComplex_1a0a7ba644a6fe0c2e3442f1f50d2d4bb4" prot="public" virt="non-virtual"><scope>amrex::GpuComplex</scope><name>operator*=</name></member>
      <member refid="structamrex_1_1GpuComplex_1a3912bc2e2faed6fe23792265b3144f0b" prot="public" virt="non-virtual"><scope>amrex::GpuComplex</scope><name>operator*=</name></member>
      <member refid="structamrex_1_1GpuComplex_1a759a91909ff505d811dc417d85a33796" prot="public" virt="non-virtual"><scope>amrex::GpuComplex</scope><name>operator+=</name></member>
      <member refid="structamrex_1_1GpuComplex_1a558c7d57a048f2285daa00f7c73d0f6f" prot="public" virt="non-virtual"><scope>amrex::GpuComplex</scope><name>operator+=</name></member>
      <member refid="structamrex_1_1GpuComplex_1aee53038fb181a03bbf5ca2a559ae0e7e" prot="public" virt="non-virtual"><scope>amrex::GpuComplex</scope><name>operator-=</name></member>
      <member refid="structamrex_1_1GpuComplex_1a2e50fef306db28d7271ce8e7f99ae3aa" prot="public" virt="non-virtual"><scope>amrex::GpuComplex</scope><name>operator-=</name></member>
      <member refid="structamrex_1_1GpuComplex_1a3c286550d6545b8e1d9be9ebd829fdec" prot="public" virt="non-virtual"><scope>amrex::GpuComplex</scope><name>operator/=</name></member>
      <member refid="structamrex_1_1GpuComplex_1a2f73865242be0d92b372575f9c0245c6" prot="public" virt="non-virtual"><scope>amrex::GpuComplex</scope><name>operator/=</name></member>
      <member refid="structamrex_1_1GpuComplex_1a5d5b68d38eacb8a2ab0959c2ef17bbd2" prot="public" virt="non-virtual"><scope>amrex::GpuComplex</scope><name>operator&lt;&lt;</name></member>
      <member refid="structamrex_1_1GpuComplex_1aa41b15c41ecf66c282ea286f879a1575" prot="public" virt="non-virtual"><scope>amrex::GpuComplex</scope><name>real</name></member>
      <member refid="structamrex_1_1GpuComplex_1a901c79bd919c5c61745c980b480a9422" prot="public" virt="non-virtual"><scope>amrex::GpuComplex</scope><name>value_type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
