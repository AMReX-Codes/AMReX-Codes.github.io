<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespaceamrex" kind="namespace" language="C++">
    <compoundname>amrex</compoundname>
    <innerclass refid="classamrex_1_1AllPrint" prot="public">amrex::AllPrint</innerclass>
    <innerclass refid="classamrex_1_1AllPrintToFile" prot="public">amrex::AllPrintToFile</innerclass>
    <innerclass refid="classamrex_1_1Amr" prot="public">amrex::Amr</innerclass>
    <innerclass refid="structamrex_1_1AmrAssignGrid" prot="public">amrex::AmrAssignGrid</innerclass>
    <innerclass refid="classamrex_1_1AmrCore" prot="public">amrex::AmrCore</innerclass>
    <innerclass refid="classamrex_1_1AmrData" prot="public">amrex::AmrData</innerclass>
    <innerclass refid="classamrex_1_1AmrDataAdaptor" prot="public">amrex::AmrDataAdaptor</innerclass>
    <innerclass refid="classamrex_1_1AMRErrorTag" prot="public">amrex::AMRErrorTag</innerclass>
    <innerclass refid="structamrex_1_1AMRErrorTagInfo" prot="public">amrex::AMRErrorTagInfo</innerclass>
    <innerclass refid="classamrex_1_1AMReX" prot="public">amrex::AMReX</innerclass>
    <innerclass refid="structamrex_1_1AmrInfo" prot="public">amrex::AmrInfo</innerclass>
    <innerclass refid="classamrex_1_1AmrInSituBridge" prot="public">amrex::AmrInSituBridge</innerclass>
    <innerclass refid="classamrex_1_1AmrLevel" prot="public">amrex::AmrLevel</innerclass>
    <innerclass refid="classamrex_1_1AmrMesh" prot="public">amrex::AmrMesh</innerclass>
    <innerclass refid="classamrex_1_1AmrMeshDataAdaptor" prot="public">amrex::AmrMeshDataAdaptor</innerclass>
    <innerclass refid="classamrex_1_1AmrMeshInSituBridge" prot="public">amrex::AmrMeshInSituBridge</innerclass>
    <innerclass refid="classamrex_1_1AmrParGDB" prot="public">amrex::AmrParGDB</innerclass>
    <innerclass refid="classamrex_1_1AmrParticleContainer" prot="public">amrex::AmrParticleContainer</innerclass>
    <innerclass refid="classamrex_1_1AmrParticleLocator" prot="public">amrex::AmrParticleLocator</innerclass>
    <innerclass refid="classamrex_1_1AmrTracerParticleContainer" prot="public">amrex::AmrTracerParticleContainer</innerclass>
    <innerclass refid="classamrex_1_1Arena" prot="public">amrex::Arena</innerclass>
    <innerclass refid="classamrex_1_1ArenaAllocator" prot="public">amrex::ArenaAllocator</innerclass>
    <innerclass refid="structamrex_1_1ArenaAllocatorTraits" prot="public">amrex::ArenaAllocatorTraits</innerclass>
    <innerclass refid="structamrex_1_1ArenaInfo" prot="public">amrex::ArenaInfo</innerclass>
    <innerclass refid="structamrex_1_1Array1D" prot="public">amrex::Array1D</innerclass>
    <innerclass refid="structamrex_1_1Array2D" prot="public">amrex::Array2D</innerclass>
    <innerclass refid="structamrex_1_1Array3D" prot="public">amrex::Array3D</innerclass>
    <innerclass refid="structamrex_1_1Array4" prot="public">amrex::Array4</innerclass>
    <innerclass refid="classamrex_1_1ArrayOfStructs" prot="public">amrex::ArrayOfStructs</innerclass>
    <innerclass refid="structamrex_1_1AssignGrid" prot="public">amrex::AssignGrid</innerclass>
    <innerclass refid="classamrex_1_1BackgroundThread" prot="public">amrex::BackgroundThread</innerclass>
    <innerclass refid="classamrex_1_1BArena" prot="public">amrex::BArena</innerclass>
    <innerclass refid="classamrex_1_1BaseFab" prot="public">amrex::BaseFab</innerclass>
    <innerclass refid="classamrex_1_1BaseUmap" prot="public">amrex::BaseUmap</innerclass>
    <innerclass refid="classamrex_1_1BCRec" prot="public">amrex::BCRec</innerclass>
    <innerclass refid="structamrex_1_1BinIterator" prot="public">amrex::BinIterator</innerclass>
    <innerclass refid="structamrex_1_1BLBackTrace" prot="public">amrex::BLBackTrace</innerclass>
    <innerclass refid="classamrex_1_1BLBTer" prot="public">amrex::BLBTer</innerclass>
    <innerclass refid="classamrex_1_1BLProfiler" prot="public">amrex::BLProfiler</innerclass>
    <innerclass refid="classamrex_1_1BndryData" prot="public">amrex::BndryData</innerclass>
    <innerclass refid="classamrex_1_1BndryFuncArray" prot="public">amrex::BndryFuncArray</innerclass>
    <innerclass refid="classamrex_1_1BndryRegister" prot="public">amrex::BndryRegister</innerclass>
    <innerclass refid="classamrex_1_1BoundCond" prot="public">amrex::BoundCond</innerclass>
    <innerclass refid="classamrex_1_1Box" prot="public">amrex::Box</innerclass>
    <innerclass refid="classamrex_1_1BoxCommHelper" prot="public">amrex::BoxCommHelper</innerclass>
    <innerclass refid="classamrex_1_1BoxConverter" prot="public">amrex::BoxConverter</innerclass>
    <innerclass refid="classamrex_1_1BoxDomain" prot="public">amrex::BoxDomain</innerclass>
    <innerclass refid="classamrex_1_1BoxIterator" prot="public">amrex::BoxIterator</innerclass>
    <innerclass refid="classamrex_1_1BoxList" prot="public">amrex::BoxList</innerclass>
    <innerclass refid="classamrex_1_1CArena" prot="public">amrex::CArena</innerclass>
    <innerclass refid="classamrex_1_1CellBilinear" prot="public">amrex::CellBilinear</innerclass>
    <innerclass refid="classamrex_1_1CellConservativeLinear" prot="public">amrex::CellConservativeLinear</innerclass>
    <innerclass refid="classamrex_1_1CellConservativeProtected" prot="public">amrex::CellConservativeProtected</innerclass>
    <innerclass refid="classamrex_1_1CellConservativeQuartic" prot="public">amrex::CellConservativeQuartic</innerclass>
    <innerclass refid="classamrex_1_1CellQuadratic" prot="public">amrex::CellQuadratic</innerclass>
    <innerclass refid="classamrex_1_1Cluster" prot="public">amrex::Cluster</innerclass>
    <innerclass refid="classamrex_1_1ClusterList" prot="public">amrex::ClusterList</innerclass>
    <innerclass refid="structamrex_1_1ConstParticleCPUWrapper" prot="public">amrex::ConstParticleCPUWrapper</innerclass>
    <innerclass refid="structamrex_1_1ConstParticleIDWrapper" prot="public">amrex::ConstParticleIDWrapper</innerclass>
    <innerclass refid="structamrex_1_1ConstParticleTileData" prot="public">amrex::ConstParticleTileData</innerclass>
    <innerclass refid="classamrex_1_1CoordSys" prot="public">amrex::CoordSys</innerclass>
    <innerclass refid="classamrex_1_1CpuBndryFuncFab" prot="public">amrex::CpuBndryFuncFab</innerclass>
    <innerclass refid="classamrex_1_1CutFab" prot="public">amrex::CutFab</innerclass>
    <innerclass refid="classamrex_1_1DArena" prot="public">amrex::DArena</innerclass>
    <innerclass refid="structamrex_1_1DataAllocator" prot="public">amrex::DataAllocator</innerclass>
    <innerclass refid="structamrex_1_1DataDeleter" prot="public">amrex::DataDeleter</innerclass>
    <innerclass refid="classamrex_1_1DataServices" prot="public">amrex::DataServices</innerclass>
    <innerclass refid="classamrex_1_1DefaultFabFactory" prot="public">amrex::DefaultFabFactory</innerclass>
    <innerclass refid="structamrex_1_1DenseBinIteratorFactory" prot="public">amrex::DenseBinIteratorFactory</innerclass>
    <innerclass refid="classamrex_1_1DenseBins" prot="public">amrex::DenseBins</innerclass>
    <innerclass refid="classamrex_1_1DeriveList" prot="public">amrex::DeriveList</innerclass>
    <innerclass refid="classamrex_1_1DeriveRec" prot="public">amrex::DeriveRec</innerclass>
    <innerclass refid="classamrex_1_1DescriptorList" prot="public">amrex::DescriptorList</innerclass>
    <innerclass refid="structamrex_1_1DestComp" prot="public">amrex::DestComp</innerclass>
    <innerclass refid="classamrex_1_1DeviceArenaAllocator" prot="public">amrex::DeviceArenaAllocator</innerclass>
    <innerclass refid="structamrex_1_1Dim3" prot="public">amrex::Dim3</innerclass>
    <innerclass refid="classamrex_1_1distFcnElement2d" prot="public">amrex::distFcnElement2d</innerclass>
    <innerclass refid="classamrex_1_1DistributionMapping" prot="public">amrex::DistributionMapping</innerclass>
    <innerclass refid="classamrex_1_1EArena" prot="public">amrex::EArena</innerclass>
    <innerclass refid="classamrex_1_1EBCellConservativeLinear" prot="public">amrex::EBCellConservativeLinear</innerclass>
    <innerclass refid="classamrex_1_1EBCellFlag" prot="public">amrex::EBCellFlag</innerclass>
    <innerclass refid="classamrex_1_1EBCellFlagFab" prot="public">amrex::EBCellFlagFab</innerclass>
    <innerclass refid="classamrex_1_1EBDataCollection" prot="public">amrex::EBDataCollection</innerclass>
    <innerclass refid="classamrex_1_1EBFArrayBox" prot="public">amrex::EBFArrayBox</innerclass>
    <innerclass refid="classamrex_1_1EBFArrayBoxFactory" prot="public">amrex::EBFArrayBoxFactory</innerclass>
    <innerclass refid="classamrex_1_1EBFluxRegister" prot="public">amrex::EBFluxRegister</innerclass>
    <innerclass refid="classamrex_1_1EBToPVD" prot="public">amrex::EBToPVD</innerclass>
    <innerclass refid="classamrex_1_1ErrorList" prot="public">amrex::ErrorList</innerclass>
    <innerclass refid="classamrex_1_1ErrorRec" prot="public">amrex::ErrorRec</innerclass>
    <innerclass refid="classamrex_1_1expect" prot="public">amrex::expect</innerclass>
    <innerclass refid="classamrex_1_1FabArray" prot="public">amrex::FabArray</innerclass>
    <innerclass refid="classamrex_1_1FabArrayBase" prot="public">amrex::FabArrayBase</innerclass>
    <innerclass refid="classamrex_1_1FabArrayCopyDescriptor" prot="public">amrex::FabArrayCopyDescriptor</innerclass>
    <innerclass refid="classamrex_1_1FabArrayId" prot="public">amrex::FabArrayId</innerclass>
    <innerclass refid="structamrex_1_1FabCopyDescriptor" prot="public">amrex::FabCopyDescriptor</innerclass>
    <innerclass refid="classamrex_1_1FabFactory" prot="public">amrex::FabFactory</innerclass>
    <innerclass refid="structamrex_1_1FabInfo" prot="public">amrex::FabInfo</innerclass>
    <innerclass refid="classamrex_1_1FABio" prot="public">amrex::FABio</innerclass>
    <innerclass refid="classamrex_1_1FABio__8bit" prot="public">amrex::FABio_8bit</innerclass>
    <innerclass refid="classamrex_1_1FABio__ascii" prot="public">amrex::FABio_ascii</innerclass>
    <innerclass refid="classamrex_1_1FABio__binary" prot="public">amrex::FABio_binary</innerclass>
    <innerclass refid="classamrex_1_1FabSet" prot="public">amrex::FabSet</innerclass>
    <innerclass refid="classamrex_1_1FabSetIter" prot="public">amrex::FabSetIter</innerclass>
    <innerclass refid="classamrex_1_1FaceDivFree" prot="public">amrex::FaceDivFree</innerclass>
    <innerclass refid="classamrex_1_1FaceLinear" prot="public">amrex::FaceLinear</innerclass>
    <innerclass refid="classamrex_1_1FArrayBox" prot="public">amrex::FArrayBox</innerclass>
    <innerclass refid="classamrex_1_1FillBoxId" prot="public">amrex::FillBoxId</innerclass>
    <innerclass refid="classamrex_1_1FillPatchIterator" prot="public">amrex::FillPatchIterator</innerclass>
    <innerclass refid="classamrex_1_1FillPatchIteratorHelper" prot="public">amrex::FillPatchIteratorHelper</innerclass>
    <innerclass refid="classamrex_1_1FluxRegister" prot="public">amrex::FluxRegister</innerclass>
    <innerclass refid="classamrex_1_1ForkJoin" prot="public">amrex::ForkJoin</innerclass>
    <innerclass refid="classamrex_1_1FPC" prot="public">amrex::FPC</innerclass>
    <innerclass refid="classamrex_1_1Geometry" prot="public">amrex::Geometry</innerclass>
    <innerclass refid="structamrex_1_1GeometryData" prot="public">amrex::GeometryData</innerclass>
    <innerclass refid="structamrex_1_1GetBucket" prot="public">amrex::GetBucket</innerclass>
    <innerclass refid="structamrex_1_1GetPID" prot="public">amrex::GetPID</innerclass>
    <innerclass refid="structamrex_1_1GetSendBufferOffset" prot="public">amrex::GetSendBufferOffset</innerclass>
    <innerclass refid="structamrex_1_1GPUable" prot="public">amrex::GPUable</innerclass>
    <innerclass refid="structamrex_1_1GpuArray" prot="public">amrex::GpuArray</innerclass>
    <innerclass refid="classamrex_1_1GpuBndryFuncFab" prot="public">amrex::GpuBndryFuncFab</innerclass>
    <innerclass refid="structamrex_1_1GpuComplex" prot="public">amrex::GpuComplex</innerclass>
    <innerclass refid="classamrex_1_1GpuTuple" prot="public">amrex::GpuTuple</innerclass>
    <innerclass refid="structamrex_1_1GpuTupleElement" prot="public">amrex::GpuTupleElement</innerclass>
    <innerclass refid="structamrex_1_1GpuTupleElement_3_010_00_01GpuTuple_3_01Head_00_01Tail_8_8_8_01_4_01_4" prot="public">amrex::GpuTupleElement&lt; 0, GpuTuple&lt; Head, Tail... &gt; &gt;</innerclass>
    <innerclass refid="structamrex_1_1GpuTupleElement_3_01I_00_01GpuTuple_3_01Head_00_01Tail_8_8_8_01_4_01_4" prot="public">amrex::GpuTupleElement&lt; I, GpuTuple&lt; Head, Tail... &gt; &gt;</innerclass>
    <innerclass refid="structamrex_1_1GpuTupleSize" prot="public">amrex::GpuTupleSize</innerclass>
    <innerclass refid="structamrex_1_1GpuTupleSize_3_01GpuTuple_3_01Ts_8_8_8_01_4_01_4" prot="public">amrex::GpuTupleSize&lt; GpuTuple&lt; Ts... &gt; &gt;</innerclass>
    <innerclass refid="structamrex_1_1Greater" prot="public">amrex::Greater</innerclass>
    <innerclass refid="structamrex_1_1HasMultiComp" prot="public">amrex::HasMultiComp</innerclass>
    <innerclass refid="classamrex_1_1Hypre" prot="public">amrex::Hypre</innerclass>
    <innerclass refid="classamrex_1_1HypreABecLap" prot="public">amrex::HypreABecLap</innerclass>
    <innerclass refid="classamrex_1_1HypreABecLap2" prot="public">amrex::HypreABecLap2</innerclass>
    <innerclass refid="classamrex_1_1HypreABecLap3" prot="public">amrex::HypreABecLap3</innerclass>
    <innerclass refid="classamrex_1_1HypreIJIface" prot="public">amrex::HypreIJIface</innerclass>
    <innerclass refid="classamrex_1_1HypreNodeLap" prot="public">amrex::HypreNodeLap</innerclass>
    <innerclass refid="classamrex_1_1IArrayBox" prot="public">amrex::IArrayBox</innerclass>
    <innerclass refid="classamrex_1_1iMultiFab" prot="public">amrex::iMultiFab</innerclass>
    <innerclass refid="structamrex_1_1IndexSequence" prot="public">amrex::IndexSequence</innerclass>
    <innerclass refid="classamrex_1_1IndexType" prot="public">amrex::IndexType</innerclass>
    <innerclass refid="classamrex_1_1InSituBridge" prot="public">amrex::InSituBridge</innerclass>
    <innerclass refid="classamrex_1_1IntDescriptor" prot="public">amrex::IntDescriptor</innerclass>
    <innerclass refid="classamrex_1_1InterpBndryData" prot="public">amrex::InterpBndryData</innerclass>
    <innerclass refid="classamrex_1_1Interpolater" prot="public">amrex::Interpolater</innerclass>
    <innerclass refid="classamrex_1_1InterpolaterBoxCoarsener" prot="public">amrex::InterpolaterBoxCoarsener</innerclass>
    <innerclass refid="classamrex_1_1IntVect" prot="public">amrex::IntVect</innerclass>
    <innerclass refid="structamrex_1_1IsBaseFab" prot="public">amrex::IsBaseFab</innerclass>
    <innerclass refid="structamrex_1_1IsBaseFab_3_01D_00_01typename_01std_1_1enable__if_3_01std_1_1is__base__of_3_01Basc4401839a878456c6d47850080d07e31" prot="public">amrex::IsBaseFab&lt; D, typename std::enable_if&lt; std::is_base_of&lt; BaseFab&lt; typename D::value_type &gt;, D &gt;::value &gt;::type &gt;</innerclass>
    <innerclass refid="structamrex_1_1IsFabArray" prot="public">amrex::IsFabArray</innerclass>
    <innerclass refid="structamrex_1_1IsFabArray_3_01D_00_01typename_01std_1_1enable__if_3_01std_1_1is__base__of_3_01Fa50eb808c2316c63b70b55cab20dbec23" prot="public">amrex::IsFabArray&lt; D, typename std::enable_if&lt; std::is_base_of&lt; FabArray&lt; typename D::FABType::value_type &gt;, D &gt;::value &gt;::type &gt;</innerclass>
    <innerclass refid="structamrex_1_1IsStoreAtomic" prot="public">amrex::IsStoreAtomic</innerclass>
    <innerclass refid="structamrex_1_1IsStoreAtomic_3_01EBCellFlag_01_4" prot="public">amrex::IsStoreAtomic&lt; EBCellFlag &gt;</innerclass>
    <innerclass refid="classamrex_1_1LayoutData" prot="public">amrex::LayoutData</innerclass>
    <innerclass refid="structamrex_1_1Less" prot="public">amrex::Less</innerclass>
    <innerclass refid="classamrex_1_1LevelBld" prot="public">amrex::LevelBld</innerclass>
    <innerclass refid="classamrex_1_1LineDistFcnElement2d" prot="public">amrex::LineDistFcnElement2d</innerclass>
    <innerclass refid="structamrex_1_1LogicalAnd" prot="public">amrex::LogicalAnd</innerclass>
    <innerclass refid="structamrex_1_1LogicalOr" prot="public">amrex::LogicalOr</innerclass>
    <innerclass refid="structamrex_1_1LPInfo" prot="public">amrex::LPInfo</innerclass>
    <innerclass refid="classamrex_1_1MacBndry" prot="public">amrex::MacBndry</innerclass>
    <innerclass refid="classamrex_1_1MacProjector" prot="public">amrex::MacProjector</innerclass>
    <innerclass refid="structamrex_1_1makeIndexSequenceHelper" prot="public">amrex::makeIndexSequenceHelper</innerclass>
    <innerclass refid="structamrex_1_1makeIndexSequenceHelper_3_010_00_01ISs_8_8_8_01_4" prot="public">amrex::makeIndexSequenceHelper&lt; 0, ISs... &gt;</innerclass>
    <innerclass refid="classamrex_1_1ManagedArenaAllocator" prot="public">amrex::ManagedArenaAllocator</innerclass>
    <innerclass refid="classamrex_1_1Mask" prot="public">amrex::Mask</innerclass>
    <innerclass refid="classamrex_1_1MemProfiler" prot="public">amrex::MemProfiler</innerclass>
    <innerclass refid="classamrex_1_1MFGhostIter" prot="public">amrex::MFGhostIter</innerclass>
    <innerclass refid="structamrex_1_1MFInfo" prot="public">amrex::MFInfo</innerclass>
    <innerclass refid="classamrex_1_1MFIter" prot="public">amrex::MFIter</innerclass>
    <innerclass refid="structamrex_1_1MFItInfo" prot="public">amrex::MFItInfo</innerclass>
    <innerclass refid="classamrex_1_1MLABecLaplacian" prot="public">amrex::MLABecLaplacian</innerclass>
    <innerclass refid="classamrex_1_1MLALaplacian" prot="public">amrex::MLALaplacian</innerclass>
    <innerclass refid="classamrex_1_1MLCellABecLap" prot="public">amrex::MLCellABecLap</innerclass>
    <innerclass refid="classamrex_1_1MLCellLinOp" prot="public">amrex::MLCellLinOp</innerclass>
    <innerclass refid="classamrex_1_1MLCGSolver" prot="public">amrex::MLCGSolver</innerclass>
    <innerclass refid="classamrex_1_1MLEBABecLap" prot="public">amrex::MLEBABecLap</innerclass>
    <innerclass refid="classamrex_1_1MLEBTensorOp" prot="public">amrex::MLEBTensorOp</innerclass>
    <innerclass refid="classamrex_1_1MLLinOp" prot="public">amrex::MLLinOp</innerclass>
    <innerclass refid="classamrex_1_1MLMG" prot="public">amrex::MLMG</innerclass>
    <innerclass refid="classamrex_1_1MLMGBndry" prot="public">amrex::MLMGBndry</innerclass>
    <innerclass refid="classamrex_1_1MLNodeLaplacian" prot="public">amrex::MLNodeLaplacian</innerclass>
    <innerclass refid="classamrex_1_1MLNodeLinOp" prot="public">amrex::MLNodeLinOp</innerclass>
    <innerclass refid="classamrex_1_1MLNodeTensorLaplacian" prot="public">amrex::MLNodeTensorLaplacian</innerclass>
    <innerclass refid="classamrex_1_1MLPoisson" prot="public">amrex::MLPoisson</innerclass>
    <innerclass refid="classamrex_1_1MLTensorOp" prot="public">amrex::MLTensorOp</innerclass>
    <innerclass refid="classamrex_1_1MultiCutFab" prot="public">amrex::MultiCutFab</innerclass>
    <innerclass refid="classamrex_1_1MultiFab" prot="public">amrex::MultiFab</innerclass>
    <innerclass refid="classamrex_1_1MultiFabCopyDescriptor" prot="public">amrex::MultiFabCopyDescriptor</innerclass>
    <innerclass refid="classamrex_1_1MultiMask" prot="public">amrex::MultiMask</innerclass>
    <innerclass refid="classamrex_1_1MultiMaskIter" prot="public">amrex::MultiMaskIter</innerclass>
    <innerclass refid="structamrex_1_1NeighborCode" prot="public">amrex::NeighborCode</innerclass>
    <innerclass refid="structamrex_1_1NeighborData" prot="public">amrex::NeighborData</innerclass>
    <innerclass refid="classamrex_1_1NeighborList" prot="public">amrex::NeighborList</innerclass>
    <innerclass refid="classamrex_1_1NeighborParticleContainer" prot="public">amrex::NeighborParticleContainer</innerclass>
    <innerclass refid="structamrex_1_1Neighbors" prot="public">amrex::Neighbors</innerclass>
    <innerclass refid="structamrex_1_1NeighborUnpackPolicy" prot="public">amrex::NeighborUnpackPolicy</innerclass>
    <innerclass refid="classamrex_1_1NFilesIter" prot="public">amrex::NFilesIter</innerclass>
    <innerclass refid="classamrex_1_1NodalProjector" prot="public">amrex::NodalProjector</innerclass>
    <innerclass refid="classamrex_1_1NodeBilinear" prot="public">amrex::NodeBilinear</innerclass>
    <innerclass refid="structamrex_1_1NullInterpHook" prot="public">amrex::NullInterpHook</innerclass>
    <innerclass refid="structamrex_1_1NumComps" prot="public">amrex::NumComps</innerclass>
    <innerclass refid="classamrex_1_1OrderedBoxes" prot="public">amrex::OrderedBoxes</innerclass>
    <innerclass refid="classamrex_1_1Orientation" prot="public">amrex::Orientation</innerclass>
    <innerclass refid="classamrex_1_1OrientationIter" prot="public">amrex::OrientationIter</innerclass>
    <innerclass refid="classamrex_1_1ParConstIter" prot="public">amrex::ParConstIter</innerclass>
    <innerclass refid="classamrex_1_1ParGDB" prot="public">amrex::ParGDB</innerclass>
    <innerclass refid="classamrex_1_1ParGDBBase" prot="public">amrex::ParGDBBase</innerclass>
    <innerclass refid="classamrex_1_1ParIter" prot="public">amrex::ParIter</innerclass>
    <innerclass refid="classamrex_1_1ParIterBase" prot="public">amrex::ParIterBase</innerclass>
    <innerclass refid="classamrex_1_1ParmParse" prot="public">amrex::ParmParse</innerclass>
    <innerclass refid="structamrex_1_1Particle" prot="public">amrex::Particle</innerclass>
    <innerclass refid="structamrex_1_1ParticleBase" prot="public">amrex::ParticleBase</innerclass>
    <innerclass refid="structamrex_1_1ParticleBase_3_01T_00_010_00_010_01_4" prot="public">amrex::ParticleBase&lt; T, 0, 0 &gt;</innerclass>
    <innerclass refid="structamrex_1_1ParticleBase_3_01T_00_010_00_01NInt_01_4" prot="public">amrex::ParticleBase&lt; T, 0, NInt &gt;</innerclass>
    <innerclass refid="structamrex_1_1ParticleBase_3_01T_00_01NReal_00_010_01_4" prot="public">amrex::ParticleBase&lt; T, NReal, 0 &gt;</innerclass>
    <innerclass refid="classamrex_1_1ParticleBufferMap" prot="public">amrex::ParticleBufferMap</innerclass>
    <innerclass refid="structamrex_1_1ParticleCommData" prot="public">amrex::ParticleCommData</innerclass>
    <innerclass refid="classamrex_1_1ParticleContainer" prot="public">amrex::ParticleContainer</innerclass>
    <innerclass refid="classamrex_1_1ParticleContainerBase" prot="public">amrex::ParticleContainerBase</innerclass>
    <innerclass refid="structamrex_1_1ParticleCopyOp" prot="public">amrex::ParticleCopyOp</innerclass>
    <innerclass refid="structamrex_1_1ParticleCopyPlan" prot="public">amrex::ParticleCopyPlan</innerclass>
    <innerclass refid="structamrex_1_1ParticleCPUWrapper" prot="public">amrex::ParticleCPUWrapper</innerclass>
    <innerclass refid="structamrex_1_1ParticleIDWrapper" prot="public">amrex::ParticleIDWrapper</innerclass>
    <innerclass refid="structamrex_1_1ParticleInitType" prot="public">amrex::ParticleInitType</innerclass>
    <innerclass refid="classamrex_1_1ParticleLocator" prot="public">amrex::ParticleLocator</innerclass>
    <innerclass refid="structamrex_1_1ParticleLocData" prot="public">amrex::ParticleLocData</innerclass>
    <innerclass refid="structamrex_1_1ParticleTile" prot="public">amrex::ParticleTile</innerclass>
    <innerclass refid="structamrex_1_1ParticleTileData" prot="public">amrex::ParticleTileData</innerclass>
    <innerclass refid="classamrex_1_1PCInterp" prot="public">amrex::PCInterp</innerclass>
    <innerclass refid="classamrex_1_1Periodicity" prot="public">amrex::Periodicity</innerclass>
    <innerclass refid="classamrex_1_1PETScABecLap" prot="public">amrex::PETScABecLap</innerclass>
    <innerclass refid="classamrex_1_1PhysBCFunct" prot="public">amrex::PhysBCFunct</innerclass>
    <innerclass refid="classamrex_1_1PhysBCFunctNoOp" prot="public">amrex::PhysBCFunctNoOp</innerclass>
    <innerclass refid="classamrex_1_1PinnedArenaAllocator" prot="public">amrex::PinnedArenaAllocator</innerclass>
    <innerclass refid="classamrex_1_1PlotFileData" prot="public">amrex::PlotFileData</innerclass>
    <innerclass refid="classamrex_1_1PlotFileDataImpl" prot="public">amrex::PlotFileDataImpl</innerclass>
    <innerclass refid="structamrex_1_1Plus" prot="public">amrex::Plus</innerclass>
    <innerclass refid="classamrex_1_1PODVector" prot="public">amrex::PODVector</innerclass>
    <innerclass refid="classamrex_1_1PolymorphicAllocator" prot="public">amrex::PolymorphicAllocator</innerclass>
    <innerclass refid="structamrex_1_1PolymorphicArray4" prot="public">amrex::PolymorphicArray4</innerclass>
    <innerclass refid="classamrex_1_1Print" prot="public">amrex::Print</innerclass>
    <innerclass refid="classamrex_1_1PrintToFile" prot="public">amrex::PrintToFile</innerclass>
    <innerclass refid="structamrex_1_1RandomEngine" prot="public">amrex::RandomEngine</innerclass>
    <innerclass refid="classamrex_1_1RealBox" prot="public">amrex::RealBox</innerclass>
    <innerclass refid="classamrex_1_1RealDescriptor" prot="public">amrex::RealDescriptor</innerclass>
    <innerclass refid="classamrex_1_1RealVect" prot="public">amrex::RealVect</innerclass>
    <innerclass refid="structamrex_1_1RedistributeUnpackPolicy" prot="public">amrex::RedistributeUnpackPolicy</innerclass>
    <innerclass refid="classamrex_1_1ReduceData" prot="public">amrex::ReduceData</innerclass>
    <innerclass refid="structamrex_1_1ReduceOpLogicalAnd" prot="public">amrex::ReduceOpLogicalAnd</innerclass>
    <innerclass refid="structamrex_1_1ReduceOpLogicalOr" prot="public">amrex::ReduceOpLogicalOr</innerclass>
    <innerclass refid="structamrex_1_1ReduceOpMax" prot="public">amrex::ReduceOpMax</innerclass>
    <innerclass refid="structamrex_1_1ReduceOpMin" prot="public">amrex::ReduceOpMin</innerclass>
    <innerclass refid="classamrex_1_1ReduceOps" prot="public">amrex::ReduceOps</innerclass>
    <innerclass refid="structamrex_1_1ReduceOpSum" prot="public">amrex::ReduceOpSum</innerclass>
    <innerclass refid="structamrex_1_1RunOnGpu" prot="public">amrex::RunOnGpu</innerclass>
    <innerclass refid="structamrex_1_1SparseBinIteratorFactory" prot="public">amrex::SparseBinIteratorFactory</innerclass>
    <innerclass refid="classamrex_1_1SparseBins" prot="public">amrex::SparseBins</innerclass>
    <innerclass refid="classamrex_1_1SplineDistFcnElement2d" prot="public">amrex::SplineDistFcnElement2d</innerclass>
    <innerclass refid="structamrex_1_1SrcComp" prot="public">amrex::SrcComp</innerclass>
    <innerclass refid="classamrex_1_1StateData" prot="public">amrex::StateData</innerclass>
    <innerclass refid="classamrex_1_1StateDataPhysBCFunct" prot="public">amrex::StateDataPhysBCFunct</innerclass>
    <innerclass refid="classamrex_1_1StateDescriptor" prot="public">amrex::StateDescriptor</innerclass>
    <innerclass refid="classamrex_1_1STLtools" prot="public">amrex::STLtools</innerclass>
    <innerclass refid="classamrex_1_1StreamRetry" prot="public">amrex::StreamRetry</innerclass>
    <innerclass refid="structamrex_1_1StructOfArrays" prot="public">amrex::StructOfArrays</innerclass>
    <innerclass refid="classamrex_1_1TagBox" prot="public">amrex::TagBox</innerclass>
    <innerclass refid="classamrex_1_1TagBoxArray" prot="public">amrex::TagBoxArray</innerclass>
    <innerclass refid="classamrex_1_1TinyProfiler" prot="public">amrex::TinyProfiler</innerclass>
    <innerclass refid="classamrex_1_1TinyProfileRegion" prot="public">amrex::TinyProfileRegion</innerclass>
    <innerclass refid="classamrex_1_1TracerParticleContainer" prot="public">amrex::TracerParticleContainer</innerclass>
    <innerclass refid="classamrex_1_1Vector" prot="public">amrex::Vector</innerclass>
    <innerclass refid="classamrex_1_1VisMF" prot="public">amrex::VisMF</innerclass>
    <innerclass refid="classamrex_1_1WeightedBox" prot="public">amrex::WeightedBox</innerclass>
    <innerclass refid="classamrex_1_1WeightedBoxList" prot="public">amrex::WeightedBoxList</innerclass>
    <innerclass refid="structamrex_1_1XDim3" prot="public">amrex::XDim3</innerclass>
    <innerclass refid="classamrex_1_1XYPlotDataList" prot="public">amrex::XYPlotDataList</innerclass>
    <innerclass refid="classamrex_1_1XYPlotDataListLink" prot="public">amrex::XYPlotDataListLink</innerclass>
    <innerclass refid="classamrex_1_1YAFluxRegister" prot="public">amrex::YAFluxRegister</innerclass>
    <innernamespace refid="namespaceamrex_1_1algoim">amrex::algoim</innernamespace>
    <innernamespace refid="namespaceamrex_1_1Amrvis">amrex::Amrvis</innernamespace>
    <innernamespace refid="namespaceamrex_1_1AsyncOut">amrex::AsyncOut</innernamespace>
    <innernamespace refid="namespaceamrex_1_1detail">amrex::detail</innernamespace>
    <innernamespace refid="namespaceamrex_1_1disabled">amrex::disabled</innernamespace>
    <innernamespace refid="namespaceamrex_1_1EB2">amrex::EB2</innernamespace>
    <innernamespace refid="namespaceamrex_1_1Extrapolater">amrex::Extrapolater</innernamespace>
    <innernamespace refid="namespaceamrex_1_1FileSystem">amrex::FileSystem</innernamespace>
    <innernamespace refid="namespaceamrex_1_1fudetail">amrex::fudetail</innernamespace>
    <innernamespace refid="namespaceamrex_1_1Gpu">amrex::Gpu</innernamespace>
    <innernamespace refid="namespaceamrex_1_1HostDevice">amrex::HostDevice</innernamespace>
    <innernamespace refid="namespaceamrex_1_1InSituUtils">amrex::InSituUtils</innernamespace>
    <innernamespace refid="namespaceamrex_1_1Lazy">amrex::Lazy</innernamespace>
    <innernamespace refid="namespaceamrex_1_1machine">amrex::machine</innernamespace>
    <innernamespace refid="namespaceamrex_1_1Math">amrex::Math</innernamespace>
    <innernamespace refid="namespaceamrex_1_1MFUtil">amrex::MFUtil</innernamespace>
    <innernamespace refid="namespaceamrex_1_1NonLocalBC">amrex::NonLocalBC</innernamespace>
    <innernamespace refid="namespaceamrex_1_1OpenMP">amrex::OpenMP</innernamespace>
    <innernamespace refid="namespaceamrex_1_1Order">amrex::Order</innernamespace>
    <innernamespace refid="namespaceamrex_1_1ParallelAllGather">amrex::ParallelAllGather</innernamespace>
    <innernamespace refid="namespaceamrex_1_1ParallelAllReduce">amrex::ParallelAllReduce</innernamespace>
    <innernamespace refid="namespaceamrex_1_1ParallelContext">amrex::ParallelContext</innernamespace>
    <innernamespace refid="namespaceamrex_1_1ParallelDescriptor">amrex::ParallelDescriptor</innernamespace>
    <innernamespace refid="namespaceamrex_1_1ParallelGather">amrex::ParallelGather</innernamespace>
    <innernamespace refid="namespaceamrex_1_1ParallelReduce">amrex::ParallelReduce</innernamespace>
    <innernamespace refid="namespaceamrex_1_1particle__detail">amrex::particle_detail</innernamespace>
    <innernamespace refid="namespaceamrex_1_1Reduce">amrex::Reduce</innernamespace>
    <innernamespace refid="namespaceamrex_1_1Scan">amrex::Scan</innernamespace>
    <innernamespace refid="namespaceamrex_1_1system">amrex::system</innernamespace>
    <innernamespace refid="namespaceamrex_1_1tri__geom__ops">amrex::tri_geom_ops</innernamespace>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="namespaceamrex_1a2f30e076962c1c148d279b63851d80df" prot="public" static="no">
        <name>InterpEM_t</name>
        <enumvalue id="namespaceamrex_1a2f30e076962c1c148d279b63851d80dfaea241117e55edc2764d31a18a4740ff3" prot="public">
          <name>InterpE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a2f30e076962c1c148d279b63851d80dfa9d55599aaee42c677bcd175e50bebbca" prot="public">
          <name>InterpB</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil.H" line="218" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil.H" bodystart="218" bodyend="218"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceamrex_1abd2e3d292645433cefc947725585f87a" prot="public" static="no">
        <name>FabType</name>
        <enumvalue id="namespaceamrex_1abd2e3d292645433cefc947725585f87aaa72ed46ebb1280e51746ce28ded53942" prot="public">
          <name>covered</name>
          <initializer>= -1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1abd2e3d292645433cefc947725585f87aaaf37d08ae228a87dc6b265fd1019c97d" prot="public">
          <name>regular</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1abd2e3d292645433cefc947725585f87aa928c4a180152a4857751871f38d5f9ef" prot="public">
          <name>singlevalued</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1abd2e3d292645433cefc947725585f87aaaf8a062dbd0dba47618be245dc266806" prot="public">
          <name>multivalued</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1abd2e3d292645433cefc947725585f87aa5e543256c480ac577d30f76f9120eb74" prot="public">
          <name>undefined</name>
          <initializer>= 100</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabFactory.H" line="17" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabFactory.H" bodystart="17" bodyend="23"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceamrex_1a9f13be15ca764e94680df68d8b9505d6" prot="public" static="no">
        <name>FillType</name>
        <enumvalue id="namespaceamrex_1a9f13be15ca764e94680df68d8b9505d6a3de07fb14bde47411225509d67e0bda1" prot="public">
          <name>FillLocally</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a9f13be15ca764e94680df68d8b9505d6a8d7828a9196bfb084013996640e84bd4" prot="public">
          <name>FillRemotely</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a9f13be15ca764e94680df68d8b9505d6a86e193c43ac00a14b0943baf3433c6d0" prot="public">
          <name>Unfillable</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This enum and the <ref refid="structamrex_1_1FabCopyDescriptor" kindref="compound">FabCopyDescriptor</ref> class should really be nested in <ref refid="classamrex_1_1FabArrayCopyDescriptor" kindref="compound">FabArrayCopyDescriptor</ref> (not done for portability reasons). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FACopyDescriptor.H" line="16" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FACopyDescriptor.H" bodystart="16" bodyend="16"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" prot="public" static="no">
        <name>RunOn</name>
        <enumvalue id="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2a3432ca64f06615abf07ab44c10cada38" prot="public">
          <name>Gpu</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2a54c82ef76ecbbd4c2293e09bae01b54e" prot="public">
          <name>Cpu</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2ae0ac20adce6ffee48c7151b070aa5737" prot="public">
          <name>Device</name>
          <initializer>=Gpu</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2ac2ca16d048ec66e04bca283eab048ec2" prot="public">
          <name>Host</name>
          <initializer>=Cpu</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuControl.H" line="63" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuControl.H" bodystart="63" bodyend="63"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceamrex_1a0a36c65d0681a832330b2812f16786a6" prot="public" static="no">
        <name>MakeType</name>
        <enumvalue id="namespaceamrex_1a0a36c65d0681a832330b2812f16786a6a1477998364b5f02d6ce68e3da29be1ba" prot="public">
          <name>make_alias</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a0a36c65d0681a832330b2812f16786a6a0a2bb4bcb2051ae3a06f94b5c1768e90" prot="public">
          <name>make_deep_copy</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MakeType.H" line="7" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MakeType.H" bodystart="7" bodyend="7"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceamrex_1a8de829410ed15dbc56e4dafc9bc6ea69" prot="public" static="no">
        <name>Direction</name>
        <enumvalue id="namespaceamrex_1a8de829410ed15dbc56e4dafc9bc6ea69a68b0c60ae4f5670ee8d0ad5dda84d0fd" prot="public">
          <name>AMREX_D_DECL</name>
          <initializer>=(x = 0, y = 1, z = 2)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.H" line="14" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.H" bodystart="14" bodyend="14"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceamrex_1a7de82761ed632e5ee0b9f912c856aebc" prot="public" static="no">
        <name>EBSupport</name>
        <enumvalue id="namespaceamrex_1a7de82761ed632e5ee0b9f912c856aebca334c4a4c42fdb79d7ebc3e73b517e6f8" prot="public">
          <name>none</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a7de82761ed632e5ee0b9f912c856aebcaf17aaabc20bfe045075927934fed52d2" prot="public">
          <name>basic</name>
          <initializer>= 1</initializer>
          <briefdescription>
<para><ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref>. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a7de82761ed632e5ee0b9f912c856aebca210ab9e731c9c36c2c38db15c28a8d1c" prot="public">
          <name>volume</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para><itemizedlist>
<listitem><para>volume fraction </para></listitem></itemizedlist>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a7de82761ed632e5ee0b9f912c856aebcae9dc924f238fa6cc29465942875fe8f0" prot="public">
          <name>full</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para><itemizedlist>
<listitem><para>area fraction, boundary centroids and face centroids </para></listitem></itemizedlist>
</para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBSupport.H" line="7" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBSupport.H" bodystart="7" bodyend="12"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceamrex_1a9303c93b47b7839de8ce552cb7cb21c4" prot="public" static="no">
        <name>BottomSolver</name>
        <enumvalue id="namespaceamrex_1a9303c93b47b7839de8ce552cb7cb21c4a7a1920d61156abc05a60135aefe8bc67" prot="public">
          <name>Default</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a9303c93b47b7839de8ce552cb7cb21c4aa24fa9dac0801f55f51de06cd8f9d132" prot="public">
          <name>smoother</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a9303c93b47b7839de8ce552cb7cb21c4ae123b37d2b5fd373237e049a1e68ca13" prot="public">
          <name>bicgstab</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a9303c93b47b7839de8ce552cb7cb21c4a6e9cf3eef65da697796cf33f27eb0f57" prot="public">
          <name>cg</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a9303c93b47b7839de8ce552cb7cb21c4a17ae71b06faf01831e130c5f94157064" prot="public">
          <name>bicgcg</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a9303c93b47b7839de8ce552cb7cb21c4a8d94447f423b03d332649d28ef49bfdb" prot="public">
          <name>cgbicg</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a9303c93b47b7839de8ce552cb7cb21c4a9d87b5177c778e77c47e29f2b536cd1b" prot="public">
          <name>hypre</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a9303c93b47b7839de8ce552cb7cb21c4a1c626ad40ecbe4497cfe809fbc98f31f" prot="public">
          <name>petsc</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="24" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="24" bodyend="26"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespaceamrex_1a046a83e139b61c9ec447bd89eed50967" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* amrex::DeriveFunc) (amrex::Real *data, AMREX_ARLIM_P(dlo), AMREX_ARLIM_P(dhi), const int *nvar, const amrex::Real *compdat, AMREX_ARLIM_P(compdat_lo), AMREX_ARLIM_P(compdat_hi), const int *ncomp, const int *lo, const int *hi, const int *domain_lo, const int *domain_hi, const amrex::Real *delta, const amrex::Real *xlo, const amrex::Real *time, const amrex::Real *dt, const int *bcrec, const int *level, const int *grid_no)</definition>
        <argsstring>)(amrex::Real *data, AMREX_ARLIM_P(dlo), AMREX_ARLIM_P(dhi), const int *nvar, const amrex::Real *compdat, AMREX_ARLIM_P(compdat_lo), AMREX_ARLIM_P(compdat_hi), const int *ncomp, const int *lo, const int *hi, const int *domain_lo, const int *domain_hi, const amrex::Real *delta, const amrex::Real *xlo, const amrex::Real *time, const amrex::Real *dt, const int *bcrec, const int *level, const int *grid_no)</argsstring>
        <name>DeriveFunc</name>
        <briefdescription>
<para>Type of extern &quot;C&quot; function called by <ref refid="classamrex_1_1DeriveRec" kindref="compound">DeriveRec</ref> to compute derived quantity. </para>        </briefdescription>
        <detaileddescription>
<para>Note that AMREX_ARLIM_P will be preprocessed into DIM const int&amp;&apos;s.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="AMReX__ArrayLim_8H_1af53c6334de4f960ca760f7ea802e1e98" kindref="member">AMREX_ARLIM_P(dlo)</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="AMReX__ArrayLim_8H_1af53c6334de4f960ca760f7ea802e1e98" kindref="member">AMREX_ARLIM_P(dhi)</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nvar</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>compdat</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="AMReX__ArrayLim_8H_1af53c6334de4f960ca760f7ea802e1e98" kindref="member">AMREX_ARLIM_P(compdat_lo)</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="AMReX__ArrayLim_8H_1af53c6334de4f960ca760f7ea802e1e98" kindref="member">AMREX_ARLIM_P(compdat_hi)</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lo</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hi</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>domain_lo</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>domain_hi</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delta</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xlo</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>time</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dt</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bcrec</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>grid_no</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" line="43" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1abf838b25d605cefbf6150bc883f4741d" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* amrex::DeriveFunc3D) (amrex::Real *data, const int *dlo, const int *dhi, const int *nvar, const amrex::Real *compdat, const int *clo, const int *chi, const int *ncomp, const int *lo, const int *hi, const int *domain_lo, const int *domain_hi, const amrex::Real *delta, const amrex::Real *xlo, const amrex::Real *time, const amrex::Real *dt, const int *bcrec, const int *level, const int *grid_no)</definition>
        <argsstring>)(amrex::Real *data, const int *dlo, const int *dhi, const int *nvar, const amrex::Real *compdat, const int *clo, const int *chi, const int *ncomp, const int *lo, const int *hi, const int *domain_lo, const int *domain_hi, const amrex::Real *delta, const amrex::Real *xlo, const amrex::Real *time, const amrex::Real *dt, const int *bcrec, const int *level, const int *grid_no)</argsstring>
        <name>DeriveFunc3D</name>
        <briefdescription>
<para>This is dimension agnostic. For example, dlo always has three elements. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dlo</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dhi</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nvar</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>compdat</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>clo</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>chi</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lo</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hi</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>domain_lo</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>domain_hi</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delta</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xlo</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>time</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dt</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bcrec</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>grid_no</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" line="77" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1a83e8cbe20f4d807987849da5431ba2c5" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* amrex::DeriveFuncFab) (const amrex::Box &amp;bx, amrex::FArrayBox &amp;derfab, int dcomp, int ncomp, const amrex::FArrayBox &amp;datafab, const amrex::Geometry &amp;geomdata, amrex::Real time, const int *bcrec, int level)</definition>
        <argsstring>)(const amrex::Box &amp;bx, amrex::FArrayBox &amp;derfab, int dcomp, int ncomp, const amrex::FArrayBox &amp;datafab, const amrex::Geometry &amp;geomdata, amrex::Real time, const int *bcrec, int level)</argsstring>
        <name>DeriveFuncFab</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" line="87" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1affc0f9ed4054b1577a0ccf370e948ab3" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* amrex::BndryFuncFabDefault) (Box const  &amp;bx, FArrayBox &amp;data, const int dcomp, const int numcomp, Geometry const  &amp;geom, const Real time, const Vector&lt; BCRec &gt; &amp;bcr, const int bcomp, const int scomp)</definition>
        <argsstring>)(Box const &amp;bx, FArrayBox &amp;data, const int dcomp, const int numcomp, Geometry const &amp;geom, const Real time, const Vector&lt; BCRec &gt; &amp;bcr, const int bcomp, const int scomp)</argsstring>
        <name>BndryFuncFabDefault</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.H" line="17" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.H" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1accd616989af467165f35b0b213ee2e1a" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* amrex::ErrorFuncDefault) (int *tag, AMREX_ARLIM_P(tlo), AMREX_ARLIM_P(thi), const int *tagval, const int *clearval, amrex::Real *data, AMREX_ARLIM_P(data_lo), AMREX_ARLIM_P(data_hi), const int *lo, const int *hi, const int *nvar, const int *domain_lo, const int *domain_hi, const amrex::Real *dx, const amrex::Real *xlo, const amrex::Real *prob_lo, const amrex::Real *time, const int *level)</definition>
        <argsstring>)(int *tag, AMREX_ARLIM_P(tlo), AMREX_ARLIM_P(thi), const int *tagval, const int *clearval, amrex::Real *data, AMREX_ARLIM_P(data_lo), AMREX_ARLIM_P(data_hi), const int *lo, const int *hi, const int *nvar, const int *domain_lo, const int *domain_hi, const amrex::Real *dx, const amrex::Real *xlo, const amrex::Real *prob_lo, const amrex::Real *time, const int *level)</argsstring>
        <name>ErrorFuncDefault</name>
        <briefdescription>
<para>Type of extern &quot;C&quot; function called by <ref refid="classamrex_1_1ErrorRec" kindref="compound">ErrorRec</ref> to do tagging of cells for refinement. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tlo</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>thi</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tagval</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>clearval</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data_lo</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data_hi</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lo</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hi</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nvar</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>domain_lo</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>domain_hi</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dx</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xlo</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prob_lo</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>time</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_ErrorList.H" line="44" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_ErrorList.H" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1a712777d91904823bb5241758651b9709" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* amrex::ErrorFunc2Default) (int *tag, AMREX_ARLIM_P(tlo), AMREX_ARLIM_P(thi), const int *tagval, const int *clearval, amrex::Real *data, AMREX_ARLIM_P(data_lo), AMREX_ARLIM_P(data_hi), const int *lo, const int *hi, const int *nvar, const int *domain_lo, const int *domain_hi, const amrex::Real *dx, const int *level, const amrex::Real *avg)</definition>
        <argsstring>)(int *tag, AMREX_ARLIM_P(tlo), AMREX_ARLIM_P(thi), const int *tagval, const int *clearval, amrex::Real *data, AMREX_ARLIM_P(data_lo), AMREX_ARLIM_P(data_hi), const int *lo, const int *hi, const int *nvar, const int *domain_lo, const int *domain_hi, const amrex::Real *dx, const int *level, const amrex::Real *avg)</argsstring>
        <name>ErrorFunc2Default</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_ErrorList.H" line="53" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_ErrorList.H" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1a198cab9c3268f289bedd23e83dd7e95d" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* amrex::ErrorFunc3DDefault) (int *tag, const int *tlo, const int *thi, const int *tagval, const int *clearval, amrex::Real *data, const int *data_lo, const int *data_hi, const int *lo, const int *hi, const int *nvar, const int *domain_lo, const int *domain_hi, const amrex::Real *dx, const amrex::Real *xlo, const amrex::Real *prob_lo, const amrex::Real *time, const int *level)</definition>
        <argsstring>)(int *tag, const int *tlo, const int *thi, const int *tagval, const int *clearval, amrex::Real *data, const int *data_lo, const int *data_hi, const int *lo, const int *hi, const int *nvar, const int *domain_lo, const int *domain_hi, const amrex::Real *dx, const amrex::Real *xlo, const amrex::Real *prob_lo, const amrex::Real *time, const int *level)</argsstring>
        <name>ErrorFunc3DDefault</name>
        <briefdescription>
<para>Dimension agnostic version that always has three elements. Note that this is only implemented for the ErrorFunc class, not ErrorFunc2. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tlo</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>thi</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tagval</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>clearval</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data_lo</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data_hi</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lo</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hi</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nvar</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>domain_lo</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>domain_hi</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dx</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xlo</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prob_lo</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>time</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_ErrorList.H" line="84" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_ErrorList.H" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1a436b95e95cc4994a7c179e3cebe42ea6" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* amrex::PTR_TO_VOID_FUNC) (void)</definition>
        <argsstring>)(void)</argsstring>
        <name>PTR_TO_VOID_FUNC</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" line="37" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1aa944154cc363fe5103f6638e3726d2ca" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* amrex::ErrorHandler) (const char *msg)</definition>
        <argsstring>)(const char *msg)</argsstring>
        <name>ErrorHandler</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" line="38" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1afe930d74045516fece8591f173e57007" prot="public" static="no">
        <type>std::array&lt; T, N &gt;</type>
        <definition>using amrex::Array = typedef std::array&lt;T,N&gt;</definition>
        <argsstring></argsstring>
        <name>Array</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="25" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1a9de48c04056551924746c42f9eda3c8f" prot="public" static="no">
        <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; Real, AMREX_SPACEDIM &gt;</type>
        <definition>using amrex::RealArray = typedef Array&lt;Real, AMREX_SPACEDIM&gt;</definition>
        <argsstring></argsstring>
        <name>RealArray</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="27" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1a2b58b8c81ca5e47c17a861e86354eba1" prot="public" static="no">
        <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, AMREX_SPACEDIM &gt;</type>
        <definition>using amrex::IntArray = typedef Array&lt;int , AMREX_SPACEDIM&gt;</definition>
        <argsstring></argsstring>
        <name>IntArray</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="28" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1a9f4d0df7602cb80e9c2217dae6b9281d" prot="public" static="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>typedef int amrex::key_table_type</definition>
        <argsstring></argsstring>
        <name>key_table_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseUmap.H" line="32" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseUmap.H" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1ac3aaf3d47b0fc6e69f9405fcebcdc4fe" prot="public" static="no">
        <type>std::runtime_error</type>
        <definition>using amrex::RuntimeError = typedef std::runtime_error</definition>
        <argsstring></argsstring>
        <name>RuntimeError</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Exception.H" line="9" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Exception.H" bodystart="9" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1abda821661019fb0a77eb3a9706dc7330" prot="public" static="no">
        <type><ref refid="classamrex_1_1DefaultFabFactory" kindref="compound">DefaultFabFactory</ref>&lt; <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &gt;</type>
        <definition>using amrex::FArrayBoxFactory = typedef DefaultFabFactory&lt;FArrayBox&gt;</definition>
        <argsstring></argsstring>
        <name>FArrayBoxFactory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FArrayBox.H" line="496" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FArrayBox.H" bodystart="496" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1aa2b9c07eea8f0178a1973357cf04ea62" prot="public" static="no">
        <type>std::allocator&lt; T &gt;</type>
        <definition>using amrex::DefaultAllocator = typedef std::allocator&lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>DefaultAllocator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAllocators.H" line="187" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAllocators.H" bodystart="187" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1ad9f3a92c061d8ad8de35370ed5ce28b8" prot="public" static="no">
        <type>typename <ref refid="structamrex_1_1makeIndexSequenceHelper" kindref="compound">makeIndexSequenceHelper</ref>&lt; N &gt;::type</type>
        <definition>using amrex::makeIndexSequence = typedef typename makeIndexSequenceHelper&lt;N&gt;::type</definition>
        <argsstring></argsstring>
        <name>makeIndexSequence</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IndexSequence.H" line="24" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IndexSequence.H" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1a270e267cbd0e472dd8297d46a9c76854" prot="public" static="no">
        <type><ref refid="classamrex_1_1FabArrayId" kindref="compound">FabArrayId</ref></type>
        <definition>typedef FabArrayId amrex::MultiFabId</definition>
        <argsstring></argsstring>
        <name>MultiFabId</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFCopyDescriptor.H" line="13" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFCopyDescriptor.H" bodystart="11" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1a395b6c263aecc344bf7648fe2d8d75cf" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* amrex::BndryFuncDefault) (Real *data, AMREX_ARLIM_P(lo), AMREX_ARLIM_P(hi), const int *dom_lo, const int *dom_hi, const Real *dx, const Real *grd_lo, const Real *time, const int *bc)</definition>
        <argsstring>)(Real *data, AMREX_ARLIM_P(lo), AMREX_ARLIM_P(hi), const int *dom_lo, const int *dom_hi, const Real *dx, const Real *grd_lo, const Real *time, const int *bc)</argsstring>
        <name>BndryFuncDefault</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PhysBCFunct.H" line="17" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PhysBCFunct.H" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1ab0cdf132a72bb586fa96bbdc53a19149" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* amrex::BndryFunc3DDefault) (Real *data, const int *lo, const int *hi, const int *dom_lo, const int *dom_hi, const Real *dx, const Real *grd_lo, const Real *time, const int *bc)</definition>
        <argsstring>)(Real *data, const int *lo, const int *hi, const int *dom_lo, const int *dom_hi, const Real *dx, const Real *grd_lo, const Real *time, const int *bc)</argsstring>
        <name>BndryFunc3DDefault</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PhysBCFunct.H" line="21" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PhysBCFunct.H" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1a88dd51c88bb54ed73ede55336a7519c3" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* amrex::UserFillBox) (Box const  &amp;bx, Array4&lt; Real &gt; const  &amp;dest, const int dcomp, const int numcomp, GeometryData const  &amp;geom, const Real time, const BCRec *bcr, const int bcomp, const int orig_comp)</definition>
        <argsstring>)(Box const &amp;bx, Array4&lt; Real &gt; const &amp;dest, const int dcomp, const int numcomp, GeometryData const &amp;geom, const Real time, const BCRec *bcr, const int bcomp, const int orig_comp)</argsstring>
        <name>UserFillBox</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PhysBCFunct.H" line="27" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PhysBCFunct.H" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1a00604a127d1bcc6545bea88e8aa906c8" prot="public" static="no">
        <type>std::tuple&lt; Ts... &gt;</type>
        <definition>using amrex::Tuple = typedef std::tuple&lt;Ts...&gt;</definition>
        <argsstring></argsstring>
        <name>Tuple</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Tuple.H" line="19" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Tuple.H" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" prot="public" static="no">
        <type>typename std::enable_if&lt; B, T &gt;::type</type>
        <definition>using amrex::EnableIf_t = typedef typename std::enable_if&lt;B,T&gt;::type</definition>
        <argsstring></argsstring>
        <name>EnableIf_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TypeTraits.H" line="40" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TypeTraits.H" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1ae337b46a7ca54b353861635503079536" prot="public" static="no">
        <type>std::conditional&lt; std::chrono::high_resolution_clock::is_steady, std::chrono::high_resolution_clock, std::chrono::steady_clock &gt;::type</type>
        <definition>using amrex::MaxResSteadyClock = typedef std::conditional&lt;std::chrono::high_resolution_clock::is_steady, std::chrono::high_resolution_clock, std::chrono::steady_clock&gt;::type</definition>
        <argsstring></argsstring>
        <name>MaxResSteadyClock</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" line="246" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" bodystart="248" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1a2172ed493dfadbd34d5cdb72995f96af" prot="public" static="no">
        <type><ref refid="classamrex_1_1ParIter" kindref="compound">ParIter</ref>&lt; AMREX_SPACEDIM &gt;</type>
        <definition>using amrex::TracerParIter = typedef ParIter&lt;AMREX_SPACEDIM&gt;</definition>
        <argsstring></argsstring>
        <name>TracerParIter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_TracerParticles.H" line="34" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_TracerParticles.H" bodystart="34" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespaceamrex_1afdf427459e2b9a7718975c38a36d8be2" prot="public" static="yes" mutable="no">
        <type>constexpr Real</type>
        <definition>constexpr Real amrex::INVALID_TIME</definition>
        <argsstring></argsstring>
        <name>INVALID_TIME</name>
        <initializer>= -1.0e200_rt</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.cpp" line="21" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.cpp" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1a77d7d152de71abe1856e19ee2122a24a" prot="public" static="yes" mutable="no">
        <type>constexpr <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>constexpr int amrex::MFNEWDATA</definition>
        <argsstring></argsstring>
        <name>MFNEWDATA</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.cpp" line="24" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.cpp" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1a22e5d2b124fbc2a101b2538d589e2899" prot="public" static="yes" mutable="no">
        <type>constexpr <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>constexpr int amrex::MFOLDDATA</definition>
        <argsstring></argsstring>
        <name>MFOLDDATA</name>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.cpp" line="25" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.cpp" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1acf5df53eeb808ad11275f15efa7d4ab3" prot="public" static="yes" mutable="no">
        <type>const char *</type>
        <definition>const char* amrex::err_name[]</definition>
        <argsstring>[]</argsstring>
        <name>err_name</name>
        <initializer>= { &quot;Special&quot;, &quot;Standard&quot;, &quot;UseAverage&quot; }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_ErrorList.cpp" line="213" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_ErrorList.cpp" bodystart="213" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1add23b3df81e9353cea327552654d630b" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1PCInterp" kindref="compound">PCInterp</ref></type>
        <definition>PCInterp amrex::pc_interp</definition>
        <argsstring></argsstring>
        <name>pc_interp</name>
        <briefdescription>
<para>CONSTRUCT A GLOBAL OBJECT OF EACH VERSION. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interpolater.cpp" line="33" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interpolater.cpp" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1a7655c2dbeff4b92d06ddf5d3f964e7b2" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1NodeBilinear" kindref="compound">NodeBilinear</ref></type>
        <definition>NodeBilinear amrex::node_bilinear_interp</definition>
        <argsstring></argsstring>
        <name>node_bilinear_interp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interpolater.cpp" line="34" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interpolater.cpp" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1af6271bbc97d9b2c15eb418a6e4024c76" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1FaceLinear" kindref="compound">FaceLinear</ref></type>
        <definition>FaceLinear amrex::face_linear_interp</definition>
        <argsstring></argsstring>
        <name>face_linear_interp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interpolater.cpp" line="35" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interpolater.cpp" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1a56316d7d561f65317664a3c83ab30efc" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1FaceDivFree" kindref="compound">FaceDivFree</ref></type>
        <definition>FaceDivFree amrex::face_divfree_interp</definition>
        <argsstring></argsstring>
        <name>face_divfree_interp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interpolater.cpp" line="36" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interpolater.cpp" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1acdf3882926f66513ad7885b4cd468233" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1CellConservativeLinear" kindref="compound">CellConservativeLinear</ref></type>
        <definition>CellConservativeLinear amrex::lincc_interp</definition>
        <argsstring></argsstring>
        <name>lincc_interp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interpolater.cpp" line="37" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interpolater.cpp" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1a5a7cd403bb1a4e3a44a90722f83f40f5" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1CellConservativeLinear" kindref="compound">CellConservativeLinear</ref></type>
        <definition>CellConservativeLinear amrex::cell_cons_interp</definition>
        <argsstring>(0)</argsstring>
        <name>cell_cons_interp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interpolater.cpp" line="38" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interpolater.H" bodystart="896" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1a5fa0044ab8f93865e1fc48bb78a6e5e8" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1CellBilinear" kindref="compound">CellBilinear</ref></type>
        <definition>CellBilinear amrex::cell_bilinear_interp</definition>
        <argsstring></argsstring>
        <name>cell_bilinear_interp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interpolater.cpp" line="41" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interpolater.cpp" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1ad21d1e8d053cd312ae67d9bd79b598ac" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1CellQuadratic" kindref="compound">CellQuadratic</ref></type>
        <definition>CellQuadratic amrex::quadratic_interp</definition>
        <argsstring></argsstring>
        <name>quadratic_interp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interpolater.cpp" line="42" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interpolater.cpp" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1aec5e350e7334dcbe6776eb60a1b77160" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1CellConservativeProtected" kindref="compound">CellConservativeProtected</ref></type>
        <definition>CellConservativeProtected amrex::protected_interp</definition>
        <argsstring></argsstring>
        <name>protected_interp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interpolater.cpp" line="43" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interpolater.cpp" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1a2a5decb8ebeab1e499c7c66e78a0eb07" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1CellConservativeQuartic" kindref="compound">CellConservativeQuartic</ref></type>
        <definition>CellConservativeQuartic amrex::quartic_interp</definition>
        <argsstring></argsstring>
        <name>quartic_interp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interpolater.cpp" line="44" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interpolater.cpp" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1a9a502210430a0780c1ee189758385a60" prot="public" static="no" mutable="no">
        <type>std::atomic&lt; Long &gt;</type>
        <definition>std::atomic&lt; Long &gt; amrex::atomic_total_bytes_allocated_in_fabs</definition>
        <argsstring></argsstring>
        <name>atomic_total_bytes_allocated_in_fabs</name>
        <initializer>{0L}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.cpp" line="13" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.cpp" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1a05893af4b8f7c472a5f0d5afe9fddcde" prot="public" static="no" mutable="no">
        <type>std::atomic&lt; Long &gt;</type>
        <definition>std::atomic&lt; Long &gt; amrex::atomic_total_bytes_allocated_in_fabs_hwm</definition>
        <argsstring></argsstring>
        <name>atomic_total_bytes_allocated_in_fabs_hwm</name>
        <initializer>{0L}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.cpp" line="14" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.cpp" bodystart="14" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1aaff9d22bb4535133682d1608e85655e0" prot="public" static="no" mutable="no">
        <type>std::atomic&lt; Long &gt;</type>
        <definition>std::atomic&lt; Long &gt; amrex::atomic_total_cells_allocated_in_fabs</definition>
        <argsstring></argsstring>
        <name>atomic_total_cells_allocated_in_fabs</name>
        <initializer>{0L}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.cpp" line="15" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.cpp" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1adc54dbf8448fdb9207beb1761e07b80d" prot="public" static="no" mutable="no">
        <type>std::atomic&lt; Long &gt;</type>
        <definition>std::atomic&lt; Long &gt; amrex::atomic_total_cells_allocated_in_fabs_hwm</definition>
        <argsstring></argsstring>
        <name>atomic_total_cells_allocated_in_fabs_hwm</name>
        <initializer>{0L}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.cpp" line="16" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.cpp" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1ad888998563a26e9b66682405b749228d" prot="public" static="no" mutable="no">
        <type>Long</type>
        <definition>Long amrex::private_total_bytes_allocated_in_fabs</definition>
        <argsstring></argsstring>
        <name>private_total_bytes_allocated_in_fabs</name>
        <initializer>= 0L</initializer>
        <briefdescription>
<para>total bytes at any given time </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.cpp" line="17" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.cpp" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1a62aee7a0bdbb6a783868e48a7c5c5750" prot="public" static="no" mutable="no">
        <type>Long</type>
        <definition>Long amrex::private_total_bytes_allocated_in_fabs_hwm</definition>
        <argsstring></argsstring>
        <name>private_total_bytes_allocated_in_fabs_hwm</name>
        <initializer>= 0L</initializer>
        <briefdescription>
<para>high-water-mark over a given interval </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.cpp" line="18" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.cpp" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1a404655e80fc045d69ad6aab7c2e67aed" prot="public" static="no" mutable="no">
        <type>Long</type>
        <definition>Long amrex::private_total_cells_allocated_in_fabs</definition>
        <argsstring></argsstring>
        <name>private_total_cells_allocated_in_fabs</name>
        <initializer>= 0L</initializer>
        <briefdescription>
<para>total cells at any given time </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.cpp" line="19" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.cpp" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1a0d15e184f35001014b0941ed211b16ad" prot="public" static="no" mutable="no">
        <type>Long</type>
        <definition>Long amrex::private_total_cells_allocated_in_fabs_hwm</definition>
        <argsstring></argsstring>
        <name>private_total_cells_allocated_in_fabs_hwm</name>
        <initializer>= 0L</initializer>
        <briefdescription>
<para>high-water-mark over a given interval </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.cpp" line="20" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.cpp" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" prot="public" static="no" mutable="no">
        <type>const</type>
        <definition>const amrex::int[]</definition>
        <argsstring>[]</argsstring>
        <name>int</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BLProfiler.cpp" line="1667" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BLProfiler.cpp" bodystart="1667" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1a4f43e2df85d0db8585e437a05c9c6a81" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::initialized</definition>
        <argsstring></argsstring>
        <name>initialized</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.cpp" line="31" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.cpp" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1adf03962600e13b4ecd73531bd77d0cf5" prot="public" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::verbose</definition>
        <argsstring></argsstring>
        <name>verbose</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.cpp" line="35" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.cpp" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1a3b82c3e2c727baf0805e10a006744bc0" prot="public" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::sfc_threshold</definition>
        <argsstring></argsstring>
        <name>sfc_threshold</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.cpp" line="36" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.cpp" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1a0dc972d04970bb21c8988fb02790526c" prot="public" static="no" mutable="no">
        <type>Real</type>
        <definition>Real amrex::max_efficiency</definition>
        <argsstring></argsstring>
        <name>max_efficiency</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.cpp" line="37" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.cpp" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1a6c6d85a2ab815c914d82842d370a03d3" prot="public" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::node_size</definition>
        <argsstring></argsstring>
        <name>node_size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.cpp" line="38" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.cpp" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1abd60428797a6f8b12bc87f94351665c2" prot="public" static="no" mutable="no">
        <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>const int amrex::BitsMax</definition>
        <argsstring></argsstring>
        <name>BitsMax</name>
        <initializer>= 8*sizeof(Long)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.cpp" line="401" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.cpp" bodystart="401" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1a4f06187236b4b28934f47fc5bffad56d" prot="public" static="no" mutable="no">
        <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>const int amrex::REVERSE_ORDER</definition>
        <argsstring></argsstring>
        <name>REVERSE_ORDER</name>
        <initializer>= 2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.cpp" line="402" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.cpp" bodystart="402" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1abac42537a3d9d5a2f6c6fac15f99f66c" prot="public" static="yes" mutable="no">
        <type>const char</type>
        <definition>const char amrex::sys_name[]</definition>
        <argsstring>[]</argsstring>
        <name>sys_name</name>
        <initializer>= &quot;IEEE&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FArrayBox.cpp" line="36" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FArrayBox.cpp" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1a213d84de93dd842b45e3deef04de2d08" prot="public" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool amrex::finalize_verbose</definition>
        <argsstring></argsstring>
        <name>finalize_verbose</name>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParmParse.cpp" line="33" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParmParse.cpp" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1ae58ed08a7ada5774ab9f0a1cc892113c" prot="public" static="yes" mutable="no">
        <type>std::string</type>
        <definition>std::string amrex::s_pout_filename</definition>
        <argsstring></argsstring>
        <name>s_pout_filename</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_parstream.cpp" line="42" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_parstream.cpp" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1a2728e462d28f66dc62edc4974850d0e2" prot="public" static="yes" mutable="no">
        <type>std::string</type>
        <definition>std::string amrex::s_pout_basename</definition>
        <argsstring></argsstring>
        <name>s_pout_basename</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_parstream.cpp" line="43" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_parstream.cpp" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1acfcde804095e39e72c044334abee8044" prot="public" static="yes" mutable="no">
        <type>std::ofstream</type>
        <definition>std::ofstream amrex::s_pout</definition>
        <argsstring></argsstring>
        <name>s_pout</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_parstream.cpp" line="44" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_parstream.cpp" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1ad8d02f5dc33b592a116f7d00f0e9f603" prot="public" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool amrex::s_pout_init</definition>
        <argsstring></argsstring>
        <name>s_pout_init</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_parstream.cpp" line="46" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_parstream.cpp" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1a1541ad04792c78b4f6b342ce289c6afe" prot="public" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool amrex::s_pout_open</definition>
        <argsstring></argsstring>
        <name>s_pout_open</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_parstream.cpp" line="47" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_parstream.cpp" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1ae9f4a54b51971f15803c95c7f677c1b8" prot="public" static="yes" mutable="no">
        <type>const Long</type>
        <definition>const Long amrex::gcc_map_node_extra_bytes</definition>
        <argsstring></argsstring>
        <name>gcc_map_node_extra_bytes</name>
        <initializer>= 32L</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" line="232" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" bodystart="232" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1a800f0e7b7cc45c727ac9b9bc6dc25405" prot="public" static="yes" mutable="no">
        <type>const char *</type>
        <definition>const char* amrex::TheMultiFabHdrFileSuffix</definition>
        <argsstring></argsstring>
        <name>TheMultiFabHdrFileSuffix</name>
        <initializer>= &quot;_H&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_VisMF.cpp" line="25" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_VisMF.cpp" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1a9bff146d2660624779e432d43cd9bf39" prot="public" static="yes" mutable="no">
        <type>const char *</type>
        <definition>const char* amrex::FabFileSuffix</definition>
        <argsstring></argsstring>
        <name>FabFileSuffix</name>
        <initializer>= &quot;_D_&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_VisMF.cpp" line="26" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_VisMF.cpp" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1a0277cf50400e3022708ae4bac2958edc" prot="public" static="yes" mutable="no">
        <type>const char *</type>
        <definition>const char* amrex::TheFabOnDiskPrefix</definition>
        <argsstring></argsstring>
        <name>TheFabOnDiskPrefix</name>
        <initializer>= &quot;FabOnDisk:&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_VisMF.cpp" line="27" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_VisMF.cpp" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1a9c0be24427378d764043ecb9428022b4" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1EBCellConservativeLinear" kindref="compound">EBCellConservativeLinear</ref></type>
        <definition>EBCellConservativeLinear amrex::eb_lincc_interp</definition>
        <argsstring></argsstring>
        <name>eb_lincc_interp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBInterpolater.cpp" line="9" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBInterpolater.cpp" bodystart="9" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1a4e29548e6877049e5a34ef4512bd7263" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1EBCellConservativeLinear" kindref="compound">EBCellConservativeLinear</ref></type>
        <definition>EBCellConservativeLinear amrex::eb_cell_cons_interp</definition>
        <argsstring>(0)</argsstring>
        <name>eb_cell_cons_interp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBInterpolater.cpp" line="10" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBInterpolater.H" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1ad7cd3ebdfa6fa592b0fd8f9d3b75ad0d" prot="public" static="no" mutable="no">
        <type></type>
        <definition>amrex::RandomEngine</definition>
        <argsstring></argsstring>
        <name>RandomEngine</name>
        <initializer>{}))
{
    auto np = src.numParticles();
    <ref refid="namespaceamrex_1_1Gpu_1aa82b32772de552834254d9d74c6da13e" kindref="member">Gpu::DeviceVector</ref>&lt;Index&gt; mask(np);

    auto p_mask = mask.dataPtr();
    const auto src_data = src.getConstParticleTileData();

    <ref refid="namespaceamrex_1a2de21a574a15104cfa7e94e52dd6ab67" kindref="member">amrex::ParallelForRNG</ref>(np,
    [=] <ref refid="AMReX__GpuQualifiers_8H_1a4e626ebf06898d71a9e0790877f1694f" kindref="member">AMREX_GPU_DEVICE</ref> (<ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> i, <ref refid="structamrex_1_1RandomEngine" kindref="compound">amrex::RandomEngine</ref> const&amp; engine) noexcept
    {
        p_mask[i] = <ref refid="namespaceamrex_1_1particle__detail_1aeefdb393afef57732439f230e1b53578" kindref="member">particle_detail::call_f</ref>(p, src_data, i, engine);
    });

    return <ref refid="namespaceamrex_1a86fc8a08b6a63681e7751ac0b20bd96b" kindref="member">filterParticles</ref>(dst, src, mask.dataPtr(), src_start, dst_start, n);
}


template &lt;typename DstTile, typename <ref refid="namespaceamrex_1acc23406c7dfc89ca51a4c37a6430bdea" kindref="member">SrcTile</ref>, typename Index, typename F,
          <ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;std::is_integral&lt;Index&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTransformation.H" line="386" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTransformation.H" bodystart="386" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1a403cfbd1297211846d8daf45b3d0b440" prot="public" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::foo</definition>
        <argsstring></argsstring>
        <name>foo</name>
        <initializer>= 0&gt;
Index <ref refid="namespaceamrex_1a01d74f2f8ceb510c07cb44c266569781" kindref="member">filterAndTransformParticles</ref> (DstTile&amp; dst, const <ref refid="namespaceamrex_1acc23406c7dfc89ca51a4c37a6430bdea" kindref="member">SrcTile</ref>&amp; src, Index* mask, F&amp;&amp; f) noexcept
{
    auto np = src.numParticles();
    <ref refid="namespaceamrex_1_1Gpu_1aa82b32772de552834254d9d74c6da13e" kindref="member">Gpu::DeviceVector</ref>&lt;Index&gt; offsets(np);
    <ref refid="namespaceamrex_1_1Gpu_1a3f116832e254a3422729b3455b22f18c" kindref="member">Gpu::exclusive_scan</ref>(mask, mask+np, offsets.begin());

    Index last_mask, last_offset;
    <ref refid="namespaceamrex_1_1Gpu_1a39c6894dcdb993d9e4455d7d418947b9" kindref="member">Gpu::copyAsync</ref>(<ref refid="namespaceamrex_1_1Gpu_1a4cb810463e0c04bdea932a011e77b548" kindref="member">Gpu::deviceToHost</ref>, mask+np-1, mask + np, &amp;last_mask);
    <ref refid="namespaceamrex_1_1Gpu_1a39c6894dcdb993d9e4455d7d418947b9" kindref="member">Gpu::copyAsync</ref>(<ref refid="namespaceamrex_1_1Gpu_1a4cb810463e0c04bdea932a011e77b548" kindref="member">Gpu::deviceToHost</ref>, offsets.data()+np-1, offsets.data()+np, &amp;last_offset);    

    auto p_offsets = offsets.dataPtr();
    
    const auto src_data = src.getConstParticleTileData();
          auto dst_data = dst.getParticleTileData();

    <ref refid="AMReX__GpuLaunch_8H_1a98b67baa1382f64a8b07abb4c2edbf92" kindref="member">AMREX_HOST_DEVICE_FOR_1D</ref>( np, i,
    {
        if (mask[i]) f(dst_data, src_data, i, p_offsets[i]);
    });

    <ref refid="namespaceamrex_1_1Gpu_1a0040af3e7783b853140a6e13c755fc25" kindref="member">Gpu::synchronize</ref>();
    return last_mask + last_offset;
}

    
template &lt;typename DstTile</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTransformation.H" line="419" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTransformation.H" bodystart="419" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1acc23406c7dfc89ca51a4c37a6430bdea" prot="public" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::SrcTile</definition>
        <argsstring></argsstring>
        <name>SrcTile</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTransformation.H" line="459" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTransformation.H" bodystart="419" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1a046a45c38572313e76a5278418ad94d6" prot="public" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::Pred</definition>
        <argsstring></argsstring>
        <name>Pred</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTransformation.H" line="459" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTransformation.H" bodystart="419" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceamrex_1a5d9cc4679a3fca647c2d0d91bc0b2cef" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool amrex::NeedToTouchUpPhysCorners</definition>
        <argsstring>(const Geometry &amp;geom)</argsstring>
        <name>NeedToTouchUpPhysCorners</name>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" line="724" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="724" bodyend="727"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a948d5324e5cf514157eb7e16637e55b5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool amrex::HasPhysBndry</definition>
        <argsstring>(const Box &amp;b, const Box &amp;dmn, const Geometry &amp;geom)</argsstring>
        <name>HasPhysBndry</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>dmn</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" line="1153" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="1153" bodyend="1169"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1adf9b8a2c079e01271e32cb7cba3057de" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::FixUpPhysCorners</definition>
        <argsstring>(FArrayBox &amp;fab, AmrLevel &amp;TheLevel, int state_indx, Real time, int scomp, int dcomp, int ncomp)</argsstring>
        <name>FixUpPhysCorners</name>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>fab</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1AmrLevel" kindref="compound">AmrLevel</ref> &amp;</type>
          <declname>TheLevel</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>state_indx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" line="1173" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="1173" bodyend="1253"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae764daf3d8010df29bc0fb4b6833f0c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST AMREX_FORCE_INLINE void amrex::amrex_first_order_extrap_cpu</definition>
        <argsstring>(amrex::Box const &amp;bx, int nComp, amrex::Array4&lt; const int &gt; const &amp;mask, amrex::Array4&lt; amrex::Real &gt; const &amp;data) noexcept</argsstring>
        <name>amrex_first_order_extrap_cpu</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">amrex::Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nComp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">amrex::Array4</ref>&lt; const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; const &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">amrex::Array4</ref>&lt; amrex::Real &gt; const &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_extrapolater_1D_K.H" line="10" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_extrapolater_1D_K.H" bodystart="10" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a9570ea1b5e3ab8070aee754ccbcf28a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::amrex_first_order_extrap_gpu</definition>
        <argsstring>(int i, int j, int k, int n, amrex::Box const &amp;bx, amrex::Array4&lt; const int &gt; const &amp;mask, amrex::Array4&lt; amrex::Real &gt; const &amp;data) noexcept</argsstring>
        <name>amrex_first_order_extrap_gpu</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">amrex::Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">amrex::Array4</ref>&lt; const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; const &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">amrex::Array4</ref>&lt; amrex::Real &gt; const &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_extrapolater_1D_K.H" line="36" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_extrapolater_1D_K.H" bodystart="36" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae4eb9d3fef37595defb201fde203bae6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, AmrMesh const &amp;amr_mesh)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1AmrMesh" kindref="compound">AmrMesh</ref> const &amp;</type>
          <declname>amr_mesh</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.cpp" line="1021" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.cpp" bodystart="1021" bodyend="1046"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad22b2b776284a051ecd35e8dfa6e54d9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>static int amrex::FindCut</definition>
        <argsstring>(const int *hist, int lo, int hi, CutStatus &amp;status)</argsstring>
        <name>FindCut</name>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
          <declname>hist</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lo</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>hi</declname>
        </param>
        <param>
          <type>CutStatus &amp;</type>
          <declname>status</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Cluster.cpp" line="162" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Cluster.cpp" bodystart="162" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab1b1f90152c1c5636d634b475056389e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const ErrorList &amp;elst)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1ErrorList" kindref="compound">ErrorList</ref> &amp;</type>
          <declname>elst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_ErrorList.cpp" line="215" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_ErrorList.cpp" bodystart="216" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac820796a56aa71cd6ff93066f442247d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::AMRErrorTag_GRAD</definition>
        <argsstring>(const Box &amp;bx, Array4&lt; const Real &gt; const &amp;dat, Array4&lt; char &gt; const &amp;tag, Real threshold, char tagval)</argsstring>
        <name>AMRErrorTag_GRAD</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; const Real &gt; const &amp;</type>
          <declname>dat</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; char &gt; const &amp;</type>
          <declname>tag</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>threshold</declname>
        </param>
        <param>
          <type>char</type>
          <declname>tagval</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_ErrorList.cpp" line="233" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_ErrorList.cpp" bodystart="233" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a52c349b7ad8354f4878c1d99cd97b01a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::AMRErrorTag_LESS</definition>
        <argsstring>(const Box &amp;bx, Array4&lt; const Real &gt; const &amp;dat, Array4&lt; char &gt; const &amp;tag, Real threshold, char tagval) noexcept</argsstring>
        <name>AMRErrorTag_LESS</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; const Real &gt; const &amp;</type>
          <declname>dat</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; char &gt; const &amp;</type>
          <declname>tag</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>threshold</declname>
        </param>
        <param>
          <type>char</type>
          <declname>tagval</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_ErrorList.cpp" line="270" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_ErrorList.cpp" bodystart="270" bodyend="283"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a1c71abb5adfdcc3a8653a0280b55fc54" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::AMRErrorTag_GREATER</definition>
        <argsstring>(const Box &amp;bx, Array4&lt; const Real &gt; const &amp;dat, Array4&lt; char &gt; const &amp;tag, Real threshold, char tagval) noexcept</argsstring>
        <name>AMRErrorTag_GREATER</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; const Real &gt; const &amp;</type>
          <declname>dat</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; char &gt; const &amp;</type>
          <declname>tag</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>threshold</declname>
        </param>
        <param>
          <type>char</type>
          <declname>tagval</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_ErrorList.cpp" line="287" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_ErrorList.cpp" bodystart="287" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a17bf01478f5087742efd75a7e31b8fc2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::AMRErrorTag_BOX</definition>
        <argsstring>(const Box &amp;bx, Array4&lt; char &gt; const &amp;tag, const RealBox &amp;tag_rb, const Geometry &amp;geom, char tagval) noexcept</argsstring>
        <name>AMRErrorTag_BOX</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; char &gt; const &amp;</type>
          <declname>tag</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealBox" kindref="compound">RealBox</ref> &amp;</type>
          <declname>tag_rb</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>char</type>
          <declname>tagval</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_ErrorList.cpp" line="304" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_ErrorList.cpp" bodystart="304" bodyend="326"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8598fcc5daa8601453ccb6acb36c4672" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::AMRErrorTag_VORT</definition>
        <argsstring>(const Box &amp;bx, Array4&lt; const Real &gt; const &amp;dat, Array4&lt; char &gt; const &amp;tag, int level, Real threshold, char tagval) noexcept</argsstring>
        <name>AMRErrorTag_VORT</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; const Real &gt; const &amp;</type>
          <declname>dat</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; char &gt; const &amp;</type>
          <declname>tag</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>level</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>threshold</declname>
        </param>
        <param>
          <type>char</type>
          <declname>tagval</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_ErrorList.cpp" line="330" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_ErrorList.cpp" bodystart="330" bodyend="345"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a331b0725efb68a4f9224f12e6d6df4dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::InterpCrseFineBndryEMfield</definition>
        <argsstring>(InterpEM_t interp_type, const Array&lt; MultiFab, AMREX_SPACEDIM &gt; &amp;crse, Array&lt; MultiFab, AMREX_SPACEDIM &gt; &amp;fine, const Geometry &amp;cgeom, const Geometry &amp;fgeom, int ref_ratio)</argsstring>
        <name>InterpCrseFineBndryEMfield</name>
        <param>
          <type><ref refid="namespaceamrex_1a2f30e076962c1c148d279b63851d80df" kindref="member">InterpEM_t</ref></type>
          <declname>interp_type</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>cgeom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>fgeom</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ref_ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil.cpp" line="11" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil.cpp" bodystart="11" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad4b250931d7e5f375e7da2ebc1ea0ac0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::InterpCrseFineBndryEMfield</definition>
        <argsstring>(InterpEM_t interp_type, const Array&lt; MultiFab const *, AMREX_SPACEDIM &gt; &amp;crse, const Array&lt; MultiFab *, AMREX_SPACEDIM &gt; &amp;fine, const Geometry &amp;cgeom, const Geometry &amp;fgeom, int ref_ratio)</argsstring>
        <name>InterpCrseFineBndryEMfield</name>
        <param>
          <type><ref refid="namespaceamrex_1a2f30e076962c1c148d279b63851d80df" kindref="member">InterpEM_t</ref></type>
          <declname>interp_type</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> const *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>cgeom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>fgeom</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ref_ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil.cpp" line="23" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil.cpp" bodystart="23" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a36b10976708081700c810d70417da8c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Interp</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool amrex::ProperlyNested</definition>
        <argsstring>(const IntVect &amp;ratio, const IntVect &amp;blocking_factor, int ngrow, const IndexType &amp;boxType, Interp *mapper)</argsstring>
        <name>ProperlyNested</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>blocking_factor</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngrow</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref> &amp;</type>
          <declname>boxType</declname>
        </param>
        <param>
          <type>Interp *</type>
          <declname>mapper</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil.H" line="36" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil_I.H" bodystart="10" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae0039beeabd097cdc2577082a3ab0d55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MF</type>
          </param>
          <param>
            <type>typename BC</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">EnableIf_t</ref>&lt; <ref refid="structamrex_1_1IsFabArray" kindref="compound">IsFabArray</ref>&lt; MF &gt;::value &gt;</type>
        <definition>EnableIf_t&lt; IsFabArray&lt; MF &gt;::value &gt; amrex::FillPatchSingleLevel</definition>
        <argsstring>(MF &amp;mf, IntVect const &amp;nghost, Real time, const Vector&lt; MF *&gt; &amp;smf, const Vector&lt; Real &gt; &amp;stime, int scomp, int dcomp, int ncomp, const Geometry &amp;geom, BC &amp;physbcf, int bcfcomp)</argsstring>
        <name>FillPatchSingleLevel</name>
        <param>
          <type>MF &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; MF *&gt; &amp;</type>
          <declname>smf</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &amp;</type>
          <declname>stime</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>BC &amp;</type>
          <declname>physbcf</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>bcfcomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil.H" line="41" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil_I.H" bodystart="50" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa246878b195bc8355dd3d0034640e4f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MF</type>
          </param>
          <param>
            <type>typename BC</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">EnableIf_t</ref>&lt; <ref refid="structamrex_1_1IsFabArray" kindref="compound">IsFabArray</ref>&lt; MF &gt;::value &gt;</type>
        <definition>EnableIf_t&lt; IsFabArray&lt; MF &gt;::value &gt; amrex::FillPatchSingleLevel</definition>
        <argsstring>(MF &amp;mf, Real time, const Vector&lt; MF *&gt; &amp;smf, const Vector&lt; Real &gt; &amp;stime, int scomp, int dcomp, int ncomp, const Geometry &amp;geom, BC &amp;physbcf, int bcfcomp)</argsstring>
        <name>FillPatchSingleLevel</name>
        <param>
          <type>MF &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; MF *&gt; &amp;</type>
          <declname>smf</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &amp;</type>
          <declname>stime</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>BC &amp;</type>
          <declname>physbcf</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>bcfcomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil.H" line="49" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil_I.H" bodystart="38" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab4f182b9382eae973021619b9c3ed949" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MF</type>
          </param>
          <param>
            <type>typename BC</type>
          </param>
          <param>
            <type>typename Interp</type>
          </param>
          <param>
            <type>typename PreInterpHook</type>
            <defval>NullInterpHook&lt;typename MF::FABType::value_type&gt;</defval>
          </param>
          <param>
            <type>typename PostInterpHook</type>
            <defval>NullInterpHook&lt;typename MF::FABType::value_type&gt;</defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">EnableIf_t</ref>&lt; <ref refid="structamrex_1_1IsFabArray" kindref="compound">IsFabArray</ref>&lt; MF &gt;::value &gt;</type>
        <definition>EnableIf_t&lt; IsFabArray&lt; MF &gt;::value &gt; amrex::FillPatchTwoLevels</definition>
        <argsstring>(MF &amp;mf, IntVect const &amp;nghost, Real time, const Vector&lt; MF *&gt; &amp;cmf, const Vector&lt; Real &gt; &amp;ct, const Vector&lt; MF *&gt; &amp;fmf, const Vector&lt; Real &gt; &amp;ft, int scomp, int dcomp, int ncomp, const Geometry &amp;cgeom, const Geometry &amp;fgeom, BC &amp;cbc, int cbccomp, BC &amp;fbc, int fbccomp, const IntVect &amp;ratio, Interp *mapper, const Vector&lt; BCRec &gt; &amp;bcs, int bcscomp, const PreInterpHook &amp;pre_interp={}, const PostInterpHook &amp;post_interp={})</argsstring>
        <name>FillPatchTwoLevels</name>
        <param>
          <type>MF &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; MF *&gt; &amp;</type>
          <declname>cmf</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &amp;</type>
          <declname>ct</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; MF *&gt; &amp;</type>
          <declname>fmf</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &amp;</type>
          <declname>ft</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>cgeom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>fgeom</declname>
        </param>
        <param>
          <type>BC &amp;</type>
          <declname>cbc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cbccomp</declname>
        </param>
        <param>
          <type>BC &amp;</type>
          <declname>fbc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fbccomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type>Interp *</type>
          <declname>mapper</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> &gt; &amp;</type>
          <declname>bcs</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>bcscomp</declname>
        </param>
        <param>
          <type>const PreInterpHook &amp;</type>
          <declname>pre_interp</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>const PostInterpHook &amp;</type>
          <declname>post_interp</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil.H" line="59" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil_I.H" bodystart="544" bodyend="566"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a32e50a6d56b30a2ed76f6b4f130db855" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MF</type>
          </param>
          <param>
            <type>typename BC</type>
          </param>
          <param>
            <type>typename Interp</type>
          </param>
          <param>
            <type>typename PreInterpHook</type>
            <defval>NullInterpHook&lt;typename MF::FABType::value_type&gt;</defval>
          </param>
          <param>
            <type>typename PostInterpHook</type>
            <defval>NullInterpHook&lt;typename MF::FABType::value_type&gt;</defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">EnableIf_t</ref>&lt; <ref refid="structamrex_1_1IsFabArray" kindref="compound">IsFabArray</ref>&lt; MF &gt;::value &gt;</type>
        <definition>EnableIf_t&lt; IsFabArray&lt; MF &gt;::value &gt; amrex::FillPatchTwoLevels</definition>
        <argsstring>(MF &amp;mf, Real time, const Vector&lt; MF *&gt; &amp;cmf, const Vector&lt; Real &gt; &amp;ct, const Vector&lt; MF *&gt; &amp;fmf, const Vector&lt; Real &gt; &amp;ft, int scomp, int dcomp, int ncomp, const Geometry &amp;cgeom, const Geometry &amp;fgeom, BC &amp;cbc, int cbccomp, BC &amp;fbc, int fbccomp, const IntVect &amp;ratio, Interp *mapper, const Vector&lt; BCRec &gt; &amp;bcs, int bcscomp, const PreInterpHook &amp;pre_interp={}, const PostInterpHook &amp;post_interp={})</argsstring>
        <name>FillPatchTwoLevels</name>
        <param>
          <type>MF &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; MF *&gt; &amp;</type>
          <declname>cmf</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &amp;</type>
          <declname>ct</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; MF *&gt; &amp;</type>
          <declname>fmf</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &amp;</type>
          <declname>ft</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>cgeom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>fgeom</declname>
        </param>
        <param>
          <type>BC &amp;</type>
          <declname>cbc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cbccomp</declname>
        </param>
        <param>
          <type>BC &amp;</type>
          <declname>fbc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fbccomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type>Interp *</type>
          <declname>mapper</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> &gt; &amp;</type>
          <declname>bcs</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>bcscomp</declname>
        </param>
        <param>
          <type>const PreInterpHook &amp;</type>
          <declname>pre_interp</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>const PostInterpHook &amp;</type>
          <declname>post_interp</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil.H" line="76" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil_I.H" bodystart="570" bodyend="593"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a7d0ba2b002dcedd4c4796d298f0adeb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MF</type>
          </param>
          <param>
            <type>typename BC</type>
          </param>
          <param>
            <type>typename Interp</type>
          </param>
          <param>
            <type>typename PreInterpHook</type>
            <defval>NullInterpHook&lt;typename MF::FABType::value_type&gt;</defval>
          </param>
          <param>
            <type>typename PostInterpHook</type>
            <defval>NullInterpHook&lt;typename MF::FABType::value_type&gt;</defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">EnableIf_t</ref>&lt; <ref refid="structamrex_1_1IsFabArray" kindref="compound">IsFabArray</ref>&lt; MF &gt;::value &gt;</type>
        <definition>EnableIf_t&lt; IsFabArray&lt; MF &gt;::value &gt; amrex::FillPatchTwoLevels</definition>
        <argsstring>(Array&lt; MF *, AMREX_SPACEDIM &gt; const &amp;mf, IntVect const &amp;nghost, Real time, const Vector&lt; Array&lt; MF *, AMREX_SPACEDIM &gt; &gt; &amp;cmf, const Vector&lt; Real &gt; &amp;ct, const Vector&lt; Array&lt; MF *, AMREX_SPACEDIM &gt; &gt; &amp;fmf, const Vector&lt; Real &gt; &amp;ft, int scomp, int dcomp, int ncomp, const Geometry &amp;cgeom, const Geometry &amp;fgeom, Array&lt; BC, AMREX_SPACEDIM &gt; &amp;cbc, int cbccomp, Array&lt; BC, AMREX_SPACEDIM &gt; &amp;fbc, int fbccomp, const IntVect &amp;ratio, Interp *mapper, const Array&lt; Vector&lt; BCRec &gt;, AMREX_SPACEDIM &gt; &amp;bcs, int bcscomp, const PreInterpHook &amp;pre_interp={}, const PostInterpHook &amp;post_interp={})</argsstring>
        <name>FillPatchTwoLevels</name>
        <param>
          <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; MF *, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; MF *, AMREX_SPACEDIM &gt; &gt; &amp;</type>
          <declname>cmf</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &amp;</type>
          <declname>ct</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; MF *, AMREX_SPACEDIM &gt; &gt; &amp;</type>
          <declname>fmf</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &amp;</type>
          <declname>ft</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>cgeom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>fgeom</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; BC, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>cbc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cbccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; BC, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>fbc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fbccomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type>Interp *</type>
          <declname>mapper</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> &gt;, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>bcs</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>bcscomp</declname>
        </param>
        <param>
          <type>const PreInterpHook &amp;</type>
          <declname>pre_interp</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>const PostInterpHook &amp;</type>
          <declname>post_interp</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil.H" line="93" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil_I.H" bodystart="597" bodyend="620"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa559fc8c450f44026f51beed23f6d2c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MF</type>
          </param>
          <param>
            <type>typename BC</type>
          </param>
          <param>
            <type>typename Interp</type>
          </param>
          <param>
            <type>typename PreInterpHook</type>
            <defval>NullInterpHook&lt;typename MF::FABType::value_type&gt;</defval>
          </param>
          <param>
            <type>typename PostInterpHook</type>
            <defval>NullInterpHook&lt;typename MF::FABType::value_type&gt;</defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">EnableIf_t</ref>&lt; <ref refid="structamrex_1_1IsFabArray" kindref="compound">IsFabArray</ref>&lt; MF &gt;::value &gt;</type>
        <definition>EnableIf_t&lt; IsFabArray&lt; MF &gt;::value &gt; amrex::FillPatchTwoLevels</definition>
        <argsstring>(Array&lt; MF *, AMREX_SPACEDIM &gt; const &amp;mf, Real time, const Vector&lt; Array&lt; MF *, AMREX_SPACEDIM &gt; &gt; &amp;cmf, const Vector&lt; Real &gt; &amp;ct, const Vector&lt; Array&lt; MF *, AMREX_SPACEDIM &gt; &gt; &amp;fmf, const Vector&lt; Real &gt; &amp;ft, int scomp, int dcomp, int ncomp, const Geometry &amp;cgeom, const Geometry &amp;fgeom, Array&lt; BC, AMREX_SPACEDIM &gt; &amp;cbc, int cbccomp, Array&lt; BC, AMREX_SPACEDIM &gt; &amp;fbc, int fbccomp, const IntVect &amp;ratio, Interp *mapper, const Array&lt; Vector&lt; BCRec &gt;, AMREX_SPACEDIM &gt; &amp;bcs, int bcscomp, const PreInterpHook &amp;pre_interp={}, const PostInterpHook &amp;post_interp={})</argsstring>
        <name>FillPatchTwoLevels</name>
        <param>
          <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; MF *, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; MF *, AMREX_SPACEDIM &gt; &gt; &amp;</type>
          <declname>cmf</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &amp;</type>
          <declname>ct</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; MF *, AMREX_SPACEDIM &gt; &gt; &amp;</type>
          <declname>fmf</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &amp;</type>
          <declname>ft</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>cgeom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>fgeom</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; BC, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>cbc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cbccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; BC, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>fbc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fbccomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type>Interp *</type>
          <declname>mapper</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> &gt;, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>bcs</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>bcscomp</declname>
        </param>
        <param>
          <type>const PreInterpHook &amp;</type>
          <declname>pre_interp</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>const PostInterpHook &amp;</type>
          <declname>post_interp</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil.H" line="110" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil_I.H" bodystart="624" bodyend="647"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a11360ea60c2b1db7e9ce603c239a07d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MF</type>
          </param>
          <param>
            <type>typename BC</type>
          </param>
          <param>
            <type>typename Interp</type>
          </param>
          <param>
            <type>typename PreInterpHook</type>
            <defval>NullInterpHook&lt;typename MF::FABType::value_type&gt;</defval>
          </param>
          <param>
            <type>typename PostInterpHook</type>
            <defval>NullInterpHook&lt;typename MF::FABType::value_type&gt;</defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">EnableIf_t</ref>&lt; <ref refid="structamrex_1_1IsFabArray" kindref="compound">IsFabArray</ref>&lt; MF &gt;::value &gt;</type>
        <definition>EnableIf_t&lt; IsFabArray&lt; MF &gt;::value &gt; amrex::InterpFromCoarseLevel</definition>
        <argsstring>(MF &amp;mf, Real time, const MF &amp;cmf, int scomp, int dcomp, int ncomp, const Geometry &amp;cgeom, const Geometry &amp;fgeom, BC &amp;cbc, int cbccomp, BC &amp;fbc, int fbccomp, const IntVect &amp;ratio, Interp *mapper, const Vector&lt; BCRec &gt; &amp;bcs, int bcscomp, const PreInterpHook &amp;pre_interp={}, const PostInterpHook &amp;post_interp={})</argsstring>
        <name>InterpFromCoarseLevel</name>
        <param>
          <type>MF &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type>const MF &amp;</type>
          <declname>cmf</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>cgeom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>fgeom</declname>
        </param>
        <param>
          <type>BC &amp;</type>
          <declname>cbc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cbccomp</declname>
        </param>
        <param>
          <type>BC &amp;</type>
          <declname>fbc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fbccomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type>Interp *</type>
          <declname>mapper</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> &gt; &amp;</type>
          <declname>bcs</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>bcscomp</declname>
        </param>
        <param>
          <type>const PreInterpHook &amp;</type>
          <declname>pre_interp</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>const PostInterpHook &amp;</type>
          <declname>post_interp</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil.H" line="161" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil_I.H" bodystart="697" bodyend="711"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a00c2ef83d0cc5d4ffd7bf85678be67e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MF</type>
          </param>
          <param>
            <type>typename BC</type>
          </param>
          <param>
            <type>typename Interp</type>
          </param>
          <param>
            <type>typename PreInterpHook</type>
            <defval>NullInterpHook&lt;typename MF::FABType::value_type&gt;</defval>
          </param>
          <param>
            <type>typename PostInterpHook</type>
            <defval>NullInterpHook&lt;typename MF::FABType::value_type&gt;</defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">EnableIf_t</ref>&lt; <ref refid="structamrex_1_1IsFabArray" kindref="compound">IsFabArray</ref>&lt; MF &gt;::value &gt;</type>
        <definition>EnableIf_t&lt; IsFabArray&lt; MF &gt;::value &gt; amrex::InterpFromCoarseLevel</definition>
        <argsstring>(MF &amp;mf, IntVect const &amp;nghost, Real time, const MF &amp;cmf, int scomp, int dcomp, int ncomp, const Geometry &amp;cgeom, const Geometry &amp;fgeom, BC &amp;cbc, int cbccomp, BC &amp;fbc, int fbccomp, const IntVect &amp;ratio, Interp *mapper, const Vector&lt; BCRec &gt; &amp;bcs, int bcscomp, const PreInterpHook &amp;pre_interp={}, const PostInterpHook &amp;post_interp={})</argsstring>
        <name>InterpFromCoarseLevel</name>
        <param>
          <type>MF &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type>const MF &amp;</type>
          <declname>cmf</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>cgeom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>fgeom</declname>
        </param>
        <param>
          <type>BC &amp;</type>
          <declname>cbc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cbccomp</declname>
        </param>
        <param>
          <type>BC &amp;</type>
          <declname>fbc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fbccomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type>Interp *</type>
          <declname>mapper</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> &gt; &amp;</type>
          <declname>bcs</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>bcscomp</declname>
        </param>
        <param>
          <type>const PreInterpHook &amp;</type>
          <declname>pre_interp</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>const PostInterpHook &amp;</type>
          <declname>post_interp</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil.H" line="176" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil_I.H" bodystart="733" bodyend="828"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1acefb737b3245e2fca216e950f3c8ed4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MF</type>
          </param>
          <param>
            <type>typename BC</type>
          </param>
          <param>
            <type>typename Interp</type>
          </param>
          <param>
            <type>typename PreInterpHook</type>
            <defval>NullInterpHook&lt;typename MF::FABType::value_type&gt;</defval>
          </param>
          <param>
            <type>typename PostInterpHook</type>
            <defval>NullInterpHook&lt;typename MF::FABType::value_type&gt;</defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">EnableIf_t</ref>&lt; <ref refid="structamrex_1_1IsFabArray" kindref="compound">IsFabArray</ref>&lt; MF &gt;::value &gt;</type>
        <definition>EnableIf_t&lt; IsFabArray&lt; MF &gt;::value &gt; amrex::InterpFromCoarseLevel</definition>
        <argsstring>(Array&lt; MF *, AMREX_SPACEDIM &gt; const &amp;mf, Real time, const Array&lt; MF *, AMREX_SPACEDIM &gt; &amp;cmf, int scomp, int dcomp, int ncomp, const Geometry &amp;cgeom, const Geometry &amp;fgeom, Array&lt; BC, AMREX_SPACEDIM &gt; &amp;cbc, int cbccomp, Array&lt; BC, AMREX_SPACEDIM &gt; &amp;fbc, int fbccomp, const IntVect &amp;ratio, Interp *mapper, const Array&lt; Vector&lt; BCRec &gt;, AMREX_SPACEDIM &gt; &amp;bcs, int bcscomp, const PreInterpHook &amp;pre_interp={}, const PostInterpHook &amp;post_interp={})</argsstring>
        <name>InterpFromCoarseLevel</name>
        <param>
          <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; MF *, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; MF *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>cmf</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>cgeom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>fgeom</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; BC, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>cbc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cbccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; BC, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>fbc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fbccomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type>Interp *</type>
          <declname>mapper</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> &gt;, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>bcs</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>bcscomp</declname>
        </param>
        <param>
          <type>const PreInterpHook &amp;</type>
          <declname>pre_interp</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>const PostInterpHook &amp;</type>
          <declname>post_interp</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil.H" line="191" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil_I.H" bodystart="715" bodyend="729"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a96a433c53798971a0f7647d1bb357bb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MF</type>
          </param>
          <param>
            <type>typename BC</type>
          </param>
          <param>
            <type>typename Interp</type>
          </param>
          <param>
            <type>typename PreInterpHook</type>
            <defval>NullInterpHook&lt;typename MF::FABType::value_type&gt;</defval>
          </param>
          <param>
            <type>typename PostInterpHook</type>
            <defval>NullInterpHook&lt;typename MF::FABType::value_type&gt;</defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">EnableIf_t</ref>&lt; <ref refid="structamrex_1_1IsFabArray" kindref="compound">IsFabArray</ref>&lt; MF &gt;::value &gt;</type>
        <definition>EnableIf_t&lt; IsFabArray&lt; MF &gt;::value &gt; amrex::InterpFromCoarseLevel</definition>
        <argsstring>(Array&lt; MF *, AMREX_SPACEDIM &gt; const &amp;mf, IntVect const &amp;nghost, Real time, const Array&lt; MF *, AMREX_SPACEDIM &gt; &amp;cmf, int scomp, int dcomp, int ncomp, const Geometry &amp;cgeom, const Geometry &amp;fgeom, Array&lt; BC, AMREX_SPACEDIM &gt; &amp;cbc, int cbccomp, Array&lt; BC, AMREX_SPACEDIM &gt; &amp;fbc, int fbccomp, const IntVect &amp;ratio, Interp *mapper, const Array&lt; Vector&lt; BCRec &gt;, AMREX_SPACEDIM &gt; &amp;bcs, int bcscomp, const PreInterpHook &amp;pre_interp={}, const PostInterpHook &amp;post_interp={})</argsstring>
        <name>InterpFromCoarseLevel</name>
        <param>
          <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; MF *, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; MF *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>cmf</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>cgeom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>fgeom</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; BC, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>cbc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cbccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; BC, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>fbc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fbccomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type>Interp *</type>
          <declname>mapper</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> &gt;, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>bcs</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>bcscomp</declname>
        </param>
        <param>
          <type>const PreInterpHook &amp;</type>
          <declname>pre_interp</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>const PostInterpHook &amp;</type>
          <declname>post_interp</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil.H" line="206" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil_I.H" bodystart="832" bodyend="974"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a18058abd47bcc0f005182c829f1f4e0a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::fluxreg_fineadd</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;reg, const int rcomp, Array4&lt; Real const &gt; const &amp;flx, const int fcomp, const int ncomp, const int, Dim3 const &amp;ratio, const Real mult) noexcept</argsstring>
        <name>fluxreg_fineadd</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>reg</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>rcomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>flx</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fcomp</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>dir</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type>const Real</type>
          <declname>mult</declname>
        </param>
        <briefdescription>
<para>Add fine grid flux to flux register. Flux array is a fine grid edge based object, Register is a coarse grid edge based object. It is assumed that the coarsened flux region contains the register region. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bx</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reg</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flx</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ratio</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mult</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bx</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reg</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flx</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ratio</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mult</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FluxReg_1D_C.H" line="26" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FluxReg_1D_C.H" bodystart="26" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a75205bf4e5cf11c750d36643d869651e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::fluxreg_fineareaadd</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;reg, const int rcomp, Array4&lt; Real const &gt; const &amp;area, Array4&lt; Real const &gt; const &amp;flx, const int fcomp, const int ncomp, const int, Dim3 const &amp;ratio, const Real mult) noexcept</argsstring>
        <name>fluxreg_fineareaadd</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>reg</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>rcomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>area</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>flx</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fcomp</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>dir</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type>const Real</type>
          <declname>mult</declname>
        </param>
        <briefdescription>
<para>Add fine grid flux times area to flux register. Flux array is a fine grid edge based object, Register is a coarse grid edge based object. It is assumed that the coarsened flux region contains the register region. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bx</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reg</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>area</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flx</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ratio</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mult</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bx</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reg</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>area</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flx</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ratio</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mult</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FluxReg_1D_C.H" line="56" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FluxReg_1D_C.H" bodystart="56" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a7c97748d6aef1a9d510523f3c374b63f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::fluxreg_reflux</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;s, const int scomp, Array4&lt; Real const &gt; const &amp;f, Array4&lt; Real const &gt; const &amp;v, const int ncomp, const Real mult, const Orientation face) noexcept</argsstring>
        <name>fluxreg_reflux</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const Real</type>
          <declname>mult</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Orientation" kindref="compound">Orientation</ref></type>
          <declname>face</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FluxReg_1D_C.H" line="70" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FluxReg_1D_C.H" bodystart="70" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a370603c76b9575c74c3663cb77943166" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1af7feff7858c7b1d3557509d883c46674" kindref="member">AMREX_GPU_HOST</ref> <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt;</type>
        <definition>AMREX_GPU_HOST Vector&lt; Real &gt; amrex::ccinterp_compute_voff</definition>
        <argsstring>(Box const &amp;cbx, IntVect const &amp;ratio, Geometry const &amp;cgeom, Geometry const &amp;fgeom) noexcept</argsstring>
        <name>ccinterp_compute_voff</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>cbx</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> const &amp;</type>
          <declname>cgeom</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> const &amp;</type>
          <declname>fgeom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interp_1D_C.H" line="15" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interp_1D_C.H" bodystart="15" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae7fc64131b7d159b9bbde5e288e129fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::cellconslin_slopes_linlim</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;slopes, Array4&lt; Real const &gt; const &amp;u, const int icomp, const int ncomp, BCRec const *AMREX_RESTRICT bcr) noexcept</argsstring>
        <name>cellconslin_slopes_linlim</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>slopes</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>icomp</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> const *<ref refid="AMReX__Extension_8H_1a97eafbdde3320b2e8981a1d1d3936f58" kindref="member">AMREX_RESTRICT</ref></type>
          <declname>bcr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interp_1D_C.H" line="84" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interp_1D_C.H" bodystart="84" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ade1f694ec84362492fd318cd856cd486" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::cellconslin_interp</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;fine, const int fcomp, const int ncomp, Array4&lt; Real const &gt; const &amp;slopes, Array4&lt; Real const &gt; const &amp;crse, const int ccomp, Real const *AMREX_RESTRICT voff, IntVect const &amp;ratio) noexcept</argsstring>
        <name>cellconslin_interp</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fcomp</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>slopes</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ccomp</declname>
        </param>
        <param>
          <type>Real const *<ref refid="AMReX__Extension_8H_1a97eafbdde3320b2e8981a1d1d3936f58" kindref="member">AMREX_RESTRICT</ref></type>
          <declname>voff</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interp_1D_C.H" line="130" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interp_1D_C.H" bodystart="130" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a050b19b85f7d71264ca0e5e2c372d312" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::cellconslin_slopes_mclim</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;slopes, Array4&lt; Real const &gt; const &amp;u, const int icomp, const int ncomp, BCRec const *AMREX_RESTRICT bcr) noexcept</argsstring>
        <name>cellconslin_slopes_mclim</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>slopes</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>icomp</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> const *<ref refid="AMReX__Extension_8H_1a97eafbdde3320b2e8981a1d1d3936f58" kindref="member">AMREX_RESTRICT</ref></type>
          <declname>bcr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interp_1D_C.H" line="155" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interp_1D_C.H" bodystart="155" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a35cc53e45f092e37f6b3b027dc422c27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::cellconslin_fine_alpha</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;alpha, Array4&lt; Real const &gt; const &amp;slopes, const int ncomp, Real const *AMREX_RESTRICT voff, IntVect const &amp;ratio) noexcept</argsstring>
        <name>cellconslin_fine_alpha</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>slopes</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>Real const *<ref refid="AMReX__Extension_8H_1a97eafbdde3320b2e8981a1d1d3936f58" kindref="member">AMREX_RESTRICT</ref></type>
          <declname>voff</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interp_1D_C.H" line="194" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interp_1D_C.H" bodystart="194" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a911f12abcc914a4b2a907f6a1af955c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::cellconslin_slopes_mmlim</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;slopes, Array4&lt; Real const &gt; const &amp;alpha, const int ncomp, IntVect const &amp;ratio) noexcept</argsstring>
        <name>cellconslin_slopes_mmlim</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>slopes</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interp_1D_C.H" line="224" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interp_1D_C.H" bodystart="224" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aaebd1edefcd2e126a0ce93d3f4296731" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::pcinterp_interp</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;fine, const int fcomp, const int ncomp, Array4&lt; Real const &gt; const &amp;crse, const int ccomp, IntVect const &amp;ratio) noexcept</argsstring>
        <name>pcinterp_interp</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fcomp</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ccomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interp_1D_C.H" line="244" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interp_1D_C.H" bodystart="244" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab65c065625bd439361885b059b19fd38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::nodebilin_slopes</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; T &gt; const &amp;slope, Array4&lt; T const &gt; const &amp;u, const int icomp, const int ncomp, IntVect const &amp;ratio) noexcept</argsstring>
        <name>nodebilin_slopes</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>slope</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>icomp</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interp_1D_C.H" line="263" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interp_1D_C.H" bodystart="263" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a3a130e78c478fddbb794329c104cbc05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::nodebilin_interp</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; T &gt; const &amp;fine, const int fcomp, const int ncomp, Array4&lt; T const &gt; const &amp;slope, Array4&lt; T const &gt; const &amp;crse, const int ccomp, IntVect const &amp;ratio) noexcept</argsstring>
        <name>nodebilin_interp</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fcomp</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>slope</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ccomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interp_1D_C.H" line="282" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interp_1D_C.H" bodystart="282" bodyend="298"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a749ef3bbd2184e2931cb0a63f54aa73a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::facediv_face_interp</definition>
        <argsstring>(int, int, int, int, int, int, Array4&lt; T const &gt; const &amp;, Array4&lt; T &gt; const &amp;, Array4&lt; const int &gt; const &amp;, IntVect const &amp;) noexcept</argsstring>
        <name>facediv_face_interp</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>ci</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>cj</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>ck</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>nc</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>nf</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>idir</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <defname>crse</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <defname>fine</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; const &amp;</type>
          <defname>mask</defname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <defname>ratio</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interp_1D_C.H" line="305" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interp_1D_C.H" bodystart="305" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a7b18d53f86cdda4a55b0acd41d7cfbab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::facediv_int</definition>
        <argsstring>(int, int, int, int, GpuArray&lt; Array4&lt; T &gt;, AMREX_SPACEDIM &gt; const &amp;, IntVect const &amp;, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;) noexcept</argsstring>
        <name>facediv_int</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>ci</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>cj</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>ck</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>nf</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; <ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt;, AMREX_SPACEDIM &gt; const &amp;</type>
          <defname>fine</defname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <defname>ratio</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <defname>cellSize</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interp_1D_C.H" line="317" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interp_1D_C.H" bodystart="317" bodyend="323"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa143e23e7784eca50c904ce19588d503" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::face_linear_interp_x</definition>
        <argsstring>(int i, int, int, int n, Array4&lt; T &gt; const &amp;fine, Array4&lt; T const &gt; const &amp;crse, IntVect const &amp;ratio) noexcept</argsstring>
        <name>face_linear_interp_x</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>j</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>k</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interp_1D_C.H" line="327" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interp_1D_C.H" bodystart="327" bodyend="337"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab63986fd67f0c644685048e13e3c0475" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::face_linear_interp_y</definition>
        <argsstring>(int i, int j, int, int n, Array4&lt; T &gt; const &amp;fine, Array4&lt; T const &gt; const &amp;crse, IntVect const &amp;ratio) noexcept</argsstring>
        <name>face_linear_interp_y</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>k</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interp_2D_C.H" line="526" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interp_2D_C.H" bodystart="526" bodyend="537"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae4f049fbb15dcc3bc51cc6624559edc3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::face_linear_interp_z</definition>
        <argsstring>(int i, int j, int k, int n, Array4&lt; T &gt; const &amp;fine, Array4&lt; T const &gt; const &amp;crse, IntVect const &amp;ratio) noexcept</argsstring>
        <name>face_linear_interp_z</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interp_3D_C.H" line="816" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interp_3D_C.H" bodystart="816" bodyend="828"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad4158723bb78d3d5f19e396a20c0ce2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string amrex::Version</definition>
        <argsstring>()</argsstring>
        <name>Version</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" line="67" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX.cpp" bodystart="112" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a187cdb4f4273fdf9bcad01ac8e3fcc4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1AMReX" kindref="compound">AMReX</ref> *</type>
        <definition>amrex::AMReX * amrex::Initialize</definition>
        <argsstring>(MPI_Comm mpi_comm, std::ostream &amp;a_osout=std::cout, std::ostream &amp;a_oserr=std::cerr, ErrorHandler a_errhandler=nullptr)</argsstring>
        <name>Initialize</name>
        <param>
          <type><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref></type>
          <declname>mpi_comm</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>a_osout</declname>
          <defval>std::cout</defval>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>a_oserr</declname>
          <defval>std::cerr</defval>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1aa944154cc363fe5103f6638e3726d2ca" kindref="member">ErrorHandler</ref></type>
          <declname>a_errhandler</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" line="70" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX.cpp" bodystart="340" bodyend="347"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aad973f86fbf0a5ecec671bb067f11499" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1AMReX" kindref="compound">AMReX</ref> *</type>
        <definition>amrex::AMReX * amrex::Initialize</definition>
        <argsstring>(int &amp;argc, char **&amp;argv, bool build_parm_parse=true, MPI_Comm mpi_comm=MPI_COMM_WORLD, const std::function&lt; void()&gt; &amp;func_parm_parse={}, std::ostream &amp;a_osout=std::cout, std::ostream &amp;a_oserr=std::cerr, ErrorHandler a_errorhandler=nullptr)</argsstring>
        <name>Initialize</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &amp;</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **&amp;</type>
          <declname>argv</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>build_parm_parse</declname>
          <defval>true</defval>
        </param>
        <param>
          <type><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref></type>
          <declname>mpi_comm</declname>
          <defval><ref refid="AMReX__ccse-mpi_8H_1ac57c1fc8484fb9b5c8359a559851107b" kindref="member">MPI_COMM_WORLD</ref></defval>
        </param>
        <param>
          <type>const std::function&lt; void()&gt; &amp;</type>
          <declname>func_parm_parse</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>a_osout</declname>
          <defval>std::cout</defval>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>a_oserr</declname>
          <defval>std::cerr</defval>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1aa944154cc363fe5103f6638e3726d2ca" kindref="member">ErrorHandler</ref></type>
          <declname>a_errorhandler</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" line="76" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX.cpp" bodystart="350" bodyend="578"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8117ae9942e01445ea7fe62d2f190c64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Finalize</definition>
        <argsstring>(AMReX *pamrex)</argsstring>
        <name>Finalize</name>
        <param>
          <type><ref refid="classamrex_1_1AMReX" kindref="compound">AMReX</ref> *</type>
          <declname>pamrex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" line="83" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX.cpp" bodystart="587" bodyend="702"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a58b341e8a1b6a668812e8801b917a9de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Finalize</definition>
        <argsstring>()</argsstring>
        <name>Finalize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" line="84" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX.cpp" bodystart="581" bodyend="584"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aec8ceac1148bd8331f3a51572068f8a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ExecOnFinalize</definition>
        <argsstring>(PTR_TO_VOID_FUNC)</argsstring>
        <name>ExecOnFinalize</name>
        <param>
          <type><ref refid="namespaceamrex_1a436b95e95cc4994a7c179e3cebe42ea6" kindref="member">PTR_TO_VOID_FUNC</ref></type>
          <defname>fp</defname>
        </param>
        <briefdescription>
<para>We maintain a stack of functions that need to be called in <ref refid="namespaceamrex_1a8117ae9942e01445ea7fe62d2f190c64" kindref="member">Finalize()</ref>. The functions are called in LIFO order. The idea here is to allow classes to clean up any &quot;global&quot; state that they maintain when we&apos;re exiting from <ref refid="classamrex_1_1AMReX" kindref="compound">AMReX</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" line="91" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX.cpp" bodystart="328" bodyend="331"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6911748ceb0d88bf5b6bf7f3f0402e97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ExecOnInitialize</definition>
        <argsstring>(PTR_TO_VOID_FUNC)</argsstring>
        <name>ExecOnInitialize</name>
        <param>
          <type><ref refid="namespaceamrex_1a436b95e95cc4994a7c179e3cebe42ea6" kindref="member">PTR_TO_VOID_FUNC</ref></type>
          <defname>fp</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" line="92" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX.cpp" bodystart="334" bodyend="337"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a95b1159ba3a5494abd49dc9b3d34eacf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::ignore_unused</definition>
        <argsstring>(const Ts &amp;...)</argsstring>
        <name>ignore_unused</name>
        <param>
          <type>const Ts &amp;</type>
          <declname>...</declname>
        </param>
        <briefdescription>
<para>This shuts up the compiler about unused variables. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" line="97" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" bodystart="97" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aaa5d048f7bf7386b6976b10001a5f8b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Error</definition>
        <argsstring>(const std::string &amp;msg)</argsstring>
        <name>Error</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para><ref refid="classamrex_1_1Print" kindref="compound">Print</ref> out message to cerr and exit via <ref refid="namespaceamrex_1ad26f2328bf66aa9678347a6055a25431" kindref="member">amrex::Abort()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" line="100" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX.cpp" bodystart="172" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4393d2710f894c8b161fa2ec1f57012c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Error_host</definition>
        <argsstring>(const char *msg)</argsstring>
        <name>Error_host</name>
        <param>
          <type>const char *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" line="102" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX.cpp" bodystart="190" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab766123acdbb32e2e23b3b1bface323f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::Error</definition>
        <argsstring>(const char *msg=0)</argsstring>
        <name>Error</name>
        <param>
          <type>const char *</type>
          <declname>msg</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" line="110" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" bodystart="110" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad1cc69bc2c0172148e82713abb30d2dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Warning</definition>
        <argsstring>(const std::string &amp;msg)</argsstring>
        <name>Warning</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para><ref refid="classamrex_1_1Print" kindref="compound">Print</ref> out warning message to cerr. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" line="123" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX.cpp" bodystart="184" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac1e74d5d4c035c4f129a0cbb28077cf9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Warning_host</definition>
        <argsstring>(const char *msg)</argsstring>
        <name>Warning_host</name>
        <param>
          <type>const char *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" line="125" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX.cpp" bodystart="219" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a03acb27c6c261b36754a5886f87170ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::Warning</definition>
        <argsstring>(const char *msg)</argsstring>
        <name>Warning</name>
        <param>
          <type>const char *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" line="133" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" bodystart="133" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad26f2328bf66aa9678347a6055a25431" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Abort</definition>
        <argsstring>(const std::string &amp;msg)</argsstring>
        <name>Abort</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para><ref refid="classamrex_1_1Print" kindref="compound">Print</ref> out message to cerr and exit via abort(). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" line="146" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX.cpp" bodystart="178" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8398035908737ba94950398e8e449d4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Abort_host</definition>
        <argsstring>(const char *msg)</argsstring>
        <name>Abort_host</name>
        <param>
          <type>const char *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" line="148" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX.cpp" bodystart="238" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1afe2d7ef9935f8e318a80d60b5edb593a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::Abort</definition>
        <argsstring>(const char *msg=0)</argsstring>
        <name>Abort</name>
        <param>
          <type>const char *</type>
          <declname>msg</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" line="156" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" bodystart="156" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a7316f24daca402f64791688d4c49148e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Assert_host</definition>
        <argsstring>(const char *EX, const char *file, int line, const char *msg)</argsstring>
        <name>Assert_host</name>
        <param>
          <type>const char *</type>
          <declname>EX</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>line</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Prints assertion failed messages to cerr and exits via abort(). Intended for use by the <ref refid="AMReX__BLassert_8H_1a53ebc8b227de416f458800faa44c619e" kindref="member">BL_ASSERT()</ref> macro in &lt;<ref refid="AMReX__BLassert_8H" kindref="compound">AMReX_BLassert.H</ref>&gt;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" line="174" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX.cpp" bodystart="267" bodyend="301"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a346451f63cf84dc86251d9b8263655c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::Assert</definition>
        <argsstring>(const char *EX, const char *file, int line, const char *msg=nullptr)</argsstring>
        <name>Assert</name>
        <param>
          <type>const char *</type>
          <declname>EX</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>line</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>msg</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" line="182" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" bodystart="182" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a0c0dc9355722e150b88c6fc71422288e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::write_to_stderr_without_buffering</definition>
        <argsstring>(const char *str)</argsstring>
        <name>write_to_stderr_without_buffering</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>This is used by <ref refid="namespaceamrex_1aaa5d048f7bf7386b6976b10001a5f8b4" kindref="member">amrex::Error()</ref>, <ref refid="namespaceamrex_1ad26f2328bf66aa9678347a6055a25431" kindref="member">amrex::Abort()</ref>, and <ref refid="namespaceamrex_1a346451f63cf84dc86251d9b8263655c8" kindref="member">amrex::Assert()</ref> to ensure that when writing the message to stderr, that no additional heap-based memory is allocated. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" line="199" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX.cpp" bodystart="136" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae82a731c021b58a742101a3d5f803438" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::SetErrorHandler</definition>
        <argsstring>(ErrorHandler errhandler)</argsstring>
        <name>SetErrorHandler</name>
        <param>
          <type><ref refid="namespaceamrex_1aa944154cc363fe5103f6638e3726d2ca" kindref="member">ErrorHandler</ref></type>
          <declname>errhandler</declname>
          <defname>f</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" line="201" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX.cpp" bodystart="125" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1add2f0f36ce80f2f3934e3a8ec2a966df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; amrex::OutStream</definition>
        <argsstring>()</argsstring>
        <name>OutStream</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" line="203" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX.cpp" bodystart="705" bodyend="708"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a1e213ab52cdac41e691ab49370b30a34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; amrex::ErrorStream</definition>
        <argsstring>()</argsstring>
        <name>ErrorStream</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" line="204" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX.cpp" bodystart="711" bodyend="714"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1acafd26c0f64d958aed9ee56043c4f10e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::Verbose</definition>
        <argsstring>() noexcept</argsstring>
        <name>Verbose</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" line="206" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX.cpp" bodystart="121" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a125dcbb8afa7e676566242972a5b7757" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::SetVerbose</definition>
        <argsstring>(int v) noexcept</argsstring>
        <name>SetVerbose</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" line="207" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX.cpp" bodystart="123" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a0b2451baea738a8717530466c13f37fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string amrex::get_command</definition>
        <argsstring>()</argsstring>
        <name>get_command</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" line="210" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX.cpp" bodystart="717" bodyend="720"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a0f3d8f755663a93f3953f7cda5590cac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::command_argument_count</definition>
        <argsstring>()</argsstring>
        <name>command_argument_count</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" line="213" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX.cpp" bodystart="723" bodyend="726"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a566544464dedd2d70fe9969fc79658cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string amrex::get_command_argument</definition>
        <argsstring>(int number)</argsstring>
        <name>get_command_argument</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>number</declname>
        </param>
        <briefdescription>
<para>Get command line arguments. The executable name is the zero-th argument. Return empty string if there are not that many arguments. std::string. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" line="220" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX.cpp" bodystart="729" bodyend="736"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a9d0fa7afb6bbeb5e81b5570445599fbf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::GccPlacater</definition>
        <argsstring>()</argsstring>
        <name>GccPlacater</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" line="223" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" bodystart="223" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a9f149fc5da0cd0b68a9f7fddc8a7461d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> constexpr const T &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE constexpr const T&amp; amrex::min</definition>
        <argsstring>(const T &amp;a, const T &amp;b) noexcept</argsstring>
        <name>min</name>
        <param>
          <type>const T &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Algorithm.H" line="19" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Algorithm.H" bodystart="19" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a0c636227860f226cc55ea03fedb3d08e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class ...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> constexpr const T &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE constexpr const T&amp; amrex::min</definition>
        <argsstring>(const T &amp;a, const T &amp;b, const Ts &amp;... c) noexcept</argsstring>
        <name>min</name>
        <param>
          <type>const T &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const Ts &amp;...</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Algorithm.H" line="26" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Algorithm.H" bodystart="26" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a918b31ea2f518389047986cb72a8b546" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> constexpr const T &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE constexpr const T&amp; amrex::max</definition>
        <argsstring>(const T &amp;a, const T &amp;b) noexcept</argsstring>
        <name>max</name>
        <param>
          <type>const T &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Algorithm.H" line="33" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Algorithm.H" bodystart="33" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1afe8e3d7e09e34ccb79e64e87b31486c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class ...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> constexpr const T &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE constexpr const T&amp; amrex::max</definition>
        <argsstring>(const T &amp;a, const T &amp;b, const Ts &amp;... c) noexcept</argsstring>
        <name>max</name>
        <param>
          <type>const T &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const Ts &amp;...</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Algorithm.H" line="40" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Algorithm.H" bodystart="40" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac9b7549c480990b1dd5732aed43f3fa8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> constexpr <ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE constexpr Dim3 amrex::elemwiseMin</definition>
        <argsstring>(Dim3 const &amp;a, Dim3 const &amp;b) noexcept</argsstring>
        <name>elemwiseMin</name>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Algorithm.H" line="46" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Algorithm.H" bodystart="46" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a5a52e78633a01e87477ab2c4ffc8211d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> constexpr <ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE constexpr Dim3 amrex::elemwiseMax</definition>
        <argsstring>(Dim3 const &amp;a, Dim3 const &amp;b) noexcept</argsstring>
        <name>elemwiseMax</name>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Algorithm.H" line="51" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Algorithm.H" bodystart="51" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a5311a5775a3f24d73376bdc6268b7a3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::Swap</definition>
        <argsstring>(T &amp;t1, T &amp;t2) noexcept</argsstring>
        <name>Swap</name>
        <param>
          <type>T &amp;</type>
          <declname>t1</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>t2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Algorithm.H" line="57" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Algorithm.H" bodystart="57" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a529b59ce587206c3a311d25351c4016b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> constexpr const T &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE constexpr const T&amp; amrex::Clamp</definition>
        <argsstring>(const T &amp;v, const T &amp;lo, const T &amp;hi)</argsstring>
        <name>Clamp</name>
        <param>
          <type>const T &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>lo</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>hi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Algorithm.H" line="66" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Algorithm.H" bodystart="66" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6797a579beb044720ec00800077b4bc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE T amrex::bisect</definition>
        <argsstring>(T lo, T hi, F f, T tol=1e-12, int max_iter=100)</argsstring>
        <name>bisect</name>
        <param>
          <type>T</type>
          <declname>lo</declname>
        </param>
        <param>
          <type>T</type>
          <declname>hi</declname>
        </param>
        <param>
          <type>F</type>
          <declname>f</declname>
        </param>
        <param>
          <type>T</type>
          <declname>tol</declname>
          <defval>1e-12</defval>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>max_iter</declname>
          <defval>100</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Algorithm.H" line="73" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Algorithm.H" bodystart="73" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a9314c1849b946e44ddd246d9c0562e72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> std::enable_if&lt; std::is_floating_point&lt; T &gt;::value, bool &gt;::type</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE std::enable_if&lt;std::is_floating_point&lt;T&gt;::value,bool&gt;::type amrex::almostEqual</definition>
        <argsstring>(T x, T y, int ulp=2)</argsstring>
        <name>almostEqual</name>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <param>
          <type>T</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ulp</declname>
          <defval>2</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Algorithm.H" line="112" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Algorithm.H" bodystart="112" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae3d1414946b992f39ca41f135f12a0d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1Arena" kindref="compound">Arena</ref> *</type>
        <definition>Arena * amrex::The_Arena</definition>
        <argsstring>()</argsstring>
        <name>The_Arena</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.cpp" line="326" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.cpp" bodystart="326" bodyend="330"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a97a60825e6e7886b3502c2f4ed1eb417" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1Arena" kindref="compound">Arena</ref> *</type>
        <definition>Arena * amrex::The_Device_Arena</definition>
        <argsstring>()</argsstring>
        <name>The_Device_Arena</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.cpp" line="333" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.cpp" bodystart="333" bodyend="337"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a76cc74eb7c42bf4d111ac5cae5db8420" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1Arena" kindref="compound">Arena</ref> *</type>
        <definition>Arena * amrex::The_Managed_Arena</definition>
        <argsstring>()</argsstring>
        <name>The_Managed_Arena</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.cpp" line="340" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.cpp" bodystart="340" bodyend="344"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aba0258410952c3ccfe405a462ef2d887" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1Arena" kindref="compound">Arena</ref> *</type>
        <definition>Arena * amrex::The_Pinned_Arena</definition>
        <argsstring>()</argsstring>
        <name>The_Pinned_Arena</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.cpp" line="347" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.cpp" bodystart="347" bodyend="351"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1adcb4e473f4a6058ae8abd15c75bde706" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1Arena" kindref="compound">Arena</ref> *</type>
        <definition>Arena * amrex::The_Cpu_Arena</definition>
        <argsstring>()</argsstring>
        <name>The_Cpu_Arena</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.cpp" line="354" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.cpp" bodystart="354" bodyend="358"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad7bef6630afa8a2109d2a242cc2d7591" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t amrex::aligned_size</definition>
        <argsstring>(std::size_t align_requirement, std::size_t size) noexcept</argsstring>
        <name>aligned_size</name>
        <param>
          <type>std::size_t</type>
          <declname>align_requirement</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Given a minimum required size of size bytes, this returns the next largest arena size that will align to align_requirement bytes. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.H" line="15" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.H" bodystart="15" bodyend="18"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a73309828f34cc814833092699bdbc241" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::is_aligned</definition>
        <argsstring>(const void *p, std::size_t alignment) noexcept</argsstring>
        <name>is_aligned</name>
        <param>
          <type>const void *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>alignment</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.H" line="20" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.H" bodystart="20" bodyend="23"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a3d178420751d1cce6bd2661d614fbb33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename T::FABType</defval>
          </param>
        </templateparamlist>
        <type>std::array&lt; T *, AMREX_SPACEDIM &gt;</type>
        <definition>std::array&lt;T*,AMREX_SPACEDIM&gt; amrex::GetArrOfPtrs</definition>
        <argsstring>(std::array&lt; T, AMREX_SPACEDIM &gt; &amp;a) noexcept</argsstring>
        <name>GetArrOfPtrs</name>
        <param>
          <type>std::array&lt; T, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="181" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="181" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aee80b212d35c9fafe26f01f76ce6b672" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::array&lt; T *, AMREX_SPACEDIM &gt;</type>
        <definition>std::array&lt;T*,AMREX_SPACEDIM&gt; amrex::GetArrOfPtrs</definition>
        <argsstring>(const std::array&lt; std::unique_ptr&lt; T &gt;, AMREX_SPACEDIM &gt; &amp;a) noexcept</argsstring>
        <name>GetArrOfPtrs</name>
        <param>
          <type>const std::array&lt; std::unique_ptr&lt; T &gt;, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="187" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="187" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a1c2496ecb409639e8639cf01881d0acb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::array&lt; T const  *, AMREX_SPACEDIM &gt;</type>
        <definition>std::array&lt;T const*,AMREX_SPACEDIM&gt; amrex::GetArrOfConstPtrs</definition>
        <argsstring>(const std::array&lt; T, AMREX_SPACEDIM &gt; &amp;a) noexcept</argsstring>
        <name>GetArrOfConstPtrs</name>
        <param>
          <type>const std::array&lt; T, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="193" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="193" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af440a21a377ce21aced4b2360d34f09d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::array&lt; T const  *, AMREX_SPACEDIM &gt;</type>
        <definition>std::array&lt;T const*,AMREX_SPACEDIM&gt; amrex::GetArrOfConstPtrs</definition>
        <argsstring>(const std::array&lt; T *, AMREX_SPACEDIM &gt; &amp;a) noexcept</argsstring>
        <name>GetArrOfConstPtrs</name>
        <param>
          <type>const std::array&lt; T *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="199" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="199" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a5d3d4c8b853be1962df781e5b6ee395c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::array&lt; T const  *, AMREX_SPACEDIM &gt;</type>
        <definition>std::array&lt;T const*,AMREX_SPACEDIM&gt; amrex::GetArrOfConstPtrs</definition>
        <argsstring>(const std::array&lt; std::unique_ptr&lt; T &gt;, AMREX_SPACEDIM &gt; &amp;a) noexcept</argsstring>
        <name>GetArrOfConstPtrs</name>
        <param>
          <type>const std::array&lt; std::unique_ptr&lt; T &gt;, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="205" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="205" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8338a320488a4b26607928529d25c1a5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structamrex_1_1XDim3" kindref="compound">XDim3</ref></type>
        <definition>XDim3 amrex::makeXDim3</definition>
        <argsstring>(const Array&lt; Real, AMREX_SPACEDIM &gt; &amp;a) noexcept</argsstring>
        <name>makeXDim3</name>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; Real, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="214" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="214" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a365c0a4614ba19b7572ae042a0720c12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Tto</type>
          </param>
          <param>
            <type>class Tfrom</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Tto &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE Array4&lt;Tto&gt; amrex::ToArray4</definition>
        <argsstring>(Array4&lt; Tfrom &gt; const &amp;a_in) noexcept</argsstring>
        <name>ToArray4</name>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Tfrom &gt; const &amp;</type>
          <declname>a_in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" line="211" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" bodystart="211" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a71600c8a528e0f1863154e4cf0183cbc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Dim3 amrex::lbound</definition>
        <argsstring>(Array4&lt; T &gt; const &amp;a) noexcept</argsstring>
        <name>lbound</name>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" line="218" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" bodystart="218" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6ce6b4176121c2c23327903a8139af0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Dim3 amrex::ubound</definition>
        <argsstring>(Array4&lt; T &gt; const &amp;a) noexcept</argsstring>
        <name>ubound</name>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" line="225" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" bodystart="225" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab8f44b56e5ac2f53bcfe742891c1c79c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Dim3 amrex::length</definition>
        <argsstring>(Array4&lt; T &gt; const &amp;a) noexcept</argsstring>
        <name>length</name>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" line="232" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" bodystart="232" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a611b9da2c9b839d176ff0c527f918ba0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Array4&lt; T &gt; &amp;a)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" line="238" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" bodystart="238" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab49a5b78f3e95aa357d0471eee56336d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structamrex_1_1PolymorphicArray4" kindref="compound">PolymorphicArray4</ref>&lt; T &gt;</type>
        <definition>PolymorphicArray4&lt;T&gt; amrex::makePolymorphic</definition>
        <argsstring>(Array4&lt; T &gt; const &amp;a)</argsstring>
        <name>makePolymorphic</name>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" line="286" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" bodystart="286" bodyend="289"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a652bd22fb8cfcdfeaa4ac62e81a41fe6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BaseFab_Initialize</definition>
        <argsstring>()</argsstring>
        <name>BaseFab_Initialize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.cpp" line="28" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.cpp" bodystart="28" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a67b24cef9df62e8cced041445b239e86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BaseFab_Finalize</definition>
        <argsstring>()</argsstring>
        <name>BaseFab_Finalize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.cpp" line="57" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.cpp" bodystart="57" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a587a3cb57cff4b7fa72c7c1d4d98900b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Long</type>
        <definition>Long amrex::TotalBytesAllocatedInFabs</definition>
        <argsstring>() noexcept</argsstring>
        <name>TotalBytesAllocatedInFabs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.cpp" line="64" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.cpp" bodystart="64" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a95a2c5251b0bc8cc9f28f6384738404a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Long</type>
        <definition>Long amrex::TotalBytesAllocatedInFabsHWM</definition>
        <argsstring>() noexcept</argsstring>
        <name>TotalBytesAllocatedInFabsHWM</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.cpp" line="81" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.cpp" bodystart="81" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa9ed510cedd140658efd18542d9479c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Long</type>
        <definition>Long amrex::TotalCellsAllocatedInFabs</definition>
        <argsstring>() noexcept</argsstring>
        <name>TotalCellsAllocatedInFabs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.cpp" line="98" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.cpp" bodystart="98" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa85143ea71ce835e3a64ce8551b726b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Long</type>
        <definition>Long amrex::TotalCellsAllocatedInFabsHWM</definition>
        <argsstring>() noexcept</argsstring>
        <name>TotalCellsAllocatedInFabsHWM</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.cpp" line="115" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.cpp" bodystart="115" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a765c5cc6e670eb707740d51c99e7b35e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ResetTotalBytesAllocatedInFabsHWM</definition>
        <argsstring>() noexcept</argsstring>
        <name>ResetTotalBytesAllocatedInFabsHWM</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.cpp" line="132" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.cpp" bodystart="132" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae096acad3cf4e038809c53d73c0c57c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::update_fab_stats</definition>
        <argsstring>(Long n, Long s, size_t szt) noexcept</argsstring>
        <name>update_fab_stats</name>
        <param>
          <type>Long</type>
          <declname>n</declname>
        </param>
        <param>
          <type>Long</type>
          <declname>s</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>szt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.cpp" line="144" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.cpp" bodystart="144" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a610006830e72a750eb65c44c5a540695" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::update_fab_stats</definition>
        <argsstring>(Long n, Long s, std::size_t szt) noexcept</argsstring>
        <name>update_fab_stats</name>
        <param>
          <type>Long</type>
          <declname>n</declname>
        </param>
        <param>
          <type>Long</type>
          <declname>s</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>szt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="62" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a23fa77892c9168a73ef0d653ddd550a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Array4&lt;T&gt; amrex::makeArray4</definition>
        <argsstring>(T *p, Box const &amp;bx, int ncomp) noexcept</argsstring>
        <name>makeArray4</name>
        <param>
          <type>T *</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="88" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="88" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a73fec27a7206dd9a1eb9cb593936f784" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; std::is_arithmetic&lt; T &gt;::value &gt;::type</type>
        <definition>std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value&gt;::type amrex::placementNew</definition>
        <argsstring>(T *const, Long)</argsstring>
        <name>placementNew</name>
        <param>
          <type>T *</type>
          <declname>const</declname>
        </param>
        <param>
          <type>Long</type>
        </param>
        <briefdescription>
<para>A Fortran Array-like Object <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref> emulates the Fortran array concept. Useful operations can be performed upon BaseFabs in C++, and they provide a convenient interface to Fortran when it is necessary to retreat into that language. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref> is a template class. Through use of the template, a <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref> may be based upon any class. So far at least, most applications have been based upon simple types like integers, real*4s, or real*8s. Most applications do not use BaseFabs directly, but utilize specialized classes derived from <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>.</para><para>Classes derived from <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref> include <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref>, <ref refid="classamrex_1_1IArrayBox" kindref="compound">IArrayBox</ref>, <ref refid="classamrex_1_1TagBox" kindref="compound">TagBox</ref>, <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref>, <ref refid="classamrex_1_1EBFArrayBox" kindref="compound">EBFArrayBox</ref>, <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> and <ref refid="classamrex_1_1CutFab" kindref="compound">CutFab</ref>.</para><para><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref> objects depend on the dimensionality of space (indirectly through the DOMAIN <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> member). It is typical to define the macro SPACEDIM to be 1, 2, or 3 to indicate the dimension of space. See the discussion of class <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> for more information. A <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref> contains a <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> DOMAIN, which indicates the integer indexing space over which the array is defined. A <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref> also has NVAR components. By components, we mean that for each point in the rectangular indexing space, there are NVAR values associated with that point. A Fortran array corresponding to a <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref> would have (SPACEDIM+1) dimensions.</para><para>By design, the array layout in a <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref> mirrors that of a Fortran array. The first index (x direction for example) varies most rapidly, the next index (y direction), if any, varies next fastest. The component index varies last, after all the spatial indices.</para><para>It is sometimes convenient to be able to treat a sub-array within an existing <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref> as a <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref> in its own right. This is often referred to as aliasing the <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>. Note that when aliasing is used, the BaseFabs domain will not, in general, be the same as the parent BaseFabs domain, nor will the number of components. <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref> is a dimension dependent class, so SPACEDIM must be defined as either 1, 2, or 3 when compiling.</para><para>This is NOT a polymorphic class.</para><para>It does NOT provide a copy constructor or assignment operator.</para><para>T MUST have a default constructor and an assignment operator. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="143" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="143" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1adfe468a1156e462d70f8f4a39143ce70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; <ref refid="AMReX__TypeTraits_8H_1a0eff68a0533ea2aa13ab568ac932c60b" kindref="member">AMREX_IS_TRIVIALLY_DEFAULT_CONSTRUCTIBLE</ref>(T) &amp;&amp;!std::is_arithmetic&lt; T &gt;::value &gt;::type</type>
        <definition>std::enable_if&lt; AMREX_IS_TRIVIALLY_DEFAULT_CONSTRUCTIBLE(T) &amp;&amp; !std::is_arithmetic&lt;T&gt;::value &gt;::type amrex::placementNew</definition>
        <argsstring>(T *const ptr, Long n)</argsstring>
        <name>placementNew</name>
        <param>
          <type>T *const</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>Long</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="148" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="148" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a2c16bb3b63e640a67dd4784d6d64bd34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt;!<ref refid="AMReX__TypeTraits_8H_1a0eff68a0533ea2aa13ab568ac932c60b" kindref="member">AMREX_IS_TRIVIALLY_DEFAULT_CONSTRUCTIBLE</ref>(T)&gt;::type</type>
        <definition>std::enable_if&lt;!AMREX_IS_TRIVIALLY_DEFAULT_CONSTRUCTIBLE(T)&gt;::type amrex::placementNew</definition>
        <argsstring>(T *const ptr, Long n)</argsstring>
        <name>placementNew</name>
        <param>
          <type>T *const</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>Long</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="157" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="157" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aee305735e81ee2d836ea3043c2e5baa1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; std::is_trivially_destructible&lt; T &gt;::value &gt;::type</type>
        <definition>std::enable_if&lt;std::is_trivially_destructible&lt;T&gt;::value&gt;::type amrex::placementDelete</definition>
        <argsstring>(T *const, Long)</argsstring>
        <name>placementDelete</name>
        <param>
          <type>T *</type>
          <declname>const</declname>
        </param>
        <param>
          <type>Long</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="167" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="167" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af6da468471baec434494c96d522891b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt;!std::is_trivially_destructible&lt; T &gt;::value &gt;::type</type>
        <definition>std::enable_if&lt;!std::is_trivially_destructible&lt;T&gt;::value&gt;::type amrex::placementDelete</definition>
        <argsstring>(T *const ptr, Long n)</argsstring>
        <name>placementDelete</name>
        <param>
          <type>T *const</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>Long</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="172" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="172" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa7261f50da60e78a42e700384710cd47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Tto</type>
          </param>
          <param>
            <type>class Tfrom</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::cast</definition>
        <argsstring>(BaseFab&lt; Tto &gt; &amp;tofab, BaseFab&lt; Tfrom &gt; const &amp;fromfab, Box const &amp;bx, SrcComp scomp, DestComp dcomp, NumComps ncomp) noexcept</argsstring>
        <name>cast</name>
        <param>
          <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; Tto &gt; &amp;</type>
          <declname>tofab</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; Tfrom &gt; const &amp;</type>
          <declname>fromfab</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1SrcComp" kindref="compound">SrcComp</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1DestComp" kindref="compound">DestComp</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1NumComps" kindref="compound">NumComps</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFabUtility.H" line="12" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFabUtility.H" bodystart="12" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a358047fb4d130fa47fcdfb002e31cb48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>STRUCTSIZE</declname>
            <defname>STRUCTSIZE</defname>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::fill</definition>
        <argsstring>(BaseFab&lt; GpuArray&lt; Real, STRUCTSIZE &gt; &gt; &amp;aos_fab, F &amp;&amp;f)</argsstring>
        <name>fill</name>
        <param>
          <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; <ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, STRUCTSIZE &gt; &gt; &amp;</type>
          <declname>aos_fab</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFabUtility.H" line="25" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFabUtility.H" bodystart="25" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac58ae562e33ec29796418c84ad3d07dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::setBC</definition>
        <argsstring>(const Box &amp;bx, const Box &amp;domain, int src_comp, int dest_comp, int ncomp, const Vector&lt; BCRec &gt; &amp;bc_dom, Vector&lt; BCRec &gt; &amp;bcr) noexcept</argsstring>
        <name>setBC</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>domain</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dest_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> &gt; &amp;</type>
          <declname>bc_dom</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> &gt; &amp;</type>
          <declname>bcr</declname>
        </param>
        <briefdescription>
<para>Function for setting array of BCs. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BCRec.cpp" line="9" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BCRec.cpp" bodystart="9" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a539c997273a93fdaabfc2a131c4425cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const BCRec &amp;b)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BCRec.cpp" line="35" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BCRec.cpp" bodystart="36" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad6ef0d3ad9d3a423c18134d029e0d7f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::setBC</definition>
        <argsstring>(const Box &amp;bx, const Box &amp;domain, const BCRec &amp;bc_dom, BCRec &amp;bcr) noexcept</argsstring>
        <name>setBC</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>domain</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> &amp;</type>
          <declname>bc_dom</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> &amp;</type>
          <declname>bcr</declname>
        </param>
        <briefdescription>
<para>Function for setting a BC. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BCRec.H" line="143" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BCRec.H" bodystart="143" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a0b7407c69f5df5cb424eccddb336331b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FillDomainBoundary</definition>
        <argsstring>(MultiFab &amp;phi, const Geometry &amp;geom, const Vector&lt; BCRec &gt; &amp;bc)</argsstring>
        <name>FillDomainBoundary</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> &gt; &amp;</type>
          <declname>bc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BCUtil.cpp" line="33" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BCUtil.cpp" bodystart="33" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a5a8c3c95822fc26d529026c5ef8b9308" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Box &amp;bx)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Write an ASCII representation to the ostream. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.cpp" line="17" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.cpp" bodystart="18" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aac7b44499bc56506bcf5ed89ec42bc09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::istream &amp;</type>
        <definition>std::istream &amp; amrex::operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;os, Box &amp;bx)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Read from istream. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.cpp" line="39" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.cpp" bodystart="39" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad433171e426d58e2414c5394bfe0303c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::AllGatherBoxes</definition>
        <argsstring>(Vector&lt; Box &gt; &amp;bxs, int n_extra_reserve)</argsstring>
        <name>AllGatherBoxes</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &gt; &amp;</type>
          <declname>bxs</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n_extra_reserve</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.cpp" line="107" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.cpp" bodystart="107" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aedb1ce8af83d1d6323271203b7168bcc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Box amrex::grow</definition>
        <argsstring>(const Box &amp;b, int i) noexcept</argsstring>
        <name>grow</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Grow <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> in all directions by given amount. </para>        </briefdescription>
        <detaileddescription>
<para>NOTE: n_cell negative shrinks the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> by that number of cells. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="1104" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1104" bodyend="1109"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af618b4b7011b62f674ed6deaf5646e09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Box amrex::grow</definition>
        <argsstring>(const Box &amp;b, const IntVect &amp;v) noexcept</argsstring>
        <name>grow</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Grow <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> in each direction by specified amount. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="1114" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1114" bodyend="1119"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af58cfa843dfe4c3d701828c792b48f9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Box amrex::grow</definition>
        <argsstring>(const Box &amp;b, int idir, int n_cell) noexcept</argsstring>
        <name>grow</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>idir</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n_cell</declname>
        </param>
        <briefdescription>
<para>Grow <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> in direction idir be n_cell cells. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="1124" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1124" bodyend="1129"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a1df6dc043a1e7c9598d2dbc331c3a822" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Box amrex::grow</definition>
        <argsstring>(const Box &amp;b, Direction d, int n_cell) noexcept</argsstring>
        <name>grow</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a8de829410ed15dbc56e4dafc9bc6ea69" kindref="member">Direction</ref></type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n_cell</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="1133" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1133" bodyend="1136"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a83482f38d773ec79abbd74b9fa084436" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Box amrex::growLo</definition>
        <argsstring>(const Box &amp;b, int idir, int n_cell) noexcept</argsstring>
        <name>growLo</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>idir</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n_cell</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="1140" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1140" bodyend="1145"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a1d65bfa10f55728eabebc8e179e2ee98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Box amrex::growLo</definition>
        <argsstring>(const Box &amp;b, Direction d, int n_cell) noexcept</argsstring>
        <name>growLo</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a8de829410ed15dbc56e4dafc9bc6ea69" kindref="member">Direction</ref></type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n_cell</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="1149" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1149" bodyend="1152"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac2123a6b0d0f3ddc938fbbb4c8b89f73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Box amrex::growHi</definition>
        <argsstring>(const Box &amp;b, int idir, int n_cell) noexcept</argsstring>
        <name>growHi</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>idir</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n_cell</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="1156" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1156" bodyend="1161"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6cf9fe30602ba4db22eef149d771d25a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Box amrex::growHi</definition>
        <argsstring>(const Box &amp;b, Direction d, int n_cell) noexcept</argsstring>
        <name>growHi</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a8de829410ed15dbc56e4dafc9bc6ea69" kindref="member">Direction</ref></type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n_cell</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="1165" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1165" bodyend="1168"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a9fb6c36ab72dfe92709f0ea89baa4824" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Box amrex::coarsen</definition>
        <argsstring>(const Box &amp;b, int ref_ratio) noexcept</argsstring>
        <name>coarsen</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ref_ratio</declname>
        </param>
        <briefdescription>
<para>Coarsen <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> by given (positive) refinement ratio. NOTE: if type(dir) = CELL centered: lo &lt;- lo/ratio and hi &lt;- hi/ratio. NOTE: if type(dir) = NODE centered: lo &lt;- lo/ratio and hi &lt;- hi/ratio + ((hiratio)==0 ? 0 : 1). That is, refinement of coarsened <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> must contain the original <ref refid="classamrex_1_1Box" kindref="compound">Box</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="1181" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1181" bodyend="1186"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af8eff72ab7121f959ef6f562bee95ff6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Box amrex::coarsen</definition>
        <argsstring>(const Box &amp;b, const IntVect &amp;ref_ratio) noexcept</argsstring>
        <name>coarsen</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ref_ratio</declname>
        </param>
        <briefdescription>
<para>Coarsen <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> by given (positive) refinement ratio. NOTE: if type(dir) = CELL centered: lo &lt;- lo/ratio and hi &lt;- hi/ratio. NOTE: if type(dir) = NODE centered: lo &lt;- lo/ratio and hi &lt;- hi/ratio + ((hiratio)==0 ? 0 : 1). That is, refinement of coarsened <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> must contain the original <ref refid="classamrex_1_1Box" kindref="compound">Box</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="1199" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1199" bodyend="1204"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1abb7cbdfb8c8ec3d94bec38fcf10b92db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Box amrex::refine</definition>
        <argsstring>(const Box &amp;b, int ref_ratio) noexcept</argsstring>
        <name>refine</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ref_ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Refine <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> by given (positive) refinement ratio. NOTE: if type(dir) = CELL centered: lo &lt;- lo*ratio and hi &lt;- (hi+1)*ratio - 1. NOTE: if type(dir) = NODE centered: lo &lt;- lo*ratio and hi &lt;- hi*ratio. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="1215" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1215" bodyend="1220"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aeda82776b77d98746dcda422ab7586a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Box amrex::refine</definition>
        <argsstring>(const Box &amp;b, const IntVect &amp;ref_ratio) noexcept</argsstring>
        <name>refine</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ref_ratio</declname>
        </param>
        <briefdescription>
<para>Refine <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> by given (positive) refinement ratio. NOTE: if type(dir) = CELL centered: lo &lt;- lo*ratio and hi &lt;- (hi+1)*ratio - 1. NOTE: if type(dir) = NODE centered: lo &lt;- lo*ratio and hi &lt;- hi*ratio. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="1231" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1231" bodyend="1236"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ace26a2763f9834a0e4e2369463dd7452" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Box amrex::shift</definition>
        <argsstring>(const Box &amp;b, int dir, int nzones) noexcept</argsstring>
        <name>shift</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nzones</declname>
        </param>
        <briefdescription>
<para>Return a <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> with indices shifted by nzones in dir direction. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="1241" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1241" bodyend="1246"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac305cd6b4b0f79bcbef6ad1be4d7a06e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Box amrex::shift</definition>
        <argsstring>(const Box &amp;b, const IntVect &amp;nzones) noexcept</argsstring>
        <name>shift</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>nzones</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="1250" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1250" bodyend="1255"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a83ce813a4f22bd122dfa0d93671ecb4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Box amrex::surroundingNodes</definition>
        <argsstring>(const Box &amp;b, int dir) noexcept</argsstring>
        <name>surroundingNodes</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Returns a <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> with NODE based coordinates in direction dir that encloses <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> b. NOTE: equivalent to b.convert(dir,NODE) NOTE: error if b.type(dir) == NODE. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="1264" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1264" bodyend="1269"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad59ba0f6a56711a1491f9f73648b2876" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Box amrex::surroundingNodes</definition>
        <argsstring>(const Box &amp;b, Direction d) noexcept</argsstring>
        <name>surroundingNodes</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a8de829410ed15dbc56e4dafc9bc6ea69" kindref="member">Direction</ref></type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="1273" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1273" bodyend="1276"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad1a4ed5319693f09fb892ae0557d7691" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Box amrex::surroundingNodes</definition>
        <argsstring>(const Box &amp;b) noexcept</argsstring>
        <name>surroundingNodes</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Returns a <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> with NODE based coordinates in all directions that encloses <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> b. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="1284" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1284" bodyend="1289"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a314545dbd77212eb64c3a248c754eda6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Box amrex::convert</definition>
        <argsstring>(const Box &amp;b, const IntVect &amp;typ) noexcept</argsstring>
        <name>convert</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>typ</declname>
        </param>
        <briefdescription>
<para>Returns a <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> with different type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="1294" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1294" bodyend="1299"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac713cf6298ee79d5fd03c241ebf5bc7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Box amrex::convert</definition>
        <argsstring>(const Box &amp;b, const IndexType &amp;typ) noexcept</argsstring>
        <name>convert</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref> &amp;</type>
          <declname>typ</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="1303" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1303" bodyend="1308"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab6ab1a9e025eea672b3117f9f32d1a68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Box amrex::enclosedCells</definition>
        <argsstring>(const Box &amp;b, int dir) noexcept</argsstring>
        <name>enclosedCells</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Returns a <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> with CELL based coordinates in direction dir that is enclosed by b. NOTE: equivalent to b.convert(dir,CELL) NOTE: error if b.type(dir) == CELL. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="1318" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1318" bodyend="1323"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1abab0cc8dec794fd7506ddcfb6ac27b85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Box amrex::enclosedCells</definition>
        <argsstring>(const Box &amp;b, Direction d) noexcept</argsstring>
        <name>enclosedCells</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a8de829410ed15dbc56e4dafc9bc6ea69" kindref="member">Direction</ref></type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="1327" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1327" bodyend="1330"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a5ea45540360fef1546b77116880c4ab9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Box amrex::enclosedCells</definition>
        <argsstring>(const Box &amp;b) noexcept</argsstring>
        <name>enclosedCells</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Returns a <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> with CELL based coordinates in all directions that is enclosed by b. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="1338" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1338" bodyend="1343"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a48fd69edf0706c07faf10f17de423873" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Box amrex::bdryLo</definition>
        <argsstring>(const Box &amp;b, int dir, int len=1) noexcept</argsstring>
        <name>bdryLo</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>len</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Returns the edge-centered <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> (in direction dir) defining the low side of <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> b. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="1351" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1351" bodyend="1364"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af60a35bfa44b2339838f41313bdd0611" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Box amrex::bdryHi</definition>
        <argsstring>(const Box &amp;b, int dir, int len=1) noexcept</argsstring>
        <name>bdryHi</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>len</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Returns the edge-centered <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> (in direction dir) defining the high side of <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> b. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="1372" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1372" bodyend="1386"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a7d6bd006ccae244c28b73110e139ed1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Box amrex::bdryNode</definition>
        <argsstring>(const Box &amp;b, Orientation face, int len=1) noexcept</argsstring>
        <name>bdryNode</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Orientation" kindref="compound">Orientation</ref></type>
          <declname>face</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>len</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Similar to bdryLo and bdryHi except that it operates on the given face of box b. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="1394" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1394" bodyend="1418"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aae360b0fe88c8af72c293906e6e7d3c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Box amrex::adjCellLo</definition>
        <argsstring>(const Box &amp;b, int dir, int len=1) noexcept</argsstring>
        <name>adjCellLo</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>len</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Returns the cell centered <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> of length len adjacent to b on the low end along the coordinate direction dir. The return <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> is identical to b in the other directions. The return <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> and b have an empty intersection. NOTE: len &gt;= 1 NOTE: <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> retval = b.adjCellLo(b,dir,len) is equivalent to the following set of operations: <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> retval(b); retval.convert(dir,Box::CELL); retval.setrange(dir,retval.smallEnd(dir)-len,len);. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="1434" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1434" bodyend="1448"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6b84705b46b7a57e78bb865c63eacab9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Box amrex::adjCellHi</definition>
        <argsstring>(const Box &amp;b, int dir, int len=1) noexcept</argsstring>
        <name>adjCellHi</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>len</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Similar to adjCellLo but builds an adjacent <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> on the high end. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="1453" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1453" bodyend="1468"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a68db5764cbf67a29f9cd2cc91d291a82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Box amrex::adjCell</definition>
        <argsstring>(const Box &amp;b, Orientation face, int len=1) noexcept</argsstring>
        <name>adjCell</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Orientation" kindref="compound">Orientation</ref></type>
          <declname>face</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>len</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Similar to adjCellLo and adjCellHi; operates on given face. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="1473" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1473" bodyend="1498"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a67df6bf4139c0d12419a8f5ca21d2730" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Box amrex::minBox</definition>
        <argsstring>(const Box &amp;b1, const Box &amp;b2) noexcept</argsstring>
        <name>minBox</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b1</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b2</declname>
        </param>
        <briefdescription>
<para>Modify <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> to that of the minimum <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> containing both the original <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> and the argument. Both Boxes must have identical type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="1507" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1507" bodyend="1512"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a38527c39e1b07777c6b7390f77db95e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Dim3 amrex::lbound</definition>
        <argsstring>(Box const &amp;box) noexcept</argsstring>
        <name>lbound</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="1522" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1522" bodyend="1531"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aee1c8ddea8a977a982dbe39c4a9884a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Dim3 amrex::ubound</definition>
        <argsstring>(Box const &amp;box) noexcept</argsstring>
        <name>ubound</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="1535" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1535" bodyend="1544"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a43103621a410a27f2e8b9607f4ae6f34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Dim3 amrex::begin</definition>
        <argsstring>(Box const &amp;box) noexcept</argsstring>
        <name>begin</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="1548" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1548" bodyend="1557"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a199ea36f687fd4271b73c72b56fd3279" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Dim3 amrex::end</definition>
        <argsstring>(Box const &amp;box) noexcept</argsstring>
        <name>end</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="1561" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1561" bodyend="1570"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a346de71b0a8301172fc1cc6df227037a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Dim3 amrex::length</definition>
        <argsstring>(Box const &amp;box) noexcept</argsstring>
        <name>length</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="1574" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1574" bodyend="1586"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a10613950f73e309724a256c28d4849e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Dim3 amrex::max_lbound</definition>
        <argsstring>(Box const &amp;b1, Box const &amp;b2) noexcept</argsstring>
        <name>max_lbound</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>b1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>b2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="1591" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1591" bodyend="1605"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a222afb2258b39f24134caf1142f66181" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Dim3 amrex::max_lbound</definition>
        <argsstring>(Box const &amp;b1, Dim3 const &amp;lo) noexcept</argsstring>
        <name>max_lbound</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>b1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>lo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="1609" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1609" bodyend="1623"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a1ffc05df0359580bd1fc89982cbaf264" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Dim3 amrex::min_ubound</definition>
        <argsstring>(Box const &amp;b1, Box const &amp;b2) noexcept</argsstring>
        <name>min_ubound</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>b1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>b2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="1628" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1628" bodyend="1642"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4e889233ea8d3d82a2d6416667395c06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Dim3 amrex::min_ubound</definition>
        <argsstring>(Box const &amp;b1, Dim3 const &amp;hi) noexcept</argsstring>
        <name>min_ubound</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>b1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>hi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="1646" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1646" bodyend="1660"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a2f9af438df67d831ca3a3db7a71f811f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Box amrex::minBox</definition>
        <argsstring>(Box const &amp;b1, Box const &amp;b2, IndexType typ) noexcept</argsstring>
        <name>minBox</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>b1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>b2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref></type>
          <declname>typ</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="1664" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1664" bodyend="1685"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a7b537fc474280d5ef7e52aecc43fe788" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_FORCE_INLINE Box amrex::getIndexBounds</definition>
        <argsstring>(Box const &amp;b1) noexcept</argsstring>
        <name>getIndexBounds</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>b1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="1692" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1692" bodyend="1695"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a358893f9ba4e2d3c7cd837cfd6d4cb76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_FORCE_INLINE Box amrex::getIndexBounds</definition>
        <argsstring>(Box const &amp;b1, Box const &amp;b2) noexcept</argsstring>
        <name>getIndexBounds</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>b1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>b2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="1698" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1698" bodyend="1704"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a462904ee55045e5ef05d55ec7d4b2254" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class ...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_FORCE_INLINE Box amrex::getIndexBounds</definition>
        <argsstring>(T const &amp;b1, T const &amp;b2, Ts const &amp;... b3) noexcept</argsstring>
        <name>getIndexBounds</name>
        <param>
          <type>T const &amp;</type>
          <declname>b1</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>b2</declname>
        </param>
        <param>
          <type>Ts const &amp;...</type>
          <declname>b3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="1708" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1708" bodyend="1711"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1acaf1644c0e71ab419cdf9495cd29a030" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVect amrex::getCell</definition>
        <argsstring>(Box const *boxes, int nboxes, Long icell) noexcept</argsstring>
        <name>getCell</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const *</type>
          <declname>boxes</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nboxes</declname>
        </param>
        <param>
          <type>Long</type>
          <declname>icell</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="1716" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1716" bodyend="1730"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a2983da382fcac2be36927be35cbd2c10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const BoxArray &amp;ba)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const BoxArray &amp;</type>
          <declname>ba</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" line="1579" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="1580" bodyend="1601"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af4b25f1a81ffa836ed7356d6da7e814e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BoxArray</type>
        <definition>BoxArray amrex::boxComplement</definition>
        <argsstring>(const Box &amp;b1in, const Box &amp;b2)</argsstring>
        <name>boxComplement</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b1in</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" line="1604" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="1604" bodyend="1608"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8c00ae57393c9f6665f88b80e3cdfb2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BoxArray</type>
        <definition>BoxArray amrex::complementIn</definition>
        <argsstring>(const Box &amp;b, const BoxArray &amp;ba)</argsstring>
        <name>complementIn</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const BoxArray &amp;</type>
          <declname>ba</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" line="1611" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="1611" bodyend="1615"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a412497dd4eac6d90b273f280818ca354" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BoxArray</type>
        <definition>BoxArray amrex::intersect</definition>
        <argsstring>(const BoxArray &amp;ba, const Box &amp;b, int ng)</argsstring>
        <name>intersect</name>
        <param>
          <type>const BoxArray &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ng</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" line="1618" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="1618" bodyend="1641"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a2fa5535ba8d983023e1a6bd61c9a4880" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BoxArray</type>
        <definition>BoxArray amrex::intersect</definition>
        <argsstring>(const BoxArray &amp;ba, const Box &amp;b, const IntVect &amp;ng)</argsstring>
        <name>intersect</name>
        <param>
          <type>const BoxArray &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ng</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" line="1644" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="1644" bodyend="1667"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a172c409fe49ab498d9910cc19b732346" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BoxArray</type>
        <definition>BoxArray amrex::intersect</definition>
        <argsstring>(const BoxArray &amp;lhs, const BoxArray &amp;rhs)</argsstring>
        <name>intersect</name>
        <param>
          <type>const BoxArray &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const BoxArray &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" line="1670" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="1670" bodyend="1680"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4f75454b7ddd1be750318c754c3b1ae3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref></type>
        <definition>BoxList amrex::intersect</definition>
        <argsstring>(const BoxArray &amp;ba, const BoxList &amp;bl)</argsstring>
        <name>intersect</name>
        <param>
          <type>const BoxArray &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;</type>
          <declname>bl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" line="1683" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="1683" bodyend="1692"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af37f380f72af598af4865070235664c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BoxArray</type>
        <definition>BoxArray amrex::convert</definition>
        <argsstring>(const BoxArray &amp;ba, IndexType typ)</argsstring>
        <name>convert</name>
        <param>
          <type>const BoxArray &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref></type>
          <declname>typ</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" line="1695" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="1695" bodyend="1700"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a911442fbfdd591235baf90cac01d9856" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BoxArray</type>
        <definition>BoxArray amrex::convert</definition>
        <argsstring>(const BoxArray &amp;ba, const IntVect &amp;typ)</argsstring>
        <name>convert</name>
        <param>
          <type>const BoxArray &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>typ</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" line="1703" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="1703" bodyend="1708"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a22ce5ec6a27aa7bce43ca708cec77023" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BoxArray</type>
        <definition>BoxArray amrex::coarsen</definition>
        <argsstring>(const BoxArray &amp;ba, int ratio)</argsstring>
        <name>coarsen</name>
        <param>
          <type>const BoxArray &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" line="1711" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="1711" bodyend="1716"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a255709aafea190412cf8a963f450ebc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BoxArray</type>
        <definition>BoxArray amrex::coarsen</definition>
        <argsstring>(const BoxArray &amp;ba, const IntVect &amp;ratio)</argsstring>
        <name>coarsen</name>
        <param>
          <type>const BoxArray &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" line="1719" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="1719" bodyend="1724"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae4c03c73102c83c74769b7773fb82483" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BoxArray</type>
        <definition>BoxArray amrex::refine</definition>
        <argsstring>(const BoxArray &amp;ba, int ratio)</argsstring>
        <name>refine</name>
        <param>
          <type>const BoxArray &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" line="1727" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="1727" bodyend="1732"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a85187c36418a08cc244643e6fc869f4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BoxArray</type>
        <definition>BoxArray amrex::refine</definition>
        <argsstring>(const BoxArray &amp;ba, const IntVect &amp;ratio)</argsstring>
        <name>refine</name>
        <param>
          <type>const BoxArray &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" line="1735" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="1735" bodyend="1740"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a719e505b04b336141e1a9a6ab52ecbcd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref></type>
        <definition>BoxList amrex::GetBndryCells</definition>
        <argsstring>(const BoxArray &amp;ba, int ngrow)</argsstring>
        <name>GetBndryCells</name>
        <param>
          <type>const BoxArray &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngrow</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" line="1743" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="1743" bodyend="1797"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab69e582cef17dfd91d829e59457a28fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::readBoxArray</definition>
        <argsstring>(BoxArray &amp;ba, std::istream &amp;is, bool bReadSpecial)</argsstring>
        <name>readBoxArray</name>
        <param>
          <type>BoxArray &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bReadSpecial</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" line="1801" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="1801" bodyend="1828"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a89eb9459b4109c4f9a9b3225abae29f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::match</definition>
        <argsstring>(const BoxArray &amp;x, const BoxArray &amp;y)</argsstring>
        <name>match</name>
        <param>
          <type>const BoxArray &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const BoxArray &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" line="1830" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="1830" bodyend="1841"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa34e9c1b35146df170443ce809faee80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const BoxArray::RefID &amp;id)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const BoxArray::RefID &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" line="1843" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="1844" bodyend="1848"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a3fb0e9220f2aa85a365f7ec254f2e3d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::intersect</definition>
        <argsstring>(BoxDomain &amp;dest, const BoxDomain &amp;fin, const Box &amp;b)</argsstring>
        <name>intersect</name>
        <param>
          <type><ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref> &amp;</type>
          <declname>fin</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Compute the intersection of <ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref> fin with <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> b and place the result into <ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref> dest. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.cpp" line="19" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.cpp" bodystart="19" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af32b91948787281bd9c0c691f3f355dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::refine</definition>
        <argsstring>(BoxDomain &amp;dest, const BoxDomain &amp;fin, int ratio)</argsstring>
        <name>refine</name>
        <param>
          <type><ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref> &amp;</type>
          <declname>fin</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
<para>Refine all Boxes in the domain by the refinement ratio and return the result in dest. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.cpp" line="36" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.cpp" bodystart="36" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a15969b1b7e5e1431ce9aea3b513ec98a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::accrete</definition>
        <argsstring>(BoxDomain &amp;dest, const BoxDomain &amp;fin, int sz=1)</argsstring>
        <name>accrete</name>
        <param>
          <type><ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref> &amp;</type>
          <declname>fin</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>sz</declname>
        </param>
        <briefdescription>
<para>Grow each <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> in <ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref> fin by size sz and place the result into <ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref> dest. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.cpp" line="45" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.cpp" bodystart="45" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa7fdcd82c18fdf6c33f4194da8e7da46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::coarsen</definition>
        <argsstring>(BoxDomain &amp;dest, const BoxDomain &amp;fin, int ratio)</argsstring>
        <name>coarsen</name>
        <param>
          <type><ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref> &amp;</type>
          <declname>fin</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
<para>Coarsen all Boxes in the domain by the refinement ratio. The result is placed into a new <ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.cpp" line="54" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.cpp" bodystart="54" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a417fa2fe3545ffe81b848760bbe1bcd9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref></type>
        <definition>BoxDomain amrex::complementIn</definition>
        <argsstring>(const Box &amp;b, const BoxDomain &amp;bl)</argsstring>
        <name>complementIn</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref> &amp;</type>
          <declname>bl</declname>
        </param>
        <briefdescription>
<para>Returns the complement of <ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref> bl in <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> b. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.cpp" line="73" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.cpp" bodystart="73" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a227c6302f26efd6a5c8fef40c77906f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const BoxDomain &amp;bd)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref> &amp;</type>
          <declname>bd</declname>
        </param>
        <briefdescription>
<para>Output a <ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref> to an ostream is ASCII format. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.cpp" line="224" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.cpp" bodystart="225" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a07499fc06f1137386e318ccccca0b5bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref></type>
        <definition>BoxList amrex::complementIn</definition>
        <argsstring>(const Box &amp;b, const BoxList &amp;bl)</argsstring>
        <name>complementIn</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;</type>
          <declname>bl</declname>
        </param>
        <briefdescription>
<para>Returns a <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> defining the complement of <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> bl in <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> b. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" line="20" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a7cb1edb123daa9e2146ae0db8e2ed910" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref></type>
        <definition>BoxList amrex::boxDiff</definition>
        <argsstring>(const Box &amp;b1in, const Box &amp;b2)</argsstring>
        <name>boxDiff</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b1in</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b2</declname>
        </param>
        <briefdescription>
<para>Returns <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> defining the compliment of b2 in b1in. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" line="23" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a23d225d20bb2631874de8edff71dbc88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::boxDiff</definition>
        <argsstring>(BoxList &amp;bl_diff, const Box &amp;b1in, const Box &amp;b2)</argsstring>
        <name>boxDiff</name>
        <param>
          <type><ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;</type>
          <declname>bl_diff</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b1in</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" line="25" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1afe1aa5a62080b50fbc4c3646ddbc6c8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref></type>
        <definition>BoxList amrex::refine</definition>
        <argsstring>(const BoxList &amp;bl, int ratio)</argsstring>
        <name>refine</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;</type>
          <declname>bl</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
<para>Returns a new <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> in which each <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> is refined by the given ratio. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" line="28" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a2def914169be100afac8106fd618b6f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref></type>
        <definition>BoxList amrex::coarsen</definition>
        <argsstring>(const BoxList &amp;bl, int ratio)</argsstring>
        <name>coarsen</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;</type>
          <declname>bl</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
<para>Returns a new <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> in which each <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> is coarsened by the given ratio. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" line="31" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1afe22e052a797bf296858f9330273112d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref></type>
        <definition>BoxList amrex::intersect</definition>
        <argsstring>(const BoxList &amp;bl, const Box &amp;b)</argsstring>
        <name>intersect</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;</type>
          <declname>bl</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Returns a <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> defining the intersection of bl with b. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" line="34" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac662c42f6780a1a61523d3bb4fa5fba1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref></type>
        <definition>BoxList amrex::accrete</definition>
        <argsstring>(const BoxList &amp;bl, int sz)</argsstring>
        <name>accrete</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;</type>
          <declname>bl</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>sz</declname>
        </param>
        <briefdescription>
<para>Returns a new <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> in which each <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> is grown by the given size. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" line="37" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af71361ab9190f8aeb8f70488669095c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref></type>
        <definition>BoxList amrex::removeOverlap</definition>
        <argsstring>(const BoxList &amp;bl)</argsstring>
        <name>removeOverlap</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;</type>
          <declname>bl</declname>
        </param>
        <briefdescription>
<para>Return <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> which covers the same area but has no overlapping boxes. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" line="40" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a1707379eb41f317b0b08a3827c641713" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const BoxList &amp;blist)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;</type>
          <declname>blist</declname>
        </param>
        <briefdescription>
<para>Output a <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> to an ostream in ASCII format. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" line="44" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa820e267be1d0dc2b3800553d57ae2ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const CoordSys &amp;c)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1CoordSys" kindref="compound">CoordSys</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.cpp" line="415" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.cpp" bodystart="416" bodyend="428"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4058fe437a44e4e9367221fbd9fa9e3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::istream &amp;</type>
        <definition>std::istream&amp; amrex::operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;is, CoordSys &amp;c)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1CoordSys" kindref="compound">CoordSys</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.cpp" line="436" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.cpp" bodystart="436" bodyend="461"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a5be48241dfac16941f5f4c66fdd7d584" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::amrex_setvol</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;vol, GpuArray&lt; Real, 1 &gt; const &amp;offset, GpuArray&lt; Real, 1 &gt; const &amp;dx, const int coord) noexcept</argsstring>
        <name>amrex_setvol</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>vol</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, 1 &gt; const &amp;</type>
          <declname>offset</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, 1 &gt; const &amp;</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>coord</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_COORDSYS_1D_C.H" line="15" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_COORDSYS_1D_C.H" bodystart="15" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a5e3145837cdc69bc378ae3e7751aeafe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::amrex_setarea</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;area, GpuArray&lt; Real, 1 &gt; const &amp;offset, GpuArray&lt; Real, 1 &gt; const &amp;dx, const int, const int coord) noexcept</argsstring>
        <name>amrex_setarea</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>area</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, 1 &gt; const &amp;</type>
          <declname>offset</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, 1 &gt; const &amp;</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>coord</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_COORDSYS_1D_C.H" line="57" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_COORDSYS_1D_C.H" bodystart="57" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad42f89d350fa1e06dfc8594fe3021a64" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::amrex_setdloga</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;dloga, GpuArray&lt; Real, 1 &gt; const &amp;offset, GpuArray&lt; Real, 1 &gt; const &amp;dx, const int, const int coord) noexcept</argsstring>
        <name>amrex_setdloga</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>dloga</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, 1 &gt; const &amp;</type>
          <declname>offset</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, 1 &gt; const &amp;</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>coord</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_COORDSYS_1D_C.H" line="96" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_COORDSYS_1D_C.H" bodystart="96" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa84527498d84c7d3eeb6ac347f35fc57" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::amrex_setvol</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;vol, GpuArray&lt; Real, 2 &gt; const &amp;offset, GpuArray&lt; Real, 2 &gt; const &amp;dx, const int coord) noexcept</argsstring>
        <name>amrex_setvol</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>vol</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, 2 &gt; const &amp;</type>
          <declname>offset</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, 2 &gt; const &amp;</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>coord</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_COORDSYS_2D_C.H" line="15" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_COORDSYS_2D_C.H" bodystart="15" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad4ccd910ec18130e61c197ad32ec6eb8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::amrex_setarea</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;area, GpuArray&lt; Real, 2 &gt; const &amp;offset, GpuArray&lt; Real, 2 &gt; const &amp;dx, const int dir, const int coord) noexcept</argsstring>
        <name>amrex_setarea</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>area</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, 2 &gt; const &amp;</type>
          <declname>offset</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, 2 &gt; const &amp;</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>coord</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_COORDSYS_2D_C.H" line="66" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_COORDSYS_2D_C.H" bodystart="66" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac826dc262f0bdba922d73f261d6b03b9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::amrex_setdloga</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;dloga, GpuArray&lt; Real, 2 &gt; const &amp;offset, GpuArray&lt; Real, 2 &gt; const &amp;dx, const int dir, const int coord) noexcept</argsstring>
        <name>amrex_setdloga</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>dloga</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, 2 &gt; const &amp;</type>
          <declname>offset</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, 2 &gt; const &amp;</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>coord</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_COORDSYS_2D_C.H" line="146" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_COORDSYS_2D_C.H" bodystart="146" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1adfa5623567b8caee4aa4e268986d0314" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Dim3 &amp;d)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Dim3.H" line="14" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Dim3.H" bodystart="14" bodyend="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a7c149cd13c0bd6bcd97464f0406a600b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::knapsack</definition>
        <argsstring>(const std::vector&lt; Long &gt; &amp;wgts, int nprocs, std::vector&lt; std::vector&lt; int &gt; &gt; &amp;result, Real &amp;efficiency, bool do_full_knapsack, int nmax)</argsstring>
        <name>knapsack</name>
        <param>
          <type>const std::vector&lt; Long &gt; &amp;</type>
          <declname>wgts</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nprocs</declname>
        </param>
        <param>
          <type>std::vector&lt; std::vector&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <param>
          <type>Real &amp;</type>
          <declname>efficiency</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_full_knapsack</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nmax</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.cpp" line="559" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.cpp" bodystart="559" bodyend="698"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac6467048b1487ee7b78edf0bbcbfd2bb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::Distribute</definition>
        <argsstring>(const std::vector&lt; SFCToken &gt; &amp;tokens, const std::vector&lt; Long &gt; &amp;wgts, int nprocs, Real volpercpu, std::vector&lt; std::vector&lt; int &gt; &gt; &amp;v)</argsstring>
        <name>Distribute</name>
        <param>
          <type>const std::vector&lt; SFCToken &gt; &amp;</type>
          <declname>tokens</declname>
        </param>
        <param>
          <type>const std::vector&lt; Long &gt; &amp;</type>
          <declname>wgts</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nprocs</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>volpercpu</declname>
        </param>
        <param>
          <type>std::vector&lt; std::vector&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.cpp" line="1040" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.cpp" bodystart="1040" bodyend="1120"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6e9865ac3868b0b19a46f021f2db2421" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const DistributionMapping &amp;pmap)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>pmap</declname>
        </param>
        <briefdescription>
<para>Our output operator. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.cpp" line="1867" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.cpp" bodystart="1868" bodyend="1884"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a2a1640fc2ba97306ea4b3546daa1e6b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const DistributionMapping::RefID &amp;id)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1DistributionMapping_1_1RefID" kindref="compound">DistributionMapping::RefID</ref> &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.cpp" line="1886" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.cpp" bodystart="1887" bodyend="1891"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a68d95d50ed271feafbd28018aa0e8d96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename std::enable_if&lt;!IsBaseFab&lt; T &gt;::value, int &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>Long</type>
        <definition>Long amrex::nBytesOwned</definition>
        <argsstring>(T const &amp;) noexcept</argsstring>
        <name>nBytesOwned</name>
        <param>
          <type>T const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="52" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="52" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a064d90077e1d86d6ba81b5b546bb7438" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>Long</type>
        <definition>Long amrex::nBytesOwned</definition>
        <argsstring>(BaseFab&lt; T &gt; const &amp;fab) noexcept</argsstring>
        <name>nBytesOwned</name>
        <param>
          <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; const &amp;</type>
          <declname>fab</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="55" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="55" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8bf3fd2af3f97b6e13b0b7be0a4dcaa7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const FabArrayBase::BDKey &amp;id)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1FabArrayBase_1_1BDKey" kindref="compound">FabArrayBase::BDKey</ref> &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="699" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad2ec28e533d93f8d4103d67a4402f00b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1Arena" kindref="compound">Arena</ref> *</type>
        <definition>Arena* amrex::The_FA_Arena</definition>
        <argsstring>()</argsstring>
        <name>The_FA_Arena</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="701" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aee63624c66220385d3ab86b7f68ae1c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class bar</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;IsBaseFab&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>FAB::value_type</type>
        <definition>FAB::value_type amrex::ReduceSum</definition>
        <argsstring>(FabArray&lt; FAB &gt; const &amp;fa, int nghost, F &amp;&amp;f)</argsstring>
        <name>ReduceSum</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>fa</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="15" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="15" bodyend="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a5e32d93cb04b6557dcf30553793aeb92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class bar</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;IsBaseFab&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>FAB::value_type</type>
        <definition>FAB::value_type amrex::ReduceSum</definition>
        <argsstring>(FabArray&lt; FAB &gt; const &amp;fa, IntVect const &amp;nghost, F &amp;&amp;f)</argsstring>
        <name>ReduceSum</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>fa</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="107" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="107" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4252562789c375cc55a545cd278cf212" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB1</type>
          </param>
          <param>
            <type>class FAB2</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class bar</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;IsBaseFab&lt;FAB1&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>FAB1::value_type</type>
        <definition>FAB1::value_type amrex::ReduceSum</definition>
        <argsstring>(FabArray&lt; FAB1 &gt; const &amp;fa1, FabArray&lt; FAB2 &gt; const &amp;fa2, int nghost, F &amp;&amp;f)</argsstring>
        <name>ReduceSum</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB1 &gt; const &amp;</type>
          <declname>fa1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB2 &gt; const &amp;</type>
          <declname>fa2</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="116" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="116" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a580c267bdc2ecf41ead1889d77b287c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB1</type>
          </param>
          <param>
            <type>class FAB2</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class bar</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;IsBaseFab&lt;FAB1&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>FAB1::value_type</type>
        <definition>FAB1::value_type amrex::ReduceSum</definition>
        <argsstring>(FabArray&lt; FAB1 &gt; const &amp;fa1, FabArray&lt; FAB2 &gt; const &amp;fa2, IntVect const &amp;nghost, F &amp;&amp;f)</argsstring>
        <name>ReduceSum</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB1 &gt; const &amp;</type>
          <declname>fa1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB2 &gt; const &amp;</type>
          <declname>fa2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="218" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="218" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a41a3ccdb479b7b99b07b29315b85d602" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB1</type>
          </param>
          <param>
            <type>class FAB2</type>
          </param>
          <param>
            <type>class FAB3</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class bar</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;IsBaseFab&lt;FAB1&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>FAB1::value_type</type>
        <definition>FAB1::value_type amrex::ReduceSum</definition>
        <argsstring>(FabArray&lt; FAB1 &gt; const &amp;fa1, FabArray&lt; FAB2 &gt; const &amp;fa2, FabArray&lt; FAB3 &gt; const &amp;fa3, int nghost, F &amp;&amp;f)</argsstring>
        <name>ReduceSum</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB1 &gt; const &amp;</type>
          <declname>fa1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB2 &gt; const &amp;</type>
          <declname>fa2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB3 &gt; const &amp;</type>
          <declname>fa3</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="228" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="228" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a643762b10ddb6c66e880320c6df34809" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB1</type>
          </param>
          <param>
            <type>class FAB2</type>
          </param>
          <param>
            <type>class FAB3</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class bar</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;IsBaseFab&lt;FAB1&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>FAB1::value_type</type>
        <definition>FAB1::value_type amrex::ReduceSum</definition>
        <argsstring>(FabArray&lt; FAB1 &gt; const &amp;fa1, FabArray&lt; FAB2 &gt; const &amp;fa2, FabArray&lt; FAB3 &gt; const &amp;fa3, IntVect const &amp;nghost, F &amp;&amp;f)</argsstring>
        <name>ReduceSum</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB1 &gt; const &amp;</type>
          <declname>fa1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB2 &gt; const &amp;</type>
          <declname>fa2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB3 &gt; const &amp;</type>
          <declname>fa3</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="331" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="331" bodyend="335"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a94a27ca9a492d6d0f17996924e1b1745" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class bar</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;IsBaseFab&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>FAB::value_type</type>
        <definition>FAB::value_type amrex::ReduceMin</definition>
        <argsstring>(FabArray&lt; FAB &gt; const &amp;fa, int nghost, F &amp;&amp;f)</argsstring>
        <name>ReduceMin</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>fa</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="341" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="341" bodyend="344"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a0b14cf8ae0f4d40d865377df85ff8301" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class bar</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;IsBaseFab&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>FAB::value_type</type>
        <definition>FAB::value_type amrex::ReduceMin</definition>
        <argsstring>(FabArray&lt; FAB &gt; const &amp;fa, IntVect const &amp;nghost, F &amp;&amp;f)</argsstring>
        <name>ReduceMin</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>fa</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="435" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="435" bodyend="438"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab427586186a5143d74279bb26107044a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB1</type>
          </param>
          <param>
            <type>class FAB2</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class bar</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;IsBaseFab&lt;FAB1&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>FAB1::value_type</type>
        <definition>FAB1::value_type amrex::ReduceMin</definition>
        <argsstring>(FabArray&lt; FAB1 &gt; const &amp;fa1, FabArray&lt; FAB2 &gt; const &amp;fa2, int nghost, F &amp;&amp;f)</argsstring>
        <name>ReduceMin</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB1 &gt; const &amp;</type>
          <declname>fa1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB2 &gt; const &amp;</type>
          <declname>fa2</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="444" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="444" bodyend="447"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a7385647d73fd0e4b29617d87309f3c78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB1</type>
          </param>
          <param>
            <type>class FAB2</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class bar</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;IsBaseFab&lt;FAB1&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>FAB1::value_type</type>
        <definition>FAB1::value_type amrex::ReduceMin</definition>
        <argsstring>(FabArray&lt; FAB1 &gt; const &amp;fa1, FabArray&lt; FAB2 &gt; const &amp;fa2, IntVect const &amp;nghost, F &amp;&amp;f)</argsstring>
        <name>ReduceMin</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB1 &gt; const &amp;</type>
          <declname>fa1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB2 &gt; const &amp;</type>
          <declname>fa2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="546" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="546" bodyend="550"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1adbeb820864e599e86ce8f5f30773beac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB1</type>
          </param>
          <param>
            <type>class FAB2</type>
          </param>
          <param>
            <type>class FAB3</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class bar</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;IsBaseFab&lt;FAB1&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>FAB1::value_type</type>
        <definition>FAB1::value_type amrex::ReduceMin</definition>
        <argsstring>(FabArray&lt; FAB1 &gt; const &amp;fa1, FabArray&lt; FAB2 &gt; const &amp;fa2, FabArray&lt; FAB3 &gt; const &amp;fa3, int nghost, F &amp;&amp;f)</argsstring>
        <name>ReduceMin</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB1 &gt; const &amp;</type>
          <declname>fa1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB2 &gt; const &amp;</type>
          <declname>fa2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB3 &gt; const &amp;</type>
          <declname>fa3</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="556" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="556" bodyend="560"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a98b8b6dfe17e7e9225a567793e47f606" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB1</type>
          </param>
          <param>
            <type>class FAB2</type>
          </param>
          <param>
            <type>class FAB3</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class bar</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;IsBaseFab&lt;FAB1&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>FAB1::value_type</type>
        <definition>FAB1::value_type amrex::ReduceMin</definition>
        <argsstring>(FabArray&lt; FAB1 &gt; const &amp;fa1, FabArray&lt; FAB2 &gt; const &amp;fa2, FabArray&lt; FAB3 &gt; const &amp;fa3, IntVect const &amp;nghost, F &amp;&amp;f)</argsstring>
        <name>ReduceMin</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB1 &gt; const &amp;</type>
          <declname>fa1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB2 &gt; const &amp;</type>
          <declname>fa2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB3 &gt; const &amp;</type>
          <declname>fa3</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="661" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="661" bodyend="665"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a157fdc4ac63d7f4d21a5df4b4151eb28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class bar</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;IsBaseFab&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>FAB::value_type</type>
        <definition>FAB::value_type amrex::ReduceMax</definition>
        <argsstring>(FabArray&lt; FAB &gt; const &amp;fa, int nghost, F &amp;&amp;f)</argsstring>
        <name>ReduceMax</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>fa</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="671" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="671" bodyend="674"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aced90eccf9c8aa5de4fa7fddacbab125" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class bar</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;IsBaseFab&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>FAB::value_type</type>
        <definition>FAB::value_type amrex::ReduceMax</definition>
        <argsstring>(FabArray&lt; FAB &gt; const &amp;fa, IntVect const &amp;nghost, F &amp;&amp;f)</argsstring>
        <name>ReduceMax</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>fa</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="766" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="766" bodyend="769"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac8df373fd6d52b64c70d0e2c218f7b56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB1</type>
          </param>
          <param>
            <type>class FAB2</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class bar</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;IsBaseFab&lt;FAB1&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>FAB1::value_type</type>
        <definition>FAB1::value_type amrex::ReduceMax</definition>
        <argsstring>(FabArray&lt; FAB1 &gt; const &amp;fa1, FabArray&lt; FAB2 &gt; const &amp;fa2, int nghost, F &amp;&amp;f)</argsstring>
        <name>ReduceMax</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB1 &gt; const &amp;</type>
          <declname>fa1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB2 &gt; const &amp;</type>
          <declname>fa2</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="775" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="775" bodyend="778"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a0f27335e5238a53e12af0ad6dc8e04a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB1</type>
          </param>
          <param>
            <type>class FAB2</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class bar</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;IsBaseFab&lt;FAB1&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>FAB1::value_type</type>
        <definition>FAB1::value_type amrex::ReduceMax</definition>
        <argsstring>(FabArray&lt; FAB1 &gt; const &amp;fa1, FabArray&lt; FAB2 &gt; const &amp;fa2, IntVect const &amp;nghost, F &amp;&amp;f)</argsstring>
        <name>ReduceMax</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB1 &gt; const &amp;</type>
          <declname>fa1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB2 &gt; const &amp;</type>
          <declname>fa2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="877" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="877" bodyend="881"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a07315aba6826805030c5f6fd847fc370" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB1</type>
          </param>
          <param>
            <type>class FAB2</type>
          </param>
          <param>
            <type>class FAB3</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class bar</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;IsBaseFab&lt;FAB1&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>FAB1::value_type</type>
        <definition>FAB1::value_type amrex::ReduceMax</definition>
        <argsstring>(FabArray&lt; FAB1 &gt; const &amp;fa1, FabArray&lt; FAB2 &gt; const &amp;fa2, FabArray&lt; FAB3 &gt; const &amp;fa3, int nghost, F &amp;&amp;f)</argsstring>
        <name>ReduceMax</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB1 &gt; const &amp;</type>
          <declname>fa1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB2 &gt; const &amp;</type>
          <declname>fa2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB3 &gt; const &amp;</type>
          <declname>fa3</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="887" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="887" bodyend="891"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a210e45f0c136c51a835032cc34cfb0a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB1</type>
          </param>
          <param>
            <type>class FAB2</type>
          </param>
          <param>
            <type>class FAB3</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class bar</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;IsBaseFab&lt;FAB1&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>FAB1::value_type</type>
        <definition>FAB1::value_type amrex::ReduceMax</definition>
        <argsstring>(FabArray&lt; FAB1 &gt; const &amp;fa1, FabArray&lt; FAB2 &gt; const &amp;fa2, FabArray&lt; FAB3 &gt; const &amp;fa3, IntVect const &amp;nghost, F &amp;&amp;f)</argsstring>
        <name>ReduceMax</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB1 &gt; const &amp;</type>
          <declname>fa1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB2 &gt; const &amp;</type>
          <declname>fa2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB3 &gt; const &amp;</type>
          <declname>fa3</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="992" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="992" bodyend="996"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a3866c459fc8c798d5a19fa747a3500b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class bar</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;IsBaseFab&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool amrex::ReduceLogicalAnd</definition>
        <argsstring>(FabArray&lt; FAB &gt; const &amp;fa, int nghost, F &amp;&amp;f)</argsstring>
        <name>ReduceLogicalAnd</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>fa</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="1002" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="1002" bodyend="1005"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1add25d5d5612fe7f7e697f9eff76568ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class bar</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;IsBaseFab&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool amrex::ReduceLogicalAnd</definition>
        <argsstring>(FabArray&lt; FAB &gt; const &amp;fa, IntVect const &amp;nghost, F &amp;&amp;f)</argsstring>
        <name>ReduceLogicalAnd</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>fa</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="1094" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="1094" bodyend="1097"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aff9cc4b21a84dbb1def69e24fa575064" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB1</type>
          </param>
          <param>
            <type>class FAB2</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class bar</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;IsBaseFab&lt;FAB1&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool amrex::ReduceLogicalAnd</definition>
        <argsstring>(FabArray&lt; FAB1 &gt; const &amp;fa1, FabArray&lt; FAB2 &gt; const &amp;fa2, int nghost, F &amp;&amp;f)</argsstring>
        <name>ReduceLogicalAnd</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB1 &gt; const &amp;</type>
          <declname>fa1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB2 &gt; const &amp;</type>
          <declname>fa2</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="1103" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="1103" bodyend="1107"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab19f7ad2a54b1e324d431adfe05978aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB1</type>
          </param>
          <param>
            <type>class FAB2</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class bar</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;IsBaseFab&lt;FAB1&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool amrex::ReduceLogicalAnd</definition>
        <argsstring>(FabArray&lt; FAB1 &gt; const &amp;fa1, FabArray&lt; FAB2 &gt; const &amp;fa2, IntVect const &amp;nghost, F &amp;&amp;f)</argsstring>
        <name>ReduceLogicalAnd</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB1 &gt; const &amp;</type>
          <declname>fa1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB2 &gt; const &amp;</type>
          <declname>fa2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="1203" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="1203" bodyend="1207"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a86ff43c965c29ca6c76704135c773345" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class bar</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;IsBaseFab&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool amrex::ReduceLogicalOr</definition>
        <argsstring>(FabArray&lt; FAB &gt; const &amp;fa, int nghost, F &amp;&amp;f)</argsstring>
        <name>ReduceLogicalOr</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>fa</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="1213" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="1213" bodyend="1216"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1afbf67596dd1ba6faf566beabcbab7776" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class bar</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;IsBaseFab&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool amrex::ReduceLogicalOr</definition>
        <argsstring>(FabArray&lt; FAB &gt; const &amp;fa, IntVect const &amp;nghost, F &amp;&amp;f)</argsstring>
        <name>ReduceLogicalOr</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>fa</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="1305" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="1305" bodyend="1308"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aeddb35f2f67fa5f607d190b5d5306c9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB1</type>
          </param>
          <param>
            <type>class FAB2</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class bar</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;IsBaseFab&lt;FAB1&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool amrex::ReduceLogicalOr</definition>
        <argsstring>(FabArray&lt; FAB1 &gt; const &amp;fa1, FabArray&lt; FAB2 &gt; const &amp;fa2, int nghost, F &amp;&amp;f)</argsstring>
        <name>ReduceLogicalOr</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB1 &gt; const &amp;</type>
          <declname>fa1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB2 &gt; const &amp;</type>
          <declname>fa2</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="1314" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="1314" bodyend="1318"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a93ead4b7e5a5b99b0a88040076d7fd21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB1</type>
          </param>
          <param>
            <type>class FAB2</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class bar</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;IsBaseFab&lt;FAB1&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool amrex::ReduceLogicalOr</definition>
        <argsstring>(FabArray&lt; FAB1 &gt; const &amp;fa1, FabArray&lt; FAB2 &gt; const &amp;fa2, IntVect const &amp;nghost, F &amp;&amp;f)</argsstring>
        <name>ReduceLogicalOr</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB1 &gt; const &amp;</type>
          <declname>fa1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB2 &gt; const &amp;</type>
          <declname>fa2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="1414" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="1414" bodyend="1418"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a376ff66b5e6a76d195cace00df41d05e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class bar</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;IsBaseFab&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::printCell</definition>
        <argsstring>(FabArray&lt; FAB &gt; const &amp;mf, const IntVect &amp;cell, int comp=-1, const IntVect &amp;ng=IntVect::TheZeroVector())</argsstring>
        <name>printCell</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>cell</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ng</declname>
          <defval><ref refid="classamrex_1_1IntVect_1a16fd2692186f9d2a1291058ac5ab0ca0" kindref="member">IntVect::TheZeroVector</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="1423" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="1423" bodyend="1447"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab72e53672887ede3d7ddc5f65002700e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class bar</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;IsBaseFab&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::Add</definition>
        <argsstring>(FabArray&lt; FAB &gt; &amp;dst, FabArray&lt; FAB &gt; const &amp;src, int srccomp, int dstcomp, int numcomp, int nghost)</argsstring>
        <name>Add</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dstcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="1453" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="1453" bodyend="1456"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae53cc004fbab26533ec33294445a4d5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class bar</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;IsBaseFab&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::Add</definition>
        <argsstring>(FabArray&lt; FAB &gt; &amp;dst, FabArray&lt; FAB &gt; const &amp;src, int srccomp, int dstcomp, int numcomp, const IntVect &amp;nghost)</argsstring>
        <name>Add</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dstcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="1461" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="1461" bodyend="1479"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a1036d99710a96586826f090a3266f5da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class bar</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;IsBaseFab&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::Copy</definition>
        <argsstring>(FabArray&lt; FAB &gt; &amp;dst, FabArray&lt; FAB &gt; const &amp;src, int srccomp, int dstcomp, int numcomp, int nghost)</argsstring>
        <name>Copy</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dstcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="1485" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="1485" bodyend="1488"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1abe39b5ec64aab9ed8e59747f0983d848" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class bar</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;IsBaseFab&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::Copy</definition>
        <argsstring>(FabArray&lt; FAB &gt; &amp;dst, FabArray&lt; FAB &gt; const &amp;src, int srccomp, int dstcomp, int numcomp, const IntVect &amp;nghost)</argsstring>
        <name>Copy</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dstcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="1493" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="1493" bodyend="1511"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a54b8b46deca518b441b849bbd1ceda02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class bar</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;IsBaseFab&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::Subtract</definition>
        <argsstring>(FabArray&lt; FAB &gt; &amp;dst, FabArray&lt; FAB &gt; const &amp;src, int srccomp, int dstcomp, int numcomp, int nghost)</argsstring>
        <name>Subtract</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dstcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="1517" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="1517" bodyend="1520"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1afeebec2f58b85bfde5b88b30810cd82d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class bar</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;IsBaseFab&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::Subtract</definition>
        <argsstring>(FabArray&lt; FAB &gt; &amp;dst, FabArray&lt; FAB &gt; const &amp;src, int srccomp, int dstcomp, int numcomp, const IntVect &amp;nghost)</argsstring>
        <name>Subtract</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dstcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="1525" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="1525" bodyend="1543"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aec148f53c2d7fcc3b00c9e91999d4058" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class bar</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;IsBaseFab&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::Multiply</definition>
        <argsstring>(FabArray&lt; FAB &gt; &amp;dst, FabArray&lt; FAB &gt; const &amp;src, int srccomp, int dstcomp, int numcomp, int nghost)</argsstring>
        <name>Multiply</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dstcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="1549" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="1549" bodyend="1552"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a71808e748d2cf6ea301231f278269b70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class bar</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;IsBaseFab&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::Multiply</definition>
        <argsstring>(FabArray&lt; FAB &gt; &amp;dst, FabArray&lt; FAB &gt; const &amp;src, int srccomp, int dstcomp, int numcomp, const IntVect &amp;nghost)</argsstring>
        <name>Multiply</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dstcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="1557" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="1557" bodyend="1575"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa9f3bb9afb6e1fdfc272654ee6923492" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class bar</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;IsBaseFab&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::Divide</definition>
        <argsstring>(FabArray&lt; FAB &gt; &amp;dst, FabArray&lt; FAB &gt; const &amp;src, int srccomp, int dstcomp, int numcomp, int nghost)</argsstring>
        <name>Divide</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dstcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="1581" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="1581" bodyend="1584"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a98b5b165f2a8926b40da786a678ed7af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class bar</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;IsBaseFab&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::Divide</definition>
        <argsstring>(FabArray&lt; FAB &gt; &amp;dst, FabArray&lt; FAB &gt; const &amp;src, int srccomp, int dstcomp, int numcomp, const IntVect &amp;nghost)</argsstring>
        <name>Divide</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dstcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="1589" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="1589" bodyend="1607"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a3f0f44b09d21b49d00d3d1b12e9e2489" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class bar</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;IsBaseFab&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::Abs</definition>
        <argsstring>(FabArray&lt; FAB &gt; &amp;fa, int icomp, int numcomp, int nghost)</argsstring>
        <name>Abs</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>fa</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>icomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="1612" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="1612" bodyend="1615"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a76eee97924f5b2d883d161eb976b2cad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class bar</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;IsBaseFab&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::Abs</definition>
        <argsstring>(FabArray&lt; FAB &gt; &amp;fa, int icomp, int numcomp, const IntVect &amp;nghost)</argsstring>
        <name>Abs</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>fa</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>icomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="1620" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="1620" bodyend="1637"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab02b05e2eb3282f8df33e5cbc655b2a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class bar</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;IsBaseFab&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::prefetchToHost</definition>
        <argsstring>(FabArray&lt; FAB &gt; const &amp;fa, const bool synchronous=true)</argsstring>
        <name>prefetchToHost</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>fa</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>synchronous</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="1641" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="1641" bodyend="1653"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4db8bcd1f50c790aba6b81860143cc96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class bar</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;IsBaseFab&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::prefetchToDevice</definition>
        <argsstring>(FabArray&lt; FAB &gt; const &amp;fa, const bool synchronous=true)</argsstring>
        <name>prefetchToDevice</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>fa</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>synchronous</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="1657" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="1657" bodyend="1669"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a5821b989454c54f92dd1f2312e95b5b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class IFAB</type>
          </param>
          <param>
            <type>class bar</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;IsBaseFab&lt;FAB&gt;::value                                                               &amp;&amp; IsBaseFab&lt;IFAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::OverrideSync</definition>
        <argsstring>(FabArray&lt; FAB &gt; &amp;fa, FabArray&lt; IFAB &gt; const &amp;msk, const Periodicity &amp;period)</argsstring>
        <name>OverrideSync</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>fa</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; IFAB &gt; const &amp;</type>
          <declname>msk</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="1674" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="1674" bodyend="1702"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a998c5815369d23cd73eea1b09f43a966" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class foo</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;IsBaseFab&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::dtoh_memcpy</definition>
        <argsstring>(FabArray&lt; FAB &gt; &amp;dst, FabArray&lt; FAB &gt; const &amp;src, int scomp, int dcomp, int ncomp)</argsstring>
        <name>dtoh_memcpy</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="1706" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="1706" bodyend="1720"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8531953b8fba66482d81cad6c5dc3e73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class foo</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;IsBaseFab&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::dtoh_memcpy</definition>
        <argsstring>(FabArray&lt; FAB &gt; &amp;dst, FabArray&lt; FAB &gt; const &amp;src)</argsstring>
        <name>dtoh_memcpy</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="1724" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="1724" bodyend="1727"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae243b10c65516ed7dfeaf9aed7e75aa3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class foo</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;IsBaseFab&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::htod_memcpy</definition>
        <argsstring>(FabArray&lt; FAB &gt; &amp;dst, FabArray&lt; FAB &gt; const &amp;src, int scomp, int dcomp, int ncomp)</argsstring>
        <name>htod_memcpy</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="1731" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="1731" bodyend="1745"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa9df7c449e875ece24add0d826c4f133" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class foo</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;IsBaseFab&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::htod_memcpy</definition>
        <argsstring>(FabArray&lt; FAB &gt; &amp;dst, FabArray&lt; FAB &gt; const &amp;src)</argsstring>
        <name>htod_memcpy</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="1749" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="1749" bodyend="1752"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af1fe8dd7d2e436cf2e4e696b9b5ae006" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class foo</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;IsBaseFab&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>IntVect amrex::indexFromValue</definition>
        <argsstring>(FabArray&lt; FAB &gt; const &amp;mf, int comp, IntVect const &amp;nghost, typename FAB::value_type value)</argsstring>
        <name>indexFromValue</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>typename FAB::value_type</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="1756" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="1756" bodyend="1829"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac185c39750011cc24fb8c1a0b872a34d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const IntDescriptor &amp;id)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntDescriptor" kindref="compound">IntDescriptor</ref> &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write out an <ref refid="classamrex_1_1IntDescriptor" kindref="compound">IntDescriptor</ref> to an ostream in ASCII. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.cpp" line="52" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.cpp" bodystart="53" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a0ed9b6ea967b3a6cebc43973e1440e06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::istream &amp;</type>
        <definition>std::istream &amp; amrex::operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;is, IntDescriptor &amp;id)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntDescriptor" kindref="compound">IntDescriptor</ref> &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read in an <ref refid="classamrex_1_1IntDescriptor" kindref="compound">IntDescriptor</ref> from an istream. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.cpp" line="69" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.cpp" bodystart="69" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a69c1f9f47c8c546e09801fc8cf9a1cb7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
        <definition>static const int* amrex::selectOrdering</definition>
        <argsstring>(int prec, int ordering)</argsstring>
        <name>selectOrdering</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>prec</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ordering</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.cpp" line="180" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.cpp" bodystart="180" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aaca313b52afc9cee08eb9198f24286d6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ONES_COMP_NEG</definition>
        <argsstring>(Long &amp;n, int nb, Long incr)</argsstring>
        <name>ONES_COMP_NEG</name>
        <param>
          <type>Long &amp;</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nb</declname>
        </param>
        <param>
          <type>Long</type>
          <declname>incr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.cpp" line="256" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.cpp" bodystart="256" bodyend="267"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a58afbef5c92433b70e81edcb63d2b15f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::_pd_get_bit</definition>
        <argsstring>(char const *base, int offs, int nby, const int *ord)</argsstring>
        <name>_pd_get_bit</name>
        <param>
          <type>char const *</type>
          <declname>base</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>offs</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nby</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
          <declname>ord</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.cpp" line="275" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.cpp" bodystart="275" bodyend="293"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a7189a895a6c3a44b843bd452bf5b7556" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Long</type>
        <definition>static Long amrex::_pd_extract_field</definition>
        <argsstring>(char const *in, int offs, int nbi, int nby, const int *ord)</argsstring>
        <name>_pd_extract_field</name>
        <param>
          <type>char const *</type>
          <declname>in</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>offs</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nbi</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nby</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
          <declname>ord</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.cpp" line="305" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.cpp" bodystart="305" bodyend="373"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ada9b5baa188f1327eaca505cdede7296" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::_pd_btrvout</definition>
        <argsstring>(char *out, Long nb, Long nitems)</argsstring>
        <name>_pd_btrvout</name>
        <param>
          <type>char *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>Long</type>
          <declname>nb</declname>
        </param>
        <param>
          <type>Long</type>
          <declname>nitems</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.cpp" line="381" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.cpp" bodystart="381" bodyend="399"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab6d5efa978936e2c7fc647d49be1210c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::_pd_insert_field</definition>
        <argsstring>(Long in_long, int nb, char *out, int offs, int l_order, int l_bytes)</argsstring>
        <name>_pd_insert_field</name>
        <param>
          <type>Long</type>
          <declname>in_long</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nb</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>out</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>offs</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>l_order</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>l_bytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.cpp" line="413" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.cpp" bodystart="413" bodyend="469"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac3daae71af784ea861908589aa58b9e9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::_pd_set_bit</definition>
        <argsstring>(char *base, int offs)</argsstring>
        <name>_pd_set_bit</name>
        <param>
          <type>char *</type>
          <declname>base</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>offs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.cpp" line="477" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.cpp" bodystart="477" bodyend="487"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a96267bb2ea2c5fdf894b2c9c0622c30b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::_pd_reorder</definition>
        <argsstring>(char *arr, Long nitems, int nbytes, const int *ord)</argsstring>
        <name>_pd_reorder</name>
        <param>
          <type>char *</type>
          <declname>arr</declname>
        </param>
        <param>
          <type>Long</type>
          <declname>nitems</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nbytes</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
          <declname>ord</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.cpp" line="497" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.cpp" bodystart="497" bodyend="512"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a2f266c27494ab2cfcbeaa04283a409af" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::permute_real_word_order</definition>
        <argsstring>(void *out, const void *in, Long nitems, const int *outord, const int *inord, int REALSIZE)</argsstring>
        <name>permute_real_word_order</name>
        <param>
          <type>void *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>Long</type>
          <declname>nitems</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
          <declname>outord</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
          <declname>inord</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>REALSIZE</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.cpp" line="522" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.cpp" bodystart="522" bodyend="541"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aeac895c53859e6eec3df7c9df01bd000" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::PD_fconvert</definition>
        <argsstring>(void *out, const void *in, Long nitems, int boffs, const Long *outfor, const int *outord, const Long *infor, const int *inord, int l_order, int l_bytes, int onescmp)</argsstring>
        <name>PD_fconvert</name>
        <param>
          <type>void *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>Long</type>
          <declname>nitems</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>boffs</declname>
        </param>
        <param>
          <type>const Long *</type>
          <declname>outfor</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
          <declname>outord</declname>
        </param>
        <param>
          <type>const Long *</type>
          <declname>infor</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
          <declname>inord</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>l_order</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>l_bytes</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>onescmp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.cpp" line="613" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.cpp" bodystart="613" bodyend="780"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a46b2531f5151b258164051481bd82055" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::PD_fixdenormals</definition>
        <argsstring>(void *out, Long nitems, const Long *outfor, const int *outord)</argsstring>
        <name>PD_fixdenormals</name>
        <param>
          <type>void *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>Long</type>
          <declname>nitems</declname>
        </param>
        <param>
          <type>const Long *</type>
          <declname>outfor</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
          <declname>outord</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.cpp" line="784" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.cpp" bodystart="784" bodyend="810"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a571e81ef7e9fdb96f23e2691c59e1b0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const RealDescriptor &amp;rd)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealDescriptor" kindref="compound">amrex::RealDescriptor</ref> &amp;</type>
          <declname>id</declname>
          <defname>rd</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write out an <ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref> to an ostream in ASCII. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.cpp" line="871" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.cpp" bodystart="872" bodyend="885"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a543f68ea96151adca9c24601b7f472e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::istream &amp;</type>
        <definition>std::istream &amp; amrex::operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;is, RealDescriptor &amp;rd)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1RealDescriptor" kindref="compound">amrex::RealDescriptor</ref> &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read in a <ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref> from an istream. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.cpp" line="888" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.cpp" bodystart="888" bodyend="907"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a5af6379a52e8e24792df9021c80789fe" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::PD_convert</definition>
        <argsstring>(void *out, const void *in, Long nitems, int boffs, const RealDescriptor &amp;ord, const RealDescriptor &amp;ird, const IntDescriptor &amp;iid, int onescmp=0)</argsstring>
        <name>PD_convert</name>
        <param>
          <type>void *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>Long</type>
          <declname>nitems</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>boffs</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref> &amp;</type>
          <declname>ord</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref> &amp;</type>
          <declname>ird</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntDescriptor" kindref="compound">IntDescriptor</ref> &amp;</type>
          <declname>iid</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>onescmp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.cpp" line="911" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.cpp" bodystart="911" bodyend="951"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6013bb90a6872541127823fe4e6d8d93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const FArrayBox &amp;f)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FArrayBox.cpp" line="938" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FArrayBox.cpp" bodystart="939" bodyend="945"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a9ff574ad6dd00e11abbe7b34c9233e0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::istream &amp;</type>
        <definition>std::istream&amp; amrex::operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;is, FArrayBox &amp;f)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FArrayBox.cpp" line="948" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FArrayBox.cpp" bodystart="948" bodyend="955"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad6108ad28798d6aa4e7cf1c2f7e72b3a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1a4e626ebf06898d71a9e0790877f1694f" kindref="member">AMREX_GPU_DEVICE</ref> void</type>
        <definition>AMREX_GPU_DEVICE void amrex::filcc_cell</definition>
        <argsstring>(const IntVect &amp;iv, Array4&lt; Real &gt; const &amp;q, const int dcomp, const int numcomp, GeometryData const &amp;geom, const Real, const BCRec *bcr, const int bcomp, const int) noexcept</argsstring>
        <name>filcc_cell</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>iv</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GeometryData" kindref="compound">GeometryData</ref> const &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>const Real</type>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> *</type>
          <declname>bcr</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>bcomp</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FilCC_1D_C.H" line="14" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FilCC_1D_C.H" bodystart="14" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a30ee6a24a0b0fd18d710278879681aed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::fab_filcc</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;qn, int ncomp, Box const &amp;domain, Real const *, Real const *, BCRec const *bcn)</argsstring>
        <name>fab_filcc</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>qn</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>domain</declname>
        </param>
        <param>
          <type>Real const *</type>
          <defname>dx</defname>
        </param>
        <param>
          <type>Real const *</type>
          <defname>xlo</defname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> const *</type>
          <declname>bcn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FilCC_C.cpp" line="5" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FilCC_C.cpp" bodystart="5" bodyend="778"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a7584537c492af5e1cad3da079a51c324" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::fab_filnd</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;qn, int ncomp, Box const &amp;domain, Real const *, Real const *, BCRec const *bcn)</argsstring>
        <name>fab_filnd</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>qn</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>domain</declname>
        </param>
        <param>
          <type>Real const *</type>
          <defname>dx</defname>
        </param>
        <param>
          <type>Real const *</type>
          <defname>xlo</defname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> const *</type>
          <declname>bcn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FilND_C.cpp" line="5" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FilND_C.cpp" bodystart="5" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad287398c706f3a1775e0954b73e5c779" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;, const Geometry &amp;)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>Nice ASCII output. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.cpp" line="17" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.cpp" bodystart="18" bodyend="23"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a5086c850dfa16df677225c8c1139e466" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::istream &amp;</type>
        <definition>std::istream &amp; amrex::operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;, Geometry &amp;)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>Nice ASCII input. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.cpp" line="26" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.cpp" bodystart="26" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1adbc2cc619f36c517e2d0c6cbc5a40068" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref></type>
        <definition>Geometry amrex::coarsen</definition>
        <argsstring>(Geometry const &amp;fine, IntVect const &amp;rr)</argsstring>
        <name>coarsen</name>
        <param>
          <type><ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> const &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>rr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" line="319" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" bodystart="319" bodyend="323"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1abf0376e5e15137aa9ec711295e7bf6bf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref></type>
        <definition>Geometry amrex::coarsen</definition>
        <argsstring>(Geometry const &amp;fine, int rr)</argsstring>
        <name>coarsen</name>
        <param>
          <type><ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> const &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>rr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" line="327" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" bodystart="327" bodyend="327"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad0f0f651612f7b14e3c2768e69aaeb92" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref></type>
        <definition>Geometry amrex::refine</definition>
        <argsstring>(Geometry const &amp;crse, IntVect const &amp;rr)</argsstring>
        <name>refine</name>
        <param>
          <type><ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> const &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>rr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" line="331" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" bodystart="331" bodyend="335"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a54d77694c8efe15e13ae6e08ba5e9fae" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref></type>
        <definition>Geometry amrex::refine</definition>
        <argsstring>(Geometry const &amp;crse, int rr)</argsstring>
        <name>refine</name>
        <param>
          <type><ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> const &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>rr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" line="339" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" bodystart="339" bodyend="339"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1acb7e4e52bb38ce342af7e2edf41293be" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
        <definition>const Geometry&amp; amrex::DefaultGeometry</definition>
        <argsstring>()</argsstring>
        <name>DefaultGeometry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" line="343" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" bodystart="343" bodyend="345"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a9a4cb25adc75b070b5ab1cb6c24b4023" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE T amrex::norm</definition>
        <argsstring>(const GpuComplex&lt; T &gt; &amp;a_z) noexcept</argsstring>
        <name>norm</name>
        <param>
          <type>const <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt; &amp;</type>
          <declname>a_z</declname>
        </param>
        <briefdescription>
<para>Return the norm (magnitude squared) of a complex number. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" line="15" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" bodystart="340" bodyend="345"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af924e08c1b1c132575c3627b47c65695" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const GpuComplex&lt; U &gt; &amp;c)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; U &gt; &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" line="150" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" bodystart="150" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1adf062698516fbd51a09bead1a35275d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE GpuComplex&lt;T&gt; amrex::operator+</definition>
        <argsstring>(const GpuComplex&lt; T &gt; &amp;a_x)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt; &amp;</type>
          <declname>a_x</declname>
        </param>
        <briefdescription>
<para>Identity operation on a complex number. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" line="162" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" bodystart="162" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aac774500cedfe2adbd3e53c3e068a7b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE GpuComplex&lt;T&gt; amrex::operator-</definition>
        <argsstring>(const GpuComplex&lt; T &gt; &amp;a_x)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt; &amp;</type>
          <declname>a_x</declname>
        </param>
        <briefdescription>
<para>Negate a complex number. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" line="169" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" bodystart="169" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8a12491f39d80782dcde3ec5419d6e39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE GpuComplex&lt;T&gt; amrex::operator-</definition>
        <argsstring>(const GpuComplex&lt; T &gt; &amp;a_x, const GpuComplex&lt; T &gt; &amp;a_y) noexcept</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt; &amp;</type>
          <declname>a_x</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt; &amp;</type>
          <declname>a_y</declname>
        </param>
        <briefdescription>
<para>Subtract two complex numbers. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" line="176" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" bodystart="176" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af1ff72d9c7ec7e99cb20252616b6678f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE GpuComplex&lt;T&gt; amrex::operator-</definition>
        <argsstring>(const GpuComplex&lt; T &gt; &amp;a_x, const T &amp;a_y) noexcept</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt; &amp;</type>
          <declname>a_x</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>a_y</declname>
        </param>
        <briefdescription>
<para>Subtract a real number from a complex one. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" line="188" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" bodystart="188" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac199ab4f0ed174c238c06aef9e87466d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE GpuComplex&lt;T&gt; amrex::operator-</definition>
        <argsstring>(const T &amp;a_x, const GpuComplex&lt; T &gt; &amp;a_y) noexcept</argsstring>
        <name>operator-</name>
        <param>
          <type>const T &amp;</type>
          <declname>a_x</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt; &amp;</type>
          <declname>a_y</declname>
        </param>
        <briefdescription>
<para>Subtract a complex number from a real one. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" line="200" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" bodystart="200" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a9e456bdbe9114f2b3d9c74990577bd91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE GpuComplex&lt;T&gt; amrex::operator+</definition>
        <argsstring>(const GpuComplex&lt; T &gt; &amp;a_x, const GpuComplex&lt; T &gt; &amp;a_y) noexcept</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt; &amp;</type>
          <declname>a_x</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt; &amp;</type>
          <declname>a_y</declname>
        </param>
        <briefdescription>
<para>Add two complex numbers. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" line="212" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" bodystart="212" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a99c5fbfd6053c7ac2f9e43b3e5eb25d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE GpuComplex&lt;T&gt; amrex::operator+</definition>
        <argsstring>(const GpuComplex&lt; T &gt; &amp;a_x, const T &amp;a_y) noexcept</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt; &amp;</type>
          <declname>a_x</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>a_y</declname>
        </param>
        <briefdescription>
<para>Add a real number to a complex one. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" line="224" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" bodystart="224" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8a090122fe61e28eb8365641bed8fc93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE GpuComplex&lt;T&gt; amrex::operator+</definition>
        <argsstring>(const T &amp;a_x, const GpuComplex&lt; T &gt; &amp;a_y) noexcept</argsstring>
        <name>operator+</name>
        <param>
          <type>const T &amp;</type>
          <declname>a_x</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt; &amp;</type>
          <declname>a_y</declname>
        </param>
        <briefdescription>
<para>Add a complex number to a real one. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" line="236" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" bodystart="236" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af07743d59bb6e85014d959611f47b81f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE GpuComplex&lt;T&gt; amrex::operator*</definition>
        <argsstring>(const GpuComplex&lt; T &gt; &amp;a_x, const GpuComplex&lt; T &gt; &amp;a_y) noexcept</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt; &amp;</type>
          <declname>a_x</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt; &amp;</type>
          <declname>a_y</declname>
        </param>
        <briefdescription>
<para>Multiply two complex numbers. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" line="248" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" bodystart="248" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a9f590ca3c3a2ca1986d6eb59690fc7d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE GpuComplex&lt;T&gt; amrex::operator*</definition>
        <argsstring>(const GpuComplex&lt; T &gt; &amp;a_x, const T &amp;a_y) noexcept</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt; &amp;</type>
          <declname>a_x</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>a_y</declname>
        </param>
        <briefdescription>
<para>Multiply a complex number by a real one. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" line="260" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" bodystart="260" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4237359b0f955fdfe663f996ae1742ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE GpuComplex&lt;T&gt; amrex::operator*</definition>
        <argsstring>(const T &amp;a_x, const GpuComplex&lt; T &gt; &amp;a_y) noexcept</argsstring>
        <name>operator*</name>
        <param>
          <type>const T &amp;</type>
          <declname>a_x</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt; &amp;</type>
          <declname>a_y</declname>
        </param>
        <briefdescription>
<para>Multiply a real number by a complex one. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" line="272" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" bodystart="272" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a0d50b358feee8de5a27ba594b7e2930a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE GpuComplex&lt;T&gt; amrex::operator/</definition>
        <argsstring>(const GpuComplex&lt; T &gt; &amp;a_x, const GpuComplex&lt; T &gt; &amp;a_y) noexcept</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt; &amp;</type>
          <declname>a_x</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt; &amp;</type>
          <declname>a_y</declname>
        </param>
        <briefdescription>
<para>Divide a complex number by another one. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" line="284" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" bodystart="284" bodyend="289"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a106de2ebd5839c06d9ddc1286fc87958" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE GpuComplex&lt;T&gt; amrex::operator/</definition>
        <argsstring>(const GpuComplex&lt; T &gt; &amp;a_x, const T &amp;a_y) noexcept</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt; &amp;</type>
          <declname>a_x</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>a_y</declname>
        </param>
        <briefdescription>
<para>Divide a complex number by a real. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" line="296" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" bodystart="296" bodyend="301"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a991630c159fc9def80cb6f19864cd029" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE GpuComplex&lt;T&gt; amrex::operator/</definition>
        <argsstring>(const T &amp;a_x, const GpuComplex&lt; T &gt; &amp;a_y) noexcept</argsstring>
        <name>operator/</name>
        <param>
          <type>const T &amp;</type>
          <declname>a_x</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt; &amp;</type>
          <declname>a_y</declname>
        </param>
        <briefdescription>
<para>Divide a real number by a complex one. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" line="308" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" bodystart="308" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a464e44680268cba2d8a7b1ae3232a183" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE GpuComplex&lt;T&gt; amrex::polar</definition>
        <argsstring>(const T &amp;a_r, const T &amp;a_theta) noexcept</argsstring>
        <name>polar</name>
        <param>
          <type>const T &amp;</type>
          <declname>a_r</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>a_theta</declname>
        </param>
        <briefdescription>
<para>Return a complex number given its polar representation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" line="320" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" bodystart="320" bodyend="323"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad7188a3015dcffc0938b6cb74def1c7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE GpuComplex&lt;T&gt; amrex::exp</definition>
        <argsstring>(const GpuComplex&lt; T &gt; &amp;a_z) noexcept</argsstring>
        <name>exp</name>
        <param>
          <type>const <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt; &amp;</type>
          <declname>a_z</declname>
        </param>
        <briefdescription>
<para>Complex expotential function. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" line="330" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" bodystart="330" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4f298e1c3407710de306d440bc79e84e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE T amrex::abs</definition>
        <argsstring>(const GpuComplex&lt; T &gt; &amp;a_z) noexcept</argsstring>
        <name>abs</name>
        <param>
          <type>const <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt; &amp;</type>
          <declname>a_z</declname>
        </param>
        <briefdescription>
<para>Return the absolute value of a complex number. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" line="352" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" bodystart="352" bodyend="363"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1afe1175c09892da177b5f5ecaf36936ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE GpuComplex&lt;T&gt; amrex::sqrt</definition>
        <argsstring>(const GpuComplex&lt; T &gt; &amp;a_z) noexcept</argsstring>
        <name>sqrt</name>
        <param>
          <type>const <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt; &amp;</type>
          <declname>a_z</declname>
        </param>
        <briefdescription>
<para>Return the square root of a complex number. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" line="370" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" bodystart="370" bodyend="388"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a9f3abe7a79b333248fb3183d9a9df7de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE T amrex::arg</definition>
        <argsstring>(const GpuComplex&lt; T &gt; &amp;a_z) noexcept</argsstring>
        <name>arg</name>
        <param>
          <type>const <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt; &amp;</type>
          <declname>a_z</declname>
        </param>
        <briefdescription>
<para>Return the angle of a complex number&apos;s polar representation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" line="395" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" bodystart="395" bodyend="398"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a377e86dc25bb181be031ad2f80cb2984" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE GpuComplex&lt;T&gt; amrex::log</definition>
        <argsstring>(const GpuComplex&lt; T &gt; &amp;a_z) noexcept</argsstring>
        <name>log</name>
        <param>
          <type>const <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt; &amp;</type>
          <declname>a_z</declname>
        </param>
        <briefdescription>
<para>Complex natural logarithm function. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" line="405" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" bodystart="405" bodyend="408"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aac289a1a554a6d1018603b5cd7fc8f9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE GpuComplex&lt;T&gt; amrex::pow</definition>
        <argsstring>(const GpuComplex&lt; T &gt; &amp;a_z, const T &amp;a_y) noexcept</argsstring>
        <name>pow</name>
        <param>
          <type>const <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt; &amp;</type>
          <declname>a_z</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>a_y</declname>
        </param>
        <briefdescription>
<para>Raise a complex number to a (real) power. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" line="415" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" bodystart="415" bodyend="422"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6c1cfe66fa0b6e38dae765b3700dd75f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE GpuComplex&lt;T&gt; amrex::pow</definition>
        <argsstring>(const GpuComplex&lt; T &gt; &amp;a_z, int a_n) noexcept</argsstring>
        <name>pow</name>
        <param>
          <type>const <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt; &amp;</type>
          <declname>a_z</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>a_n</declname>
        </param>
        <briefdescription>
<para>Raise a complex number to an integer power. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" line="448" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" bodystart="448" bodyend="453"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a006c22eb1e141a0784faa415c00a49c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class L</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::launch_host</definition>
        <argsstring>(L &amp;&amp;f0) noexcept</argsstring>
        <name>launch_host</name>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunch.H" line="65" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunch.H" bodystart="65" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a12c011a8bc6459b1c2a8f691b2554972" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class L</type>
          </param>
          <param>
            <type>class...</type>
            <declname>Lambdas</declname>
            <defname>Lambdas</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::launch_host</definition>
        <argsstring>(L &amp;&amp;f0, Lambdas &amp;&amp;... fs) noexcept</argsstring>
        <name>launch_host</name>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f0</declname>
        </param>
        <param>
          <type>Lambdas &amp;&amp;...</type>
          <declname>fs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunch.H" line="68" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunch.H" bodystart="68" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ada73ee47d1c3a0d63725ce77e1334257" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename L</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::launch</definition>
        <argsstring>(T const &amp;n, L &amp;&amp;f, std::size_t=0) noexcept</argsstring>
        <name>launch</name>
        <param>
          <type>T const &amp;</type>
          <declname>n</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="58" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="58" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a254b157995b540641c02a74d2ad65ebe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>typename M</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;std::is_integral&lt;T&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::For</definition>
        <argsstring>(T n, L &amp;&amp;f) noexcept</argsstring>
        <name>For</name>
        <param>
          <type>T</type>
          <declname>n</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="64" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="64" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a58f6305adbac638674782f274ce8bb80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>typename M</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;std::is_integral&lt;T&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::For</definition>
        <argsstring>(Gpu::KernelInfo const &amp;, T n, L &amp;&amp;f) noexcept</argsstring>
        <name>For</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
          <defname>info</defname>
        </param>
        <param>
          <type>T</type>
          <declname>n</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="72" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="72" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aff9b2ebd167a621c7784769618bda4c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>typename M</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;std::is_integral&lt;T&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParallelFor</definition>
        <argsstring>(T n, L &amp;&amp;f) noexcept</argsstring>
        <name>ParallelFor</name>
        <param>
          <type>T</type>
          <declname>n</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="78" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="78" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a3402f6ed86316371198e6c2ff17ac5ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>typename M</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;std::is_integral&lt;T&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParallelFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;, T n, L &amp;&amp;f) noexcept</argsstring>
        <name>ParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
        </param>
        <param>
          <type>T</type>
          <declname>n</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="87" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="87" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6daa7b128f7df0ad214eb964c3467cdf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename L</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::For</definition>
        <argsstring>(Box const &amp;box, L &amp;&amp;f) noexcept</argsstring>
        <name>For</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="93" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="93" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a897ec22faf83646115076a4520a5abbf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename L</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::For</definition>
        <argsstring>(Gpu::KernelInfo const &amp;, Box const &amp;box, L &amp;&amp;f) noexcept</argsstring>
        <name>For</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
          <defname>info</defname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="105" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="105" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac96f4d9630c4ea1445766061b3fed3f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename L</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParallelFor</definition>
        <argsstring>(Box const &amp;box, L &amp;&amp;f) noexcept</argsstring>
        <name>ParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="111" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="111" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4508b95a3ecc4f15b0b66d7520981f4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename L</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParallelFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;, Box const &amp;box, L &amp;&amp;f) noexcept</argsstring>
        <name>ParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="124" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="124" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a27afa434166c6cd6925b63f2729f1e76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>typename M</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;std::is_integral&lt;T&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::For</definition>
        <argsstring>(Box const &amp;box, T ncomp, L &amp;&amp;f) noexcept</argsstring>
        <name>For</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>T</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="130" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="130" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a71600bb098640c24e93a816035b4a254" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>typename M</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;std::is_integral&lt;T&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::For</definition>
        <argsstring>(Gpu::KernelInfo const &amp;, Box const &amp;box, T ncomp, L &amp;&amp;f) noexcept</argsstring>
        <name>For</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
          <defname>info</defname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>T</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="144" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="144" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a53fa136d7eac223e2fad334c8b15e138" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>typename M</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;std::is_integral&lt;T&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParallelFor</definition>
        <argsstring>(Box const &amp;box, T ncomp, L &amp;&amp;f) noexcept</argsstring>
        <name>ParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>T</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="150" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="150" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a9744823a175d8d361c9ad0f48d6d2ca7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>typename M</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;std::is_integral&lt;T&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParallelFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;, Box const &amp;box, T ncomp, L &amp;&amp;f) noexcept</argsstring>
        <name>ParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>T</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="165" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="165" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a88a534ac7f6788df74e2a3b69f36d5ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::For</definition>
        <argsstring>(Box const &amp;box1, Box const &amp;box2, L1 &amp;&amp;f1, L2 &amp;&amp;f2) noexcept</argsstring>
        <name>For</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="171" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="171" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac4fca0bbf870bf63e6410d5bfb8f6cec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::For</definition>
        <argsstring>(Gpu::KernelInfo const &amp;, Box const &amp;box1, Box const &amp;box2, L1 &amp;&amp;f1, L2 &amp;&amp;f2) noexcept</argsstring>
        <name>For</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
          <defname>info</defname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="178" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="178" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa3d67648733b6d47b6f579e9f157ee11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
          <param>
            <type>typename L3</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::For</definition>
        <argsstring>(Box const &amp;box1, Box const &amp;box2, Box const &amp;box3, L1 &amp;&amp;f1, L2 &amp;&amp;f2, L3 &amp;&amp;f3) noexcept</argsstring>
        <name>For</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box3</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type>L3 &amp;&amp;</type>
          <declname>f3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="184" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="184" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a12ef8f8c8150215890fcf56e024ffe54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
          <param>
            <type>typename L3</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::For</definition>
        <argsstring>(Gpu::KernelInfo const &amp;, Box const &amp;box1, Box const &amp;box2, Box const &amp;box3, L1 &amp;&amp;f1, L2 &amp;&amp;f2, L3 &amp;&amp;f3) noexcept</argsstring>
        <name>For</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
          <defname>info</defname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box3</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type>L3 &amp;&amp;</type>
          <declname>f3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="192" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="192" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a3410871e25fe94c964b94bdc5a5af600" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
          <param>
            <type>typename M1</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;std::is_integral&lt;T1&gt;::value&gt;</defval>
          </param>
          <param>
            <type>typename M2</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;std::is_integral&lt;T2&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::For</definition>
        <argsstring>(Box const &amp;box1, T1 ncomp1, L1 &amp;&amp;f1, Box const &amp;box2, T2 ncomp2, L2 &amp;&amp;f2) noexcept</argsstring>
        <name>For</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type>T1</type>
          <declname>ncomp1</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type>T2</type>
          <declname>ncomp2</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="200" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="200" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aeeba5c10b16807384e4d6fbc84843f28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
          <param>
            <type>typename M1</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;std::is_integral&lt;T1&gt;::value&gt;</defval>
          </param>
          <param>
            <type>typename M2</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;std::is_integral&lt;T2&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::For</definition>
        <argsstring>(Gpu::KernelInfo const &amp;, Box const &amp;box1, T1 ncomp1, L1 &amp;&amp;f1, Box const &amp;box2, T2 ncomp2, L2 &amp;&amp;f2) noexcept</argsstring>
        <name>For</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
          <defname>info</defname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type>T1</type>
          <declname>ncomp1</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type>T2</type>
          <declname>ncomp2</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="210" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="210" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a7421bdf4eb985c8246d56cb401862eec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename T3</type>
          </param>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
          <param>
            <type>typename L3</type>
          </param>
          <param>
            <type>typename M1</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;std::is_integral&lt;T1&gt;::value&gt;</defval>
          </param>
          <param>
            <type>typename M2</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;std::is_integral&lt;T2&gt;::value&gt;</defval>
          </param>
          <param>
            <type>typename M3</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;std::is_integral&lt;T3&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::For</definition>
        <argsstring>(Box const &amp;box1, T1 ncomp1, L1 &amp;&amp;f1, Box const &amp;box2, T2 ncomp2, L2 &amp;&amp;f2, Box const &amp;box3, T3 ncomp3, L3 &amp;&amp;f3) noexcept</argsstring>
        <name>For</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type>T1</type>
          <declname>ncomp1</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type>T2</type>
          <declname>ncomp2</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box3</declname>
        </param>
        <param>
          <type>T3</type>
          <declname>ncomp3</declname>
        </param>
        <param>
          <type>L3 &amp;&amp;</type>
          <declname>f3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="221" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="221" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a24ce492df29f97eea1da6d4d6a0e5bdc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename T3</type>
          </param>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
          <param>
            <type>typename L3</type>
          </param>
          <param>
            <type>typename M1</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;std::is_integral&lt;T1&gt;::value&gt;</defval>
          </param>
          <param>
            <type>typename M2</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;std::is_integral&lt;T2&gt;::value&gt;</defval>
          </param>
          <param>
            <type>typename M3</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;std::is_integral&lt;T3&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::For</definition>
        <argsstring>(Gpu::KernelInfo const &amp;, Box const &amp;box1, T1 ncomp1, L1 &amp;&amp;f1, Box const &amp;box2, T2 ncomp2, L2 &amp;&amp;f2, Box const &amp;box3, T3 ncomp3, L3 &amp;&amp;f3) noexcept</argsstring>
        <name>For</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
          <defname>info</defname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type>T1</type>
          <declname>ncomp1</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type>T2</type>
          <declname>ncomp2</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box3</declname>
        </param>
        <param>
          <type>T3</type>
          <declname>ncomp3</declname>
        </param>
        <param>
          <type>L3 &amp;&amp;</type>
          <declname>f3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="234" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="234" bodyend="242"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a10d0f241ad4d9d28d20fa84630e7c476" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParallelFor</definition>
        <argsstring>(Box const &amp;box1, Box const &amp;box2, L1 &amp;&amp;f1, L2 &amp;&amp;f2) noexcept</argsstring>
        <name>ParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="245" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="245" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a3176ade9b263bdb8eff5d6899c1b44bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParallelFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;, Box const &amp;box1, Box const &amp;box2, L1 &amp;&amp;f1, L2 &amp;&amp;f2) noexcept</argsstring>
        <name>ParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="252" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="252" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a723dc684ea9fb13ba007143c904d0b45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
          <param>
            <type>typename L3</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParallelFor</definition>
        <argsstring>(Box const &amp;box1, Box const &amp;box2, Box const &amp;box3, L1 &amp;&amp;f1, L2 &amp;&amp;f2, L3 &amp;&amp;f3) noexcept</argsstring>
        <name>ParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box3</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type>L3 &amp;&amp;</type>
          <declname>f3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="258" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="258" bodyend="263"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae29d0bf15408a1011f1efe2268bc02c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
          <param>
            <type>typename L3</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParallelFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;, Box const &amp;box1, Box const &amp;box2, Box const &amp;box3, L1 &amp;&amp;f1, L2 &amp;&amp;f2, L3 &amp;&amp;f3) noexcept</argsstring>
        <name>ParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box3</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type>L3 &amp;&amp;</type>
          <declname>f3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="266" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="266" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6f268bb50cb57088d5321ed0c04c61b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
          <param>
            <type>typename M1</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;std::is_integral&lt;T1&gt;::value&gt;</defval>
          </param>
          <param>
            <type>typename M2</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;std::is_integral&lt;T2&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParallelFor</definition>
        <argsstring>(Box const &amp;box1, T1 ncomp1, L1 &amp;&amp;f1, Box const &amp;box2, T2 ncomp2, L2 &amp;&amp;f2) noexcept</argsstring>
        <name>ParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type>T1</type>
          <declname>ncomp1</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type>T2</type>
          <declname>ncomp2</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="274" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="274" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad72c9207638dee72b9c2ccedc35868d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
          <param>
            <type>typename M1</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;std::is_integral&lt;T1&gt;::value&gt;</defval>
          </param>
          <param>
            <type>typename M2</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;std::is_integral&lt;T2&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParallelFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;, Box const &amp;box1, T1 ncomp1, L1 &amp;&amp;f1, Box const &amp;box2, T2 ncomp2, L2 &amp;&amp;f2) noexcept</argsstring>
        <name>ParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type>T1</type>
          <declname>ncomp1</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type>T2</type>
          <declname>ncomp2</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="284" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="284" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac9332ec3412332457a7273412131b24a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename T3</type>
          </param>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
          <param>
            <type>typename L3</type>
          </param>
          <param>
            <type>typename M1</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;std::is_integral&lt;T1&gt;::value&gt;</defval>
          </param>
          <param>
            <type>typename M2</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;std::is_integral&lt;T2&gt;::value&gt;</defval>
          </param>
          <param>
            <type>typename M3</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;std::is_integral&lt;T3&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParallelFor</definition>
        <argsstring>(Box const &amp;box1, T1 ncomp1, L1 &amp;&amp;f1, Box const &amp;box2, T2 ncomp2, L2 &amp;&amp;f2, Box const &amp;box3, T3 ncomp3, L3 &amp;&amp;f3) noexcept</argsstring>
        <name>ParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type>T1</type>
          <declname>ncomp1</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type>T2</type>
          <declname>ncomp2</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box3</declname>
        </param>
        <param>
          <type>T3</type>
          <declname>ncomp3</declname>
        </param>
        <param>
          <type>L3 &amp;&amp;</type>
          <declname>f3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="296" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="296" bodyend="303"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a410d6b1d4212f6b2cd1166ab26a693c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename T3</type>
          </param>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
          <param>
            <type>typename L3</type>
          </param>
          <param>
            <type>typename M1</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;std::is_integral&lt;T1&gt;::value&gt;</defval>
          </param>
          <param>
            <type>typename M2</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;std::is_integral&lt;T2&gt;::value&gt;</defval>
          </param>
          <param>
            <type>typename M3</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;std::is_integral&lt;T3&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParallelFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;, Box const &amp;box1, T1 ncomp1, L1 &amp;&amp;f1, Box const &amp;box2, T2 ncomp2, L2 &amp;&amp;f2, Box const &amp;box3, T3 ncomp3, L3 &amp;&amp;f3) noexcept</argsstring>
        <name>ParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type>T1</type>
          <declname>ncomp1</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type>T2</type>
          <declname>ncomp2</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box3</declname>
        </param>
        <param>
          <type>T3</type>
          <declname>ncomp3</declname>
        </param>
        <param>
          <type>L3 &amp;&amp;</type>
          <declname>f3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="309" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="309" bodyend="317"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a5a1395d7a528a4346d3abbbf457bf078" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
          <param>
            <type>typename M</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;std::is_integral&lt;N&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabReduce</definition>
        <argsstring>(Box const &amp;box, N ncomp, T const &amp;init_val, L1 &amp;&amp;f1, L2 &amp;&amp;f2, std::size_t=0) noexcept</argsstring>
        <name>FabReduce</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>N</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>init_val</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="321" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="321" bodyend="335"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6fbc9ce751f84cb6447998a0ef18da98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabReduce</definition>
        <argsstring>(Box const &amp;box, T const &amp;init_val, L1 &amp;&amp;f1, L2 &amp;&amp;f2, std::size_t=0) noexcept</argsstring>
        <name>FabReduce</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>init_val</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="338" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="338" bodyend="350"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa97bf4be56f176e3af5b90f5b5955a04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
          <param>
            <type>typename M</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;std::is_integral&lt;N&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::VecReduce</definition>
        <argsstring>(N n, T const &amp;init_val, L1 &amp;&amp;f1, L2 &amp;&amp;f2, std::size_t=0) noexcept</argsstring>
        <name>VecReduce</name>
        <param>
          <type>N</type>
          <declname>n</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>init_val</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="354" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="354" bodyend="362"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8fbd6b37b492537aed607bfd14595409" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>typename M</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;std::is_integral&lt;T&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::HostDeviceParallelFor</definition>
        <argsstring>(T n, L &amp;&amp;f) noexcept</argsstring>
        <name>HostDeviceParallelFor</name>
        <param>
          <type>T</type>
          <declname>n</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="365" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="365" bodyend="368"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ada9330c731a48fc44471ebc3c6487231" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename L</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::HostDeviceParallelFor</definition>
        <argsstring>(Box const &amp;box, L &amp;&amp;f) noexcept</argsstring>
        <name>HostDeviceParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="371" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="371" bodyend="374"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a0cccddb84fe8782da9ad7a41659db4a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>typename M</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;std::is_integral&lt;T&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::HostDeviceParallelFor</definition>
        <argsstring>(Box const &amp;box, T ncomp, L &amp;&amp;f) noexcept</argsstring>
        <name>HostDeviceParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>T</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="377" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="377" bodyend="380"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8a34ce92315500abfec2cd2f5a6e5874" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::HostDeviceParallelFor</definition>
        <argsstring>(Box const &amp;box1, Box const &amp;box2, L1 &amp;&amp;f1, L2 &amp;&amp;f2) noexcept</argsstring>
        <name>HostDeviceParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="383" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="383" bodyend="386"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a291ee384b7b8dfe9bbfd673ea01e1116" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
          <param>
            <type>typename L3</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::HostDeviceParallelFor</definition>
        <argsstring>(Box const &amp;box1, Box const &amp;box2, Box const &amp;box3, L1 &amp;&amp;f1, L2 &amp;&amp;f2, L3 &amp;&amp;f3) noexcept</argsstring>
        <name>HostDeviceParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box3</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type>L3 &amp;&amp;</type>
          <declname>f3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="389" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="389" bodyend="393"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a868eed399e45cf6ec37ef16d6a3fe52c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
          <param>
            <type>typename M1</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;std::is_integral&lt;T1&gt;::value&gt;</defval>
          </param>
          <param>
            <type>typename M2</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;std::is_integral&lt;T2&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::HostDeviceParallelFor</definition>
        <argsstring>(Box const &amp;box1, T1 ncomp1, L1 &amp;&amp;f1, Box const &amp;box2, T2 ncomp2, L2 &amp;&amp;f2) noexcept</argsstring>
        <name>HostDeviceParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type>T1</type>
          <declname>ncomp1</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type>T2</type>
          <declname>ncomp2</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="398" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="398" bodyend="402"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a5203186b0e34bf6cea673cd5a84b5a65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename T3</type>
          </param>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
          <param>
            <type>typename L3</type>
          </param>
          <param>
            <type>typename M1</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;std::is_integral&lt;T1&gt;::value&gt;</defval>
          </param>
          <param>
            <type>typename M2</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;std::is_integral&lt;T2&gt;::value&gt;</defval>
          </param>
          <param>
            <type>typename M3</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;std::is_integral&lt;T3&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::HostDeviceParallelFor</definition>
        <argsstring>(Box const &amp;box1, T1 ncomp1, L1 &amp;&amp;f1, Box const &amp;box2, T2 ncomp2, L2 &amp;&amp;f2, Box const &amp;box3, T3 ncomp3, L3 &amp;&amp;f3) noexcept</argsstring>
        <name>HostDeviceParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type>T1</type>
          <declname>ncomp1</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type>T2</type>
          <declname>ncomp2</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box3</declname>
        </param>
        <param>
          <type>T3</type>
          <declname>ncomp3</declname>
        </param>
        <param>
          <type>L3 &amp;&amp;</type>
          <declname>f3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="408" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="408" bodyend="415"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a7272329c4c5b06cda2ee47e4ee3f46e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>typename M</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;std::is_integral&lt;T&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::HostDeviceFor</definition>
        <argsstring>(T n, L &amp;&amp;f) noexcept</argsstring>
        <name>HostDeviceFor</name>
        <param>
          <type>T</type>
          <declname>n</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="418" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="418" bodyend="421"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a674b3cdfb298f33ab148c79b1a8f864e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename L</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::HostDeviceFor</definition>
        <argsstring>(Box const &amp;box, L &amp;&amp;f) noexcept</argsstring>
        <name>HostDeviceFor</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="424" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="424" bodyend="427"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa8e17ba59ac39be36ae9b30b2a79a9a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>typename M</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;std::is_integral&lt;T&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::HostDeviceFor</definition>
        <argsstring>(Box const &amp;box, T ncomp, L &amp;&amp;f) noexcept</argsstring>
        <name>HostDeviceFor</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>T</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="430" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="430" bodyend="433"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab2dc88579a70cfe068381de5523e4e6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::HostDeviceFor</definition>
        <argsstring>(Box const &amp;box1, Box const &amp;box2, L1 &amp;&amp;f1, L2 &amp;&amp;f2) noexcept</argsstring>
        <name>HostDeviceFor</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="436" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="436" bodyend="439"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab85f87612e22364c1d3e310670c9fef0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
          <param>
            <type>typename L3</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::HostDeviceFor</definition>
        <argsstring>(Box const &amp;box1, Box const &amp;box2, Box const &amp;box3, L1 &amp;&amp;f1, L2 &amp;&amp;f2, L3 &amp;&amp;f3) noexcept</argsstring>
        <name>HostDeviceFor</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box3</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type>L3 &amp;&amp;</type>
          <declname>f3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="442" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="442" bodyend="446"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac4cd096351a9069431300195029519db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
          <param>
            <type>typename M1</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;std::is_integral&lt;T1&gt;::value&gt;</defval>
          </param>
          <param>
            <type>typename M2</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;std::is_integral&lt;T2&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::HostDeviceFor</definition>
        <argsstring>(Box const &amp;box1, T1 ncomp1, L1 &amp;&amp;f1, Box const &amp;box2, T2 ncomp2, L2 &amp;&amp;f2) noexcept</argsstring>
        <name>HostDeviceFor</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type>T1</type>
          <declname>ncomp1</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type>T2</type>
          <declname>ncomp2</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="451" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="451" bodyend="455"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6857dbe043af9dfc73a2bc572b14e918" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename T3</type>
          </param>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
          <param>
            <type>typename L3</type>
          </param>
          <param>
            <type>typename M1</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;std::is_integral&lt;T1&gt;::value&gt;</defval>
          </param>
          <param>
            <type>typename M2</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;std::is_integral&lt;T2&gt;::value&gt;</defval>
          </param>
          <param>
            <type>typename M3</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;std::is_integral&lt;T3&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::HostDeviceFor</definition>
        <argsstring>(Box const &amp;box1, T1 ncomp1, L1 &amp;&amp;f1, Box const &amp;box2, T2 ncomp2, L2 &amp;&amp;f2, Box const &amp;box3, T3 ncomp3, L3 &amp;&amp;f3) noexcept</argsstring>
        <name>HostDeviceFor</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type>T1</type>
          <declname>ncomp1</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type>T2</type>
          <declname>ncomp2</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box3</declname>
        </param>
        <param>
          <type>T3</type>
          <declname>ncomp3</declname>
        </param>
        <param>
          <type>L3 &amp;&amp;</type>
          <declname>f3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="461" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="461" bodyend="468"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aaa43ade38dff5d2e3eea8085d5c2e99e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>typename M</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;std::is_integral&lt;T&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::HostDeviceParallelFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;, T n, L &amp;&amp;f) noexcept</argsstring>
        <name>HostDeviceParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
        </param>
        <param>
          <type>T</type>
          <declname>n</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="471" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="471" bodyend="474"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae691b4150bbebc8fa1a0ad685c42a15b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename L</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::HostDeviceParallelFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;, Box const &amp;box, L &amp;&amp;f) noexcept</argsstring>
        <name>HostDeviceParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="477" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="477" bodyend="480"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac8ee3123268c4e941ac44214a7e5f9f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>typename M</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;std::is_integral&lt;T&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::HostDeviceParallelFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;, Box const &amp;box, T ncomp, L &amp;&amp;f) noexcept</argsstring>
        <name>HostDeviceParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>T</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="483" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="483" bodyend="486"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1afff3ae3db80c80c67b8a89f72c7fad01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::HostDeviceParallelFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;, Box const &amp;box1, Box const &amp;box2, L1 &amp;&amp;f1, L2 &amp;&amp;f2) noexcept</argsstring>
        <name>HostDeviceParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="489" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="489" bodyend="492"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a49077d5108dc85db1db7938f039a778b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
          <param>
            <type>typename L3</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::HostDeviceParallelFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;, Box const &amp;box1, Box const &amp;box2, Box const &amp;box3, L1 &amp;&amp;f1, L2 &amp;&amp;f2, L3 &amp;&amp;f3) noexcept</argsstring>
        <name>HostDeviceParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box3</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type>L3 &amp;&amp;</type>
          <declname>f3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="495" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="495" bodyend="500"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a35d0951b57ea7c93629e68e42c3a6807" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
          <param>
            <type>typename M1</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;std::is_integral&lt;T1&gt;::value&gt;</defval>
          </param>
          <param>
            <type>typename M2</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;std::is_integral&lt;T2&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::HostDeviceParallelFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;, Box const &amp;box1, T1 ncomp1, L1 &amp;&amp;f1, Box const &amp;box2, T2 ncomp2, L2 &amp;&amp;f2) noexcept</argsstring>
        <name>HostDeviceParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type>T1</type>
          <declname>ncomp1</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type>T2</type>
          <declname>ncomp2</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="505" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="505" bodyend="510"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa928415b2afda06373493941877c8daa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename T3</type>
          </param>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
          <param>
            <type>typename L3</type>
          </param>
          <param>
            <type>typename M1</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;std::is_integral&lt;T1&gt;::value&gt;</defval>
          </param>
          <param>
            <type>typename M2</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;std::is_integral&lt;T2&gt;::value&gt;</defval>
          </param>
          <param>
            <type>typename M3</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;std::is_integral&lt;T3&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::HostDeviceParallelFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;, Box const &amp;box1, T1 ncomp1, L1 &amp;&amp;f1, Box const &amp;box2, T2 ncomp2, L2 &amp;&amp;f2, Box const &amp;box3, T3 ncomp3, L3 &amp;&amp;f3) noexcept</argsstring>
        <name>HostDeviceParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type>T1</type>
          <declname>ncomp1</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type>T2</type>
          <declname>ncomp2</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box3</declname>
        </param>
        <param>
          <type>T3</type>
          <declname>ncomp3</declname>
        </param>
        <param>
          <type>L3 &amp;&amp;</type>
          <declname>f3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="516" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="516" bodyend="524"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aad398246e65a7d7102beb5169e03a04d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>typename M</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;std::is_integral&lt;T&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::HostDeviceFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;, T n, L &amp;&amp;f) noexcept</argsstring>
        <name>HostDeviceFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
          <defname>info</defname>
        </param>
        <param>
          <type>T</type>
          <declname>n</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="527" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="527" bodyend="530"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a5b26a31faefa1749b9fb899d1818244b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename L</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::HostDeviceFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;, Box const &amp;box, L &amp;&amp;f) noexcept</argsstring>
        <name>HostDeviceFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
          <defname>info</defname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="533" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="533" bodyend="536"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a3b9faf23e1d7db427410543fb90dfe54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>typename M</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;std::is_integral&lt;T&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::HostDeviceFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;, Box const &amp;box, T ncomp, L &amp;&amp;f) noexcept</argsstring>
        <name>HostDeviceFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
          <defname>info</defname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>T</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="539" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="539" bodyend="542"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a5484386a731a820195e419b9ff0d0fc2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::HostDeviceFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;, Box const &amp;box1, Box const &amp;box2, L1 &amp;&amp;f1, L2 &amp;&amp;f2) noexcept</argsstring>
        <name>HostDeviceFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
          <defname>info</defname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="545" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="545" bodyend="548"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aec488f9795341de5cb922ba7ad08066c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
          <param>
            <type>typename L3</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::HostDeviceFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;, Box const &amp;box1, Box const &amp;box2, Box const &amp;box3, L1 &amp;&amp;f1, L2 &amp;&amp;f2, L3 &amp;&amp;f3) noexcept</argsstring>
        <name>HostDeviceFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
          <defname>info</defname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box3</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type>L3 &amp;&amp;</type>
          <declname>f3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="551" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="551" bodyend="556"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a440c08a8f25cc712e02cefb709238206" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
          <param>
            <type>typename M1</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;std::is_integral&lt;T1&gt;::value&gt;</defval>
          </param>
          <param>
            <type>typename M2</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;std::is_integral&lt;T2&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::HostDeviceFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;, Box const &amp;box1, T1 ncomp1, L1 &amp;&amp;f1, Box const &amp;box2, T2 ncomp2, L2 &amp;&amp;f2) noexcept</argsstring>
        <name>HostDeviceFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
          <defname>info</defname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type>T1</type>
          <declname>ncomp1</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type>T2</type>
          <declname>ncomp2</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="561" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="561" bodyend="566"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad6c49d13c537803899b8c4cc0cce7516" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename T3</type>
          </param>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
          <param>
            <type>typename L3</type>
          </param>
          <param>
            <type>typename M1</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;std::is_integral&lt;T1&gt;::value&gt;</defval>
          </param>
          <param>
            <type>typename M2</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;std::is_integral&lt;T2&gt;::value&gt;</defval>
          </param>
          <param>
            <type>typename M3</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;std::is_integral&lt;T3&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::HostDeviceFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;, Box const &amp;box1, T1 ncomp1, L1 &amp;&amp;f1, Box const &amp;box2, T2 ncomp2, L2 &amp;&amp;f2, Box const &amp;box3, T3 ncomp3, L3 &amp;&amp;f3) noexcept</argsstring>
        <name>HostDeviceFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
          <defname>info</defname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type>T1</type>
          <declname>ncomp1</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type>T2</type>
          <declname>ncomp2</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box3</declname>
        </param>
        <param>
          <type>T3</type>
          <declname>ncomp3</declname>
        </param>
        <param>
          <type>L3 &amp;&amp;</type>
          <declname>f3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="572" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="572" bodyend="580"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a2de21a574a15104cfa7e94e52dd6ab67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>typename M</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;std::is_integral&lt;T&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParallelForRNG</definition>
        <argsstring>(T n, L &amp;&amp;f) noexcept</argsstring>
        <name>ParallelForRNG</name>
        <param>
          <type>T</type>
          <declname>n</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="583" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="583" bodyend="588"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6b36710af5d429b6ee50b3d6ff67c240" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename L</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParallelForRNG</definition>
        <argsstring>(Box const &amp;box, L &amp;&amp;f) noexcept</argsstring>
        <name>ParallelForRNG</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="591" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="591" bodyend="600"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae0528e001d631f2240d2d111fed2607d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>typename M</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;std::is_integral&lt;T&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParallelForRNG</definition>
        <argsstring>(Box const &amp;box, T ncomp, L &amp;&amp;f) noexcept</argsstring>
        <name>ParallelForRNG</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>T</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="603" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="603" bodyend="614"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a3bddb069b268576e6fa712be45c218ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename L</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::single_task</definition>
        <argsstring>(gpuStream_t stream, L &amp;&amp;f) noexcept</argsstring>
        <name>single_task</name>
        <param>
          <type>gpuStream_t</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" line="824" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" bodystart="824" bodyend="829"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a1943b9e3d049575658e8d169748d9b17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename L</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::launch</definition>
        <argsstring>(int nblocks, int nthreads_per_block, std::size_t shared_mem_bytes, gpuStream_t stream, L &amp;&amp;f) noexcept</argsstring>
        <name>launch</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nblocks</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nthreads_per_block</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>shared_mem_bytes</declname>
        </param>
        <param>
          <type>gpuStream_t</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" line="832" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" bodystart="832" bodyend="838"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a93bf7d62b3ca318333e7e1d4a6d5d5c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename L</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::launch</definition>
        <argsstring>(int nblocks, int nthreads_per_block, gpuStream_t stream, L &amp;&amp;f) noexcept</argsstring>
        <name>launch</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nblocks</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nthreads_per_block</declname>
        </param>
        <param>
          <type>gpuStream_t</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" line="841" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" bodystart="841" bodyend="844"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a685ae8eab582f895ce964b6a99030ef2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename L</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::launch</definition>
        <argsstring>(T const &amp;n, L &amp;&amp;f) noexcept</argsstring>
        <name>launch</name>
        <param>
          <type>T const &amp;</type>
          <declname>n</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" line="847" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" bodystart="847" bodyend="858"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad411e7926ae6751ea3dabe64167bee9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>typename M</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;std::is_integral&lt;T&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt; MaybeDeviceRunnable&lt; L &gt;::value &gt;</type>
        <definition>amrex::EnableIf_t&lt;MaybeDeviceRunnable&lt;L&gt;::value&gt; amrex::ParallelFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;info, T n, L &amp;&amp;f) noexcept</argsstring>
        <name>ParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
          <declname>info</declname>
        </param>
        <param>
          <type>T</type>
          <declname>n</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" line="912" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" bodystart="912" bodyend="933"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a1bcec6d48338476959117b14facc7368" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename L</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt; MaybeDeviceRunnable&lt; L &gt;::value &gt;</type>
        <definition>amrex::EnableIf_t&lt;MaybeDeviceRunnable&lt;L&gt;::value&gt; amrex::ParallelFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;info, Box const &amp;box, L &amp;&amp;f) noexcept</argsstring>
        <name>ParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
          <declname>info</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" line="937" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" bodystart="937" bodyend="968"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1adbfb2297d04a71bbc7119a6706d73ba7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>typename M</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;std::is_integral&lt;T&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt; MaybeDeviceRunnable&lt; L &gt;::value &gt;</type>
        <definition>amrex::EnableIf_t&lt;MaybeDeviceRunnable&lt;L&gt;::value&gt; amrex::ParallelFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;info, Box const &amp;box, T ncomp, L &amp;&amp;f) noexcept</argsstring>
        <name>ParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
          <declname>info</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>T</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" line="972" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" bodystart="972" bodyend="1002"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a37999a74566dc30db74f780d2fb20065" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>typename M</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;std::is_integral&lt;T&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt; MaybeDeviceRunnable&lt; L &gt;::value &gt;</type>
        <definition>amrex::EnableIf_t&lt;MaybeDeviceRunnable&lt;L&gt;::value&gt; amrex::ParallelForRNG</definition>
        <argsstring>(T n, L &amp;&amp;f) noexcept</argsstring>
        <name>ParallelForRNG</name>
        <param>
          <type>T</type>
          <declname>n</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" line="1006" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" bodystart="1006" bodyend="1021"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a3e8e41bceaa94ec7e7b6408ddc2f4c7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename L</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt; MaybeDeviceRunnable&lt; L &gt;::value &gt;</type>
        <definition>amrex::EnableIf_t&lt;MaybeDeviceRunnable&lt;L&gt;::value&gt; amrex::ParallelForRNG</definition>
        <argsstring>(Box const &amp;box, L &amp;&amp;f) noexcept</argsstring>
        <name>ParallelForRNG</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" line="1025" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" bodystart="1025" bodyend="1049"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1abafdba3f3086387e6c891c0a6744c136" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>typename M</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;std::is_integral&lt;T&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt; MaybeDeviceRunnable&lt; L &gt;::value &gt;</type>
        <definition>amrex::EnableIf_t&lt;MaybeDeviceRunnable&lt;L&gt;::value&gt; amrex::ParallelForRNG</definition>
        <argsstring>(Box const &amp;box, T ncomp, L &amp;&amp;f) noexcept</argsstring>
        <name>ParallelForRNG</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>T</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" line="1053" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" bodystart="1053" bodyend="1079"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a88ba75f55e74c851888862cef34129cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt; MaybeDeviceRunnable&lt; L1 &gt;::value &amp;&amp;MaybeDeviceRunnable&lt; L2 &gt;::value &gt;</type>
        <definition>amrex::EnableIf_t&lt;MaybeDeviceRunnable&lt;L1&gt;::value &amp;&amp; MaybeDeviceRunnable&lt;L2&gt;::value&gt; amrex::ParallelFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;info, Box const &amp;box1, Box const &amp;box2, L1 &amp;&amp;f1, L2 &amp;&amp;f2) noexcept</argsstring>
        <name>ParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
          <declname>info</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" line="1083" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" bodystart="1083" bodyend="1129"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a3857288e1f9edee6b8f487552493068b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
          <param>
            <type>typename L3</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt; MaybeDeviceRunnable&lt; L1 &gt;::value &amp;&amp;MaybeDeviceRunnable&lt; L2 &gt;::value &amp;&amp;MaybeDeviceRunnable&lt; L3 &gt;::value &gt;</type>
        <definition>amrex::EnableIf_t&lt;MaybeDeviceRunnable&lt;L1&gt;::value &amp;&amp; MaybeDeviceRunnable&lt;L2&gt;::value &amp;&amp; MaybeDeviceRunnable&lt;L3&gt;::value&gt; amrex::ParallelFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;info, Box const &amp;box1, Box const &amp;box2, Box const &amp;box3, L1 &amp;&amp;f1, L2 &amp;&amp;f2, L3 &amp;&amp;f3) noexcept</argsstring>
        <name>ParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
          <declname>info</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box3</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type>L3 &amp;&amp;</type>
          <declname>f3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" line="1133" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" bodystart="1133" bodyend="1193"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a750fccdef6a841f3b2ba7268217bbae8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
          <param>
            <type>typename M1</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;std::is_integral&lt;T1&gt;::value&gt;</defval>
          </param>
          <param>
            <type>typename M2</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;std::is_integral&lt;T2&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt; MaybeDeviceRunnable&lt; L1 &gt;::value &amp;&amp;MaybeDeviceRunnable&lt; L2 &gt;::value &gt;</type>
        <definition>amrex::EnableIf_t&lt;MaybeDeviceRunnable&lt;L1&gt;::value &amp;&amp; MaybeDeviceRunnable&lt;L2&gt;::value&gt; amrex::ParallelFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;info, Box const &amp;box1, T1 ncomp1, L1 &amp;&amp;f1, Box const &amp;box2, T2 ncomp2, L2 &amp;&amp;f2) noexcept</argsstring>
        <name>ParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
          <declname>info</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type>T1</type>
          <declname>ncomp1</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type>T2</type>
          <declname>ncomp2</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" line="1199" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" bodystart="1199" bodyend="1250"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a0d6be978f77f09040c48c8216aa0f461" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename T3</type>
          </param>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
          <param>
            <type>typename L3</type>
          </param>
          <param>
            <type>typename M1</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;std::is_integral&lt;T1&gt;::value&gt;</defval>
          </param>
          <param>
            <type>typename M2</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;std::is_integral&lt;T2&gt;::value&gt;</defval>
          </param>
          <param>
            <type>typename M3</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;std::is_integral&lt;T3&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt; MaybeDeviceRunnable&lt; L1 &gt;::value &amp;&amp;MaybeDeviceRunnable&lt; L2 &gt;::value &amp;&amp;MaybeDeviceRunnable&lt; L3 &gt;::value &gt;</type>
        <definition>amrex::EnableIf_t&lt;MaybeDeviceRunnable&lt;L1&gt;::value &amp;&amp; MaybeDeviceRunnable&lt;L2&gt;::value &amp;&amp; MaybeDeviceRunnable&lt;L3&gt;::value&gt; amrex::ParallelFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;info, Box const &amp;box1, T1 ncomp1, L1 &amp;&amp;f1, Box const &amp;box2, T2 ncomp2, L2 &amp;&amp;f2, Box const &amp;box3, T3 ncomp3, L3 &amp;&amp;f3) noexcept</argsstring>
        <name>ParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
          <declname>info</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type>T1</type>
          <declname>ncomp1</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type>T2</type>
          <declname>ncomp2</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box3</declname>
        </param>
        <param>
          <type>T3</type>
          <declname>ncomp3</declname>
        </param>
        <param>
          <type>L3 &amp;&amp;</type>
          <declname>f3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" line="1257" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" bodystart="1257" bodyend="1324"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad18be84cd190d36378e4bba1f0b8dcca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt; MaybeDeviceRunnable&lt; L1 &gt;::value &amp;&amp;MaybeDeviceRunnable&lt; L2 &gt;::value &gt;</type>
        <definition>amrex::EnableIf_t&lt;MaybeDeviceRunnable&lt;L1&gt;::value &amp;&amp; MaybeDeviceRunnable&lt;L2&gt;::value&gt; amrex::FabReduce</definition>
        <argsstring>(Box const &amp;box, T const &amp;init_val, L1 &amp;&amp;f1, L2 &amp;&amp;f2) noexcept</argsstring>
        <name>FabReduce</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>init_val</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" line="1328" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" bodystart="1328" bodyend="1352"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aef8676584d286e607f65ace8fa1069f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
          <param>
            <type>typename M</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;std::is_integral&lt;N&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt; MaybeDeviceRunnable&lt; L1 &gt;::value &amp;&amp;MaybeDeviceRunnable&lt; L2 &gt;::value &gt;</type>
        <definition>amrex::EnableIf_t&lt;MaybeDeviceRunnable&lt;L1&gt;::value &amp;&amp; MaybeDeviceRunnable&lt;L2&gt;::value&gt; amrex::FabReduce</definition>
        <argsstring>(Box const &amp;box, N ncomp, T const &amp;init_val, L1 &amp;&amp;f1, L2 &amp;&amp;f2) noexcept</argsstring>
        <name>FabReduce</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>N</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>init_val</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" line="1357" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" bodystart="1357" bodyend="1383"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab977376753fa9f03360aa0de50f7cf36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
          <param>
            <type>typename M</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;std::is_integral&lt;N&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt; MaybeDeviceRunnable&lt; L1 &gt;::value &amp;&amp;MaybeDeviceRunnable&lt; L2 &gt;::value &gt;</type>
        <definition>amrex::EnableIf_t&lt;MaybeDeviceRunnable&lt;L1&gt;::value &amp;&amp; MaybeDeviceRunnable&lt;L2&gt;::value&gt; amrex::VecReduce</definition>
        <argsstring>(N n, T const &amp;init_val, L1 &amp;&amp;f1, L2 &amp;&amp;f2) noexcept</argsstring>
        <name>VecReduce</name>
        <param>
          <type>N</type>
          <declname>n</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>init_val</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" line="1388" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" bodystart="1388" bodyend="1403"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa785b3b07c24c864604e8de72a0bb919" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename L</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::single_task</definition>
        <argsstring>(L &amp;&amp;f) noexcept</argsstring>
        <name>single_task</name>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" line="1408" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" bodystart="1408" bodyend="1411"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa4cf3c75a27fc2260835ebc8fc0c6b22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>typename M</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;std::is_integral&lt;T&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt; MaybeHostDeviceRunnable&lt; L &gt;::value &gt;</type>
        <definition>amrex::EnableIf_t&lt;MaybeHostDeviceRunnable&lt;L&gt;::value&gt; amrex::HostDeviceParallelFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;info, T n, L &amp;&amp;f) noexcept</argsstring>
        <name>HostDeviceParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
          <declname>info</declname>
        </param>
        <param>
          <type>T</type>
          <declname>n</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" line="1581" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" bodystart="1581" bodyend="1589"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aaf3a6e20d26cc2510d4883b5ce603393" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>typename M</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;std::is_integral&lt;T&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt; MaybeHostDeviceRunnable&lt; L &gt;::value &gt;</type>
        <definition>amrex::EnableIf_t&lt;MaybeHostDeviceRunnable&lt;L&gt;::value&gt; amrex::HostDeviceParallelFor</definition>
        <argsstring>(T n, L &amp;&amp;f) noexcept</argsstring>
        <name>HostDeviceParallelFor</name>
        <param>
          <type>T</type>
          <declname>n</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" line="1593" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" bodystart="1593" bodyend="1596"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a3e7140d01a3069aaf23524b0e2ba4a4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename L</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt; MaybeHostDeviceRunnable&lt; L &gt;::value &gt;</type>
        <definition>amrex::EnableIf_t&lt;MaybeHostDeviceRunnable&lt;L&gt;::value&gt; amrex::HostDeviceParallelFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;info, Box const &amp;box, L &amp;&amp;f) noexcept</argsstring>
        <name>HostDeviceParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
          <declname>info</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" line="1600" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" bodystart="1600" bodyend="1607"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa9ae3294d0b8e59263313243942b35de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>typename M</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;std::is_integral&lt;T&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt; MaybeHostDeviceRunnable&lt; L &gt;::value &gt;</type>
        <definition>amrex::EnableIf_t&lt;MaybeHostDeviceRunnable&lt;L&gt;::value&gt; amrex::HostDeviceParallelFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;info, Box const &amp;box, T ncomp, L &amp;&amp;f) noexcept</argsstring>
        <name>HostDeviceParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
          <declname>info</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>T</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" line="1611" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" bodystart="1611" bodyend="1618"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a15a2f12a09035843df6d96741da34b88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt; MaybeHostDeviceRunnable&lt; L1 &gt;::value &amp;&amp;MaybeHostDeviceRunnable&lt; L2 &gt;::value &gt;</type>
        <definition>amrex::EnableIf_t&lt;MaybeHostDeviceRunnable&lt;L1&gt;::value &amp;&amp; MaybeHostDeviceRunnable&lt;L2&gt;::value&gt; amrex::HostDeviceParallelFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;info, Box const &amp;box1, Box const &amp;box2, L1 &amp;&amp;f1, L2 &amp;&amp;f2) noexcept</argsstring>
        <name>HostDeviceParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
          <declname>info</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" line="1622" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" bodystart="1622" bodyend="1631"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a88c5392837930b063ba3057315e8136b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
          <param>
            <type>typename L3</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt; MaybeHostDeviceRunnable&lt; L1 &gt;::value &amp;&amp;MaybeHostDeviceRunnable&lt; L2 &gt;::value &amp;&amp;MaybeHostDeviceRunnable&lt; L3 &gt;::value &gt;</type>
        <definition>amrex::EnableIf_t&lt;MaybeHostDeviceRunnable&lt;L1&gt;::value &amp;&amp; MaybeHostDeviceRunnable&lt;L2&gt;::value &amp;&amp; MaybeHostDeviceRunnable&lt;L3&gt;::value&gt; amrex::HostDeviceParallelFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;info, Box const &amp;box1, Box const &amp;box2, Box const &amp;box3, L1 &amp;&amp;f1, L2 &amp;&amp;f2, L3 &amp;&amp;f3) noexcept</argsstring>
        <name>HostDeviceParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
          <declname>info</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box3</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type>L3 &amp;&amp;</type>
          <declname>f3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" line="1635" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" bodystart="1635" bodyend="1647"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a389d9a1a2a659a0a47b5eaed02855324" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
          <param>
            <type>typename M1</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;std::is_integral&lt;T1&gt;::value&gt;</defval>
          </param>
          <param>
            <type>typename M2</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;std::is_integral&lt;T2&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt; MaybeHostDeviceRunnable&lt; L1 &gt;::value &amp;&amp;MaybeHostDeviceRunnable&lt; L2 &gt;::value &gt;</type>
        <definition>amrex::EnableIf_t&lt;MaybeHostDeviceRunnable&lt;L1&gt;::value &amp;&amp; MaybeHostDeviceRunnable&lt;L2&gt;::value&gt; amrex::HostDeviceParallelFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;info, Box const &amp;box1, T1 ncomp1, L1 &amp;&amp;f1, Box const &amp;box2, T2 ncomp2, L2 &amp;&amp;f2) noexcept</argsstring>
        <name>HostDeviceParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
          <declname>info</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type>T1</type>
          <declname>ncomp1</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type>T2</type>
          <declname>ncomp2</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" line="1653" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" bodystart="1653" bodyend="1663"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a90503a6f97a876f238344849a86de629" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename T3</type>
          </param>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
          <param>
            <type>typename L3</type>
          </param>
          <param>
            <type>typename M1</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;std::is_integral&lt;T1&gt;::value&gt;</defval>
          </param>
          <param>
            <type>typename M2</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;std::is_integral&lt;T2&gt;::value&gt;</defval>
          </param>
          <param>
            <type>typename M3</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;std::is_integral&lt;T3&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt; MaybeHostDeviceRunnable&lt; L1 &gt;::value &amp;&amp;MaybeHostDeviceRunnable&lt; L2 &gt;::value &amp;&amp;MaybeHostDeviceRunnable&lt; L3 &gt;::value &gt;</type>
        <definition>amrex::EnableIf_t&lt;MaybeHostDeviceRunnable&lt;L1&gt;::value &amp;&amp; MaybeHostDeviceRunnable&lt;L2&gt;::value &amp;&amp; MaybeHostDeviceRunnable&lt;L3&gt;::value&gt; amrex::HostDeviceParallelFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;info, Box const &amp;box1, T1 ncomp1, L1 &amp;&amp;f1, Box const &amp;box2, T2 ncomp2, L2 &amp;&amp;f2, Box const &amp;box3, T3 ncomp3, L3 &amp;&amp;f3) noexcept</argsstring>
        <name>HostDeviceParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
          <declname>info</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type>T1</type>
          <declname>ncomp1</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type>T2</type>
          <declname>ncomp2</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box3</declname>
        </param>
        <param>
          <type>T3</type>
          <declname>ncomp3</declname>
        </param>
        <param>
          <type>L3 &amp;&amp;</type>
          <declname>f3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" line="1670" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" bodystart="1670" bodyend="1685"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a923303ed68b75a5a2e65f20876e25a7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_integral&lt; T &gt;::value, int &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool amrex::isEmpty</definition>
        <argsstring>(T n) noexcept</argsstring>
        <name>isEmpty</name>
        <param>
          <type>T</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuRange.H" line="14" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuRange.H" bodystart="14" bodyend="14"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1abb63128824cf099d9c02ef49c3288713" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> bool</type>
        <definition>AMREX_FORCE_INLINE bool amrex::isEmpty</definition>
        <argsstring>(Box const &amp;b) noexcept</argsstring>
        <name>isEmpty</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuRange.H" line="16" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuRange.H" bodystart="16" bodyend="16"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a63e28af3672b72154d156eac5f51ce06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &gt;</type>
        <definition>std::unique_ptr&lt; iMultiFab &gt; amrex::OwnerMask</definition>
        <argsstring>(FabArrayBase const &amp;mf, const Periodicity &amp;period, const IntVect &amp;ngrow)</argsstring>
        <name>OwnerMask</name>
        <param>
          <type><ref refid="classamrex_1_1FabArrayBase" kindref="compound">FabArrayBase</ref> const &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ngrow</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_iMultiFab.cpp" line="533" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_iMultiFab.cpp" bodystart="533" bodyend="604"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a73fb53c873d555a7a3cc7b33e88a5f33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const IndexType &amp;itype)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref> &amp;</type>
          <declname>it</declname>
        </param>
        <briefdescription>
<para>Write an <ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref> to an ostream in ASCII. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IndexType.cpp" line="9" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IndexType.cpp" bodystart="10" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab982b91919e6fa7eed439d20fc794c41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::istream &amp;</type>
        <definition>std::istream &amp; amrex::operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;is, IndexType &amp;itype)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref> &amp;</type>
          <declname>it</declname>
        </param>
        <briefdescription>
<para>Read an <ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref> from an istream. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IndexType.cpp" line="30" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IndexType.cpp" bodystart="30" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac25dfba1079e742467f752e4ee21450f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::int16_t</type>
        <definition>std::int16_t amrex::swapBytes</definition>
        <argsstring>(std::int16_t val)</argsstring>
        <name>swapBytes</name>
        <param>
          <type>std::int16_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntConv.cpp" line="5" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntConv.cpp" bodystart="5" bodyend="8"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a591f0270c546f1ece0504803e064d8d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t amrex::swapBytes</definition>
        <argsstring>(std::int32_t val)</argsstring>
        <name>swapBytes</name>
        <param>
          <type>std::int32_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntConv.cpp" line="10" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntConv.cpp" bodystart="10" bodyend="14"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aafe4e1214f81026ac1c1704afef4ad79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::int64_t</type>
        <definition>std::int64_t amrex::swapBytes</definition>
        <argsstring>(std::int64_t val)</argsstring>
        <name>swapBytes</name>
        <param>
          <type>std::int64_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntConv.cpp" line="16" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntConv.cpp" bodystart="16" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad65cae2ff531a4079a272c48094ce223" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint16_t</type>
        <definition>std::uint16_t amrex::swapBytes</definition>
        <argsstring>(std::uint16_t val)</argsstring>
        <name>swapBytes</name>
        <param>
          <type>std::uint16_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntConv.cpp" line="23" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntConv.cpp" bodystart="23" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1afe5aa643ac55845309ffb09b6cd6bc6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint32_t</type>
        <definition>std::uint32_t amrex::swapBytes</definition>
        <argsstring>(std::uint32_t val)</argsstring>
        <name>swapBytes</name>
        <param>
          <type>std::uint32_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntConv.cpp" line="28" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntConv.cpp" bodystart="28" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa67c20a40ddd4aeebbbb36e32af4b546" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint64_t</type>
        <definition>std::uint64_t amrex::swapBytes</definition>
        <argsstring>(std::uint64_t val)</argsstring>
        <name>swapBytes</name>
        <param>
          <type>std::uint64_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntConv.cpp" line="34" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntConv.cpp" bodystart="34" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a0718da697f64bda3be2152538b70d4c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename To</type>
          </param>
          <param>
            <type>typename From</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::writeIntData</definition>
        <argsstring>(const From *data, std::size_t size, std::ostream &amp;os, const amrex::IntDescriptor &amp;id)</argsstring>
        <name>writeIntData</name>
        <param>
          <type>const From *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntDescriptor" kindref="compound">amrex::IntDescriptor</ref> &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntConv.H" line="23" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntConv.H" bodystart="23" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af8ec915a2cffc7c342e1f15e52cbd697" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename To</type>
          </param>
          <param>
            <type>typename From</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::readIntData</definition>
        <argsstring>(To *data, std::size_t size, std::istream &amp;is, const amrex::IntDescriptor &amp;id)</argsstring>
        <name>readIntData</name>
        <param>
          <type>To *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntDescriptor" kindref="compound">amrex::IntDescriptor</ref> &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntConv.H" line="36" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntConv.H" bodystart="36" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a56a98cb29892cdc924be9c0c6b83cda2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const IntVect &amp;p)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.cpp" line="15" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.cpp" bodystart="16" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae3b2b2af01369829d3b37006cd625fe2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::istream &amp;</type>
        <definition>std::istream&amp; amrex::operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;is, IntVect &amp;iv)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>iv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.cpp" line="30" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.cpp" bodystart="30" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aff7e1eb998059fdb9cbc90a22c2d01d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE int amrex::coarsen</definition>
        <argsstring>(int i, int ratio) noexcept</argsstring>
        <name>coarsen</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="26" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="26" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a1da87e164dc6afd9cd39bc5b1bc6920c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVect amrex::operator+</definition>
        <argsstring>(int s, const IntVect &amp;p) noexcept</argsstring>
        <name>operator+</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Returns p + s. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="624" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="624" bodyend="627"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aab9309e1642f8394f6a3c95dbc98755d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE AMREX_GPU_HOST_DEVICE IntVect amrex::operator-</definition>
        <argsstring>(int s, const IntVect &amp;p) noexcept</argsstring>
        <name>operator-</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Returns -p + s. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="632" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="632" bodyend="635"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a38ef4bb6aa5d316bafa475400152a048" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVect amrex::operator*</definition>
        <argsstring>(int s, const IntVect &amp;p) noexcept</argsstring>
        <name>operator*</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Returns p * s. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="639" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="639" bodyend="642"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1adda43c394af96b55fd44923cbd4a3774" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVect amrex::min</definition>
        <argsstring>(const IntVect &amp;p1, const IntVect &amp;p2) noexcept</argsstring>
        <name>min</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
<para>Returns the <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> that is the component-wise minimum of two argument IntVects. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="651" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="651" bodyend="656"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa8f4106a3b37e5bcbb8f8a45dfb69598" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVect amrex::elemwiseMin</definition>
        <argsstring>(const IntVect &amp;p1, const IntVect &amp;p2) noexcept</argsstring>
        <name>elemwiseMin</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="661" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="661" bodyend="666"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a13b3121d972f873fb930fafd6a3318f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVect amrex::max</definition>
        <argsstring>(const IntVect &amp;p1, const IntVect &amp;p2) noexcept</argsstring>
        <name>max</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
<para>Returns the <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> that is the component-wise maximum of two argument IntVects. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="675" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="675" bodyend="680"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1afb0a9dea764f55669bba38551e3e5bb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVect amrex::elemwiseMax</definition>
        <argsstring>(const IntVect &amp;p1, const IntVect &amp;p2) noexcept</argsstring>
        <name>elemwiseMax</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="685" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="685" bodyend="690"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a86199655298470c716a068f36731ae9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVect amrex::BASISV</definition>
        <argsstring>(int dir) noexcept</argsstring>
        <name>BASISV</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Returns a basis vector in the given coordinate direction; eg. <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> BASISV(1) == (0,1,0). Note that the coordinate directions are zero based. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="700" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="700" bodyend="706"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a1a42959e8a21d09d8bcf385c75ad4ec6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVect amrex::scale</definition>
        <argsstring>(const IntVect &amp;p, int s) noexcept</argsstring>
        <name>scale</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Returns a <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> obtained by multiplying each of the components of this <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> by s. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="715" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="715" bodyend="718"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae06284bc2bd3bee6426c654371490514" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVect amrex::reflect</definition>
        <argsstring>(const IntVect &amp;a, int ref_ix, int idir) noexcept</argsstring>
        <name>reflect</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ref_ix</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>idir</declname>
        </param>
        <briefdescription>
<para>Returns an <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> that is the reflection of input in the plane which passes through ref_ix and normal to the coordinate direction idir. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="728" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="728" bodyend="734"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a9a81bac0694ac99fbe8dae5d321ac9ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVect amrex::diagShift</definition>
        <argsstring>(const IntVect &amp;p, int s) noexcept</argsstring>
        <name>diagShift</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Returns <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> obtained by adding s to each of the components of this <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="743" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="743" bodyend="746"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4599a590d5a29a6f59ccdb2447d01c56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVect amrex::coarsen</definition>
        <argsstring>(const IntVect &amp;p, int s) noexcept</argsstring>
        <name>coarsen</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Returns an <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> that is the component-wise integer projection of p by s. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="755" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="755" bodyend="761"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab40c08462a3a929ed2c8025f49302aeb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVect amrex::coarsen</definition>
        <argsstring>(const IntVect &amp;p1, const IntVect &amp;p2) noexcept</argsstring>
        <name>coarsen</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
<para>Returns an <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> which is the component-wise integer projection of <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> p1 by <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> p2. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="770" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="770" bodyend="775"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1adfc791fe29b7108a57b8af1f44a0c7f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Dim3 amrex::refine</definition>
        <argsstring>(Dim3 const &amp;coarse, IntVect const &amp;ratio) noexcept</argsstring>
        <name>refine</name>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>coarse</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="778" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="778" bodyend="787"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a41d0c56a7f130f1ccbbd99e593c06cd5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Dim3 amrex::coarsen</definition>
        <argsstring>(Dim3 const &amp;fine, IntVect const &amp;ratio) noexcept</argsstring>
        <name>coarsen</name>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="790" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="790" bodyend="801"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1afee333c49bcfdf12a3ccc051cd2f7406" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::Loop</definition>
        <argsstring>(Dim3 lo, Dim3 hi, F &amp;&amp;f) noexcept</argsstring>
        <name>Loop</name>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
          <declname>lo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
          <declname>hi</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" line="11" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" bodystart="11" bodyend="18"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a3f6b859472e6d504884b800a36bb9adf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::Loop</definition>
        <argsstring>(Dim3 lo, Dim3 hi, int ncomp, F &amp;&amp;f) noexcept</argsstring>
        <name>Loop</name>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
          <declname>lo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
          <declname>hi</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" line="22" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" bodystart="22" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a0ae2c3cb59e9cd9a180504ebc4d75546" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::LoopConcurrent</definition>
        <argsstring>(Dim3 lo, Dim3 hi, F &amp;&amp;f) noexcept</argsstring>
        <name>LoopConcurrent</name>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
          <declname>lo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
          <declname>hi</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" line="34" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" bodystart="34" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a7386d84016866de8cf910014ed477363" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::LoopConcurrent</definition>
        <argsstring>(Dim3 lo, Dim3 hi, int ncomp, F &amp;&amp;f) noexcept</argsstring>
        <name>LoopConcurrent</name>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
          <declname>lo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
          <declname>hi</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" line="46" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" bodystart="46" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab47a3b98bcd26d509fba9e831d218d33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::Loop</definition>
        <argsstring>(Box const &amp;bx, F &amp;&amp;f) noexcept</argsstring>
        <name>Loop</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" line="59" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" bodystart="59" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a0958f5bfc610a207d30ce2a5a8446f98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::Loop</definition>
        <argsstring>(Box const &amp;bx, int ncomp, F &amp;&amp;f) noexcept</argsstring>
        <name>Loop</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" line="72" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" bodystart="72" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a86a9269548418748728a046fdd5d2f92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::LoopConcurrent</definition>
        <argsstring>(Box const &amp;bx, F &amp;&amp;f) noexcept</argsstring>
        <name>LoopConcurrent</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" line="86" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" bodystart="86" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a9b4cf9e6c81ef6af475cb7f7d1ed76b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::LoopConcurrent</definition>
        <argsstring>(Box const &amp;bx, int ncomp, F &amp;&amp;f) noexcept</argsstring>
        <name>LoopConcurrent</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" line="100" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" bodystart="100" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a9d2e38bd2809143536efe0db90492957" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::LoopOnCpu</definition>
        <argsstring>(Dim3 lo, Dim3 hi, F &amp;&amp;f) noexcept</argsstring>
        <name>LoopOnCpu</name>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
          <declname>lo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
          <declname>hi</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" line="119" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" bodystart="119" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1adf326f0f9706c94bc4e0376238c8beee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::LoopOnCpu</definition>
        <argsstring>(Dim3 lo, Dim3 hi, int ncomp, F &amp;&amp;f) noexcept</argsstring>
        <name>LoopOnCpu</name>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
          <declname>lo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
          <declname>hi</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" line="129" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" bodystart="129" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1abdd5d7a3b382bc1d21220946d7084839" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::LoopConcurrentOnCpu</definition>
        <argsstring>(Dim3 lo, Dim3 hi, F &amp;&amp;f) noexcept</argsstring>
        <name>LoopConcurrentOnCpu</name>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
          <declname>lo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
          <declname>hi</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" line="140" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" bodystart="140" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1adcbb2603675205d10dc69e70404ee4f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::LoopConcurrentOnCpu</definition>
        <argsstring>(Dim3 lo, Dim3 hi, int ncomp, F &amp;&amp;f) noexcept</argsstring>
        <name>LoopConcurrentOnCpu</name>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
          <declname>lo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
          <declname>hi</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" line="151" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" bodystart="151" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a04802278f1954f916305464fff130fc3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::LoopOnCpu</definition>
        <argsstring>(Box const &amp;bx, F &amp;&amp;f) noexcept</argsstring>
        <name>LoopOnCpu</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" line="163" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" bodystart="163" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a1551964168679946c4e1825f12f8648c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::LoopOnCpu</definition>
        <argsstring>(Box const &amp;bx, int ncomp, F &amp;&amp;f) noexcept</argsstring>
        <name>LoopOnCpu</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" line="175" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" bodystart="175" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a83f44aadfc943e0bc4597817d756df99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::LoopConcurrentOnCpu</definition>
        <argsstring>(Box const &amp;bx, F &amp;&amp;f) noexcept</argsstring>
        <name>LoopConcurrentOnCpu</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" line="188" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" bodystart="188" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a52c29366dbc78b45ef499814cba35206" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::LoopConcurrentOnCpu</definition>
        <argsstring>(Box const &amp;bx, int ncomp, F &amp;&amp;f) noexcept</argsstring>
        <name>LoopConcurrentOnCpu</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" line="201" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" bodystart="201" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a92b62b2e393693e759cc2c4fec860c06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const MemProfiler::Bytes &amp;bytes)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1MemProfiler_1_1Bytes" kindref="compound">MemProfiler::Bytes</ref> &amp;</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MemProfiler.cpp" line="330" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MemProfiler.cpp" bodystart="331" bodyend="358"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac3c395681af12cfb805dd6eb440b68cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const MemProfiler::Builds &amp;builds)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1MemProfiler_1_1Builds" kindref="compound">MemProfiler::Builds</ref> &amp;</type>
          <declname>builds</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MemProfiler.cpp" line="360" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MemProfiler.cpp" bodystart="361" bodyend="367"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4b0d01afec5218e25096773af48821bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::InterpAddBox</definition>
        <argsstring>(MultiFabCopyDescriptor &amp;fabCopyDesc, BoxList *returnUnfilledBoxes, Vector&lt; FillBoxId &gt; &amp;returnedFillBoxIds, const Box &amp;subbox, MultiFabId faid1, MultiFabId faid2, Real t1, Real t2, Real t, int src_comp, int dest_comp, int num_comp, bool extrap)</argsstring>
        <name>InterpAddBox</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFabCopyDescriptor" kindref="compound">MultiFabCopyDescriptor</ref> &amp;</type>
          <declname>fabCopyDesc</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> *</type>
          <declname>returnUnfilledBoxes</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1FillBoxId" kindref="compound">FillBoxId</ref> &gt; &amp;</type>
          <declname>returnedFillBoxIds</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>subbox</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a270e267cbd0e472dd8297d46a9c76854" kindref="member">MultiFabId</ref></type>
          <declname>faid1</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a270e267cbd0e472dd8297d46a9c76854" kindref="member">MultiFabId</ref></type>
          <declname>faid2</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>t1</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>t2</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>t</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dest_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>extrap</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFCopyDescriptor.cpp" line="13" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFCopyDescriptor.cpp" bodystart="13" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aabdb646a3159210a31ec8dc806eaf7bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::InterpFillFab</definition>
        <argsstring>(MultiFabCopyDescriptor &amp;fabCopyDesc, const Vector&lt; FillBoxId &gt; &amp;fillBoxIds, MultiFabId faid1, MultiFabId faid2, FArrayBox &amp;dest, Real t1, Real t2, Real t, int src_comp, int dest_comp, int num_comp, bool extrap)</argsstring>
        <name>InterpFillFab</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFabCopyDescriptor" kindref="compound">MultiFabCopyDescriptor</ref> &amp;</type>
          <declname>fabCopyDesc</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1FillBoxId" kindref="compound">FillBoxId</ref> &gt; &amp;</type>
          <declname>fillBoxIds</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a270e267cbd0e472dd8297d46a9c76854" kindref="member">MultiFabId</ref></type>
          <declname>faid1</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a270e267cbd0e472dd8297d46a9c76854" kindref="member">MultiFabId</ref></type>
          <declname>faid2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>t1</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>t2</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>t</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dest_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>extrap</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFCopyDescriptor.cpp" line="77" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFCopyDescriptor.cpp" bodystart="77" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a89faf58cc9f92b14a4c334bcb8390966" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool amrex::TilingIfNotGPU</definition>
        <argsstring>() noexcept</argsstring>
        <name>TilingIfNotGPU</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" line="24" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" bodystart="24" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6a1aa0c151c5fe560ebb86c99194bfc3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::isMFIterSafe</definition>
        <argsstring>(const FabArrayBase &amp;x, const FabArrayBase &amp;y)</argsstring>
        <name>isMFIterSafe</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArrayBase" kindref="compound">FabArrayBase</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1FabArrayBase" kindref="compound">FabArrayBase</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Is it safe to have these two MultiFabs in the same MFiter? Ture means safe; false means maybe. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" line="228" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" bodystart="228" bodyend="231"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae566fb9632b7a75aed11ce0135cac4c0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1Arena" kindref="compound">Arena</ref> *</type>
        <definition>Arena* amrex::The_MFIter_Arena</definition>
        <argsstring>() noexcept</argsstring>
        <name>The_MFIter_Arena</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" line="233" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" bodystart="233" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad60aac176908ba51373d63ca49bef063" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::GccPlacaterMF</definition>
        <argsstring>()</argsstring>
        <name>GccPlacaterMF</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="688" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" bodystart="688" bodyend="694"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad64dcd62b16d9022d914f067d30d7918" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::average_node_to_cellcenter</definition>
        <argsstring>(MultiFab &amp;cc, int dcomp, const MultiFab &amp;nd, int scomp, int ncomp, int ngrow=0)</argsstring>
        <name>average_node_to_cellcenter</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>cc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>nd</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngrow</declname>
        </param>
        <briefdescription>
<para>Average nodal-based <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> onto cell-centered <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" line="58" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" bodystart="58" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a5ed08afe869d8095adf9b63e6b0f473b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::average_edge_to_cellcenter</definition>
        <argsstring>(MultiFab &amp;cc, int dcomp, const Vector&lt; const MultiFab *&gt; &amp;edge, int ngrow)</argsstring>
        <name>average_edge_to_cellcenter</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>cc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> * &gt; &amp;</type>
          <declname>edge</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngrow</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Average edge-based <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> onto cell-centered <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. This fills in ngrow ghost cells in the cell-centered <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. Both cell centered and edge centered MultiFabs need to have ngrow ghost values </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" line="77" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" bodystart="77" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a95f27241ad83b39ffc015be064f382e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::average_face_to_cellcenter</definition>
        <argsstring>(MultiFab &amp;cc, int dcomp, const Vector&lt; const MultiFab * &gt; &amp;fc, int ngrow=0)</argsstring>
        <name>average_face_to_cellcenter</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>cc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *&gt; &amp;</type>
          <declname>fc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngrow</declname>
        </param>
        <briefdescription>
<para>Average face-based <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> onto cell-centered <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" line="101" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" bodystart="101" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac72233bd672c06777ea5cc9eade959b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::average_face_to_cellcenter</definition>
        <argsstring>(MultiFab &amp;cc, const Vector&lt; const MultiFab *&gt; &amp;fc, const Geometry &amp;geom)</argsstring>
        <name>average_face_to_cellcenter</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>cc</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *&gt; &amp;</type>
          <declname>fc</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" line="109" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" bodystart="109" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8f698d44420a9a763d38668d63bf110e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::average_face_to_cellcenter</definition>
        <argsstring>(MultiFab &amp;cc, int dcomp, const Array&lt; const MultiFab *, AMREX_SPACEDIM &gt; &amp;fc, int ngrow)</argsstring>
        <name>average_face_to_cellcenter</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>cc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>fc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngrow</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" line="118" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" bodystart="118" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a5c1981b67416871bbb9ea30a9de5bbcf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::average_face_to_cellcenter</definition>
        <argsstring>(MultiFab &amp;cc, const Array&lt; const MultiFab *, AMREX_SPACEDIM &gt; &amp;fc, const Geometry &amp;geom)</argsstring>
        <name>average_face_to_cellcenter</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>cc</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>fc</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" line="149" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" bodystart="149" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aed6d9b873fcbb78c76c83c73aa39fb56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::average_cellcenter_to_face</definition>
        <argsstring>(const Vector&lt; MultiFab * &gt; &amp;fc, const MultiFab &amp;cc, const Geometry &amp;geom)</argsstring>
        <name>average_cellcenter_to_face</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *&gt; &amp;</type>
          <declname>fc</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>cc</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <briefdescription>
<para>Average cell-centered <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> onto face-based <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" line="184" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" bodystart="184" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a3661bd74499ec0a919b6633f7e5dc428" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::average_cellcenter_to_face</definition>
        <argsstring>(const Array&lt; MultiFab *, AMREX_SPACEDIM &gt; &amp;fc, const MultiFab &amp;cc, const Geometry &amp;geom)</argsstring>
        <name>average_cellcenter_to_face</name>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>fc</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>cc</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" line="192" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" bodystart="192" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a21e594569f8a9ba321155a5ecd7ce4ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::average_down</definition>
        <argsstring>(const MultiFab &amp;S_fine, MultiFab &amp;S_crse, const Geometry &amp;fgeom, const Geometry &amp;cgeom, int scomp, int ncomp, int rr)</argsstring>
        <name>average_down</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>S_fine</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>S_crse</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>fgeom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>cgeom</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>rr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" line="240" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" bodystart="240" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a62368c6c303e36dc51ded56d7881920e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::average_down</definition>
        <argsstring>(const MultiFab &amp;S_fine, MultiFab &amp;S_crse, const Geometry &amp;fgeom, const Geometry &amp;cgeom, int scomp, int ncomp, const IntVect &amp;ratio)</argsstring>
        <name>average_down</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>S_fine</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>S_crse</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>fine_geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>crse_geom</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Average fine cell-based <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> onto crse cell-centered <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> using volume-weighting. This routine DOES NOT assume that the crse BoxArray is a coarsened version of the fine BoxArray. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" line="247" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" bodystart="247" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a9b27497dc89f64ae78be824f2187e698" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::average_down</definition>
        <argsstring>(const MultiFab &amp;S_fine, MultiFab &amp;S_crse, int scomp, int ncomp, int rr)</argsstring>
        <name>average_down</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>S_fine</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>S_crse</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>rr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" line="307" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" bodystart="307" bodyend="310"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab67331acff75bf2840f409750b1ada66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::sum_fine_to_coarse</definition>
        <argsstring>(const MultiFab &amp;S_fine, MultiFab &amp;S_crse, int scomp, int ncomp, const IntVect &amp;ratio, const Geometry &amp;cgeom, const Geometry &amp;)</argsstring>
        <name>sum_fine_to_coarse</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>S_Fine</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>S_crse</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>cgeom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>fgeom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add a coarsened version of the data contained in the S_fine <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> to S_crse, including ghost cells. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" line="313" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" bodystart="313" bodyend="348"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad04ddc51f3c2757b7749e1a28985cb0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::average_down</definition>
        <argsstring>(const MultiFab &amp;S_fine, MultiFab &amp;S_crse, int scomp, int ncomp, const IntVect &amp;ratio)</argsstring>
        <name>average_down</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>S_fine</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>S_crse</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Average <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> onto crse <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> without volume weighting. This routine DOES NOT assume that the crse BoxArray is a coarsened version of the fine BoxArray. Work for both cell-centered and nodal MultiFabs. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" line="350" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" bodystart="350" bodyend="423"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8a610379c3e81725b1696a50804000cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::average_down_faces</definition>
        <argsstring>(const Vector&lt; const MultiFab * &gt; &amp;fine, const Vector&lt; MultiFab * &gt; &amp;crse, const IntVect &amp;ratio, int ngcrse=0)</argsstring>
        <name>average_down_faces</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *&gt; &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *&gt; &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngcrse</declname>
        </param>
        <briefdescription>
<para>Average fine face-based <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> onto crse face-based <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" line="427" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" bodystart="427" bodyend="436"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a283246db5c872aa74bbe3d3ba6e7af9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::average_down_faces</definition>
        <argsstring>(const Vector&lt; const MultiFab *&gt; &amp;fine, const Vector&lt; MultiFab *&gt; &amp;crse, int ratio, int ngcrse)</argsstring>
        <name>average_down_faces</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *&gt; &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *&gt; &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ratio</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngcrse</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" line="438" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" bodystart="438" bodyend="442"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a22a8042ae490c1c69750d292dc69ee59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::average_down_faces</definition>
        <argsstring>(const Array&lt; const MultiFab *, AMREX_SPACEDIM &gt; &amp;fine, const Array&lt; MultiFab *, AMREX_SPACEDIM &gt; &amp;crse, int ratio, int ngcrse)</argsstring>
        <name>average_down_faces</name>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ratio</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngcrse</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" line="444" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" bodystart="444" bodyend="449"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1afffa551617afa39c891c442f06298f38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::average_down_faces</definition>
        <argsstring>(const Array&lt; const MultiFab *, AMREX_SPACEDIM &gt; &amp;fine, const Array&lt; MultiFab *, AMREX_SPACEDIM &gt; &amp;crse, const IntVect &amp;ratio, int ngcrse)</argsstring>
        <name>average_down_faces</name>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngcrse</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" line="452" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" bodystart="452" bodyend="460"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1adfd1995843ee277516f6bdef42f44852" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::average_down_faces</definition>
        <argsstring>(const MultiFab &amp;fine, MultiFab &amp;crse, const IntVect &amp;ratio, int ngcrse)</argsstring>
        <name>average_down_faces</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngcrse</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This version does average down for one direction. It uses the <ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref> of MultiFabs to determine the direction. It is expected that one direction is nodal and the rest are cell-centered. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" line="462" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" bodystart="462" bodyend="502"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a00dec9d4448252ee121a4292eed6165a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::average_down_faces</definition>
        <argsstring>(const Array&lt; const MultiFab *, AMREX_SPACEDIM &gt; &amp;fine, const Array&lt; MultiFab *, AMREX_SPACEDIM &gt; &amp;crse, const IntVect &amp;ratio, const Geometry &amp;crse_geom)</argsstring>
        <name>average_down_faces</name>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>crse_geom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" line="504" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" bodystart="504" bodyend="512"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a55938a1244c5b26a1c67fbadf5928a62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::average_down_faces</definition>
        <argsstring>(const MultiFab &amp;fine, MultiFab &amp;crse, const IntVect &amp;ratio, const Geometry &amp;crse_geom)</argsstring>
        <name>average_down_faces</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>crse_geom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" line="514" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" bodystart="514" bodyend="521"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a84e55e433b2972354d98a0684f7f1394" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::average_down_edges</definition>
        <argsstring>(const Vector&lt; const MultiFab * &gt; &amp;fine, const Vector&lt; MultiFab * &gt; &amp;crse, const IntVect &amp;ratio, int ngcrse=0)</argsstring>
        <name>average_down_edges</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *&gt; &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *&gt; &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngcrse</declname>
        </param>
        <briefdescription>
<para>Average fine edge-based <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> onto crse edge-based <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>Average fine edge-based <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> onto crse edge-based <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. This routine assumes that the crse BoxArray is a coarsened version of the fine BoxArray. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" line="525" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" bodystart="525" bodyend="532"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a3d6739058267b9ba2aed9936247f49fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::average_down_edges</definition>
        <argsstring>(const Array&lt; const MultiFab *, AMREX_SPACEDIM &gt; &amp;fine, const Array&lt; MultiFab *, AMREX_SPACEDIM &gt; &amp;crse, const IntVect &amp;ratio, int ngcrse)</argsstring>
        <name>average_down_edges</name>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngcrse</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" line="534" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" bodystart="534" bodyend="542"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab744a797b85135257add34a49c96c734" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::average_down_edges</definition>
        <argsstring>(const MultiFab &amp;fine, MultiFab &amp;crse, const IntVect &amp;ratio, int ngcrse)</argsstring>
        <name>average_down_edges</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngcrse</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This version does average down for one direction. It uses the <ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref> of MultiFabs to determine the direction. It is expected that one direction is cell-centered and the rest are nodal. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" line="544" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" bodystart="544" bodyend="584"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af9853b376b9431740468fdf9e549553d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::print_state</definition>
        <argsstring>(const MultiFab &amp;mf, const IntVect &amp;cell, const int n=-1, const IntVect &amp;ng=IntVect::TheZeroVector())</argsstring>
        <name>print_state</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>cell</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ng</declname>
        </param>
        <briefdescription>
<para>Output state data for a single zone. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" line="586" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" bodystart="586" bodyend="589"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a78ee47545ca66e809f4f680e7513cbd5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::writeFabs</definition>
        <argsstring>(const MultiFab &amp;mf, const std::string &amp;name)</argsstring>
        <name>writeFabs</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Write each fab individually. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" line="591" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" bodystart="591" bodyend="594"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa9f903b417da5fb1d02ea65d0bbf8934" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::writeFabs</definition>
        <argsstring>(const MultiFab &amp;mf, int comp, int ncomp, const std::string &amp;name)</argsstring>
        <name>writeFabs</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" line="596" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" bodystart="596" bodyend="602"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6ca286511a003d2770dba9c37ab53c94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref></type>
        <definition>MultiFab amrex::ToMultiFab</definition>
        <argsstring>(const iMultiFab &amp;imf)</argsstring>
        <name>ToMultiFab</name>
        <param>
          <type>const <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &amp;</type>
          <declname>imf</declname>
        </param>
        <briefdescription>
<para>Convert <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> to <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" line="604" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" bodystart="604" bodyend="607"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae062fb7f904c1f39327797d8c3fea414" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; Long &gt; &gt;</type>
        <definition>FabArray&lt; BaseFab&lt; Long &gt; &gt; amrex::ToLongMultiFab</definition>
        <argsstring>(const iMultiFab &amp;imf)</argsstring>
        <name>ToLongMultiFab</name>
        <param>
          <type>const <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &amp;</type>
          <declname>imf</declname>
        </param>
        <briefdescription>
<para>Convert <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> to Long. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" line="609" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" bodystart="609" bodyend="612"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a3a431197f206b148529308a7796d5039" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &gt;</type>
        <definition>std::unique_ptr&lt; MultiFab &gt; amrex::get_slice_data</definition>
        <argsstring>(int dir, Real coord, const MultiFab &amp;cc, const Geometry &amp;geom, int start_comp, int ncomp, bool interpolate)</argsstring>
        <name>get_slice_data</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>coord</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>cc</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fstart</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>interpolate</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Extract a slice from the given cell-centered <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> at coordinate &quot;coord&quot; along direction &quot;dir&quot;. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" line="614" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" bodystart="614" bodyend="657"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af97d55742a96cb9e934e06c45ec22f03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref></type>
        <definition>iMultiFab amrex::makeFineMask</definition>
        <argsstring>(const BoxArray &amp;cba, const DistributionMapping &amp;cdm, const BoxArray &amp;fba, const IntVect &amp;ratio, int crse_value, int fine_value)</argsstring>
        <name>makeFineMask</name>
        <param>
          <type>const BoxArray &amp;</type>
          <declname>cba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>cdm</declname>
        </param>
        <param>
          <type>const BoxArray &amp;</type>
          <declname>fba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>crse_value</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fine_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" line="659" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" bodystart="659" bodyend="665"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a549567bbb4fc6d2e53d5a0c03fe62a81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FAB</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::makeFineMask_doit</definition>
        <argsstring>(FabArray&lt; FAB &gt; &amp;mask, const BoxArray &amp;fba, const IntVect &amp;ratio, Periodicity const &amp;period, typename FAB::value_type crse_value, typename FAB::value_type fine_value)</argsstring>
        <name>makeFineMask_doit</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type>const BoxArray &amp;</type>
          <declname>fba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> const &amp;</type>
          <declname>period</declname>
        </param>
        <param>
          <type>typename FAB::value_type</type>
          <declname>crse_value</declname>
        </param>
        <param>
          <type>typename FAB::value_type</type>
          <declname>fine_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" line="668" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" bodystart="668" bodyend="719"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1abe90237191ad363f7f9dd34c2ac0ebcb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref></type>
        <definition>iMultiFab amrex::makeFineMask</definition>
        <argsstring>(const BoxArray &amp;cba, const DistributionMapping &amp;cdm, const IntVect &amp;cnghost, const BoxArray &amp;fba, const IntVect &amp;ratio, Periodicity const &amp;period, int crse_value, int fine_value)</argsstring>
        <name>makeFineMask</name>
        <param>
          <type>const BoxArray &amp;</type>
          <declname>cba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>cdm</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>cnghost</declname>
        </param>
        <param>
          <type>const BoxArray &amp;</type>
          <declname>fba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> const &amp;</type>
          <declname>period</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>crse_value</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fine_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" line="721" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" bodystart="721" bodyend="728"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac54193c21e9f609ad488d3cb074dfeef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref></type>
        <definition>MultiFab amrex::makeFineMask</definition>
        <argsstring>(const BoxArray &amp;cba, const DistributionMapping &amp;cdm, const BoxArray &amp;fba, const IntVect &amp;ratio, Real crse_value, Real fine_value)</argsstring>
        <name>makeFineMask</name>
        <param>
          <type>const BoxArray &amp;</type>
          <declname>cba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>cdm</declname>
        </param>
        <param>
          <type>const BoxArray &amp;</type>
          <declname>fba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>crse_value</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>fine_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" line="730" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" bodystart="730" bodyend="737"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab36700aa1e60f78cbb544a7593de37af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::computeDivergence</definition>
        <argsstring>(MultiFab &amp;divu, const Array&lt; MultiFab const  *, AMREX_SPACEDIM &gt; &amp;umac, const Geometry &amp;geom)</argsstring>
        <name>computeDivergence</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>divu</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> const *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>umac</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <briefdescription>
<para>Computes divergence of face-data stored in the umac <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" line="739" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" bodystart="739" bodyend="789"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af1f7462a23b5cde85daacbd1d3a357f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::computeGradient</definition>
        <argsstring>(MultiFab &amp;grad, const Array&lt; MultiFab const  *, AMREX_SPACEDIM &gt; &amp;umac, const Geometry &amp;geom)</argsstring>
        <name>computeGradient</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>grad</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> const *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>umac</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <briefdescription>
<para>Computes gradient of face-data stored in the umac <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" line="791" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" bodystart="791" bodyend="838"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a48b0e0bc9bd17bdcba18aa237718737f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref></type>
        <definition>MultiFab amrex::periodicShift</definition>
        <argsstring>(MultiFab const  &amp;mf, IntVect const  &amp;offset, Periodicity const  &amp;period)</argsstring>
        <name>periodicShift</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> const &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>offset</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> const &amp;</type>
          <declname>period</declname>
        </param>
        <briefdescription>
<para>Periodic shift <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" line="840" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" bodystart="840" bodyend="862"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aff7bc26e4e82b323802d4b6d546101fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FAB</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::average_down_nodal</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;S_fine, FabArray&lt; FAB &gt; &amp;S_crse, const IntVect &amp;ratio, int ngcrse=0, bool mfiter_is_definitely_safe=false)</argsstring>
        <name>average_down_nodal</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>S_fine</declname>
          <defname>fine</defname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>S_crse</declname>
          <defname>crse</defname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngcrse</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>mfiter_is_definitely_safe</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Average fine node-based <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> onto crse node-centered <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>Average fine node-based <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> onto crse node-based <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. This routine assumes that the crse BoxArray is a coarsened version of the fine BoxArray. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" line="99" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" bodystart="274" bodyend="308"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a60886a6799fb7ae612bf30d74a493a26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FAB</type>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref></type>
        <definition>iMultiFab amrex::makeFineMask</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;cmf, const BoxArray &amp;fba, const IntVect &amp;ratio, int crse_value=0, int fine_value=1)</argsstring>
        <name>makeFineMask</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>cmf</declname>
        </param>
        <param>
          <type>const BoxArray &amp;</type>
          <declname>fba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>crse_value</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fine_value</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return an <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> that has the same BoxArray and <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> as the coarse <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> cmf. Cells covered by the coarsened fine grids are set to fine_value, whereas other cells are set to crse_value. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" line="149" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" bodystart="218" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a78142d53611f8627f6d68afd0779ef54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FAB</type>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref></type>
        <definition>iMultiFab amrex::makeFineMask</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;cmf, const BoxArray &amp;fba, const IntVect &amp;ratio, Periodicity const &amp;period, int crse_value, int fine_value)</argsstring>
        <name>makeFineMask</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>cmf</declname>
        </param>
        <param>
          <type>const BoxArray &amp;</type>
          <declname>fba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> const &amp;</type>
          <declname>period</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>crse_value</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fine_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" line="155" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" bodystart="227" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a478148eaeebd74ddc7956806c55fa2cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FAB</type>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref></type>
        <definition>iMultiFab amrex::makeFineMask</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;cmf, const FabArray&lt; FAB &gt; &amp;fmf, const IntVect &amp;cnghost, const IntVect &amp;ratio, Periodicity const &amp;period, int crse_value, int fine_value)</argsstring>
        <name>makeFineMask</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>cmf</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>fmf</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>cnghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> const &amp;</type>
          <declname>period</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>crse_value</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fine_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" line="161" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" bodystart="236" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af559f21584872566541db61cbacf7470" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FAB</type>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref></type>
        <definition>iMultiFab amrex::makeFineMask</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;cmf, const FabArray&lt; FAB &gt; &amp;fmf, const IntVect &amp;cnghost, const IntVect &amp;ratio, Periodicity const &amp;period, int crse_value, int fine_value, LayoutData&lt; int &gt; &amp;has_cf)</argsstring>
        <name>makeFineMask</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>cmf</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>fmf</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>cnghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> const &amp;</type>
          <declname>period</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>crse_value</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fine_value</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1LayoutData" kindref="compound">LayoutData</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>has_cf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" line="165" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" bodystart="253" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a24aa5b51c299dd1337df192681f47e0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T amrex::cast</definition>
        <argsstring>(U const &amp;mf_in)</argsstring>
        <name>cast</name>
        <param>
          <type>U const &amp;</type>
          <declname>mf_in</declname>
        </param>
        <briefdescription>
<para>example: auto mf = amrex::cast&lt;MultiFab&gt;(imf); </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" line="193" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" bodystart="193" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aefe3455e0263503ea6f600da93ea4025" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::amrex_avg_nd_to_cc</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;cc, Array4&lt; Real const &gt; const &amp;nd, int cccomp, int ndcomp, int ncomp) noexcept</argsstring>
        <name>amrex_avg_nd_to_cc</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>cc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>nd</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ndcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_1D_C.H" line="15" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_1D_C.H" bodystart="15" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4bc152cfe6f85455694ad8cf3c7ca5d4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::amrex_avg_eg_to_cc</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;cc, Array4&lt; Real const &gt; const &amp;Ex, int cccomp) noexcept</argsstring>
        <name>amrex_avg_eg_to_cc</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>cc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>Ex</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cccomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_1D_C.H" line="33" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_1D_C.H" bodystart="33" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6679485c2f83c3bbaa242a6afa9129df" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::amrex_avg_fc_to_cc</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;cc, Array4&lt; Real const &gt; const &amp;fx, int cccomp, GeometryData const &amp;gd) noexcept</argsstring>
        <name>amrex_avg_fc_to_cc</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>cc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cccomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GeometryData" kindref="compound">GeometryData</ref> const &amp;</type>
          <declname>gd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_1D_C.H" line="49" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_1D_C.H" bodystart="49" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad72df6e4acadca3f63d5bb874fed756a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::amrex_avg_cc_to_fc</definition>
        <argsstring>(Box const &amp;ndbx, Box const &amp;xbx, Array4&lt; Real &gt; const &amp;fx, Array4&lt; Real const &gt; const &amp;cc, GeometryData const &amp;gd) noexcept</argsstring>
        <name>amrex_avg_cc_to_fc</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>ndbx</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>xbx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>cc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GeometryData" kindref="compound">GeometryData</ref> const &amp;</type>
          <declname>gd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_1D_C.H" line="102" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_1D_C.H" bodystart="102" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6907a36168f2d29c3d0effe080475e4c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::amrex_avgdown_faces</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;crse, Array4&lt; Real const &gt; const &amp;fine, int ccomp, int fcomp, int ncomp, IntVect const &amp;ratio, int) noexcept</argsstring>
        <name>amrex_avgdown_faces</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>idir</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_1D_C.H" line="158" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_1D_C.H" bodystart="158" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae6063800bfa413e4eb701958698bc31c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::amrex_avgdown_edges</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;crse, Array4&lt; Real const &gt; const &amp;fine, int ccomp, int fcomp, int ncomp, IntVect const &amp;ratio, int) noexcept</argsstring>
        <name>amrex_avgdown_edges</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>idir</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_1D_C.H" line="177" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_1D_C.H" bodystart="177" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa5c1176cf4bdd9ee575caf6b25372228" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::amrex_avgdown</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;crse, Array4&lt; Real const &gt; const &amp;fine, int ccomp, int fcomp, int ncomp, IntVect const &amp;ratio) noexcept</argsstring>
        <name>amrex_avgdown</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_1D_C.H" line="201" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_1D_C.H" bodystart="201" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a77058f7bc960b893ac7b055b911709d9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::amrex_avgdown_with_vol</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;crse, Array4&lt; Real const &gt; const &amp;fine, Array4&lt; Real const &gt; const &amp;fv, int ccomp, int fcomp, int ncomp, IntVect const &amp;ratio) noexcept</argsstring>
        <name>amrex_avgdown_with_vol</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fv</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_1D_C.H" line="226" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_1D_C.H" bodystart="226" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a1c56b15734eecd9f1c6f248e812f4851" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::amrex_avgdown_nodes</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; T &gt; const &amp;crse, Array4&lt; T const &gt; const &amp;fine, int ccomp, int fcomp, int ncomp, IntVect const &amp;ratio) noexcept</argsstring>
        <name>amrex_avgdown_nodes</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_1D_C.H" line="253" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_1D_C.H" bodystart="253" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aab340fe16ae43377f8c6951777d3c6e8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::amrex_compute_divergence</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;divu, Array4&lt; Real const &gt; const &amp;u, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv) noexcept</argsstring>
        <name>amrex_compute_divergence</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>divu</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_1D_C.H" line="273" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_1D_C.H" bodystart="273" bodyend="287"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1afa6d2d0c832d99397a5807b2a955d64a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::amrex_compute_gradient</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;grad, Array4&lt; Real const &gt; const &amp;u, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv) noexcept</argsstring>
        <name>amrex_compute_gradient</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>grad</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_1D_C.H" line="291" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_1D_C.H" bodystart="291" bodyend="303"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a54f35f1d9c155eb7850f3f1f01843cd9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::amrex_avg_eg_to_cc</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;cc, Array4&lt; Real const &gt; const &amp;Ex, Array4&lt; Real const &gt; const &amp;Ey, int cccomp) noexcept</argsstring>
        <name>amrex_avg_eg_to_cc</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>cc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>Ex</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>Ey</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cccomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_2D_C.H" line="34" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_2D_C.H" bodystart="34" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a90f15312e705b6b8058e5779c593bc4d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::amrex_avg_fc_to_cc</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;cc, Array4&lt; Real const &gt; const &amp;fx, Array4&lt; Real const &gt; const &amp;fy, int cccomp) noexcept</argsstring>
        <name>amrex_avg_fc_to_cc</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>cc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cccomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_2D_C.H" line="53" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_2D_C.H" bodystart="53" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1abe41df62629683c189e58d89cce683d1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::amrex_avg_cc_to_fc</definition>
        <argsstring>(Box const &amp;ndbx, Box const &amp;xbx, Box const &amp;ybx, Array4&lt; Real &gt; const &amp;fx, Array4&lt; Real &gt; const &amp;fy, Array4&lt; Real const &gt; const &amp;cc) noexcept</argsstring>
        <name>amrex_avg_cc_to_fc</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>ndbx</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>xbx</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>ybx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>cc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_2D_C.H" line="72" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_2D_C.H" bodystart="72" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a7bc9df03a7f950928f84f200ea52dd33" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::amrex_compute_divergence</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;divu, Array4&lt; Real const &gt; const &amp;u, Array4&lt; Real const &gt; const &amp;v, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv) noexcept</argsstring>
        <name>amrex_compute_divergence</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>divu</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_2D_C.H" line="282" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_2D_C.H" bodystart="282" bodyend="301"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab0e6c8420ed7a23a8f6e31d1d2d728c9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::amrex_compute_gradient</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;grad, Array4&lt; Real const &gt; const &amp;u, Array4&lt; Real const &gt; const &amp;v, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv) noexcept</argsstring>
        <name>amrex_compute_gradient</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>grad</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_2D_C.H" line="305" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_2D_C.H" bodystart="305" bodyend="322"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4979a24456c6009e315e62d0f0d1ee66" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::amrex_compute_convective_difference</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; amrex::Real &gt; const &amp;diff, Array4&lt; Real const &gt; const &amp;u_face, Array4&lt; Real const &gt; const &amp;v_face, Array4&lt; Real const &gt; const &amp;s_on_x_face, Array4&lt; Real const &gt; const &amp;s_on_y_face, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv) noexcept</argsstring>
        <name>amrex_compute_convective_difference</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; amrex::Real &gt; const &amp;</type>
          <declname>diff</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>u_face</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>v_face</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>s_on_x_face</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>s_on_y_face</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_2D_C.H" line="326" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_2D_C.H" bodystart="326" bodyend="349"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a5d1d11eba0d4b53de1431c6ad3d060be" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::amrex_compute_divergence_rz</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;divu, Array4&lt; Real const &gt; const &amp;u, Array4&lt; Real const &gt; const &amp;v, Array4&lt; Real const &gt; const &amp;ax, Array4&lt; Real const &gt; const &amp;ay, Array4&lt; Real const &gt; const &amp;vol) noexcept</argsstring>
        <name>amrex_compute_divergence_rz</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>divu</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ax</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ay</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_2D_C.H" line="353" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_2D_C.H" bodystart="353" bodyend="373"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a09f44c9c74cb08a19432aa259ebace65" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::amrex_compute_gradient_rz</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;grad, Array4&lt; Real const &gt; const &amp;u, Array4&lt; Real const &gt; const &amp;v, Array4&lt; Real const &gt; const &amp;ax, Array4&lt; Real const &gt; const &amp;ay, Array4&lt; Real const &gt; const &amp;vol) noexcept</argsstring>
        <name>amrex_compute_gradient_rz</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>grad</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ax</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ay</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_2D_C.H" line="377" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_2D_C.H" bodystart="377" bodyend="394"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a91fa2e92054d79708750649b8ad75660" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::amrex_avg_eg_to_cc</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;cc, Array4&lt; Real const &gt; const &amp;Ex, Array4&lt; Real const &gt; const &amp;Ey, Array4&lt; Real const &gt; const &amp;Ez, int cccomp) noexcept</argsstring>
        <name>amrex_avg_eg_to_cc</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>cc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>Ex</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>Ey</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>Ez</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cccomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_3D_C.H" line="37" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_3D_C.H" bodystart="37" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad4fc3bc4303c6e4bef527fa48210589b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::amrex_avg_fc_to_cc</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;cc, Array4&lt; Real const &gt; const &amp;fx, Array4&lt; Real const &gt; const &amp;fy, Array4&lt; Real const &gt; const &amp;fz, int cccomp) noexcept</argsstring>
        <name>amrex_avg_fc_to_cc</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>cc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fz</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cccomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_3D_C.H" line="59" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_3D_C.H" bodystart="59" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a967ad2a866a2e8d27144e36d62059a6e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::amrex_avg_cc_to_fc</definition>
        <argsstring>(Box const &amp;ndbx, Box const &amp;xbx, Box const &amp;ybx, Box const &amp;zbx, Array4&lt; Real &gt; const &amp;fx, Array4&lt; Real &gt; const &amp;fy, Array4&lt; Real &gt; const &amp;fz, Array4&lt; Real const &gt; const &amp;cc) noexcept</argsstring>
        <name>amrex_avg_cc_to_fc</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>ndbx</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>xbx</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>ybx</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>zbx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>cc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_3D_C.H" line="81" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_3D_C.H" bodystart="81" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6f8556f4e163951fd7c4aa1debf4435e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::amrex_compute_divergence</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;divu, Array4&lt; Real const &gt; const &amp;u, Array4&lt; Real const &gt; const &amp;v, Array4&lt; Real const &gt; const &amp;w, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv) noexcept</argsstring>
        <name>amrex_compute_divergence</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>divu</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>w</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_3D_C.H" line="369" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_3D_C.H" bodystart="369" bodyend="393"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a1884e8cc3ccdbb7eb0608221b4833133" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::amrex_compute_gradient</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;grad, Array4&lt; Real const &gt; const &amp;u, Array4&lt; Real const &gt; const &amp;v, Array4&lt; Real const &gt; const &amp;w, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv) noexcept</argsstring>
        <name>amrex_compute_gradient</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>grad</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>w</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_3D_C.H" line="397" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_3D_C.H" bodystart="397" bodyend="419"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6b6af662717df11ef0cc1122f068e809" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::amrex_compute_convective_difference</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;diff, Array4&lt; Real const &gt; const &amp;u_face, Array4&lt; Real const &gt; const &amp;v_face, Array4&lt; Real const &gt; const &amp;w_face, Array4&lt; Real const &gt; const &amp;s_on_x_face, Array4&lt; Real const &gt; const &amp;s_on_y_face, Array4&lt; Real const &gt; const &amp;s_on_z_face, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv) noexcept</argsstring>
        <name>amrex_compute_convective_difference</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>diff</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>u_face</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>v_face</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>w_face</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>s_on_x_face</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>s_on_y_face</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>s_on_z_face</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_3D_C.H" line="423" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_3D_C.H" bodystart="423" bodyend="453"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a02764a19b02ad5aa59766eaba8cde224" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::amrex_fill_slice_interp</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; slice, Array4&lt; Real const &gt; const &amp;full, int scomp, int fcomp, int ncomp, int dir, Real coord, GeometryData const &amp;gd) noexcept</argsstring>
        <name>amrex_fill_slice_interp</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt;</type>
          <declname>slice</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>full</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>coord</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GeometryData" kindref="compound">GeometryData</ref> const &amp;</type>
          <declname>gd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_nd_C.H" line="15" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_nd_C.H" bodystart="15" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac38f92b345723f71defea15e208ee644" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Orientation &amp;o)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Orientation" kindref="compound">Orientation</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>Write to an ostream in ASCII format. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.cpp" line="9" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.cpp" bodystart="10" bodyend="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a9a0606a9b1a287b48d02aaa194e58c90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::istream &amp;</type>
        <definition>std::istream&amp; amrex::operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;is, Orientation &amp;o)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Orientation" kindref="compound">Orientation</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.cpp" line="25" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.cpp" bodystart="25" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a99b5e66ea694e5ca5a50ee2c335e8678" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const ParmParse::PP_entry &amp;pp)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1ParmParse_1_1PP__entry" kindref="compound">ParmParse::PP_entry</ref> &amp;</type>
          <declname>pp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParmParse.cpp" line="113" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParmParse.cpp" bodystart="114" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aebd29bf8d5456e97aae77603a41a032f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool amrex::unused_table_entries_q</definition>
        <argsstring>(const ParmParse::Table &amp;table)</argsstring>
        <name>unused_table_entries_q</name>
        <param>
          <type>const <ref refid="classamrex_1_1ParmParse_1a328b966e328a476f04a86c758c9bc6c1" kindref="member">ParmParse::Table</ref> &amp;</type>
          <declname>table</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParmParse.cpp" line="1017" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParmParse.cpp" bodystart="1017" bodyend="1038"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8975f518b8ac91d8cc884e26a18d7849" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::finalize_table</definition>
        <argsstring>(const std::string &amp;pfx, const ParmParse::Table &amp;table)</argsstring>
        <name>finalize_table</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>pfx</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1ParmParse_1a328b966e328a476f04a86c758c9bc6c1" kindref="member">ParmParse::Table</ref> &amp;</type>
          <declname>table</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParmParse.cpp" line="1042" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParmParse.cpp" bodystart="1042" bodyend="1066"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a0035099661e1f92bc5de9ca2b58c0384" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::setFileName</definition>
        <argsstring>()</argsstring>
        <name>setFileName</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_parstream.cpp" line="92" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_parstream.cpp" bodystart="92" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4355fba810ff159e931e6b35e3d0dd59" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::openFile</definition>
        <argsstring>()</argsstring>
        <name>openFile</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_parstream.cpp" line="98" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_parstream.cpp" bodystart="98" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a45701cae6632ec65a5eebdecc587c780" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; amrex::pout</definition>
        <argsstring>()</argsstring>
        <name>pout</name>
        <briefdescription>
<para>the stream that all output except error msgs should use </para>        </briefdescription>
        <detaileddescription>
<para>Use this in place of std::cout for program output.</para><para>In serial this is the standard output, in parallel it is a different file on each proc (see <ref refid="namespaceamrex_1a76884405b2dc4cd3167652aa79be5606" kindref="member">setPoutBaseName()</ref>).</para><para>Can be used to replace std::cout. In serial this just returns std::cout. In parallel, this creates a separate file for each proc called &lt;basename&gt;.n where n is the procID and &lt;basename&gt; defaults to &quot;pout&quot; but can be set by calling <ref refid="namespaceamrex_1a76884405b2dc4cd3167652aa79be5606" kindref="member">setPoutBaseName()</ref>. Output is then directed to these files. This keeps the output from different processors from getting all jumbled up. If you want fewer files, you can use <ref refid="classamrex_1_1ParmParse" kindref="compound">ParmParse</ref> parameter amrex.pout_int=nproc and it will only output every nproc processors pout.n files (where nnproc == 0). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_parstream.cpp" line="111" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_parstream.cpp" bodystart="111" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a76884405b2dc4cd3167652aa79be5606" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::setPoutBaseName</definition>
        <argsstring>(const std::string &amp;a_Name)</argsstring>
        <name>setPoutBaseName</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>a_Name</declname>
        </param>
        <briefdescription>
<para>Set the base name for the parallel output files used by <ref refid="namespaceamrex_1a45701cae6632ec65a5eebdecc587c780" kindref="member">pout()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>Changes the base part of the filename for <ref refid="namespaceamrex_1a45701cae6632ec65a5eebdecc587c780" kindref="member">pout()</ref> files.</para><para>If the file has already been used and this is a different name, close the current file and open a new one.</para><para>When in parallel, changes the base name of the <ref refid="namespaceamrex_1a45701cae6632ec65a5eebdecc587c780" kindref="member">pout()</ref> files. If <ref refid="namespaceamrex_1a45701cae6632ec65a5eebdecc587c780" kindref="member">pout()</ref> has already been called, it closes the current output file and opens a new one (unless the name is the same, in which case it does nothing). In serial, ignores the argument and does nothing. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_parstream.cpp" line="157" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_parstream.cpp" bodystart="157" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a0b6b28892d1b7c4a6845bcf08ba7a461" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string &amp; amrex::poutFileName</definition>
        <argsstring>()</argsstring>
        <name>poutFileName</name>
        <briefdescription>
<para>return the current filename as used by <ref refid="namespaceamrex_1a45701cae6632ec65a5eebdecc587c780" kindref="member">pout()</ref> </para>        </briefdescription>
        <detaileddescription>
<para>Accesses the filename for the local <ref refid="namespaceamrex_1a45701cae6632ec65a5eebdecc587c780" kindref="member">pout()</ref> file.</para><para>in serial, just return the string &quot;cout&quot;; abort if MPI is not initialized.</para><para>Returns the name used for the local <ref refid="namespaceamrex_1a45701cae6632ec65a5eebdecc587c780" kindref="member">pout()</ref> file. In parallel this is &quot;\&lt;pout_basename\&gt;.\&lt;procID\&gt;&quot;, where &lt;pout_basename&gt; defaults to &quot;pout&quot; and can be modified by calling <ref refid="namespaceamrex_1a76884405b2dc4cd3167652aa79be5606" kindref="member">setPoutBaseName()</ref>, and &lt;procID&gt; is the local proc number. In serial, this always returns the string &quot;cout&quot;. It is an error (exit code 111) to call this in parallel before MPI_Initialize(). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_parstream.cpp" line="179" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_parstream.cpp" bodystart="179" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a3b8c7b9108d9ccbc108689fb9b8b2a7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::Partition</definition>
        <argsstring>(T *data, int beg, int end, F &amp;&amp;f)</argsstring>
        <name>Partition</name>
        <param>
          <type>T *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>beg</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>end</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>A wrapper around std::partition. </para>        </briefdescription>
        <detaileddescription>
<para>After calling this, all the items for which the predicate is true will be before the items for which the predicate is false in the input array.</para><para>This version is not stable, if you want that behavior use <ref refid="namespaceamrex_1a57310fe9971a6396f436f596efa45226" kindref="member">amrex::StablePartition</ref> instead.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>type of the data to be partitioned. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>type of the predicate function.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the data to be partitoned </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>beg</parametername>
</parameternamelist>
<parameterdescription>
<para>index at which to start </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>index at which to stop (exclusive) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>predicate function that returns 1 or 0 for each input</para></parameterdescription>
</parameteritem>
</parameterlist>
Returns the index of the first element for which f is 0. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Partition.H" line="252" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Partition.H" bodystart="252" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a1214d3602cac3f99cebc60c951dbb938" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::Partition</definition>
        <argsstring>(T *data, int n, F &amp;&amp;f)</argsstring>
        <name>Partition</name>
        <param>
          <type>T *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>A wrapper around std::partition. </para>        </briefdescription>
        <detaileddescription>
<para>After calling this, all the items for which the predicate is true will be before the items for which the predicate is false in the input array.</para><para>This version is not stable, if you want that behavior use <ref refid="namespaceamrex_1a57310fe9971a6396f436f596efa45226" kindref="member">amrex::StablePartition</ref> instead.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>type of the data to be partitioned. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>type of the predicate function.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the data to be partitoned </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>N</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of elements in the array </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>predicate function that returns 1 or 0 for each input</para></parameterdescription>
</parameteritem>
</parameterlist>
Returns the index of the first element for which f is 0. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Partition.H" line="278" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Partition.H" bodystart="278" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae3a47d7e7e8f7a66ddf15cdd606dbb8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::Partition</definition>
        <argsstring>(Gpu::DeviceVector&lt; T &gt; &amp;v, F &amp;&amp;f)</argsstring>
        <name>Partition</name>
        <param>
          <type><ref refid="namespaceamrex_1_1Gpu_1aa82b32772de552834254d9d74c6da13e" kindref="member">Gpu::DeviceVector</ref>&lt; T &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>A wrapper around std::partition. </para>        </briefdescription>
        <detaileddescription>
<para>After calling this, all the items for which the predicate is true will be before the items for which the predicate is false in the input array.</para><para>This version is not stable, if you want that behavior use <ref refid="namespaceamrex_1a57310fe9971a6396f436f596efa45226" kindref="member">amrex::StablePartition</ref> instead.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>type of the data to be partitioned. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>type of the predicate function.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="namespaceamrex_1_1Gpu_1aa82b32772de552834254d9d74c6da13e" kindref="member">Gpu::DeviceVector</ref> with the data to be partitioned. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>predicate function that returns 1 or 0 for each input</para></parameterdescription>
</parameteritem>
</parameterlist>
Returns the index of the first element for which f is 0. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Partition.H" line="302" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Partition.H" bodystart="302" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a57310fe9971a6396f436f596efa45226" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::StablePartition</definition>
        <argsstring>(T *data, int beg, int end, F &amp;&amp;f)</argsstring>
        <name>StablePartition</name>
        <param>
          <type>T *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>beg</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>end</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>A wrapper around std::stable_partition. </para>        </briefdescription>
        <detaileddescription>
<para>After calling this, all the items for which the predicate is true will be before the items for which the predicate is false in the input array.</para><para>This version is stable, meaning that, within each side of the resulting array, order is maintained - if element i was before element j in the input, then it will also be before j in the output. If you don&apos;t care about this property, use <ref refid="namespaceamrex_1a3b8c7b9108d9ccbc108689fb9b8b2a7e" kindref="member">amrex::Partition</ref> instead.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>type of the data to be partitioned. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>type of the predicate function.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the data to be partitoned </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>beg</parametername>
</parameternamelist>
<parameterdescription>
<para>index at which to start </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>index at which to stop (exclusive) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>predicate function that returns 1 or 0 for each input</para></parameterdescription>
</parameteritem>
</parameterlist>
Returns the index of the first element for which f is 0. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Partition.H" line="331" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Partition.H" bodystart="331" bodyend="335"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab4fdc897c184681028ce35c12fead8c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::StablePartition</definition>
        <argsstring>(T *data, int n, F &amp;&amp;f)</argsstring>
        <name>StablePartition</name>
        <param>
          <type>T *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>A wrapper around std::stable_partition. </para>        </briefdescription>
        <detaileddescription>
<para>After calling this, all the items for which the predicate is true will be before the items for which the predicate is false in the input array.</para><para>This version is stable, meaning that, within each side of the resulting array, order is maintained - if element i was before element j in the input, then it will also be before j in the output. If you don&apos;t care about this property, use <ref refid="namespaceamrex_1a3b8c7b9108d9ccbc108689fb9b8b2a7e" kindref="member">amrex::Partition</ref> instead.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>type of the data to be partitioned. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>type of the predicate function.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the data to be partitoned </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>N</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of elements in the array </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>predicate function that returns 1 or 0 for each input</para></parameterdescription>
</parameteritem>
</parameterlist>
Returns the index of the first element for which f is 0. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Partition.H" line="359" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Partition.H" bodystart="359" bodyend="362"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a52a83682c1d3c6b56f1fba2bbaaed439" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::StablePartition</definition>
        <argsstring>(Gpu::DeviceVector&lt; T &gt; &amp;v, F &amp;&amp;f)</argsstring>
        <name>StablePartition</name>
        <param>
          <type><ref refid="namespaceamrex_1_1Gpu_1aa82b32772de552834254d9d74c6da13e" kindref="member">Gpu::DeviceVector</ref>&lt; T &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>A wrapper around std::stable_partition. </para>        </briefdescription>
        <detaileddescription>
<para>After calling this, all the items for which the predicate is true will be before the items for which the predicate is false in the input array.</para><para>This version is stable, meaning that, within each side of the resulting array, order is maintained - if element i was before element j in the input, then it will also be before j in the output. If you don&apos;t care about this property, use <ref refid="namespaceamrex_1a3b8c7b9108d9ccbc108689fb9b8b2a7e" kindref="member">amrex::Partition</ref> instead.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>type of the data to be partitioned. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>type of the predicate function.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="namespaceamrex_1_1Gpu_1aa82b32772de552834254d9d74c6da13e" kindref="member">Gpu::DeviceVector</ref> with the data to be partitioned. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>predicate function that returns 1 or 0 for each input</para></parameterdescription>
</parameteritem>
</parameterlist>
Returns the index of the first element for which f is 0. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Partition.H" line="385" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Partition.H" bodystart="385" bodyend="389"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6e1c541c50331b9a3c005b80b4503f85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string amrex::LevelPath</definition>
        <argsstring>(int level, const std::string &amp;levelPrefix=&quot;Level_&quot;)</argsstring>
        <name>LevelPath</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>level</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>levelPrefix</declname>
        </param>
        <briefdescription>
<para>return the name of the level directory, e.g., Level_5 </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PlotFileUtil.cpp" line="26" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PlotFileUtil.cpp" bodystart="26" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab4ba0c733501dc74a5d254dac0bfc47d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string amrex::MultiFabHeaderPath</definition>
        <argsstring>(int level, const std::string &amp;levelPrefix=&quot;Level_&quot;, const std::string &amp;mfPrefix=&quot;Cell&quot;)</argsstring>
        <name>MultiFabHeaderPath</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>level</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>levelPrefix</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>mfPrefix</declname>
        </param>
        <briefdescription>
<para>return the path of the multifab to write to the header, e.g., Level_5/Cell </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PlotFileUtil.cpp" line="31" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PlotFileUtil.cpp" bodystart="31" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a438b71d250fb65fd385716c745be94ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string amrex::LevelFullPath</definition>
        <argsstring>(int level, const std::string &amp;plotfilename, const std::string &amp;levelPrefix=&quot;Level_&quot;)</argsstring>
        <name>LevelFullPath</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>level</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>plotfilename</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>levelPrefix</declname>
        </param>
        <briefdescription>
<para>return the full path of the level directory, e.g., plt00005/Level_5 </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PlotFileUtil.cpp" line="38" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PlotFileUtil.cpp" bodystart="38" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a81e8d2ba5c7abaf7b2ca9bd2f43d5fb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string amrex::MultiFabFileFullPrefix</definition>
        <argsstring>(int level, const std::string &amp;plotfilename, const std::string &amp;levelPrefix=&quot;Level_&quot;, const std::string &amp;mfPrefix=&quot;Cell&quot;)</argsstring>
        <name>MultiFabFileFullPrefix</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>level</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>plotfilename</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>levelPrefix</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>mfPrefix</declname>
        </param>
        <briefdescription>
<para>return the full path multifab prefix, e.g., plt00005/Level_5/Cell </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PlotFileUtil.cpp" line="50" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PlotFileUtil.cpp" bodystart="50" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa099c9a81b678f94bc075120f85f0df2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::PreBuildDirectorHierarchy</definition>
        <argsstring>(const std::string &amp;dirName, const std::string &amp;subDirPrefix, int nSubDirs, bool callBarrier)</argsstring>
        <name>PreBuildDirectorHierarchy</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>dirName</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>subDirPrefix</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nSubDirs</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>callBarrier</declname>
        </param>
        <briefdescription>
<para>prebuild a hierarchy of directories dirName is built first. if dirName exists, it is renamed. then build dirName/subDirPrefix_0 .. dirName/subDirPrefix_nSubDirs-1 if callBarrier is true, call <ref refid="namespaceamrex_1_1ParallelDescriptor_1ac0861548eabcd3f4b4c72a8826f83f8e" kindref="member">ParallelDescriptor::Barrier()</ref> after all directories are built <ref refid="namespaceamrex_1_1ParallelDescriptor_1ac7fb3467af4aabf15e61cb9c27e916d9" kindref="member">ParallelDescriptor::IOProcessor()</ref> creates the directories </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>&amp;dirName</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&amp;subDirPrefix</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nSubDirs</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callBarrier</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PlotFileUtil.cpp" line="65" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PlotFileUtil.cpp" bodystart="65" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aeaa559cd77a4c889c84b144f59a6e35c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::WriteGenericPlotfileHeader</definition>
        <argsstring>(std::ostream &amp;HeaderFile, int nlevels, const Vector&lt; BoxArray &gt; &amp;bArray, const Vector&lt; std::string &gt; &amp;varnames, const Vector&lt; Geometry &gt; &amp;geom, Real time, const Vector&lt; int &gt; &amp;level_steps, const Vector&lt; IntVect &gt; &amp;ref_ratio, const std::string &amp;versionName, const std::string &amp;levelPrefix, const std::string &amp;mfPrefix)</argsstring>
        <name>WriteGenericPlotfileHeader</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>HeaderFile</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nlevels</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; BoxArray &gt; &amp;</type>
          <declname>bArray</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>varnames</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>level_steps</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &gt; &amp;</type>
          <declname>ref_ratio</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>versionName</declname>
          <defval>&quot;HyperCLaw-V1.1&quot;</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>levelPrefix</declname>
          <defval>&quot;Level_&quot;</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>mfPrefix</declname>
          <defval>&quot;Cell&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>write a generic plot file header to the file plotfilename/Header the plotfilename directory must already exist </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PlotFileUtil.cpp" line="82" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PlotFileUtil.cpp" bodystart="82" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aefb0e93330fe071781a19c8598b77962" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::WriteMultiLevelPlotfile</definition>
        <argsstring>(const std::string &amp;plotfilename, int nlevels, const Vector&lt; const MultiFab *&gt; &amp;mf, const Vector&lt; std::string &gt; &amp;varnames, const Vector&lt; Geometry &gt; &amp;geom, Real time, const Vector&lt; int &gt; &amp;level_steps, const Vector&lt; IntVect &gt; &amp;ref_ratio, const std::string &amp;versionName, const std::string &amp;levelPrefix, const std::string &amp;mfPrefix, const Vector&lt; std::string &gt; &amp;extra_dirs)</argsstring>
        <name>WriteMultiLevelPlotfile</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>plotfilename</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nlevels</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *&gt; &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>varnames</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>level_steps</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &gt; &amp;</type>
          <declname>ref_ratio</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>versionName</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>levelPrefix</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>mfPrefix</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>extra_dirs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PlotFileUtil.cpp" line="168" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PlotFileUtil.cpp" bodystart="168" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a87ec6f46642e5c4b2b89b545500be320" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::WriteMLMF</definition>
        <argsstring>(const std::string &amp;plotfilename, const Vector&lt; const MultiFab * &gt; &amp;mf, const Vector&lt; Geometry &gt; &amp;geom)</argsstring>
        <name>WriteMLMF</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>plotfilename</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> * &gt; &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>geom</declname>
        </param>
        <briefdescription>
<para>write a plotfile to disk given: -plotfile name -vector of MultiFabs -vector of Geometrys variable names are written as &quot;Var0&quot;, &quot;Var1&quot;, etc. refinement ratio is computed from the <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> vector &quot;time&quot; and &quot;level_steps&quot; are set to zero </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>&amp;plotfilename</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mf</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&amp;geom</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PlotFileUtil.cpp" line="257" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PlotFileUtil.cpp" bodystart="257" bodyend="289"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a0bf37d82572e8acd9b682955d0344773" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::WriteMultiLevelPlotfileHeaders</definition>
        <argsstring>(const std::string &amp;plotfilename, int nlevels, const Vector&lt; const MultiFab *&gt; &amp;mf, const Vector&lt; std::string &gt; &amp;varnames, const Vector&lt; Geometry &gt; &amp;geom, Real time, const Vector&lt; int &gt; &amp;level_steps, const Vector&lt; IntVect &gt; &amp;ref_ratio, const std::string &amp;versionName, const std::string &amp;levelPrefix, const std::string &amp;mfPrefix, const Vector&lt; std::string &gt; &amp;extra_dirs)</argsstring>
        <name>WriteMultiLevelPlotfileHeaders</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>plotfilename</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nlevels</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *&gt; &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>varnames</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>level_steps</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &gt; &amp;</type>
          <declname>ref_ratio</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>versionName</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>levelPrefix</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>mfPrefix</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>extra_dirs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PlotFileUtil.cpp" line="293" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PlotFileUtil.cpp" bodystart="293" bodyend="345"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa5343920d9b5ee1307ca697274eca84a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::WriteSingleLevelPlotfile</definition>
        <argsstring>(const std::string &amp;plotfilename, const MultiFab &amp;mf, const Vector&lt; std::string &gt; &amp;varnames, const Geometry &amp;geom, Real time, int level_step, const std::string &amp;versionName, const std::string &amp;levelPrefix, const std::string &amp;mfPrefix, const Vector&lt; std::string &gt; &amp;extra_dirs)</argsstring>
        <name>WriteSingleLevelPlotfile</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>plotfilename</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>varnames</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>level_step</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>versionName</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>levelPrefix</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>mfPrefix</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>extra_dirs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PlotFileUtil.cpp" line="348" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PlotFileUtil.cpp" bodystart="348" bodyend="363"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6acf31bfdb80131caf08849fe42df37a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, Array&lt; T, AMREX_SPACEDIM &gt; const &amp;a)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; T, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Print.H" line="17" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Print.H" bodystart="17" bodyend="23"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1abc89efc14a5c343a7ec2f619713676b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename S</type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const std::pair&lt; T, S &gt; &amp;v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const std::pair&lt; T, S &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Print.H" line="26" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Print.H" bodystart="26" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a3ba29f87f49dfb416b85b65c8b5cd9c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Real</type>
        <definition>amrex::Real amrex::Random</definition>
        <argsstring>()</argsstring>
        <name>Random</name>
        <briefdescription>
<para>Generate a psuedo-random double from uniform distribution. </para>        </briefdescription>
        <detaileddescription>
<para>Generates one pseudorandom real number (double) from a uniform distribution between 0.0 and 1.0 (0.0 included, 1.0 excluded) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Random.H" line="24" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Random.cpp" bodystart="181" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a65fcc9ad910569bc247b330997d5ed52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> Real</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Real amrex::Random</definition>
        <argsstring>(RandomEngine const &amp;random_engine)</argsstring>
        <name>Random</name>
        <param>
          <type><ref refid="structamrex_1_1RandomEngine" kindref="compound">RandomEngine</ref> const &amp;</type>
          <declname>random_engine</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Random.H" line="28" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Random.H" bodystart="28" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6a4ed5dc1eeb3e5b409eb8975c9e829b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::RandomNormal</definition>
        <argsstring>(Real mean, Real stddev)</argsstring>
        <name>RandomNormal</name>
        <param>
          <type>Real</type>
          <declname>mean</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>stddev</declname>
        </param>
        <briefdescription>
<para>Generate a psuedo-random double from a normal distribution. </para>        </briefdescription>
        <detaileddescription>
<para>Generates one pseudorandom real number (double) from a normal distribution with mean &apos;mean&apos; and standard deviation &apos;stddev&apos;. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Random.H" line="61" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a10f7574cba3e496a27f09204cce8aa6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> Real</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Real amrex::RandomNormal</definition>
        <argsstring>(Real mean, Real stddev, RandomEngine const &amp;random_engine)</argsstring>
        <name>RandomNormal</name>
        <param>
          <type>Real</type>
          <declname>mean</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>stddev</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1RandomEngine" kindref="compound">RandomEngine</ref> const &amp;</type>
          <declname>random_engine</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Random.H" line="65" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Random.H" bodystart="65" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aadec079fd8e2cdca36f7f49355e33864" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>unsigned int amrex::RandomPoisson</definition>
        <argsstring>(Real lambda)</argsstring>
        <name>RandomPoisson</name>
        <param>
          <type>Real</type>
          <declname>lambda</declname>
        </param>
        <briefdescription>
<para>Generate a psuedo-random integer from a Poisson distribution. </para>        </briefdescription>
        <detaileddescription>
<para>Generates one pseudorandom positive integer number (double) extracted from a Poisson distribution, given the Real parameter lambda. The CPU version of this function relies on the standard Template Library The GPU version of this function relies on the cuRAND library </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Random.H" line="100" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a62b2d5b64c692d02452cbed5ee65e61e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> unsigned <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE unsigned int amrex::RandomPoisson</definition>
        <argsstring>(Real lambda, RandomEngine const &amp;random_engine)</argsstring>
        <name>RandomPoisson</name>
        <param>
          <type>Real</type>
          <declname>lambda</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1RandomEngine" kindref="compound">RandomEngine</ref> const &amp;</type>
          <declname>random_engine</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Random.H" line="104" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Random.H" bodystart="104" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a20796a80df81ee204983811cc8a1b705" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>unsigned int amrex::Random_int</definition>
        <argsstring>(unsigned int n)</argsstring>
        <name>Random_int</name>
        <param>
          <type>unsigned <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Generates one pseudorandom unsigned integer which is uniformly distributed on [0,n-1]-interval for each call. </para>        </briefdescription>
        <detaileddescription>
<para>The CPU version of this function uses C++11&apos;s mt19937. The GPU version uses CURAND&apos;s XORWOW generator. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Random.H" line="130" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Random.cpp" bodystart="248" bodyend="276"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a3768023f2b8cf90a47c693514b97d579" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> unsigned <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE unsigned int amrex::Random_int</definition>
        <argsstring>(unsigned int n, RandomEngine const &amp;random_engine)</argsstring>
        <name>Random_int</name>
        <param>
          <type>unsigned <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1RandomEngine" kindref="compound">RandomEngine</ref> const &amp;</type>
          <declname>random_engine</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Random.H" line="134" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Random.H" bodystart="134" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4bcd8d65b3b8e649e5d701d5a9ef4093" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1af7feff7858c7b1d3557509d883c46674" kindref="member">AMREX_GPU_HOST</ref> ULong</type>
        <definition>AMREX_GPU_HOST ULong amrex::Random_long</definition>
        <argsstring>(ULong n)</argsstring>
        <name>Random_long</name>
        <param>
          <type>ULong</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Generates one pseudorandom unsigned long which is uniformly distributed on [0,n-1]-interval for each call. </para>        </briefdescription>
        <detaileddescription>
<para>The CPU version of this function uses C++11&apos;s mt19937. There is no GPU version. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Random.H" line="173" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae9f820f5a65928568f3751fd584fa5ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::InitRandom</definition>
        <argsstring>(ULong seed, int nprocs=ParallelDescriptor::NProcs())</argsstring>
        <name>InitRandom</name>
        <param>
          <type>ULong</type>
          <declname>seed</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nprocs</declname>
          <defval><ref refid="namespaceamrex_1_1ParallelDescriptor_1aa191723b5d24ceaf64e9d49f542cfcc2" kindref="member">ParallelDescriptor::NProcs</ref>()</defval>
        </param>
        <briefdescription>
<para>Set the seed of the random number generator. </para>        </briefdescription>
        <detaileddescription>
<para>There is also an entry point for Fortran callable as:</para><para>INTEGER seed call blutilinitrand(seed)</para><para>or</para><para>INTEGER seed call blinitrand(seed) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Random.H" line="187" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a113534c1251300931774c81dbf2fcbae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ResetRandomSeed</definition>
        <argsstring>(ULong seed)</argsstring>
        <name>ResetRandomSeed</name>
        <param>
          <type>ULong</type>
          <declname>seed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Random.H" line="189" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad1b283df95b292f478597bc503170459" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::SaveRandomState</definition>
        <argsstring>(std::ostream &amp;os)</argsstring>
        <name>SaveRandomState</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <briefdescription>
<para>Save and restore random state. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Random.H" line="195" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Random.cpp" bodystart="287" bodyend="292"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae45a9a3a96e46d7b15173894b25134fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::RestoreRandomState</definition>
        <argsstring>(std::istream &amp;is, int nthreads_old, int nstep_old)</argsstring>
        <name>RestoreRandomState</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nthreads_old</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nstep_old</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Random.H" line="197" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Random.cpp" bodystart="295" bodyend="314"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa2c1209819cd8dd79499c2b9f088120e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::UniqueRandomSubset</definition>
        <argsstring>(Vector&lt; int &gt; &amp;uSet, int setSize, int poolSize, bool printSet=false)</argsstring>
        <name>UniqueRandomSubset</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>uSet</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>setSize</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>poolSize</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>printSet</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Create a unique subset of random numbers from a pool of integers in the range [0, poolSize - 1] the set will be in the order they are found setSize must be &lt;= poolSize uSet will be resized to setSize if you want all processors to have the same set, call this on one processor and broadcast the array. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Random.H" line="208" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Random.cpp" bodystart="317" bodyend="338"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aaf97cdbc0db387b57d9641d57cce591e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::NItemsPerBin</definition>
        <argsstring>(int totalItems, Vector&lt; int &gt; &amp;binCounts)</argsstring>
        <name>NItemsPerBin</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>totalItems</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>binCounts</declname>
        </param>
        <briefdescription>
<para>Fill binCounts with the number of items for each bin. The remainder items are randomly assigned. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Random.H" line="215" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Random.cpp" bodystart="378" bodyend="401"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1abce0125a244f443854b1c4a2709c5990" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::DeallocateRandomSeedDevArray</definition>
        <argsstring>()</argsstring>
        <name>DeallocateRandomSeedDevArray</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Random.H" line="217" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Random.cpp" bodystart="346" bodyend="375"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a1e3af8577a1ee3509e9bd184d2ab575a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;, const RealBox &amp;)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealBox" kindref="compound">RealBox</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Nice ASCII output. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.cpp" line="30" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.cpp" bodystart="31" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a3fa033d5f7e81438c45cc3b5f6af3443" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::istream &amp;</type>
        <definition>std::istream &amp; amrex::operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;, RealBox &amp;)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1RealBox" kindref="compound">RealBox</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Nice ASCII input. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.cpp" line="46" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.cpp" bodystart="46" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a0f1862ab58d1cc82443741c7315b72f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::AlmostEqual</definition>
        <argsstring>(const RealBox &amp;box1, const RealBox &amp;box2, Real eps) noexcept</argsstring>
        <name>AlmostEqual</name>
        <param>
          <type>const <ref refid="classamrex_1_1RealBox" kindref="compound">RealBox</ref> &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealBox" kindref="compound">RealBox</ref> &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>eps</declname>
          <defval>0.0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check for equality of real boxes within a certain tolerance Can use std::numeric_precision::epsilon() * std::abs(x + y) * ulps for inexact comparison See <ulink url="https://en.cppreference.com/w/cpp/types/numeric_limits/epsilon">https://en.cppreference.com/w/cpp/types/numeric_limits/epsilon</ulink> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.cpp" line="81" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.cpp" bodystart="81" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab7f948f87bc8aa58451aa8b78e9c883a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;ostr, const RealVect &amp;p)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>ostr</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="classamrex_1_1Print" kindref="compound">Print</ref> to the given output stream in ASCII. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.cpp" line="9" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.cpp" bodystart="10" bodyend="14"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a89d1ab126c05c2eac37ba679a7415a9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::istream &amp;</type>
        <definition>std::istream&amp; amrex::operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;is, RealVect &amp;iv)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>iv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.cpp" line="17" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.cpp" bodystart="17" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a26f254d668dd872d470d231a1058eaac" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE RealVect amrex::scale</definition>
        <argsstring>(const RealVect &amp;p, Real s) noexcept</argsstring>
        <name>scale</name>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> obtained by multiplying each of the components of the given <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> by a scalar. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" line="774" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" bodystart="774" bodyend="778"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab2f47c183037880adec6de44fcbb0344" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE RealVect amrex::min</definition>
        <argsstring>(const RealVect &amp;p1, const RealVect &amp;p2) noexcept</argsstring>
        <name>min</name>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> that is the component-wise minimum of two argument RealVects. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" line="837" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" bodystart="837" bodyend="842"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a57e5b11414b29e5aeaf30c5e301e8f34" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE RealVect amrex::max</definition>
        <argsstring>(const RealVect &amp;p1, const RealVect &amp;p2) noexcept</argsstring>
        <name>max</name>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> that is the component-wise maximum of two argument RealVects. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" line="847" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" bodystart="847" bodyend="852"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a133d9cc5152d06db5db552037d7ee486" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE RealVect amrex::BASISREALV</definition>
        <argsstring>(int dir) noexcept</argsstring>
        <name>BASISREALV</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a basis vector in the given coordinate direction.<linebreak/>
 In 2-D:<linebreak/>
 BASISREALV(0) == (1.,0.); BASISREALV(1) == (0.,1.).<linebreak/>
 In 3-D:<linebreak/>
 BASISREALV(0) == (1.,0.,0.); BASISREALV(1) == (0.,1.,0.); BASISREALV(2) == (0.,0.,1.).<linebreak/>
 Note that the coordinate directions are based at zero. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" line="997" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" bodystart="997" bodyend="1003"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af8def61d771b914af3de1bf3095d30d8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE RealVect amrex::operator/</definition>
        <argsstring>(Real s, const RealVect &amp;p) noexcept</argsstring>
        <name>operator/</name>
        <param>
          <type>Real</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> that is a <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> <emphasis>p</emphasis> with each component divided by a scalar <emphasis>s</emphasis>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" line="1007" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" bodystart="1007" bodyend="1011"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa734733ef1b28c8cecd99859f3e56606" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE RealVect amrex::operator+</definition>
        <argsstring>(Real s, const RealVect &amp;p) noexcept</argsstring>
        <name>operator+</name>
        <param>
          <type>Real</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> that is a <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> <emphasis>p</emphasis> with a scalar <emphasis>s</emphasis> added to each component. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" line="1015" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" bodystart="1015" bodyend="1019"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a9544c7d6ed4e33b91cb32e5b3c32a344" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE RealVect amrex::operator-</definition>
        <argsstring>(Real s, const RealVect &amp;p) noexcept</argsstring>
        <name>operator-</name>
        <param>
          <type>Real</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns <emphasis>s - p</emphasis>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" line="1023" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" bodystart="1023" bodyend="1027"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a195022a2bf1f86de6f3f454ad1d586b7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE RealVect amrex::operator*</definition>
        <argsstring>(Real s, const RealVect &amp;p) noexcept</argsstring>
        <name>operator*</name>
        <param>
          <type>Real</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> that is a <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> <emphasis>p</emphasis> with each component multiplied by a scalar <emphasis>s</emphasis>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" line="1031" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" bodystart="1031" bodyend="1035"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a01d310d8cbb95e1ea1af03ef92c82895" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE RealVect amrex::operator/</definition>
        <argsstring>(const RealVect &amp;s, const RealVect &amp;p) noexcept</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns component-wise quotient <emphasis>p / s</emphasis>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" line="1039" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" bodystart="1039" bodyend="1043"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a78af1eb5d5bfbed5aea780ed03314482" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE RealVect amrex::operator+</definition>
        <argsstring>(const RealVect &amp;s, const RealVect &amp;p) noexcept</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns component-wise sum of RealVects <emphasis>s</emphasis> and <emphasis>p</emphasis>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" line="1047" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" bodystart="1047" bodyend="1051"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae04516f228abbaedeb3e57c4acd79a47" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE RealVect amrex::operator-</definition>
        <argsstring>(const RealVect &amp;s, const RealVect &amp;p) noexcept</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns <emphasis>s - p</emphasis>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" line="1055" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" bodystart="1055" bodyend="1059"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aad23797e3ede2065dcdc613ef5999603" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE RealVect amrex::operator*</definition>
        <argsstring>(const RealVect &amp;s, const RealVect &amp;p) noexcept</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns component-wise product of <emphasis>s</emphasis> and <emphasis>p</emphasis>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" line="1063" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" bodystart="1063" bodyend="1067"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab4827649f3c5439adcbd2428c051a977" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> constexpr <ref refid="structamrex_1_1GpuTupleElement" kindref="compound">GpuTupleElement</ref>&lt; I, <ref refid="classamrex_1_1GpuTuple" kindref="compound">GpuTuple</ref>&lt; Ts... &gt; &gt;::type &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE constexpr GpuTupleElement&lt;I, GpuTuple&lt;Ts...&gt; &gt;::type&amp; amrex::get</definition>
        <argsstring>(GpuTuple&lt; Ts... &gt; &amp;tup) noexcept</argsstring>
        <name>get</name>
        <param>
          <type><ref refid="classamrex_1_1GpuTuple" kindref="compound">GpuTuple</ref>&lt; Ts... &gt; &amp;</type>
          <declname>tup</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Tuple.H" line="179" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Tuple.H" bodystart="179" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a809cf12d60d66dd13c0363d64f1910fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> constexpr <ref refid="structamrex_1_1GpuTupleElement" kindref="compound">GpuTupleElement</ref>&lt; I, <ref refid="classamrex_1_1GpuTuple" kindref="compound">GpuTuple</ref>&lt; Ts... &gt; &gt;::type const  &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE constexpr GpuTupleElement&lt;I, GpuTuple&lt;Ts...&gt; &gt;::type const&amp; amrex::get</definition>
        <argsstring>(GpuTuple&lt; Ts... &gt; const &amp;tup) noexcept</argsstring>
        <name>get</name>
        <param>
          <type><ref refid="classamrex_1_1GpuTuple" kindref="compound">GpuTuple</ref>&lt; Ts... &gt; const &amp;</type>
          <declname>tup</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Tuple.H" line="188" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Tuple.H" bodystart="188" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a22de35a7c490747c1de230d8d26e1efd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> constexpr <ref refid="structamrex_1_1GpuTupleElement" kindref="compound">GpuTupleElement</ref>&lt; I, <ref refid="classamrex_1_1GpuTuple" kindref="compound">GpuTuple</ref>&lt; Ts... &gt; &gt;::type &amp;&amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE constexpr GpuTupleElement&lt;I, GpuTuple&lt;Ts...&gt; &gt;::type&amp;&amp; amrex::get</definition>
        <argsstring>(GpuTuple&lt; Ts... &gt; &amp;&amp;tup) noexcept</argsstring>
        <name>get</name>
        <param>
          <type><ref refid="classamrex_1_1GpuTuple" kindref="compound">GpuTuple</ref>&lt; Ts... &gt; &amp;&amp;</type>
          <declname>tup</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Tuple.H" line="197" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Tuple.H" bodystart="197" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a3d43b5aba7b9f1abe2f58b0f3063a3a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> constexpr <ref refid="classamrex_1_1GpuTuple" kindref="compound">GpuTuple</ref>&lt; <ref refid="namespaceamrex_1_1detail_1a4dabd168440a362478e0d2887dfdfe23" kindref="member">detail::tuple_decay_t</ref>&lt; Ts &gt;... &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE constexpr GpuTuple&lt;detail::tuple_decay_t&lt;Ts&gt;...&gt; amrex::makeTuple</definition>
        <argsstring>(Ts &amp;&amp;... args)</argsstring>
        <name>makeTuple</name>
        <param>
          <type>Ts &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Tuple.H" line="252" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Tuple.H" bodystart="252" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad0e688e82c92cf4c06225a544c427b1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TP</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> constexpr auto</type>
        <definition>AMREX_GPU_HOST_DEVICE constexpr auto amrex::TupleCat</definition>
        <argsstring>(TP &amp;&amp;a) -&gt; typename detail::tuple_cat_result&lt; detail::tuple_decay_t&lt; TP &gt; &gt;::type</argsstring>
        <name>TupleCat</name>
        <param>
          <type>TP &amp;&amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Tuple.H" line="286" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Tuple.H" bodystart="286" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a66335e299cd3b1f7e6089c38a4cb3436" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TP1</type>
          </param>
          <param>
            <type>typename TP2</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> constexpr auto</type>
        <definition>AMREX_GPU_HOST_DEVICE constexpr auto amrex::TupleCat</definition>
        <argsstring>(TP1 &amp;&amp;a, TP2 &amp;&amp;b) -&gt; typename detail::tuple_cat_result&lt; detail::tuple_decay_t&lt; TP1 &gt;, detail::tuple_decay_t&lt; TP2 &gt; &gt;::type</argsstring>
        <name>TupleCat</name>
        <param>
          <type>TP1 &amp;&amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>TP2 &amp;&amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Tuple.H" line="295" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Tuple.H" bodystart="295" bodyend="304"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a235936892b415398da8a37e18b518085" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TP1</type>
          </param>
          <param>
            <type>typename TP2</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>TPs</declname>
            <defname>TPs</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> constexpr auto</type>
        <definition>AMREX_GPU_HOST_DEVICE constexpr auto amrex::TupleCat</definition>
        <argsstring>(TP1 &amp;&amp;a, TP2 &amp;&amp;b, TPs &amp;&amp;... args) -&gt; typename detail::tuple_cat_result&lt; detail::tuple_decay_t&lt; TP1 &gt;, detail::tuple_decay_t&lt; TP2 &gt;, detail::tuple_decay_t&lt; TPs &gt;... &gt;::type</argsstring>
        <name>TupleCat</name>
        <param>
          <type>TP1 &amp;&amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>TP2 &amp;&amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>TPs &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Tuple.H" line="309" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Tuple.H" bodystart="309" bodyend="316"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa1542d2fae577f8758303d87383268f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>typename TP</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> constexpr auto</type>
        <definition>AMREX_GPU_HOST_DEVICE constexpr auto amrex::Apply</definition>
        <argsstring>(F &amp;&amp;f, TP &amp;&amp;t) -&gt; typename detail::apply_result&lt; F, detail::tuple_decay_t&lt; TP &gt; &gt;::type</argsstring>
        <name>Apply</name>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>TP &amp;&amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Tuple.H" line="356" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Tuple.H" bodystart="356" bodyend="360"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1acb86da51e0635863cb9f35d9ca36b414" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> constexpr <ref refid="classamrex_1_1GpuTuple" kindref="compound">GpuTuple</ref>&lt; Args &amp;... &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE constexpr GpuTuple&lt;Args&amp;...&gt; amrex::Tie</definition>
        <argsstring>(Args &amp;... args) noexcept</argsstring>
        <name>Tie</name>
        <param>
          <type>Args &amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Tuple.H" line="367" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Tuple.H" bodystart="367" bodyend="370"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad2c68141d583842d7613c783bd2b81bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> constexpr <ref refid="classamrex_1_1GpuTuple" kindref="compound">GpuTuple</ref>&lt; Ts &amp;&amp;... &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE constexpr GpuTuple&lt;Ts&amp;&amp;...&gt; amrex::ForwardAsTuple</definition>
        <argsstring>(Ts &amp;&amp;... args) noexcept</argsstring>
        <name>ForwardAsTuple</name>
        <param>
          <type>Ts &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Tuple.H" line="377" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Tuple.H" bodystart="377" bodyend="380"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a107cab62d5043f039671cf5b68068ddc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::is_integer</definition>
        <argsstring>(const char *str)</argsstring>
        <name>is_integer</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Useful C++ Utility Functions. </para>        </briefdescription>
        <detaileddescription>
<para>Return true if argument is a non-zero length string of digits. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" line="36" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.cpp" bodystart="36" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a5d64ce961cc190a21d99afb216b879d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool amrex::is_it</definition>
        <argsstring>(std::string const &amp;s, T &amp;v)</argsstring>
        <name>is_it</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Return true and store value in v if string s is type T. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" line="39" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" bodystart="257" bodyend="267"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6ba24cf7211301279ca446ff282a0f8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const std::vector&lt; std::string &gt; &amp;</type>
        <definition>const std::vector&lt; std::string &gt; &amp; amrex::Tokenize</definition>
        <argsstring>(const std::string &amp;instr, const std::string &amp;separators)</argsstring>
        <name>Tokenize</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>instr</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>separators</declname>
        </param>
        <briefdescription>
<para>Splits &quot;instr&quot; into separate pieces based on &quot;separators&quot;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" line="42" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.cpp" bodystart="60" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a67bf98d88c814ab458018afd16e64aa8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string amrex::toLower</definition>
        <argsstring>(std::string s)</argsstring>
        <name>toLower</name>
        <param>
          <type>std::string</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Converts all characters of the string into lower or uppercase based on std::locale. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" line="46" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.cpp" bodystart="112" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1afb53573f5330e4753ad1b562e5dd95ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string amrex::toUpper</definition>
        <argsstring>(std::string s)</argsstring>
        <name>toUpper</name>
        <param>
          <type>std::string</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" line="47" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.cpp" bodystart="120" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1addbbc3d301a509b525c31cc36120ad5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string amrex::trim</definition>
        <argsstring>(std::string s, std::string const &amp;space=&quot; \)</argsstring>
        <name>trim</name>
        <param>
          <type>std::string</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Trim leading and trailing white space. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" line="50" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.cpp" bodystart="128" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6e3a82e54e91d8c7543596b2c2476250" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string amrex::Concatenate</definition>
        <argsstring>(const std::string &amp;root, int num, int mindigits=5)</argsstring>
        <name>Concatenate</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>root</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mindigits</declname>
          <defval>5</defval>
        </param>
        <briefdescription>
<para>Returns rootNNNN where NNNN == num. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" line="53" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.cpp" bodystart="138" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a913fd7ccf7cab45bc7d8e2a09ddd2824" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::UtilCreateDirectory</definition>
        <argsstring>(const std::string &amp;path, mode_t mode, bool verbose=false)</argsstring>
        <name>UtilCreateDirectory</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>mode_t</type>
          <declname>mode</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>verbose</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Creates the specified directories. path may be either a full pathname or a relative pathname. It will create all the directories in the pathname, if they don&apos;t already exist, so that on successful return the pathname refers to an existing directory. Returns true or false depending upon whether or not it was successful. Also returns true if path is NULL or &quot;/&quot;. mode is the mode passed to mkdir() for any directories that must be created (for example: 0755). verbose will print out the directory creation steps. </para>        </briefdescription>
        <detaileddescription>
<para>For example, if it is passed the string &quot;/a/b/c/d/e/f/g&quot;, it will return successfully when all the directories in the pathname exist; i.e. when the full pathname is a valid directory.</para><para>In a Windows environment, the path separator is a &apos;\&apos;, so that if using the example given above you must pass the string &quot;\\a\\b\\c\\d\\e\\f\\g&quot; (Note that you must escape the backslash in a character string),</para><para>Only the last mkdir return value is checked for success as errno may not be set to EEXIST if a directory exists but mkdir has other reasons to fail such as part of the path being a read-only filesystem (EROFS). If this function fails, it will print out an error stack. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" line="80" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.cpp" bodystart="150" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a894a812531d6362ce4ac5065c3224699" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::CreateDirectoryFailed</definition>
        <argsstring>(const std::string &amp;dir)</argsstring>
        <name>CreateDirectoryFailed</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Output a message and abort when couldn&apos;t create the directory. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" line="84" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.cpp" bodystart="157" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac40a8be1926370de761ddd49c765d971" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FileOpenFailed</definition>
        <argsstring>(const std::string &amp;dir)</argsstring>
        <name>FileOpenFailed</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Output a message and abort when couldn&apos;t open the file. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" line="86" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.cpp" bodystart="165" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a51791a9a04ee140c71cee50d3615ed35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::FileExists</definition>
        <argsstring>(const std::string &amp;filename)</argsstring>
        <name>FileExists</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Check if a file already exists. Return true if the filename is an existing file, directory, or link. For links, this operates on the link and not what the link points to. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" line="93" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.cpp" bodystart="173" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aebee05e08302fb03e29f4270e933239c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string amrex::UniqueString</definition>
        <argsstring>()</argsstring>
        <name>UniqueString</name>
        <briefdescription>
<para>Create a (probably) unique string. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" line="95" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.cpp" bodystart="179" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a832f4ad883cbc470d76cde70a099e912" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::UtilCreateCleanDirectory</definition>
        <argsstring>(const std::string &amp;path, bool callbarrier=true)</argsstring>
        <name>UtilCreateCleanDirectory</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>callbarrier</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Create a new directory, renaming the old one if it exists. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" line="97" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.cpp" bodystart="188" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aebce007d4152715af0cf44f3ab94d1fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::UtilCreateDirectoryDestructive</definition>
        <argsstring>(const std::string &amp;path, bool callbarrier=true)</argsstring>
        <name>UtilCreateDirectoryDestructive</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>callbarrier</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new directory, removing old one if it exists. This will only work on unix systems, as it has a system call. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" line="105" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.cpp" bodystart="211" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae2d0c6a2a5153df0d38d7cde07a89c73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::UtilRenameDirectoryToOld</definition>
        <argsstring>(const std::string &amp;path, bool callbarrier=true)</argsstring>
        <name>UtilRenameDirectoryToOld</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>callbarrier</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Rename a current directory if it exists. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" line="109" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.cpp" bodystart="236" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1afe890be0bd82650235456eabcf50e309" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::OutOfMemory</definition>
        <argsstring>()</argsstring>
        <name>OutOfMemory</name>
        <briefdescription>
<para>Aborts after printing message indicating out-of-memory; i.e. operator new has failed. This is the &quot;supported&quot; set_new_handler() function for <ref refid="classamrex_1_1AMReX" kindref="compound">AMReX</ref> applications. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" line="116" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.cpp" bodystart="255" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aeb571560dc9f12004d96e105ab1137e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double amrex::InvNormDist</definition>
        <argsstring>(double p)</argsstring>
        <name>InvNormDist</name>
        <param>
          <type>double</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>This function returns an approximation of the inverse cumulative standard normal distribution function. I.e., given P, it returns an approximation to the X satisfying P = Pr{Z &lt;= X} where Z is a random variable from the standard normal distribution. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm uses a minimax approximation by rational functions and the result has a relative error whose absolute value is less than 1.15e-9.</para><para><simplesect kind="author"><para>Peter J. Acklam Time-stamp: 2002-06-09 18:45:44 +0200 E-mail: <ulink url="mailto:jacklam@math.uio.no">jacklam@math.uio.no</ulink> WWW URL: <ulink url="http://www.math.uio.no/~jacklam">http://www.math.uio.no/~jacklam</ulink></para></simplesect>
&quot;p&quot; MUST be in the open interval (0,1).</para><para>Entry points for Fortran:</para><para>REAL_T val call blinvnormdist(val)</para><para>Internally, the Fortran entry point calls a static Mersenne Twister object (the same one called by blutilrand()) to get a random number in the open interval (0,1), and then sets &quot;val&quot; to the result of calling <ref refid="namespaceamrex_1aeb571560dc9f12004d96e105ab1137e9" kindref="member">amrex::InvNormDist()</ref> with that random number. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" line="144" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.cpp" bodystart="295" bodyend="374"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a0dace3a79fc48a8b02686c10363b70a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double amrex::InvNormDistBest</definition>
        <argsstring>(double p)</argsstring>
        <name>InvNormDistBest</name>
        <param>
          <type>double</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>This function returns an approximation of the inverse cumulative standard normal distribution function. I.e., given P, it returns an approximation to the X satisfying P = Pr{Z &lt;= X} where Z is a random variable from the standard normal distribution. </para>        </briefdescription>
        <detaileddescription>
<para>Original FORTRAN77 version by Michael Wichura.</para><para>Michael Wichura, The Percentage Points of the Normal Distribution, Algorithm AS 241, Applied Statistics, Volume 37, Number 3, pages 477-484, 1988.</para><para>Our version is based on the C++ version by John Burkardt.</para><para>The algorithm uses a minimax approximation by rational functions and the result is good to roughly machine precision. This routine is roughly 30% more costly than <ref refid="namespaceamrex_1aeb571560dc9f12004d96e105ab1137e9" kindref="member">InvNormDist()</ref> above.</para><para>&quot;p&quot; MUST be in the open interval (0,1).</para><para>Entry points for Fortran:</para><para>REAL_T val call blinvnormdistbest(val)</para><para>Internally, the Fortran entry point calls a static Mersenne Twister object (the same one called by blutilrand()) to get a random number in the open interval (0,1), and then sets &quot;val&quot; to the result of calling <ref refid="namespaceamrex_1aeb571560dc9f12004d96e105ab1137e9" kindref="member">amrex::InvNormDist()</ref> with that random number. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" line="177" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.cpp" bodystart="415" bodyend="527"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a15ea4e09dbb2ff1919ec42ea7702d5aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::CRRBetweenLevels</definition>
        <argsstring>(int fromlevel, int tolevel, const Vector&lt; int &gt; &amp;refratios)</argsstring>
        <name>CRRBetweenLevels</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fromlevel</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>tolevel</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>refratios</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" line="180" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.cpp" bodystart="261" bodyend="272"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aff6b4420435f9951710a37eda411db8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::istream &amp;</type>
        <definition>std::istream &amp; amrex::operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;, const expect &amp;exp)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <defname>is</defname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1expect" kindref="compound">expect</ref> &amp;</type>
          <declname>exp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" line="184" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.cpp" bodystart="534" bodyend="556"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac55f6d6246ea70d74588e5f06fd92e99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; char &gt;</type>
        <definition>amrex::Vector&lt; char &gt; amrex::SerializeStringArray</definition>
        <argsstring>(const Vector&lt; std::string &gt; &amp;stringArray)</argsstring>
        <name>SerializeStringArray</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>stringArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" line="222" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.cpp" bodystart="859" bodyend="870"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a23045f55caabc0bec388518c4c4adecb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt;</type>
        <definition>amrex::Vector&lt; std::string &gt; amrex::UnSerializeStringArray</definition>
        <argsstring>(const Vector&lt; char &gt; &amp;charArray)</argsstring>
        <name>UnSerializeStringArray</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; char &gt; &amp;</type>
          <declname>charArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" line="223" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.cpp" bodystart="872" bodyend="885"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a09ef310468cc24552cfc73abfc282b72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::SyncStrings</definition>
        <argsstring>(const Vector&lt; std::string &gt; &amp;localStrings, Vector&lt; std::string &gt; &amp;syncedStrings, bool &amp;alreadySynced)</argsstring>
        <name>SyncStrings</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>localStrings</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>syncedStrings</declname>
        </param>
        <param>
          <type>bool &amp;</type>
          <declname>alreadySynced</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" line="224" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.cpp" bodystart="697" bodyend="857"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a7eba5dd365d87751a963b6bd078673c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>Long</type>
        <definition>Long amrex::bytesOf</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;v)</argsstring>
        <name>bytesOf</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" line="233" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a87b15ece376f09dacd5bb7e8f266a6bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Key</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>class Compare</type>
          </param>
        </templateparamlist>
        <type>Long</type>
        <definition>Long amrex::bytesOf</definition>
        <argsstring>(const std::map&lt; Key, T, Compare &gt; &amp;m)</argsstring>
        <name>bytesOf</name>
        <param>
          <type>const std::map&lt; Key, T, Compare &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" line="234" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af0fd43716fb89a13154ed4c037ebe6e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BroadcastBool</definition>
        <argsstring>(bool &amp;bBool, int myLocalId, int rootId, const MPI_Comm &amp;localComm)</argsstring>
        <name>BroadcastBool</name>
        <param>
          <type>bool &amp;</type>
          <declname>bBool</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>myLocalId</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>rootId</declname>
        </param>
        <param>
          <type>const <ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref> &amp;</type>
          <declname>localComm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" line="236" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.cpp" bodystart="887" bodyend="899"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa60205e03d594df934b5b3afd723c764" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BroadcastString</definition>
        <argsstring>(std::string &amp;bStr, int myLocalId, int rootId, const MPI_Comm &amp;localComm)</argsstring>
        <name>BroadcastString</name>
        <param>
          <type>std::string &amp;</type>
          <declname>bStr</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>myLocalId</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>rootId</declname>
        </param>
        <param>
          <type>const <ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref> &amp;</type>
          <declname>localComm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" line="238" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.cpp" bodystart="902" bodyend="916"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a1bfd620fc96f18d04313d70ccca85bfb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BroadcastStringArray</definition>
        <argsstring>(Vector&lt; std::string &gt; &amp;bSA, int myLocalId, int rootId, const MPI_Comm &amp;localComm)</argsstring>
        <name>BroadcastStringArray</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>bSA</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>myLocalId</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>rootId</declname>
        </param>
        <param>
          <type>const <ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref> &amp;</type>
          <declname>localComm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" line="239" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.cpp" bodystart="918" bodyend="930"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8cf9dce7670dcc62897405af53fafcff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::BroadcastArray</definition>
        <argsstring>(Vector&lt; T &gt; &amp;aT, int myLocalId, int rootId, const MPI_Comm &amp;localComm)</argsstring>
        <name>BroadcastArray</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>aT</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>myLocalId</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>rootId</declname>
        </param>
        <param>
          <type>const <ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref> &amp;</type>
          <declname>localComm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" line="241" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" bodystart="269" bodyend="283"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae0cfc6441bbe3f6e424e8a3fdd99bfe8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Sleep</definition>
        <argsstring>(double sleepsec)</argsstring>
        <name>Sleep</name>
        <param>
          <type>double</type>
          <declname>sleepsec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" line="243" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.cpp" bodystart="932" bodyend="934"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6f975f843338c8eada684f0e8e2c0cb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double amrex::second</definition>
        <argsstring>() noexcept</argsstring>
        <name>second</name>
        <briefdescription>
<para>Returns wall-clock seconds since start of execution. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" line="249" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.cpp" bodystart="941" bodyend="945"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1adce3325c7a4208e21f4cecc984bfb8b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::hash_combine</definition>
        <argsstring>(uint64_t &amp;seed, const T &amp;val) noexcept</argsstring>
        <name>hash_combine</name>
        <param>
          <type>uint64_t &amp;</type>
          <declname>seed</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" line="251" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" bodystart="397" bodyend="400"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a72ebcf044c2dabd659e4ed5831cadc5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>uint64_t</type>
        <definition>uint64_t amrex::hash_vector</definition>
        <argsstring>(const Vector&lt; T &gt; &amp;vec, uint64_t seed=0xDEADBEEFDEADBEEF) noexcept</argsstring>
        <name>hash_vector</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>seed</declname>
          <defval>0xDEADBEEFDEADBEEF</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" line="252" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" bodystart="404" bodyend="410"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4ad8b7a21907586ee3a86bda5163cd2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename T::FABType</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; T * &gt;</type>
        <definition>Vector&lt;T*&gt; amrex::GetVecOfPtrs</definition>
        <argsstring>(Vector&lt; T &gt; &amp;a)</argsstring>
        <name>GetVecOfPtrs</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Vector.H" line="61" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Vector.H" bodystart="61" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a22a501f5be1e47c511f000546bcae72a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; T * &gt;</type>
        <definition>Vector&lt;T*&gt; amrex::GetVecOfPtrs</definition>
        <argsstring>(const Vector&lt; std::unique_ptr&lt; T &gt; &gt; &amp;a)</argsstring>
        <name>GetVecOfPtrs</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::unique_ptr&lt; T &gt; &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Vector.H" line="70" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Vector.H" bodystart="70" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a2eb81423f83e826a61bafde352b67e98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename T::FABType</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; const T * &gt;</type>
        <definition>Vector&lt;const T*&gt; amrex::GetVecOfConstPtrs</definition>
        <argsstring>(const Vector&lt; T &gt; &amp;a)</argsstring>
        <name>GetVecOfConstPtrs</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Vector.H" line="81" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Vector.H" bodystart="81" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a36a4c65f6872127d9a779ef9f971777d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; const T * &gt;</type>
        <definition>Vector&lt;const T*&gt; amrex::GetVecOfConstPtrs</definition>
        <argsstring>(const Vector&lt; std::unique_ptr&lt; T &gt; &gt; &amp;a)</argsstring>
        <name>GetVecOfConstPtrs</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::unique_ptr&lt; T &gt; &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Vector.H" line="90" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Vector.H" bodystart="90" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af9517dc45d058c7ab904fda678c259d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename T::FABType</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; const T * &gt;</type>
        <definition>Vector&lt;const T*&gt; amrex::GetVecOfConstPtrs</definition>
        <argsstring>(const Vector&lt; T *&gt; &amp;a)</argsstring>
        <name>GetVecOfConstPtrs</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; T *&gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Vector.H" line="99" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Vector.H" bodystart="99" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a77fdd4258ec656fb99a6124a73501803" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; T * &gt; &gt;</type>
        <definition>Vector&lt;Vector&lt;T*&gt; &gt; amrex::GetVecOfVecOfPtrs</definition>
        <argsstring>(const Vector&lt; Vector&lt; std::unique_ptr&lt; T &gt; &gt; &gt; &amp;a)</argsstring>
        <name>GetVecOfVecOfPtrs</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::unique_ptr&lt; T &gt; &gt; &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Vector.H" line="107" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Vector.H" bodystart="107" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a93aaf6d87c0222a1ae437f2591c1872b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FillNull</definition>
        <argsstring>(Vector&lt; T *&gt; &amp;a)</argsstring>
        <name>FillNull</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; T *&gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Vector.H" line="176" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Vector.H" bodystart="176" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1abc4288a3fe5ceaea66583df8f170785f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FillNull</definition>
        <argsstring>(Vector&lt; std::unique_ptr&lt; T &gt; &gt; &amp;a)</argsstring>
        <name>FillNull</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::unique_ptr&lt; T &gt; &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Vector.H" line="182" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Vector.H" bodystart="182" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1adc731523d4241d981e7279b29c5d7a6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::RemoveDuplicates</definition>
        <argsstring>(Vector&lt; T &gt; &amp;vec)</argsstring>
        <name>RemoveDuplicates</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Vector.H" line="190" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Vector.H" bodystart="190" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a7c59b1fe9bc7b0498852cb74d7df5a76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class H</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::RemoveDuplicates</definition>
        <argsstring>(Vector&lt; T &gt; &amp;vec)</argsstring>
        <name>RemoveDuplicates</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Vector.H" line="280" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Vector.H" bodystart="280" bodyend="284"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aefc8755fb6847a4dc04d7de6a11bb9ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::writeIntData</definition>
        <argsstring>(const int *data, std::size_t size, std::ostream &amp;os, const IntDescriptor &amp;id=FPC::NativeIntDescriptor())</argsstring>
        <name>writeIntData</name>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntDescriptor" kindref="compound">IntDescriptor</ref> &amp;</type>
          <declname>id</declname>
          <defval><ref refid="classamrex_1_1FPC_1a9cad45e259106beaa8e4dc56f613bd06" kindref="member">FPC::NativeIntDescriptor</ref>()</defval>
        </param>
        <briefdescription>
<para>Functions for writing integer data to disk in a portable, self-describing manner. </para>        </briefdescription>
        <detaileddescription>
<para>Write int data to the ostream. The arguments are a pointer to data to write, the size of the data buffer, the ostream, and an optional <ref refid="classamrex_1_1IntDescriptor" kindref="compound">IntDescriptor</ref> that describes the data format to use for writing. If no <ref refid="classamrex_1_1IntDescriptor" kindref="compound">IntDescriptor</ref> is provided, the data will be written using the native format for your machine. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_VectorIO.H" line="22" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_VectorIO.cpp" bodystart="5" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a69bf266cc5fefb0b385d84f685dd0df6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::readIntData</definition>
        <argsstring>(int *data, std::size_t size, std::istream &amp;is, const IntDescriptor &amp;id)</argsstring>
        <name>readIntData</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntDescriptor" kindref="compound">IntDescriptor</ref> &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read int data from the istream. The arguments are a pointer to data buffer to read into, the size of that buffer, the istream, and an <ref refid="classamrex_1_1IntDescriptor" kindref="compound">IntDescriptor</ref> that describes the format of the data on disk. The buffer is assumed to be large enough to store &apos;size&apos; integers, and it is the user&apos;s reponsiblity to allocate this data. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_VectorIO.H" line="30" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_VectorIO.cpp" bodystart="29" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a601aaf049a30edfae3541b7f8ae1e0fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::writeLongData</definition>
        <argsstring>(const Long *data, std::size_t size, std::ostream &amp;os, const IntDescriptor &amp;id=FPC::NativeLongDescriptor())</argsstring>
        <name>writeLongData</name>
        <param>
          <type>const Long *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntDescriptor" kindref="compound">IntDescriptor</ref> &amp;</type>
          <declname>id</declname>
          <defval><ref refid="classamrex_1_1FPC_1a6f67a43bd516bcc9547cb3b76424b2b8" kindref="member">FPC::NativeLongDescriptor</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write long data to the ostream. The arguments are a pointer to data to write, the size of the data buffer, the ostream, and an optional <ref refid="classamrex_1_1IntDescriptor" kindref="compound">IntDescriptor</ref> that describes the data format to use for writing. If no <ref refid="classamrex_1_1IntDescriptor" kindref="compound">IntDescriptor</ref> is provided, the data will be written using the native format for your machine. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_VectorIO.H" line="37" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_VectorIO.cpp" bodystart="53" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa5a1f4f1c5cbe7672f12c62b9db96746" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::readLongData</definition>
        <argsstring>(Long *data, std::size_t size, std::istream &amp;is, const IntDescriptor &amp;id)</argsstring>
        <name>readLongData</name>
        <param>
          <type>Long *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntDescriptor" kindref="compound">IntDescriptor</ref> &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read int data from the istream. The arguments are a pointer to data buffer to read into, the size of that buffer, the istream, and an <ref refid="classamrex_1_1IntDescriptor" kindref="compound">IntDescriptor</ref> that describes the format of the data on disk. The buffer is assumed to be large enough to store &apos;size&apos; longs, and it is the user&apos;s reponsiblity to allocate this data. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_VectorIO.H" line="45" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_VectorIO.cpp" bodystart="77" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af9790d1f61a6d21ce4e9f92c58ac0600" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::writeRealData</definition>
        <argsstring>(const Real *data, std::size_t size, std::ostream &amp;os, const RealDescriptor &amp;rd=FPC::NativeRealDescriptor())</argsstring>
        <name>writeRealData</name>
        <param>
          <type>const Real *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref> &amp;</type>
          <declname>rd</declname>
          <defval><ref refid="classamrex_1_1FPC_1ab470772000cfb5f507edc5f294383bbc" kindref="member">FPC::NativeRealDescriptor</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write Real data to the ostream. The arguments are a pointer to data to write, the size of the data buffer, the ostream, and an optional <ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref> that describes the data format to use for writing. If no <ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref> is provided, the data will be written using the native format for your machine. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_VectorIO.H" line="52" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_VectorIO.cpp" bodystart="101" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa6f624229959bee80f1444371bb5babc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::readRealData</definition>
        <argsstring>(Real *data, std::size_t size, std::istream &amp;is, const RealDescriptor &amp;rd)</argsstring>
        <name>readRealData</name>
        <param>
          <type>Real *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref> &amp;</type>
          <declname>rd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read Real data from the istream. The arguments are a pointer to data buffer to read into, the size of that buffer, the istream, and a <ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref> that describes the format of the data on disk. The buffer is assumed to be large enough to store &apos;size&apos; Reals, and it is the user&apos;s reponsiblity to allocate this data. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_VectorIO.H" line="60" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_VectorIO.cpp" bodystart="107" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4f9c3dd444d301063e6190234413bda4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::writeFloatData</definition>
        <argsstring>(const float *data, std::size_t size, std::ostream &amp;os, const RealDescriptor &amp;rd=FPC::Native32RealDescriptor())</argsstring>
        <name>writeFloatData</name>
        <param>
          <type>const float *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref> &amp;</type>
          <declname>rd</declname>
          <defval><ref refid="classamrex_1_1FPC_1a56bb549e278ccc2611fd389c3d2b6bdb" kindref="member">FPC::Native32RealDescriptor</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write float data to the ostream. The arguments are a pointer to data to write, the size of the data buffer, the ostream, and an optional <ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref> that describes the data format to use for writing. If no <ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref> is provided, the data will be written using the native format for your machine. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_VectorIO.H" line="68" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_VectorIO.cpp" bodystart="113" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4c085d3b27d107f62bdb36f5ecc0f326" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::readFloatData</definition>
        <argsstring>(float *data, std::size_t size, std::istream &amp;is, const RealDescriptor &amp;rd)</argsstring>
        <name>readFloatData</name>
        <param>
          <type>float *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref> &amp;</type>
          <declname>rd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read float data from the istream. The arguments are a pointer to data buffer to read into, the size of that buffer, the istream, and a <ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref> that describes the format of the data on disk. The buffer is assumed to be large enough to store &apos;size&apos; Reals, and it is the user&apos;s reponsiblity to allocate this data. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_VectorIO.H" line="76" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_VectorIO.cpp" bodystart="119" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a9cb2d187853bfabaaf7d74de8c950c25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::writeDoubleData</definition>
        <argsstring>(const double *data, std::size_t size, std::ostream &amp;os, const RealDescriptor &amp;rd=FPC::Native64RealDescriptor())</argsstring>
        <name>writeDoubleData</name>
        <param>
          <type>const double *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref> &amp;</type>
          <declname>rd</declname>
          <defval><ref refid="classamrex_1_1FPC_1a3e122a19b07bc732bf83c360354ef2a4" kindref="member">FPC::Native64RealDescriptor</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write double data to the ostream. The arguments are a pointer to data to write, the size of the data buffer, the ostream, and an optional <ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref> that describes the data format to use for writing. If no <ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref> is provided, the data will be written using the native format for your machine. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_VectorIO.H" line="84" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_VectorIO.cpp" bodystart="125" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac590394599f7ea721cf8999331d0436e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::readDoubleData</definition>
        <argsstring>(double *data, std::size_t size, std::istream &amp;is, const RealDescriptor &amp;rd)</argsstring>
        <name>readDoubleData</name>
        <param>
          <type>double *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref> &amp;</type>
          <declname>rd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read double data from the istream. The arguments are a pointer to data buffer to read into, the size of that buffer, the istream, and a <ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref> that describes the format of the data on disk. The buffer is assumed to be large enough to store &apos;size&apos; Reals, and it is the user&apos;s reponsiblity to allocate this data. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_VectorIO.H" line="92" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_VectorIO.cpp" bodystart="131" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac0401938be1aa864fb878ee171a6fb14" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::writeData</definition>
        <argsstring>(int const *data, std::size_t size, std::ostream &amp;os)</argsstring>
        <name>writeData</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_VectorIO.H" line="95" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_VectorIO.H" bodystart="95" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a01a43d1a99e96ce0f348dc5659029a6e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::writeData</definition>
        <argsstring>(Long const *data, std::size_t size, std::ostream &amp;os)</argsstring>
        <name>writeData</name>
        <param>
          <type>Long const *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_VectorIO.H" line="100" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_VectorIO.H" bodystart="100" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a2e3bdcedf2e665446f241d3d34cb5b31" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::writeData</definition>
        <argsstring>(float const *data, std::size_t size, std::ostream &amp;os)</argsstring>
        <name>writeData</name>
        <param>
          <type>float const *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_VectorIO.H" line="105" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_VectorIO.H" bodystart="105" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a1950e496a6aafaad04f6b147af3bd6e1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::writeData</definition>
        <argsstring>(double const *data, std::size_t size, std::ostream &amp;os)</argsstring>
        <name>writeData</name>
        <param>
          <type>double const *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_VectorIO.H" line="110" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_VectorIO.H" bodystart="110" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a5836a4ae751b9857848ec279e0a7dc4a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::readData</definition>
        <argsstring>(int *data, std::size_t size, std::istream &amp;is)</argsstring>
        <name>readData</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_VectorIO.H" line="115" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_VectorIO.H" bodystart="115" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a9b9259c0e2e12b54971dac6fe224ba97" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::readData</definition>
        <argsstring>(Long *data, std::size_t size, std::istream &amp;is)</argsstring>
        <name>readData</name>
        <param>
          <type>Long *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_VectorIO.H" line="120" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_VectorIO.H" bodystart="120" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1afd3603d5627ea48a5c25919fa90482f5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::readData</definition>
        <argsstring>(float *data, std::size_t size, std::istream &amp;is)</argsstring>
        <name>readData</name>
        <param>
          <type>float *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_VectorIO.H" line="125" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_VectorIO.H" bodystart="125" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a9bed38ec3405646ecda2cfbd8b179733" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::readData</definition>
        <argsstring>(double *data, std::size_t size, std::istream &amp;is)</argsstring>
        <name>readData</name>
        <param>
          <type>double *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_VectorIO.H" line="130" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_VectorIO.H" bodystart="130" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af58b88f2bf12a834f4885dcf327fbeba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const VisMF::FabOnDisk &amp;fod)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1VisMF_1_1FabOnDisk" kindref="compound">VisMF::FabOnDisk</ref> &amp;</type>
          <declname>fod</declname>
        </param>
        <briefdescription>
<para>Write a FabOnDisk to an ostream in ASCII. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_VisMF.cpp" line="118" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_VisMF.cpp" bodystart="119" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1abbd06906c35c69c96f95404ef3837e15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::istream &amp;</type>
        <definition>std::istream &amp; amrex::operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;is, VisMF::FabOnDisk &amp;fod)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1VisMF_1_1FabOnDisk" kindref="compound">VisMF::FabOnDisk</ref> &amp;</type>
          <declname>fod</declname>
        </param>
        <briefdescription>
<para>Read a FabOnDisk from an istream. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_VisMF.cpp" line="131" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_VisMF.cpp" bodystart="131" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aadb6da61ab59ea2923bdf326e791654a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Vector&lt; VisMF::FabOnDisk &gt; &amp;fa)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="structamrex_1_1VisMF_1_1FabOnDisk" kindref="compound">VisMF::FabOnDisk</ref> &gt; &amp;</type>
          <declname>fa</declname>
        </param>
        <briefdescription>
<para>Write an Vector&lt;FabOnDisk&gt; to an ostream in ASCII. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_VisMF.cpp" line="148" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_VisMF.cpp" bodystart="149" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a35e6a4a987e55646e4f33c6827554dea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::istream &amp;</type>
        <definition>std::istream &amp; amrex::operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;is, Vector&lt; VisMF::FabOnDisk &gt; &amp;fa)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="structamrex_1_1VisMF_1_1FabOnDisk" kindref="compound">VisMF::FabOnDisk</ref> &gt; &amp;</type>
          <declname>fa</declname>
        </param>
        <briefdescription>
<para>Read an Vector&lt;FabOnDisk&gt; from an istream. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_VisMF.cpp" line="168" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_VisMF.cpp" bodystart="168" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a85a195c43f85ba86fc9f4e450117678a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>static std::ostream&amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Vector&lt; Vector&lt; Real &gt; &gt; &amp;ar)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &gt; &amp;</type>
          <declname>ar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_VisMF.cpp" line="190" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_VisMF.cpp" bodystart="191" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6b07822fe1224c3ededd1f68fce74b8b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::istream &amp;</type>
        <definition>static std::istream&amp; amrex::operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;is, Vector&lt; Vector&lt; Real &gt; &gt; &amp;ar)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &gt; &amp;</type>
          <declname>ar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_VisMF.cpp" line="216" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_VisMF.cpp" bodystart="216" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a1637e435aecce22da819f6df77982d2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const VisMF::Header &amp;hd)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1VisMF_1_1Header" kindref="compound">VisMF::Header</ref> &amp;</type>
          <declname>hd</declname>
        </param>
        <briefdescription>
<para>Write a <ref refid="structamrex_1_1VisMF_1_1Header" kindref="compound">VisMF::Header</ref> to an ostream in ASCII. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_VisMF.cpp" line="262" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_VisMF.cpp" bodystart="263" bodyend="328"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1abd04f69e01ce3c15f6788670823386e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::istream &amp;</type>
        <definition>std::istream &amp; amrex::operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;is, VisMF::Header &amp;hd)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1VisMF_1_1Header" kindref="compound">VisMF::Header</ref> &amp;</type>
          <declname>hd</declname>
        </param>
        <briefdescription>
<para>Read a <ref refid="structamrex_1_1VisMF_1_1Header" kindref="compound">VisMF::Header</ref> from an istream. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_VisMF.cpp" line="331" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_VisMF.cpp" bodystart="331" bodyend="410"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad349fb170e3e53e52b5279ce93389a43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::interpbndrydata_o1</definition>
        <argsstring>(int i, int, int, int n, Array4&lt; Real &gt; const &amp;bdry, int nb, Array4&lt; Real const &gt; const &amp;crse, int nc, Dim3 const &amp;r) noexcept</argsstring>
        <name>interpbndrydata_o1</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>j</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>k</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>bdry</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nb</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_InterpBndryData_1D_K.H" line="11" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_InterpBndryData_1D_K.H" bodystart="11" bodyend="18"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad07cc3ce8240fb608b138401e64de089" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::interpbndrydata_x_o3</definition>
        <argsstring>(int i, int, int, int n, Array4&lt; Real &gt; const &amp;bdry, int nb, Array4&lt; Real const &gt; const &amp;crse, int nc, Dim3 const &amp;r, Array4&lt; int const &gt; const &amp;, int) noexcept</argsstring>
        <name>interpbndrydata_x_o3</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>j</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>k</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>bdry</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nb</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <defname>mask</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>not_covered</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_InterpBndryData_1D_K.H" line="21" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_InterpBndryData_1D_K.H" bodystart="21" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1afc7010e1e84524c193ef45897c688d2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::interpbndrydata_y_o3</definition>
        <argsstring>(int i, int j, int, int n, Array4&lt; Real &gt; const &amp;bdry, int nb, Array4&lt; Real const &gt; const &amp;crse, int nc, Dim3 const &amp;r, Array4&lt; int const &gt; const &amp;mask, int not_covered) noexcept</argsstring>
        <name>interpbndrydata_y_o3</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>k</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>bdry</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nb</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>not_covered</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_InterpBndryData_2D_K.H" line="71" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_InterpBndryData_2D_K.H" bodystart="71" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af2bf25abc31c0e385f06936425f29c1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::interpbndrydata_z_o3</definition>
        <argsstring>(int i, int j, int k, int n, Array4&lt; Real &gt; const &amp;bdry, int nb, Array4&lt; Real const &gt; const &amp;crse, int nc, Dim3 const &amp;r, Array4&lt; int const &gt; const &amp;mask, int not_covered) noexcept</argsstring>
        <name>interpbndrydata_z_o3</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>bdry</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nb</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>not_covered</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_InterpBndryData_3D_K.H" line="87" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_InterpBndryData_3D_K.H" bodystart="87" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a326873b485cf73b0daa906dda88ee008" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const LinOpBCType &amp;t)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const LinOpBCType &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_LO_BCTYPES.cpp" line="7" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_LO_BCTYPES.cpp" bodystart="7" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a21e5b8295b57ab90e4ddd05a04ca5a85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::poly_interp_coeff</definition>
        <argsstring>(Real xInt, Real const *AMREX_RESTRICT x, int N, Real *AMREX_RESTRICT c) noexcept</argsstring>
        <name>poly_interp_coeff</name>
        <param>
          <type>Real</type>
          <declname>xInt</declname>
        </param>
        <param>
          <type>Real const *<ref refid="AMReX__Extension_8H_1a97eafbdde3320b2e8981a1d1d3936f58" kindref="member">AMREX_RESTRICT</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>N</declname>
        </param>
        <param>
          <type>Real *<ref refid="AMReX__Extension_8H_1a97eafbdde3320b2e8981a1d1d3936f58" kindref="member">AMREX_RESTRICT</ref></type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_LOUtil_K.H" line="23" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_LOUtil_K.H" bodystart="23" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a255f1f8c5e709392a949283da47211f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Mask &amp;m)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_Mask.cpp" line="29" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_Mask.cpp" bodystart="30" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aeddafb7300c5464e3bf385c510ddb5e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::istream &amp;</type>
        <definition>std::istream&amp; amrex::operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;is, Mask &amp;m)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_Mask.cpp" line="54" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_Mask.cpp" bodystart="54" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad75cd67f1791f528fbba104045280e6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::yafluxreg_crseadd</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;d, Array4&lt; int const &gt; const &amp;flag, Array4&lt; Real const &gt; const &amp;fx, Real dtdx, int nc) noexcept</argsstring>
        <name>yafluxreg_crseadd</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>flag</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dtdx</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_YAFluxRegister_1D_K.H" line="10" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_YAFluxRegister_1D_K.H" bodystart="10" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6c9d6af79aab749f067cbf51533ab31a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::yafluxreg_fineadd</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;d, Array4&lt; Real const &gt; const &amp;f, Real dtdx, int nc, int dirside, Dim3 const &amp;rr) noexcept</argsstring>
        <name>yafluxreg_fineadd</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dtdx</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dirside</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>rr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_YAFluxRegister_1D_K.H" line="33" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_YAFluxRegister_1D_K.H" bodystart="33" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a61c2415c625485ccfed2f1c7e9b9db8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::yafluxreg_crseadd</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;d, Array4&lt; int const &gt; const &amp;flag, Array4&lt; Real const &gt; const &amp;fx, Array4&lt; Real const &gt; const &amp;fy, Real dtdx, Real dtdy, int nc) noexcept</argsstring>
        <name>yafluxreg_crseadd</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>flag</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dtdx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dtdy</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_YAFluxRegister_2D_K.H" line="10" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_YAFluxRegister_2D_K.H" bodystart="10" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab2ea3b54c3008390ec817a61b805b126" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::yafluxreg_crseadd</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;d, Array4&lt; int const &gt; const &amp;flag, Array4&lt; Real const &gt; const &amp;fx, Array4&lt; Real const &gt; const &amp;fy, Array4&lt; Real const &gt; const &amp;fz, Real dtdx, Real dtdy, Real dtdz, int nc) noexcept</argsstring>
        <name>yafluxreg_crseadd</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>flag</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fz</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dtdx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dtdy</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dtdz</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_YAFluxRegister_3D_K.H" line="10" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_YAFluxRegister_3D_K.H" bodystart="10" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a432c3b4f5a385efd93de62c6402e2b0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename G</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FillImpFunc</definition>
        <argsstring>(MultiFab &amp;mf, G const &amp;gshop, Geometry const &amp;geom)</argsstring>
        <name>FillImpFunc</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>G const &amp;</type>
          <declname>gshop</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> const &amp;</type>
          <declname>geom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_utils.H" line="36" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_utils.H" bodystart="36" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aca824ed9a83373a83533e948d2175dee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::TagCutCells</definition>
        <argsstring>(TagBoxArray &amp;tags, const MultiFab &amp;state)</argsstring>
        <name>TagCutCells</name>
        <param>
          <type><ref refid="classamrex_1_1TagBoxArray" kindref="compound">TagBoxArray</ref> &amp;</type>
          <declname>tags</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBAmrUtil.cpp" line="13" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBAmrUtil.cpp" bodystart="13" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae146edcedfbd7eb8509f8c334b764d84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::TagVolfrac</definition>
        <argsstring>(TagBoxArray &amp;tags, const MultiFab &amp;volfrac, Real tol)</argsstring>
        <name>TagVolfrac</name>
        <param>
          <type><ref refid="classamrex_1_1TagBoxArray" kindref="compound">TagBoxArray</ref> &amp;</type>
          <declname>tags</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>volfrac</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>tol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBAmrUtil.cpp" line="47" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBAmrUtil.cpp" bodystart="47" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac45d936bf5764d4fc75c7d483c93afaa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const EBCellFlag &amp;flag)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> &amp;</type>
          <declname>flag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBCellFlag.cpp" line="121" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBCellFlag.cpp" bodystart="122" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad3c5c0681fda33ffa62120cefe254379" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1EBFArrayBoxFactory" kindref="compound">EBFArrayBoxFactory</ref> &gt;</type>
        <definition>std::unique_ptr&lt; EBFArrayBoxFactory &gt; amrex::makeEBFabFactory</definition>
        <argsstring>(const Geometry &amp;a_geom, const BoxArray &amp;a_ba, const DistributionMapping &amp;a_dm, const Vector&lt; int &gt; &amp;a_ngrow, EBSupport a_support)</argsstring>
        <name>makeEBFabFactory</name>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>a_geom</declname>
        </param>
        <param>
          <type>const BoxArray &amp;</type>
          <declname>a_ba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>a_dm</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>a_ngrow</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a7de82761ed632e5ee0b9f912c856aebc" kindref="member">EBSupport</ref></type>
          <declname>a_support</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.cpp" line="110" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.cpp" bodystart="110" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a734109fb8bb0358b898b2cafc191c8df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1EBFArrayBoxFactory" kindref="compound">EBFArrayBoxFactory</ref> &gt;</type>
        <definition>std::unique_ptr&lt; EBFArrayBoxFactory &gt; amrex::makeEBFabFactory</definition>
        <argsstring>(const EB2::Level *eb_level, const BoxArray &amp;a_ba, const DistributionMapping &amp;a_dm, const Vector&lt; int &gt; &amp;a_ngrow, EBSupport a_support)</argsstring>
        <name>makeEBFabFactory</name>
        <param>
          <type>const <ref refid="classamrex_1_1EB2_1_1Level" kindref="compound">EB2::Level</ref> *</type>
          <declname>eb_level</declname>
        </param>
        <param>
          <type>const BoxArray &amp;</type>
          <declname>a_ba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>a_dm</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>a_ngrow</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a7de82761ed632e5ee0b9f912c856aebc" kindref="member">EBSupport</ref></type>
          <declname>a_support</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.cpp" line="123" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.cpp" bodystart="123" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aeb1b764088e7533c8b78b4fea2170c51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1EBFArrayBoxFactory" kindref="compound">EBFArrayBoxFactory</ref> &gt;</type>
        <definition>std::unique_ptr&lt; EBFArrayBoxFactory &gt; amrex::makeEBFabFactory</definition>
        <argsstring>(const EB2::IndexSpace *index_space, const Geometry &amp;a_geom, const BoxArray &amp;a_ba, const DistributionMapping &amp;a_dm, const Vector&lt; int &gt; &amp;a_ngrow, EBSupport a_support)</argsstring>
        <name>makeEBFabFactory</name>
        <param>
          <type>const <ref refid="classamrex_1_1EB2_1_1IndexSpace" kindref="compound">EB2::IndexSpace</ref> *</type>
          <declname>index_space</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>a_geom</declname>
        </param>
        <param>
          <type>const BoxArray &amp;</type>
          <declname>a_ba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>a_dm</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>a_ngrow</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a7de82761ed632e5ee0b9f912c856aebc" kindref="member">EBSupport</ref></type>
          <declname>a_support</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.cpp" line="134" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.cpp" bodystart="134" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa4a3bfe1c0cd2c7c8632d1f0ee21b2ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1EBCellFlagFab" kindref="compound">EBCellFlagFab</ref> &amp;</type>
        <definition>const EBCellFlagFab &amp; amrex::getEBCellFlagFab</definition>
        <argsstring>(const FArrayBox &amp;fab)</argsstring>
        <name>getEBCellFlagFab</name>
        <param>
          <type>const <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>fab</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFArrayBox.cpp" line="41" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFArrayBox.cpp" bodystart="41" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa15c295b806f5850e12b44898ed71150" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::eb_flux_reg_crseadd_va</definition>
        <argsstring>(int i, int j, int k, Array4&lt; Real &gt; const &amp;d, Array4&lt; int const &gt; const &amp;flag, Array4&lt; Real const &gt; const &amp;fx, Array4&lt; Real const &gt; const &amp;fy, Array4&lt; Real const &gt; const &amp;vfrac, Array4&lt; Real const &gt; const &amp;ax, Array4&lt; Real const &gt; const &amp;ay, Real dtdx, Real dtdy)</argsstring>
        <name>eb_flux_reg_crseadd_va</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>flag</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vfrac</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ax</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ay</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dtdx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dtdy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFluxRegister_2D_C.H" line="8" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFluxRegister_2D_C.H" bodystart="8" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a15dc2901e84865ab7ca819e913967f1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::eb_flux_reg_fineadd_va_xlo</definition>
        <argsstring>(int i, int j, int k, int n, Array4&lt; Real &gt; const &amp;d, Array4&lt; Real const &gt; const &amp;f, Array4&lt; Real const &gt; const &amp;vfrac, Array4&lt; Real const &gt; const &amp;a, Real fac, Dim3 const &amp;ratio)</argsstring>
        <name>eb_flux_reg_fineadd_va_xlo</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vfrac</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>fac</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFluxRegister_2D_C.H" line="63" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFluxRegister_2D_C.H" bodystart="63" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1abd990a563d63d022c9b09433c621015f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::eb_flux_reg_fineadd_va_xhi</definition>
        <argsstring>(int i, int j, int k, int n, Array4&lt; Real &gt; const &amp;d, Array4&lt; Real const &gt; const &amp;f, Array4&lt; Real const &gt; const &amp;vfrac, Array4&lt; Real const &gt; const &amp;a, Real fac, Dim3 const &amp;ratio)</argsstring>
        <name>eb_flux_reg_fineadd_va_xhi</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vfrac</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>fac</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFluxRegister_2D_C.H" line="81" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFluxRegister_2D_C.H" bodystart="81" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a72c1982bd1003fddcf274e2fd059fc87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::eb_flux_reg_fineadd_va_ylo</definition>
        <argsstring>(int i, int j, int k, int n, Array4&lt; Real &gt; const &amp;d, Array4&lt; Real const &gt; const &amp;f, Array4&lt; Real const &gt; const &amp;vfrac, Array4&lt; Real const &gt; const &amp;a, Real fac, Dim3 const &amp;ratio)</argsstring>
        <name>eb_flux_reg_fineadd_va_ylo</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vfrac</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>fac</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFluxRegister_2D_C.H" line="99" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFluxRegister_2D_C.H" bodystart="99" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a555d147b281a1bfa308507ecc5b628be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::eb_flux_reg_fineadd_va_yhi</definition>
        <argsstring>(int i, int j, int k, int n, Array4&lt; Real &gt; const &amp;d, Array4&lt; Real const &gt; const &amp;f, Array4&lt; Real const &gt; const &amp;vfrac, Array4&lt; Real const &gt; const &amp;a, Real fac, Dim3 const &amp;ratio)</argsstring>
        <name>eb_flux_reg_fineadd_va_yhi</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vfrac</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>fac</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFluxRegister_2D_C.H" line="117" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFluxRegister_2D_C.H" bodystart="117" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a5c2977ac92fe83060eb9443dde71cdd5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::eb_flux_reg_fineadd_dm</definition>
        <argsstring>(int i, int j, int k, int n, Box const &amp;dmbx, Array4&lt; Real &gt; const &amp;d, Array4&lt; Real const &gt; const &amp;dm, Array4&lt; Real const &gt; const &amp;vfrac, Dim3 const &amp;ratio, Real threshold)</argsstring>
        <name>eb_flux_reg_fineadd_dm</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>dmbx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>dm</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vfrac</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>threshold</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFluxRegister_2D_C.H" line="135" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFluxRegister_2D_C.H" bodystart="135" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac9df63fc752ddecfc0659aa645670462" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::eb_rereflux_from_crse</definition>
        <argsstring>(int i, int j, int k, int n, Box const &amp;bx, Array4&lt; Real &gt; const &amp;d, Array4&lt; Real const &gt; const &amp;s, Array4&lt; int const &gt; const &amp;amrflg, Array4&lt; EBCellFlag const &gt; const &amp;ebflg, Array4&lt; Real const &gt; const &amp;vfrac)</argsstring>
        <name>eb_rereflux_from_crse</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>amrflg</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> const &gt; const &amp;</type>
          <declname>ebflg</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vfrac</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFluxRegister_2D_C.H" line="154" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFluxRegister_2D_C.H" bodystart="154" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a0c65969b354bed7478ab5716942fdbad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::eb_rereflux_to_fine</definition>
        <argsstring>(int i, int j, int, int n, Array4&lt; Real &gt; const &amp;d, Array4&lt; Real const &gt; const &amp;s, Array4&lt; int const &gt; const &amp;msk, Dim3 ratio)</argsstring>
        <name>eb_rereflux_to_fine</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>k</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>msk</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFluxRegister_2D_C.H" line="197" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFluxRegister_2D_C.H" bodystart="197" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad88229550040a794c1b560b1db6ecdc2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::eb_flux_reg_crseadd_va</definition>
        <argsstring>(int i, int j, int k, Array4&lt; Real &gt; const &amp;d, Array4&lt; int const &gt; const &amp;flag, Array4&lt; Real const &gt; const &amp;fx, Array4&lt; Real const &gt; const &amp;fy, Array4&lt; Real const &gt; const &amp;fz, Array4&lt; Real const &gt; const &amp;vfrac, Array4&lt; Real const &gt; const &amp;ax, Array4&lt; Real const &gt; const &amp;ay, Array4&lt; Real const &gt; const &amp;az, Real dtdx, Real dtdy, Real dtdz)</argsstring>
        <name>eb_flux_reg_crseadd_va</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>flag</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vfrac</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ax</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ay</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>az</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dtdx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dtdy</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dtdz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFluxRegister_3D_C.H" line="8" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFluxRegister_3D_C.H" bodystart="8" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a3566e756881f6092d91efc03b9529d1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::eb_flux_reg_fineadd_va_zlo</definition>
        <argsstring>(int i, int j, int k, int n, Array4&lt; Real &gt; const &amp;d, Array4&lt; Real const &gt; const &amp;f, Array4&lt; Real const &gt; const &amp;vfrac, Array4&lt; Real const &gt; const &amp;a, Real fac, Dim3 const &amp;ratio)</argsstring>
        <name>eb_flux_reg_fineadd_va_zlo</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vfrac</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>fac</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFluxRegister_3D_C.H" line="153" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFluxRegister_3D_C.H" bodystart="153" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad52e53deaf4b675c315293a57f6958c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::eb_flux_reg_fineadd_va_zhi</definition>
        <argsstring>(int i, int j, int k, int n, Array4&lt; Real &gt; const &amp;d, Array4&lt; Real const &gt; const &amp;f, Array4&lt; Real const &gt; const &amp;vfrac, Array4&lt; Real const &gt; const &amp;a, Real fac, Dim3 const &amp;ratio)</argsstring>
        <name>eb_flux_reg_fineadd_va_zhi</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vfrac</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>fac</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFluxRegister_3D_C.H" line="172" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFluxRegister_3D_C.H" bodystart="172" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a3baedaa2c05dc91fb1b9b36dc61e128d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EB_set_covered</definition>
        <argsstring>(MultiFab &amp;mf, Real val)</argsstring>
        <name>EB_set_covered</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" line="21" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" bodystart="21" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac619d99ccf677b91c436697814e9a3c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EB_set_covered</definition>
        <argsstring>(MultiFab &amp;mf, int icomp, int ncomp, int ngrow, Real val)</argsstring>
        <name>EB_set_covered</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>icomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngrow</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" line="27" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" bodystart="27" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a5d1f42bca3823efe8ae8998c9a1ae08e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EB_set_covered</definition>
        <argsstring>(MultiFab &amp;mf, int icomp, int ncomp, const Vector&lt; Real &gt; &amp;vals)</argsstring>
        <name>EB_set_covered</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>icomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &amp;</type>
          <declname>vals</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" line="63" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" bodystart="63" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae0a59d2ee3fb91d65cc6effb267f0a6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EB_set_covered</definition>
        <argsstring>(MultiFab &amp;mf, int icomp, int ncomp, int ngrow, const Vector&lt; Real &gt; &amp;a_vals)</argsstring>
        <name>EB_set_covered</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>icomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngrow</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &amp;</type>
          <declname>a_vals</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" line="69" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" bodystart="69" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a233a16599969d91372d51e1befabcbfc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EB_set_covered_faces</definition>
        <argsstring>(const Array&lt; MultiFab *, AMREX_SPACEDIM &gt; &amp;umac, Real val)</argsstring>
        <name>EB_set_covered_faces</name>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>umac</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" line="109" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" bodystart="109" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a77d795b6dab3e839da24a64b46179295" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EB_set_covered_faces</definition>
        <argsstring>(const Array&lt; MultiFab *, AMREX_SPACEDIM &gt; &amp;umac, const int scomp, const int ncomp, const Vector&lt; Real &gt; &amp;a_vals)</argsstring>
        <name>EB_set_covered_faces</name>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>umac</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &amp;</type>
          <declname>a_vals</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" line="220" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" bodystart="220" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a83baea24aee17c98e8771fa6eea0822f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EB_average_down</definition>
        <argsstring>(const MultiFab &amp;S_fine, MultiFab &amp;S_crse, const MultiFab &amp;vol_fine, const MultiFab &amp;vfrac_fine, int scomp, int ncomp, const IntVect &amp;ratio)</argsstring>
        <name>EB_average_down</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>S_fine</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>S_crse</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>vol_fine</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>vfrac_fine</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" line="336" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" bodystart="336" bodyend="390"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aeb1fc4ae4ef7edec76f3784f1ca78aed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EB_average_down</definition>
        <argsstring>(const MultiFab &amp;S_fine, MultiFab &amp;S_crse, int scomp, int ncomp, int ratio)</argsstring>
        <name>EB_average_down</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>S_fine</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>S_crse</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" line="394" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" bodystart="394" bodyend="397"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a88b5f551ff31c821df1efef0a1983c7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EB_average_down</definition>
        <argsstring>(const MultiFab &amp;S_fine, MultiFab &amp;S_crse, int scomp, int ncomp, const IntVect &amp;ratio)</argsstring>
        <name>EB_average_down</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>S_fine</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>S_crse</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" line="400" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" bodystart="400" bodyend="497"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a3df9dbf65687fa616a98a6be2789eedd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EB_average_down_faces</definition>
        <argsstring>(const Array&lt; const MultiFab *, AMREX_SPACEDIM &gt; &amp;fine, const Array&lt; MultiFab *, AMREX_SPACEDIM &gt; &amp;crse, int ratio, int ngcrse)</argsstring>
        <name>EB_average_down_faces</name>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ratio</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngcrse</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" line="500" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" bodystart="500" bodyend="505"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a2e516c0390423c9e5017de317c562c6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EB_average_down_faces</definition>
        <argsstring>(const Array&lt; const MultiFab *, AMREX_SPACEDIM &gt; &amp;fine, const Array&lt; MultiFab *, AMREX_SPACEDIM &gt; &amp;crse, const IntVect &amp;ratio, int ngcrse)</argsstring>
        <name>EB_average_down_faces</name>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngcrse</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" line="507" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" bodystart="507" bodyend="588"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa60b978d9a863b96aa439f2009fb05f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EB_average_down_faces</definition>
        <argsstring>(const Array&lt; const MultiFab *, AMREX_SPACEDIM &gt; &amp;fine, const Array&lt; MultiFab *, AMREX_SPACEDIM &gt; &amp;crse, const IntVect &amp;ratio, const Geometry &amp;crse_geom)</argsstring>
        <name>EB_average_down_faces</name>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>crse_geom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" line="590" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" bodystart="590" bodyend="617"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae62657fb0ffcd40a902dc22f0c64906f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EB_average_down_boundaries</definition>
        <argsstring>(const MultiFab &amp;fine, MultiFab &amp;crse, int ratio, int ngcrse)</argsstring>
        <name>EB_average_down_boundaries</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ratio</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngcrse</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" line="619" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" bodystart="619" bodyend="623"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a58c0a1915ef06b92abe238304db2cc14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EB_average_down_boundaries</definition>
        <argsstring>(const MultiFab &amp;fine, MultiFab &amp;crse, const IntVect &amp;ratio, int ngcrse)</argsstring>
        <name>EB_average_down_boundaries</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngcrse</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" line="625" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" bodystart="625" bodyend="678"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aac572002c16db8070f5ffaf6afaf1b87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EB_computeDivergence</definition>
        <argsstring>(MultiFab &amp;divu, const Array&lt; MultiFab const *, AMREX_SPACEDIM &gt; &amp;umac, const Geometry &amp;geom, bool already_on_centroids)</argsstring>
        <name>EB_computeDivergence</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>divu</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> const *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>umac</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>already_on_centroids</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" line="681" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" bodystart="681" bodyend="754"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a2ca083595ee0a76ca027da372fadf716" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EB_average_face_to_cellcenter</definition>
        <argsstring>(MultiFab &amp;ccmf, int dcomp, const Array&lt; MultiFab const *, AMREX_SPACEDIM &gt; &amp;fmf)</argsstring>
        <name>EB_average_face_to_cellcenter</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>ccmf</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> const *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>fmf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" line="757" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" bodystart="757" bodyend="809"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aacd5723b8bb544b8feedee372294e10c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EB_interp_CC_to_Centroid</definition>
        <argsstring>(MultiFab &amp;cent, const MultiFab &amp;cc, int scomp, int dcomp, int ncomp, const Geometry &amp;geom)</argsstring>
        <name>EB_interp_CC_to_Centroid</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>cent</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>cc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" line="812" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" bodystart="812" bodyend="859"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1abcbe7f0f5cd9b990c3b3946e3b0419c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EB_interp_CC_to_FaceCentroid</definition>
        <argsstring>(const MultiFab &amp;cc, AMREX_D_DECL(MultiFab &amp;fc_x, MultiFab &amp;fc_y, MultiFab &amp;fc_z), int scomp, int dcomp, int ncomp, const Geometry &amp;a_geom, const Vector&lt; BCRec &gt; &amp;a_bcs)</argsstring>
        <name>EB_interp_CC_to_FaceCentroid</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>cc</declname>
        </param>
        <param>
          <type>AMREX_D_DECL(<ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;fc_x, <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;fc_y, <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;fc_z)</type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>a_geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> &gt; &amp;</type>
          <declname>a_bcs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" line="862" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" bodystart="862" bodyend="973"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a25f1af042b358543413af13507e891e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EB_interp_CellCentroid_to_FaceCentroid</definition>
        <argsstring>(const MultiFab &amp;phi_centroid, const Array&lt; MultiFab *, AMREX_SPACEDIM &gt; &amp;phi_faces, int scomp, int dcomp, int nc, const Geometry &amp;geom, const amrex::Vector&lt; amrex::BCRec &gt; &amp;a_bcs)</argsstring>
        <name>EB_interp_CellCentroid_to_FaceCentroid</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>phi_centroid</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>phi_faces</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nc</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">amrex::Vector</ref>&lt; <ref refid="classamrex_1_1BCRec" kindref="compound">amrex::BCRec</ref> &gt; &amp;</type>
          <declname>a_bcs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" line="976" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" bodystart="976" bodyend="984"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6b3ef69b690c278cac681e47fc273e89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EB_interp_CellCentroid_to_FaceCentroid</definition>
        <argsstring>(const MultiFab &amp;phi_centroid, const Vector&lt; MultiFab *&gt; &amp;phi_faces, int scomp, int dcomp, int nc, const Geometry &amp;geom, const amrex::Vector&lt; amrex::BCRec &gt; &amp;a_bcs)</argsstring>
        <name>EB_interp_CellCentroid_to_FaceCentroid</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>phi_centroid</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *&gt; &amp;</type>
          <declname>phi_faces</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nc</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">amrex::Vector</ref>&lt; <ref refid="classamrex_1_1BCRec" kindref="compound">amrex::BCRec</ref> &gt; &amp;</type>
          <declname>a_bcs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" line="987" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" bodystart="987" bodyend="995"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a84f2fd1d8faaa80410294ddfc4c4158f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EB_interp_CellCentroid_to_FaceCentroid</definition>
        <argsstring>(const MultiFab &amp;phi_centroid, AMREX_D_DECL(MultiFab &amp;phi_xface, MultiFab &amp;phi_yface, MultiFab &amp;phi_zface), int scomp, int dcomp, int ncomp, const Geometry &amp;a_geom, const Vector&lt; BCRec &gt; &amp;a_bcs)</argsstring>
        <name>EB_interp_CellCentroid_to_FaceCentroid</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>phi_centroid</declname>
        </param>
        <param>
          <type>AMREX_D_DECL(<ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;phi_xface, <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;phi_yface, <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;phi_zface)</type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>a_geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> &gt; &amp;</type>
          <declname>a_bcs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" line="998" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" bodystart="998" bodyend="1116"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a3aea21f769cc7ae99c74c237e4ed85ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EB_interp_CC_to_FaceCentroid</definition>
        <argsstring>(const MultiFab &amp;cc, AMREX_D_DECL(MultiFab &amp;fcx, MultiFab &amp;fcy, MultiFab &amp;fcz), int scomp, int dcomp, int nc, const Geometry &amp;geom, const amrex::Vector&lt; amrex::BCRec &gt; &amp;a_bcs)</argsstring>
        <name>EB_interp_CC_to_FaceCentroid</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>cc</declname>
        </param>
        <param>
          <type>AMREX_D_DECL(<ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;fcx, <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;fcy, <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;fcz)</type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nc</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">amrex::Vector</ref>&lt; <ref refid="classamrex_1_1BCRec" kindref="compound">amrex::BCRec</ref> &gt; &amp;</type>
          <declname>a_bcs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.H" line="56" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a81a28cf9f5aa320028c3b2d0c339c310" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::eb_set_covered_nodes</definition>
        <argsstring>(int i, int j, int k, int n, int icomp, Array4&lt; Real &gt; const &amp;d, Array4&lt; EBCellFlag const &gt; const &amp;f, Real v)</argsstring>
        <name>eb_set_covered_nodes</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>icomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> const &gt; const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_2D_C.H" line="8" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_2D_C.H" bodystart="8" bodyend="16"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1acb2c690637db28c101b2fafe2ea346e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::eb_set_covered_nodes</definition>
        <argsstring>(int i, int j, int k, int n, int icomp, Array4&lt; Real &gt; const &amp;d, Array4&lt; EBCellFlag const &gt; const &amp;f, Real const *AMREX_RESTRICT v)</argsstring>
        <name>eb_set_covered_nodes</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>icomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> const &gt; const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>Real const *<ref refid="AMReX__Extension_8H_1a97eafbdde3320b2e8981a1d1d3936f58" kindref="member">AMREX_RESTRICT</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_2D_C.H" line="19" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_2D_C.H" bodystart="19" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6623c7b82f9de6404f5b9fe0d27a0fd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::eb_avgdown_with_vol</definition>
        <argsstring>(int i, int j, int k, Array4&lt; Real const &gt; const &amp;fine, int fcomp, Array4&lt; Real &gt; const &amp;crse, int ccomp, Array4&lt; Real const &gt; const &amp;fv, Array4&lt; Real const &gt; const &amp;vfrc, Dim3 const &amp;ratio, int ncomp)</argsstring>
        <name>eb_avgdown_with_vol</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fcomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ccomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fv</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vfrc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_2D_C.H" line="30" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_2D_C.H" bodystart="30" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a658f71f1a20f1c31976ad401e53e28cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::eb_avgdown</definition>
        <argsstring>(int i, int j, int k, Array4&lt; Real const &gt; const &amp;fine, int fcomp, Array4&lt; Real &gt; const &amp;crse, int ccomp, Array4&lt; Real const &gt; const &amp;vfrc, Dim3 const &amp;ratio, int ncomp)</argsstring>
        <name>eb_avgdown</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fcomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ccomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vfrc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_2D_C.H" line="55" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_2D_C.H" bodystart="55" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a380b65228c4871b5d99c5ea571dcc589" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::eb_avgdown_face_x</definition>
        <argsstring>(int i, int j, int k, Array4&lt; Real const &gt; const &amp;fine, int fcomp, Array4&lt; Real &gt; const &amp;crse, int ccomp, Array4&lt; Real const &gt; const &amp;area, Dim3 const &amp;ratio, int ncomp)</argsstring>
        <name>eb_avgdown_face_x</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fcomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ccomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>area</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_2D_C.H" line="80" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_2D_C.H" bodystart="80" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a161acc43339f8040a3b3d85822ccba68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::eb_avgdown_face_y</definition>
        <argsstring>(int i, int j, int k, Array4&lt; Real const &gt; const &amp;fine, int fcomp, Array4&lt; Real &gt; const &amp;crse, int ccomp, Array4&lt; Real const &gt; const &amp;area, Dim3 const &amp;ratio, int ncomp)</argsstring>
        <name>eb_avgdown_face_y</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fcomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ccomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>area</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_2D_C.H" line="105" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_2D_C.H" bodystart="105" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a538016b8eefb9144d408402eec36d390" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::eb_avgdown_boundaries</definition>
        <argsstring>(int i, int j, int k, Array4&lt; Real const &gt; const &amp;fine, int fcomp, Array4&lt; Real &gt; const &amp;crse, int ccomp, Array4&lt; Real const &gt; const &amp;ba, Dim3 const &amp;ratio, int ncomp)</argsstring>
        <name>eb_avgdown_boundaries</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fcomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ccomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_2D_C.H" line="130" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_2D_C.H" bodystart="130" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a3375fdd1a2093dffe1bd183a9819a8d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::eb_compute_divergence</definition>
        <argsstring>(int i, int j, int k, int n, Array4&lt; Real &gt; const &amp;divu, Array4&lt; Real const &gt; const &amp;u, Array4&lt; Real const &gt; const &amp;v, Array4&lt; int const &gt; const &amp;ccm, Array4&lt; EBCellFlag const &gt; const &amp;flag, Array4&lt; Real const &gt; const &amp;vfrc, Array4&lt; Real const &gt; const &amp;apx, Array4&lt; Real const &gt; const &amp;apy, Array4&lt; Real const &gt; const &amp;fcx, Array4&lt; Real const &gt; const &amp;fcy, GpuArray&lt; Real, 2 &gt; const &amp;dxinv, bool already_on_centroids)</argsstring>
        <name>eb_compute_divergence</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>divu</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>ccm</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> const &gt; const &amp;</type>
          <declname>flag</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vfrc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, 2 &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>already_on_centroids</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_2D_C.H" line="155" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_2D_C.H" bodystart="155" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a503e7a0c62d731776b177f78bd6cc61a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::eb_avg_fc_to_cc</definition>
        <argsstring>(int i, int j, int k, int n, Array4&lt; Real &gt; const &amp;cc, Array4&lt; Real const &gt; const &amp;fx, Array4&lt; Real const &gt; const &amp;fy, Array4&lt; Real const &gt; const &amp;ax, Array4&lt; Real const &gt; const &amp;ay, Array4&lt; EBCellFlag const &gt; const &amp;flag)</argsstring>
        <name>eb_avg_fc_to_cc</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>cc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ax</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ay</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> const &gt; const &amp;</type>
          <declname>flag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_2D_C.H" line="215" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_2D_C.H" bodystart="215" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1adc1ea19abb66c0912bd6b989b80c5f98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::eb_interp_cc2cent</definition>
        <argsstring>(Box const &amp;box, const Array4&lt; Real &gt; &amp;phicent, Array4&lt; Real const &gt; const &amp;phicc, Array4&lt; EBCellFlag const &gt; const &amp;flag, Array4&lt; Real const &gt; const &amp;cent, int ncomp) noexcept</argsstring>
        <name>eb_interp_cc2cent</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; &amp;</type>
          <declname>phicent</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>phicc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> const &gt; const &amp;</type>
          <declname>flag</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>cent</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_2D_C.H" line="243" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_2D_C.H" bodystart="243" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af64d03e8a7ef3fe431ad37a22d8da69e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::eb_interp_cc2facecent_x</definition>
        <argsstring>(Box const &amp;ubx, Array4&lt; Real const &gt; const &amp;phi, Array4&lt; Real const &gt; const &amp;apx, Array4&lt; Real const &gt; const &amp;fcx, Array4&lt; Real &gt; const &amp;edg_x, int ncomp, const Box &amp;domain, const BCRec *bc) noexcept</argsstring>
        <name>eb_interp_cc2facecent_x</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>ubx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>edg_x</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>domain</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> *</type>
          <declname>bc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_2D_C.H" line="282" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_2D_C.H" bodystart="282" bodyend="330"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa19f43092081da4b158d6417ba6ef650" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::eb_interp_cc2facecent_y</definition>
        <argsstring>(Box const &amp;vbx, Array4&lt; Real const &gt; const &amp;phi, Array4&lt; Real const &gt; const &amp;apy, Array4&lt; Real const &gt; const &amp;fcy, Array4&lt; Real &gt; const &amp;edg_y, int ncomp, const Box &amp;domain, const BCRec *bc) noexcept</argsstring>
        <name>eb_interp_cc2facecent_y</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>vbx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>edg_y</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>domain</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> *</type>
          <declname>bc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_2D_C.H" line="333" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_2D_C.H" bodystart="333" bodyend="381"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1afbe495de221a8edcb3e8566f047353be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::eb_interp_centroid2facecent_x</definition>
        <argsstring>(Box const &amp;ubx, Array4&lt; Real const &gt; const &amp;phi, Array4&lt; Real const &gt; const &amp;apx, Array4&lt; Real const &gt; const &amp;cvol, Array4&lt; Real const &gt; const &amp;ccent, Array4&lt; Real const &gt; const &amp;fcx, Array4&lt; Real &gt; const &amp;edg_x, int ncomp, const Box &amp;domain, const BCRec *bc) noexcept</argsstring>
        <name>eb_interp_centroid2facecent_x</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>ubx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>cvol</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ccent</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>edg_x</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>domain</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> *</type>
          <declname>bc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_2D_C.H" line="384" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_2D_C.H" bodystart="384" bodyend="442"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a20f22656c1c33ddd41b9bf6ff16ce05a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::eb_interp_centroid2facecent_y</definition>
        <argsstring>(Box const &amp;vbx, Array4&lt; Real const &gt; const &amp;phi, Array4&lt; Real const &gt; const &amp;apy, Array4&lt; Real const &gt; const &amp;cvol, Array4&lt; Real const &gt; const &amp;ccent, Array4&lt; Real const &gt; const &amp;fcy, Array4&lt; Real &gt; const &amp;edg_y, int ncomp, const Box &amp;domain, const BCRec *bc) noexcept</argsstring>
        <name>eb_interp_centroid2facecent_y</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>vbx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>cvol</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ccent</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>edg_y</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>domain</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> *</type>
          <declname>bc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_2D_C.H" line="445" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_2D_C.H" bodystart="445" bodyend="503"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aadf288d4a98ac6d06932233e76bc1573" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::eb_interp_cc2face_x</definition>
        <argsstring>(Box const &amp;ubx, Array4&lt; Real const &gt; const &amp;phi, Array4&lt; Real &gt; const &amp;edg_x, int ncomp, const Box &amp;domain, const BCRec *bc) noexcept</argsstring>
        <name>eb_interp_cc2face_x</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>ubx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>edg_x</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>domain</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> *</type>
          <declname>bc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_2D_C.H" line="506" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_2D_C.H" bodystart="506" bodyend="530"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac23db9d46e2b4c90a98ed2c43d84f05f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::eb_interp_cc2face_y</definition>
        <argsstring>(Box const &amp;vbx, Array4&lt; Real const &gt; const &amp;phi, Array4&lt; Real &gt; const &amp;edg_y, int ncomp, const Box &amp;domain, const BCRec *bc) noexcept</argsstring>
        <name>eb_interp_cc2face_y</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>vbx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>edg_y</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>domain</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> *</type>
          <declname>bc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_2D_C.H" line="533" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_2D_C.H" bodystart="533" bodyend="557"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aefcca7679b76de3867191843450d69f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> Real</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Real amrex::EB_interp_in_quad</definition>
        <argsstring>(Real xint, Real yint, Real v0, Real v1, Real v2, Real v3, Real x0, Real y0, Real x1, Real y1, Real x2, Real y2, Real x3, Real y3)</argsstring>
        <name>EB_interp_in_quad</name>
        <param>
          <type>Real</type>
          <declname>xint</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>yint</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>v0</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>v2</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>v3</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>x0</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>y0</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>y1</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>x2</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>y2</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>x3</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>y3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_3D_C.H" line="9" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_3D_C.H" bodystart="9" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a300e308bc865c0b06a1955edbf787019" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::eb_avgdown_face_z</definition>
        <argsstring>(int i, int j, int k, Array4&lt; Real const &gt; const &amp;fine, int fcomp, Array4&lt; Real &gt; const &amp;crse, int ccomp, Array4&lt; Real const &gt; const &amp;area, Dim3 const &amp;ratio, int ncomp)</argsstring>
        <name>eb_avgdown_face_z</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fcomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ccomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>area</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_3D_C.H" line="176" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_3D_C.H" bodystart="176" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa59d455887dcc9ddd95b58158df99a8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::eb_compute_divergence</definition>
        <argsstring>(int i, int j, int k, int n, Array4&lt; Real &gt; const &amp;divu, Array4&lt; Real const &gt; const &amp;u, Array4&lt; Real const &gt; const &amp;v, Array4&lt; Real const &gt; const &amp;w, Array4&lt; int const &gt; const &amp;ccm, Array4&lt; EBCellFlag const &gt; const &amp;flag, Array4&lt; Real const &gt; const &amp;vfrc, Array4&lt; Real const &gt; const &amp;apx, Array4&lt; Real const &gt; const &amp;apy, Array4&lt; Real const &gt; const &amp;apz, Array4&lt; Real const &gt; const &amp;fcx, Array4&lt; Real const &gt; const &amp;fcy, Array4&lt; Real const &gt; const &amp;fcz, GpuArray&lt; Real, 3 &gt; const &amp;dxinv, bool already_on_centroids)</argsstring>
        <name>eb_compute_divergence</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>divu</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>w</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>ccm</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> const &gt; const &amp;</type>
          <declname>flag</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vfrc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, 3 &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>already_on_centroids</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_3D_C.H" line="226" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_3D_C.H" bodystart="226" bodyend="331"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a7ca548557a81e714b0e5aa66407d548a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::eb_avg_fc_to_cc</definition>
        <argsstring>(int i, int j, int k, int n, Array4&lt; Real &gt; const &amp;cc, Array4&lt; Real const &gt; const &amp;fx, Array4&lt; Real const &gt; const &amp;fy, Array4&lt; Real const &gt; const &amp;fz, Array4&lt; Real const &gt; const &amp;ax, Array4&lt; Real const &gt; const &amp;ay, Array4&lt; Real const &gt; const &amp;az, Array4&lt; EBCellFlag const &gt; const &amp;flag)</argsstring>
        <name>eb_avg_fc_to_cc</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>cc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ax</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ay</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>az</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> const &gt; const &amp;</type>
          <declname>flag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_3D_C.H" line="334" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_3D_C.H" bodystart="334" bodyend="369"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8289b410d7cd4e0064c73db4d361e733" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::eb_interp_cc2facecent_z</definition>
        <argsstring>(Box const &amp;wbx, Array4&lt; Real const &gt; const &amp;phi, Array4&lt; Real const &gt; const &amp;apz, Array4&lt; Real const &gt; const &amp;fcz, Array4&lt; Real &gt; const &amp;edg_z, int ncomp, const Box &amp;domain, const BCRec *bc) noexcept</argsstring>
        <name>eb_interp_cc2facecent_z</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>wbx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>edg_z</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>domain</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> *</type>
          <declname>bc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_3D_C.H" line="547" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_3D_C.H" bodystart="547" bodyend="607"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1abae204af4eca5590b6fbdbdf3ea38c26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::eb_interp_centroid2facecent_z</definition>
        <argsstring>(Box const &amp;wbx, Array4&lt; Real const &gt; const &amp;phi, Array4&lt; Real const &gt; const &amp;apz, Array4&lt; Real const &gt; const &amp;cvol, Array4&lt; Real const &gt; const &amp;ccent, Array4&lt; Real const &gt; const &amp;fcz, Array4&lt; Real &gt; const &amp;phi_z, int ncomp, const Box &amp;domain, const BCRec *bc) noexcept</argsstring>
        <name>eb_interp_centroid2facecent_z</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>wbx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>cvol</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ccent</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>phi_z</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>domain</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> *</type>
          <declname>bc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_3D_C.H" line="987" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_3D_C.H" bodystart="987" bodyend="1171"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af8f47a8a092ea7a3e0b853f65bc0e605" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::eb_interp_cc2face_z</definition>
        <argsstring>(Box const &amp;wbx, Array4&lt; Real const &gt; const &amp;phi, Array4&lt; Real &gt; const &amp;edg_z, int ncomp, const Box &amp;domain, const BCRec *bc) noexcept</argsstring>
        <name>eb_interp_cc2face_z</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>wbx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>edg_z</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>domain</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> *</type>
          <declname>bc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_3D_C.H" line="1228" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_3D_C.H" bodystart="1228" bodyend="1252"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a39109bb21761f9999a91aba81f033cac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::WriteEBSurface</definition>
        <argsstring>(const BoxArray &amp;ba, const DistributionMapping &amp;dmap, const Geometry &amp;geom, const EBFArrayBoxFactory *ebf)</argsstring>
        <name>WriteEBSurface</name>
        <param>
          <type>const BoxArray &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dmap</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1EBFArrayBoxFactory" kindref="compound">EBFArrayBoxFactory</ref> *</type>
          <declname>ebf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_WriteEBSurface.cpp" line="13" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_WriteEBSurface.cpp" bodystart="13" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad7264613b707b22141772f8dc1ebf855" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::WriteEBSurface</definition>
        <argsstring>(const amrex::BoxArray &amp;ba, const amrex::DistributionMapping &amp;dmap, const amrex::Geometry &amp;geom, const amrex::EBFArrayBoxFactory *ebf)</argsstring>
        <name>WriteEBSurface</name>
        <param>
          <type>const amrex::BoxArray &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">amrex::DistributionMapping</ref> &amp;</type>
          <declname>dmap</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">amrex::Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1EBFArrayBoxFactory" kindref="compound">amrex::EBFArrayBoxFactory</ref> *</type>
          <declname>ebf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_WriteEBSurface.H" line="12" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a17c3385e552cf94569d659f23f73506e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::Nestsets</definition>
        <argsstring>(const int level, const int n_levels, const FArrayBox &amp;fab, const Vector&lt; const BoxArray *&gt; box_arrays, const Vector&lt; IntVect &gt; &amp;ref_ratio, const Vector&lt; int &gt; &amp;domain_offsets, conduit::Node &amp;nestset)</argsstring>
        <name>Nestsets</name>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>level</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n_levels</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>fab</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; const BoxArray *&gt;</type>
          <declname>box_arrays</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &gt; &amp;</type>
          <declname>ref_ratio</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>domain_offsets</declname>
        </param>
        <param>
          <type>conduit::Node &amp;</type>
          <declname>nestset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/Conduit/AMReX_Conduit_Blueprint.cpp" line="20" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/Conduit/AMReX_Conduit_Blueprint.cpp" bodystart="20" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a807d001969408582d355a731cedac987" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabToBlueprintTopology</definition>
        <argsstring>(const Geometry &amp;geom, const FArrayBox &amp;fab, Node &amp;res)</argsstring>
        <name>FabToBlueprintTopology</name>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>fab</declname>
        </param>
        <param>
          <type>Node &amp;</type>
          <declname>res</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/Conduit/AMReX_Conduit_Blueprint.cpp" line="130" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/Conduit/AMReX_Conduit_Blueprint.cpp" bodystart="130" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af70ff73cf1857e1a859a1fbac9ef10b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::AddFabGhostIndicatorField</definition>
        <argsstring>(const FArrayBox &amp;fab, int ngrow, Node &amp;res)</argsstring>
        <name>AddFabGhostIndicatorField</name>
        <param>
          <type>const <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>fab</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngrow</declname>
        </param>
        <param>
          <type>Node &amp;</type>
          <declname>res</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/Conduit/AMReX_Conduit_Blueprint.cpp" line="230" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/Conduit/AMReX_Conduit_Blueprint.cpp" bodystart="230" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1afd44b852de9a30f6417dfc233d76ef3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabToBlueprintFields</definition>
        <argsstring>(const FArrayBox &amp;fab, const Vector&lt; std::string &gt; &amp;varnames, Node &amp;res)</argsstring>
        <name>FabToBlueprintFields</name>
        <param>
          <type>const <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>fab</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>varnames</declname>
        </param>
        <param>
          <type>Node &amp;</type>
          <declname>res</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/Conduit/AMReX_Conduit_Blueprint.cpp" line="285" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/Conduit/AMReX_Conduit_Blueprint.cpp" bodystart="285" bodyend="307"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aede6d4189f1d218b26880a44405df55e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::SingleLevelToBlueprint</definition>
        <argsstring>(const MultiFab &amp;mf, const Vector&lt; std::string &gt; &amp;varnames, const Geometry &amp;geom, Real time_value, int level_step, Node &amp;res)</argsstring>
        <name>SingleLevelToBlueprint</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>varnames</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time_value</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>level_step</declname>
        </param>
        <param>
          <type>Node &amp;</type>
          <declname>res</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/Conduit/AMReX_Conduit_Blueprint.cpp" line="313" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/Conduit/AMReX_Conduit_Blueprint.cpp" bodystart="313" bodyend="335"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a15233201dff169ad13ff8eff36a98897" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiLevelToBlueprint</definition>
        <argsstring>(int n_levels, const Vector&lt; const MultiFab *&gt; &amp;mfs, const Vector&lt; std::string &gt; &amp;varnames, const Vector&lt; Geometry &gt; &amp;geoms, Real time_value, const Vector&lt; int &gt; &amp;level_steps, const Vector&lt; IntVect &gt; &amp;ref_ratio, Node &amp;res)</argsstring>
        <name>MultiLevelToBlueprint</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n_levels</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *&gt; &amp;</type>
          <declname>mfs</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>varnames</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>geoms</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time_value</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>level_steps</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &gt; &amp;</type>
          <declname>ref_ratio</declname>
        </param>
        <param>
          <type>Node &amp;</type>
          <declname>res</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/Conduit/AMReX_Conduit_Blueprint.cpp" line="341" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/Conduit/AMReX_Conduit_Blueprint.cpp" bodystart="341" bodyend="450"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aec07a7132a048a1ab29b5a4b262eda8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::WriteBlueprintFiles</definition>
        <argsstring>(const conduit::Node &amp;bp_mesh, const std::string &amp;fname_base, int step, const std::string &amp;protocol)</argsstring>
        <name>WriteBlueprintFiles</name>
        <param>
          <type>const conduit::Node &amp;</type>
          <declname>bp_mesh</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>fname_base</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>step</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>protocol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/Conduit/AMReX_Conduit_Blueprint.cpp" line="456" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/Conduit/AMReX_Conduit_Blueprint.cpp" bodystart="456" bodyend="560"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aecc3c40b87ae2ae19e6aac69ff910cf8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::SingleLevelToBlueprint</definition>
        <argsstring>(const MultiFab &amp;mf, const Vector&lt; std::string &gt; &amp;varnames, const Geometry &amp;geom, Real time_value, int level_step, conduit::Node &amp;bp_mesh)</argsstring>
        <name>SingleLevelToBlueprint</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>varnames</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time_value</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>level_step</declname>
        </param>
        <param>
          <type>conduit::Node &amp;</type>
          <declname>bp_mesh</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/Conduit/AMReX_Conduit_Blueprint.H" line="66" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a2628fd1049f1051a66b777ec56f23e66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiLevelToBlueprint</definition>
        <argsstring>(int n_levels, const Vector&lt; const MultiFab *&gt; &amp;mfs, const Vector&lt; std::string &gt; &amp;varnames, const Vector&lt; Geometry &gt; &amp;geoms, Real time_value, const Vector&lt; int &gt; &amp;level_steps, const Vector&lt; IntVect &gt; &amp;ref_ratio, conduit::Node &amp;bp_mesh)</argsstring>
        <name>MultiLevelToBlueprint</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n_levels</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *&gt; &amp;</type>
          <declname>mfs</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>varnames</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>geoms</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time_value</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>level_steps</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &gt; &amp;</type>
          <declname>ref_ratio</declname>
        </param>
        <param>
          <type>conduit::Node &amp;</type>
          <declname>bp_mesh</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/Conduit/AMReX_Conduit_Blueprint.H" line="78" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a23760aeb6d76e847203cb23024d8ab2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>NStructReal</declname>
            <defname>NStructReal</defname>
          </param>
          <param>
            <type>int</type>
            <declname>NStructInt</declname>
            <defname>NStructInt</defname>
          </param>
          <param>
            <type>int</type>
            <declname>NArrayReal</declname>
            <defname>NArrayReal</defname>
          </param>
          <param>
            <type>int</type>
            <declname>NArrayInt</declname>
            <defname>NArrayInt</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParticleTileToBlueprint</definition>
        <argsstring>(const ParticleTile&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt; &amp;ptile, const Vector&lt; std::string &gt; &amp;real_comp_names, const Vector&lt; std::string &gt; &amp;int_comp_names, conduit::Node &amp;res, const std::string &amp;topology_name)</argsstring>
        <name>ParticleTileToBlueprint</name>
        <param>
          <type>const <ref refid="structamrex_1_1ParticleTile" kindref="compound">ParticleTile</ref>&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt; &amp;</type>
          <declname>ptile</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>real_comp_names</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>int_comp_names</declname>
        </param>
        <param>
          <type>conduit::Node &amp;</type>
          <declname>res</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>topology_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/Conduit/AMReX_Conduit_Blueprint_ParticlesI.H" line="25" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/Conduit/AMReX_Conduit_Blueprint_ParticlesI.H" bodystart="25" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1acbd817ae9ca1a59105be27f3bcc2d1fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>NStructReal</declname>
            <defname>NStructReal</defname>
          </param>
          <param>
            <type>int</type>
            <declname>NStructInt</declname>
            <defname>NStructInt</defname>
          </param>
          <param>
            <type>int</type>
            <declname>NArrayReal</declname>
            <defname>NArrayReal</defname>
          </param>
          <param>
            <type>int</type>
            <declname>NArrayInt</declname>
            <defname>NArrayInt</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParticleContainerToBlueprint</definition>
        <argsstring>(const ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt; &amp;pc, const Vector&lt; std::string &gt; &amp;real_comp_names, const Vector&lt; std::string &gt; &amp;int_comp_names, conduit::Node &amp;res, const std::string &amp;topology_name)</argsstring>
        <name>ParticleContainerToBlueprint</name>
        <param>
          <type>const <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref>&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt; &amp;</type>
          <declname>pc</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>real_comp_names</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>int_comp_names</declname>
        </param>
        <param>
          <type>conduit::Node &amp;</type>
          <declname>res</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>topology_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/Conduit/AMReX_Conduit_Blueprint_ParticlesI.H" line="198" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/Conduit/AMReX_Conduit_Blueprint_ParticlesI.H" bodystart="198" bodyend="319"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a7fc7aacdd23f3e569d67da691c515624" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_FORCE_INLINE void amrex::amrex_hpbcoef</definition>
        <argsstring>(Box const &amp;box, BaseFab&lt; GpuArray&lt; Real, 2 *AMREX_SPACEDIM+1 &gt;&gt; &amp;mat, const FArrayBox &amp;b, Real &amp;sb, const Real *dx, int &amp;idim)</argsstring>
        <name>amrex_hpbcoef</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; <ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, 2 *AMREX_SPACEDIM+1 &gt;&gt; &amp;</type>
          <declname>mat</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>Real &amp;</type>
          <declname>sb</declname>
        </param>
        <param>
          <type>const Real *</type>
          <declname>dx</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &amp;</type>
          <declname>idim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/HYPRE/AMReX_Habec_2D_K.H" line="21" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/HYPRE/AMReX_Habec_2D_K.H" bodystart="21" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab422963144b41ee08fbaf07abd2f5f5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_FORCE_INLINE void amrex::amrex_hpmat</definition>
        <argsstring>(Box const &amp;box, BaseFab&lt; GpuArray&lt; Real, 2 *AMREX_SPACEDIM+1 &gt;&gt; &amp;mat, const FArrayBox &amp;b, const Mask &amp;msk, Real &amp;sb, const Real *dx, int &amp;cdir, const int &amp;bct, const Real &amp;bcl, const int &amp;bho)</argsstring>
        <name>amrex_hpmat</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; <ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, 2 *AMREX_SPACEDIM+1 &gt;&gt; &amp;</type>
          <declname>mat</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
          <declname>msk</declname>
        </param>
        <param>
          <type>Real &amp;</type>
          <declname>sb</declname>
        </param>
        <param>
          <type>const Real *</type>
          <declname>dx</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &amp;</type>
          <declname>cdir</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &amp;</type>
          <declname>bct</declname>
        </param>
        <param>
          <type>const Real &amp;</type>
          <declname>bcl</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &amp;</type>
          <declname>bho</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/HYPRE/AMReX_Habec_2D_K.H" line="50" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/HYPRE/AMReX_Habec_2D_K.H" bodystart="50" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1adda4791eb238f62669a8c641b01a1262" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_FORCE_INLINE void amrex::amrex_hpijmatrix</definition>
        <argsstring>(Box const &amp;box, const T &amp;, T *ncols, T *rows, T *colsg, Real *matg, BaseFab&lt; T &gt; &amp;cell_id, T &amp;, FArrayBox &amp;diaginv, FArrayBox &amp;acoefs, FArrayBox &amp;bcoefsx, FArrayBox &amp;bcoefsy, Real &amp;sa, Real &amp;sb, const Real *dx, GpuArray&lt; int, AMREX_SPACEDIM *2 &gt; &amp;bct, GpuArray&lt; Real, AMREX_SPACEDIM *2 &gt; bcl, const int &amp;bho, IArrayBox const *osmsk)</argsstring>
        <name>amrex_hpijmatrix</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>const T &amp;</type>
        </param>
        <param>
          <type>T *</type>
          <declname>ncols</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>rows</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>colsg</declname>
        </param>
        <param>
          <type>Real *</type>
          <declname>matg</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>cell_id</declname>
        </param>
        <param>
          <type>T &amp;</type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>diaginv</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>acoefs</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>bcoefsx</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>bcoefsy</declname>
        </param>
        <param>
          <type>Real &amp;</type>
          <declname>sa</declname>
        </param>
        <param>
          <type>Real &amp;</type>
          <declname>sb</declname>
        </param>
        <param>
          <type>const Real *</type>
          <declname>dx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, AMREX_SPACEDIM *2 &gt; &amp;</type>
          <declname>bct</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM *2 &gt;</type>
          <declname>bcl</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &amp;</type>
          <declname>bho</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IArrayBox" kindref="compound">IArrayBox</ref> const *</type>
          <declname>osmsk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/HYPRE/AMReX_Habec_2D_K.H" line="146" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/HYPRE/AMReX_Habec_2D_K.H" bodystart="146" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1acae5f752b9a7ae80de17f5d467bfc4a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_FORCE_INLINE void amrex::amrex_hpijmatrix</definition>
        <argsstring>(Box const &amp;box, const T &amp;, T *ncols, T *rows, T *colsg, Real *matg, BaseFab&lt; T &gt; &amp;cell_id, T &amp;, FArrayBox &amp;diaginv, FArrayBox &amp;acoefs, FArrayBox &amp;bcoefsx, FArrayBox &amp;bcoefsy, FArrayBox &amp;bcoefsz, Real &amp;sa, Real &amp;sb, const Real *dx, GpuArray&lt; int, AMREX_SPACEDIM *2 &gt; &amp;bct, GpuArray&lt; Real, AMREX_SPACEDIM *2 &gt; bcl, const int &amp;bho, IArrayBox const *osmsk)</argsstring>
        <name>amrex_hpijmatrix</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>const T &amp;</type>
        </param>
        <param>
          <type>T *</type>
          <declname>ncols</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>rows</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>colsg</declname>
        </param>
        <param>
          <type>Real *</type>
          <declname>matg</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &amp;</type>
          <declname>cell_id</declname>
        </param>
        <param>
          <type>T &amp;</type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>diaginv</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>acoefs</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>bcoefsx</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>bcoefsy</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>bcoefsz</declname>
        </param>
        <param>
          <type>Real &amp;</type>
          <declname>sa</declname>
        </param>
        <param>
          <type>Real &amp;</type>
          <declname>sb</declname>
        </param>
        <param>
          <type>const Real *</type>
          <declname>dx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, AMREX_SPACEDIM *2 &gt; &amp;</type>
          <declname>bct</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM *2 &gt;</type>
          <declname>bcl</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &amp;</type>
          <declname>bho</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IArrayBox" kindref="compound">IArrayBox</ref> const *</type>
          <declname>osmsk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/HYPRE/AMReX_Habec_3D_K.H" line="177" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/HYPRE/AMReX_Habec_3D_K.H" bodystart="177" bodyend="329"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a5affd47d5e3fce8c27339e8d92d20c39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_FORCE_INLINE void amrex::amrex_hpacoef</definition>
        <argsstring>(Box const &amp;box, BaseFab&lt; GpuArray&lt; Real, 2 *AMREX_SPACEDIM+1 &gt;&gt; &amp;mat, const FArrayBox &amp;a, Real &amp;sa)</argsstring>
        <name>amrex_hpacoef</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; <ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, 2 *AMREX_SPACEDIM+1 &gt;&gt; &amp;</type>
          <declname>mat</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Real &amp;</type>
          <declname>sa</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/HYPRE/AMReX_Habec_K.H" line="14" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/HYPRE/AMReX_Habec_K.H" bodystart="14" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a918411cd3ec8d7928b47409b557ff3cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_FORCE_INLINE void amrex::amrex_hpdiag</definition>
        <argsstring>(Box const &amp;box, BaseFab&lt; GpuArray&lt; Real, 2 *AMREX_SPACEDIM+1 &gt;&gt; &amp;mat, FArrayBox &amp;diag)</argsstring>
        <name>amrex_hpdiag</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; <ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, 2 *AMREX_SPACEDIM+1 &gt;&gt; &amp;</type>
          <declname>mat</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>diag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/HYPRE/AMReX_Habec_K.H" line="35" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/HYPRE/AMReX_Habec_K.H" bodystart="35" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af5a050719637ed453c73af4d4ca48c8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1Hypre" kindref="compound">Hypre</ref> &gt;</type>
        <definition>std::unique_ptr&lt; Hypre &gt; amrex::makeHypre</definition>
        <argsstring>(const BoxArray &amp;grids, const DistributionMapping &amp;dmap, const Geometry &amp;geom, MPI_Comm comm_, Hypre::Interface interface, const iMultiFab *overset_mask)</argsstring>
        <name>makeHypre</name>
        <param>
          <type>const BoxArray &amp;</type>
          <declname>grids</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dmap</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref></type>
          <declname>comm_</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Hypre_1af08fbb42b4509a32e7f20a6101dfd13f" kindref="member">Hypre::Interface</ref></type>
          <declname>interface</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> *</type>
          <declname>overset_mask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/HYPRE/AMReX_Hypre.cpp" line="15" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/HYPRE/AMReX_Hypre.cpp" bodystart="15" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1abbd0e7692c28626659b75637c2c63528" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1PETScABecLap" kindref="compound">PETScABecLap</ref> &gt;</type>
        <definition>std::unique_ptr&lt; PETScABecLap &gt; amrex::makePetsc</definition>
        <argsstring>(const BoxArray &amp;grids, const DistributionMapping &amp;dmap, const Geometry &amp;geom, MPI_Comm comm_)</argsstring>
        <name>makePetsc</name>
        <param>
          <type>const BoxArray &amp;</type>
          <declname>grids</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dmap</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref></type>
          <declname>comm_</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/PETSc/AMReX_PETSc.cpp" line="30" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/PETSc/AMReX_PETSc.cpp" bodystart="30" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a41265e28034440c2aaa8fb38d3cd38c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string amrex::SanitizeName</definition>
        <argsstring>(const std::string &amp;sname)</argsstring>
        <name>SanitizeName</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>sname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.H" line="43" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.cpp" bodystart="45" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a1ebc8341ffa9cc6f20e707bfb36ce253" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::SimpleRemoveOverlap</definition>
        <argsstring>(BoxArray &amp;ba)</argsstring>
        <name>SimpleRemoveOverlap</name>
        <param>
          <type>BoxArray &amp;</type>
          <declname>ba</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.H" line="44" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.cpp" bodystart="70" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a61e745ad34b00278dec10a2723c3d788" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::avgDown_doit</definition>
        <argsstring>(const FArrayBox &amp;fine_fab, FArrayBox &amp;crse_fab, const Box &amp;ovlp, int scomp, int dcomp, int ncomp, Vector&lt; int &gt; &amp;ratio)</argsstring>
        <name>avgDown_doit</name>
        <param>
          <type>const <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>fine_fab</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>crse_fab</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>ovlp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.H" line="45" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.cpp" bodystart="89" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1acdfc31382ab1f46867b783921a6f465e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>amrex::Box amrex::FixCoarseBoxSize</definition>
        <argsstring>(const Box &amp;fineBox, int rr)</argsstring>
        <name>FixCoarseBoxSize</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>fineBox</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>rr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.H" line="48" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.cpp" bodystart="116" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a42624827c89b4341f0f95486188ba5c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::avgDown</definition>
        <argsstring>(MultiFab &amp;S_crse, MultiFab &amp;S_fine, int scomp, int dcomp, int ncomp, Vector&lt; int &gt; &amp;ratio)</argsstring>
        <name>avgDown</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>S_crse</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>S_fine</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.H" line="49" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.cpp" bodystart="132" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aee4cc89e337e42259b850eafbad65cb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::PrintTimeRangeList</definition>
        <argsstring>(const std::list&lt; RegionsProfStats::TimeRange &gt; &amp;trList)</argsstring>
        <name>PrintTimeRangeList</name>
        <param>
          <type>const std::list&lt; <ref refid="structBLProfStats_1_1TimeRange" kindref="compound">RegionsProfStats::TimeRange</ref> &gt; &amp;</type>
          <declname>trList</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.H" line="51" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.cpp" bodystart="158" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a1a6b7be29b3621c9df4db1d93736597b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::RedistFiles</definition>
        <argsstring>()</argsstring>
        <name>RedistFiles</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.H" line="52" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.cpp" bodystart="173" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ace32984e953e92b236d8e765dd2baaf6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::NHops</definition>
        <argsstring>(const Box &amp;tbox, const IntVect &amp;ivfrom, const IntVect &amp;ivto)</argsstring>
        <name>NHops</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>tbox</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ivfrom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ivto</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.H" line="53" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.cpp" bodystart="254" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa2acbc851871868eb313f35d3512e986" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Write2DFab</definition>
        <argsstring>(const string &amp;filenameprefix, const int xdim, const int ydim, const double *data)</argsstring>
        <name>Write2DFab</name>
        <param>
          <type>const string &amp;</type>
          <declname>filenameprefix</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>xdim</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ydim</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.H" line="54" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.cpp" bodystart="268" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a0e9acfad7e7501e9ff98d50a73b1382a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Write2DText</definition>
        <argsstring>(const string &amp;filenameprefix, const int xdim, const int ydim, const double *data)</argsstring>
        <name>Write2DText</name>
        <param>
          <type>const string &amp;</type>
          <declname>filenameprefix</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>xdim</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ydim</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.H" line="56" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.cpp" bodystart="281" bodyend="298"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a1c02ea7752fae69fe9fb9e7f9c3e6f4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Write3DFab</definition>
        <argsstring>(const string &amp;filenameprefix, const int xdim, const int ydim, const int zdim, const double *data)</argsstring>
        <name>Write3DFab</name>
        <param>
          <type>const string &amp;</type>
          <declname>filenameprefix</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>xdim</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ydim</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>zdim</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.H" line="58" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.cpp" bodystart="302" bodyend="311"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6d17597e95ab560d6e8db9bd3bc5c3d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::WriteFab</definition>
        <argsstring>(const string &amp;filenameprefix, const int xdim, const int ydim, const double *data)</argsstring>
        <name>WriteFab</name>
        <param>
          <type>const string &amp;</type>
          <declname>filenameprefix</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>xdim</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ydim</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.H" line="60" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.cpp" bodystart="315" bodyend="339"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a393accb69353384e42f45a34cb386180" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long amrex::FileSize</definition>
        <argsstring>(const std::string &amp;filename)</argsstring>
        <name>FileSize</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.H" line="62" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.cpp" bodystart="341" bodyend="345"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aaae16c4ac3245574456ee8dc48c261be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MakeFuncPctTimesMF</definition>
        <argsstring>(const Vector&lt; Vector&lt; BLProfStats::FuncStat &gt; &gt; &amp;funcStats, const Vector&lt; std::string &gt; &amp;blpFNames, const std::map&lt; std::string, BLProfiler::ProfStats &gt; &amp;mProfStats, Real runTime, int dataNProcs)</argsstring>
        <name>MakeFuncPctTimesMF</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="structBLProfStats_1_1FuncStat" kindref="compound">BLProfStats::FuncStat</ref> &gt; &gt; &amp;</type>
          <declname>funcStats</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>blpFNames</declname>
        </param>
        <param>
          <type>const std::map&lt; std::string, BLProfiler::ProfStats &gt; &amp;</type>
          <declname>mProfStats</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>runTime</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dataNProcs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.H" line="63" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.cpp" bodystart="349" bodyend="397"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1abf61acca5a480f47841ff87d3fc31536" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::CollectMProfStats</definition>
        <argsstring>(std::map&lt; std::string, BLProfiler::ProfStats &gt; &amp;mProfStats, const Vector&lt; Vector&lt; BLProfStats::FuncStat &gt; &gt; &amp;funcStats, const Vector&lt; std::string &gt; &amp;fNames, Real runTime, int whichProc)</argsstring>
        <name>CollectMProfStats</name>
        <param>
          <type>std::map&lt; std::string, BLProfiler::ProfStats &gt; &amp;</type>
          <declname>mProfStats</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="structBLProfStats_1_1FuncStat" kindref="compound">BLProfStats::FuncStat</ref> &gt; &gt; &amp;</type>
          <declname>funcStats</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>fNames</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>runTime</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>whichProc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.H" line="67" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.cpp" bodystart="401" bodyend="439"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a171596246077e8bb3d38d0e3a513c481" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::GraphTopPct</definition>
        <argsstring>(const std::map&lt; std::string, BLProfiler::ProfStats &gt; &amp;mProfStats, const Vector&lt; Vector&lt; BLProfStats::FuncStat &gt; &gt; &amp;funcStats, const Vector&lt; std::string &gt; &amp;fNames, Real runTime, int dataNProcs, Real gPercent)</argsstring>
        <name>GraphTopPct</name>
        <param>
          <type>const std::map&lt; std::string, BLProfiler::ProfStats &gt; &amp;</type>
          <declname>mProfStats</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="structBLProfStats_1_1FuncStat" kindref="compound">BLProfStats::FuncStat</ref> &gt; &gt; &amp;</type>
          <declname>funcStats</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>fNames</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>runTime</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dataNProcs</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>gPercent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.H" line="71" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.cpp" bodystart="443" bodyend="472"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa60440de48a953eec9553933d683ef9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::WritePlotfile</definition>
        <argsstring>(const std::string &amp;pfversion, const Vector&lt; MultiFab &gt; &amp;data, const Real time, const Vector&lt; Real &gt; &amp;probLo, const Vector&lt; Real &gt; &amp;probHi, const Vector&lt; int &gt; &amp;refRatio, const Vector&lt; Box &gt; &amp;probDomain, const Vector&lt; Vector&lt; Real &gt; &gt; &amp;dxLevel, const int coordSys, const std::string &amp;oFile, const Vector&lt; std::string &gt; &amp;names, const bool verbose, const bool isCartGrid, const Real *vfeps, const int *levelSteps)</argsstring>
        <name>WritePlotfile</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>pfversion</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &amp;</type>
          <declname>probLo</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &amp;</type>
          <declname>probHi</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>refRatio</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &gt; &amp;</type>
          <declname>probDomain</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &gt; &amp;</type>
          <declname>dxLevel</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>coordSys</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>oFile</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>names</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>verbose</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>isCartGrid</declname>
        </param>
        <param>
          <type>const Real *</type>
          <declname>vfeps</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
          <declname>levelSteps</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLWritePlotFile.cpp" line="17" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLWritePlotFile.cpp" bodystart="17" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aec030b01162fc088d8de7dc493235430" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string amrex::VisMFBaseName</definition>
        <argsstring>(const std::string &amp;filename)</argsstring>
        <name>VisMFBaseName</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLWritePlotFile.cpp" line="169" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLWritePlotFile.cpp" bodystart="169" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a05e93313b0f001e810b02a69f71c5b61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Write2DBoxFrom3D</definition>
        <argsstring>(const Box &amp;box, std::ostream &amp;os, int whichPlane)</argsstring>
        <name>Write2DBoxFrom3D</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>whichPlane</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLWritePlotFile.cpp" line="180" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLWritePlotFile.cpp" bodystart="180" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa9dca52e8981b35caa7b00d00c8c6a8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structamrex_1_1VisMF_1_1FabOnDisk" kindref="compound">VisMF::FabOnDisk</ref></type>
        <definition>VisMF::FabOnDisk amrex::VisMFWrite</definition>
        <argsstring>(const FArrayBox &amp;fabIn, const std::string &amp;filename, std::ostream &amp;os, long &amp;bytes, int whichPlane)</argsstring>
        <name>VisMFWrite</name>
        <param>
          <type>const <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>fabIn</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>long &amp;</type>
          <declname>bytes</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>whichPlane</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLWritePlotFile.cpp" line="215" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLWritePlotFile.cpp" bodystart="215" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a85a195c43f85ba86fc9f4e450117678a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>static std::ostream&amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Vector&lt; Vector&lt; Real &gt; &gt; &amp;ar)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &gt; &amp;</type>
          <declname>ar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLWritePlotFile.cpp" line="259" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLWritePlotFile.cpp" bodystart="259" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a0009871904f8601dbda21f3654b7bb33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long amrex::VisMFWriteHeader</definition>
        <argsstring>(const std::string &amp;mf_name, VisMF::Header &amp;hdr, int whichPlane)</argsstring>
        <name>VisMFWriteHeader</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>mf_name</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1VisMF_1_1Header" kindref="compound">VisMF::Header</ref> &amp;</type>
          <declname>hdr</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>whichPlane</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLWritePlotFile.cpp" line="279" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLWritePlotFile.cpp" bodystart="279" bodyend="321"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a35ef1d42135f8c075072684f42b02b9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::WritePlotfile2DFrom3D</definition>
        <argsstring>(const std::string &amp;pfversion, const Vector&lt; MultiFab &gt; &amp;data, const Real time, const Vector&lt; Real &gt; &amp;probLo, const Vector&lt; Real &gt; &amp;probHi, const Vector&lt; int &gt; &amp;refRatio, const Vector&lt; Box &gt; &amp;probDomain, const Vector&lt; Vector&lt; Real &gt; &gt; &amp;dxLevel, const int coordSys, const std::string &amp;oFile, const Vector&lt; std::string &gt; &amp;names, const bool verbose, const bool isCartGrid, const Real *vfeps, const int *levelSteps)</argsstring>
        <name>WritePlotfile2DFrom3D</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>pfversion</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &amp;</type>
          <declname>probLo</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &amp;</type>
          <declname>probHi</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>refRatio</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &gt; &amp;</type>
          <declname>probDomain</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &gt; &amp;</type>
          <declname>dxLevel</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>coordSys</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>oFile</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>names</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>verbose</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>isCartGrid</declname>
        </param>
        <param>
          <type>const Real *</type>
          <declname>vfeps</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
          <declname>levelSteps</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLWritePlotFile.cpp" line="325" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLWritePlotFile.cpp" bodystart="325" bodyend="536"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8d39fa37907313633609b0b404501b7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::senseiNewMacro</definition>
        <argsstring>(AmrDataAdaptor)</argsstring>
        <name>senseiNewMacro</name>
        <param>
          <type><ref refid="classamrex_1_1AmrDataAdaptor" kindref="compound">AmrDataAdaptor</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/SENSEI/AMReX_AmrDataAdaptor.cpp" line="165" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac81456cdd4c1cd623e05a2494f607d00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::senseiNewMacro</definition>
        <argsstring>(AmrMeshDataAdaptor)</argsstring>
        <name>senseiNewMacro</name>
        <param>
          <type><ref refid="classamrex_1_1AmrMeshDataAdaptor" kindref="compound">AmrMeshDataAdaptor</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/SENSEI/AMReX_AmrMeshDataAdaptor.cpp" line="91" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8037a13a50b4a81d7849d7253fbbf5f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlabeclap_adotx</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;y, Array4&lt; Real const &gt; const &amp;x, Array4&lt; Real const &gt; const &amp;a, Array4&lt; Real const &gt; const &amp;bX, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, Real alpha, Real beta, int ncomp) noexcept</argsstring>
        <name>mlabeclap_adotx</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bX</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>beta</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_1D_K.H" line="8" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_1D_K.H" bodystart="8" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad2de19fd5761169203b4a3cbd1af9eaa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlabeclap_adotx_os</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;y, Array4&lt; Real const &gt; const &amp;x, Array4&lt; Real const &gt; const &amp;a, Array4&lt; Real const &gt; const &amp;bX, Array4&lt; int const &gt; const &amp;osm, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, Real alpha, Real beta, int ncomp) noexcept</argsstring>
        <name>mlabeclap_adotx_os</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bX</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>osm</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>beta</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_1D_K.H" line="31" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_1D_K.H" bodystart="31" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a20960b8cda0f288ab60a648dda459fd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlabeclap_normalize</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;x, Array4&lt; Real const &gt; const &amp;a, Array4&lt; Real const &gt; const &amp;bX, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, Real alpha, Real beta, int ncomp) noexcept</argsstring>
        <name>mlabeclap_normalize</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bX</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>beta</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_1D_K.H" line="59" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_1D_K.H" bodystart="59" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af7c4c51ca6b14aedd1bf8b979816180e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlabeclap_flux_x</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fx, Array4&lt; Real const &gt; const &amp;sol, Array4&lt; Real const &gt; const &amp;bx, Real fac, int ncomp) noexcept</argsstring>
        <name>mlabeclap_flux_x</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>fac</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_1D_K.H" line="79" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_1D_K.H" bodystart="79" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a58bee9db7e28b3e6d98ed5dbe0c1284d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlabeclap_flux_xface</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fx, Array4&lt; Real const &gt; const &amp;sol, Array4&lt; Real const &gt; const &amp;bx, Real fac, int xlen, int ncomp) noexcept</argsstring>
        <name>mlabeclap_flux_xface</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>fac</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>xlen</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_1D_K.H" line="94" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_1D_K.H" bodystart="94" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a38b82f0c068dedfb4b93fd627351375e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::abec_gsrb</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;phi, Array4&lt; Real const &gt; const &amp;rhs, Real alpha, Array4&lt; Real const &gt; const &amp;a, Real dhx, Array4&lt; Real const &gt; const &amp;bX, Array4&lt; int const &gt; const &amp;m0, Array4&lt; int const &gt; const &amp;m1, Array4&lt; Real const &gt; const &amp;f0, Array4&lt; Real const &gt; const &amp;f1, Box const &amp;vbox, int redblack, int nc) noexcept</argsstring>
        <name>abec_gsrb</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bX</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>vbox</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>redblack</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_1D_K.H" line="108" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_1D_K.H" bodystart="108" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a54dbb9b0b67827d3e26099d41a29972f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::abec_gsrb_os</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;phi, Array4&lt; Real const &gt; const &amp;rhs, Real alpha, Array4&lt; Real const &gt; const &amp;a, Real dhx, Array4&lt; Real const &gt; const &amp;bX, Array4&lt; int const &gt; const &amp;m0, Array4&lt; int const &gt; const &amp;m1, Array4&lt; Real const &gt; const &amp;f0, Array4&lt; Real const &gt; const &amp;f1, Array4&lt; int const &gt; const &amp;osm, Box const &amp;vbox, int redblack, int nc) noexcept</argsstring>
        <name>abec_gsrb_os</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bX</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>osm</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>vbox</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>redblack</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_1D_K.H" line="148" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_1D_K.H" bodystart="148" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a533531ca75176324d0e07de536fe5768" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::abec_gsrb_with_line_solve</definition>
        <argsstring>(Box const &amp;, Array4&lt; Real &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Real, Array4&lt; Real const &gt; const &amp;, Real, Array4&lt; Real const &gt; const &amp;, Array4&lt; int const &gt; const &amp;, Array4&lt; int const &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Box const &amp;, int, int) noexcept</argsstring>
        <name>abec_gsrb_with_line_solve</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
        </param>
        <param>
          <type>Real</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
        </param>
        <param>
          <type>Real</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_1D_K.H" line="193" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_1D_K.H" bodystart="193" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa12f7835461bbc8c6107ce285ef1fd4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::overset_rescale_bcoef_x</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;bX, Array4&lt; int const &gt; const &amp;osm, int ncomp, Real osfac) noexcept</argsstring>
        <name>overset_rescale_bcoef_x</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>bX</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>osm</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>osfac</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_1D_K.H" line="208" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_1D_K.H" bodystart="208" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa6c3f47550be0fa19b9954f898efe87f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlabeclap_adotx</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;y, Array4&lt; Real const &gt; const &amp;x, Array4&lt; Real const &gt; const &amp;a, Array4&lt; Real const &gt; const &amp;bX, Array4&lt; Real const &gt; const &amp;bY, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, Real alpha, Real beta, int ncomp) noexcept</argsstring>
        <name>mlabeclap_adotx</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bX</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bY</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>beta</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_2D_K.H" line="8" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_2D_K.H" bodystart="8" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aae218e875bd2cc43f355bebbf661d00a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlabeclap_adotx_os</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;y, Array4&lt; Real const &gt; const &amp;x, Array4&lt; Real const &gt; const &amp;a, Array4&lt; Real const &gt; const &amp;bX, Array4&lt; Real const &gt; const &amp;bY, Array4&lt; int const &gt; const &amp;osm, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, Real alpha, Real beta, int ncomp) noexcept</argsstring>
        <name>mlabeclap_adotx_os</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bX</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bY</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>osm</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>beta</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_2D_K.H" line="37" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_2D_K.H" bodystart="37" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a1e63ec83c88e674950c0a4192565aa99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlabeclap_normalize</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;x, Array4&lt; Real const &gt; const &amp;a, Array4&lt; Real const &gt; const &amp;bX, Array4&lt; Real const &gt; const &amp;bY, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, Real alpha, Real beta, int ncomp) noexcept</argsstring>
        <name>mlabeclap_normalize</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bX</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bY</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>beta</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_2D_K.H" line="71" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_2D_K.H" bodystart="71" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a3aed4f08360fbfd83c8ab1e9bbefa33b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlabeclap_flux_y</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fy, Array4&lt; Real const &gt; const &amp;sol, Array4&lt; Real const &gt; const &amp;by, Real fac, int ncomp) noexcept</argsstring>
        <name>mlabeclap_flux_y</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>by</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>fac</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_2D_K.H" line="131" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_2D_K.H" bodystart="131" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4f0d5e5205a7ec9e14bf1a93edf65334" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlabeclap_flux_yface</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fy, Array4&lt; Real const &gt; const &amp;sol, Array4&lt; Real const &gt; const &amp;by, Real fac, int ylen, int ncomp) noexcept</argsstring>
        <name>mlabeclap_flux_yface</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>by</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>fac</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ylen</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_2D_K.H" line="148" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_2D_K.H" bodystart="148" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a40ef0f32e15c231d1bd712a85365af5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::abec_gsrb</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;phi, Array4&lt; Real const &gt; const &amp;rhs, Real alpha, Array4&lt; Real const &gt; const &amp;a, Real dhx, Real dhy, Array4&lt; Real const &gt; const &amp;bX, Array4&lt; Real const &gt; const &amp;bY, Array4&lt; int const &gt; const &amp;m0, Array4&lt; int const &gt; const &amp;m2, Array4&lt; int const &gt; const &amp;m1, Array4&lt; int const &gt; const &amp;m3, Array4&lt; Real const &gt; const &amp;f0, Array4&lt; Real const &gt; const &amp;f2, Array4&lt; Real const &gt; const &amp;f1, Array4&lt; Real const &gt; const &amp;f3, Box const &amp;vbox, int redblack, int nc) noexcept</argsstring>
        <name>abec_gsrb</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bX</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bY</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m2</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m3</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f3</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>vbox</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>redblack</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_2D_K.H" line="169" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_2D_K.H" bodystart="169" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8b8b719f6d5378f9d725b149ecbc8fcc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::abec_gsrb_os</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;phi, Array4&lt; Real const &gt; const &amp;rhs, Real alpha, Array4&lt; Real const &gt; const &amp;a, Real dhx, Real dhy, Array4&lt; Real const &gt; const &amp;bX, Array4&lt; Real const &gt; const &amp;bY, Array4&lt; int const &gt; const &amp;m0, Array4&lt; int const &gt; const &amp;m2, Array4&lt; int const &gt; const &amp;m1, Array4&lt; int const &gt; const &amp;m3, Array4&lt; Real const &gt; const &amp;f0, Array4&lt; Real const &gt; const &amp;f2, Array4&lt; Real const &gt; const &amp;f1, Array4&lt; Real const &gt; const &amp;f3, Array4&lt; int const &gt; const &amp;osm, Box const &amp;vbox, int redblack, int nc) noexcept</argsstring>
        <name>abec_gsrb_os</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bX</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bY</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m2</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m3</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f3</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>osm</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>vbox</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>redblack</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_2D_K.H" line="219" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_2D_K.H" bodystart="219" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a465ab923e09d1cea63a1455a3b99ab86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::abec_gsrb_with_line_solve</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;phi, Array4&lt; Real const &gt; const &amp;rhs, Real alpha, Array4&lt; Real const &gt; const &amp;a, Real dhx, Real dhy, Array4&lt; Real const &gt; const &amp;bX, Array4&lt; Real const &gt; const &amp;bY, Array4&lt; int const &gt; const &amp;m0, Array4&lt; int const &gt; const &amp;m2, Array4&lt; int const &gt; const &amp;m1, Array4&lt; int const &gt; const &amp;m3, Array4&lt; Real const &gt; const &amp;f0, Array4&lt; Real const &gt; const &amp;f2, Array4&lt; Real const &gt; const &amp;f1, Array4&lt; Real const &gt; const &amp;f3, Box const &amp;vbox, int redblack, int nc) noexcept</argsstring>
        <name>abec_gsrb_with_line_solve</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bX</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bY</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m2</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m3</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f3</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>vbox</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>redblack</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_2D_K.H" line="274" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_2D_K.H" bodystart="274" bodyend="382"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a1cd28a705dcaddafbeb0c10b05e8ccd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::overset_rescale_bcoef_y</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;bY, Array4&lt; int const &gt; const &amp;osm, int ncomp, Real osfac) noexcept</argsstring>
        <name>overset_rescale_bcoef_y</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>bY</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>osm</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>osfac</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_2D_K.H" line="401" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_2D_K.H" bodystart="401" bodyend="414"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad2e361afb4ee15117c28ed274d105e63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlabeclap_adotx</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;y, Array4&lt; Real const &gt; const &amp;x, Array4&lt; Real const &gt; const &amp;a, Array4&lt; Real const &gt; const &amp;bX, Array4&lt; Real const &gt; const &amp;bY, Array4&lt; Real const &gt; const &amp;bZ, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, Real alpha, Real beta, int ncomp) noexcept</argsstring>
        <name>mlabeclap_adotx</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bX</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bY</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bZ</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>beta</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_3D_K.H" line="8" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_3D_K.H" bodystart="8" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a60ab5ad9fc055ab0cea2b9e2b76329f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlabeclap_adotx_os</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;y, Array4&lt; Real const &gt; const &amp;x, Array4&lt; Real const &gt; const &amp;a, Array4&lt; Real const &gt; const &amp;bX, Array4&lt; Real const &gt; const &amp;bY, Array4&lt; Real const &gt; const &amp;bZ, Array4&lt; int const &gt; const &amp;osm, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, Real alpha, Real beta, int ncomp) noexcept</argsstring>
        <name>mlabeclap_adotx_os</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bX</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bY</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bZ</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>osm</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>beta</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_3D_K.H" line="43" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_3D_K.H" bodystart="43" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a97987e360d7bc159ce8496189dafa5c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlabeclap_normalize</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;x, Array4&lt; Real const &gt; const &amp;a, Array4&lt; Real const &gt; const &amp;bX, Array4&lt; Real const &gt; const &amp;bY, Array4&lt; Real const &gt; const &amp;bZ, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, Real alpha, Real beta, int ncomp) noexcept</argsstring>
        <name>mlabeclap_normalize</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bX</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bY</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bZ</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>beta</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_3D_K.H" line="83" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_3D_K.H" bodystart="83" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6e81e6d90421284e8fc7420e00fe97ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlabeclap_flux_z</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fz, Array4&lt; Real const &gt; const &amp;sol, Array4&lt; Real const &gt; const &amp;bz, Real fac, int ncomp) noexcept</argsstring>
        <name>mlabeclap_flux_z</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bz</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>fac</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_3D_K.H" line="194" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_3D_K.H" bodystart="194" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aef4153a28e0f7561ddc89730ef050670" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlabeclap_flux_zface</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fz, Array4&lt; Real const &gt; const &amp;sol, Array4&lt; Real const &gt; const &amp;bz, Real fac, int zlen, int ncomp) noexcept</argsstring>
        <name>mlabeclap_flux_zface</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bz</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>fac</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>zlen</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_3D_K.H" line="213" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_3D_K.H" bodystart="213" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a020511e69ad07d262180684687fc66e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::abec_gsrb</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;phi, Array4&lt; Real const &gt; const &amp;rhs, Real alpha, Array4&lt; Real const &gt; const &amp;a, Real dhx, Real dhy, Real dhz, Array4&lt; Real const &gt; const &amp;bX, Array4&lt; Real const &gt; const &amp;bY, Array4&lt; Real const &gt; const &amp;bZ, Array4&lt; int const &gt; const &amp;m0, Array4&lt; int const &gt; const &amp;m2, Array4&lt; int const &gt; const &amp;m4, Array4&lt; int const &gt; const &amp;m1, Array4&lt; int const &gt; const &amp;m3, Array4&lt; int const &gt; const &amp;m5, Array4&lt; Real const &gt; const &amp;f0, Array4&lt; Real const &gt; const &amp;f2, Array4&lt; Real const &gt; const &amp;f4, Array4&lt; Real const &gt; const &amp;f1, Array4&lt; Real const &gt; const &amp;f3, Array4&lt; Real const &gt; const &amp;f5, Box const &amp;vbox, int redblack, int nc) noexcept</argsstring>
        <name>abec_gsrb</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhy</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bX</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bY</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bZ</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m2</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m4</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m3</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m5</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f4</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f3</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f5</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>vbox</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>redblack</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_3D_K.H" line="239" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_3D_K.H" bodystart="239" bodyend="304"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8fc92fb4f4a8a5233b4c3fb53acdaadd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::abec_gsrb_os</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;phi, Array4&lt; Real const &gt; const &amp;rhs, Real alpha, Array4&lt; Real const &gt; const &amp;a, Real dhx, Real dhy, Real dhz, Array4&lt; Real const &gt; const &amp;bX, Array4&lt; Real const &gt; const &amp;bY, Array4&lt; Real const &gt; const &amp;bZ, Array4&lt; int const &gt; const &amp;m0, Array4&lt; int const &gt; const &amp;m2, Array4&lt; int const &gt; const &amp;m4, Array4&lt; int const &gt; const &amp;m1, Array4&lt; int const &gt; const &amp;m3, Array4&lt; int const &gt; const &amp;m5, Array4&lt; Real const &gt; const &amp;f0, Array4&lt; Real const &gt; const &amp;f2, Array4&lt; Real const &gt; const &amp;f4, Array4&lt; Real const &gt; const &amp;f1, Array4&lt; Real const &gt; const &amp;f3, Array4&lt; Real const &gt; const &amp;f5, Array4&lt; int const &gt; const &amp;osm, Box const &amp;vbox, int redblack, int nc) noexcept</argsstring>
        <name>abec_gsrb_os</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhy</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bX</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bY</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bZ</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m2</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m4</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m3</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m5</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f4</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f3</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f5</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>osm</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>vbox</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>redblack</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_3D_K.H" line="307" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_3D_K.H" bodystart="307" bodyend="377"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a018951602c1fef6c43136b743a0a3a2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::tridiagonal_solve</definition>
        <argsstring>(Array1D&lt; Real, 0, 31 &gt; &amp;a_ls, Array1D&lt; Real, 0, 31 &gt; &amp;b_ls, Array1D&lt; Real, 0, 31 &gt; &amp;c_ls, Array1D&lt; Real, 0, 31 &gt; &amp;r_ls, Array1D&lt; Real, 0, 31 &gt; &amp;u_ls, Array1D&lt; Real, 0, 31 &gt; &amp;gam, int ilen) noexcept</argsstring>
        <name>tridiagonal_solve</name>
        <param>
          <type><ref refid="structamrex_1_1Array1D" kindref="compound">Array1D</ref>&lt; Real, 0, 31 &gt; &amp;</type>
          <declname>a_ls</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array1D" kindref="compound">Array1D</ref>&lt; Real, 0, 31 &gt; &amp;</type>
          <declname>b_ls</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array1D" kindref="compound">Array1D</ref>&lt; Real, 0, 31 &gt; &amp;</type>
          <declname>c_ls</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array1D" kindref="compound">Array1D</ref>&lt; Real, 0, 31 &gt; &amp;</type>
          <declname>r_ls</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array1D" kindref="compound">Array1D</ref>&lt; Real, 0, 31 &gt; &amp;</type>
          <declname>u_ls</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array1D" kindref="compound">Array1D</ref>&lt; Real, 0, 31 &gt; &amp;</type>
          <declname>gam</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ilen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_3D_K.H" line="380" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_3D_K.H" bodystart="380" bodyend="396"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1acc632042bed935965e1b214026a03f44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::abec_gsrb_with_line_solve</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;phi, Array4&lt; Real const &gt; const &amp;rhs, Real alpha, Array4&lt; Real const &gt; const &amp;a, Real dhx, Real dhy, Real dhz, Array4&lt; Real const &gt; const &amp;bX, Array4&lt; Real const &gt; const &amp;bY, Array4&lt; Real const &gt; const &amp;bZ, Array4&lt; int const &gt; const &amp;m0, Array4&lt; int const &gt; const &amp;m2, Array4&lt; int const &gt; const &amp;m4, Array4&lt; int const &gt; const &amp;m1, Array4&lt; int const &gt; const &amp;m3, Array4&lt; int const &gt; const &amp;m5, Array4&lt; Real const &gt; const &amp;f0, Array4&lt; Real const &gt; const &amp;f2, Array4&lt; Real const &gt; const &amp;f4, Array4&lt; Real const &gt; const &amp;f1, Array4&lt; Real const &gt; const &amp;f3, Array4&lt; Real const &gt; const &amp;f5, Box const &amp;vbox, int redblack, int nc) noexcept</argsstring>
        <name>abec_gsrb_with_line_solve</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhy</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bX</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bY</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bZ</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m2</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m4</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m3</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m5</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f4</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f3</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f5</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>vbox</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>redblack</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_3D_K.H" line="399" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_3D_K.H" bodystart="399" bodyend="674"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a140f376e944eccd03cf34965205cffa7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::overset_rescale_bcoef_z</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;bZ, Array4&lt; int const &gt; const &amp;osm, int ncomp, Real osfac) noexcept</argsstring>
        <name>overset_rescale_bcoef_z</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>bZ</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>osm</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>osfac</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_3D_K.H" line="711" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_3D_K.H" bodystart="711" bodyend="725"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aeb3c75221971bc026998081171ed59f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlalap_adotx</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;y, Array4&lt; Real const &gt; const &amp;x, Array4&lt; Real const &gt; const &amp;a, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, Real alpha, Real beta) noexcept</argsstring>
        <name>mlalap_adotx</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>beta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_1D_K.H" line="8" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_1D_K.H" bodystart="8" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aaac7971e94b5ae2a70fe8997ab99a5f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlalap_adotx_m</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;y, Array4&lt; Real const &gt; const &amp;x, Array4&lt; Real const &gt; const &amp;a, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, Real alpha, Real beta, Real dx, Real probxlo) noexcept</argsstring>
        <name>mlalap_adotx_m</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>probxlo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_1D_K.H" line="27" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_1D_K.H" bodystart="27" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a2517fa011be1ad8e7fe7cf02da231003" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlalap_normalize</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;x, Array4&lt; Real const &gt; const &amp;a, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, Real alpha, Real beta) noexcept</argsstring>
        <name>mlalap_normalize</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>beta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_1D_K.H" line="51" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_1D_K.H" bodystart="51" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a5ca86c82d250d69cb1d504a37e8fcc82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlalap_normalize_m</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;x, Array4&lt; Real const &gt; const &amp;a, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, Real alpha, Real beta, Real dx, Real probxlo) noexcept</argsstring>
        <name>mlalap_normalize_m</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>probxlo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_1D_K.H" line="68" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_1D_K.H" bodystart="68" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab6cb3fcc14e5d64cb9b409eba2434e5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlalap_flux_x</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fx, Array4&lt; Real const &gt; const &amp;sol, Real fac) noexcept</argsstring>
        <name>mlalap_flux_x</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>fac</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_1D_K.H" line="88" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_1D_K.H" bodystart="88" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a2765ecf10160b70e9f1e0be2a3d48058" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlalap_flux_x_m</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fx, Array4&lt; Real const &gt; const &amp;sol, Real fac, Real dx, Real probxlo) noexcept</argsstring>
        <name>mlalap_flux_x_m</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>fac</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>probxlo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_1D_K.H" line="101" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_1D_K.H" bodystart="101" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad6ad21f64232e245ffd287857af5fbed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlalap_flux_xface</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fx, Array4&lt; Real const &gt; const &amp;sol, Real fac, int xlen) noexcept</argsstring>
        <name>mlalap_flux_xface</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>fac</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>xlen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_1D_K.H" line="116" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_1D_K.H" bodystart="116" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a0ac8851978dd8ea00367fd356bc6eea9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlalap_flux_xface_m</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fx, Array4&lt; Real const &gt; const &amp;sol, Real fac, int xlen, Real dx, Real probxlo) noexcept</argsstring>
        <name>mlalap_flux_xface_m</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>fac</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>xlen</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>probxlo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_1D_K.H" line="128" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_1D_K.H" bodystart="128" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aeafc3c613476058bd1bc153a14f0f35f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlalap_gsrb</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;phi, Array4&lt; Real const &gt; const &amp;rhs, Real alpha, Real dhx, Array4&lt; Real const &gt; const &amp;a, Array4&lt; Real const &gt; const &amp;f0, Array4&lt; int const &gt; const &amp;m0, Array4&lt; Real const &gt; const &amp;f1, Array4&lt; int const &gt; const &amp;m1, Box const &amp;vbox, int redblack) noexcept</argsstring>
        <name>mlalap_gsrb</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>vbox</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>redblack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_1D_K.H" line="143" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_1D_K.H" bodystart="143" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a96f49a315eadd3ec9e8304c9da3be550" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlalap_gsrb_m</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;phi, Array4&lt; Real const &gt; const &amp;rhs, Real alpha, Real dhx, Array4&lt; Real const &gt; const &amp;a, Array4&lt; Real const &gt; const &amp;f0, Array4&lt; int const &gt; const &amp;m0, Array4&lt; Real const &gt; const &amp;f1, Array4&lt; int const &gt; const &amp;m1, Box const &amp;vbox, int redblack, Real dx, Real probxlo)</argsstring>
        <name>mlalap_gsrb_m</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>vbox</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>redblack</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>probxlo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_1D_K.H" line="176" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_1D_K.H" bodystart="176" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a043c8e8911fabb2e414a873d9e5dd360" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlalap_flux_y</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fy, Array4&lt; Real const &gt; const &amp;sol, Real fac) noexcept</argsstring>
        <name>mlalap_flux_y</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>fac</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_2D_K.H" line="168" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_2D_K.H" bodystart="168" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a2e517c8b88d7661bb882f3c63e17e3ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlalap_flux_y_m</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fy, Array4&lt; Real const &gt; const &amp;sol, Real fac, Real dx, Real probxlo) noexcept</argsstring>
        <name>mlalap_flux_y_m</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>fac</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>probxlo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_2D_K.H" line="183" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_2D_K.H" bodystart="183" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6e6257e23cf7d67472b6032352c91ba1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlalap_flux_yface</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fy, Array4&lt; Real const &gt; const &amp;sol, Real fac, int ylen) noexcept</argsstring>
        <name>mlalap_flux_yface</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>fac</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ylen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_2D_K.H" line="200" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_2D_K.H" bodystart="200" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a68541df85e90cff68fcaa6c51ae0bfe6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlalap_flux_yface_m</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fy, Array4&lt; Real const &gt; const &amp;sol, Real fac, int ylen, Real dx, Real probxlo) noexcept</argsstring>
        <name>mlalap_flux_yface_m</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>fac</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ylen</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>probxlo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_2D_K.H" line="219" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_2D_K.H" bodystart="219" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6961b6ffa168a57251a2c624853bcdf8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlalap_gsrb</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;phi, Array4&lt; Real const &gt; const &amp;rhs, Real alpha, Real dhx, Real dhy, Array4&lt; Real const &gt; const &amp;a, Array4&lt; Real const &gt; const &amp;f0, Array4&lt; int const &gt; const &amp;m0, Array4&lt; Real const &gt; const &amp;f1, Array4&lt; int const &gt; const &amp;m1, Array4&lt; Real const &gt; const &amp;f2, Array4&lt; int const &gt; const &amp;m2, Array4&lt; Real const &gt; const &amp;f3, Array4&lt; int const &gt; const &amp;m3, Box const &amp;vbox, int redblack) noexcept</argsstring>
        <name>mlalap_gsrb</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m2</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f3</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m3</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>vbox</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>redblack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_2D_K.H" line="241" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_2D_K.H" bodystart="241" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac66dd1a360aba81784ce91914dd248ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlalap_gsrb_m</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;phi, Array4&lt; Real const &gt; const &amp;rhs, Real alpha, Real dhx, Real dhy, Array4&lt; Real const &gt; const &amp;a, Array4&lt; Real const &gt; const &amp;f0, Array4&lt; int const &gt; const &amp;m0, Array4&lt; Real const &gt; const &amp;f1, Array4&lt; int const &gt; const &amp;m1, Array4&lt; Real const &gt; const &amp;f2, Array4&lt; int const &gt; const &amp;m2, Array4&lt; Real const &gt; const &amp;f3, Array4&lt; int const &gt; const &amp;m3, Box const &amp;vbox, int redblack, Real dx, Real probxlo) noexcept</argsstring>
        <name>mlalap_gsrb_m</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m2</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f3</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m3</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>vbox</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>redblack</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>probxlo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_2D_K.H" line="283" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_2D_K.H" bodystart="283" bodyend="327"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aff4a4759886d0d815c4d1266415eb937" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlalap_flux_z</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fz, Array4&lt; Real const &gt; const &amp;sol, Real fac) noexcept</argsstring>
        <name>mlalap_flux_z</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>fac</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_3D_K.H" line="129" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_3D_K.H" bodystart="129" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a13449831c24c814a0e3046686b305a3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlalap_flux_zface</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fz, Array4&lt; Real const &gt; const &amp;sol, Real fac, int zlen) noexcept</argsstring>
        <name>mlalap_flux_zface</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>fac</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>zlen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_3D_K.H" line="146" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_3D_K.H" bodystart="146" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a3cea40e415a6811dcdd4c34c86e09961" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlalap_gsrb</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;phi, Array4&lt; Real const &gt; const &amp;rhs, Real alpha, Real dhx, Real dhy, Real dhz, Array4&lt; Real const &gt; const &amp;a, Array4&lt; Real const &gt; const &amp;f0, Array4&lt; int const &gt; const &amp;m0, Array4&lt; Real const &gt; const &amp;f1, Array4&lt; int const &gt; const &amp;m1, Array4&lt; Real const &gt; const &amp;f2, Array4&lt; int const &gt; const &amp;m2, Array4&lt; Real const &gt; const &amp;f3, Array4&lt; int const &gt; const &amp;m3, Array4&lt; Real const &gt; const &amp;f4, Array4&lt; int const &gt; const &amp;m4, Array4&lt; Real const &gt; const &amp;f5, Array4&lt; int const &gt; const &amp;m5, Box const &amp;vbox, int redblack) noexcept</argsstring>
        <name>mlalap_gsrb</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhy</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m2</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f3</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m3</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f4</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m4</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f5</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m5</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>vbox</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>redblack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_3D_K.H" line="170" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_3D_K.H" bodystart="170" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a078658f433f21a921eaee99b9bb2423f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE int amrex::coarsen_overset_mask</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; int &gt; const &amp;cmsk, Array4&lt; int const &gt; const &amp;fmsk) noexcept</argsstring>
        <name>coarsen_overset_mask</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; const &amp;</type>
          <declname>cmsk</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>fmsk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellABecLap_1D_K.H" line="8" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellABecLap_1D_K.H" bodystart="8" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4b562b00cd47b22ceabc8f4f68251cde" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebabeclap_adotx</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;y, Array4&lt; Real const &gt; const &amp;x, Array4&lt; Real const &gt; const &amp;a, Array4&lt; Real const &gt; const &amp;bX, Array4&lt; Real const &gt; const &amp;bY, Array4&lt; const int &gt; const &amp;ccm, Array4&lt; EBCellFlag const &gt; const &amp;flag, Array4&lt; Real const &gt; const &amp;vfrc, Array4&lt; Real const &gt; const &amp;apx, Array4&lt; Real const &gt; const &amp;apy, Array4&lt; Real const &gt; const &amp;fcx, Array4&lt; Real const &gt; const &amp;fcy, Array4&lt; Real const &gt; const &amp;ba, Array4&lt; Real const &gt; const &amp;bc, Array4&lt; Real const &gt; const &amp;beb, bool is_dirichlet, Array4&lt; Real const &gt; const &amp;phieb, bool is_inhomog, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, Real alpha, Real beta, int ncomp, bool beta_on_centroid, bool phi_on_centroid) noexcept</argsstring>
        <name>mlebabeclap_adotx</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bX</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bY</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; const &amp;</type>
          <declname>ccm</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> const &gt; const &amp;</type>
          <declname>flag</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vfrc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>beb</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_dirichlet</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>phieb</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_inhomog</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>beta</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>beta_on_centroid</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>phi_on_centroid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_2D_K.H" line="8" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_2D_K.H" bodystart="8" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1adaf35cd6ed336b8c439985415ea0b20f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebabeclap_ebflux</definition>
        <argsstring>(int i, int j, int k, int n, Array4&lt; Real &gt; const &amp;feb, Array4&lt; Real const &gt; const &amp;x, Array4&lt; EBCellFlag const &gt; const &amp;flag, Array4&lt; Real const &gt; const &amp;vfrc, Array4&lt; Real const &gt; const &amp;apx, Array4&lt; Real const &gt; const &amp;apy, Array4&lt; Real const &gt; const &amp;bc, Array4&lt; Real const &gt; const &amp;beb, Array4&lt; Real const &gt; const &amp;phieb, bool is_inhomog, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv) noexcept</argsstring>
        <name>mlebabeclap_ebflux</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>feb</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> const &gt; const &amp;</type>
          <declname>flag</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vfrc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>beb</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>phieb</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_inhomog</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_2D_K.H" line="144" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_2D_K.H" bodystart="144" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a25e78ce293962126c40b99388937ee44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebabeclap_gsrb</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;phi, Array4&lt; Real const &gt; const &amp;rhs, Real alpha, Array4&lt; Real const &gt; const &amp;a, Real dhx, Real dhy, Array4&lt; Real const &gt; const &amp;bX, Array4&lt; Real const &gt; const &amp;bY, Array4&lt; int const &gt; const &amp;m0, Array4&lt; int const &gt; const &amp;m2, Array4&lt; int const &gt; const &amp;m1, Array4&lt; int const &gt; const &amp;m3, Array4&lt; Real const &gt; const &amp;f0, Array4&lt; Real const &gt; const &amp;f2, Array4&lt; Real const &gt; const &amp;f1, Array4&lt; Real const &gt; const &amp;f3, Array4&lt; const int &gt; const &amp;ccm, Array4&lt; EBCellFlag const &gt; const &amp;flag, Array4&lt; Real const &gt; const &amp;vfrc, Array4&lt; Real const &gt; const &amp;apx, Array4&lt; Real const &gt; const &amp;apy, Array4&lt; Real const &gt; const &amp;fcx, Array4&lt; Real const &gt; const &amp;fcy, Array4&lt; Real const &gt; const &amp;ba, Array4&lt; Real const &gt; const &amp;bc, Array4&lt; Real const &gt; const &amp;beb, bool is_dirichlet, bool beta_on_centroid, bool phi_on_centroid, Box const &amp;vbox, int redblack, int ncomp) noexcept</argsstring>
        <name>mlebabeclap_gsrb</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bX</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bY</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m2</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m3</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f3</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; const &amp;</type>
          <declname>ccm</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> const &gt; const &amp;</type>
          <declname>flag</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vfrc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>beb</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_dirichlet</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>beta_on_centroid</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>phi_on_centroid</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>vbox</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>redblack</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_2D_K.H" line="213" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_2D_K.H" bodystart="213" bodyend="430"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa4047a599fca09d24c83a32f79561ba2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebabeclap_flux_x</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fx, Array4&lt; Real const &gt; const &amp;apx, Array4&lt; Real const &gt; const &amp;fcx, Array4&lt; Real const &gt; const &amp;sol, Array4&lt; Real const &gt; const &amp;bX, Array4&lt; int const &gt; const &amp;ccm, Real dhx, int face_only, int ncomp, Box const &amp;xbox, bool beta_on_centroid, bool phi_on_centroid) noexcept</argsstring>
        <name>mlebabeclap_flux_x</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bX</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>ccm</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhx</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>face_only</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>xbox</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>beta_on_centroid</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>phi_on_centroid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_2D_K.H" line="433" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_2D_K.H" bodystart="433" bodyend="462"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af822987d7c096263dbeda2c40fbc231f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebabeclap_flux_y</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fy, Array4&lt; Real const &gt; const &amp;apy, Array4&lt; Real const &gt; const &amp;fcy, Array4&lt; Real const &gt; const &amp;sol, Array4&lt; Real const &gt; const &amp;bY, Array4&lt; int const &gt; const &amp;ccm, Real dhy, int face_only, int ncomp, Box const &amp;ybox, bool beta_on_centroid, bool phi_on_centroid) noexcept</argsstring>
        <name>mlebabeclap_flux_y</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bY</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>ccm</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhy</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>face_only</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>ybox</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>beta_on_centroid</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>phi_on_centroid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_2D_K.H" line="465" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_2D_K.H" bodystart="465" bodyend="494"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a5535836b58895eb3be42a2e5ce2d85d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebabeclap_flux_x_0</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fx, Array4&lt; Real const &gt; const &amp;apx, Array4&lt; Real const &gt; const &amp;sol, Array4&lt; Real const &gt; const &amp;bX, Real dhx, int face_only, int ncomp, Box const &amp;xbox) noexcept</argsstring>
        <name>mlebabeclap_flux_x_0</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bX</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhx</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>face_only</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>xbox</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_2D_K.H" line="497" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_2D_K.H" bodystart="497" bodyend="513"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8ce01751c9766348d8cf2be99815a5da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebabeclap_flux_y_0</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fy, Array4&lt; Real const &gt; const &amp;apy, Array4&lt; Real const &gt; const &amp;sol, Array4&lt; Real const &gt; const &amp;bY, Real dhy, int face_only, int ncomp, Box const &amp;ybox) noexcept</argsstring>
        <name>mlebabeclap_flux_y_0</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bY</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhy</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>face_only</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>ybox</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_2D_K.H" line="516" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_2D_K.H" bodystart="516" bodyend="532"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6d4b0999f5e5f95628d6dde683d92b75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebabeclap_grad_x</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;gx, Array4&lt; Real const &gt; const &amp;sol, Array4&lt; Real const &gt; const &amp;apx, Array4&lt; Real const &gt; const &amp;fcx, Array4&lt; int const &gt; const &amp;ccm, Real dxi, int ncomp, bool phi_on_centroid) noexcept</argsstring>
        <name>mlebabeclap_grad_x</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>gx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>ccm</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dxi</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>phi_on_centroid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_2D_K.H" line="535" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_2D_K.H" bodystart="535" bodyend="555"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aea627326ba400186a5122d27ec7d9e2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebabeclap_grad_y</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;gy, Array4&lt; Real const &gt; const &amp;sol, Array4&lt; Real const &gt; const &amp;apy, Array4&lt; Real const &gt; const &amp;fcy, Array4&lt; int const &gt; const &amp;ccm, Real dyi, int ncomp, bool phi_on_centroid) noexcept</argsstring>
        <name>mlebabeclap_grad_y</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>gy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>ccm</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dyi</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>phi_on_centroid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_2D_K.H" line="558" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_2D_K.H" bodystart="558" bodyend="578"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a067e6c0418ffaead9da2094841a88f3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebabeclap_grad_x_0</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;gx, Array4&lt; Real const &gt; const &amp;sol, Array4&lt; Real const &gt; const &amp;apx, Real dxi, int ncomp) noexcept</argsstring>
        <name>mlebabeclap_grad_x_0</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>gx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dxi</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_2D_K.H" line="581" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_2D_K.H" bodystart="581" bodyend="592"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a2213da36fad54c31b7ae0ad45af6e507" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebabeclap_grad_y_0</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;gy, Array4&lt; Real const &gt; const &amp;sol, Array4&lt; Real const &gt; const &amp;apy, Real dyi, int ncomp) noexcept</argsstring>
        <name>mlebabeclap_grad_y_0</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>gy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apy</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dyi</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_2D_K.H" line="595" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_2D_K.H" bodystart="595" bodyend="606"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa1be19da2b6c3b87bbcd74ed104f1e33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebabeclap_normalize</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;phi, Real alpha, Array4&lt; Real const &gt; const &amp;a, Real dhx, Real dhy, Array4&lt; Real const &gt; const &amp;bX, Array4&lt; Real const &gt; const &amp;bY, Array4&lt; const int &gt; const &amp;ccm, Array4&lt; EBCellFlag const &gt; const &amp;flag, Array4&lt; Real const &gt; const &amp;vfrc, Array4&lt; Real const &gt; const &amp;apx, Array4&lt; Real const &gt; const &amp;apy, Array4&lt; Real const &gt; const &amp;fcx, Array4&lt; Real const &gt; const &amp;fcy, Array4&lt; Real const &gt; const &amp;ba, Array4&lt; Real const &gt; const &amp;bc, Array4&lt; Real const &gt; const &amp;beb, bool is_dirichlet, bool beta_on_centroid, int ncomp) noexcept</argsstring>
        <name>mlebabeclap_normalize</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bX</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bY</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; const &amp;</type>
          <declname>ccm</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> const &gt; const &amp;</type>
          <declname>flag</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vfrc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>beb</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_dirichlet</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>beta_on_centroid</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_2D_K.H" line="609" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_2D_K.H" bodystart="609" bodyend="708"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aff3db9e0a6ad08f9e98ff966faeb1244" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebabeclap_adotx</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;y, Array4&lt; Real const &gt; const &amp;x, Array4&lt; Real const &gt; const &amp;a, Array4&lt; Real const &gt; const &amp;bX, Array4&lt; Real const &gt; const &amp;bY, Array4&lt; Real const &gt; const &amp;bZ, Array4&lt; const int &gt; const &amp;ccm, Array4&lt; EBCellFlag const &gt; const &amp;flag, Array4&lt; Real const &gt; const &amp;vfrc, Array4&lt; Real const &gt; const &amp;apx, Array4&lt; Real const &gt; const &amp;apy, Array4&lt; Real const &gt; const &amp;apz, Array4&lt; Real const &gt; const &amp;fcx, Array4&lt; Real const &gt; const &amp;fcy, Array4&lt; Real const &gt; const &amp;fcz, Array4&lt; Real const &gt; const &amp;ba, Array4&lt; Real const &gt; const &amp;bc, Array4&lt; Real const &gt; const &amp;beb, bool is_dirichlet, Array4&lt; Real const &gt; const &amp;phieb, bool is_inhomog, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, Real alpha, Real beta, int ncomp, bool beta_on_centroid, bool phi_on_centroid) noexcept</argsstring>
        <name>mlebabeclap_adotx</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bX</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bY</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bZ</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; const &amp;</type>
          <declname>ccm</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> const &gt; const &amp;</type>
          <declname>flag</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vfrc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>beb</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_dirichlet</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>phieb</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_inhomog</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>beta</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>beta_on_centroid</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>phi_on_centroid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_3D_K.H" line="8" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_3D_K.H" bodystart="8" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4031141e7aabd2031592fa381a024c4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebabeclap_ebflux</definition>
        <argsstring>(int i, int j, int k, int n, Array4&lt; Real &gt; const &amp;feb, Array4&lt; Real const &gt; const &amp;x, Array4&lt; EBCellFlag const &gt; const &amp;flag, Array4&lt; Real const &gt; const &amp;vfrc, Array4&lt; Real const &gt; const &amp;apx, Array4&lt; Real const &gt; const &amp;apy, Array4&lt; Real const &gt; const &amp;apz, Array4&lt; Real const &gt; const &amp;bc, Array4&lt; Real const &gt; const &amp;beb, Array4&lt; Real const &gt; const &amp;phieb, bool is_inhomog, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv) noexcept</argsstring>
        <name>mlebabeclap_ebflux</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>feb</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> const &gt; const &amp;</type>
          <declname>flag</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vfrc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>beb</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>phieb</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_inhomog</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_3D_K.H" line="259" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_3D_K.H" bodystart="259" bodyend="335"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a73330382fb4300bec24c2b2249f212d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebabeclap_gsrb</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;phi, Array4&lt; Real const &gt; const &amp;rhs, Real alpha, Array4&lt; Real const &gt; const &amp;a, Real dhx, Real dhy, Real dhz, Array4&lt; Real const &gt; const &amp;bX, Array4&lt; Real const &gt; const &amp;bY, Array4&lt; Real const &gt; const &amp;bZ, Array4&lt; int const &gt; const &amp;m0, Array4&lt; int const &gt; const &amp;m2, Array4&lt; int const &gt; const &amp;m4, Array4&lt; int const &gt; const &amp;m1, Array4&lt; int const &gt; const &amp;m3, Array4&lt; int const &gt; const &amp;m5, Array4&lt; Real const &gt; const &amp;f0, Array4&lt; Real const &gt; const &amp;f2, Array4&lt; Real const &gt; const &amp;f4, Array4&lt; Real const &gt; const &amp;f1, Array4&lt; Real const &gt; const &amp;f3, Array4&lt; Real const &gt; const &amp;f5, Array4&lt; const int &gt; const &amp;ccm, Array4&lt; EBCellFlag const &gt; const &amp;flag, Array4&lt; Real const &gt; const &amp;vfrc, Array4&lt; Real const &gt; const &amp;apx, Array4&lt; Real const &gt; const &amp;apy, Array4&lt; Real const &gt; const &amp;apz, Array4&lt; Real const &gt; const &amp;fcx, Array4&lt; Real const &gt; const &amp;fcy, Array4&lt; Real const &gt; const &amp;fcz, Array4&lt; Real const &gt; const &amp;ba, Array4&lt; Real const &gt; const &amp;bc, Array4&lt; Real const &gt; const &amp;beb, bool is_dirichlet, bool beta_on_centroid, bool phi_on_centroid, Box const &amp;vbox, int redblack, int ncomp) noexcept</argsstring>
        <name>mlebabeclap_gsrb</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhy</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bX</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bY</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bZ</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m2</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m4</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m3</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m5</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f4</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f3</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f5</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; const &amp;</type>
          <declname>ccm</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> const &gt; const &amp;</type>
          <declname>flag</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vfrc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>beb</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_dirichlet</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>beta_on_centroid</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>phi_on_centroid</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>vbox</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>redblack</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_3D_K.H" line="338" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_3D_K.H" bodystart="338" bodyend="683"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae619936d28f3a608099b8f6eb1f8536a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebabeclap_flux_z</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fz, Array4&lt; Real const &gt; const &amp;apz, Array4&lt; Real const &gt; const &amp;fcz, Array4&lt; Real const &gt; const &amp;sol, Array4&lt; Real const &gt; const &amp;bZ, Array4&lt; int const &gt; const &amp;ccm, Real dhz, int face_only, int ncomp, Box const &amp;zbox, bool beta_on_centroid, bool phi_on_centroid) noexcept</argsstring>
        <name>mlebabeclap_flux_z</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bZ</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>ccm</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhz</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>face_only</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>zbox</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>beta_on_centroid</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>phi_on_centroid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_3D_K.H" line="774" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_3D_K.H" bodystart="774" bodyend="816"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a83cc47a5490605c957d9ba463e0df6dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebabeclap_flux_z_0</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fz, Array4&lt; Real const &gt; const &amp;apz, Array4&lt; Real const &gt; const &amp;sol, Array4&lt; Real const &gt; const &amp;bZ, Real dhz, int face_only, int ncomp, Box const &amp;zbox) noexcept</argsstring>
        <name>mlebabeclap_flux_z_0</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bZ</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhz</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>face_only</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>zbox</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_3D_K.H" line="857" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_3D_K.H" bodystart="857" bodyend="873"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6c71d5d77d11bf52377d6870f104d345" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebabeclap_grad_z</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;gz, Array4&lt; Real const &gt; const &amp;sol, Array4&lt; Real const &gt; const &amp;apz, Array4&lt; Real const &gt; const &amp;fcz, Array4&lt; int const &gt; const &amp;ccm, Real dzi, int ncomp, bool phi_on_centroid) noexcept</argsstring>
        <name>mlebabeclap_grad_z</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>gz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>ccm</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dzi</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>phi_on_centroid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_3D_K.H" line="936" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_3D_K.H" bodystart="936" bodyend="963"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a906c729b79191fe3198b461187b58068" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebabeclap_grad_z_0</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;gz, Array4&lt; Real const &gt; const &amp;sol, Array4&lt; Real const &gt; const &amp;apz, Real dzi, int ncomp) noexcept</argsstring>
        <name>mlebabeclap_grad_z_0</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>gz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apz</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dzi</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_3D_K.H" line="994" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_3D_K.H" bodystart="994" bodyend="1005"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a19b14155b9c1a4a1a3f73cc08d1d0c66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebabeclap_normalize</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;phi, Real alpha, Array4&lt; Real const &gt; const &amp;a, Real dhx, Real dhy, Real dhz, Array4&lt; Real const &gt; const &amp;bX, Array4&lt; Real const &gt; const &amp;bY, Array4&lt; Real const &gt; const &amp;bZ, Array4&lt; const int &gt; const &amp;ccm, Array4&lt; EBCellFlag const &gt; const &amp;flag, Array4&lt; Real const &gt; const &amp;vfrc, Array4&lt; Real const &gt; const &amp;apx, Array4&lt; Real const &gt; const &amp;apy, Array4&lt; Real const &gt; const &amp;apz, Array4&lt; Real const &gt; const &amp;fcx, Array4&lt; Real const &gt; const &amp;fcy, Array4&lt; Real const &gt; const &amp;fcz, Array4&lt; Real const &gt; const &amp;ba, Array4&lt; Real const &gt; const &amp;bc, Array4&lt; Real const &gt; const &amp;beb, bool is_dirichlet, bool beta_on_centroid, int ncomp) noexcept</argsstring>
        <name>mlebabeclap_normalize</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhy</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bX</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bY</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bZ</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; const &amp;</type>
          <declname>ccm</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> const &gt; const &amp;</type>
          <declname>flag</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vfrc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>beb</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_dirichlet</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>beta_on_centroid</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_3D_K.H" line="1008" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_3D_K.H" bodystart="1008" bodyend="1152"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae651916b2a04b9033825d343fe244b3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebabeclap_apply_bc_x</definition>
        <argsstring>(int side, Box const &amp;box, int blen, Array4&lt; Real &gt; const &amp;phi, Array4&lt; int const &gt; const &amp;mask, Array4&lt; Real const &gt; const &amp;area, BoundCond bct, Real bcl, Array4&lt; Real const &gt; const &amp;bcval, int maxorder, Real dxinv, int inhomog, int icomp) noexcept</argsstring>
        <name>mlebabeclap_apply_bc_x</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>side</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>blen</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>area</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1BoundCond" kindref="compound">BoundCond</ref></type>
          <declname>bct</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>bcl</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcval</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>maxorder</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>inhomog</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>icomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_K.H" line="28" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_K.H" bodystart="28" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a268bac202eeb66c4da6dd4d271d5656e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebabeclap_apply_bc_y</definition>
        <argsstring>(int side, Box const &amp;box, int blen, Array4&lt; Real &gt; const &amp;phi, Array4&lt; int const &gt; const &amp;mask, Array4&lt; Real const &gt; const &amp;area, BoundCond bct, Real bcl, Array4&lt; Real const &gt; const &amp;bcval, int maxorder, Real dyinv, int inhomog, int icomp) noexcept</argsstring>
        <name>mlebabeclap_apply_bc_y</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>side</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>blen</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>area</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1BoundCond" kindref="compound">BoundCond</ref></type>
          <declname>bct</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>bcl</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcval</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>maxorder</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dyinv</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>inhomog</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>icomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_K.H" line="114" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_K.H" bodystart="114" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a04cedf52619400ba12317eb179625198" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebabeclap_apply_bc_z</definition>
        <argsstring>(int side, Box const &amp;box, int blen, Array4&lt; Real &gt; const &amp;phi, Array4&lt; int const &gt; const &amp;mask, Array4&lt; Real const &gt; const &amp;area, BoundCond bct, Real bcl, Array4&lt; Real const &gt; const &amp;bcval, int maxorder, Real dzinv, int inhomog, int icomp) noexcept</argsstring>
        <name>mlebabeclap_apply_bc_z</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>side</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>blen</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>area</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1BoundCond" kindref="compound">BoundCond</ref></type>
          <declname>bct</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>bcl</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcval</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>maxorder</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dzinv</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>inhomog</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>icomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_K.H" line="200" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_K.H" bodystart="200" bodyend="283"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a884c54a40ac42d7d2002630aaf5a846b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebtensor_cross_terms_fx</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fx, Array4&lt; Real const &gt; const &amp;vel, Array4&lt; Real const &gt; const &amp;etax, Array4&lt; Real const &gt; const &amp;kapx, Array4&lt; Real const &gt; const &amp;apx, Array4&lt; EBCellFlag const &gt; const &amp;flag, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv) noexcept</argsstring>
        <name>mlebtensor_cross_terms_fx</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>etax</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>kapx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> const &gt; const &amp;</type>
          <declname>flag</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensor_2D_K.H" line="17" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensor_2D_K.H" bodystart="17" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a64a93c7f21695eb012a3295f93e588df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebtensor_cross_terms_fy</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fy, Array4&lt; Real const &gt; const &amp;vel, Array4&lt; Real const &gt; const &amp;etay, Array4&lt; Real const &gt; const &amp;kapy, Array4&lt; Real const &gt; const &amp;apy, Array4&lt; EBCellFlag const &gt; const &amp;flag, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv) noexcept</argsstring>
        <name>mlebtensor_cross_terms_fy</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>etay</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>kapy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> const &gt; const &amp;</type>
          <declname>flag</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensor_2D_K.H" line="62" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensor_2D_K.H" bodystart="62" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a68a1036a158e682ecc2cb20a73646d12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebtensor_cross_terms</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;Ax, Array4&lt; Real const &gt; const &amp;fx, Array4&lt; Real const &gt; const &amp;fy, Array4&lt; Real const &gt; const &amp;vel, Array4&lt; Real const &gt; const &amp;etab, Array4&lt; Real const &gt; const &amp;kapb, Array4&lt; int const &gt; const &amp;ccm, Array4&lt; EBCellFlag const &gt; const &amp;flag, Array4&lt; Real const &gt; const &amp;vol, Array4&lt; Real const &gt; const &amp;apx, Array4&lt; Real const &gt; const &amp;apy, Array4&lt; Real const &gt; const &amp;fcx, Array4&lt; Real const &gt; const &amp;fcy, Array4&lt; Real const &gt; const &amp;bc, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, Real bscalar) noexcept</argsstring>
        <name>mlebtensor_cross_terms</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>Ax</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>etab</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>kapb</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>ccm</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> const &gt; const &amp;</type>
          <declname>flag</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vol</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>bscalar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensor_2D_K.H" line="108" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensor_2D_K.H" bodystart="108" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1acef8c44712bfa040cb9408c2d61b5319" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebtensor_flux_0</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;Ax, Array4&lt; Real const &gt; const &amp;fx, Array4&lt; Real const &gt; const &amp;ap, Real bscalar) noexcept</argsstring>
        <name>mlebtensor_flux_0</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>Ax</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ap</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>bscalar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensor_2D_K.H" line="259" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensor_2D_K.H" bodystart="259" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa196b29d490603bb92e78f1e56593846" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebtensor_flux_x</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;Ax, Array4&lt; Real const &gt; const &amp;fx, Array4&lt; Real const &gt; const &amp;apx, Array4&lt; Real const &gt; const &amp;fcx, Real const bscalar, Array4&lt; int const &gt; const &amp;ccm, int face_only, Box const &amp;xbox) noexcept</argsstring>
        <name>mlebtensor_flux_x</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>Ax</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcx</declname>
        </param>
        <param>
          <type>Real const</type>
          <declname>bscalar</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>ccm</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>face_only</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>xbox</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensor_2D_K.H" line="283" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensor_2D_K.H" bodystart="283" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a52689abb9ae7e544a779a4e9092deac7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebtensor_flux_y</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;Ay, Array4&lt; Real const &gt; const &amp;fy, Array4&lt; Real const &gt; const &amp;apy, Array4&lt; Real const &gt; const &amp;fcy, Real const bscalar, Array4&lt; int const &gt; const &amp;ccm, int face_only, Box const &amp;ybox) noexcept</argsstring>
        <name>mlebtensor_flux_y</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>Ay</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcy</declname>
        </param>
        <param>
          <type>Real const</type>
          <declname>bscalar</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>ccm</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>face_only</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>ybox</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensor_2D_K.H" line="316" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensor_2D_K.H" bodystart="316" bodyend="346"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a9ef256dca543656f40f971edaa9b90e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebtensor_cross_terms_fz</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fz, Array4&lt; Real const &gt; const &amp;vel, Array4&lt; Real const &gt; const &amp;etaz, Array4&lt; Real const &gt; const &amp;kapz, Array4&lt; Real const &gt; const &amp;apz, Array4&lt; EBCellFlag const &gt; const &amp;flag, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv) noexcept</argsstring>
        <name>mlebtensor_cross_terms_fz</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>etaz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>kapz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> const &gt; const &amp;</type>
          <declname>flag</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensor_3D_K.H" line="141" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensor_3D_K.H" bodystart="141" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1abad7d9fe1206fe9a2448aa409761b685" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebtensor_cross_terms</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;Ax, Array4&lt; Real const &gt; const &amp;fx, Array4&lt; Real const &gt; const &amp;fy, Array4&lt; Real const &gt; const &amp;fz, Array4&lt; Real const &gt; const &amp;vel, Array4&lt; Real const &gt; const &amp;etab, Array4&lt; Real const &gt; const &amp;kapb, Array4&lt; int const &gt; const &amp;ccm, Array4&lt; EBCellFlag const &gt; const &amp;flag, Array4&lt; Real const &gt; const &amp;vol, Array4&lt; Real const &gt; const &amp;apx, Array4&lt; Real const &gt; const &amp;apy, Array4&lt; Real const &gt; const &amp;apz, Array4&lt; Real const &gt; const &amp;fcx, Array4&lt; Real const &gt; const &amp;fcy, Array4&lt; Real const &gt; const &amp;fcz, Array4&lt; Real const &gt; const &amp;bc, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, Real bscalar) noexcept</argsstring>
        <name>mlebtensor_cross_terms</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>Ax</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>etab</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>kapb</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>ccm</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> const &gt; const &amp;</type>
          <declname>flag</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vol</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>bscalar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensor_3D_K.H" line="205" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensor_3D_K.H" bodystart="205" bodyend="507"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a41fa60232e37cb8f8a8d11012a2d6e7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebtensor_flux_z</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;Az, Array4&lt; Real const &gt; const &amp;fz, Array4&lt; Real const &gt; const &amp;apz, Array4&lt; Real const &gt; const &amp;fcz, Real const bscalar, Array4&lt; int const &gt; const &amp;ccm, int face_only, Box const &amp;zbox) noexcept</argsstring>
        <name>mlebtensor_flux_z</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>Az</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcz</declname>
        </param>
        <param>
          <type>Real const</type>
          <declname>bscalar</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>ccm</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>face_only</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>zbox</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensor_3D_K.H" line="627" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensor_3D_K.H" bodystart="627" bodyend="671"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af8bb63375d599ab7f5bb514d97fcf0ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mllinop_apply_bc_x</definition>
        <argsstring>(int side, Box const &amp;box, int blen, Array4&lt; Real &gt; const &amp;phi, Array4&lt; int const &gt; const &amp;mask, BoundCond bct, Real bcl, Array4&lt; Real const &gt; const &amp;bcval, int maxorder, Real dxinv, int inhomog, int icomp) noexcept</argsstring>
        <name>mllinop_apply_bc_x</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>side</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>blen</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1BoundCond" kindref="compound">BoundCond</ref></type>
          <declname>bct</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>bcl</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcval</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>maxorder</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>inhomog</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>icomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_K.H" line="13" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_K.H" bodystart="13" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1abf6cfaf2f2bbacec9d50e9e6044578b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mllinop_apply_bc_y</definition>
        <argsstring>(int side, Box const &amp;box, int blen, Array4&lt; Real &gt; const &amp;phi, Array4&lt; int const &gt; const &amp;mask, BoundCond bct, Real bcl, Array4&lt; Real const &gt; const &amp;bcval, int maxorder, Real dyinv, int inhomog, int icomp) noexcept</argsstring>
        <name>mllinop_apply_bc_y</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>side</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>blen</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1BoundCond" kindref="compound">BoundCond</ref></type>
          <declname>bct</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>bcl</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcval</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>maxorder</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dyinv</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>inhomog</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>icomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_K.H" line="74" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_K.H" bodystart="74" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a3f04d712d80105caa7e8f24d33b94fb2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mllinop_apply_bc_z</definition>
        <argsstring>(int side, Box const &amp;box, int blen, Array4&lt; Real &gt; const &amp;phi, Array4&lt; int const &gt; const &amp;mask, BoundCond bct, Real bcl, Array4&lt; Real const &gt; const &amp;bcval, int maxorder, Real dzinv, int inhomog, int icomp) noexcept</argsstring>
        <name>mllinop_apply_bc_z</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>side</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>blen</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1BoundCond" kindref="compound">BoundCond</ref></type>
          <declname>bct</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>bcl</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcval</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>maxorder</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dzinv</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>inhomog</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>icomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_K.H" line="135" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_K.H" bodystart="135" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a162e36f07a37bdde15db1f5652f5ae27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mllinop_comp_interp_coef0_x</definition>
        <argsstring>(int side, Box const &amp;box, int blen, Array4&lt; Real &gt; const &amp;f, Array4&lt; int const &gt; const &amp;mask, BoundCond bct, Real bcl, int maxorder, Real dxinv, int icomp) noexcept</argsstring>
        <name>mllinop_comp_interp_coef0_x</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>side</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>blen</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1BoundCond" kindref="compound">BoundCond</ref></type>
          <declname>bct</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>bcl</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>maxorder</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>icomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_K.H" line="196" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_K.H" bodystart="196" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab2ad3fe61966bb70146cacf202fe8390" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mllinop_comp_interp_coef0_y</definition>
        <argsstring>(int side, Box const &amp;box, int blen, Array4&lt; Real &gt; const &amp;f, Array4&lt; int const &gt; const &amp;mask, BoundCond bct, Real bcl, int maxorder, Real dyinv, int icomp) noexcept</argsstring>
        <name>mllinop_comp_interp_coef0_y</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>side</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>blen</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1BoundCond" kindref="compound">BoundCond</ref></type>
          <declname>bct</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>bcl</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>maxorder</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dyinv</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>icomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_K.H" line="243" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_K.H" bodystart="243" bodyend="287"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af10b31c09ea16d19bf78bc9aa661287f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mllinop_comp_interp_coef0_z</definition>
        <argsstring>(int side, Box const &amp;box, int blen, Array4&lt; Real &gt; const &amp;f, Array4&lt; int const &gt; const &amp;mask, BoundCond bct, Real bcl, int maxorder, Real dzinv, int icomp) noexcept</argsstring>
        <name>mllinop_comp_interp_coef0_z</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>side</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>blen</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1BoundCond" kindref="compound">BoundCond</ref></type>
          <declname>bct</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>bcl</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>maxorder</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dzinv</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>icomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_K.H" line="290" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_K.H" bodystart="290" bodyend="334"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a593c604151cbe4c3dc5fe193f5ad538d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mllinop_apply_innu_xlo</definition>
        <argsstring>(int i, int j, int k, Array4&lt; Real &gt; const &amp;rhs, Array4&lt; int const &gt; const &amp;mask, Array4&lt; Real const &gt; const &amp;bcoef, BoundCond bct, Real, Array4&lt; Real const &gt; const &amp;bcval, Real fac, bool has_bcoef, int icomp) noexcept</argsstring>
        <name>mllinop_apply_innu_xlo</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcoef</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1BoundCond" kindref="compound">BoundCond</ref></type>
          <declname>bct</declname>
        </param>
        <param>
          <type>Real</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcval</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>fac</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>has_bcoef</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>icomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_K.H" line="541" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_K.H" bodystart="541" bodyend="553"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a5d461b9041c13f2a890e11c625b7ea4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mllinop_apply_innu_xhi</definition>
        <argsstring>(int i, int j, int k, Array4&lt; Real &gt; const &amp;rhs, Array4&lt; int const &gt; const &amp;mask, Array4&lt; Real const &gt; const &amp;bcoef, BoundCond bct, Real, Array4&lt; Real const &gt; const &amp;bcval, Real fac, bool has_bcoef, int icomp) noexcept</argsstring>
        <name>mllinop_apply_innu_xhi</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcoef</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1BoundCond" kindref="compound">BoundCond</ref></type>
          <declname>bct</declname>
        </param>
        <param>
          <type>Real</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcval</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>fac</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>has_bcoef</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>icomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_K.H" line="556" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_K.H" bodystart="556" bodyend="568"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a1160983eb07274b1555c7ca936fb0e41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mllinop_apply_innu_ylo</definition>
        <argsstring>(int i, int j, int k, Array4&lt; Real &gt; const &amp;rhs, Array4&lt; int const &gt; const &amp;mask, Array4&lt; Real const &gt; const &amp;bcoef, BoundCond bct, Real, Array4&lt; Real const &gt; const &amp;bcval, Real fac, bool has_bcoef, int icomp) noexcept</argsstring>
        <name>mllinop_apply_innu_ylo</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcoef</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1BoundCond" kindref="compound">BoundCond</ref></type>
          <declname>bct</declname>
        </param>
        <param>
          <type>Real</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcval</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>fac</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>has_bcoef</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>icomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_K.H" line="571" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_K.H" bodystart="571" bodyend="583"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab3f6f2ce4b1bd53ebf144243c97fd470" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mllinop_apply_innu_ylo_m</definition>
        <argsstring>(int i, int j, int k, Array4&lt; Real &gt; const &amp;rhs, Array4&lt; int const &gt; const &amp;mask, BoundCond bct, Real, Array4&lt; Real const &gt; const &amp;bcval, Real fac, Real xlo, Real dx, int icomp) noexcept</argsstring>
        <name>mllinop_apply_innu_ylo_m</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1BoundCond" kindref="compound">BoundCond</ref></type>
          <declname>bct</declname>
        </param>
        <param>
          <type>Real</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcval</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>fac</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>xlo</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dx</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>icomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_K.H" line="586" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_K.H" bodystart="586" bodyend="597"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a2ba6ad01ab84ccaa0848e7d3eb043d0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mllinop_apply_innu_yhi</definition>
        <argsstring>(int i, int j, int k, Array4&lt; Real &gt; const &amp;rhs, Array4&lt; int const &gt; const &amp;mask, Array4&lt; Real const &gt; const &amp;bcoef, BoundCond bct, Real, Array4&lt; Real const &gt; const &amp;bcval, Real fac, bool has_bcoef, int icomp) noexcept</argsstring>
        <name>mllinop_apply_innu_yhi</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcoef</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1BoundCond" kindref="compound">BoundCond</ref></type>
          <declname>bct</declname>
        </param>
        <param>
          <type>Real</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcval</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>fac</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>has_bcoef</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>icomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_K.H" line="600" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_K.H" bodystart="600" bodyend="612"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a7e38059b15403c1f9eb49e2e5afd283d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mllinop_apply_innu_yhi_m</definition>
        <argsstring>(int i, int j, int k, Array4&lt; Real &gt; const &amp;rhs, Array4&lt; int const &gt; const &amp;mask, BoundCond bct, Real, Array4&lt; Real const &gt; const &amp;bcval, Real fac, Real xlo, Real dx, int icomp) noexcept</argsstring>
        <name>mllinop_apply_innu_yhi_m</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1BoundCond" kindref="compound">BoundCond</ref></type>
          <declname>bct</declname>
        </param>
        <param>
          <type>Real</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcval</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>fac</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>xlo</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dx</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>icomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_K.H" line="615" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_K.H" bodystart="615" bodyend="626"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a31a261bd82af8b186634c0e2b0c898c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mllinop_apply_innu_zlo</definition>
        <argsstring>(int i, int j, int k, Array4&lt; Real &gt; const &amp;rhs, Array4&lt; int const &gt; const &amp;mask, Array4&lt; Real const &gt; const &amp;bcoef, BoundCond bct, Real, Array4&lt; Real const &gt; const &amp;bcval, Real fac, bool has_bcoef, int icomp) noexcept</argsstring>
        <name>mllinop_apply_innu_zlo</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcoef</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1BoundCond" kindref="compound">BoundCond</ref></type>
          <declname>bct</declname>
        </param>
        <param>
          <type>Real</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcval</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>fac</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>has_bcoef</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>icomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_K.H" line="629" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_K.H" bodystart="629" bodyend="641"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad871869aad35c3f731e4dc3ddc387331" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mllinop_apply_innu_zhi</definition>
        <argsstring>(int i, int j, int k, Array4&lt; Real &gt; const &amp;rhs, Array4&lt; int const &gt; const &amp;mask, Array4&lt; Real const &gt; const &amp;bcoef, BoundCond bct, Real, Array4&lt; Real const &gt; const &amp;bcval, Real fac, bool has_bcoef, int icomp) noexcept</argsstring>
        <name>mllinop_apply_innu_zhi</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcoef</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1BoundCond" kindref="compound">BoundCond</ref></type>
          <declname>bct</declname>
        </param>
        <param>
          <type>Real</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcval</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>fac</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>has_bcoef</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>icomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_K.H" line="644" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_K.H" bodystart="644" bodyend="656"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a51c2a88a19b82b745ba4e61ac373556d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlmg_lin_cc_interp_r2</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;ff, Array4&lt; Real const &gt; const &amp;cc, int nc) noexcept</argsstring>
        <name>mlmg_lin_cc_interp_r2</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>ff</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>cc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG_1D_K.H" line="8" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG_1D_K.H" bodystart="8" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6287363d1785211dbc7ab6b2e23f3c38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlmg_lin_cc_interp_r4</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;ff, Array4&lt; Real const &gt; const &amp;cc, int nc) noexcept</argsstring>
        <name>mlmg_lin_cc_interp_r4</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>ff</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>cc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG_1D_K.H" line="25" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG_1D_K.H" bodystart="25" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1acdf2ba9a53a476a45bbbf569a961b051" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlmg_lin_nd_interp</definition>
        <argsstring>(int i, int, int, int n, Array4&lt; Real &gt; const &amp;fine, Array4&lt; Real const &gt; const &amp;crse) noexcept</argsstring>
        <name>mlmg_lin_nd_interp</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>j</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>k</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>crse</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG_1D_K.H" line="41" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG_1D_K.H" bodystart="41" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a99eb26c72f67ead31e003e2a5131d08b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_set_nodal_mask</definition>
        <argsstring>(int, int, int, Array4&lt; int &gt; const &amp;, Array4&lt; int const &gt; const &amp;) noexcept</argsstring>
        <name>mlndlap_set_nodal_mask</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>i</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>j</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>k</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; const &amp;</type>
          <defname>nmsk</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <defname>cmsk</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" line="8" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" bodystart="8" bodyend="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a03235199d4d7140b2b814f6ec2a91605" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_set_dirichlet_mask</definition>
        <argsstring>(Box const &amp;, Array4&lt; int &gt; const &amp;, Array4&lt; int const &gt; const &amp;, Box const &amp;, GpuArray&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;, GpuArray&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;) noexcept</argsstring>
        <name>mlndlap_set_dirichlet_mask</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <defname>bx</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; const &amp;</type>
          <defname>dmsk</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <defname>omsk</defname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <defname>dom</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;</type>
          <defname>bclo</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;</type>
          <defname>bchi</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" line="13" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" bodystart="13" bodyend="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a9c58e1a97a7d3c0eb90d98fd9b022b05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_set_dot_mask</definition>
        <argsstring>(Box const &amp;, Array4&lt; Real &gt; const &amp;, Array4&lt; int const &gt; const &amp;, Box const &amp;, GpuArray&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;, GpuArray&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;) noexcept</argsstring>
        <name>mlndlap_set_dot_mask</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <defname>bx</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <defname>dmsk</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <defname>omsk</defname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <defname>dom</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;</type>
          <defname>bclo</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;</type>
          <defname>bchi</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" line="20" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" bodystart="20" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aea6fbee6638a575caec8ac30d8a177d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_zero_fine</definition>
        <argsstring>(int, int, int, Array4&lt; Real &gt; const &amp;, Array4&lt; int const &gt; const &amp;, int) noexcept</argsstring>
        <name>mlndlap_zero_fine</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>i</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>j</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>k</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <defname>phi</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <defname>msk</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>fine_flag</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" line="27" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" bodystart="27" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6b9c125d08bef873a0aaf1f9bbddf260" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_avgdown_coeff_x</definition>
        <argsstring>(int, int, int, Array4&lt; Real &gt; const &amp;, Array4&lt; Real const &gt; const &amp;) noexcept</argsstring>
        <name>mlndlap_avgdown_coeff_x</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>i</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>j</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>k</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <defname>crse</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>fine</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" line="32" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" bodystart="32" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a35ac711ad4344e39ed8f1ed3f9130624" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_semi_avgdown_coeff</definition>
        <argsstring>(int, int, int, Array4&lt; Real &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, int) noexcept</argsstring>
        <name>mlndlap_semi_avgdown_coeff</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>i</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>j</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>k</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <defname>crse</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>fine</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>idir</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" line="37" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" bodystart="37" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a28652d78e48d1f39d99d4bca42861d95" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::mlndlap_bc_doit</definition>
        <argsstring>(Box const &amp;, Array4&lt; T &gt; const &amp;, Box const &amp;, GpuArray&lt; bool, AMREX_SPACEDIM &gt; const &amp;, GpuArray&lt; bool, AMREX_SPACEDIM &gt; const &amp;) noexcept</argsstring>
        <name>mlndlap_bc_doit</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <defname>vbx</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <defname>a</defname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <defname>domain</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; bool, AMREX_SPACEDIM &gt; const &amp;</type>
          <defname>bflo</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; bool, AMREX_SPACEDIM &gt; const &amp;</type>
          <defname>bfhi</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" line="42" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" bodystart="42" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af366c6fa856da068a397a0b94662c04a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> Real</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Real amrex::mlndlap_adotx_c</definition>
        <argsstring>(int, int, int, Array4&lt; Real const &gt; const &amp;, Real, Array4&lt; int const &gt; const &amp;, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;) noexcept</argsstring>
        <name>mlndlap_adotx_c</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>i</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>j</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>k</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>x</defname>
        </param>
        <param>
          <type>Real</type>
          <defname>sig</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <defname>msk</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <defname>dxinv</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" line="48" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" bodystart="48" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1add55c3cdd6250ad56d002c6bdb3afc2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> Real</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Real amrex::mlndlap_adotx_ha</definition>
        <argsstring>(int, int, int, Array4&lt; Real const &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; int const &gt; const &amp;, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;) noexcept</argsstring>
        <name>mlndlap_adotx_ha</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" line="54" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" bodystart="54" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a010d8fce8129d1003ad1f45512b89b15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> Real</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Real amrex::mlndlap_adotx_aa</definition>
        <argsstring>(int, int, int, Array4&lt; Real const &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; int const &gt; const &amp;, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;) noexcept</argsstring>
        <name>mlndlap_adotx_aa</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>i</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>j</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>k</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>x</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>sig</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <defname>msk</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <defname>dxinv</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" line="60" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" bodystart="60" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aaffef5702ead6fdfbc2e5c369de4e9b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_normalize_ha</definition>
        <argsstring>(Box const &amp;, Array4&lt; Real &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; int const &gt; const &amp;, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;) noexcept</argsstring>
        <name>mlndlap_normalize_ha</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" line="66" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" bodystart="66" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a3a1738a844a237a95dcd22d56f2e6646" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_normalize_aa</definition>
        <argsstring>(Box const &amp;, Array4&lt; Real &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; int const &gt; const &amp;, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;) noexcept</argsstring>
        <name>mlndlap_normalize_aa</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <defname>bx</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <defname>x</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>sig</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <defname>msk</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <defname>dxinv</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" line="71" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" bodystart="71" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aba5b8ce83982ac8a5e22822bbb231579" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_jacobi_ha</definition>
        <argsstring>(int, int, int, Array4&lt; Real &gt; const &amp;, Real, Array4&lt; Real const &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; int const &gt; const &amp;, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;) noexcept</argsstring>
        <name>mlndlap_jacobi_ha</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
        </param>
        <param>
          <type>Real</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" line="76" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" bodystart="76" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8703bdcc7d1793aa3f768f80933aab69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_jacobi_ha</definition>
        <argsstring>(Box const &amp;, Array4&lt; Real &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; int const &gt; const &amp;, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;) noexcept</argsstring>
        <name>mlndlap_jacobi_ha</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" line="82" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" bodystart="82" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4bc3ade4476a6d87953841881fb38e42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_jacobi_aa</definition>
        <argsstring>(int, int, int, Array4&lt; Real &gt; const &amp;, Real, Array4&lt; Real const &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; int const &gt; const &amp;, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;) noexcept</argsstring>
        <name>mlndlap_jacobi_aa</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>i</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>j</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>k</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <defname>sol</defname>
        </param>
        <param>
          <type>Real</type>
          <defname>Ax</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>rhs</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>sig</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <defname>msk</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <defname>dxinv</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" line="88" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" bodystart="88" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a026fbdd53e71a7e0879190256fa79299" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_jacobi_aa</definition>
        <argsstring>(Box const &amp;, Array4&lt; Real &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; int const &gt; const &amp;, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;) noexcept</argsstring>
        <name>mlndlap_jacobi_aa</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <defname>bx</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <defname>sol</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>Ax</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>rhs</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>sig</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <defname>msk</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <defname>dxinv</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" line="94" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" bodystart="94" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af14fd92f572eb0b065ca8248405a0acb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_jacobi_c</definition>
        <argsstring>(int, int, int, Array4&lt; Real &gt; const &amp;, Real, Array4&lt; Real const &gt; const &amp;, Real, Array4&lt; int const &gt; const &amp;, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;) noexcept</argsstring>
        <name>mlndlap_jacobi_c</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>i</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>j</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>k</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <defname>sol</defname>
        </param>
        <param>
          <type>Real</type>
          <defname>Ax</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>rhs</defname>
        </param>
        <param>
          <type>Real</type>
          <defname>sig</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <defname>msk</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <defname>dxinv</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" line="100" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" bodystart="100" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4653e7309f1f40c8c842140df07c3093" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_jacobi_c</definition>
        <argsstring>(Box const &amp;, Array4&lt; Real &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Real, Array4&lt; int const &gt; const &amp;, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;) noexcept</argsstring>
        <name>mlndlap_jacobi_c</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <defname>bx</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <defname>sol</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>Ax</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>rhs</defname>
        </param>
        <param>
          <type>Real</type>
          <defname>sig</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <defname>msk</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <defname>dxinv</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" line="106" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" bodystart="106" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8eadb47f0e2398ae6102902e47fd06b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_gauss_seidel_ha</definition>
        <argsstring>(Box const &amp;, Array4&lt; Real &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; int const &gt; const &amp;, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;) noexcept</argsstring>
        <name>mlndlap_gauss_seidel_ha</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" line="112" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" bodystart="112" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a62e4e72325926b06678c3375aa26c247" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_gauss_seidel_aa</definition>
        <argsstring>(Box const &amp;, Array4&lt; Real &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; int const &gt; const &amp;, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;) noexcept</argsstring>
        <name>mlndlap_gauss_seidel_aa</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <defname>bx</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <defname>sol</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>rhs</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>sig</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <defname>msk</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <defname>dxinv</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" line="118" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" bodystart="118" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1abfce7ba114478554b5a519f58e2a9e96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_gauss_seidel_c</definition>
        <argsstring>(Box const &amp;, Array4&lt; Real &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Real, Array4&lt; int const &gt; const &amp;, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;) noexcept</argsstring>
        <name>mlndlap_gauss_seidel_c</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <defname>bx</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <defname>sol</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>rhs</defname>
        </param>
        <param>
          <type>Real</type>
          <defname>sig</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <defname>msk</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <defname>dxinv</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" line="124" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" bodystart="124" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aea15e426759719fb40bea1467bec8c1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_gauss_seidel_with_line_solve_aa</definition>
        <argsstring>(Box const &amp;, Array4&lt; Real &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; int const &gt; const &amp;, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;) noexcept</argsstring>
        <name>mlndlap_gauss_seidel_with_line_solve_aa</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <defname>bx</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <defname>sol</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>rhs</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>sig</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <defname>msk</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <defname>dxinv</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" line="130" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" bodystart="130" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aeb305780def1f6842fdde70599dff49a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_restriction</definition>
        <argsstring>(int, int, int, Array4&lt; Real &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; int const &gt; const &amp;) noexcept</argsstring>
        <name>mlndlap_restriction</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>i</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>j</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>k</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <defname>crse</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>fine</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <defname>msk</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" line="137" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" bodystart="137" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a739c61caa42304fdafed256192d5b3ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_semi_restriction</definition>
        <argsstring>(int, int, int, Array4&lt; Real &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; int const &gt; const &amp;, int) noexcept</argsstring>
        <name>mlndlap_semi_restriction</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>i</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>j</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>k</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <defname>crse</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>fine</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <defname>msk</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>idir</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" line="142" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" bodystart="142" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa9e57c385a5dcb7427c825b47c5ca849" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_interpadd_c</definition>
        <argsstring>(int, int, int, Array4&lt; Real &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; int const &gt; const &amp;) noexcept</argsstring>
        <name>mlndlap_interpadd_c</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>i</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>j</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>k</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <defname>fine</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>crse</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <defname>msk</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" line="147" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" bodystart="147" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a5d4e1011f22a3fc6d4974ed55c8accac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_interpadd_aa</definition>
        <argsstring>(int, int, int, Array4&lt; Real &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; int const &gt; const &amp;) noexcept</argsstring>
        <name>mlndlap_interpadd_aa</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>i</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>j</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>k</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <defname>fine</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>crse</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>sig</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <defname>msk</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" line="153" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" bodystart="153" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a70d0526f5c183c5731c0f08ba27670cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_semi_interpadd_aa</definition>
        <argsstring>(int, int, int, Array4&lt; Real &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; int const &gt; const &amp;, int) noexcept</argsstring>
        <name>mlndlap_semi_interpadd_aa</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>i</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>j</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>k</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <defname>fine</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>crse</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>sig</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <defname>msk</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>idir</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" line="159" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" bodystart="159" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8ec43746ae5cae796866588ec0f41c33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_interpadd_ha</definition>
        <argsstring>(int, int, int, Array4&lt; Real &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; int const &gt; const &amp;) noexcept</argsstring>
        <name>mlndlap_interpadd_ha</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" line="165" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" bodystart="165" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a02a91b419a391c582861d06aab7bbb90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_divu</definition>
        <argsstring>(int, int, int, Array4&lt; Real &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; int const &gt; const &amp;, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;, Box const &amp;, GpuArray&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;, GpuArray&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;) noexcept</argsstring>
        <name>mlndlap_divu</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>i</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>j</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>k</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <defname>rhs</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>vel</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <defname>msk</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <defname>dxinv</defname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <defname>nodal_domain</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;</type>
          <defname>bclo</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;</type>
          <defname>bchi</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" line="171" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" bodystart="171" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a3dd38d9abf74e242138effab13f2e9a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> Real</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Real amrex::mlndlap_rhcc</definition>
        <argsstring>(int, int, int, Array4&lt; Real const &gt; const &amp;, Array4&lt; int const &gt; const &amp;) noexcept</argsstring>
        <name>mlndlap_rhcc</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>i</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>j</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>k</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>rhcc</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <defname>msk</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" line="180" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" bodystart="180" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac19201bf459a388c3e8988fe9b54e6cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_mknewu</definition>
        <argsstring>(int, int, int, Array4&lt; Real &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;) noexcept</argsstring>
        <name>mlndlap_mknewu</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>i</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>j</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>k</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <defname>u</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>p</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>sig</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <defname>dxinv</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" line="185" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" bodystart="185" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6a543890dcab6db405cd901d7e89133d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_mknewu_c</definition>
        <argsstring>(int, int, int, Array4&lt; Real &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Real, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;) noexcept</argsstring>
        <name>mlndlap_mknewu_c</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>i</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>j</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>k</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <defname>u</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>p</defname>
        </param>
        <param>
          <type>Real</type>
          <defname>sig</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <defname>dxinv</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" line="190" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" bodystart="190" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a770bb0a3de61a5b36340d1a879674016" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_divu_compute_fine_contrib</definition>
        <argsstring>(int, int, int, Box const &amp;, Array4&lt; Real &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;, Box const &amp;, GpuArray&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;, GpuArray&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;) noexcept</argsstring>
        <name>mlndlap_divu_compute_fine_contrib</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>i</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>j</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>k</defname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <defname>fvbx</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <defname>frh</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>vel</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <defname>dxinv</defname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <defname>nodal_domain</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;</type>
          <defname>bclo</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;</type>
          <defname>bchi</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" line="195" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" bodystart="195" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae92e9a33661ec006b40c0ce7fc06d70a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_divu_add_fine_contrib</definition>
        <argsstring>(int, int, int, Box const &amp;, Array4&lt; Real &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; int const &gt; const &amp;) noexcept</argsstring>
        <name>mlndlap_divu_add_fine_contrib</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>i</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>j</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>k</defname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <defname>fvbx</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <defname>rhs</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>frh</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <defname>msk</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" line="204" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" bodystart="204" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a2901a8b4b60685b5e332bd478fd39fc2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_rhcc_fine_contrib</definition>
        <argsstring>(int, int, int, Box const &amp;, Array4&lt; Real &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; int const &gt; const &amp;) noexcept</argsstring>
        <name>mlndlap_rhcc_fine_contrib</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>i</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>j</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>k</defname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <defname>fvbx</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <defname>rhs</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>cc</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <defname>msk</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" line="210" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" bodystart="210" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a93891c5a7ee70e942834086d0aa5ad9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_divu_cf_contrib</definition>
        <argsstring>(int, int, int, Array4&lt; Real &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; int const &gt; const &amp;, Array4&lt; int const &gt; const &amp;, Array4&lt; int const &gt; const &amp;, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;, Box const &amp;, GpuArray&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;, GpuArray&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;, bool) noexcept</argsstring>
        <name>mlndlap_divu_cf_contrib</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>i</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>j</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>k</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <defname>rhs</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>vel</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>fc</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>rhcc</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <defname>dmsk</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <defname>ndmsk</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <defname>ccmsk</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <defname>dxinv</defname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <defname>nddom</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;</type>
          <defname>bclo</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;</type>
          <defname>bchi</defname>
        </param>
        <param>
          <type>bool</type>
          <defname>neumann_doubling</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" line="216" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" bodystart="216" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad31ca7c577662afe5ea03ed3d21d8a57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_crse_resid</definition>
        <argsstring>(int, int, int, Array4&lt; Real &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; int const &gt; const &amp;, Box const &amp;, GpuArray&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;, GpuArray&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;, bool) noexcept</argsstring>
        <name>mlndlap_crse_resid</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>i</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>j</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>k</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <defname>resid</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>rhs</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <defname>msk</defname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <defname>nddom</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;</type>
          <defname>bclo</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;</type>
          <defname>bchi</defname>
        </param>
        <param>
          <type>bool</type>
          <defname>neumann_doubling</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" line="227" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" bodystart="227" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a90b8ad56e0bf4938c563287dccef2be8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_res_fine_Ax</definition>
        <argsstring>(int, int, int, Box const &amp;, Array4&lt; Real &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;) noexcept</argsstring>
        <name>mlndlap_res_fine_Ax</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>i</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>j</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>k</defname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <defname>fvbx</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <defname>Ax</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>x</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>sig</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <defname>dxinv</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" line="235" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" bodystart="235" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a3032a8fc8bac5ea8b19eccadb8180e16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_res_fine_contrib</definition>
        <argsstring>(int, int, int, Array4&lt; Real &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; int const &gt; const &amp;) noexcept</argsstring>
        <name>mlndlap_res_fine_contrib</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>i</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>j</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>k</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <defname>f</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>Ax</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <defname>msk</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" line="241" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" bodystart="241" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a5254b57a98ac5629ec4d14f55f37feba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_res_cf_contrib</definition>
        <argsstring>(int, int, int, Array4&lt; Real &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; int const &gt; const &amp;, Array4&lt; int const &gt; const &amp;, Array4&lt; int const &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;, Box const &amp;, GpuArray&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;, GpuArray&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;, bool) noexcept</argsstring>
        <name>mlndlap_res_cf_contrib</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>i</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>j</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>k</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <defname>res</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>phi</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>rhs</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>sig</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <defname>dmsk</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <defname>ndmsk</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <defname>ccmsk</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>fc</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <defname>dxinv</defname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <defname>nddom</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;</type>
          <defname>bclo</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;</type>
          <defname>bchi</defname>
        </param>
        <param>
          <type>bool</type>
          <defname>neumann_doubling</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" line="246" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" bodystart="246" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a883d525d9d67d5243805dfa6b69fbfbc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_res_cf_contrib_cs</definition>
        <argsstring>(int, int, int, Array4&lt; Real &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Real, Array4&lt; int const &gt; const &amp;, Array4&lt; int const &gt; const &amp;, Array4&lt; int const &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;, Box const &amp;, GpuArray&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;, GpuArray&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;, bool) noexcept</argsstring>
        <name>mlndlap_res_cf_contrib_cs</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>i</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>j</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>k</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <defname>res</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>phi</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>rhs</defname>
        </param>
        <param>
          <type>Real</type>
          <defname>sig</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <defname>dmsk</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <defname>ndmsk</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <defname>ccmsk</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>fc</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <defname>dxinv</defname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <defname>nddom</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;</type>
          <defname>bclo</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;</type>
          <defname>bchi</defname>
        </param>
        <param>
          <type>bool</type>
          <defname>neumann_doubling</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" line="258" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" bodystart="258" bodyend="267"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a77743280efb0c02d3c4301b87b272f7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_set_stencil</definition>
        <argsstring>(Box const &amp;, Array4&lt; Real &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;) noexcept</argsstring>
        <name>mlndlap_set_stencil</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <defname>bx</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <defname>sten</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>sigma</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <defname>dxinv</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" line="270" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" bodystart="270" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4b20346156e62bf392b0e5870b142762" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_set_stencil_s0</definition>
        <argsstring>(int, int, int, Array4&lt; Real &gt; const &amp;) noexcept</argsstring>
        <name>mlndlap_set_stencil_s0</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>i</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>j</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>k</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <defname>sten</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" line="276" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" bodystart="276" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aee965ec1adf090525e207867611b1635" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_stencil_rap</definition>
        <argsstring>(int, int, int, Array4&lt; Real &gt; const &amp;, Array4&lt; Real const &gt; const &amp;) noexcept</argsstring>
        <name>mlndlap_stencil_rap</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>i</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>j</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>k</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <defname>csten</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>fsten</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" line="280" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" bodystart="280" bodyend="282"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a447276ff5f1cf67d54fe79977f26da40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> Real</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Real amrex::mlndlap_adotx_sten</definition>
        <argsstring>(int, int, int, Array4&lt; Real const &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; int const &gt; const &amp;) noexcept</argsstring>
        <name>mlndlap_adotx_sten</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>i</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>j</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>k</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>x</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>sten</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <defname>msk</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" line="285" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" bodystart="285" bodyend="287"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1adce0f812bb61661ea0dd6d708ac0c402" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_gauss_seidel_sten</definition>
        <argsstring>(Box const &amp;, Array4&lt; Real &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; int const &gt; const &amp;) noexcept</argsstring>
        <name>mlndlap_gauss_seidel_sten</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <defname>bx</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <defname>sol</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>rhs</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>sten</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <defname>msk</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" line="290" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" bodystart="290" bodyend="294"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a339f91a23a5b046654c2029e996cbd94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_interpadd_rap</definition>
        <argsstring>(int, int, int, Array4&lt; Real &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; int const &gt; const &amp;) noexcept</argsstring>
        <name>mlndlap_interpadd_rap</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>i</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>j</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>k</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <defname>fine</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>crse</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>sten</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <defname>msk</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" line="297" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" bodystart="297" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab727d4d055b37cfc647dd73d9a2be0eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_restriction_rap</definition>
        <argsstring>(int, int, int, Array4&lt; Real &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; int const &gt; const &amp;) noexcept</argsstring>
        <name>mlndlap_restriction_rap</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>i</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>j</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>k</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <defname>crse</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>fine</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>sten</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <defname>msk</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" line="303" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" bodystart="303" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a344bb80d4a06ecf958781bdef59b351d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_avgdown_coeff_y</definition>
        <argsstring>(int i, int j, int k, Array4&lt; Real &gt; const &amp;crse, Array4&lt; Real const &gt; const &amp;fine) noexcept</argsstring>
        <name>mlndlap_avgdown_coeff_y</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fine</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_2D_K.H" line="155" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_2D_K.H" bodystart="155" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8b0a3b042ac35788ad8dddead4253d19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> Real</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Real amrex::mlndlap_adotx_ha</definition>
        <argsstring>(int i, int j, int k, Array4&lt; Real const &gt; const &amp;x, Array4&lt; Real const &gt; const &amp;sx, Array4&lt; Real const &gt; const &amp;sy, Array4&lt; int const &gt; const &amp;msk, bool is_rz, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv) noexcept</argsstring>
        <name>mlndlap_adotx_ha</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>msk</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_rz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_2D_K.H" line="293" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_2D_K.H" bodystart="293" bodyend="325"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a43272fd95bc7e0d7912daa2c0a642862" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> Real</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Real amrex::mlndlap_adotx_aa</definition>
        <argsstring>(int i, int j, int k, Array4&lt; Real const &gt; const &amp;x, Array4&lt; Real const &gt; const &amp;sig, Array4&lt; int const &gt; const &amp;msk, bool is_rz, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv) noexcept</argsstring>
        <name>mlndlap_adotx_aa</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sig</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>msk</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_rz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_2D_K.H" line="328" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_2D_K.H" bodystart="328" bodyend="358"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad2144182834ce73b21ddad5461a14814" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> Real</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Real amrex::mlndlap_adotx_c</definition>
        <argsstring>(int i, int j, int k, Array4&lt; Real const &gt; const &amp;x, Real sigma, Array4&lt; int const &gt; const &amp;msk, bool is_rz, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv) noexcept</argsstring>
        <name>mlndlap_adotx_c</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>sigma</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>msk</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_rz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_2D_K.H" line="361" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_2D_K.H" bodystart="361" bodyend="390"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad887e1a694df4fb44498888a19cecdaa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_normalize_ha</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;x, Array4&lt; Real const &gt; const &amp;sx, Array4&lt; Real const &gt; const &amp;sy, Array4&lt; int const &gt; const &amp;msk, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv) noexcept</argsstring>
        <name>mlndlap_normalize_ha</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>msk</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_2D_K.H" line="393" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_2D_K.H" bodystart="393" bodyend="407"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a5b4d73e12156421dbcabc4ab39745317" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_jacobi_ha</definition>
        <argsstring>(int i, int j, int k, Array4&lt; Real &gt; const &amp;sol, Real Ax, Array4&lt; Real const &gt; const &amp;rhs, Array4&lt; Real const &gt; const &amp;sx, Array4&lt; Real const &gt; const &amp;sy, Array4&lt; int const &gt; const &amp;msk, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv) noexcept</argsstring>
        <name>mlndlap_jacobi_ha</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>Ax</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>msk</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_2D_K.H" line="426" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_2D_K.H" bodystart="426" bodyend="441"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab3f38f45fa3a4b40286b8058ef746f7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_jacobi_ha</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;sol, Array4&lt; Real const &gt; const &amp;Ax, Array4&lt; Real const &gt; const &amp;rhs, Array4&lt; Real const &gt; const &amp;sx, Array4&lt; Real const &gt; const &amp;sy, Array4&lt; int const &gt; const &amp;msk, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv) noexcept</argsstring>
        <name>mlndlap_jacobi_ha</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>Ax</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>msk</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_2D_K.H" line="444" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_2D_K.H" bodystart="444" bodyend="462"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a51bde271654e8a3ad2d6262ec0f995f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_gauss_seidel_ha</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;sol, Array4&lt; Real const &gt; const &amp;rhs, Array4&lt; Real const &gt; const &amp;sx, Array4&lt; Real const &gt; const &amp;sy, Array4&lt; int const &gt; const &amp;msk, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, bool is_rz) noexcept</argsstring>
        <name>mlndlap_gauss_seidel_ha</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>msk</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_rz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_2D_K.H" line="531" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_2D_K.H" bodystart="531" bodyend="575"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a9b55c5bb1da902671fbf6e07595048d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_gauss_seidel_aa</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;sol, Array4&lt; Real const &gt; const &amp;rhs, Array4&lt; Real const &gt; const &amp;sig, Array4&lt; int const &gt; const &amp;msk, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, bool is_rz) noexcept</argsstring>
        <name>mlndlap_gauss_seidel_aa</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sig</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>msk</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_rz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_2D_K.H" line="578" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_2D_K.H" bodystart="578" bodyend="619"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac53265610f08a7fdcc2406255598f31a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_gauss_seidel_c</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;sol, Array4&lt; Real const &gt; const &amp;rhs, Real sig, Array4&lt; int const &gt; const &amp;msk, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, bool is_rz) noexcept</argsstring>
        <name>mlndlap_gauss_seidel_c</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>sig</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>msk</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_rz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_2D_K.H" line="622" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_2D_K.H" bodystart="622" bodyend="663"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4cfb55f2e5160db8ca28cefbfcf973ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_gauss_seidel_with_line_solve_aa</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;sol, Array4&lt; Real const &gt; const &amp;rhs, Array4&lt; Real const &gt; const &amp;sig, Array4&lt; int const &gt; const &amp;msk, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, bool is_rz) noexcept</argsstring>
        <name>mlndlap_gauss_seidel_with_line_solve_aa</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sig</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>msk</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_rz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_2D_K.H" line="685" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_2D_K.H" bodystart="685" bodyend="799"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a2cac2c8ce802cddafa55136e8ffcb31e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_interpadd_ha</definition>
        <argsstring>(int i, int j, int, Array4&lt; Real &gt; const &amp;fine, Array4&lt; Real const &gt; const &amp;crse, Array4&lt; Real const &gt; const &amp;sigx, Array4&lt; Real const &gt; const &amp;sigy, Array4&lt; int const &gt; const &amp;msk) noexcept</argsstring>
        <name>mlndlap_interpadd_ha</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sigx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sigy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>msk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_2D_K.H" line="991" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_2D_K.H" bodystart="991" bodyend="1015"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac5ffed68b31da08687142195b804a767" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_divu</definition>
        <argsstring>(int i, int j, int k, Array4&lt; Real &gt; const &amp;rhs, Array4&lt; Real const &gt; const &amp;vel, Array4&lt; int const &gt; const &amp;msk, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, Box const &amp;nodal_domain, GpuArray&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;bclo, GpuArray&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;bchi, bool is_rz) noexcept</argsstring>
        <name>mlndlap_divu</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>msk</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>nodal_domain</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>bclo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>bchi</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_rz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_2D_K.H" line="1022" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_2D_K.H" bodystart="1022" bodyend="1067"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8a08ba07924919817676a76596d29044" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_mknewu</definition>
        <argsstring>(int i, int j, int k, Array4&lt; Real &gt; const &amp;u, Array4&lt; Real const &gt; const &amp;p, Array4&lt; Real const &gt; const &amp;sig, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, bool is_rz) noexcept</argsstring>
        <name>mlndlap_mknewu</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sig</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_rz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_2D_K.H" line="1083" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_2D_K.H" bodystart="1083" bodyend="1095"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aef2d99a25b5735f53808a3cf1baad97a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_mknewu_c</definition>
        <argsstring>(int i, int j, int k, Array4&lt; Real &gt; const &amp;u, Array4&lt; Real const &gt; const &amp;p, Real sig, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, bool is_rz) noexcept</argsstring>
        <name>mlndlap_mknewu_c</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>sig</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_rz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_2D_K.H" line="1098" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_2D_K.H" bodystart="1098" bodyend="1110"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac795c67d106876990eb4ab9093babeae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_divu_compute_fine_contrib</definition>
        <argsstring>(int i, int j, int, Box const &amp;fvbx, Array4&lt; Real &gt; const &amp;frh, Array4&lt; Real const &gt; const &amp;vel, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, Box const &amp;nodal_domain, GpuArray&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;bclo, GpuArray&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;bchi, bool is_rz) noexcept</argsstring>
        <name>mlndlap_divu_compute_fine_contrib</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>fvbx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>frh</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>nodal_domain</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>bclo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>bchi</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_rz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_2D_K.H" line="1113" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_2D_K.H" bodystart="1113" bodyend="1157"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a3870330df121a9278021a766865582b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_divu_cf_contrib</definition>
        <argsstring>(int i, int j, int, Array4&lt; Real &gt; const &amp;rhs, Array4&lt; Real const &gt; const &amp;vel, Array4&lt; Real const &gt; const &amp;fc, Array4&lt; Real const &gt; const &amp;rhcc, Array4&lt; int const &gt; const &amp;dmsk, Array4&lt; int const &gt; const &amp;ndmsk, Array4&lt; int const &gt; const &amp;ccmsk, bool is_rz, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, Box const &amp;nddom, GpuArray&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;bclo, GpuArray&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;bchi, bool neumann_doubling) noexcept</argsstring>
        <name>mlndlap_divu_cf_contrib</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>rhcc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>dmsk</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>ndmsk</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>ccmsk</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_rz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>nddom</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>bclo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>bchi</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>neumann_doubling</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_2D_K.H" line="1202" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_2D_K.H" bodystart="1202" bodyend="1256"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad924da90e47877cc312dd5499cf6bef5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_res_fine_Ax</definition>
        <argsstring>(int i, int j, int, Box const &amp;fvbx, Array4&lt; Real &gt; const &amp;Ax, Array4&lt; Real const &gt; const &amp;x, Array4&lt; Real const &gt; const &amp;sig, bool is_rz, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv) noexcept</argsstring>
        <name>mlndlap_res_fine_Ax</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>fvbx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>Ax</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sig</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_rz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_2D_K.H" line="1309" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_2D_K.H" bodystart="1309" bodyend="1338"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab9675d924002a78cf854d31b53e093bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_res_cf_contrib</definition>
        <argsstring>(int i, int j, int, Array4&lt; Real &gt; const &amp;res, Array4&lt; Real const &gt; const &amp;phi, Array4&lt; Real const &gt; const &amp;rhs, Array4&lt; Real const &gt; const &amp;sig, Array4&lt; int const &gt; const &amp;dmsk, Array4&lt; int const &gt; const &amp;ndmsk, Array4&lt; int const &gt; const &amp;ccmsk, Array4&lt; Real const &gt; const &amp;fc, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, Box const &amp;nddom, bool is_rz, GpuArray&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;bclo, GpuArray&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;bchi, bool neumann_doubling) noexcept</argsstring>
        <name>mlndlap_res_cf_contrib</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>res</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sig</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>dmsk</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>ndmsk</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>ccmsk</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>nddom</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_rz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>bclo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>bchi</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>neumann_doubling</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_2D_K.H" line="1360" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_2D_K.H" bodystart="1360" bodyend="1443"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1abc08c2a780f83bef6adfc41d7d326b72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_res_cf_contrib_cs</definition>
        <argsstring>(int i, int j, int, Array4&lt; Real &gt; const &amp;res, Array4&lt; Real const &gt; const &amp;phi, Array4&lt; Real const &gt; const &amp;rhs, Real sig, Array4&lt; int const &gt; const &amp;dmsk, Array4&lt; int const &gt; const &amp;ndmsk, Array4&lt; int const &gt; const &amp;ccmsk, Array4&lt; Real const &gt; const &amp;fc, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, Box const &amp;nddom, bool is_rz, GpuArray&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;bclo, GpuArray&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;bchi, bool neumann_doubling) noexcept</argsstring>
        <name>mlndlap_res_cf_contrib_cs</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>res</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>sig</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>dmsk</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>ndmsk</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>ccmsk</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>nddom</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_rz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>bclo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>bchi</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>neumann_doubling</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_2D_K.H" line="1446" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_2D_K.H" bodystart="1446" bodyend="1530"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a1dee48540dad573effdb346154f1da0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_avgdown_coeff_z</definition>
        <argsstring>(int i, int j, int k, Array4&lt; Real &gt; const &amp;crse, Array4&lt; Real const &gt; const &amp;fine) noexcept</argsstring>
        <name>mlndlap_avgdown_coeff_z</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fine</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_3D_K.H" line="222" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_3D_K.H" bodystart="222" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4f492bb83254cf07e228b963154da5e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> Real</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Real amrex::mlndlap_adotx_ha</definition>
        <argsstring>(int i, int j, int k, Array4&lt; Real const &gt; const &amp;x, Array4&lt; Real const &gt; const &amp;sx, Array4&lt; Real const &gt; const &amp;sy, Array4&lt; Real const &gt; const &amp;sz, Array4&lt; int const &gt; const &amp;msk, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv) noexcept</argsstring>
        <name>mlndlap_adotx_ha</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>msk</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_3D_K.H" line="757" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_3D_K.H" bodystart="757" bodyend="854"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a74080db868f0d48ac6c6eb91389d9637" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_normalize_ha</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;x, Array4&lt; Real const &gt; const &amp;sx, Array4&lt; Real const &gt; const &amp;sy, Array4&lt; Real const &gt; const &amp;sz, Array4&lt; int const &gt; const &amp;msk, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv) noexcept</argsstring>
        <name>mlndlap_normalize_ha</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>msk</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_3D_K.H" line="955" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_3D_K.H" bodystart="955" bodyend="974"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a179e9e92efeda70728fddf2ead4e9360" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_jacobi_ha</definition>
        <argsstring>(int i, int j, int k, Array4&lt; Real &gt; const &amp;sol, Real Ax, Array4&lt; Real const &gt; const &amp;rhs, Array4&lt; Real const &gt; const &amp;sx, Array4&lt; Real const &gt; const &amp;sy, Array4&lt; Real const &gt; const &amp;sz, Array4&lt; int const &gt; const &amp;msk, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv) noexcept</argsstring>
        <name>mlndlap_jacobi_ha</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>Ax</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>msk</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_3D_K.H" line="996" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_3D_K.H" bodystart="996" bodyend="1016"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a3d23c9516998db5f7f62b85deff1a6a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_jacobi_ha</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;sol, Array4&lt; Real const &gt; const &amp;Ax, Array4&lt; Real const &gt; const &amp;rhs, Array4&lt; Real const &gt; const &amp;sx, Array4&lt; Real const &gt; const &amp;sy, Array4&lt; Real const &gt; const &amp;sz, Array4&lt; int const &gt; const &amp;msk, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv) noexcept</argsstring>
        <name>mlndlap_jacobi_ha</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>Ax</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>msk</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_3D_K.H" line="1019" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_3D_K.H" bodystart="1019" bodyend="1042"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad8a68ba99a1a6cdb04ad4bf1dd1a3597" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_gauss_seidel_ha</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;sol, Array4&lt; Real const &gt; const &amp;rhs, Array4&lt; Real const &gt; const &amp;sx, Array4&lt; Real const &gt; const &amp;sy, Array4&lt; Real const &gt; const &amp;sz, Array4&lt; int const &gt; const &amp;msk, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv) noexcept</argsstring>
        <name>mlndlap_gauss_seidel_ha</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>msk</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_3D_K.H" line="1121" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_3D_K.H" bodystart="1121" bodyend="1225"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a531776fc9c73568abdcae71dc12b41fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_interpadd_ha</definition>
        <argsstring>(int i, int j, int k, Array4&lt; Real &gt; const &amp;fine, Array4&lt; Real const &gt; const &amp;crse, Array4&lt; Real const &gt; const &amp;sigx, Array4&lt; Real const &gt; const &amp;sigy, Array4&lt; Real const &gt; const &amp;sigz, Array4&lt; int const &gt; const &amp;msk) noexcept</argsstring>
        <name>mlndlap_interpadd_ha</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sigx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sigy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sigz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>msk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_3D_K.H" line="1975" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_3D_K.H" bodystart="1975" bodyend="2025"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a5d2482b4f9d89faf8934861fec9bc1b6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::mlndlap_impose_neumann_bc</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;rhs, Box const &amp;nddom, GpuArray&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;lobc, GpuArray&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;hibc) noexcept</argsstring>
        <name>mlndlap_impose_neumann_bc</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>nddom</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>lobc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>hibc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_K.H" line="58" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_K.H" bodystart="58" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a880fe3ab900c3cb4d906ff3bdb91e643" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::mlndlap_unimpose_neumann_bc</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;rhs, Box const &amp;nddom, GpuArray&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;lobc, GpuArray&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;hibc) noexcept</argsstring>
        <name>mlndlap_unimpose_neumann_bc</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>nddom</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>lobc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>hibc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_K.H" line="66" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_K.H" bodystart="66" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a27e3488dd823ad0ba4999a21f3cba781" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::mlndlap_fillbc_cc</definition>
        <argsstring>(Box const &amp;vbx, Array4&lt; T &gt; const &amp;sigma, Box const &amp;domain, GpuArray&lt; LinOpBCType, AMREX_SPACEDIM &gt; bclo, GpuArray&lt; LinOpBCType, AMREX_SPACEDIM &gt; bchi) noexcept</argsstring>
        <name>mlndlap_fillbc_cc</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>vbx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>sigma</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>domain</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; LinOpBCType, AMREX_SPACEDIM &gt;</type>
          <declname>bclo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; LinOpBCType, AMREX_SPACEDIM &gt;</type>
          <declname>bchi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_K.H" line="86" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_K.H" bodystart="86" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1acc59a603d50b00d769fdc49ed60d6cd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::mlndlap_applybc</definition>
        <argsstring>(Box const &amp;vbx, Array4&lt; T &gt; const &amp;phi, Box const &amp;domain, GpuArray&lt; LinOpBCType, AMREX_SPACEDIM &gt; bclo, GpuArray&lt; LinOpBCType, AMREX_SPACEDIM &gt; bchi) noexcept</argsstring>
        <name>mlndlap_applybc</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>vbx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>domain</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; LinOpBCType, AMREX_SPACEDIM &gt;</type>
          <declname>bclo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; LinOpBCType, AMREX_SPACEDIM &gt;</type>
          <declname>bchi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_K.H" line="100" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_K.H" bodystart="100" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4d38e91b1499898456f708d0bec65df2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_normalize_sten</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;x, Array4&lt; Real const &gt; const &amp;sten, Array4&lt; int const &gt; const &amp;msk, Real s0_norm0) noexcept</argsstring>
        <name>mlndlap_normalize_sten</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sten</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>msk</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>s0_norm0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_K.H" line="120" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_K.H" bodystart="120" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4699f3f565599c96a567615e64ea5d20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_jacobi_sten</definition>
        <argsstring>(int i, int j, int k, Array4&lt; Real &gt; const &amp;sol, Real Ax, Array4&lt; Real const &gt; const &amp;rhs, Array4&lt; Real const &gt; const &amp;sten, Array4&lt; int const &gt; const &amp;msk) noexcept</argsstring>
        <name>mlndlap_jacobi_sten</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>Ax</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sten</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>msk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_K.H" line="133" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_K.H" bodystart="133" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad804c9fcd8b74d9d8d9477fe5637e0f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_jacobi_sten</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;sol, Array4&lt; Real const &gt; const &amp;Ax, Array4&lt; Real const &gt; const &amp;rhs, Array4&lt; Real const &gt; const &amp;sten, Array4&lt; int const &gt; const &amp;msk) noexcept</argsstring>
        <name>mlndlap_jacobi_sten</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>Ax</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sten</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>msk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_K.H" line="146" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_K.H" bodystart="146" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6dac73b981a4a840ea27018fdb17d6a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> bool</type>
        <definition>AMREX_FORCE_INLINE bool amrex::mlndlap_any_fine_sync_cells</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; int const &gt; const &amp;msk, int fine_flag) noexcept</argsstring>
        <name>mlndlap_any_fine_sync_cells</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>msk</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fine_flag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_K.H" line="163" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_K.H" bodystart="163" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac7e03fbccf0d29fad0597554a3abf2a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndtslap_interpadd</definition>
        <argsstring>(int, int, int, Array4&lt; Real &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; int const &gt; const &amp;) noexcept</argsstring>
        <name>mlndtslap_interpadd</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>i</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>j</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>k</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <defname>fine</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>crse</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <defname>msk</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeTensorLap_1D_K.H" line="8" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeTensorLap_1D_K.H" bodystart="8" bodyend="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a25442c3c36fff26f4ff7435468f856e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndtslap_adotx</definition>
        <argsstring>(Box const &amp;, Array4&lt; Real &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, GpuArray&lt; Real, 6 &gt; const &amp;, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;) noexcept</argsstring>
        <name>mlndtslap_adotx</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <defname>b</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <defname>y</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>x</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, 6 &gt; const &amp;</type>
          <defname>s</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <defname>dxinv</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeTensorLap_1D_K.H" line="13" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeTensorLap_1D_K.H" bodystart="13" bodyend="16"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a793ed31acd5f14d952eba37759273e9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndtslap_gauss_seidel</definition>
        <argsstring>(Box const &amp;, Array4&lt; Real &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; int const &gt; const &amp;, GpuArray&lt; Real, 6 &gt; const &amp;, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;) noexcept</argsstring>
        <name>mlndtslap_gauss_seidel</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <defname>b</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <defname>sol</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>rhs</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <defname>msk</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, 6 &gt; const &amp;</type>
          <defname>s</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <defname>dxinv</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeTensorLap_1D_K.H" line="19" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeTensorLap_1D_K.H" bodystart="19" bodyend="23"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a1412469d4e1d2d9dfa24417caca5bd0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndtslap_normalize</definition>
        <argsstring>(Box const &amp;, Array4&lt; Real &gt; const &amp;, Array4&lt; int const &gt; const &amp;, GpuArray&lt; Real, 6 &gt; const &amp;, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;) noexcept</argsstring>
        <name>mlndtslap_normalize</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <defname>b</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <defname>phi</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <defname>msk</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, 6 &gt; const &amp;</type>
          <defname>s</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <defname>dxinv</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeTensorLap_1D_K.H" line="26" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeTensorLap_1D_K.H" bodystart="26" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aab4e7e12e6c1572b8c6ddbff9429e00f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndtslap_adotx</definition>
        <argsstring>(Box const &amp;b, Array4&lt; Real &gt; const &amp;y, Array4&lt; Real const &gt; const &amp;x, GpuArray&lt; Real, 3 &gt; const &amp;s, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv) noexcept</argsstring>
        <name>mlndtslap_adotx</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, 3 &gt; const &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeTensorLap_2D_K.H" line="57" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeTensorLap_2D_K.H" bodystart="57" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aeb97b30cc1d2f209245e7624fb369e93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndtslap_gauss_seidel</definition>
        <argsstring>(Box const &amp;b, Array4&lt; Real &gt; const &amp;sol, Array4&lt; Real const &gt; const &amp;rhs, Array4&lt; int const &gt; const &amp;msk, GpuArray&lt; Real, 3 &gt; const &amp;s, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv) noexcept</argsstring>
        <name>mlndtslap_gauss_seidel</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>msk</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, 3 &gt; const &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeTensorLap_2D_K.H" line="79" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeTensorLap_2D_K.H" bodystart="79" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a7dd14d39cc4e8c7901b5152ee458f6a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndtslap_normalize</definition>
        <argsstring>(Box const &amp;b, Array4&lt; Real &gt; const &amp;phi, Array4&lt; int const &gt; const &amp;msk, GpuArray&lt; Real, 3 &gt; const &amp;s, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv) noexcept</argsstring>
        <name>mlndtslap_normalize</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>msk</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, 3 &gt; const &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeTensorLap_2D_K.H" line="108" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeTensorLap_2D_K.H" bodystart="108" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6a70e0f53cf779275eab518f6e11e184" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlpoisson_adotx</definition>
        <argsstring>(int i, Array4&lt; Real &gt; const &amp;y, Array4&lt; Real const &gt; const &amp;x, Real dhx) noexcept</argsstring>
        <name>mlpoisson_adotx</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_1D_K.H" line="8" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_1D_K.H" bodystart="8" bodyend="13"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a80ebb0cc1dd59707e6caf3b1623c9ae2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlpoisson_adotx_os</definition>
        <argsstring>(int i, Array4&lt; Real &gt; const &amp;y, Array4&lt; Real const &gt; const &amp;x, Array4&lt; int const &gt; const &amp;osm, Real dhx) noexcept</argsstring>
        <name>mlpoisson_adotx_os</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>osm</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_1D_K.H" line="16" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_1D_K.H" bodystart="16" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a614625fade07c93188a447ded90afec4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlpoisson_adotx_m</definition>
        <argsstring>(int i, Array4&lt; Real &gt; const &amp;y, Array4&lt; Real const &gt; const &amp;x, Real dhx, Real dx, Real probxlo) noexcept</argsstring>
        <name>mlpoisson_adotx_m</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>probxlo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_1D_K.H" line="29" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_1D_K.H" bodystart="29" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1afbedb0b9038330e68b37f3af76f61d48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlpoisson_flux_x</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fx, Array4&lt; Real const &gt; const &amp;sol, Real dxinv) noexcept</argsstring>
        <name>mlpoisson_flux_x</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dxinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_1D_K.H" line="39" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_1D_K.H" bodystart="39" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4a26357a11beffc792bfd42f802486ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlpoisson_flux_x_m</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fx, Array4&lt; Real const &gt; const &amp;sol, Real dxinv, Real dx, Real probxlo) noexcept</argsstring>
        <name>mlpoisson_flux_x_m</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>probxlo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_1D_K.H" line="52" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_1D_K.H" bodystart="52" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa8c3eadf17db34750cd867b81e6632b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlpoisson_flux_xface</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fx, Array4&lt; Real const &gt; const &amp;sol, Real dxinv, int xlen) noexcept</argsstring>
        <name>mlpoisson_flux_xface</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>xlen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_1D_K.H" line="67" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_1D_K.H" bodystart="67" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aec5ce8ddd36cd29b8ca8978ce13ab874" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlpoisson_flux_xface_m</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fx, Array4&lt; Real const &gt; const &amp;sol, Real dxinv, int xlen, Real dx, Real probxlo) noexcept</argsstring>
        <name>mlpoisson_flux_xface_m</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>xlen</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>probxlo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_1D_K.H" line="79" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_1D_K.H" bodystart="79" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af29d6629339175bd025254d6ae0ad97f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlpoisson_gsrb</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;phi, Array4&lt; Real const &gt; const &amp;rhs, Real dhx, Array4&lt; Real const &gt; const &amp;f0, Array4&lt; int const &gt; const &amp;m0, Array4&lt; Real const &gt; const &amp;f1, Array4&lt; int const &gt; const &amp;m1, Box const &amp;vbox, int redblack) noexcept</argsstring>
        <name>mlpoisson_gsrb</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>vbox</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>redblack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_1D_K.H" line="94" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_1D_K.H" bodystart="94" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a954e965a2e06fba0e287d8c1a1822c89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlpoisson_gsrb_os</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;phi, Array4&lt; Real const &gt; const &amp;rhs, Array4&lt; int const &gt; const &amp;osm, Real dhx, Array4&lt; Real const &gt; const &amp;f0, Array4&lt; int const &gt; const &amp;m0, Array4&lt; Real const &gt; const &amp;f1, Array4&lt; int const &gt; const &amp;m1, Box const &amp;vbox, int redblack) noexcept</argsstring>
        <name>mlpoisson_gsrb_os</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>osm</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>vbox</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>redblack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_1D_K.H" line="126" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_1D_K.H" bodystart="126" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a261c24cd159286029b2b2af54420ddad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlpoisson_gsrb_m</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;phi, Array4&lt; Real const &gt; const &amp;rhs, Real dhx, Array4&lt; Real const &gt; const &amp;f0, Array4&lt; int const &gt; const &amp;m0, Array4&lt; Real const &gt; const &amp;f1, Array4&lt; int const &gt; const &amp;m1, Box const &amp;vbox, int redblack, Real dx, Real probxlo) noexcept</argsstring>
        <name>mlpoisson_gsrb_m</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>vbox</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>redblack</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>probxlo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_1D_K.H" line="162" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_1D_K.H" bodystart="162" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a47691dcd355d36f18e28ba82fcb6647a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlpoisson_normalize</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;x, Real dhx, Real dx, Real probxlo) noexcept</argsstring>
        <name>mlpoisson_normalize</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>probxlo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_1D_K.H" line="197" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_1D_K.H" bodystart="197" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aaa58299b8256905558b53614ea14bce9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlpoisson_adotx</definition>
        <argsstring>(int i, int j, Array4&lt; Real &gt; const &amp;y, Array4&lt; Real const &gt; const &amp;x, Real dhx, Real dhy) noexcept</argsstring>
        <name>mlpoisson_adotx</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_2D_K.H" line="8" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_2D_K.H" bodystart="8" bodyend="14"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6fee66c50a523f872dced1aba8495060" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlpoisson_adotx_os</definition>
        <argsstring>(int i, int j, Array4&lt; Real &gt; const &amp;y, Array4&lt; Real const &gt; const &amp;x, Array4&lt; int const &gt; const &amp;osm, Real dhx, Real dhy) noexcept</argsstring>
        <name>mlpoisson_adotx_os</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>osm</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_2D_K.H" line="17" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_2D_K.H" bodystart="17" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae0e4f18dc5b9fca27eacbd2a352460f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlpoisson_adotx_m</definition>
        <argsstring>(int i, int j, Array4&lt; Real &gt; const &amp;y, Array4&lt; Real const &gt; const &amp;x, Real dhx, Real dhy, Real dx, Real probxlo) noexcept</argsstring>
        <name>mlpoisson_adotx_m</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhy</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>probxlo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_2D_K.H" line="31" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_2D_K.H" bodystart="31" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a9c04ad40a40ba94759ffe585de26e9eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlpoisson_flux_y</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fy, Array4&lt; Real const &gt; const &amp;sol, Real dyinv) noexcept</argsstring>
        <name>mlpoisson_flux_y</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dyinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_2D_K.H" line="108" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_2D_K.H" bodystart="108" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1adf14ae5ac2a3a1f682c05fd260879fc7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlpoisson_flux_y_m</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fy, Array4&lt; Real const &gt; const &amp;sol, Real dyinv, Real dx, Real probxlo) noexcept</argsstring>
        <name>mlpoisson_flux_y_m</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dyinv</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>probxlo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_2D_K.H" line="123" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_2D_K.H" bodystart="123" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a1d974391e6e3fc76bda835895aab3595" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlpoisson_flux_yface</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fy, Array4&lt; Real const &gt; const &amp;sol, Real dyinv, int ylen) noexcept</argsstring>
        <name>mlpoisson_flux_yface</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dyinv</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ylen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_2D_K.H" line="140" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_2D_K.H" bodystart="140" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac1504453e08e93328b8c5a33530d1a86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlpoisson_flux_yface_m</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fy, Array4&lt; Real const &gt; const &amp;sol, Real dyinv, int ylen, Real dx, Real probxlo) noexcept</argsstring>
        <name>mlpoisson_flux_yface_m</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dyinv</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ylen</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>probxlo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_2D_K.H" line="159" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_2D_K.H" bodystart="159" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa36c66dee8f21fdfa1bf03fde370fffa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlpoisson_gsrb</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;phi, Array4&lt; Real const &gt; const &amp;rhs, Real dhx, Real dhy, Array4&lt; Real const &gt; const &amp;f0, Array4&lt; int const &gt; const &amp;m0, Array4&lt; Real const &gt; const &amp;f1, Array4&lt; int const &gt; const &amp;m1, Array4&lt; Real const &gt; const &amp;f2, Array4&lt; int const &gt; const &amp;m2, Array4&lt; Real const &gt; const &amp;f3, Array4&lt; int const &gt; const &amp;m3, Box const &amp;vbox, int redblack) noexcept</argsstring>
        <name>mlpoisson_gsrb</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m2</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f3</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m3</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>vbox</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>redblack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_2D_K.H" line="181" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_2D_K.H" bodystart="181" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1afeababf5371467b3dcfb891aa3c54e22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlpoisson_gsrb_os</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;phi, Array4&lt; Real const &gt; const &amp;rhs, Array4&lt; int const &gt; const &amp;osm, Real dhx, Real dhy, Array4&lt; Real const &gt; const &amp;f0, Array4&lt; int const &gt; const &amp;m0, Array4&lt; Real const &gt; const &amp;f1, Array4&lt; int const &gt; const &amp;m1, Array4&lt; Real const &gt; const &amp;f2, Array4&lt; int const &gt; const &amp;m2, Array4&lt; Real const &gt; const &amp;f3, Array4&lt; int const &gt; const &amp;m3, Box const &amp;vbox, int redblack) noexcept</argsstring>
        <name>mlpoisson_gsrb_os</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>osm</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m2</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f3</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m3</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>vbox</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>redblack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_2D_K.H" line="222" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_2D_K.H" bodystart="222" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8976671c5958750e293ee7943197a1b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlpoisson_gsrb_m</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;phi, Array4&lt; Real const &gt; const &amp;rhs, Real dhx, Real dhy, Array4&lt; Real const &gt; const &amp;f0, Array4&lt; int const &gt; const &amp;m0, Array4&lt; Real const &gt; const &amp;f1, Array4&lt; int const &gt; const &amp;m1, Array4&lt; Real const &gt; const &amp;f2, Array4&lt; int const &gt; const &amp;m2, Array4&lt; Real const &gt; const &amp;f3, Array4&lt; int const &gt; const &amp;m3, Box const &amp;vbox, int redblack, Real dx, Real probxlo) noexcept</argsstring>
        <name>mlpoisson_gsrb_m</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m2</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f3</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m3</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>vbox</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>redblack</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>probxlo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_2D_K.H" line="267" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_2D_K.H" bodystart="267" bodyend="309"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad53e940efdcb589e6c501ebe5c2319b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlpoisson_normalize</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;x, Real dhx, Real dhy, Real dx, Real probxlo) noexcept</argsstring>
        <name>mlpoisson_normalize</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhy</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>probxlo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_2D_K.H" line="312" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_2D_K.H" bodystart="312" bodyend="327"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a2a22a8a7a11608e621a4fadfb7948e18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlpoisson_adotx</definition>
        <argsstring>(int i, int j, int k, Array4&lt; Real &gt; const &amp;y, Array4&lt; Real const &gt; const &amp;x, Real dhx, Real dhy, Real dhz) noexcept</argsstring>
        <name>mlpoisson_adotx</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhy</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_3D_K.H" line="8" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_3D_K.H" bodystart="8" bodyend="15"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a740f034b6536c7f9aeb95bb46f26fda5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlpoisson_adotx_os</definition>
        <argsstring>(int i, int j, int k, Array4&lt; Real &gt; const &amp;y, Array4&lt; Real const &gt; const &amp;x, Array4&lt; int const &gt; const &amp;osm, Real dhx, Real dhy, Real dhz) noexcept</argsstring>
        <name>mlpoisson_adotx_os</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>osm</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhy</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_3D_K.H" line="18" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_3D_K.H" bodystart="18" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aaeacbae13092acb976061d0c07392ee1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlpoisson_flux_z</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fz, Array4&lt; Real const &gt; const &amp;sol, Real dzinv) noexcept</argsstring>
        <name>mlpoisson_flux_z</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dzinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_3D_K.H" line="105" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_3D_K.H" bodystart="105" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a0e3a9d3a8577165f8859b201b3825806" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlpoisson_flux_zface</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fz, Array4&lt; Real const &gt; const &amp;sol, Real dzinv, int zlen) noexcept</argsstring>
        <name>mlpoisson_flux_zface</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dzinv</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>zlen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_3D_K.H" line="122" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_3D_K.H" bodystart="122" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a3af5435c1fe72b5f4894af1b43381a66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlpoisson_gsrb</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;phi, Array4&lt; Real const &gt; const &amp;rhs, Real dhx, Real dhy, Real dhz, Array4&lt; Real const &gt; const &amp;f0, Array4&lt; int const &gt; const &amp;m0, Array4&lt; Real const &gt; const &amp;f1, Array4&lt; int const &gt; const &amp;m1, Array4&lt; Real const &gt; const &amp;f2, Array4&lt; int const &gt; const &amp;m2, Array4&lt; Real const &gt; const &amp;f3, Array4&lt; int const &gt; const &amp;m3, Array4&lt; Real const &gt; const &amp;f4, Array4&lt; int const &gt; const &amp;m4, Array4&lt; Real const &gt; const &amp;f5, Array4&lt; int const &gt; const &amp;m5, Box const &amp;vbox, int redblack) noexcept</argsstring>
        <name>mlpoisson_gsrb</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhy</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m2</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f3</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m3</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f4</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m4</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f5</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m5</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>vbox</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>redblack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_3D_K.H" line="146" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_3D_K.H" bodystart="146" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae998720210db209874b2fb93d030832b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlpoisson_gsrb_os</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;phi, Array4&lt; Real const &gt; const &amp;rhs, Array4&lt; int const &gt; const &amp;osm, Real dhx, Real dhy, Real dhz, Array4&lt; Real const &gt; const &amp;f0, Array4&lt; int const &gt; const &amp;m0, Array4&lt; Real const &gt; const &amp;f1, Array4&lt; int const &gt; const &amp;m1, Array4&lt; Real const &gt; const &amp;f2, Array4&lt; int const &gt; const &amp;m2, Array4&lt; Real const &gt; const &amp;f3, Array4&lt; int const &gt; const &amp;m3, Array4&lt; Real const &gt; const &amp;f4, Array4&lt; int const &gt; const &amp;m4, Array4&lt; Real const &gt; const &amp;f5, Array4&lt; int const &gt; const &amp;m5, Box const &amp;vbox, int redblack) noexcept</argsstring>
        <name>mlpoisson_gsrb_os</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>osm</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhy</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m2</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f3</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m3</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f4</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m4</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f5</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m5</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>vbox</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>redblack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_3D_K.H" line="199" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_3D_K.H" bodystart="199" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac5860217240005524baa7a46b62ac656" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mltensor_fill_corners</definition>
        <argsstring>(int icorner, Box const &amp;vbox, Array4&lt; Real &gt; const &amp;vel, Array4&lt; int const &gt; const &amp;mxlo, Array4&lt; int const &gt; const &amp;mylo, Array4&lt; int const &gt; const &amp;mxhi, Array4&lt; int const &gt; const &amp;myhi, Array4&lt; Real const &gt; const &amp;bcvalxlo, Array4&lt; Real const &gt; const &amp;bcvalylo, Array4&lt; Real const &gt; const &amp;bcvalxhi, Array4&lt; Real const &gt; const &amp;bcvalyhi, GpuArray&lt; BoundCond, 2 *AMREX_SPACEDIM *AMREX_SPACEDIM &gt; const &amp;bct, GpuArray&lt; Real, 2 *AMREX_SPACEDIM *AMREX_SPACEDIM &gt; const &amp;bcl, int inhomog, int maxorder, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, Box const &amp;domain) noexcept</argsstring>
        <name>mltensor_fill_corners</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>icorner</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>vbox</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>mxlo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>mylo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>mxhi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>myhi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcvalxlo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcvalylo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcvalxhi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcvalyhi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; <ref refid="classamrex_1_1BoundCond" kindref="compound">BoundCond</ref>, 2 *AMREX_SPACEDIM *AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>bct</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, 2 *AMREX_SPACEDIM *AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>bcl</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>inhomog</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>maxorder</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>domain</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_2D_K.H" line="10" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_2D_K.H" bodystart="10" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a7030037af193bb2bf648e008000c57dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mltensor_cross_terms_fx</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fx, Array4&lt; Real const &gt; const &amp;vel, Array4&lt; Real const &gt; const &amp;etax, Array4&lt; Real const &gt; const &amp;kapx, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv) noexcept</argsstring>
        <name>mltensor_cross_terms_fx</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>etax</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>kapx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_2D_K.H" line="129" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_2D_K.H" bodystart="129" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aff33f49d1494120e79df850eaa87201e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mltensor_cross_terms_fy</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fy, Array4&lt; Real const &gt; const &amp;vel, Array4&lt; Real const &gt; const &amp;etay, Array4&lt; Real const &gt; const &amp;kapy, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv) noexcept</argsstring>
        <name>mltensor_cross_terms_fy</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>etay</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>kapy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_2D_K.H" line="156" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_2D_K.H" bodystart="156" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a95509f933f27bf95cd70b6064aaa4153" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mltensor_cross_terms</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;Ax, Array4&lt; Real const &gt; const &amp;fx, Array4&lt; Real const &gt; const &amp;fy, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, Real bscalar) noexcept</argsstring>
        <name>mltensor_cross_terms</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>Ax</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>bscalar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_2D_K.H" line="183" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_2D_K.H" bodystart="183" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a5663d44c9283a75d4fc0a7077a0b7bf6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mltensor_cross_terms_os</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;Ax, Array4&lt; Real const &gt; const &amp;fx, Array4&lt; Real const &gt; const &amp;fy, Array4&lt; int const &gt; const &amp;osm, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, Real bscalar) noexcept</argsstring>
        <name>mltensor_cross_terms_os</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>Ax</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>osm</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>bscalar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_2D_K.H" line="206" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_2D_K.H" bodystart="206" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8420e5daa7ea328100bbd5355c290f45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mltensor_vel_grads_fx</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fx, Array4&lt; Real const &gt; const &amp;vel, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv) noexcept</argsstring>
        <name>mltensor_vel_grads_fx</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_2D_K.H" line="235" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_2D_K.H" bodystart="235" bodyend="257"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a40f5cb7b691ccd93b418b81b92200130" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mltensor_vel_grads_fy</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fy, Array4&lt; Real const &gt; const &amp;vel, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv) noexcept</argsstring>
        <name>mltensor_vel_grads_fy</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_2D_K.H" line="260" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_2D_K.H" bodystart="260" bodyend="282"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa866ba86aa241659d3373598479f2e4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mltensor_fill_corners</definition>
        <argsstring>(int icorner, Box const &amp;vbox, Array4&lt; Real &gt; const &amp;vel, Array4&lt; int const &gt; const &amp;mxlo, Array4&lt; int const &gt; const &amp;mylo, Array4&lt; int const &gt; const &amp;mzlo, Array4&lt; int const &gt; const &amp;mxhi, Array4&lt; int const &gt; const &amp;myhi, Array4&lt; int const &gt; const &amp;mzhi, Array4&lt; Real const &gt; const &amp;bcvalxlo, Array4&lt; Real const &gt; const &amp;bcvalylo, Array4&lt; Real const &gt; const &amp;bcvalzlo, Array4&lt; Real const &gt; const &amp;bcvalxhi, Array4&lt; Real const &gt; const &amp;bcvalyhi, Array4&lt; Real const &gt; const &amp;bcvalzhi, GpuArray&lt; BoundCond, 2 *AMREX_SPACEDIM *AMREX_SPACEDIM &gt; const &amp;bct, GpuArray&lt; Real, 2 *AMREX_SPACEDIM *AMREX_SPACEDIM &gt; const &amp;bcl, int inhomog, int maxorder, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, Box const &amp;domain) noexcept</argsstring>
        <name>mltensor_fill_corners</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>icorner</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>vbox</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>mxlo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>mylo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>mzlo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>mxhi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>myhi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>mzhi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcvalxlo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcvalylo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcvalzlo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcvalxhi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcvalyhi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcvalzhi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; <ref refid="classamrex_1_1BoundCond" kindref="compound">BoundCond</ref>, 2 *AMREX_SPACEDIM *AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>bct</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, 2 *AMREX_SPACEDIM *AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>bcl</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>inhomog</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>maxorder</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>domain</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_3D_K.H" line="10" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_3D_K.H" bodystart="10" bodyend="520"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a64990f3908dfd665f0b27a4bc6122da1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mltensor_fill_edges</definition>
        <argsstring>(int iedge, Box const &amp;vbox, Array4&lt; Real &gt; const &amp;vel, Array4&lt; int const &gt; const &amp;mxlo, Array4&lt; int const &gt; const &amp;mylo, Array4&lt; int const &gt; const &amp;mzlo, Array4&lt; int const &gt; const &amp;mxhi, Array4&lt; int const &gt; const &amp;myhi, Array4&lt; int const &gt; const &amp;mzhi, Array4&lt; Real const &gt; const &amp;bcvalxlo, Array4&lt; Real const &gt; const &amp;bcvalylo, Array4&lt; Real const &gt; const &amp;bcvalzlo, Array4&lt; Real const &gt; const &amp;bcvalxhi, Array4&lt; Real const &gt; const &amp;bcvalyhi, Array4&lt; Real const &gt; const &amp;bcvalzhi, GpuArray&lt; BoundCond, 2 *AMREX_SPACEDIM *AMREX_SPACEDIM &gt; const &amp;bct, GpuArray&lt; Real, 2 *AMREX_SPACEDIM *AMREX_SPACEDIM &gt; const &amp;bcl, int inhomog, int maxorder, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, Box const &amp;domain) noexcept</argsstring>
        <name>mltensor_fill_edges</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>iedge</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>vbox</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>mxlo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>mylo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>mzlo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>mxhi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>myhi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>mzhi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcvalxlo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcvalylo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcvalzlo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcvalxhi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcvalyhi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcvalzhi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; <ref refid="classamrex_1_1BoundCond" kindref="compound">BoundCond</ref>, 2 *AMREX_SPACEDIM *AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>bct</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, 2 *AMREX_SPACEDIM *AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>bcl</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>inhomog</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>maxorder</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>domain</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_3D_K.H" line="523" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_3D_K.H" bodystart="523" bodyend="1053"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a00f22a6e30b96fc1eb9c1bb71c1b3c18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mltensor_cross_terms_fz</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fz, Array4&lt; Real const &gt; const &amp;vel, Array4&lt; Real const &gt; const &amp;etaz, Array4&lt; Real const &gt; const &amp;kapz, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv) noexcept</argsstring>
        <name>mltensor_cross_terms_fz</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>etaz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>kapz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_3D_K.H" line="1122" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_3D_K.H" bodystart="1122" bodyend="1152"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab2cab819df733b89d0356224d626a877" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mltensor_cross_terms</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;Ax, Array4&lt; Real const &gt; const &amp;fx, Array4&lt; Real const &gt; const &amp;fy, Array4&lt; Real const &gt; const &amp;fz, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, Real bscalar) noexcept</argsstring>
        <name>mltensor_cross_terms</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>Ax</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>bscalar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_3D_K.H" line="1155" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_3D_K.H" bodystart="1155" bodyend="1184"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a7336687a5c4493deb071aa4e4718a20c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mltensor_cross_terms_os</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;Ax, Array4&lt; Real const &gt; const &amp;fx, Array4&lt; Real const &gt; const &amp;fy, Array4&lt; Real const &gt; const &amp;fz, Array4&lt; int const &gt; const &amp;osm, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, Real bscalar) noexcept</argsstring>
        <name>mltensor_cross_terms_os</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>Ax</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>osm</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>bscalar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_3D_K.H" line="1187" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_3D_K.H" bodystart="1187" bodyend="1223"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae3d5f677bf29212444263b285b440852" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mltensor_vel_grads_fz</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fz, Array4&lt; Real const &gt; const &amp;vel, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv) noexcept</argsstring>
        <name>mltensor_vel_grads_fz</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_3D_K.H" line="1312" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_3D_K.H" bodystart="1312" bodyend="1352"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab612cdff7b506fd2884de82a842e95b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>NReal</declname>
            <defname>NReal</defname>
          </param>
          <param>
            <type>int</type>
            <declname>NInt</declname>
            <defname>NInt</defname>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Particle&lt; NReal, NInt &gt; &amp;p)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1Particle" kindref="compound">Particle</ref>&lt; NReal, NInt &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="885" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="886" bodyend="904"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a637e0edc81c99a33f11e048fa4f7fc09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>NReal</declname>
            <defname>NReal</defname>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Particle&lt; NReal, 0 &gt; &amp;p)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1Particle" kindref="compound">Particle</ref>&lt; NReal, 0 &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="907" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="908" bodyend="923"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab4ab9b3e6200e633cbf452f97880f267" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>NInt</declname>
            <defname>NInt</defname>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Particle&lt; 0, NInt &gt; &amp;p)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1Particle" kindref="compound">Particle</ref>&lt; 0, NInt &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="926" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="927" bodyend="942"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6ee44abe4e92e171a76c83cc8edfdec8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>NReal</declname>
            <defname>NReal</defname>
            <defval>0</defval>
          </param>
          <param>
            <type>int</type>
            <declname>NInt</declname>
            <defname>NInt</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Particle&lt; 0, 0 &gt; &amp;p)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1Particle" kindref="compound">Particle</ref>&lt; 0, 0 &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="945" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="946" bodyend="958"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a00779f2a650345e29919bda485417d90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename P</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::amrex_deposit_cic</definition>
        <argsstring>(P const &amp;p, int nc, amrex::Array4&lt; amrex::Real &gt; const &amp;rho, amrex::GpuArray&lt; amrex::Real, AMREX_SPACEDIM &gt; const &amp;plo, amrex::GpuArray&lt; amrex::Real, AMREX_SPACEDIM &gt; const &amp;dxi)</argsstring>
        <name>amrex_deposit_cic</name>
        <param>
          <type>P const &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">amrex::Array4</ref>&lt; amrex::Real &gt; const &amp;</type>
          <declname>rho</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">amrex::GpuArray</ref>&lt; amrex::Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>plo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">amrex::GpuArray</ref>&lt; amrex::Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle_mod_K.H" line="14" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle_mod_K.H" bodystart="14" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab2c2bcf642851e4903e3c9449f857e14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename P</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::amrex_deposit_particle_dx_cic</definition>
        <argsstring>(P const &amp;p, int nc, amrex::Array4&lt; amrex::Real &gt; const &amp;rho, amrex::GpuArray&lt; amrex::Real, AMREX_SPACEDIM &gt; const &amp;plo, amrex::GpuArray&lt; amrex::Real, AMREX_SPACEDIM &gt; const &amp;dxi, amrex::GpuArray&lt; amrex::Real, AMREX_SPACEDIM &gt; const &amp;pdxi)</argsstring>
        <name>amrex_deposit_particle_dx_cic</name>
        <param>
          <type>P const &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">amrex::Array4</ref>&lt; amrex::Real &gt; const &amp;</type>
          <declname>rho</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">amrex::GpuArray</ref>&lt; amrex::Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>plo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">amrex::GpuArray</ref>&lt; amrex::Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">amrex::GpuArray</ref>&lt; amrex::Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>pdxi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle_mod_K.H" line="109" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle_mod_K.H" bodystart="109" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa90dde62ffe45aa35b5dd015043019a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename P</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::amrex_interpolate_cic</definition>
        <argsstring>(P const &amp;p, int nc, amrex::Array4&lt; amrex::Real const &gt; const &amp;acc, amrex::GpuArray&lt; amrex::Real, AMREX_SPACEDIM &gt; const &amp;plo, amrex::GpuArray&lt; amrex::Real, AMREX_SPACEDIM &gt; const &amp;dxi)</argsstring>
        <name>amrex_interpolate_cic</name>
        <param>
          <type>P const &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">amrex::Array4</ref>&lt; amrex::Real const &gt; const &amp;</type>
          <declname>acc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">amrex::GpuArray</ref>&lt; amrex::Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>plo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">amrex::GpuArray</ref>&lt; amrex::Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle_mod_K.H" line="238" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle_mod_K.H" bodystart="238" bodyend="308"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af4c8c19cb812cdbcc34bc408577bb25c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PC</type>
          </param>
          <param>
            <type>class Buffer</type>
          </param>
          <param>
            <type>EnableIf_t&lt; IsParticleContainer&lt; PC &gt;::value, int &gt;</type>
            <declname>foo</declname>
            <defname>foo</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::packBuffer</definition>
        <argsstring>(const PC &amp;pc, const ParticleCopyOp &amp;op, const ParticleCopyPlan &amp;plan, Buffer &amp;snd_buffer)</argsstring>
        <name>packBuffer</name>
        <param>
          <type>const PC &amp;</type>
          <declname>pc</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1ParticleCopyOp" kindref="compound">ParticleCopyOp</ref> &amp;</type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1ParticleCopyPlan" kindref="compound">ParticleCopyPlan</ref> &amp;</type>
          <declname>plan</declname>
        </param>
        <param>
          <type>Buffer &amp;</type>
          <declname>snd_buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleCommunication.H" line="253" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleCommunication.H" bodystart="253" bodyend="344"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a088b41cb8cc59ea2e3235669ca30b9b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PC</type>
          </param>
          <param>
            <type>class Buffer</type>
          </param>
          <param>
            <type>class UnpackPolicy</type>
          </param>
          <param>
            <type>EnableIf_t&lt; IsParticleContainer&lt; PC &gt;::value, int &gt;</type>
            <declname>foo</declname>
            <defname>foo</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::unpackBuffer</definition>
        <argsstring>(PC &amp;pc, const ParticleCopyPlan &amp;plan, const Buffer &amp;snd_buffer, const UnpackPolicy &amp;&amp;policy)</argsstring>
        <name>unpackBuffer</name>
        <param>
          <type>PC &amp;</type>
          <declname>pc</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1ParticleCopyPlan" kindref="compound">ParticleCopyPlan</ref> &amp;</type>
          <declname>plan</declname>
        </param>
        <param>
          <type>const Buffer &amp;</type>
          <declname>snd_buffer</declname>
        </param>
        <param>
          <type>const UnpackPolicy &amp;&amp;</type>
          <declname>policy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleCommunication.H" line="348" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleCommunication.H" bodystart="348" bodyend="409"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aecd4b7b3db27a6698403b2f272a378ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PC</type>
          </param>
          <param>
            <type>class Buffer</type>
          </param>
          <param>
            <type>EnableIf_t&lt; IsParticleContainer&lt; PC &gt;::value, int &gt;</type>
            <declname>foo</declname>
            <defname>foo</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::communicateParticlesStart</definition>
        <argsstring>(const PC &amp;pc, ParticleCopyPlan &amp;plan, const Buffer &amp;snd_buffer, Buffer &amp;rcv_buffer)</argsstring>
        <name>communicateParticlesStart</name>
        <param>
          <type>const PC &amp;</type>
          <declname>pc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1ParticleCopyPlan" kindref="compound">ParticleCopyPlan</ref> &amp;</type>
          <declname>plan</declname>
        </param>
        <param>
          <type>const Buffer &amp;</type>
          <declname>snd_buffer</declname>
        </param>
        <param>
          <type>Buffer &amp;</type>
          <declname>rcv_buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleCommunication.H" line="413" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleCommunication.H" bodystart="413" bodyend="505"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a814322d519ae32014737504164a0516b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::communicateParticlesFinish</definition>
        <argsstring>(const ParticleCopyPlan &amp;plan)</argsstring>
        <name>communicateParticlesFinish</name>
        <param>
          <type>const <ref refid="structamrex_1_1ParticleCopyPlan" kindref="compound">ParticleCopyPlan</ref> &amp;</type>
          <declname>plan</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleCommunication.H" line="507" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleCommunication.cpp" bodystart="383" bodyend="394"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a1dd1ea6c385ce3a863e1818566937e24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PC</type>
          </param>
          <param>
            <type>class Buffer</type>
          </param>
          <param>
            <type>class UnpackPolicy</type>
          </param>
          <param>
            <type>EnableIf_t&lt; IsParticleContainer&lt; PC &gt;::value, int &gt;</type>
            <declname>foo</declname>
            <defname>foo</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::unpackRemotes</definition>
        <argsstring>(PC &amp;pc, const ParticleCopyPlan &amp;plan, Buffer &amp;rcv_buffer, UnpackPolicy &amp;&amp;policy)</argsstring>
        <name>unpackRemotes</name>
        <param>
          <type>PC &amp;</type>
          <declname>pc</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1ParticleCopyPlan" kindref="compound">ParticleCopyPlan</ref> &amp;</type>
          <declname>plan</declname>
        </param>
        <param>
          <type>Buffer &amp;</type>
          <declname>rcv_buffer</declname>
        </param>
        <param>
          <type>UnpackPolicy &amp;&amp;</type>
          <declname>policy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleCommunication.H" line="511" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleCommunication.H" bodystart="511" bodyend="582"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a41ca38bddc951482a20d3dd4dfa5e40e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PC</type>
          </param>
          <param>
            <type>class MF</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>EnableIf_t&lt; IsParticleContainer&lt; PC &gt;::value, int &gt;</type>
            <declname>foo</declname>
            <defname>foo</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParticleToMesh</definition>
        <argsstring>(PC const &amp;pc, MF &amp;mf, int lev, F &amp;&amp;f)</argsstring>
        <name>ParticleToMesh</name>
        <param>
          <type>PC const &amp;</type>
          <declname>pc</declname>
        </param>
        <param>
          <type>MF &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleMesh.H" line="13" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleMesh.H" bodystart="13" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4263e1c84766d552c3e4dda3dadc9158" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PC</type>
          </param>
          <param>
            <type>class MF</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>EnableIf_t&lt; IsParticleContainer&lt; PC &gt;::value, int &gt;</type>
            <declname>foo</declname>
            <defname>foo</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::MeshToParticle</definition>
        <argsstring>(PC &amp;pc, MF const &amp;mf, int lev, F &amp;&amp;f)</argsstring>
        <name>MeshToParticle</name>
        <param>
          <type>PC &amp;</type>
          <declname>pc</declname>
        </param>
        <param>
          <type>MF const &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleMesh.H" line="88" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleMesh.H" bodystart="88" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8f1971a46d37a951bb0ef8b189f8987f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PC</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>EnableIf_t&lt; IsParticleContainer&lt; PC &gt;::value, int &gt;</type>
            <declname>foo</declname>
            <defname>foo</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto amrex::ReduceSum</definition>
        <argsstring>(PC const &amp;pc, F &amp;&amp;f) -&gt; decltype(f(typename PC::SuperParticleType()))</argsstring>
        <name>ReduceSum</name>
        <param>
          <type>PC const &amp;</type>
          <declname>pc</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>A general reduction method for the particles in a <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> that can run on either CPUs or GPUs. This version operates over all particles on all levels. </para>        </briefdescription>
        <detaileddescription>
<para>This version uses &quot;Sum&quot; as the reduction operation. The quantity reduced over is an arbitrary function of a &quot;superparticle&quot;, which contains all the data in the particle type, whether it is stored in AoS or SoA form.</para><para>Note that there is no MPI reduction performed at the end of this operation. Users should manually call the MPI reduction operations described in <ref refid="namespaceamrex_1_1ParallelDescriptor" kindref="compound">ParallelDescriptor</ref> if they want that behavior.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PC</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>a function object</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pc</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> to operate on </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>a function that takes a &quot;superparticle&quot; and returns the value to be reduced over all particles. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleReduce.H" line="37" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleReduce.H" bodystart="37" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a9600b570271756f90a1c8b3c7e05a9a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PC</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>EnableIf_t&lt; IsParticleContainer&lt; PC &gt;::value, int &gt;</type>
            <declname>foo</declname>
            <defname>foo</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto amrex::ReduceSum</definition>
        <argsstring>(PC const &amp;pc, int lev, F &amp;&amp;f) -&gt; decltype(f(typename PC::SuperParticleType()))</argsstring>
        <name>ReduceSum</name>
        <param>
          <type>PC const &amp;</type>
          <declname>pc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>A general reduction method for the particles in a <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> that can run on either CPUs or GPUs. This version operates only on the specified level. </para>        </briefdescription>
        <detaileddescription>
<para>This version uses &quot;Sum&quot; as the reduction operation. The quantity reduced over is an arbitrary function of a &quot;superparticle&quot;, which contains all the data in the particle type, whether it is stored in AoS or SoA form.</para><para>Note that there is no MPI reduction performed at the end of this operation. Users should manually call the MPI reduction operations described in <ref refid="namespaceamrex_1_1ParallelDescriptor" kindref="compound">ParallelDescriptor</ref> if they want that behavior.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PC</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>a function object</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pc</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> to operate on </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lev</parametername>
</parameternamelist>
<parameterdescription>
<para>the level to operate on </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>a function that takes a &quot;superparticle&quot; and returns the value to be reduced over all particles. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleReduce.H" line="63" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleReduce.H" bodystart="63" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a234b29ca2ab42dc4b7d3713800d82a4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PC</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>EnableIf_t&lt; IsParticleContainer&lt; PC &gt;::value, int &gt;</type>
            <declname>foo</declname>
            <defname>foo</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto amrex::ReduceSum</definition>
        <argsstring>(PC const &amp;pc, int lev_min, int lev_max, F &amp;&amp;f) -&gt; decltype(f(typename PC::SuperParticleType()))</argsstring>
        <name>ReduceSum</name>
        <param>
          <type>PC const &amp;</type>
          <declname>pc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev_min</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev_max</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>A general reduction method for the particles in a <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> that can run on either CPUs or GPUs. This version operates from the specified lev_min to lev_max. </para>        </briefdescription>
        <detaileddescription>
<para>This version uses &quot;Sum&quot; as the reduction operation. The quantity reduced over is an arbitrary function of a &quot;superparticle&quot;, which contains all the data in the particle type, whether it is stored in AoS or SoA form.</para><para>Note that there is no MPI reduction performed at the end of this operation. Users should manually call the MPI reduction operations described in <ref refid="namespaceamrex_1_1ParallelDescriptor" kindref="compound">ParallelDescriptor</ref> if they want that behavior.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PC</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>a function object</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pc</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> to operate on </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lev_min</parametername>
</parameternamelist>
<parameterdescription>
<para>the minimum level to include </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lev_max</parametername>
</parameternamelist>
<parameterdescription>
<para>the maximum level to include </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>a function that takes a &quot;superparticle&quot; and returns the value to be reduced over all particles. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleReduce.H" line="90" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleReduce.H" bodystart="90" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a7ea00de6fd7be3ddb1b4f841295cac21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PC</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>EnableIf_t&lt; IsParticleContainer&lt; PC &gt;::value, int &gt;</type>
            <declname>foo</declname>
            <defname>foo</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto amrex::ReduceMax</definition>
        <argsstring>(PC const &amp;pc, F &amp;&amp;f) -&gt; decltype(f(typename PC::SuperParticleType()))</argsstring>
        <name>ReduceMax</name>
        <param>
          <type>PC const &amp;</type>
          <declname>pc</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>A general reduction method for the particles in a <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> that can run on either CPUs or GPUs. This version operates over all particles on all levels. </para>        </briefdescription>
        <detaileddescription>
<para>This version uses &quot;Max&quot; as the reduction operation. The quantity reduced over is an arbitrary function of a &quot;superparticle&quot;, which contains all the data in the particle type, whether it is stored in AoS or SoA form.</para><para>Note that there is no MPI reduction performed at the end of this operation. Users should manually call the MPI reduction operations described in <ref refid="namespaceamrex_1_1ParallelDescriptor" kindref="compound">ParallelDescriptor</ref> if they want that behavior.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PC</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>a function object</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pc</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> to operate on </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>a function that takes a &quot;superparticle&quot; and returns the value to be reduced over all particles. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleReduce.H" line="160" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleReduce.H" bodystart="160" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af55bd59d2c594a63ae6bb0136596fb9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PC</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>EnableIf_t&lt; IsParticleContainer&lt; PC &gt;::value, int &gt;</type>
            <declname>foo</declname>
            <defname>foo</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto amrex::ReduceMax</definition>
        <argsstring>(PC const &amp;pc, int lev, F &amp;&amp;f) -&gt; decltype(f(typename PC::SuperParticleType()))</argsstring>
        <name>ReduceMax</name>
        <param>
          <type>PC const &amp;</type>
          <declname>pc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>A general reduction method for the particles in a <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> that can run on either CPUs or GPUs. This version operates only on the specified level. </para>        </briefdescription>
        <detaileddescription>
<para>This version uses &quot;Mas&quot; as the reduction operation. The quantity reduced over is an arbitrary function of a &quot;superparticle&quot;, which contains all the data in the particle type, whether it is stored in AoS or SoA form.</para><para>Note that there is no MPI reduction performed at the end of this operation. Users should manually call the MPI reduction operations described in <ref refid="namespaceamrex_1_1ParallelDescriptor" kindref="compound">ParallelDescriptor</ref> if they want that behavior.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PC</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>a function object</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pc</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> to operate on </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lev</parametername>
</parameternamelist>
<parameterdescription>
<para>the level to operate on </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>a function that takes a &quot;superparticle&quot; and returns the value to be reduced over all particles. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleReduce.H" line="186" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleReduce.H" bodystart="186" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa9bf7aa5f979cd910b5b270070cac8b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PC</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>EnableIf_t&lt; IsParticleContainer&lt; PC &gt;::value, int &gt;</type>
            <declname>foo</declname>
            <defname>foo</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto amrex::ReduceMax</definition>
        <argsstring>(PC const &amp;pc, int lev_min, int lev_max, F &amp;&amp;f) -&gt; decltype(f(typename PC::SuperParticleType()))</argsstring>
        <name>ReduceMax</name>
        <param>
          <type>PC const &amp;</type>
          <declname>pc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev_min</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev_max</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>A general reduction method for the particles in a <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> that can run on either CPUs or GPUs. This version operates from the specified lev_min to lev_max. </para>        </briefdescription>
        <detaileddescription>
<para>This version uses &quot;Max&quot; as the reduction operation. The quantity reduced over is an arbitrary function of a &quot;superparticle&quot;, which contains all the data in the particle type, whether it is stored in AoS or SoA form.</para><para>Note that there is no MPI reduction performed at the end of this operation. Users should manually call the MPI reduction operations described in <ref refid="namespaceamrex_1_1ParallelDescriptor" kindref="compound">ParallelDescriptor</ref> if they want that behavior.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PC</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>a function object</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pc</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> to operate on </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lev_min</parametername>
</parameternamelist>
<parameterdescription>
<para>the minimum level to include </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lev_max</parametername>
</parameternamelist>
<parameterdescription>
<para>the maximum level to include </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>a function that takes a &quot;superparticle&quot; and returns the value to be reduced over all particles. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleReduce.H" line="213" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleReduce.H" bodystart="213" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a3aa271dcaabdcc69a172b422fdc60349" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PC</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>EnableIf_t&lt; IsParticleContainer&lt; PC &gt;::value, int &gt;</type>
            <declname>foo</declname>
            <defname>foo</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto amrex::ReduceMin</definition>
        <argsstring>(PC const &amp;pc, F &amp;&amp;f) -&gt; decltype(f(typename PC::SuperParticleType()))</argsstring>
        <name>ReduceMin</name>
        <param>
          <type>PC const &amp;</type>
          <declname>pc</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>A general reduction method for the particles in a <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> that can run on either CPUs or GPUs. This version operates over all particles on all levels. </para>        </briefdescription>
        <detaileddescription>
<para>This version uses &quot;Min&quot; as the reduction operation. The quantity reduced over is an arbitrary function of a &quot;superparticle&quot;, which contains all the data in the particle type, whether it is stored in AoS or SoA form.</para><para>Note that there is no MPI reduction performed at the end of this operation. Users should manually call the MPI reduction operations described in <ref refid="namespaceamrex_1_1ParallelDescriptor" kindref="compound">ParallelDescriptor</ref> if they want that behavior.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PC</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>a function object</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pc</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> to operate on </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>a function that takes a &quot;superparticle&quot; and returns the value to be reduced over all particles. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleReduce.H" line="284" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleReduce.H" bodystart="284" bodyend="287"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aab38aa5f542e67c840d6e9c6d30d586a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PC</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>EnableIf_t&lt; IsParticleContainer&lt; PC &gt;::value, int &gt;</type>
            <declname>foo</declname>
            <defname>foo</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto amrex::ReduceMin</definition>
        <argsstring>(PC const &amp;pc, int lev, F &amp;&amp;f) -&gt; decltype(f(typename PC::SuperParticleType()))</argsstring>
        <name>ReduceMin</name>
        <param>
          <type>PC const &amp;</type>
          <declname>pc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>A general reduction method for the particles in a <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> that can run on either CPUs or GPUs. This version operates only on the specified level. </para>        </briefdescription>
        <detaileddescription>
<para>This version uses &quot;Min&quot; as the reduction operation. The quantity reduced over is an arbitrary function of a &quot;superparticle&quot;, which contains all the data in the particle type, whether it is stored in AoS or SoA form.</para><para>Note that there is no MPI reduction performed at the end of this operation. Users should manually call the MPI reduction operations described in <ref refid="namespaceamrex_1_1ParallelDescriptor" kindref="compound">ParallelDescriptor</ref> if they want that behavior.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PC</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>a function object</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pc</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> to operate on </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lev</parametername>
</parameternamelist>
<parameterdescription>
<para>the level to operate on </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>a function that takes a &quot;superparticle&quot; and returns the value to be reduced over all particles. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleReduce.H" line="310" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleReduce.H" bodystart="310" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab8f47432b3e35fe46b1b89def917916e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PC</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>EnableIf_t&lt; IsParticleContainer&lt; PC &gt;::value, int &gt;</type>
            <declname>foo</declname>
            <defname>foo</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto amrex::ReduceMin</definition>
        <argsstring>(PC const &amp;pc, int lev_min, int lev_max, F &amp;&amp;f) -&gt; decltype(f(typename PC::SuperParticleType()))</argsstring>
        <name>ReduceMin</name>
        <param>
          <type>PC const &amp;</type>
          <declname>pc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev_min</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev_max</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>A general reduction method for the particles in a <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> that can run on either CPUs or GPUs. This version operates from the specified lev_min to lev_max. </para>        </briefdescription>
        <detaileddescription>
<para>This version uses &quot;Min&quot; as the reduction operation. The quantity reduced over is an arbitrary function of a &quot;superparticle&quot;, which contains all the data in the particle type, whether it is stored in AoS or SoA form.</para><para>Note that there is no MPI reduction performed at the end of this operation. Users should manually call the MPI reduction operations described in <ref refid="namespaceamrex_1_1ParallelDescriptor" kindref="compound">ParallelDescriptor</ref> if they want that behavior.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PC</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>a function object</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pc</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> to operate on </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lev_min</parametername>
</parameternamelist>
<parameterdescription>
<para>the minimum level to include </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lev_max</parametername>
</parameternamelist>
<parameterdescription>
<para>the maximum level to include </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>a function that takes a &quot;superparticle&quot; and returns the value to be reduced over all particles. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleReduce.H" line="337" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleReduce.H" bodystart="337" bodyend="386"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa175f510a09bbc1252a4e1b8f3ac5250" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PC</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>EnableIf_t&lt; IsParticleContainer&lt; PC &gt;::value, int &gt;</type>
            <declname>foo</declname>
            <defname>foo</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool amrex::ReduceLogicalAnd</definition>
        <argsstring>(PC const &amp;pc, F &amp;&amp;f)</argsstring>
        <name>ReduceLogicalAnd</name>
        <param>
          <type>PC const &amp;</type>
          <declname>pc</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>A general reduction method for the particles in a <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> that can run on either CPUs or GPUs. This version operates over all particles on all levels. </para>        </briefdescription>
        <detaileddescription>
<para>This version uses &quot;LogicalAnd&quot; as the reduction operation. The quantity reduced over is an arbitrary function of a &quot;superparticle&quot;, which contains all the data in the particle type, whether it is stored in AoS or SoA form.</para><para>Note that there is no MPI reduction performed at the end of this operation. Users should manually call the MPI reduction operations described in <ref refid="namespaceamrex_1_1ParallelDescriptor" kindref="compound">ParallelDescriptor</ref> if they want that behavior.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PC</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>a function object</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pc</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> to operate on </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>a function that takes a &quot;superparticle&quot; and returns the value to be reduced over all particles. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleReduce.H" line="408" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleReduce.H" bodystart="408" bodyend="411"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a2e4d86e52a629511e02bff646ca60b59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PC</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>EnableIf_t&lt; IsParticleContainer&lt; PC &gt;::value, int &gt;</type>
            <declname>foo</declname>
            <defname>foo</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool amrex::ReduceLogicalAnd</definition>
        <argsstring>(PC const &amp;pc, int lev, F &amp;&amp;f)</argsstring>
        <name>ReduceLogicalAnd</name>
        <param>
          <type>PC const &amp;</type>
          <declname>pc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>A general reduction method for the particles in a <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> that can run on either CPUs or GPUs. This version operates only on the specified level. </para>        </briefdescription>
        <detaileddescription>
<para>This version uses &quot;LogicalAnd&quot; as the reduction operation. The quantity reduced over is an arbitrary function of a &quot;superparticle&quot;, which contains all the data in the particle type, whether it is stored in AoS or SoA form.</para><para>Note that there is no MPI reduction performed at the end of this operation. Users should manually call the MPI reduction operations described in <ref refid="namespaceamrex_1_1ParallelDescriptor" kindref="compound">ParallelDescriptor</ref> if they want that behavior.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PC</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>a function object</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pc</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> to operate on </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lev</parametername>
</parameternamelist>
<parameterdescription>
<para>the level to operate on </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>a function that takes a &quot;superparticle&quot; and returns the value to be reduced over all particles. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleReduce.H" line="434" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleReduce.H" bodystart="434" bodyend="437"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a14d08a69d1ad19e5499277055d469400" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PC</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>EnableIf_t&lt; IsParticleContainer&lt; PC &gt;::value, int &gt;</type>
            <declname>foo</declname>
            <defname>foo</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool amrex::ReduceLogicalAnd</definition>
        <argsstring>(PC const &amp;pc, int lev_min, int lev_max, F &amp;&amp;f)</argsstring>
        <name>ReduceLogicalAnd</name>
        <param>
          <type>PC const &amp;</type>
          <declname>pc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev_min</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev_max</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>A general reduction method for the particles in a <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> that can run on either CPUs or GPUs. This version operates from the specified lev_min to lev_max. </para>        </briefdescription>
        <detaileddescription>
<para>This version uses &quot;LogicalAnd&quot; as the reduction operation. The quantity reduced over is an arbitrary function of a &quot;superparticle&quot;, which contains all the data in the particle type, whether it is stored in AoS or SoA form.</para><para>Note that there is no MPI reduction performed at the end of this operation. Users should manually call the MPI reduction operations described in <ref refid="namespaceamrex_1_1ParallelDescriptor" kindref="compound">ParallelDescriptor</ref> if they want that behavior.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PC</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>a function object</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pc</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> to operate on </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lev_min</parametername>
</parameternamelist>
<parameterdescription>
<para>the minimum level to include </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lev_max</parametername>
</parameternamelist>
<parameterdescription>
<para>the maximum level to include </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>a function that takes a &quot;superparticle&quot; and returns the value to be reduced over all particles. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleReduce.H" line="461" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleReduce.H" bodystart="461" bodyend="508"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a43f13583043013b5751afe1e193cc8b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PC</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>EnableIf_t&lt; IsParticleContainer&lt; PC &gt;::value, int &gt;</type>
            <declname>foo</declname>
            <defname>foo</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool amrex::ReduceLogicalOr</definition>
        <argsstring>(PC const &amp;pc, F &amp;&amp;f)</argsstring>
        <name>ReduceLogicalOr</name>
        <param>
          <type>PC const &amp;</type>
          <declname>pc</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>A general reduction method for the particles in a <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> that can run on either CPUs or GPUs. This version operates over all particles on all levels. </para>        </briefdescription>
        <detaileddescription>
<para>This version uses &quot;LogicalOr&quot; as the reduction operation. The quantity reduced over is an arbitrary function of a &quot;superparticle&quot;, which contains all the data in the particle type, whether it is stored in AoS or SoA form.</para><para>Note that there is no MPI reduction performed at the end of this operation. Users should manually call the MPI reduction operations described in <ref refid="namespaceamrex_1_1ParallelDescriptor" kindref="compound">ParallelDescriptor</ref> if they want that behavior.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PC</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>a function object</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pc</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> to operate on </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>a function that takes a &quot;superparticle&quot; and returns the value to be reduced over all particles. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleReduce.H" line="530" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleReduce.H" bodystart="530" bodyend="533"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a18f76938d120a4d9891cc99e67cab771" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PC</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>EnableIf_t&lt; IsParticleContainer&lt; PC &gt;::value, int &gt;</type>
            <declname>foo</declname>
            <defname>foo</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool amrex::ReduceLogicalOr</definition>
        <argsstring>(PC const &amp;pc, int lev, F &amp;&amp;f)</argsstring>
        <name>ReduceLogicalOr</name>
        <param>
          <type>PC const &amp;</type>
          <declname>pc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>A general reduction method for the particles in a <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> that can run on either CPUs or GPUs. This version operates only on the specified level. </para>        </briefdescription>
        <detaileddescription>
<para>This version uses &quot;LogicalOr&quot; as the reduction operation. The quantity reduced over is an arbitrary function of a &quot;superparticle&quot;, which contains all the data in the particle type, whether it is stored in AoS or SoA form.</para><para>Note that there is no MPI reduction performed at the end of this operation. Users should manually call the MPI reduction operations described in <ref refid="namespaceamrex_1_1ParallelDescriptor" kindref="compound">ParallelDescriptor</ref> if they want that behavior.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PC</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>a function object</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pc</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> to operate on </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lev</parametername>
</parameternamelist>
<parameterdescription>
<para>the level to operate on </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>a function that takes a &quot;superparticle&quot; and returns the value to be reduced over all particles. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleReduce.H" line="556" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleReduce.H" bodystart="556" bodyend="559"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4045ba476918bce64dc92d94e4cda26d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PC</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>EnableIf_t&lt; IsParticleContainer&lt; PC &gt;::value, int &gt;</type>
            <declname>foo</declname>
            <defname>foo</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool amrex::ReduceLogicalOr</definition>
        <argsstring>(PC const &amp;pc, int lev_min, int lev_max, F &amp;&amp;f)</argsstring>
        <name>ReduceLogicalOr</name>
        <param>
          <type>PC const &amp;</type>
          <declname>pc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev_min</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev_max</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>A general reduction method for the particles in a <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> that can run on either CPUs or GPUs. This version operates from the specified lev_min to lev_max. </para>        </briefdescription>
        <detaileddescription>
<para>This version uses &quot;LogicalOr&quot; as the reduction operation. The quantity reduced over is an arbitrary function of a &quot;superparticle&quot;, which contains all the data in the particle type, whether it is stored in AoS or SoA form.</para><para>Note that there is no MPI reduction performed at the end of this operation. Users should manually call the MPI reduction operations described in <ref refid="namespaceamrex_1_1ParallelDescriptor" kindref="compound">ParallelDescriptor</ref> if they want that behavior.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PC</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>a function object</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pc</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> to operate on </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lev_min</parametername>
</parameternamelist>
<parameterdescription>
<para>the minimum level to include </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lev_max</parametername>
</parameternamelist>
<parameterdescription>
<para>the maximum level to include </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>a function that takes a &quot;superparticle&quot; and returns the value to be reduced over all particles. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleReduce.H" line="583" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleReduce.H" bodystart="583" bodyend="631"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a14f61ebac9d7c0ea8b108bad4f0947c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>NSR</declname>
            <defname>NSR</defname>
          </param>
          <param>
            <type>int</type>
            <declname>NSI</declname>
            <defname>NSI</defname>
          </param>
          <param>
            <type>int</type>
            <declname>NAR</declname>
            <defname>NAR</defname>
          </param>
          <param>
            <type>int</type>
            <declname>NAI</declname>
            <defname>NAI</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE void amrex::copyParticle</definition>
        <argsstring>(const ParticleTileData&lt; NSR, NSI, NAR, NAI &gt; &amp;dst, const ConstParticleTileData&lt; NSR, NSI, NAR, NAI &gt; &amp;src, int src_i, int dst_i) noexcept</argsstring>
        <name>copyParticle</name>
        <param>
          <type>const <ref refid="structamrex_1_1ParticleTileData" kindref="compound">ParticleTileData</ref>&lt; NSR, NSI, NAR, NAI &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1ConstParticleTileData" kindref="compound">ConstParticleTileData</ref>&lt; NSR, NSI, NAR, NAI &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>src_i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dst_i</declname>
        </param>
        <briefdescription>
<para>A general single particle copying routine that can run on the GPU. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>NSR</parametername>
</parameternamelist>
<parameterdescription>
<para>number of extra reals in the particle struct </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NSI</parametername>
</parameternamelist>
<parameterdescription>
<para>number of extra ints in the particle struct </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NAR</parametername>
</parameternamelist>
<parameterdescription>
<para>number of reals in the struct-of-arrays </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NAI</parametername>
</parameternamelist>
<parameterdescription>
<para>number of ints in the struct-of-arrays</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination tile </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>the source tile </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src_i</parametername>
</parameternamelist>
<parameterdescription>
<para>the index in the source to read from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst_i</parametername>
</parameternamelist>
<parameterdescription>
<para>the index in the destination to write to </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTransformation.H" line="31" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTransformation.H" bodystart="31" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1abd6c152a85d947aaf35c1a11e5963f37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>NSR</declname>
            <defname>NSR</defname>
          </param>
          <param>
            <type>int</type>
            <declname>NSI</declname>
            <defname>NSI</defname>
          </param>
          <param>
            <type>int</type>
            <declname>NAR</declname>
            <defname>NAR</defname>
          </param>
          <param>
            <type>int</type>
            <declname>NAI</declname>
            <defname>NAI</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE void amrex::copyParticle</definition>
        <argsstring>(const ParticleTileData&lt; NSR, NSI, NAR, NAI &gt; &amp;dst, const ParticleTileData&lt; NSR, NSI, NAR, NAI &gt; &amp;src, int src_i, int dst_i) noexcept</argsstring>
        <name>copyParticle</name>
        <param>
          <type>const <ref refid="structamrex_1_1ParticleTileData" kindref="compound">ParticleTileData</ref>&lt; NSR, NSI, NAR, NAI &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1ParticleTileData" kindref="compound">ParticleTileData</ref>&lt; NSR, NSI, NAR, NAI &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>src_i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dst_i</declname>
        </param>
        <briefdescription>
<para>A general single particle copying routine that can run on the GPU. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>NSR</parametername>
</parameternamelist>
<parameterdescription>
<para>number of extra reals in the particle struct </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NSI</parametername>
</parameternamelist>
<parameterdescription>
<para>number of extra ints in the particle struct </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NAR</parametername>
</parameternamelist>
<parameterdescription>
<para>number of reals in the struct-of-arrays </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NAI</parametername>
</parameternamelist>
<parameterdescription>
<para>number of ints in the struct-of-arrays</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination tile </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>the source tile </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src_i</parametername>
</parameternamelist>
<parameterdescription>
<para>the index in the source to read from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst_i</parametername>
</parameternamelist>
<parameterdescription>
<para>the index in the destination to write to </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTransformation.H" line="65" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTransformation.H" bodystart="65" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a5e761a0c1a6d048bd220a97be10b2f36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>NSR</declname>
            <defname>NSR</defname>
          </param>
          <param>
            <type>int</type>
            <declname>NSI</declname>
            <defname>NSI</defname>
          </param>
          <param>
            <type>int</type>
            <declname>NAR</declname>
            <defname>NAR</defname>
          </param>
          <param>
            <type>int</type>
            <declname>NAI</declname>
            <defname>NAI</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE void amrex::swapParticle</definition>
        <argsstring>(const ParticleTileData&lt; NSR, NSI, NAR, NAI &gt; &amp;dst, const ParticleTileData&lt; NSR, NSI, NAR, NAI &gt; &amp;src, int src_i, int dst_i) noexcept</argsstring>
        <name>swapParticle</name>
        <param>
          <type>const <ref refid="structamrex_1_1ParticleTileData" kindref="compound">ParticleTileData</ref>&lt; NSR, NSI, NAR, NAI &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1ParticleTileData" kindref="compound">ParticleTileData</ref>&lt; NSR, NSI, NAR, NAI &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>src_i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dst_i</declname>
        </param>
        <briefdescription>
<para>A general single particle swapping routine that can run on the GPU. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>NSR</parametername>
</parameternamelist>
<parameterdescription>
<para>number of extra reals in the particle struct </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NSI</parametername>
</parameternamelist>
<parameterdescription>
<para>number of extra ints in the particle struct </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NAR</parametername>
</parameternamelist>
<parameterdescription>
<para>number of reals in the struct-of-arrays </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NAI</parametername>
</parameternamelist>
<parameterdescription>
<para>number of ints in the struct-of-arrays</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination tile </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>the source tile </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src_i</parametername>
</parameternamelist>
<parameterdescription>
<para>the index in the source to read from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst_i</parametername>
</parameternamelist>
<parameterdescription>
<para>the index in the destination to write to </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTransformation.H" line="99" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTransformation.H" bodystart="99" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a2c694692aaba3c4e23ab3067eab1ba44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DstTile</type>
          </param>
          <param>
            <type>typename SrcTile</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::copyParticles</definition>
        <argsstring>(DstTile &amp;dst, const SrcTile &amp;src) noexcept</argsstring>
        <name>copyParticles</name>
        <param>
          <type>DstTile &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1acc23406c7dfc89ca51a4c37a6430bdea" kindref="member">SrcTile</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>Copy particles from src to dst. This version copies all the particles, writing them to the beginning of dst. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DstTile</parametername>
</parameternamelist>
<parameterdescription>
<para>the dst particle tile type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SrcTile</parametername>
</parameternamelist>
<parameterdescription>
<para>the src particle tile type</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination tile </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>the source tile </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>the function that will be applied to each particle </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTransformation.H" line="130" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTransformation.H" bodystart="130" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aebeffed6a37edc4d909acc6ab5cbbe83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DstTile</type>
          </param>
          <param>
            <type>typename SrcTile</type>
          </param>
          <param>
            <type>typename Index</type>
          </param>
          <param>
            <type>typename N</type>
          </param>
          <param>
            <type><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt; std::is_integral&lt; Index &gt;::value, int &gt;</type>
            <declname>foo</declname>
            <defname>foo</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::copyParticles</definition>
        <argsstring>(DstTile &amp;dst, const SrcTile &amp;src, Index src_start, Index dst_start, N n) noexcept</argsstring>
        <name>copyParticles</name>
        <param>
          <type>DstTile &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1acc23406c7dfc89ca51a4c37a6430bdea" kindref="member">SrcTile</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>Index</type>
          <declname>src_start</declname>
        </param>
        <param>
          <type>Index</type>
          <declname>dst_start</declname>
        </param>
        <param>
          <type>N</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Copy particles from src to dst. This version copies n particles starting at index src_start, writing the result starting at dst_start. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DstTile</parametername>
</parameternamelist>
<parameterdescription>
<para>the dst particle tile type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SrcTile</parametername>
</parameternamelist>
<parameterdescription>
<para>the src particle tile type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index type, e.g. unsigned int </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>N</parametername>
</parameternamelist>
<parameterdescription>
<para>the size type, e.g. Long</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination tile </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>the source tile </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src_start</parametername>
</parameternamelist>
<parameterdescription>
<para>the offset at which to start reading particles from src </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst_start</parametername>
</parameternamelist>
<parameterdescription>
<para>the offset at which to start writing particles to dst </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of particles to write </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTransformation.H" line="154" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTransformation.H" bodystart="154" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae03ee3a195d7ee3ebcb19d20f9fdce73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DstTile</type>
          </param>
          <param>
            <type>typename SrcTile</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::transformParticles</definition>
        <argsstring>(DstTile &amp;dst, const SrcTile &amp;src, F &amp;&amp;f) noexcept</argsstring>
        <name>transformParticles</name>
        <param>
          <type>DstTile &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1acc23406c7dfc89ca51a4c37a6430bdea" kindref="member">SrcTile</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Apply the function f to all the particles in src, writing the result to dst. This version does all the particles in src. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DstTile</parametername>
</parameternamelist>
<parameterdescription>
<para>the dst particle tile type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SrcTile</parametername>
</parameternamelist>
<parameterdescription>
<para>the src particle tile type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>a function object</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination tile </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>the source tile </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>the function that will be applied to each particle </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTransformation.H" line="182" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTransformation.H" bodystart="182" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa97130d61a81b34078846228e608f149" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DstTile</type>
          </param>
          <param>
            <type>typename SrcTile</type>
          </param>
          <param>
            <type>typename Index</type>
          </param>
          <param>
            <type>typename N</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt; std::is_integral&lt; Index &gt;::value, int &gt;</type>
            <declname>foo</declname>
            <defname>foo</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::transformParticles</definition>
        <argsstring>(DstTile &amp;dst, const SrcTile &amp;src, Index src_start, Index dst_start, N n, F &amp;&amp;f) noexcept</argsstring>
        <name>transformParticles</name>
        <param>
          <type>DstTile &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1acc23406c7dfc89ca51a4c37a6430bdea" kindref="member">SrcTile</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>Index</type>
          <declname>src_start</declname>
        </param>
        <param>
          <type>Index</type>
          <declname>dst_start</declname>
        </param>
        <param>
          <type>N</type>
          <declname>n</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Apply the function f to particles in src, writing the result to dst. This version applies the function to n particles starting at index src_start, writing the result starting at dst_start. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DstTile</parametername>
</parameternamelist>
<parameterdescription>
<para>the dst particle tile type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SrcTile</parametername>
</parameternamelist>
<parameterdescription>
<para>the src particle tile type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index type, e.g. unsigned int </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>N</parametername>
</parameternamelist>
<parameterdescription>
<para>the size type, e.g. Long </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>a function object</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination tile </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>the source tile </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src_start</parametername>
</parameternamelist>
<parameterdescription>
<para>the offset at which to start reading particles from src </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst_start</parametername>
</parameternamelist>
<parameterdescription>
<para>the offset at which to start writing particles to dst </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>the function that will be applied to each particle </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTransformation.H" line="208" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTransformation.H" bodystart="208" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a5926a5d20c4f511675c02ec18cc7c87a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DstTile1</type>
          </param>
          <param>
            <type>typename DstTile2</type>
          </param>
          <param>
            <type>typename SrcTile</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::transformParticles</definition>
        <argsstring>(DstTile1 &amp;dst1, DstTile2 &amp;dst2, const SrcTile &amp;src, F &amp;&amp;f) noexcept</argsstring>
        <name>transformParticles</name>
        <param>
          <type>DstTile1 &amp;</type>
          <declname>dst1</declname>
        </param>
        <param>
          <type>DstTile2 &amp;</type>
          <declname>dst2</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1acc23406c7dfc89ca51a4c37a6430bdea" kindref="member">SrcTile</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Apply the function f to all the particles in src, writing the results to dst1 and dst2. This version does all the particles in src. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DstTile1</parametername>
</parameternamelist>
<parameterdescription>
<para>the dst1 particle tile type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>DstTile2</parametername>
</parameternamelist>
<parameterdescription>
<para>the dst2 particle tile type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SrcTile</parametername>
</parameternamelist>
<parameterdescription>
<para>the src particle tile type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>a function object</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst1</parametername>
</parameternamelist>
<parameterdescription>
<para>the first destination tile </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst2</parametername>
</parameternamelist>
<parameterdescription>
<para>the second destination tile </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>the source tile </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>the function that will be applied to each particle </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTransformation.H" line="238" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTransformation.H" bodystart="238" bodyend="242"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a2a36a54f57606736a70a2ca6ce223ede" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DstTile1</type>
          </param>
          <param>
            <type>typename DstTile2</type>
          </param>
          <param>
            <type>typename SrcTile</type>
          </param>
          <param>
            <type>typename Index</type>
          </param>
          <param>
            <type>typename N</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt; std::is_integral&lt; Index &gt;::value, int &gt;</type>
            <declname>foo</declname>
            <defname>foo</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::transformParticles</definition>
        <argsstring>(DstTile1 &amp;dst1, DstTile2 &amp;dst2, const SrcTile &amp;src, Index src_start, Index dst1_start, Index dst2_start, N n, F &amp;&amp;f) noexcept</argsstring>
        <name>transformParticles</name>
        <param>
          <type>DstTile1 &amp;</type>
          <declname>dst1</declname>
        </param>
        <param>
          <type>DstTile2 &amp;</type>
          <declname>dst2</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1acc23406c7dfc89ca51a4c37a6430bdea" kindref="member">SrcTile</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>Index</type>
          <declname>src_start</declname>
        </param>
        <param>
          <type>Index</type>
          <declname>dst1_start</declname>
        </param>
        <param>
          <type>Index</type>
          <declname>dst2_start</declname>
        </param>
        <param>
          <type>N</type>
          <declname>n</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Apply the function f to particles in src, writing the results to dst1 and dst2. This version applies the function to n particles starting at index src_start, writing the result starting at dst1_start and dst2_start. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DstTile1</parametername>
</parameternamelist>
<parameterdescription>
<para>the dst1 particle tile type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>DstTile2</parametername>
</parameternamelist>
<parameterdescription>
<para>the dst2 particle tile type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SrcTile</parametername>
</parameternamelist>
<parameterdescription>
<para>the src particle tile type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index type, e.g. unsigned int </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>N</parametername>
</parameternamelist>
<parameterdescription>
<para>the size type, e.g. Long </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>a function object</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst1</parametername>
</parameternamelist>
<parameterdescription>
<para>the first destination tile </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst2</parametername>
</parameternamelist>
<parameterdescription>
<para>the second destination tile </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>the source tile </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src_start</parametername>
</parameternamelist>
<parameterdescription>
<para>the offset at which to start reading particles from src </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst1_start</parametername>
</parameternamelist>
<parameterdescription>
<para>the offset at which to start writing particles to dst1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst2_start</parametername>
</parameternamelist>
<parameterdescription>
<para>the offset at which to start writing particles to dst2 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>the function that will be applied to each particle </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTransformation.H" line="268" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTransformation.H" bodystart="268" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a86fc8a08b6a63681e7751ac0b20bd96b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DstTile</type>
          </param>
          <param>
            <type>typename SrcTile</type>
          </param>
          <param>
            <type>typename Index</type>
          </param>
          <param>
            <type>typename N</type>
          </param>
          <param>
            <type><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt; std::is_integral&lt; Index &gt;::value, int &gt;</type>
            <declname>foo</declname>
            <defname>foo</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>Index</type>
        <definition>Index amrex::filterParticles</definition>
        <argsstring>(DstTile &amp;dst, const SrcTile &amp;src, const Index *mask) noexcept</argsstring>
        <name>filterParticles</name>
        <param>
          <type>DstTile &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1acc23406c7dfc89ca51a4c37a6430bdea" kindref="member">SrcTile</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const Index *</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Conditionally copy particles from src to dst based on the value of mask. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DstTile</parametername>
</parameternamelist>
<parameterdescription>
<para>the dst particle tile type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SrcTile</parametername>
</parameternamelist>
<parameterdescription>
<para>the src particle tile type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index type, e.g. unsigned int</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination tile </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>the source tile </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the mask - 1 means copy, 0 means don&apos;t copy </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTransformation.H" line="297" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTransformation.H" bodystart="297" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a0484051ab2f4dc9ebed16cb4f0ca2817" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DstTile</type>
          </param>
          <param>
            <type>typename SrcTile</type>
          </param>
          <param>
            <type>typename Index</type>
          </param>
          <param>
            <type>typename N</type>
          </param>
          <param>
            <type><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt; std::is_integral&lt; Index &gt;::value, int &gt;</type>
            <declname>foo</declname>
            <defname>foo</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>Index</type>
        <definition>Index amrex::filterParticles</definition>
        <argsstring>(DstTile &amp;dst, const SrcTile &amp;src, const Index *mask, Index src_start, Index dst_start, N n) noexcept</argsstring>
        <name>filterParticles</name>
        <param>
          <type>DstTile &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1acc23406c7dfc89ca51a4c37a6430bdea" kindref="member">SrcTile</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const Index *</type>
          <declname>mask</declname>
        </param>
        <param>
          <type>Index</type>
          <declname>src_start</declname>
        </param>
        <param>
          <type>Index</type>
          <declname>dst_start</declname>
        </param>
        <param>
          <type>N</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Conditionally copy particles from src to dst based on the value of mask. This version conditionally copies n particles starting at index src_start, writing the result starting at dst_start. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DstTile</parametername>
</parameternamelist>
<parameterdescription>
<para>the dst particle tile type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SrcTile</parametername>
</parameternamelist>
<parameterdescription>
<para>the src particle tile type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index type, e.g. unsigned int</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination tile </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>the source tile </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the mask - 1 means copy, 0 means don&apos;t copy </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src_start</parametername>
</parameternamelist>
<parameterdescription>
<para>the offset at which to start reading particles from src </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst_start</parametername>
</parameternamelist>
<parameterdescription>
<para>the offset at which to start writing particles to dst </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of particles to apply the operation to </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTransformation.H" line="321" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTransformation.H" bodystart="321" bodyend="345"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a2a5a940585a53e1b932fcda995db9840" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DstTile</type>
          </param>
          <param>
            <type>typename SrcTile</type>
          </param>
          <param>
            <type>typename Pred</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto amrex::filterParticles</definition>
        <argsstring>(DstTile &amp;dst, const SrcTile &amp;src, Pred &amp;&amp;p) noexcept -&gt; decltype(p(typename SrcTile::ConstParticleTileDataType(), 0))</argsstring>
        <name>filterParticles</name>
        <param>
          <type>DstTile &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1acc23406c7dfc89ca51a4c37a6430bdea" kindref="member">SrcTile</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a046a45c38572313e76a5278418ad94d6" kindref="member">Pred</ref> &amp;&amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Conditionally copy particles from src to dst based on a predicate. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DstTile</parametername>
</parameternamelist>
<parameterdescription>
<para>the dst particle tile type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SrcTile</parametername>
</parameternamelist>
<parameterdescription>
<para>the src particle tile type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Pred</parametername>
</parameternamelist>
<parameterdescription>
<para>a function object</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination tile </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>the source tile </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>predicate function - particles will be copied if p returns true </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTransformation.H" line="360" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTransformation.H" bodystart="360" bodyend="364"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a76a6050b761f9fcee872722bcec7d2c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DstTile</type>
          </param>
          <param>
            <type>typename SrcTile</type>
          </param>
          <param>
            <type>typename Pred</type>
          </param>
          <param>
            <type>typename Index</type>
          </param>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto amrex::filterParticles</definition>
        <argsstring>(DstTile &amp;dst, const SrcTile &amp;src, Pred &amp;&amp;p, Index src_start, Index dst_start, N n) noexcept -&gt; decltype(particle_detail::call_f(p, typename SrcTile::ConstParticleTileDataType(), int</argsstring>
        <name>filterParticles</name>
        <param>
          <type>DstTile &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1acc23406c7dfc89ca51a4c37a6430bdea" kindref="member">SrcTile</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a046a45c38572313e76a5278418ad94d6" kindref="member">Pred</ref> &amp;&amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>Index</type>
          <declname>src_start</declname>
        </param>
        <param>
          <type>Index</type>
          <declname>dst_start</declname>
        </param>
        <param>
          <type>N</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Conditionally copy particles from src to dst based on a predicate. This version conditionally copies n particles starting at index src_start, writing the result starting at dst_start. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DstTile</parametername>
</parameternamelist>
<parameterdescription>
<para>the dst particle tile type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SrcTile</parametername>
</parameternamelist>
<parameterdescription>
<para>the src particle tile type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Pred</parametername>
</parameternamelist>
<parameterdescription>
<para>a function object</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination tile </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>the source tile </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>predicate function - particles will be copied if p returns true </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src_start</parametername>
</parameternamelist>
<parameterdescription>
<para>the offset at which to start reading particles from src </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst_start</parametername>
</parameternamelist>
<parameterdescription>
<para>the offset at which to start writing particles to dst </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of particles to apply the operation to </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTransformation.H" line="384" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTransformation.H" bodystart="384" bodyend="386"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a01d74f2f8ceb510c07cb44c266569781" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> F auto</type>
        <definition>int F auto amrex::filterAndTransformParticles</definition>
        <argsstring>(DstTile &amp;dst, const SrcTile &amp;src, Pred &amp;&amp;p, F &amp;&amp;f) noexcept -&gt; decltype(p(typename SrcTile::ConstParticleTileDataType(), 0))</argsstring>
        <name>filterAndTransformParticles</name>
        <param>
          <type>DstTile &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1acc23406c7dfc89ca51a4c37a6430bdea" kindref="member">SrcTile</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a046a45c38572313e76a5278418ad94d6" kindref="member">Pred</ref> &amp;&amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTransformation.H" line="460" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTransformation.H" bodystart="460" bodyend="477"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a326a3d72298cd5b976db9b5f3d92fba5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DstTile1</type>
          </param>
          <param>
            <type>typename DstTile2</type>
          </param>
          <param>
            <type>typename SrcTile</type>
          </param>
          <param>
            <type>typename Index</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt; std::is_integral&lt; Index &gt;::value, int &gt;</type>
            <declname>foo</declname>
            <defname>foo</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>Index</type>
        <definition>Index amrex::filterAndTransformParticles</definition>
        <argsstring>(DstTile1 &amp;dst1, DstTile2 &amp;dst2, const SrcTile &amp;src, Index *mask, F &amp;&amp;f) noexcept</argsstring>
        <name>filterAndTransformParticles</name>
        <param>
          <type>DstTile1 &amp;</type>
          <declname>dst1</declname>
        </param>
        <param>
          <type>DstTile2 &amp;</type>
          <declname>dst2</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1acc23406c7dfc89ca51a4c37a6430bdea" kindref="member">SrcTile</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>Index *</type>
          <declname>mask</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Conditionally copy particles from src to dst1 and dst2 based on the value of mask. A transformation will also be applied to the particles on copy. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DstTile1</parametername>
</parameternamelist>
<parameterdescription>
<para>the dst1 particle tile type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>DstTile2</parametername>
</parameternamelist>
<parameterdescription>
<para>the dst2 particle tile type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SrcTile</parametername>
</parameternamelist>
<parameterdescription>
<para>the src particle tile type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index type, e.g. unsigned int </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>the transform function type</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst1</parametername>
</parameternamelist>
<parameterdescription>
<para>the first destination tile </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst2</parametername>
</parameternamelist>
<parameterdescription>
<para>the second destination tile </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>the source tile </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the mask - 1 means copy, 0 means don&apos;t copy </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>defines the transformation that will be applied to the particles on copy </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTransformation.H" line="498" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTransformation.H" bodystart="498" bodyend="522"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a7939d1b7f76204c7b70ea282174f89c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DstTile1</type>
          </param>
          <param>
            <type>typename DstTile2</type>
          </param>
          <param>
            <type>typename SrcTile</type>
          </param>
          <param>
            <type>typename Pred</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto amrex::filterAndTransformParticles</definition>
        <argsstring>(DstTile1 &amp;dst1, DstTile2 &amp;dst2, const SrcTile &amp;src, Pred &amp;&amp;p, F &amp;&amp;f) noexcept -&gt; decltype(p(typename SrcTile::ConstParticleTileDataType(), 0))</argsstring>
        <name>filterAndTransformParticles</name>
        <param>
          <type>DstTile1 &amp;</type>
          <declname>dst1</declname>
        </param>
        <param>
          <type>DstTile2 &amp;</type>
          <declname>dst2</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1acc23406c7dfc89ca51a4c37a6430bdea" kindref="member">SrcTile</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a046a45c38572313e76a5278418ad94d6" kindref="member">Pred</ref> &amp;&amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Conditionally copy particles from src to dst1 and dst2 based on a predicate. A transformation will also be applied to the particles on copy. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DstTile1</parametername>
</parameternamelist>
<parameterdescription>
<para>the dst1 particle tile type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>DstTile2</parametername>
</parameternamelist>
<parameterdescription>
<para>the dst2 particle tile type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SrcTile</parametername>
</parameternamelist>
<parameterdescription>
<para>the src particle tile type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index type, e.g. unsigned int </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Pred</parametername>
</parameternamelist>
<parameterdescription>
<para>a function object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>the transform function type</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst1</parametername>
</parameternamelist>
<parameterdescription>
<para>the first destination tile </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst2</parametername>
</parameternamelist>
<parameterdescription>
<para>the second destination tile </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>the source tile </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>predicate function - particles will be copied if p returns true </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>defines the transformation that will be applied to the particles on copy </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTransformation.H" line="543" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTransformation.H" bodystart="543" bodyend="561"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab75c7a4946d605a7072d64407df6a6d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PTile</type>
          </param>
          <param>
            <type>typename N</type>
          </param>
          <param>
            <type>typename Index</type>
          </param>
          <param>
            <type><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt; std::is_integral&lt; Index &gt;::value, int &gt;</type>
            <declname>foo</declname>
            <defname>foo</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::gatherParticles</definition>
        <argsstring>(PTile &amp;dst, const PTile &amp;src, N np, const Index *inds)</argsstring>
        <name>gatherParticles</name>
        <param>
          <type>PTile &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const PTile &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>N</type>
          <declname>np</declname>
        </param>
        <param>
          <type>const Index *</type>
          <declname>inds</declname>
        </param>
        <briefdescription>
<para>Gather particles copies particles into contiguous order from an arbitrary order. Specifically, the particle at the index inds[i] in src will be copied to the index i in dst. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PTile</parametername>
</parameternamelist>
<parameterdescription>
<para>the particle tile type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>N</parametername>
</parameternamelist>
<parameterdescription>
<para>the size type, e.g. Long </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index type, e.g. unsigned int</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination tile </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>the source tile </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of particles </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inds</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the permutation array </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTransformation.H" line="580" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTransformation.H" bodystart="580" bodyend="591"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae05ffbbcc005cc8c081b859226222c78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PTile</type>
          </param>
          <param>
            <type>typename N</type>
          </param>
          <param>
            <type>typename Index</type>
          </param>
          <param>
            <type><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt; std::is_integral&lt; Index &gt;::value, int &gt;</type>
            <declname>foo</declname>
            <defname>foo</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::scatterParticles</definition>
        <argsstring>(PTile &amp;dst, const PTile &amp;src, N np, const Index *inds)</argsstring>
        <name>scatterParticles</name>
        <param>
          <type>PTile &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const PTile &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>N</type>
          <declname>np</declname>
        </param>
        <param>
          <type>const Index *</type>
          <declname>inds</declname>
        </param>
        <briefdescription>
<para>Scatter particles copies particles from contiguous order into an arbitrary order. Specifically, the particle at the index i in src will be copied to the index inds[i] in dst. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PTile</parametername>
</parameternamelist>
<parameterdescription>
<para>the particle tile type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>N</parametername>
</parameternamelist>
<parameterdescription>
<para>the size type, e.g. Long </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index type, e.g. unsigned int</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination tile </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>the source tile </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of particles </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inds</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the permutation array </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTransformation.H" line="610" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTransformation.H" bodystart="610" bodyend="621"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad2e9cbb8f28bbbba7378ec7bf4654b89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>IntVect amrex::computeRefFac</definition>
        <argsstring>(const ParGDBBase *a_gdb, int src_lev, int lev)</argsstring>
        <name>computeRefFac</name>
        <param>
          <type>const <ref refid="classamrex_1_1ParGDBBase" kindref="compound">ParGDBBase</ref> *</type>
          <declname>a_gdb</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>src_lev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleUtil.cpp" line="6" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleUtil.cpp" bodystart="6" bodyend="20"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac6d35da48f520c8ae3f429aee03601c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
        <definition>Vector&lt; int &gt; amrex::computeNeighborProcs</definition>
        <argsstring>(const ParGDBBase *a_gdb, int ngrow)</argsstring>
        <name>computeNeighborProcs</name>
        <param>
          <type>const <ref refid="classamrex_1_1ParGDBBase" kindref="compound">ParGDBBase</ref> *</type>
          <declname>a_gdb</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngrow</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleUtil.cpp" line="22" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleUtil.cpp" bodystart="22" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1acad483c5f0e30f9cd471ad05e1920320" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Iterator</type>
          </param>
          <param>
            <type>EnableIf_t&lt; IsParticleIterator&lt; Iterator &gt;::value, int &gt;</type>
            <declname>foo</declname>
            <defname>foo</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::numParticlesOutOfRange</definition>
        <argsstring>(Iterator const &amp;pti, int nGrow)</argsstring>
        <name>numParticlesOutOfRange</name>
        <param>
          <type>Iterator const &amp;</type>
          <declname>pti</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nGrow</declname>
        </param>
        <briefdescription>
<para>Returns the number of particles that are more than nGrow cells from the box correspond to the input iterator. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>an <ref refid="classamrex_1_1AMReX" kindref="compound">AMReX</ref> ParticleIterator</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>the</parametername>
</parameternamelist>
<parameterdescription>
<para>iterator pointing to the current grid/tile to test </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nGrow</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of grow cells allowed. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleUtil.H" line="70" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleUtil.H" bodystart="70" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a9624cde7b9ad11a1692714a8a2cf4d5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PC</type>
          </param>
          <param>
            <type>EnableIf_t&lt; IsParticleContainer&lt; PC &gt;::value, int &gt;</type>
            <declname>foo</declname>
            <defname>foo</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::numParticlesOutOfRange</definition>
        <argsstring>(PC const &amp;pc, int nGrow)</argsstring>
        <name>numParticlesOutOfRange</name>
        <param>
          <type>PC const &amp;</type>
          <declname>pc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nGrow</declname>
        </param>
        <briefdescription>
<para>Returns the number of particles that are more than nGrow cells from their assigned box. </para>        </briefdescription>
        <detaileddescription>
<para>This version tests over all levels.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PC</parametername>
</parameternamelist>
<parameterdescription>
<para>a type of <ref refid="classamrex_1_1AMReX" kindref="compound">AMReX</ref> particle container.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pc</parametername>
</parameternamelist>
<parameterdescription>
<para>the particle container to test </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nGrow</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of grow cells allowed. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleUtil.H" line="121" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleUtil.H" bodystart="121" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af026262a284dc45b1a535e1d2c3da3d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PC</type>
          </param>
          <param>
            <type>EnableIf_t&lt; IsParticleContainer&lt; PC &gt;::value, int &gt;</type>
            <declname>foo</declname>
            <defname>foo</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::numParticlesOutOfRange</definition>
        <argsstring>(PC const &amp;pc, int lev_min, int lev_max, int nGrow)</argsstring>
        <name>numParticlesOutOfRange</name>
        <param>
          <type>PC const &amp;</type>
          <declname>pc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev_min</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev_max</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nGrow</declname>
        </param>
        <briefdescription>
<para>Returns the number of particles that are more than nGrow cells from their assigned box. </para>        </briefdescription>
        <detaileddescription>
<para>This version goes over only the specified levels</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PC</parametername>
</parameternamelist>
<parameterdescription>
<para>a type of <ref refid="classamrex_1_1AMReX" kindref="compound">AMReX</ref> particle container.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pc</parametername>
</parameternamelist>
<parameterdescription>
<para>the particle container to test </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lev_min</parametername>
</parameternamelist>
<parameterdescription>
<para>the minimum level to test </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lev_max</parametername>
</parameternamelist>
<parameterdescription>
<para>the maximum level to test </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nGrow</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of grow cells allowed. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleUtil.H" line="142" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleUtil.H" bodystart="142" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aede00a5fe66df6418eb44590a33296a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE int amrex::getTileIndex</definition>
        <argsstring>(const IntVect &amp;iv, const Box &amp;box, const bool a_do_tiling, const IntVect &amp;a_tile_size, Box &amp;tbx)</argsstring>
        <name>getTileIndex</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>iv</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>a_do_tiling</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>a_tile_size</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>tbx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleUtil.H" line="164" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleUtil.H" bodystart="164" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a77b016483c8263c1a67e93d79d31da4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE int amrex::numTilesInBox</definition>
        <argsstring>(const Box &amp;box, const bool a_do_tiling, const IntVect &amp;a_tile_size)</argsstring>
        <name>numTilesInBox</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>a_do_tiling</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>a_tile_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleUtil.H" line="212" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleUtil.H" bodystart="212" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6e7a7d55a9760a9b62a5675badced0e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename P</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVect amrex::getParticleCell</definition>
        <argsstring>(P const &amp;p, amrex::GpuArray&lt; amrex::Real, AMREX_SPACEDIM &gt; const &amp;plo, amrex::GpuArray&lt; amrex::Real, AMREX_SPACEDIM &gt; const &amp;dxi, const Box &amp;domain) noexcept</argsstring>
        <name>getParticleCell</name>
        <param>
          <type>P const &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">amrex::GpuArray</ref>&lt; amrex::Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>plo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">amrex::GpuArray</ref>&lt; amrex::Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxi</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>domain</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleUtil.H" line="239" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleUtil.H" bodystart="239" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a7137fe4c56ae26940acfef9783458ec1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename P</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE int amrex::getParticleGrid</definition>
        <argsstring>(P const &amp;p, amrex::Array4&lt; int &gt; const &amp;mask, amrex::GpuArray&lt; amrex::Real, AMREX_SPACEDIM &gt; const &amp;plo, amrex::GpuArray&lt; amrex::Real, AMREX_SPACEDIM &gt; const &amp;dxi, const Box &amp;domain) noexcept</argsstring>
        <name>getParticleGrid</name>
        <param>
          <type>P const &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">amrex::Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; const &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">amrex::GpuArray</ref>&lt; amrex::Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>plo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">amrex::GpuArray</ref>&lt; amrex::Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxi</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>domain</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleUtil.H" line="254" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleUtil.H" bodystart="254" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac7dd72556ee6bd9c3b9372523e9e7082" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename P</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE bool amrex::enforcePeriodic</definition>
        <argsstring>(P &amp;p, amrex::GpuArray&lt; amrex::Real, AMREX_SPACEDIM &gt; const &amp;plo, amrex::GpuArray&lt; amrex::Real, AMREX_SPACEDIM &gt; const &amp;phi, amrex::GpuArray&lt; int, AMREX_SPACEDIM &gt; const &amp;is_per) noexcept</argsstring>
        <name>enforcePeriodic</name>
        <param>
          <type>P &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">amrex::GpuArray</ref>&lt; amrex::Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>plo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">amrex::GpuArray</ref>&lt; amrex::Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">amrex::GpuArray</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>is_per</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleUtil.H" line="266" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleUtil.H" bodystart="266" bodyend="296"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a763ee0c15caf00d0a7f1367b9efee403" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename P</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE void amrex::cic_interpolate</definition>
        <argsstring>(const P &amp;p, amrex::GpuArray&lt; amrex::Real, AMREX_SPACEDIM &gt; const &amp;plo, amrex::GpuArray&lt; amrex::Real, AMREX_SPACEDIM &gt; const &amp;dxi, const amrex::Array4&lt; amrex::Real const &gt; &amp;uccarr, amrex::ParticleReal *val)</argsstring>
        <name>cic_interpolate</name>
        <param>
          <type>const P &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">amrex::GpuArray</ref>&lt; amrex::Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>plo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">amrex::GpuArray</ref>&lt; amrex::Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxi</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1Array4" kindref="compound">amrex::Array4</ref>&lt; amrex::Real const &gt; &amp;</type>
          <declname>uccarr</declname>
        </param>
        <param>
          <type>amrex::ParticleReal *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_TracerParticle_mod_K.H" line="19" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_TracerParticle_mod_K.H" bodystart="19" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4f92c34be0b1fde0295477b1d584a241" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename P</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE void amrex::mac_interpolate</definition>
        <argsstring>(const P &amp;p, amrex::GpuArray&lt; amrex::Real, AMREX_SPACEDIM &gt; const &amp;plo, amrex::GpuArray&lt; amrex::Real, AMREX_SPACEDIM &gt; const &amp;dxi, amrex::GpuArray&lt; amrex::Array4&lt; amrex::Real const &gt;, AMREX_SPACEDIM &gt; const &amp;p_uccarr, amrex::ParticleReal *val)</argsstring>
        <name>mac_interpolate</name>
        <param>
          <type>const P &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">amrex::GpuArray</ref>&lt; amrex::Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>plo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">amrex::GpuArray</ref>&lt; amrex::Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">amrex::GpuArray</ref>&lt; <ref refid="structamrex_1_1Array4" kindref="compound">amrex::Array4</ref>&lt; amrex::Real const &gt;, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>p_uccarr</declname>
        </param>
        <param>
          <type>amrex::ParticleReal *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_TracerParticle_mod_K.H" line="113" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_TracerParticle_mod_K.H" bodystart="113" bodyend="198"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Current Support:<itemizedlist>
<listitem><para>2D + 3D</para></listitem><listitem><para>single + multi-level (w/o nesting)</para></listitem><listitem><para>ghosts (indicator field created using <computeroutput>grow</computeroutput>)</para></listitem><listitem><para>particles</para></listitem></itemizedlist>
</para><para>TODO:<itemizedlist>
<listitem><para>AMR nesting </para></listitem></itemizedlist>
</para>    </detaileddescription>
    <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.cpp" line="51" column="1"/>
  </compounddef>
</doxygen>
